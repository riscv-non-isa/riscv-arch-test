
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Aug 16 08:12:01 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/eman/riscof/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/eman/riscof/riscv-ctg/sample_cgfs/rv32e_b.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rori instruction of the RISC-V RV32Zbb,RV32Zbkb,RV32Zk,RV32Zkn,RV32Zks extension for the rori covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32EZbb,RV32EZbkb,RV32EZk,RV32EZkn,RV32EZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*E.*Zbb.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",rori)

RVTEST_CASE(1,"//check ISA:=regex(.*E.*Zbkb.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",rori)

RVTEST_CASE(2,"//check ISA:=regex(.*.*Zk.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",rori)

RVTEST_CASE(3,"//check ISA:=regex(.*I.*Zkn.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",rori)

RVTEST_CASE(4,"//check ISA:=regex(.*I.*Zks.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",rori)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd, rs1==x1, rd==x1, rs1_val == 0xFFFFFFFF and imm_val == 0x02 
// opcode: rori ; op1:x1; dest:x1; op1val:0xffffffff;  immval:0x2
TEST_IMM_OP( rori, x1, x1, 0x00000000, 0xffffffff, 0x2, x5, 0*XLEN/8, x3)

inst_1:
// rs1 != rd, rs1==x15, rd==x9, rs1_val == 0xFFFFFFFE and imm_val == 0x1E 
// opcode: rori ; op1:x15; dest:x9; op1val:0xfffffffe;  immval:0x1e
TEST_IMM_OP( rori, x9, x15, 0x00000000, 0xfffffffe, 0x1e, x5, 1*XLEN/8, x3)

inst_2:
// rs1==x0, rd==x4, rs1_val == 0xFFFFFFFD and imm_val == 0x00 
// opcode: rori ; op1:x0; dest:x4; op1val:0x0;  immval:0x0
TEST_IMM_OP( rori, x4, x0, 0x00000000, 0x0, 0x0, x5, 2*XLEN/8, x3)

inst_3:
// rs1==x7, rd==x0, rs1_val == 0xFFFFFFF9 and imm_val == 0x1D 
// opcode: rori ; op1:x7; dest:x0; op1val:0xfffffff9;  immval:0x1d
TEST_IMM_OP( rori, x0, x7, 0x00000000, 0xfffffff9, 0x1d, x5, 3*XLEN/8, x3)

inst_4:
// rs1==x11, rd==x8, rs1_val == 0xFFFFFFF2 and imm_val == 0x1F 
// opcode: rori ; op1:x11; dest:x8; op1val:0xfffffff2;  immval:0x1f
TEST_IMM_OP( rori, x8, x11, 0x00000000, 0xfffffff2, 0x1f, x5, 4*XLEN/8, x3)

inst_5:
// rs1==x9, rd==x6, rs1_val == 0xFFFFFFE8 and imm_val == 0x11 
// opcode: rori ; op1:x9; dest:x6; op1val:0xffffffe8;  immval:0x11
TEST_IMM_OP( rori, x6, x9, 0x00000000, 0xffffffe8, 0x11, x5, 5*XLEN/8, x3)

inst_6:
// rs1==x2, rd==x7, rs1_val == 0x797D76DF and imm_val == 0x11 
// opcode: rori ; op1:x2; dest:x7; op1val:0x797d76df;  immval:0x11
TEST_IMM_OP( rori, x7, x2, 0x00000000, 0x797d76df, 0x11, x5, 6*XLEN/8, x3)

inst_7:
// rs1==x8, rd==x15, rs1_val == 0x50A03C5A and imm_val == 0x16 
// opcode: rori ; op1:x8; dest:x15; op1val:0x50a03c5a;  immval:0x16
TEST_IMM_OP( rori, x15, x8, 0x00000000, 0x50a03c5a, 0x16, x5, 7*XLEN/8, x3)

inst_8:
// rs1==x12, rd==x2, rs1_val == 0x9205D39C and imm_val == 0x18 
// opcode: rori ; op1:x12; dest:x2; op1val:0x9205d39c;  immval:0x18
TEST_IMM_OP( rori, x2, x12, 0x00000000, 0x9205d39c, 0x18, x5, 8*XLEN/8, x3)

inst_9:
// rs1==x4, rd==x12, rs1_val == 0x163DFF98 and imm_val == 0x17 
// opcode: rori ; op1:x4; dest:x12; op1val:0x163dff98;  immval:0x17
TEST_IMM_OP( rori, x12, x4, 0x00000000, 0x163dff98, 0x17, x5, 9*XLEN/8, x2)

inst_10:
// rs1==x14, rd==x3, rs1_val == 0xB87A9E30 and imm_val == 0x11 
// opcode: rori ; op1:x14; dest:x3; op1val:0xb87a9e30;  immval:0x11
TEST_IMM_OP( rori, x3, x14, 0x00000000, 0xb87a9e30, 0x11, x5, 10*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_11:
// rs1==x10, rd==x11, rs1_val == 0x96CDF1A0 and imm_val == 0x1D 
// opcode: rori ; op1:x10; dest:x11; op1val:0x96cdf1a0;  immval:0x1d
TEST_IMM_OP( rori, x11, x10, 0x00000000, 0x96cdf1a0, 0x1d, x1, 0*XLEN/8, x2)

inst_12:
// rs1==x5, rd==x13, rs1_val == 0x32AB8740 and imm_val == 0x0E 
// opcode: rori ; op1:x5; dest:x13; op1val:0x32ab8740;  immval:0xe
TEST_IMM_OP( rori, x13, x5, 0x00000000, 0x32ab8740, 0xe, x1, 1*XLEN/8, x2)

inst_13:
// rs1==x3, rd==x5, rs1_val == 0x72C58380 and imm_val == 0x00 
// opcode: rori ; op1:x3; dest:x5; op1val:0x72c58380;  immval:0x0
TEST_IMM_OP( rori, x5, x3, 0x00000000, 0x72c58380, 0x0, x1, 2*XLEN/8, x2)

inst_14:
// rs1==x13, rd==x10, rs1_val == 0x4C56BB00 and imm_val == 0x09 
// opcode: rori ; op1:x13; dest:x10; op1val:0x4c56bb00;  immval:0x9
TEST_IMM_OP( rori, x10, x13, 0x00000000, 0x4c56bb00, 0x9, x1, 3*XLEN/8, x2)

inst_15:
// rs1==x6, rd==x14, rs1_val == 0xC1B7AE00 and imm_val == 0x1C 
// opcode: rori ; op1:x6; dest:x14; op1val:0xc1b7ae00;  immval:0x1c
TEST_IMM_OP( rori, x14, x6, 0x00000000, 0xc1b7ae00, 0x1c, x1, 4*XLEN/8, x2)

inst_16:
// rs1_val == 0x7AA5E400 and imm_val == 0x0A 
// opcode: rori ; op1:x14; dest:x15; op1val:0x7aa5e400;  immval:0xa
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x7aa5e400, 0xa, x1, 5*XLEN/8, x2)

inst_17:
// rs1_val == 0xAA3D6800 and imm_val == 0x0D 
// opcode: rori ; op1:x14; dest:x15; op1val:0xaa3d6800;  immval:0xd
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xaa3d6800, 0xd, x1, 6*XLEN/8, x2)

inst_18:
// rs1_val == 0xF1C6B000 and imm_val == 0x0C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf1c6b000;  immval:0xc
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf1c6b000, 0xc, x1, 7*XLEN/8, x2)

inst_19:
// rs1_val == 0x33BC2000 and imm_val == 0x15 
// opcode: rori ; op1:x14; dest:x15; op1val:0x33bc2000;  immval:0x15
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x33bc2000, 0x15, x1, 8*XLEN/8, x2)

inst_20:
// rs1_val == 0xA6C04000 and imm_val == 0x19 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa6c04000;  immval:0x19
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa6c04000, 0x19, x1, 9*XLEN/8, x2)

inst_21:
// rs1_val == 0xCD2F8000 and imm_val == 0x05 
// opcode: rori ; op1:x14; dest:x15; op1val:0xcd2f8000;  immval:0x5
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xcd2f8000, 0x5, x1, 10*XLEN/8, x2)

inst_22:
// rs1_val == 0x405D0000 and imm_val == 0x03 
// opcode: rori ; op1:x14; dest:x15; op1val:0x405d0000;  immval:0x3
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x405d0000, 0x3, x1, 11*XLEN/8, x2)

inst_23:
// rs1_val == 0xA56A0000 and imm_val == 0x0E 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa56a0000;  immval:0xe
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa56a0000, 0xe, x1, 12*XLEN/8, x2)

inst_24:
// rs1_val == 0x55440000 and imm_val == 0x1B 
// opcode: rori ; op1:x14; dest:x15; op1val:0x55440000;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x55440000, 0x1b, x1, 13*XLEN/8, x2)

inst_25:
// rs1_val == 0x46880000 and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0x46880000;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x46880000, 0x1c, x1, 14*XLEN/8, x2)

inst_26:
// rs1_val == 0xC7900000 and imm_val == 0x1B 
// opcode: rori ; op1:x14; dest:x15; op1val:0xc7900000;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xc7900000, 0x1b, x1, 15*XLEN/8, x2)

inst_27:
// rs1_val == 0xA3200000 and imm_val == 0x08 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa3200000;  immval:0x8
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa3200000, 0x8, x1, 16*XLEN/8, x2)

inst_28:
// rs1_val == 0xC8C00000 and imm_val == 0x14 
// opcode: rori ; op1:x14; dest:x15; op1val:0xc8c00000;  immval:0x14
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xc8c00000, 0x14, x1, 17*XLEN/8, x2)

inst_29:
// rs1_val == 0xD8800000 and imm_val == 0x0A 
// opcode: rori ; op1:x14; dest:x15; op1val:0xd8800000;  immval:0xa
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xd8800000, 0xa, x1, 18*XLEN/8, x2)

inst_30:
// rs1_val == 0xFD000000 and imm_val == 0x03 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfd000000;  immval:0x3
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfd000000, 0x3, x1, 19*XLEN/8, x2)

inst_31:
// rs1_val == 0x82000000 and imm_val == 0x0A 
// opcode: rori ; op1:x14; dest:x15; op1val:0x82000000;  immval:0xa
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x82000000, 0xa, x1, 20*XLEN/8, x2)

inst_32:
// rs1_val == 0xF4000000 and imm_val == 0x05 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf4000000;  immval:0x5
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf4000000, 0x5, x1, 21*XLEN/8, x2)

inst_33:
// rs1_val == 0x08000000 and imm_val == 0x1A 
// opcode: rori ; op1:x14; dest:x15; op1val:0x8000000;  immval:0x1a
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x8000000, 0x1a, x1, 22*XLEN/8, x2)

inst_34:
// rs1_val == 0xB0000000 and imm_val == 0x1E 
// opcode: rori ; op1:x14; dest:x15; op1val:0xb0000000;  immval:0x1e
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xb0000000, 0x1e, x1, 23*XLEN/8, x2)

inst_35:
// rs1_val == 0x60000000 and imm_val == 0x18 
// opcode: rori ; op1:x14; dest:x15; op1val:0x60000000;  immval:0x18
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x60000000, 0x18, x1, 24*XLEN/8, x2)

inst_36:
// rs1_val == 0x40000000 and imm_val == 0x01 
// opcode: rori ; op1:x14; dest:x15; op1val:0x40000000;  immval:0x1
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x40000000, 0x1, x1, 25*XLEN/8, x2)

inst_37:
// rs1_val == 0x80000000 and imm_val == 0x05 
// opcode: rori ; op1:x14; dest:x15; op1val:0x80000000;  immval:0x5
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x80000000, 0x5, x1, 26*XLEN/8, x2)

inst_38:
// rs1_val == 0x00000000 and imm_val == 0x0C 
// opcode: rori ; op1:x14; dest:x15; op1val:0x0;  immval:0xc
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x0, 0xc, x1, 27*XLEN/8, x2)

inst_39:
// imm_val == 0x1B and rs1_val == 0xA9E16E27 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa9e16e27;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa9e16e27, 0x1b, x1, 28*XLEN/8, x2)

inst_40:
// imm_val == 0x1A and rs1_val == 0xF0EB21AA 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf0eb21aa;  immval:0x1a
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf0eb21aa, 0x1a, x1, 29*XLEN/8, x2)

inst_41:
// imm_val == 0x14 and rs1_val == 0xB0AB577A 
// opcode: rori ; op1:x14; dest:x15; op1val:0xb0ab577a;  immval:0x14
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xb0ab577a, 0x14, x1, 30*XLEN/8, x2)

inst_42:
// imm_val == 0x18 and rs1_val == 0x4F55C73D 
// opcode: rori ; op1:x14; dest:x15; op1val:0x4f55c73d;  immval:0x18
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x4f55c73d, 0x18, x1, 31*XLEN/8, x2)

inst_43:
// imm_val == 0x10 and rs1_val == 0x3C272728 
// opcode: rori ; op1:x14; dest:x15; op1val:0x3c272728;  immval:0x10
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x3c272728, 0x10, x1, 32*XLEN/8, x2)

inst_44:
// imm_val == 0x00 and rs1_val == 0x2DEDB6A7 
// opcode: rori ; op1:x14; dest:x15; op1val:0x2dedb6a7;  immval:0x0
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x2dedb6a7, 0x0, x1, 33*XLEN/8, x2)

inst_45:
// rs1_val == 0xFFFFFFFF and imm_val == 0x12 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffffffff;  immval:0x12
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffffffff, 0x12, x1, 34*XLEN/8, x2)

inst_46:
// rs1_val == 0x7FFFFFFF and imm_val == 0x0B 
// opcode: rori ; op1:x14; dest:x15; op1val:0x7fffffff;  immval:0xb
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x7fffffff, 0xb, x1, 35*XLEN/8, x2)

inst_47:
// rs1_val == 0xBFFFFFFF and imm_val == 0x0E 
// opcode: rori ; op1:x14; dest:x15; op1val:0xbfffffff;  immval:0xe
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xbfffffff, 0xe, x1, 36*XLEN/8, x2)

inst_48:
// rs1_val == 0x9FFFFFFF and imm_val == 0x09 
// opcode: rori ; op1:x14; dest:x15; op1val:0x9fffffff;  immval:0x9
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x9fffffff, 0x9, x1, 37*XLEN/8, x2)

inst_49:
// rs1_val == 0xCFFFFFFF and imm_val == 0x0E 
// opcode: rori ; op1:x14; dest:x15; op1val:0xcfffffff;  immval:0xe
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xcfffffff, 0xe, x1, 38*XLEN/8, x2)

inst_50:
// rs1_val == 0xA7FFFFFF and imm_val == 0x0B 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa7ffffff;  immval:0xb
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa7ffffff, 0xb, x1, 39*XLEN/8, x2)

inst_51:
// rs1_val == 0x23FFFFFF and imm_val == 0x04 
// opcode: rori ; op1:x14; dest:x15; op1val:0x23ffffff;  immval:0x4
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x23ffffff, 0x4, x1, 40*XLEN/8, x2)

inst_52:
// rs1_val == 0x89FFFFFF and imm_val == 0x0D 
// opcode: rori ; op1:x14; dest:x15; op1val:0x89ffffff;  immval:0xd
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x89ffffff, 0xd, x1, 41*XLEN/8, x2)

inst_53:
// rs1_val == 0xBEFFFFFF and imm_val == 0x12 
// opcode: rori ; op1:x14; dest:x15; op1val:0xbeffffff;  immval:0x12
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xbeffffff, 0x12, x1, 42*XLEN/8, x2)

inst_54:
// rs1_val == 0x077FFFFF and imm_val == 0x1B 
// opcode: rori ; op1:x14; dest:x15; op1val:0x77fffff;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x77fffff, 0x1b, x1, 43*XLEN/8, x2)

inst_55:
// rs1_val == 0x203FFFFF and imm_val == 0x00 
// opcode: rori ; op1:x14; dest:x15; op1val:0x203fffff;  immval:0x0
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x203fffff, 0x0, x1, 44*XLEN/8, x2)

inst_56:
// rs1_val == 0xFE1FFFFF and imm_val == 0x11 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfe1fffff;  immval:0x11
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfe1fffff, 0x11, x1, 45*XLEN/8, x2)

inst_57:
// rs1_val == 0xD58FFFFF and imm_val == 0x09 
// opcode: rori ; op1:x14; dest:x15; op1val:0xd58fffff;  immval:0x9
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xd58fffff, 0x9, x1, 46*XLEN/8, x2)

inst_58:
// rs1_val == 0x15B7FFFF and imm_val == 0x10 
// opcode: rori ; op1:x14; dest:x15; op1val:0x15b7ffff;  immval:0x10
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x15b7ffff, 0x10, x1, 47*XLEN/8, x2)

inst_59:
// rs1_val == 0xD38BFFFF and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xd38bffff;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xd38bffff, 0x1c, x1, 48*XLEN/8, x2)

inst_60:
// rs1_val == 0xBEA5FFFF and imm_val == 0x1B 
// opcode: rori ; op1:x14; dest:x15; op1val:0xbea5ffff;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xbea5ffff, 0x1b, x1, 49*XLEN/8, x2)

inst_61:
// rs1_val == 0xF306FFFF and imm_val == 0x08 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf306ffff;  immval:0x8
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf306ffff, 0x8, x1, 50*XLEN/8, x2)

inst_62:
// rs1_val == 0xCB347FFF and imm_val == 0x10 
// opcode: rori ; op1:x14; dest:x15; op1val:0xcb347fff;  immval:0x10
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xcb347fff, 0x10, x1, 51*XLEN/8, x2)

inst_63:
// rs1_val == 0x5B11BFFF and imm_val == 0x0E 
// opcode: rori ; op1:x14; dest:x15; op1val:0x5b11bfff;  immval:0xe
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x5b11bfff, 0xe, x1, 52*XLEN/8, x2)

inst_64:
// rs1_val == 0x7C9DDFFF and imm_val == 0x1B 
// opcode: rori ; op1:x14; dest:x15; op1val:0x7c9ddfff;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x7c9ddfff, 0x1b, x1, 53*XLEN/8, x2)

inst_65:
// rs1_val == 0xABB4CFFF and imm_val == 0x17 
// opcode: rori ; op1:x14; dest:x15; op1val:0xabb4cfff;  immval:0x17
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xabb4cfff, 0x17, x1, 54*XLEN/8, x2)

inst_66:
// rs1_val == 0xE37D37FF and imm_val == 0x1B 
// opcode: rori ; op1:x14; dest:x15; op1val:0xe37d37ff;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xe37d37ff, 0x1b, x1, 55*XLEN/8, x2)

inst_67:
// rs1_val == 0xA37E33FF and imm_val == 0x14 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa37e33ff;  immval:0x14
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa37e33ff, 0x14, x1, 56*XLEN/8, x2)

inst_68:
// rs1_val == 0xA7BE99FF and imm_val == 0x07 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa7be99ff;  immval:0x7
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa7be99ff, 0x7, x1, 57*XLEN/8, x2)

inst_69:
// rs1_val == 0x589218FF and imm_val == 0x10 
// opcode: rori ; op1:x14; dest:x15; op1val:0x589218ff;  immval:0x10
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x589218ff, 0x10, x1, 58*XLEN/8, x2)

inst_70:
// rs1_val == 0xB0E04E7F and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xb0e04e7f;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xb0e04e7f, 0x1c, x1, 59*XLEN/8, x2)

inst_71:
// rs1_val == 0x8DE1C73F and imm_val == 0x08 
// opcode: rori ; op1:x14; dest:x15; op1val:0x8de1c73f;  immval:0x8
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x8de1c73f, 0x8, x1, 60*XLEN/8, x2)

inst_72:
// rs1_val == 0x70BCB8DF and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0x70bcb8df;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x70bcb8df, 0x1c, x1, 61*XLEN/8, x2)

inst_73:
// rs1_val == 0x8935B82F and imm_val == 0x0B 
// opcode: rori ; op1:x14; dest:x15; op1val:0x8935b82f;  immval:0xb
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x8935b82f, 0xb, x1, 62*XLEN/8, x2)

inst_74:
// rs1_val == 0x4B1634E7 and imm_val == 0x0C 
// opcode: rori ; op1:x14; dest:x15; op1val:0x4b1634e7;  immval:0xc
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x4b1634e7, 0xc, x1, 63*XLEN/8, x2)

inst_75:
// rs1_val == 0x2DEDF123 and imm_val == 0x16 
// opcode: rori ; op1:x14; dest:x15; op1val:0x2dedf123;  immval:0x16
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x2dedf123, 0x16, x1, 64*XLEN/8, x2)

inst_76:
// rs1_val == 0x40D90A1D and imm_val == 0x17 
// opcode: rori ; op1:x14; dest:x15; op1val:0x40d90a1d;  immval:0x17
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x40d90a1d, 0x17, x1, 65*XLEN/8, x2)

inst_77:
// rs1_val == 0x759F1B44 and imm_val == 0x10 
// opcode: rori ; op1:x14; dest:x15; op1val:0x759f1b44;  immval:0x10
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x759f1b44, 0x10, x1, 66*XLEN/8, x2)

inst_78:
// imm_val == 0x1F and rs1_val == 0x47B7097B 
// opcode: rori ; op1:x14; dest:x15; op1val:0x47b7097b;  immval:0x1f
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x47b7097b, 0x1f, x1, 67*XLEN/8, x2)

inst_79:
// imm_val == 0x0F and rs1_val == 0x5DCF019D 
// opcode: rori ; op1:x14; dest:x15; op1val:0x5dcf019d;  immval:0xf
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x5dcf019d, 0xf, x1, 68*XLEN/8, x2)

inst_80:
// imm_val == 0x07 and rs1_val == 0x76B1FD3D 
// opcode: rori ; op1:x14; dest:x15; op1val:0x76b1fd3d;  immval:0x7
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x76b1fd3d, 0x7, x1, 69*XLEN/8, x2)

inst_81:
// imm_val == 0x03 and rs1_val == 0xB808A677 
// opcode: rori ; op1:x14; dest:x15; op1val:0xb808a677;  immval:0x3
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xb808a677, 0x3, x1, 70*XLEN/8, x2)

inst_82:
// imm_val == 0x1D and rs1_val == 0xDE14BFF2 
// opcode: rori ; op1:x14; dest:x15; op1val:0xde14bff2;  immval:0x1d
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xde14bff2, 0x1d, x1, 71*XLEN/8, x2)

inst_83:
// imm_val == 0x08 and rs1_val == 0x24496FE3 
// opcode: rori ; op1:x14; dest:x15; op1val:0x24496fe3;  immval:0x8
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x24496fe3, 0x8, x1, 72*XLEN/8, x2)

inst_84:
// rs1_val == 0x00000000 and imm_val == 0x1D 
// opcode: rori ; op1:x14; dest:x15; op1val:0x0;  immval:0x1d
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x0, 0x1d, x1, 73*XLEN/8, x2)

inst_85:
// rs1_val == 0x00000001 and imm_val == 0x0C 
// opcode: rori ; op1:x14; dest:x15; op1val:0x1;  immval:0xc
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x1, 0xc, x1, 74*XLEN/8, x2)

inst_86:
// rs1_val == 0x00000003 and imm_val == 0x1E 
// opcode: rori ; op1:x14; dest:x15; op1val:0x3;  immval:0x1e
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x3, 0x1e, x1, 75*XLEN/8, x2)

inst_87:
// rs1_val == 0x00000006 and imm_val == 0x0B 
// opcode: rori ; op1:x14; dest:x15; op1val:0x6;  immval:0xb
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x6, 0xb, x1, 76*XLEN/8, x2)

inst_88:
// rs1_val == 0x0000000C and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xc;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xc, 0x1c, x1, 77*XLEN/8, x2)

inst_89:
// rs1_val == 0x00000012 and imm_val == 0x09 
// opcode: rori ; op1:x14; dest:x15; op1val:0x12;  immval:0x9
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x12, 0x9, x1, 78*XLEN/8, x2)

inst_90:
// rs1_val == 0x00000026 and imm_val == 0x02 
// opcode: rori ; op1:x14; dest:x15; op1val:0x26;  immval:0x2
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x26, 0x2, x1, 79*XLEN/8, x2)

inst_91:
// rs1_val == 0x0000004C and imm_val == 0x19 
// opcode: rori ; op1:x14; dest:x15; op1val:0x4c;  immval:0x19
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x4c, 0x19, x1, 80*XLEN/8, x2)

inst_92:
// rs1_val == 0x000000B9 and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xb9;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xb9, 0x1c, x1, 81*XLEN/8, x2)

inst_93:
// rs1_val == 0x00000197 and imm_val == 0x0A 
// opcode: rori ; op1:x14; dest:x15; op1val:0x197;  immval:0xa
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x197, 0xa, x1, 82*XLEN/8, x2)

inst_94:
// rs1_val == 0x000002A7 and imm_val == 0x00 
// opcode: rori ; op1:x14; dest:x15; op1val:0x2a7;  immval:0x0
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x2a7, 0x0, x1, 83*XLEN/8, x2)

inst_95:
// rs1_val == 0x000005D1 and imm_val == 0x04 
// opcode: rori ; op1:x14; dest:x15; op1val:0x5d1;  immval:0x4
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x5d1, 0x4, x1, 84*XLEN/8, x2)

inst_96:
// rs1_val == 0x00000DD4 and imm_val == 0x02 
// opcode: rori ; op1:x14; dest:x15; op1val:0xdd4;  immval:0x2
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xdd4, 0x2, x1, 85*XLEN/8, x2)

inst_97:
// rs1_val == 0x00001D0C and imm_val == 0x0F 
// opcode: rori ; op1:x14; dest:x15; op1val:0x1d0c;  immval:0xf
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x1d0c, 0xf, x1, 86*XLEN/8, x2)

inst_98:
// rs1_val == 0x00003226 and imm_val == 0x01 
// opcode: rori ; op1:x14; dest:x15; op1val:0x3226;  immval:0x1
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x3226, 0x1, x1, 87*XLEN/8, x2)

inst_99:
// rs1_val == 0x00005CC1 and imm_val == 0x1D 
// opcode: rori ; op1:x14; dest:x15; op1val:0x5cc1;  immval:0x1d
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x5cc1, 0x1d, x1, 88*XLEN/8, x2)

inst_100:
// rs1_val == 0x0000F614 and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf614;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf614, 0x1c, x1, 89*XLEN/8, x2)

inst_101:
// rs1_val == 0x00011E24 and imm_val == 0x0C 
// opcode: rori ; op1:x14; dest:x15; op1val:0x11e24;  immval:0xc
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x11e24, 0xc, x1, 90*XLEN/8, x2)

inst_102:
// rs1_val == 0x00035161 and imm_val == 0x0E 
// opcode: rori ; op1:x14; dest:x15; op1val:0x35161;  immval:0xe
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x35161, 0xe, x1, 91*XLEN/8, x2)

inst_103:
// rs1_val == 0x0006284E and imm_val == 0x12 
// opcode: rori ; op1:x14; dest:x15; op1val:0x6284e;  immval:0x12
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x6284e, 0x12, x1, 92*XLEN/8, x2)

inst_104:
// rs1_val == 0x0009222A and imm_val == 0x00 
// opcode: rori ; op1:x14; dest:x15; op1val:0x9222a;  immval:0x0
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x9222a, 0x0, x1, 93*XLEN/8, x2)

inst_105:
// rs1_val == 0x00164AF0 and imm_val == 0x05 
// opcode: rori ; op1:x14; dest:x15; op1val:0x164af0;  immval:0x5
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x164af0, 0x5, x1, 94*XLEN/8, x2)

inst_106:
// rs1_val == 0x00339238 and imm_val == 0x11 
// opcode: rori ; op1:x14; dest:x15; op1val:0x339238;  immval:0x11
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x339238, 0x11, x1, 95*XLEN/8, x2)

inst_107:
// rs1_val == 0x0062A6B3 and imm_val == 0x05 
// opcode: rori ; op1:x14; dest:x15; op1val:0x62a6b3;  immval:0x5
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x62a6b3, 0x5, x1, 96*XLEN/8, x2)

inst_108:
// rs1_val == 0x00B302FD and imm_val == 0x10 
// opcode: rori ; op1:x14; dest:x15; op1val:0xb302fd;  immval:0x10
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xb302fd, 0x10, x1, 97*XLEN/8, x2)

inst_109:
// rs1_val == 0x01B601FD and imm_val == 0x0E 
// opcode: rori ; op1:x14; dest:x15; op1val:0x1b601fd;  immval:0xe
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x1b601fd, 0xe, x1, 98*XLEN/8, x2)

inst_110:
// rs1_val == 0x034C687B and imm_val == 0x12 
// opcode: rori ; op1:x14; dest:x15; op1val:0x34c687b;  immval:0x12
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x34c687b, 0x12, x1, 99*XLEN/8, x2)

inst_111:
// rs1_val == 0x079DD25B and imm_val == 0x04 
// opcode: rori ; op1:x14; dest:x15; op1val:0x79dd25b;  immval:0x4
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x79dd25b, 0x4, x1, 100*XLEN/8, x2)

inst_112:
// rs1_val == 0x082A1750 and imm_val == 0x06 
// opcode: rori ; op1:x14; dest:x15; op1val:0x82a1750;  immval:0x6
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x82a1750, 0x6, x1, 101*XLEN/8, x2)

inst_113:
// rs1_val == 0x16809A12 and imm_val == 0x06 
// opcode: rori ; op1:x14; dest:x15; op1val:0x16809a12;  immval:0x6
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x16809a12, 0x6, x1, 102*XLEN/8, x2)

inst_114:
// rs1_val == 0x38B9B45D and imm_val == 0x12 
// opcode: rori ; op1:x14; dest:x15; op1val:0x38b9b45d;  immval:0x12
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x38b9b45d, 0x12, x1, 103*XLEN/8, x2)

inst_115:
// rs1_val == 0x62F28D1B and imm_val == 0x04 
// opcode: rori ; op1:x14; dest:x15; op1val:0x62f28d1b;  immval:0x4
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x62f28d1b, 0x4, x1, 104*XLEN/8, x2)

inst_116:
// rs1_val == 0xF542441E and imm_val == 0x01 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf542441e;  immval:0x1
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf542441e, 0x1, x1, 105*XLEN/8, x2)

inst_117:
// imm_val == 0x00 and rs1_val == 0xAF5570EE 
// opcode: rori ; op1:x14; dest:x15; op1val:0xaf5570ee;  immval:0x0
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xaf5570ee, 0x0, x1, 106*XLEN/8, x2)

inst_118:
// imm_val == 0x01 and rs1_val == 0xE90794DF 
// opcode: rori ; op1:x14; dest:x15; op1val:0xe90794df;  immval:0x1
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xe90794df, 0x1, x1, 107*XLEN/8, x2)

inst_119:
// imm_val == 0x02 and rs1_val == 0xB57A6A1D 
// opcode: rori ; op1:x14; dest:x15; op1val:0xb57a6a1d;  immval:0x2
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xb57a6a1d, 0x2, x1, 108*XLEN/8, x2)

inst_120:
// imm_val == 0x06 and rs1_val == 0xA123F501 
// opcode: rori ; op1:x14; dest:x15; op1val:0xa123f501;  immval:0x6
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xa123f501, 0x6, x1, 109*XLEN/8, x2)

inst_121:
// imm_val == 0x09 and rs1_val == 0xACC6D8F2 
// opcode: rori ; op1:x14; dest:x15; op1val:0xacc6d8f2;  immval:0x9
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xacc6d8f2, 0x9, x1, 110*XLEN/8, x2)

inst_122:
// imm_val == 0x1B and rs1_val == 0x164F1513 
// opcode: rori ; op1:x14; dest:x15; op1val:0x164f1513;  immval:0x1b
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x164f1513, 0x1b, x1, 111*XLEN/8, x2)

inst_123:
// rs1_val == 0xFFFFFFC6 and imm_val == 0x0A 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffffffc6;  immval:0xa
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffffffc6, 0xa, x1, 112*XLEN/8, x2)

inst_124:
// rs1_val == 0xFFFFFFBA and imm_val == 0x1F 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffffffba;  immval:0x1f
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffffffba, 0x1f, x1, 113*XLEN/8, x2)

inst_125:
// rs1_val == 0xFFFFFF44 and imm_val == 0x04 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffffff44;  immval:0x4
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffffff44, 0x4, x1, 114*XLEN/8, x2)

inst_126:
// rs1_val == 0xFFFFFE31 and imm_val == 0x17 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffffe31;  immval:0x17
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffffe31, 0x17, x1, 115*XLEN/8, x2)

inst_127:
// rs1_val == 0xFFFFFC1D and imm_val == 0x1A 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffffc1d;  immval:0x1a
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffffc1d, 0x1a, x1, 116*XLEN/8, x2)

inst_128:
// rs1_val == 0xFFFFFB84 and imm_val == 0x08 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffffb84;  immval:0x8
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffffb84, 0x8, x1, 117*XLEN/8, x2)

inst_129:
// rs1_val == 0xFFFFF32A and imm_val == 0x16 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffff32a;  immval:0x16
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffff32a, 0x16, x1, 118*XLEN/8, x2)

inst_130:
// rs1_val == 0xFFFFEE0A and imm_val == 0x1A 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffffee0a;  immval:0x1a
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffffee0a, 0x1a, x1, 119*XLEN/8, x2)

inst_131:
// rs1_val == 0xFFFFD410 and imm_val == 0x10 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffffd410;  immval:0x10
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffffd410, 0x10, x1, 120*XLEN/8, x2)

inst_132:
// rs1_val == 0xFFFFA2EE and imm_val == 0x0B 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffffa2ee;  immval:0xb
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffffa2ee, 0xb, x1, 121*XLEN/8, x2)

inst_133:
// rs1_val == 0xFFFF1E5F and imm_val == 0x13 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffff1e5f;  immval:0x13
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffff1e5f, 0x13, x1, 122*XLEN/8, x2)

inst_134:
// rs1_val == 0xFFFEC2B4 and imm_val == 0x17 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffec2b4;  immval:0x17
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffec2b4, 0x17, x1, 123*XLEN/8, x2)

inst_135:
// rs1_val == 0xFFFCDB0B and imm_val == 0x1D 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffcdb0b;  immval:0x1d
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffcdb0b, 0x1d, x1, 124*XLEN/8, x2)

inst_136:
// rs1_val == 0xFFF904D1 and imm_val == 0x0F 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfff904d1;  immval:0xf
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfff904d1, 0xf, x1, 125*XLEN/8, x2)

inst_137:
// rs1_val == 0xFFF1D2A0 and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfff1d2a0;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfff1d2a0, 0x1c, x1, 126*XLEN/8, x2)

inst_138:
// rs1_val == 0xFFE2FC91 and imm_val == 0x18 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffe2fc91;  immval:0x18
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffe2fc91, 0x18, x1, 127*XLEN/8, x2)

inst_139:
// rs1_val == 0xFFD4AA23 and imm_val == 0x00 
// opcode: rori ; op1:x14; dest:x15; op1val:0xffd4aa23;  immval:0x0
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xffd4aa23, 0x0, x1, 128*XLEN/8, x2)

inst_140:
// rs1_val == 0xFF93D0E4 and imm_val == 0x08 
// opcode: rori ; op1:x14; dest:x15; op1val:0xff93d0e4;  immval:0x8
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xff93d0e4, 0x8, x1, 129*XLEN/8, x2)

inst_141:
// rs1_val == 0xFF6875BB and imm_val == 0x13 
// opcode: rori ; op1:x14; dest:x15; op1val:0xff6875bb;  immval:0x13
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xff6875bb, 0x13, x1, 130*XLEN/8, x2)

inst_142:
// rs1_val == 0xFE4DEAB5 and imm_val == 0x17 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfe4deab5;  immval:0x17
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfe4deab5, 0x17, x1, 131*XLEN/8, x2)

inst_143:
// rs1_val == 0xFDA56D7F and imm_val == 0x0F 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfda56d7f;  immval:0xf
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfda56d7f, 0xf, x1, 132*XLEN/8, x2)

inst_144:
// rs1_val == 0xF87A2561 and imm_val == 0x1C 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf87a2561;  immval:0x1c
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf87a2561, 0x1c, x1, 133*XLEN/8, x2)

inst_145:
// rs1_val == 0xF79FB998 and imm_val == 0x1E 
// opcode: rori ; op1:x14; dest:x15; op1val:0xf79fb998;  immval:0x1e
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xf79fb998, 0x1e, x1, 134*XLEN/8, x2)

inst_146:
// rs1_val == 0xE0A37559 and imm_val == 0x14 
// opcode: rori ; op1:x14; dest:x15; op1val:0xe0a37559;  immval:0x14
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xe0a37559, 0x14, x1, 135*XLEN/8, x2)

inst_147:
// rs1_val == 0xD814D576 and imm_val == 0x0A 
// opcode: rori ; op1:x14; dest:x15; op1val:0xd814d576;  immval:0xa
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xd814d576, 0xa, x1, 136*XLEN/8, x2)

inst_148:
// rs1_val == 0x9798C9D0 and imm_val == 0x0E 
// opcode: rori ; op1:x14; dest:x15; op1val:0x9798c9d0;  immval:0xe
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x9798c9d0, 0xe, x1, 137*XLEN/8, x2)

inst_149:
// rs1_val == 0x7843BDB9 and imm_val == 0x1A 
// opcode: rori ; op1:x14; dest:x15; op1val:0x7843bdb9;  immval:0x1a
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x7843bdb9, 0x1a, x1, 138*XLEN/8, x2)

inst_150:
// imm_val == 0x1F and rs1_val == 0x0973E89C 
// opcode: rori ; op1:x14; dest:x15; op1val:0x973e89c;  immval:0x1f
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x973e89c, 0x1f, x1, 139*XLEN/8, x2)

inst_151:
// imm_val == 0x1E and rs1_val == 0x14B91C79 
// opcode: rori ; op1:x14; dest:x15; op1val:0x14b91c79;  immval:0x1e
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x14b91c79, 0x1e, x1, 140*XLEN/8, x2)

inst_152:
// imm_val == 0x1D and rs1_val == 0x99EF1857 
// opcode: rori ; op1:x14; dest:x15; op1val:0x99ef1857;  immval:0x1d
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x99ef1857, 0x1d, x1, 141*XLEN/8, x2)

inst_153:
// imm_val == 0x18 and rs1_val == 0xC5EC6148 
// opcode: rori ; op1:x14; dest:x15; op1val:0xc5ec6148;  immval:0x18
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xc5ec6148, 0x18, x1, 142*XLEN/8, x2)

inst_154:
// imm_val == 0x17 and rs1_val == 0xCEB506F6 
// opcode: rori ; op1:x14; dest:x15; op1val:0xceb506f6;  immval:0x17
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xceb506f6, 0x17, x1, 143*XLEN/8, x2)

inst_155:
// imm_val == 0x0F and rs1_val == 0x59432A19 
// opcode: rori ; op1:x14; dest:x15; op1val:0x59432a19;  immval:0xf
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0x59432a19, 0xf, x1, 144*XLEN/8, x2)

inst_156:
// rs1_val == 0xFFFFFFFD and imm_val == 0x00 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffffffd;  immval:0x0
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffffffd, 0x0, x1, 145*XLEN/8, x2)

inst_157:
// rs1_val == 0xFFFFFFF9 and imm_val == 0x1D 
// opcode: rori ; op1:x14; dest:x15; op1val:0xfffffff9;  immval:0x1d
TEST_IMM_OP( rori, x15, x14, 0x00000000, 0xfffffff9, 0x1d, x1, 146*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 11*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 147*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
