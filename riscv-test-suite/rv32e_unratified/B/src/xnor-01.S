
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Aug 16 08:12:01 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/eman/riscof/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/eman/riscof/riscv-ctg/sample_cgfs/rv32e_b.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xnor instruction of the RISC-V RV32Zbb,RV32Zbkb,RV32Zk,RV32Zkn,RV32Zks extension for the xnor covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32EZbb,RV32EZbkb,RV32EZk,RV32EZkn,RV32EZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*E.*Zbb.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",xnor)

RVTEST_CASE(1,"//check ISA:=regex(.*E.*Zbkb.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",xnor)

RVTEST_CASE(2,"//check ISA:=regex(.*E.*Zk.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",xnor)

RVTEST_CASE(3,"//check ISA:=regex(.*E.*Zkn.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",xnor)

RVTEST_CASE(4,"//check ISA:=regex(.*E.*Zks.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",xnor)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs2 == rd != rs1, rs1==x11, rs2==x7, rd==x7, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 1024, rs1_val > 0 and rs2_val > 0
// opcode: xnor ; op1:x11; op2:x7; dest:x7; op1val:0x66666667;  op2val:0x400
TEST_RR_OP(xnor, x7, x11, x7, 0x00000000, 0x66666667, 0x400, x4, 0*XLEN/8, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x10, rd==x5, rs1_val == (2**(xlen)-1), rs1_val==4294967295 and rs2_val==1431655766
// opcode: xnor ; op1:x2; op2:x10; dest:x5; op1val:0xffffffff;  op2val:0x55555556
TEST_RR_OP(xnor, x5, x2, x10, 0x00000000, 0xffffffff, 0x55555556, x4, 1*XLEN/8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x1, rs1_val == 0, rs2_val == 32
// opcode: xnor ; op1:x14; op2:x14; dest:x1; op1val:0x0;  op2val:0x0
TEST_RR_OP(xnor, x1, x14, x14, 0x00000000, 0x0, 0x0, x4, 2*XLEN/8, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 1024
// opcode: xnor ; op1:x3; op2:x3; dest:x3; op1val:0x400;  op2val:0x400
TEST_RR_OP(xnor, x3, x3, x3, 0x00000000, 0x400, 0x400, x4, 3*XLEN/8, x8)

inst_4:
// rs1 == rd != rs2, rs1==x6, rs2==x2, rd==x6, rs2_val == (2**(xlen)-1), rs1_val == 8
// opcode: xnor ; op1:x6; op2:x2; dest:x6; op1val:0x8;  op2val:0xffffffff
TEST_RR_OP(xnor, x6, x6, x2, 0x00000000, 0x8, 0xffffffff, x4, 4*XLEN/8, x8)

inst_5:
// rs1==x13, rs2==x8, rd==x11, rs1_val == 0x254a9493 and rs2_val == 0xc5521660 
// opcode: xnor ; op1:x13; op2:x8; dest:x11; op1val:0x254a9493;  op2val:0xc5521660
TEST_RR_OP(xnor, x11, x13, x8, 0x00000000, 0x254a9493, 0xc5521660, x4, 5*XLEN/8, x1)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_6:
// rs1==x12, rs2==x5, rd==x14, rs2_val == 4294967294, rs1_val == 2097152
// opcode: xnor ; op1:x12; op2:x5; dest:x14; op1val:0x200000;  op2val:0xfffffffe
TEST_RR_OP(xnor, x14, x12, x5, 0x00000000, 0x200000, 0xfffffffe, x2, 0*XLEN/8, x1)

inst_7:
// rs1==x10, rs2==x0, rd==x15, rs2_val == 4294967293, rs1_val == 65536
// opcode: xnor ; op1:x10; op2:x0; dest:x15; op1val:0x10000;  op2val:0x0
TEST_RR_OP(xnor, x15, x10, x0, 0x00000000, 0x10000, 0x0, x2, 1*XLEN/8, x1)

inst_8:
// rs1==x1, rs2==x11, rd==x4, rs2_val == 4294967291, 
// opcode: xnor ; op1:x1; op2:x11; dest:x4; op1val:0x0;  op2val:0xfffffffb
TEST_RR_OP(xnor, x4, x1, x11, 0x00000000, 0x0, 0xfffffffb, x2, 2*XLEN/8, x6)

inst_9:
// rs1==x5, rs2==x13, rd==x0, rs2_val == 4294967287, 
// opcode: xnor ; op1:x5; op2:x13; dest:x0; op1val:0x66666667;  op2val:0xfffffff7
TEST_RR_OP(xnor, x0, x5, x13, 0x00000000, 0x66666667, 0xfffffff7, x2, 3*XLEN/8, x6)

inst_10:
// rs1==x8, rs2==x12, rd==x10, rs2_val == 4294967279, rs1_val == 4261412863
// opcode: xnor ; op1:x8; op2:x12; dest:x10; op1val:0xfdffffff;  op2val:0xffffffef
TEST_RR_OP(xnor, x10, x8, x12, 0x00000000, 0xfdffffff, 0xffffffef, x2, 4*XLEN/8, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_11:
// rs1==x9, rs2==x15, rd==x2, rs2_val == 4294967263, 
// opcode: xnor ; op1:x9; op2:x15; dest:x2; op1val:0x99999998;  op2val:0xffffffdf
TEST_RR_OP(xnor, x2, x9, x15, 0x00000000, 0x99999998, 0xffffffdf, x3, 0*XLEN/8, x6)

inst_12:
// rs1==x7, rs2==x9, rd==x12, rs2_val == 4294967231, 
// opcode: xnor ; op1:x7; op2:x9; dest:x12; op1val:0x12;  op2val:0xffffffbf
TEST_RR_OP(xnor, x12, x7, x9, 0x00000000, 0x12, 0xffffffbf, x3, 1*XLEN/8, x2)

inst_13:
// rs1==x4, rs2==x6, rd==x8, rs2_val == 4294967167, rs1_val == 4294705151
// opcode: xnor ; op1:x4; op2:x6; dest:x8; op1val:0xfffbffff;  op2val:0xffffff7f
TEST_RR_OP(xnor, x8, x4, x6, 0x00000000, 0xfffbffff, 0xffffff7f, x3, 2*XLEN/8, x2)

inst_14:
// rs1==x0, rs2==x4, rd==x13, rs2_val == 4294967039, rs1_val == 4290772991
// opcode: xnor ; op1:x0; op2:x4; dest:x13; op1val:0x0;  op2val:0xfffffeff
TEST_RR_OP(xnor, x13, x0, x4, 0x00000000, 0x0, 0xfffffeff, x3, 3*XLEN/8, x2)

inst_15:
// rs1==x15, rs2==x1, rd==x9, rs2_val == 4294966783, 
// opcode: xnor ; op1:x15; op2:x1; dest:x9; op1val:0xffffffff;  op2val:0xfffffdff
TEST_RR_OP(xnor, x9, x15, x1, 0x00000000, 0xffffffff, 0xfffffdff, x3, 4*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs2_val == 4294966271, rs1_val == 64
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x40;  op2val:0xfffffbff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x40, 0xfffffbff, x1, 0*XLEN/8, x2)

inst_17:
// rs2_val == 4294965247, rs1_val == 2048
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x800;  op2val:0xfffff7ff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x800, 0xfffff7ff, x1, 1*XLEN/8, x2)

inst_18:
// rs2_val == 4294963199, rs1_val == 2863311530
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xffffefff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xffffefff, x1, 2*XLEN/8, x2)

inst_19:
// rs2_val == 4294959103, rs1_val == 4294967279
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffef;  op2val:0xffffdfff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffef, 0xffffdfff, x1, 3*XLEN/8, x2)

inst_20:
// rs2_val == 4294950911, rs1_val == 4294966783
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffdff;  op2val:0xffffbfff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffdff, 0xffffbfff, x1, 4*XLEN/8, x2)

inst_21:
// rs2_val == 4294934527, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xffff7fff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xffff7fff, x1, 5*XLEN/8, x2)

inst_22:
// rs2_val == 4294901759, rs1_val == 32768
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x8000;  op2val:0xfffeffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x8000, 0xfffeffff, x1, 6*XLEN/8, x2)

inst_23:
// rs2_val == 4294836223, rs1_val == 1
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xfffdffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xfffdffff, x1, 7*XLEN/8, x2)

inst_24:
// rs2_val == 4294705151, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xfffbffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xfffbffff, x1, 8*XLEN/8, x2)

inst_25:
// rs2_val == 4294443007, rs1_val == 512
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x200;  op2val:0xfff7ffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x200, 0xfff7ffff, x1, 9*XLEN/8, x2)

inst_26:
// rs2_val == 4293918719, rs1_val == 4294967231
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffbf;  op2val:0xffefffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffbf, 0xffefffff, x1, 10*XLEN/8, x2)

inst_27:
// rs2_val == 4292870143, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9;  op2val:0xffdfffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9, 0xffdfffff, x1, 11*XLEN/8, x2)

inst_28:
// rs2_val == 4290772991, rs1_val == 4294967039
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffeff;  op2val:0xffbfffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffeff, 0xffbfffff, x1, 12*XLEN/8, x2)

inst_29:
// rs2_val == 4286578687, rs1_val == 4294967291
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffffb;  op2val:0xff7fffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffffb, 0xff7fffff, x1, 13*XLEN/8, x2)

inst_30:
// rs2_val == 4278190079, rs1_val == 4096
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1000;  op2val:0xfeffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1000, 0xfeffffff, x1, 14*XLEN/8, x2)

inst_31:
// rs2_val == 4261412863, rs1_val == 4294966271
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffbff;  op2val:0xfdffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffbff, 0xfdffffff, x1, 15*XLEN/8, x2)

inst_32:
// rs2_val == 4227858431, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xfbffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xfbffffff, x1, 16*XLEN/8, x2)

inst_33:
// rs2_val == 4160749567, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xd;  op2val:0xf7ffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xd, 0xf7ffffff, x1, 17*XLEN/8, x2)

inst_34:
// rs2_val == 4026531839, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x200;  op2val:0xefffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x200, 0xefffffff, x1, 18*XLEN/8, x2)

inst_35:
// rs2_val == 3758096383, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xdfffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xdfffffff, x1, 19*XLEN/8, x2)

inst_36:
// rs2_val == 3221225471, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x12;  op2val:0xbfffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x12, 0xbfffffff, x1, 20*XLEN/8, x2)

inst_37:
// rs2_val == 2147483647, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x7fffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x7fffffff, x1, 21*XLEN/8, x2)

inst_38:
// rs1_val == 4294967294, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffffe;  op2val:0x7fffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffffe, 0x7fffffff, x1, 22*XLEN/8, x2)

inst_39:
// rs1_val == 4294967293, rs2_val == 512
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffffd;  op2val:0x200
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffffd, 0x200, x1, 23*XLEN/8, x2)

inst_40:
// rs1_val == 4294967287, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffff7;  op2val:0xfffeffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffff7, 0xfffeffff, x1, 24*XLEN/8, x2)

inst_41:
// rs1_val == 4294967263, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffdf;  op2val:0xffffbfff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffdf, 0xffffbfff, x1, 25*XLEN/8, x2)

inst_42:
// rs1_val == 4294967167, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffff7f;  op2val:0x3
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffff7f, 0x3, x1, 26*XLEN/8, x2)

inst_43:
// rs1_val == 4294965247, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffff7ff;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffff7ff, 0xffffffff, x1, 27*XLEN/8, x2)

inst_44:
// rs1_val == 4294963199, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffefff;  op2val:0xbfffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffefff, 0xbfffffff, x1, 28*XLEN/8, x2)

inst_45:
// rs1_val == 4294959103, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffdfff;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffdfff, 0x33333333, x1, 29*XLEN/8, x2)

inst_46:
// rs1_val == 4294950911, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffbfff;  op2val:0xd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffbfff, 0xd, x1, 30*XLEN/8, x2)

inst_47:
// rs1_val == 4294934527, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffff7fff;  op2val:0x20
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffff7fff, 0x20, x1, 31*XLEN/8, x2)

inst_48:
// rs1_val == 4294901759, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffeffff;  op2val:0xf7ffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffeffff, 0xf7ffffff, x1, 32*XLEN/8, x2)

inst_49:
// rs1_val == 4294836223, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffdffff;  op2val:0x11
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffdffff, 0x11, x1, 33*XLEN/8, x2)

inst_50:
// rs1_val == 4294443007, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfff7ffff;  op2val:0xc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfff7ffff, 0xc, x1, 34*XLEN/8, x2)

inst_51:
// rs1_val == 4293918719, rs2_val == 262144
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffefffff;  op2val:0x40000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffefffff, 0x40000, x1, 35*XLEN/8, x2)

inst_52:
// rs1_val == 4292870143, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffdfffff;  op2val:0xfffffdff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffdfffff, 0xfffffdff, x1, 36*XLEN/8, x2)

inst_53:
// rs1_val == 4286578687, rs2_val == 8
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xff7fffff;  op2val:0x8
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xff7fffff, 0x8, x1, 37*XLEN/8, x2)

inst_54:
// rs1_val == 4278190079, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfeffffff;  op2val:0xffffbfff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfeffffff, 0xffffbfff, x1, 38*XLEN/8, x2)

inst_55:
// rs1_val == 4227858431, rs2_val == 256
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfbffffff;  op2val:0x100
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfbffffff, 0x100, x1, 39*XLEN/8, x2)

inst_56:
// rs1_val == 4160749567, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xf7ffffff;  op2val:0x12
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xf7ffffff, 0x12, x1, 40*XLEN/8, x2)

inst_57:
// rs1_val == 4026531839, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xefffffff;  op2val:0xfffeffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xefffffff, 0xfffeffff, x1, 41*XLEN/8, x2)

inst_58:
// rs1_val == 3758096383, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xdfffffff;  op2val:0x40000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xdfffffff, 0x40000, x1, 42*XLEN/8, x2)

inst_59:
// rs1_val == 3221225471, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xbfffffff;  op2val:0xffffff7f
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xbfffffff, 0xffffff7f, x1, 43*XLEN/8, x2)

inst_60:
// rs1_val == 2147483647, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x7fffffff;  op2val:0x400
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x7fffffff, 0x400, x1, 44*XLEN/8, x2)

inst_61:
// rs2_val == 1, rs1_val==2863311529 and rs2_val==1
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x1, x1, 45*XLEN/8, x2)

inst_62:
// rs2_val == 2, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xdfffffff;  op2val:0x2
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xdfffffff, 0x2, x1, 46*XLEN/8, x2)

inst_63:
// rs2_val == 4, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffeff;  op2val:0x4
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffeff, 0x4, x1, 47*XLEN/8, x2)

inst_64:
// rs2_val == 16, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x10
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x10, x1, 48*XLEN/8, x2)

inst_65:
// rs2_val == 64, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xc;  op2val:0x40
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xc, 0x40, x1, 49*XLEN/8, x2)

inst_66:
// rs2_val == 128, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x10000;  op2val:0x80
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x10000, 0x80, x1, 50*XLEN/8, x2)

inst_67:
// rs2_val == 2048, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x800
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x800, x1, 51*XLEN/8, x2)

inst_68:
// rs2_val == 4096, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x1000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x1000, x1, 52*XLEN/8, x2)

inst_69:
// rs2_val == 8192, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x40;  op2val:0x2000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x40, 0x2000, x1, 53*XLEN/8, x2)

inst_70:
// rs2_val == 16384, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xfffffffe;  op2val:0x4000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xfffffffe, 0x4000, x1, 54*XLEN/8, x2)

inst_71:
// rs2_val == 32768, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x8000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x8000, x1, 55*XLEN/8, x2)

inst_72:
// rs2_val == 65536, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x12;  op2val:0x10000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x12, 0x10000, x1, 56*XLEN/8, x2)

inst_73:
// rs2_val == 131072, rs1_val == 134217728
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x8000000;  op2val:0x20000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x8000000, 0x20000, x1, 57*XLEN/8, x2)

inst_74:
// rs2_val == 524288, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffff7fff;  op2val:0x80000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffff7fff, 0x80000, x1, 58*XLEN/8, x2)

inst_75:
// rs2_val == 1048576, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffbf;  op2val:0x100000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffbf, 0x100000, x1, 59*XLEN/8, x2)

inst_76:
// rs2_val == 2097152, rs1_val == 16384
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x4000;  op2val:0x200000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x4000, 0x200000, x1, 60*XLEN/8, x2)

inst_77:
// rs2_val == 4194304, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x10000;  op2val:0x400000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x10000, 0x400000, x1, 61*XLEN/8, x2)

inst_78:
// rs2_val == 8388608, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x8;  op2val:0x800000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x8, 0x800000, x1, 62*XLEN/8, x2)

inst_79:
// rs2_val == 16777216, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x1000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x1000000, x1, 63*XLEN/8, x2)

inst_80:
// rs2_val == 33554432, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x2000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x2000000, x1, 64*XLEN/8, x2)

inst_81:
// rs2_val == 67108864, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x4000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x4000000, x1, 65*XLEN/8, x2)

inst_82:
// rs2_val == 134217728, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xbfffffff;  op2val:0x8000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xbfffffff, 0x8000000, x1, 66*XLEN/8, x2)

inst_83:
// rs2_val == 268435456, rs1_val == 1431655765
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x10000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x10000000, x1, 67*XLEN/8, x2)

inst_84:
// rs2_val == 536870912, rs1_val == 2
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x2;  op2val:0x20000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x2, 0x20000000, x1, 68*XLEN/8, x2)

inst_85:
// rs2_val == 1073741824, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffbf;  op2val:0x40000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffbf, 0x40000000, x1, 69*XLEN/8, x2)

inst_86:
// rs2_val == 2147483648, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffef;  op2val:0x80000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffef, 0x80000000, x1, 70*XLEN/8, x2)

inst_87:
// rs1_val == 4, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x4;  op2val:0x1000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x4, 0x1000, x1, 71*XLEN/8, x2)

inst_88:
// rs1_val == 16, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x10;  op2val:0xfffbffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x10, 0xfffbffff, x1, 72*XLEN/8, x2)

inst_89:
// rs1_val == 32, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x20;  op2val:0x40000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x20, 0x40000, x1, 73*XLEN/8, x2)

inst_90:
// rs1_val == 128, rs2_val == 1431655765
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x80;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x80, 0x55555555, x1, 74*XLEN/8, x2)

inst_91:
// rs1_val == 256, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x100;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x100, 0x66666667, x1, 75*XLEN/8, x2)

inst_92:
// rs1_val == 8192, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x2000;  op2val:0xfdffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x2000, 0xfdffffff, x1, 76*XLEN/8, x2)

inst_93:
// rs1_val == 131072, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x20000;  op2val:0x200
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x20000, 0x200, x1, 77*XLEN/8, x2)

inst_94:
// rs1_val == 262144, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x40000;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x40000, 0x99999998, x1, 78*XLEN/8, x2)

inst_95:
// rs1_val == 524288, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x80000;  op2val:0x8000000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x80000, 0x8000000, x1, 79*XLEN/8, x2)

inst_96:
// rs1_val == 1048576, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x100000;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x100000, 0x33333332, x1, 80*XLEN/8, x2)

inst_97:
// rs1_val == 4194304, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x400000;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x400000, 0x99999999, x1, 81*XLEN/8, x2)

inst_98:
// rs1_val == 8388608, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x800000;  op2val:0xfffeffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x800000, 0xfffeffff, x1, 82*XLEN/8, x2)

inst_99:
// rs1_val == 16777216, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1000000;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1000000, 0x55555555, x1, 83*XLEN/8, x2)

inst_100:
// rs1_val == 33554432, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x2000000;  op2val:0xefffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x2000000, 0xefffffff, x1, 84*XLEN/8, x2)

inst_101:
// rs1_val == 67108864, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x4000000;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x4000000, 0x33333332, x1, 85*XLEN/8, x2)

inst_102:
// rs1_val == 268435456, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x10000000;  op2val:0x40000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x10000000, 0x40000, x1, 86*XLEN/8, x2)

inst_103:
// rs1_val == 536870912, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x20000000;  op2val:0xffbfffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x20000000, 0xffbfffff, x1, 87*XLEN/8, x2)

inst_104:
// rs1_val == 1073741824, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x40000000;  op2val:0x400000
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x40000000, 0x400000, x1, 88*XLEN/8, x2)

inst_105:
// rs1_val == 2147483648, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x80000000;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x80000000, 0x66666667, x1, 89*XLEN/8, x2)

inst_106:
// rs1_val == 0xb49c83dc and rs2_val == 0xbb61a9cd 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xb49c83dc;  op2val:0xbb61a9cd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xb49c83dc, 0xbb61a9cd, x1, 90*XLEN/8, x2)

inst_107:
// rs1_val == 0xccce240c and rs2_val == 0x886c3a30 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xccce240c;  op2val:0x886c3a30
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xccce240c, 0x886c3a30, x1, 91*XLEN/8, x2)

inst_108:
// rs1_val == 0x74b8de87 and rs2_val == 0xf273b44c 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x74b8de87;  op2val:0xf273b44c
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x74b8de87, 0xf273b44c, x1, 92*XLEN/8, x2)

inst_109:
// rs1_val == 0x55d98c6e and rs2_val == 0x2daf9ac7 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55d98c6e;  op2val:0x2daf9ac7
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55d98c6e, 0x2daf9ac7, x1, 93*XLEN/8, x2)

inst_110:
// rs1_val == 0x58d548aa and rs2_val == 0xa0569d76 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x58d548aa;  op2val:0xa0569d76
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x58d548aa, 0xa0569d76, x1, 94*XLEN/8, x2)

inst_111:
// rs1_val == 0x35f9377f and rs2_val == 0xf4c30307 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x35f9377f;  op2val:0xf4c30307
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x35f9377f, 0xf4c30307, x1, 95*XLEN/8, x2)

inst_112:
// rs1_val == 0x8e2eac2a and rs2_val == 0xd169a3f8 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x8e2eac2a;  op2val:0xd169a3f8
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x8e2eac2a, 0xd169a3f8, x1, 96*XLEN/8, x2)

inst_113:
// rs1_val == 0x1fc493ca and rs2_val == 0x65408c73 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1fc493ca;  op2val:0x65408c73
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1fc493ca, 0x65408c73, x1, 97*XLEN/8, x2)

inst_114:
// rs1_val == 0x90efb625 and rs2_val == 0x3150e5fa 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x90efb625;  op2val:0x3150e5fa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x90efb625, 0x3150e5fa, x1, 98*XLEN/8, x2)

inst_115:
// rs1_val == 0xd75739f8 and rs2_val == 0xe6fff3d9 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xd75739f8;  op2val:0xe6fff3d9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xd75739f8, 0xe6fff3d9, x1, 99*XLEN/8, x2)

inst_116:
// rs1_val == 0xf7f1305a and rs2_val == 0x9bedfe39 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xf7f1305a;  op2val:0x9bedfe39
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xf7f1305a, 0x9bedfe39, x1, 100*XLEN/8, x2)

inst_117:
// rs1_val == 0x9722c9a6 and rs2_val == 0x7bcad7c4 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9722c9a6;  op2val:0x7bcad7c4
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9722c9a6, 0x7bcad7c4, x1, 101*XLEN/8, x2)

inst_118:
// rs1_val == 0xc2f1c53e and rs2_val == 0xd05668ae 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xc2f1c53e;  op2val:0xd05668ae
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xc2f1c53e, 0xd05668ae, x1, 102*XLEN/8, x2)

inst_119:
// rs1_val == 0xe3f4fca3 and rs2_val == 0xa6c9253a 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xe3f4fca3;  op2val:0xa6c9253a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xe3f4fca3, 0xa6c9253a, x1, 103*XLEN/8, x2)

inst_120:
// rs1_val == 0x40a5ff52 and rs2_val == 0xb6f9706f 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x40a5ff52;  op2val:0xb6f9706f
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x40a5ff52, 0xb6f9706f, x1, 104*XLEN/8, x2)

inst_121:
// rs1_val == 0x952acffe and rs2_val == 0x25ae27ee 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x952acffe;  op2val:0x25ae27ee
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x952acffe, 0x25ae27ee, x1, 105*XLEN/8, x2)

inst_122:
// rs1_val == 0xdc80d916 and rs2_val == 0x2a2a146d 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xdc80d916;  op2val:0x2a2a146d
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xdc80d916, 0x2a2a146d, x1, 106*XLEN/8, x2)

inst_123:
// rs1_val == 0xc0fe15dd and rs2_val == 0x9f053821 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xc0fe15dd;  op2val:0x9f053821
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xc0fe15dd, 0x9f053821, x1, 107*XLEN/8, x2)

inst_124:
// rs1_val == 0x91766f62 and rs2_val == 0x5570084b 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x91766f62;  op2val:0x5570084b
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x91766f62, 0x5570084b, x1, 108*XLEN/8, x2)

inst_125:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x55555555, x1, 109*XLEN/8, x2)

inst_126:
// rs1_val==1431655765 and rs2_val==2863311530, rs2_val == 2863311530
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0xaaaaaaaa, x1, 110*XLEN/8, x2)

inst_127:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x33333333, x1, 111*XLEN/8, x2)

inst_128:
// rs1_val==1431655765 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0xcccccccc, x1, 112*XLEN/8, x2)

inst_129:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x66666666, x1, 113*XLEN/8, x2)

inst_130:
// rs1_val==1431655765 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x99999999, x1, 114*XLEN/8, x2)

inst_131:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x55555554, x1, 115*XLEN/8, x2)

inst_132:
// rs1_val==1431655765 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0xaaaaaaa9, x1, 116*XLEN/8, x2)

inst_133:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x33333332, x1, 117*XLEN/8, x2)

inst_134:
// rs1_val==1431655765 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0xcccccccb, x1, 118*XLEN/8, x2)

inst_135:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x66666665, x1, 119*XLEN/8, x2)

inst_136:
// rs1_val==1431655765 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x99999998, x1, 120*XLEN/8, x2)

inst_137:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x55555556, x1, 121*XLEN/8, x2)

inst_138:
// rs1_val==1431655765 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0xaaaaaaab, x1, 122*XLEN/8, x2)

inst_139:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x33333334, x1, 123*XLEN/8, x2)

inst_140:
// rs1_val==1431655765 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0xcccccccd, x1, 124*XLEN/8, x2)

inst_141:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x66666667, x1, 125*XLEN/8, x2)

inst_142:
// rs1_val==1431655765 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x9999999a, x1, 126*XLEN/8, x2)

inst_143:
// rs1_val==1431655765 and rs2_val==0, rs2_val == 0
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x0, x1, 127*XLEN/8, x2)

inst_144:
// rs1_val==1431655765 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0x1, x1, 128*XLEN/8, x2)

inst_145:
// rs1_val==1431655765 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555555;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555555, 0xffffffff, x1, 129*XLEN/8, x2)

inst_146:
// rs1_val==2863311530 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x55555555, x1, 130*XLEN/8, x2)

inst_147:
// rs1_val==2863311530 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xaaaaaaaa, x1, 131*XLEN/8, x2)

inst_148:
// rs1_val==2863311530 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x33333333, x1, 132*XLEN/8, x2)

inst_149:
// rs1_val==2863311530 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xcccccccc, x1, 133*XLEN/8, x2)

inst_150:
// rs1_val==2863311530 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x66666666, x1, 134*XLEN/8, x2)

inst_151:
// rs1_val==2863311530 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x99999999, x1, 135*XLEN/8, x2)

inst_152:
// rs1_val==2863311530 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x55555554, x1, 136*XLEN/8, x2)

inst_153:
// rs1_val==2863311530 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xaaaaaaa9, x1, 137*XLEN/8, x2)

inst_154:
// rs1_val==2863311530 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x33333332, x1, 138*XLEN/8, x2)

inst_155:
// rs1_val==2863311530 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xcccccccb, x1, 139*XLEN/8, x2)

inst_156:
// rs1_val==2863311530 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x66666665, x1, 140*XLEN/8, x2)

inst_157:
// rs1_val==2863311530 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x99999998, x1, 141*XLEN/8, x2)

inst_158:
// rs1_val==2863311530 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x55555556, x1, 142*XLEN/8, x2)

inst_159:
// rs1_val==2863311530 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xaaaaaaab, x1, 143*XLEN/8, x2)

inst_160:
// rs1_val==2863311530 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x33333334, x1, 144*XLEN/8, x2)

inst_161:
// rs1_val==2863311530 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xcccccccd, x1, 145*XLEN/8, x2)

inst_162:
// rs1_val==2863311530 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x66666667, x1, 146*XLEN/8, x2)

inst_163:
// rs1_val==2863311530 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x9999999a, x1, 147*XLEN/8, x2)

inst_164:
// rs1_val==2863311530 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x0, x1, 148*XLEN/8, x2)

inst_165:
// rs1_val==2863311530 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x1, x1, 149*XLEN/8, x2)

inst_166:
// rs1_val==2863311530 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0xffffffff, x1, 150*XLEN/8, x2)

inst_167:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x55555555, x1, 151*XLEN/8, x2)

inst_168:
// rs1_val==858993459 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0xaaaaaaaa, x1, 152*XLEN/8, x2)

inst_169:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x33333333, x1, 153*XLEN/8, x2)

inst_170:
// rs1_val==858993459 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0xcccccccc, x1, 154*XLEN/8, x2)

inst_171:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x66666666, x1, 155*XLEN/8, x2)

inst_172:
// rs1_val==858993459 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x99999999, x1, 156*XLEN/8, x2)

inst_173:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x55555554, x1, 157*XLEN/8, x2)

inst_174:
// rs1_val==858993459 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0xaaaaaaa9, x1, 158*XLEN/8, x2)

inst_175:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x33333332, x1, 159*XLEN/8, x2)

inst_176:
// rs1_val==858993459 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0xcccccccb, x1, 160*XLEN/8, x2)

inst_177:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x66666665, x1, 161*XLEN/8, x2)

inst_178:
// rs1_val==858993459 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x99999998, x1, 162*XLEN/8, x2)

inst_179:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x55555556, x1, 163*XLEN/8, x2)

inst_180:
// rs1_val==858993459 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0xaaaaaaab, x1, 164*XLEN/8, x2)

inst_181:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x33333334, x1, 165*XLEN/8, x2)

inst_182:
// rs1_val==858993459 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0xcccccccd, x1, 166*XLEN/8, x2)

inst_183:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x66666667, x1, 167*XLEN/8, x2)

inst_184:
// rs1_val==858993459 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x9999999a, x1, 168*XLEN/8, x2)

inst_185:
// rs1_val==858993459 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x0, x1, 169*XLEN/8, x2)

inst_186:
// rs1_val==858993459 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0x1, x1, 170*XLEN/8, x2)

inst_187:
// rs1_val==858993459 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333333;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333333, 0xffffffff, x1, 171*XLEN/8, x2)

inst_188:
// rs1_val==3435973836 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x55555555, x1, 172*XLEN/8, x2)

inst_189:
// rs1_val==3435973836 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0xaaaaaaaa, x1, 173*XLEN/8, x2)

inst_190:
// rs1_val==3435973836 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x33333333, x1, 174*XLEN/8, x2)

inst_191:
// rs1_val==3435973836 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0xcccccccc, x1, 175*XLEN/8, x2)

inst_192:
// rs1_val==3435973836 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x66666666, x1, 176*XLEN/8, x2)

inst_193:
// rs1_val==3435973836 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x99999999, x1, 177*XLEN/8, x2)

inst_194:
// rs1_val==3435973836 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x55555554, x1, 178*XLEN/8, x2)

inst_195:
// rs1_val==3435973836 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0xaaaaaaa9, x1, 179*XLEN/8, x2)

inst_196:
// rs1_val==3435973836 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x33333332, x1, 180*XLEN/8, x2)

inst_197:
// rs1_val==3435973836 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0xcccccccb, x1, 181*XLEN/8, x2)

inst_198:
// rs1_val==3435973836 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x66666665, x1, 182*XLEN/8, x2)

inst_199:
// rs1_val==3435973836 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x99999998, x1, 183*XLEN/8, x2)

inst_200:
// rs1_val==3435973836 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x55555556, x1, 184*XLEN/8, x2)

inst_201:
// rs1_val==3435973836 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0xaaaaaaab, x1, 185*XLEN/8, x2)

inst_202:
// rs1_val==3435973836 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x33333334, x1, 186*XLEN/8, x2)

inst_203:
// rs1_val==3435973836 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0xcccccccd, x1, 187*XLEN/8, x2)

inst_204:
// rs1_val==3435973836 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x66666667, x1, 188*XLEN/8, x2)

inst_205:
// rs1_val==3435973836 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x9999999a, x1, 189*XLEN/8, x2)

inst_206:
// rs1_val==3435973836 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x0, x1, 190*XLEN/8, x2)

inst_207:
// rs1_val==3435973836 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0x1, x1, 191*XLEN/8, x2)

inst_208:
// rs1_val==3435973836 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccc;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccc, 0xffffffff, x1, 192*XLEN/8, x2)

inst_209:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x55555555, x1, 193*XLEN/8, x2)

inst_210:
// rs1_val==1717986918 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0xaaaaaaaa, x1, 194*XLEN/8, x2)

inst_211:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x33333333, x1, 195*XLEN/8, x2)

inst_212:
// rs1_val==1717986918 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0xcccccccc, x1, 196*XLEN/8, x2)

inst_213:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x66666666, x1, 197*XLEN/8, x2)

inst_214:
// rs1_val==1717986918 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x99999999, x1, 198*XLEN/8, x2)

inst_215:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x55555554, x1, 199*XLEN/8, x2)

inst_216:
// rs1_val==1717986918 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0xaaaaaaa9, x1, 200*XLEN/8, x2)

inst_217:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x33333332, x1, 201*XLEN/8, x2)

inst_218:
// rs1_val==1717986918 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0xcccccccb, x1, 202*XLEN/8, x2)

inst_219:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x66666665, x1, 203*XLEN/8, x2)

inst_220:
// rs1_val==1717986918 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x99999998, x1, 204*XLEN/8, x2)

inst_221:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x55555556, x1, 205*XLEN/8, x2)

inst_222:
// rs1_val==1717986918 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0xaaaaaaab, x1, 206*XLEN/8, x2)

inst_223:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x33333334, x1, 207*XLEN/8, x2)

inst_224:
// rs1_val==1717986918 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0xcccccccd, x1, 208*XLEN/8, x2)

inst_225:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x66666667, x1, 209*XLEN/8, x2)

inst_226:
// rs1_val==1717986918 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x9999999a, x1, 210*XLEN/8, x2)

inst_227:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x0, x1, 211*XLEN/8, x2)

inst_228:
// rs1_val==1717986918 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0x1, x1, 212*XLEN/8, x2)

inst_229:
// rs1_val==1717986918 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666666;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666666, 0xffffffff, x1, 213*XLEN/8, x2)

inst_230:
// rs1_val==2576980377 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x55555555, x1, 214*XLEN/8, x2)

inst_231:
// rs1_val==2576980377 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0xaaaaaaaa, x1, 215*XLEN/8, x2)

inst_232:
// rs1_val==2576980377 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x33333333, x1, 216*XLEN/8, x2)

inst_233:
// rs1_val==2576980377 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0xcccccccc, x1, 217*XLEN/8, x2)

inst_234:
// rs1_val==2576980377 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x66666666, x1, 218*XLEN/8, x2)

inst_235:
// rs1_val==2576980377 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x99999999, x1, 219*XLEN/8, x2)

inst_236:
// rs1_val==2576980377 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x55555554, x1, 220*XLEN/8, x2)

inst_237:
// rs1_val==2576980377 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0xaaaaaaa9, x1, 221*XLEN/8, x2)

inst_238:
// rs1_val==2576980377 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x33333332, x1, 222*XLEN/8, x2)

inst_239:
// rs1_val==2576980377 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0xcccccccb, x1, 223*XLEN/8, x2)

inst_240:
// rs1_val==2576980377 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x66666665, x1, 224*XLEN/8, x2)

inst_241:
// rs1_val==2576980377 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x99999998, x1, 225*XLEN/8, x2)

inst_242:
// rs1_val==2576980377 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x55555556, x1, 226*XLEN/8, x2)

inst_243:
// rs1_val==2576980377 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0xaaaaaaab, x1, 227*XLEN/8, x2)

inst_244:
// rs1_val==2576980377 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x33333334, x1, 228*XLEN/8, x2)

inst_245:
// rs1_val==2576980377 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0xcccccccd, x1, 229*XLEN/8, x2)

inst_246:
// rs1_val==2576980377 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x66666667, x1, 230*XLEN/8, x2)

inst_247:
// rs1_val==2576980377 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x9999999a, x1, 231*XLEN/8, x2)

inst_248:
// rs1_val==2576980377 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x0, x1, 232*XLEN/8, x2)

inst_249:
// rs1_val==2576980377 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0x1, x1, 233*XLEN/8, x2)

inst_250:
// rs1_val==2576980377 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999999;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999999, 0xffffffff, x1, 234*XLEN/8, x2)

inst_251:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x55555555, x1, 235*XLEN/8, x2)

inst_252:
// rs1_val==1431655764 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0xaaaaaaaa, x1, 236*XLEN/8, x2)

inst_253:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x33333333, x1, 237*XLEN/8, x2)

inst_254:
// rs1_val==1431655764 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0xcccccccc, x1, 238*XLEN/8, x2)

inst_255:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x66666666, x1, 239*XLEN/8, x2)

inst_256:
// rs1_val==1431655764 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x99999999, x1, 240*XLEN/8, x2)

inst_257:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x55555554, x1, 241*XLEN/8, x2)

inst_258:
// rs1_val==1431655764 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0xaaaaaaa9, x1, 242*XLEN/8, x2)

inst_259:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x33333332, x1, 243*XLEN/8, x2)

inst_260:
// rs1_val==1431655764 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0xcccccccb, x1, 244*XLEN/8, x2)

inst_261:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x66666665, x1, 245*XLEN/8, x2)

inst_262:
// rs1_val==1431655764 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x99999998, x1, 246*XLEN/8, x2)

inst_263:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x55555556, x1, 247*XLEN/8, x2)

inst_264:
// rs1_val==1431655764 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0xaaaaaaab, x1, 248*XLEN/8, x2)

inst_265:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x33333334, x1, 249*XLEN/8, x2)

inst_266:
// rs1_val==1431655764 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0xcccccccd, x1, 250*XLEN/8, x2)

inst_267:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x66666667, x1, 251*XLEN/8, x2)

inst_268:
// rs1_val==1431655764 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x9999999a, x1, 252*XLEN/8, x2)

inst_269:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x0, x1, 253*XLEN/8, x2)

inst_270:
// rs1_val==1431655764 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0x1, x1, 254*XLEN/8, x2)

inst_271:
// rs1_val==1431655764 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555554;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555554, 0xffffffff, x1, 255*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_272:
// rs1_val==2863311529 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x55555555, x1, 0*XLEN/8, x2)

inst_273:
// rs1_val==2863311529 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0xaaaaaaaa, x1, 1*XLEN/8, x2)

inst_274:
// rs1_val==2863311529 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x33333333, x1, 2*XLEN/8, x2)

inst_275:
// rs1_val==2863311529 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0xcccccccc, x1, 3*XLEN/8, x2)

inst_276:
// rs1_val==2863311529 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x66666666, x1, 4*XLEN/8, x2)

inst_277:
// rs1_val==2863311529 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x99999999, x1, 5*XLEN/8, x2)

inst_278:
// rs1_val==2863311529 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x55555554, x1, 6*XLEN/8, x2)

inst_279:
// rs1_val==2863311529 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0xaaaaaaa9, x1, 7*XLEN/8, x2)

inst_280:
// rs1_val==2863311529 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x33333332, x1, 8*XLEN/8, x2)

inst_281:
// rs1_val==2863311529 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0xcccccccb, x1, 9*XLEN/8, x2)

inst_282:
// rs1_val==2863311529 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x66666665, x1, 10*XLEN/8, x2)

inst_283:
// rs1_val==2863311529 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x99999998, x1, 11*XLEN/8, x2)

inst_284:
// rs1_val==2863311529 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x55555556, x1, 12*XLEN/8, x2)

inst_285:
// rs1_val==2863311529 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0xaaaaaaab, x1, 13*XLEN/8, x2)

inst_286:
// rs1_val==2863311529 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x33333334, x1, 14*XLEN/8, x2)

inst_287:
// rs1_val==2863311529 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0xcccccccd, x1, 15*XLEN/8, x2)

inst_288:
// rs1_val==2863311529 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x66666667, x1, 16*XLEN/8, x2)

inst_289:
// rs1_val==2863311529 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x9999999a, x1, 17*XLEN/8, x2)

inst_290:
// rs1_val==2863311529 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0x0, x1, 18*XLEN/8, x2)

inst_291:
// rs1_val==2863311529 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaa9;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaa9, 0xffffffff, x1, 19*XLEN/8, x2)

inst_292:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x55555555, x1, 20*XLEN/8, x2)

inst_293:
// rs1_val==858993458 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0xaaaaaaaa, x1, 21*XLEN/8, x2)

inst_294:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x33333333, x1, 22*XLEN/8, x2)

inst_295:
// rs1_val==858993458 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0xcccccccc, x1, 23*XLEN/8, x2)

inst_296:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x66666666, x1, 24*XLEN/8, x2)

inst_297:
// rs1_val==858993458 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x99999999, x1, 25*XLEN/8, x2)

inst_298:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x55555554, x1, 26*XLEN/8, x2)

inst_299:
// rs1_val==858993458 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0xaaaaaaa9, x1, 27*XLEN/8, x2)

inst_300:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x33333332, x1, 28*XLEN/8, x2)

inst_301:
// rs1_val==858993458 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0xcccccccb, x1, 29*XLEN/8, x2)

inst_302:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x66666665, x1, 30*XLEN/8, x2)

inst_303:
// rs1_val==858993458 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x99999998, x1, 31*XLEN/8, x2)

inst_304:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x55555556, x1, 32*XLEN/8, x2)

inst_305:
// rs1_val==858993458 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0xaaaaaaab, x1, 33*XLEN/8, x2)

inst_306:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x33333334, x1, 34*XLEN/8, x2)

inst_307:
// rs1_val==858993458 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0xcccccccd, x1, 35*XLEN/8, x2)

inst_308:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x66666667, x1, 36*XLEN/8, x2)

inst_309:
// rs1_val==2576980378 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0xaaaaaaaa, x1, 37*XLEN/8, x2)

inst_310:
// rs1_val==2576980378 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x33333333, x1, 38*XLEN/8, x2)

inst_311:
// rs1_val==2576980378 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0xcccccccc, x1, 39*XLEN/8, x2)

inst_312:
// rs1_val==2576980378 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x66666666, x1, 40*XLEN/8, x2)

inst_313:
// rs1_val==2576980378 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x99999999, x1, 41*XLEN/8, x2)

inst_314:
// rs1_val==2576980378 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x55555554, x1, 42*XLEN/8, x2)

inst_315:
// rs1_val==2576980378 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0xaaaaaaa9, x1, 43*XLEN/8, x2)

inst_316:
// rs1_val==2576980378 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x33333332, x1, 44*XLEN/8, x2)

inst_317:
// rs1_val==2576980378 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0xcccccccb, x1, 45*XLEN/8, x2)

inst_318:
// rs1_val==2576980378 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x66666665, x1, 46*XLEN/8, x2)

inst_319:
// rs1_val==2576980378 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x99999998, x1, 47*XLEN/8, x2)

inst_320:
// rs1_val==2576980378 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x55555556, x1, 48*XLEN/8, x2)

inst_321:
// rs1_val==2576980378 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0xaaaaaaab, x1, 49*XLEN/8, x2)

inst_322:
// rs1_val==2576980378 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x33333334, x1, 50*XLEN/8, x2)

inst_323:
// rs1_val==2576980378 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0xcccccccd, x1, 51*XLEN/8, x2)

inst_324:
// rs1_val==2576980378 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x66666667, x1, 52*XLEN/8, x2)

inst_325:
// rs1_val==2576980378 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x9999999a, x1, 53*XLEN/8, x2)

inst_326:
// rs1_val==2576980378 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x0, x1, 54*XLEN/8, x2)

inst_327:
// rs1_val==2576980378 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x1, x1, 55*XLEN/8, x2)

inst_328:
// rs1_val==2576980378 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0xffffffff, x1, 56*XLEN/8, x2)

inst_329:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x55555555, x1, 57*XLEN/8, x2)

inst_330:
// rs1_val==0 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0xaaaaaaaa, x1, 58*XLEN/8, x2)

inst_331:
// rs1_val==0 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x33333333, x1, 59*XLEN/8, x2)

inst_332:
// rs1_val==0 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0xcccccccc, x1, 60*XLEN/8, x2)

inst_333:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x66666666, x1, 61*XLEN/8, x2)

inst_334:
// rs1_val==0 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x99999999, x1, 62*XLEN/8, x2)

inst_335:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x55555554, x1, 63*XLEN/8, x2)

inst_336:
// rs1_val==0 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0xaaaaaaa9, x1, 64*XLEN/8, x2)

inst_337:
// rs1_val==0 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x33333332, x1, 65*XLEN/8, x2)

inst_338:
// rs1_val==0 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0xcccccccb, x1, 66*XLEN/8, x2)

inst_339:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x66666665, x1, 67*XLEN/8, x2)

inst_340:
// rs1_val==0 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x99999998, x1, 68*XLEN/8, x2)

inst_341:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x55555556, x1, 69*XLEN/8, x2)

inst_342:
// rs1_val==0 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0xaaaaaaab, x1, 70*XLEN/8, x2)

inst_343:
// rs1_val==0 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x33333334, x1, 71*XLEN/8, x2)

inst_344:
// rs1_val==0 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0xcccccccd, x1, 72*XLEN/8, x2)

inst_345:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x66666667, x1, 73*XLEN/8, x2)

inst_346:
// rs1_val==0 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x9999999a, x1, 74*XLEN/8, x2)

inst_347:
// rs1_val==0 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x0, x1, 75*XLEN/8, x2)

inst_348:
// rs1_val==0 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0x1, x1, 76*XLEN/8, x2)

inst_349:
// rs1_val==0 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x0, 0xffffffff, x1, 77*XLEN/8, x2)

inst_350:
// rs1_val==1 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x55555555, x1, 78*XLEN/8, x2)

inst_351:
// rs1_val==1 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xaaaaaaaa, x1, 79*XLEN/8, x2)

inst_352:
// rs1_val==1 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x33333333, x1, 80*XLEN/8, x2)

inst_353:
// rs1_val==1 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xcccccccc, x1, 81*XLEN/8, x2)

inst_354:
// rs1_val==1 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x66666666, x1, 82*XLEN/8, x2)

inst_355:
// rs1_val==1 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x99999999, x1, 83*XLEN/8, x2)

inst_356:
// rs1_val==1 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x55555554, x1, 84*XLEN/8, x2)

inst_357:
// rs1_val==1 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xaaaaaaa9, x1, 85*XLEN/8, x2)

inst_358:
// rs1_val==1 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x33333332, x1, 86*XLEN/8, x2)

inst_359:
// rs1_val==1 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xcccccccb, x1, 87*XLEN/8, x2)

inst_360:
// rs1_val==1 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x66666665, x1, 88*XLEN/8, x2)

inst_361:
// rs1_val==1 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x99999998, x1, 89*XLEN/8, x2)

inst_362:
// rs1_val==1 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x55555556, x1, 90*XLEN/8, x2)

inst_363:
// rs1_val==1 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xaaaaaaab, x1, 91*XLEN/8, x2)

inst_364:
// rs1_val==1 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x33333334, x1, 92*XLEN/8, x2)

inst_365:
// rs1_val==1 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xcccccccd, x1, 93*XLEN/8, x2)

inst_366:
// rs1_val==1 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x66666667, x1, 94*XLEN/8, x2)

inst_367:
// rs1_val==1 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x9999999a, x1, 95*XLEN/8, x2)

inst_368:
// rs1_val==1 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x0, x1, 96*XLEN/8, x2)

inst_369:
// rs1_val==1 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0x1, x1, 97*XLEN/8, x2)

inst_370:
// rs1_val==1 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x1, 0xffffffff, x1, 98*XLEN/8, x2)

inst_371:
// rs1_val==4294967295 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x55555555, x1, 99*XLEN/8, x2)

inst_372:
// rs1_val==4294967295 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0xaaaaaaaa, x1, 100*XLEN/8, x2)

inst_373:
// rs1_val==4294967295 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x33333333, x1, 101*XLEN/8, x2)

inst_374:
// rs1_val==4294967295 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0xcccccccc, x1, 102*XLEN/8, x2)

inst_375:
// rs1_val==4294967295 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x66666666, x1, 103*XLEN/8, x2)

inst_376:
// rs1_val==4294967295 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x99999999, x1, 104*XLEN/8, x2)

inst_377:
// rs1_val==4294967295 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x55555554, x1, 105*XLEN/8, x2)

inst_378:
// rs1_val==4294967295 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0xaaaaaaa9, x1, 106*XLEN/8, x2)

inst_379:
// rs1_val==4294967295 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x33333332, x1, 107*XLEN/8, x2)

inst_380:
// rs1_val==4294967295 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0xcccccccb, x1, 108*XLEN/8, x2)

inst_381:
// rs1_val==4294967295 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x66666665, x1, 109*XLEN/8, x2)

inst_382:
// rs1_val==4294967295 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x99999998, x1, 110*XLEN/8, x2)

inst_383:
// rs1_val==4294967295 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0xaaaaaaab, x1, 111*XLEN/8, x2)

inst_384:
// rs1_val==4294967295 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x33333334, x1, 112*XLEN/8, x2)

inst_385:
// rs1_val==4294967295 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0xcccccccd, x1, 113*XLEN/8, x2)

inst_386:
// rs1_val==4294967295 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x66666667, x1, 114*XLEN/8, x2)

inst_387:
// rs1_val==4294967295 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x9999999a, x1, 115*XLEN/8, x2)

inst_388:
// rs1_val==4294967295 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x0, x1, 116*XLEN/8, x2)

inst_389:
// rs1_val==4294967295 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0x1, x1, 117*XLEN/8, x2)

inst_390:
// rs1_val==4294967295 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffffffff, 0xffffffff, x1, 118*XLEN/8, x2)

inst_391:
// rs1_val==858993458 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x9999999a, x1, 119*XLEN/8, x2)

inst_392:
// rs1_val==858993458 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x0, x1, 120*XLEN/8, x2)

inst_393:
// rs1_val==858993458 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0x1, x1, 121*XLEN/8, x2)

inst_394:
// rs1_val==858993458 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333332;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333332, 0xffffffff, x1, 122*XLEN/8, x2)

inst_395:
// rs1_val==3435973835 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x55555555, x1, 123*XLEN/8, x2)

inst_396:
// rs1_val==3435973835 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0xaaaaaaaa, x1, 124*XLEN/8, x2)

inst_397:
// rs1_val==3435973835 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x33333333, x1, 125*XLEN/8, x2)

inst_398:
// rs1_val==3435973835 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0xcccccccc, x1, 126*XLEN/8, x2)

inst_399:
// rs1_val==3435973835 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x66666666, x1, 127*XLEN/8, x2)

inst_400:
// rs1_val==3435973835 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x99999999, x1, 128*XLEN/8, x2)

inst_401:
// rs1_val==3435973835 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x55555554, x1, 129*XLEN/8, x2)

inst_402:
// rs1_val==3435973835 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0xaaaaaaa9, x1, 130*XLEN/8, x2)

inst_403:
// rs1_val==3435973835 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x33333332, x1, 131*XLEN/8, x2)

inst_404:
// rs1_val==3435973835 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0xcccccccb, x1, 132*XLEN/8, x2)

inst_405:
// rs1_val==3435973835 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x66666665, x1, 133*XLEN/8, x2)

inst_406:
// rs1_val==3435973835 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x99999998, x1, 134*XLEN/8, x2)

inst_407:
// rs1_val==3435973835 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x55555556, x1, 135*XLEN/8, x2)

inst_408:
// rs1_val==3435973835 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0xaaaaaaab, x1, 136*XLEN/8, x2)

inst_409:
// rs1_val==3435973835 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x33333334, x1, 137*XLEN/8, x2)

inst_410:
// rs1_val==3435973835 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0xcccccccd, x1, 138*XLEN/8, x2)

inst_411:
// rs1_val==3435973835 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x66666667, x1, 139*XLEN/8, x2)

inst_412:
// rs1_val==3435973835 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x9999999a, x1, 140*XLEN/8, x2)

inst_413:
// rs1_val==3435973835 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x0, x1, 141*XLEN/8, x2)

inst_414:
// rs1_val==3435973835 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0x1, x1, 142*XLEN/8, x2)

inst_415:
// rs1_val==3435973835 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccb;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccb, 0xffffffff, x1, 143*XLEN/8, x2)

inst_416:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x55555555, x1, 144*XLEN/8, x2)

inst_417:
// rs1_val==1717986917 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0xaaaaaaaa, x1, 145*XLEN/8, x2)

inst_418:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x33333333, x1, 146*XLEN/8, x2)

inst_419:
// rs1_val==1717986917 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0xcccccccc, x1, 147*XLEN/8, x2)

inst_420:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x66666666, x1, 148*XLEN/8, x2)

inst_421:
// rs1_val==1717986917 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x99999999, x1, 149*XLEN/8, x2)

inst_422:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x55555554, x1, 150*XLEN/8, x2)

inst_423:
// rs1_val==1717986917 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0xaaaaaaa9, x1, 151*XLEN/8, x2)

inst_424:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x33333332, x1, 152*XLEN/8, x2)

inst_425:
// rs1_val==1717986917 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0xcccccccb, x1, 153*XLEN/8, x2)

inst_426:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x66666665, x1, 154*XLEN/8, x2)

inst_427:
// rs1_val==1717986917 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x99999998, x1, 155*XLEN/8, x2)

inst_428:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x55555556, x1, 156*XLEN/8, x2)

inst_429:
// rs1_val==1717986917 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0xaaaaaaab, x1, 157*XLEN/8, x2)

inst_430:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x33333334, x1, 158*XLEN/8, x2)

inst_431:
// rs1_val==1717986917 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0xcccccccd, x1, 159*XLEN/8, x2)

inst_432:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x66666667, x1, 160*XLEN/8, x2)

inst_433:
// rs1_val==1717986917 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x9999999a, x1, 161*XLEN/8, x2)

inst_434:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x0, x1, 162*XLEN/8, x2)

inst_435:
// rs1_val==1717986917 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0x1, x1, 163*XLEN/8, x2)

inst_436:
// rs1_val==1717986917 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666665;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666665, 0xffffffff, x1, 164*XLEN/8, x2)

inst_437:
// rs1_val==2576980376 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x55555555, x1, 165*XLEN/8, x2)

inst_438:
// rs1_val==2576980376 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0xaaaaaaaa, x1, 166*XLEN/8, x2)

inst_439:
// rs1_val==2576980376 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x33333333, x1, 167*XLEN/8, x2)

inst_440:
// rs1_val==2576980376 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0xcccccccc, x1, 168*XLEN/8, x2)

inst_441:
// rs1_val==2576980376 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x66666666, x1, 169*XLEN/8, x2)

inst_442:
// rs1_val==2576980376 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x99999999, x1, 170*XLEN/8, x2)

inst_443:
// rs1_val==2576980376 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x55555554, x1, 171*XLEN/8, x2)

inst_444:
// rs1_val==2576980376 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0xaaaaaaa9, x1, 172*XLEN/8, x2)

inst_445:
// rs1_val==2576980376 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x33333332, x1, 173*XLEN/8, x2)

inst_446:
// rs1_val==2576980376 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0xcccccccb, x1, 174*XLEN/8, x2)

inst_447:
// rs1_val==2576980376 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x66666665, x1, 175*XLEN/8, x2)

inst_448:
// rs1_val==2576980376 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x99999998, x1, 176*XLEN/8, x2)

inst_449:
// rs1_val==2576980376 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x55555556, x1, 177*XLEN/8, x2)

inst_450:
// rs1_val==2576980376 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0xaaaaaaab, x1, 178*XLEN/8, x2)

inst_451:
// rs1_val==2576980376 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x33333334, x1, 179*XLEN/8, x2)

inst_452:
// rs1_val==2576980376 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0xcccccccd, x1, 180*XLEN/8, x2)

inst_453:
// rs1_val==2576980376 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x66666667, x1, 181*XLEN/8, x2)

inst_454:
// rs1_val==2576980376 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x9999999a, x1, 182*XLEN/8, x2)

inst_455:
// rs1_val==2576980376 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x0, x1, 183*XLEN/8, x2)

inst_456:
// rs1_val==2576980376 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0x1, x1, 184*XLEN/8, x2)

inst_457:
// rs1_val==2576980376 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x99999998;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x99999998, 0xffffffff, x1, 185*XLEN/8, x2)

inst_458:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x55555555, x1, 186*XLEN/8, x2)

inst_459:
// rs1_val==1431655766 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0xaaaaaaaa, x1, 187*XLEN/8, x2)

inst_460:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x33333333, x1, 188*XLEN/8, x2)

inst_461:
// rs1_val==1431655766 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0xcccccccc, x1, 189*XLEN/8, x2)

inst_462:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x66666666, x1, 190*XLEN/8, x2)

inst_463:
// rs1_val==1431655766 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x99999999, x1, 191*XLEN/8, x2)

inst_464:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x55555554, x1, 192*XLEN/8, x2)

inst_465:
// rs1_val==1431655766 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0xaaaaaaa9, x1, 193*XLEN/8, x2)

inst_466:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x33333332, x1, 194*XLEN/8, x2)

inst_467:
// rs1_val==1431655766 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0xcccccccb, x1, 195*XLEN/8, x2)

inst_468:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x66666665, x1, 196*XLEN/8, x2)

inst_469:
// rs1_val==1431655766 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x99999998, x1, 197*XLEN/8, x2)

inst_470:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x55555556, x1, 198*XLEN/8, x2)

inst_471:
// rs1_val==1431655766 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0xaaaaaaab, x1, 199*XLEN/8, x2)

inst_472:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x33333334, x1, 200*XLEN/8, x2)

inst_473:
// rs1_val==1431655766 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0xcccccccd, x1, 201*XLEN/8, x2)

inst_474:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x66666667, x1, 202*XLEN/8, x2)

inst_475:
// rs1_val==1431655766 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x9999999a, x1, 203*XLEN/8, x2)

inst_476:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x0, x1, 204*XLEN/8, x2)

inst_477:
// rs1_val==1431655766 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0x1, x1, 205*XLEN/8, x2)

inst_478:
// rs1_val==1431655766 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x55555556;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x55555556, 0xffffffff, x1, 206*XLEN/8, x2)

inst_479:
// rs1_val==2863311531 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x55555555, x1, 207*XLEN/8, x2)

inst_480:
// rs1_val==2863311531 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0xaaaaaaaa, x1, 208*XLEN/8, x2)

inst_481:
// rs1_val==2863311531 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x33333333, x1, 209*XLEN/8, x2)

inst_482:
// rs1_val==2863311531 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0xcccccccc, x1, 210*XLEN/8, x2)

inst_483:
// rs1_val==2863311531 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x66666666, x1, 211*XLEN/8, x2)

inst_484:
// rs1_val==2863311531 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x99999999, x1, 212*XLEN/8, x2)

inst_485:
// rs1_val==2863311531 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x55555554, x1, 213*XLEN/8, x2)

inst_486:
// rs1_val==2863311531 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0xaaaaaaa9, x1, 214*XLEN/8, x2)

inst_487:
// rs1_val==2863311531 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x33333332, x1, 215*XLEN/8, x2)

inst_488:
// rs1_val==2863311531 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0xcccccccb, x1, 216*XLEN/8, x2)

inst_489:
// rs1_val==2863311531 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x66666665, x1, 217*XLEN/8, x2)

inst_490:
// rs1_val==2863311531 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x99999998, x1, 218*XLEN/8, x2)

inst_491:
// rs1_val==2863311531 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x55555556, x1, 219*XLEN/8, x2)

inst_492:
// rs1_val==2863311531 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0xaaaaaaab, x1, 220*XLEN/8, x2)

inst_493:
// rs1_val==2863311531 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x33333334, x1, 221*XLEN/8, x2)

inst_494:
// rs1_val==2863311531 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0xcccccccd, x1, 222*XLEN/8, x2)

inst_495:
// rs1_val==2863311531 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x66666667, x1, 223*XLEN/8, x2)

inst_496:
// rs1_val==2863311531 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x9999999a, x1, 224*XLEN/8, x2)

inst_497:
// rs1_val==2863311531 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x0, x1, 225*XLEN/8, x2)

inst_498:
// rs1_val==2863311531 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0x1, x1, 226*XLEN/8, x2)

inst_499:
// rs1_val==2863311531 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaab;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xaaaaaaab, 0xffffffff, x1, 227*XLEN/8, x2)

inst_500:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x55555555, x1, 228*XLEN/8, x2)

inst_501:
// rs1_val==858993460 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0xaaaaaaaa, x1, 229*XLEN/8, x2)

inst_502:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x33333333, x1, 230*XLEN/8, x2)

inst_503:
// rs1_val==858993460 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0xcccccccc, x1, 231*XLEN/8, x2)

inst_504:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x66666666, x1, 232*XLEN/8, x2)

inst_505:
// rs1_val==858993460 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x99999999, x1, 233*XLEN/8, x2)

inst_506:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x55555554, x1, 234*XLEN/8, x2)

inst_507:
// rs1_val==858993460 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0xaaaaaaa9, x1, 235*XLEN/8, x2)

inst_508:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x33333332, x1, 236*XLEN/8, x2)

inst_509:
// rs1_val==858993460 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0xcccccccb, x1, 237*XLEN/8, x2)

inst_510:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x66666665, x1, 238*XLEN/8, x2)

inst_511:
// rs1_val==858993460 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x99999998, x1, 239*XLEN/8, x2)

inst_512:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x55555556, x1, 240*XLEN/8, x2)

inst_513:
// rs1_val==858993460 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0xaaaaaaab, x1, 241*XLEN/8, x2)

inst_514:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x33333334, x1, 242*XLEN/8, x2)

inst_515:
// rs1_val==858993460 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0xcccccccd, x1, 243*XLEN/8, x2)

inst_516:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x66666667, x1, 244*XLEN/8, x2)

inst_517:
// rs1_val==858993460 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x9999999a, x1, 245*XLEN/8, x2)

inst_518:
// rs1_val==858993460 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x0, x1, 246*XLEN/8, x2)

inst_519:
// rs1_val==858993460 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0x1, x1, 247*XLEN/8, x2)

inst_520:
// rs1_val==858993460 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x33333334;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x33333334, 0xffffffff, x1, 248*XLEN/8, x2)

inst_521:
// rs1_val==3435973837 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x55555555, x1, 249*XLEN/8, x2)

inst_522:
// rs1_val==3435973837 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xaaaaaaaa, x1, 250*XLEN/8, x2)

inst_523:
// rs1_val==3435973837 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x33333333, x1, 251*XLEN/8, x2)

inst_524:
// rs1_val==3435973837 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xcccccccc, x1, 252*XLEN/8, x2)

inst_525:
// rs1_val==3435973837 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x66666666, x1, 253*XLEN/8, x2)

inst_526:
// rs1_val==3435973837 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x99999999, x1, 254*XLEN/8, x2)

inst_527:
// rs1_val==3435973837 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x55555554, x1, 255*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_528:
// rs1_val==3435973837 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xaaaaaaa9, x1, 0*XLEN/8, x2)

inst_529:
// rs1_val==3435973837 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x33333332, x1, 1*XLEN/8, x2)

inst_530:
// rs1_val==3435973837 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xcccccccb, x1, 2*XLEN/8, x2)

inst_531:
// rs1_val==3435973837 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x66666665, x1, 3*XLEN/8, x2)

inst_532:
// rs1_val==3435973837 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x99999998, x1, 4*XLEN/8, x2)

inst_533:
// rs1_val==3435973837 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x55555556, x1, 5*XLEN/8, x2)

inst_534:
// rs1_val==3435973837 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xaaaaaaab, x1, 6*XLEN/8, x2)

inst_535:
// rs1_val==3435973837 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x33333334, x1, 7*XLEN/8, x2)

inst_536:
// rs1_val==3435973837 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xcccccccd, x1, 8*XLEN/8, x2)

inst_537:
// rs1_val==3435973837 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x66666667, x1, 9*XLEN/8, x2)

inst_538:
// rs1_val==3435973837 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x9999999a, x1, 10*XLEN/8, x2)

inst_539:
// rs1_val==3435973837 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x0, x1, 11*XLEN/8, x2)

inst_540:
// rs1_val==3435973837 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0x1, x1, 12*XLEN/8, x2)

inst_541:
// rs1_val==3435973837 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xcccccccd;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xcccccccd, 0xffffffff, x1, 13*XLEN/8, x2)

inst_542:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x55555555, x1, 14*XLEN/8, x2)

inst_543:
// rs1_val==1717986919 and rs2_val==2863311530, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xaaaaaaaa
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xaaaaaaaa, x1, 15*XLEN/8, x2)

inst_544:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x33333333, x1, 16*XLEN/8, x2)

inst_545:
// rs1_val==1717986919 and rs2_val==3435973836, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xcccccccc
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xcccccccc, x1, 17*XLEN/8, x2)

inst_546:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x66666666, x1, 18*XLEN/8, x2)

inst_547:
// rs1_val==1717986919 and rs2_val==2576980377, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x99999999
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x99999999, x1, 19*XLEN/8, x2)

inst_548:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x55555554, x1, 20*XLEN/8, x2)

inst_549:
// rs1_val==1717986919 and rs2_val==2863311529, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xaaaaaaa9
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xaaaaaaa9, x1, 21*XLEN/8, x2)

inst_550:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x33333332, x1, 22*XLEN/8, x2)

inst_551:
// rs1_val==1717986919 and rs2_val==3435973835, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xcccccccb
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xcccccccb, x1, 23*XLEN/8, x2)

inst_552:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x66666665, x1, 24*XLEN/8, x2)

inst_553:
// rs1_val==1717986919 and rs2_val==2576980376, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x99999998
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x99999998, x1, 25*XLEN/8, x2)

inst_554:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x55555556, x1, 26*XLEN/8, x2)

inst_555:
// rs1_val==1717986919 and rs2_val==2863311531, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xaaaaaaab
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xaaaaaaab, x1, 27*XLEN/8, x2)

inst_556:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x33333334, x1, 28*XLEN/8, x2)

inst_557:
// rs1_val==1717986919 and rs2_val==3435973837, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xcccccccd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xcccccccd, x1, 29*XLEN/8, x2)

inst_558:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x66666667, x1, 30*XLEN/8, x2)

inst_559:
// rs1_val==1717986919 and rs2_val==2576980378, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x9999999a
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x9999999a, x1, 31*XLEN/8, x2)

inst_560:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x0, x1, 32*XLEN/8, x2)

inst_561:
// rs1_val==1717986919 and rs2_val==1, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0x1
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0x1, x1, 33*XLEN/8, x2)

inst_562:
// rs1_val==1717986919 and rs2_val==4294967295, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xffffffff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xffffffff, x1, 34*XLEN/8, x2)

inst_563:
// rs1_val==2576980378 and rs2_val==1431655765, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x9999999a;  op2val:0x55555555
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x9999999a, 0x55555555, x1, 35*XLEN/8, x2)

inst_564:
// rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 1024
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x400;  op2val:0x400
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x400, 0x400, x1, 36*XLEN/8, x2)

inst_565:
// rs2_val == 4294967293, rs1_val == 65536
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x10000;  op2val:0xfffffffd
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x10000, 0xfffffffd, x1, 37*XLEN/8, x2)

inst_566:
// rs2_val == 4294967287, 
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0x66666667;  op2val:0xfffffff7
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0x66666667, 0xfffffff7, x1, 38*XLEN/8, x2)

inst_567:
// rs2_val == 4294967039, rs1_val == 4290772991
// opcode: xnor ; op1:x14; op2:x13; dest:x15; op1val:0xffbfffff;  op2val:0xfffffeff
TEST_RR_OP(xnor, x15, x14, x13, 0x00000000, 0xffbfffff, 0xfffffeff, x1, 39*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 6*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 5*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 5*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 40*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
