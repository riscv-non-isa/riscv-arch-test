
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Aug 16 08:12:01 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/eman/riscof/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/eman/riscof/riscv-ctg/sample_cgfs/rv32e_b.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the bclr instruction of the RISC-V RV32Zbs extension for the bclr covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32EZbs")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*E.*Zbs.*) ;def RVTEST_E = True;def TEST_CASE_1=True;",bclr)

RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs2 == rd != rs1, rs1==x11, rs2==x6, rd==x6, rs1_val == 1431655765, rs2_val == 4294963199
// opcode: bclr ; op1:x11; op2:x6; dest:x6; op1val:0x55555555;  op2val:0xffffefff
TEST_RR_OP(bclr, x6, x11, x6, 0x00000000, 0x55555555, 0xffffefff, x9, 0*XLEN/8, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x8, rd==x4, rs1_val == 2863311530, rs2_val == 2
// opcode: bclr ; op1:x0; op2:x8; dest:x4; op1val:0x0;  op2val:0x2
TEST_RR_OP(bclr, x4, x0, x8, 0x00000000, 0x0, 0x2, x9, 1*XLEN/8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x8, rs2_val == 1431655765, rs1_val == 4026531839
// opcode: bclr ; op1:x12; op2:x12; dest:x8; op1val:0xefffffff;  op2val:0xefffffff
TEST_RR_OP(bclr, x8, x12, x12, 0x00000000, 0xefffffff, 0xefffffff, x9, 2*XLEN/8, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs2_val == 2863311530, 
// opcode: bclr ; op1:x5; op2:x5; dest:x5; op1val:0xa;  op2val:0xa
TEST_RR_OP(bclr, x5, x5, x5, 0x00000000, 0xa, 0xa, x9, 3*XLEN/8, x10)

inst_4:
// rs1 == rd != rs2, rs1==x2, rs2==x3, rd==x2, rs1_val == 0xFFFFFFFF and rs2_val == 0x02 
// opcode: bclr ; op1:x2; op2:x3; dest:x2; op1val:-0x1;  op2val:0x2
TEST_RR_OP(bclr, x2, x2, x3, 0x00000000, -0x1, 0x2, x9, 4*XLEN/8, x10)

inst_5:
// rs1==x7, rs2==x1, rd==x13, rs1_val == 0xFFFFFFFE and rs2_val == 0x1E 
// opcode: bclr ; op1:x7; op2:x1; dest:x13; op1val:-0x2;  op2val:0x1e
TEST_RR_OP(bclr, x13, x7, x1, 0x00000000, -0x2, 0x1e, x9, 5*XLEN/8, x10)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_6:
// rs1==x9, rs2==x11, rd==x14, rs1_val == 0xFFFFFFFD and rs2_val == 0x00 
// opcode: bclr ; op1:x9; op2:x11; dest:x14; op1val:-0x3;  op2val:0x0
TEST_RR_OP(bclr, x14, x9, x11, 0x00000000, -0x3, 0x0, x3, 0*XLEN/8, x4)

inst_7:
// rs1==x8, rs2==x2, rd==x15, rs2_val == 4294967294, 
// opcode: bclr ; op1:x8; op2:x2; dest:x15; op1val:0xc;  op2val:0xfffffffe
TEST_RR_OP(bclr, x15, x8, x2, 0x00000000, 0xc, 0xfffffffe, x3, 1*XLEN/8, x4)

inst_8:
// rs1==x10, rs2==x14, rd==x9, rs2_val == 4294967293, rs1_val == 1
// opcode: bclr ; op1:x10; op2:x14; dest:x9; op1val:0x1;  op2val:0xfffffffd
TEST_RR_OP(bclr, x9, x10, x14, 0x00000000, 0x1, 0xfffffffd, x3, 2*XLEN/8, x4)

inst_9:
// rs1==x6, rs2==x9, rd==x1, rs2_val == 4294967291, rs1_val == 268435456
// opcode: bclr ; op1:x6; op2:x9; dest:x1; op1val:0x10000000;  op2val:0xfffffffb
TEST_RR_OP(bclr, x1, x6, x9, 0x00000000, 0x10000000, 0xfffffffb, x3, 3*XLEN/8, x4)

inst_10:
// rs1==x13, rs2==x7, rd==x12, rs2_val == 4294967287, rs1_val == 4294967293
// opcode: bclr ; op1:x13; op2:x7; dest:x12; op1val:0xfffffffd;  op2val:0xfffffff7
TEST_RR_OP(bclr, x12, x13, x7, 0x00000000, 0xfffffffd, 0xfffffff7, x3, 4*XLEN/8, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_11:
// rs1==x4, rs2==x13, rd==x11, rs2_val == 4294967279, 
// opcode: bclr ; op1:x4; op2:x13; dest:x11; op1val:0x18;  op2val:0xffffffef
TEST_RR_OP(bclr, x11, x4, x13, 0x00000000, 0x18, 0xffffffef, x2, 0*XLEN/8, x5)

inst_12:
// rs1==x1, rs2==x0, rd==x7, rs2_val == 4294967263, rs1_val == 2147483647
// opcode: bclr ; op1:x1; op2:x0; dest:x7; op1val:0x7fffffff;  op2val:0x0
TEST_RR_OP(bclr, x7, x1, x0, 0x00000000, 0x7fffffff, 0x0, x2, 1*XLEN/8, x5)

inst_13:
// rs1==x3, rs2==x15, rd==x10, rs2_val == 4294967231, rs1_val == 16777216
// opcode: bclr ; op1:x3; op2:x15; dest:x10; op1val:0x1000000;  op2val:0xffffffbf
TEST_RR_OP(bclr, x10, x3, x15, 0x00000000, 0x1000000, 0xffffffbf, x2, 2*XLEN/8, x5)

inst_14:
// rs1==x15, rs2==x10, rd==x0, rs2_val == 4294967167, 
// opcode: bclr ; op1:x15; op2:x10; dest:x0; op1val:0xb;  op2val:0xffffff7f
TEST_RR_OP(bclr, x0, x15, x10, 0x00000000, 0xb, 0xffffff7f, x2, 3*XLEN/8, x1)

inst_15:
// rs1==x14, rs2==x4, rd==x3, rs2_val == 4294967039, 
// opcode: bclr ; op1:x14; op2:x4; dest:x3; op1val:0x1;  op2val:0xfffffeff
TEST_RR_OP(bclr, x3, x14, x4, 0x00000000, 0x1, 0xfffffeff, x2, 4*XLEN/8, x1)

inst_16:
// rs2_val == 4294966783, rs1_val == 4293918719
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffefffff;  op2val:0xfffffdff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffefffff, 0xfffffdff, x2, 5*XLEN/8, x1)

inst_17:
// rs2_val == 4294966271, rs1_val == 256
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x100;  op2val:0xfffffbff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x100, 0xfffffbff, x2, 6*XLEN/8, x1)

inst_18:
// rs2_val == 4294965247, rs1_val == 2097152
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x200000;  op2val:0xfffff7ff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x200000, 0xfffff7ff, x2, 7*XLEN/8, x1)

inst_19:
// rs2_val == 4294959103, rs1_val == 67108864
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4000000;  op2val:0xffffdfff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4000000, 0xffffdfff, x2, 8*XLEN/8, x1)

inst_20:
// rs2_val == 4294950911, rs1_val == 32
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x20;  op2val:0xffffbfff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x20, 0xffffbfff, x2, 9*XLEN/8, x1)

inst_21:
// rs2_val == 4294934527, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xc;  op2val:0xffff7fff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xc, 0xffff7fff, x2, 10*XLEN/8, x1)

inst_22:
// rs2_val == 4294901759, rs1_val == 16384
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4000;  op2val:0xfffeffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4000, 0xfffeffff, x2, 11*XLEN/8, x1)

inst_23:
// rs2_val == 4294836223, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xc;  op2val:0xfffdffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xc, 0xfffdffff, x2, 12*XLEN/8, x1)

inst_24:
// rs2_val == 4294705151, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xefffffff;  op2val:0xfffbffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xefffffff, 0xfffbffff, x2, 13*XLEN/8, x1)

inst_25:
// rs2_val == 4294443007, rs1_val == 1073741824
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x40000000;  op2val:0xfff7ffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x40000000, 0xfff7ffff, x2, 14*XLEN/8, x1)

inst_26:
// rs2_val == 4293918719, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4000;  op2val:0xffefffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4000, 0xffefffff, x2, 15*XLEN/8, x1)

inst_27:
// rs2_val == 4292870143, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xc;  op2val:0xffdfffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xc, 0xffdfffff, x2, 16*XLEN/8, x1)

inst_28:
// rs2_val == 4290772991, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffefffff;  op2val:0xffbfffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffefffff, 0xffbfffff, x2, 17*XLEN/8, x1)

inst_29:
// rs2_val == 4286578687, rs1_val == 4294967294
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffffffe;  op2val:0xff7fffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffffffe, 0xff7fffff, x2, 18*XLEN/8, x1)

inst_30:
// rs2_val == 4278190079, rs1_val == 4
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4;  op2val:0xfeffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4, 0xfeffffff, x2, 19*XLEN/8, x1)

inst_31:
// rs2_val == 4261412863, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x5;  op2val:0xfdffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x5, 0xfdffffff, x2, 20*XLEN/8, x1)

inst_32:
// rs2_val == 4227858431, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xfbffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x0, 0xfbffffff, x2, 21*XLEN/8, x1)

inst_33:
// rs2_val == 4160749567, rs1_val == 4290772991
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffbfffff;  op2val:0xf7ffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffbfffff, 0xf7ffffff, x2, 22*XLEN/8, x1)

inst_34:
// rs2_val == 4026531839, rs1_val == 4294966783
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffffdff;  op2val:0xefffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffffdff, 0xefffffff, x2, 23*XLEN/8, x1)

inst_35:
// rs2_val == 3758096383, rs1_val == 32768
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x8000;  op2val:0xdfffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x8000, 0xdfffffff, x2, 24*XLEN/8, x1)

inst_36:
// rs2_val == 3221225471, rs1_val == 65536
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x10000;  op2val:0xbfffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x10000, 0xbfffffff, x2, 25*XLEN/8, x1)

inst_37:
// rs2_val == 2147483647, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x7fffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1, 0x7fffffff, x2, 26*XLEN/8, x1)

inst_38:
// rs1_val == 4294967291, rs2_val == 134217728
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffffffb;  op2val:0x8000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffffffb, 0x8000000, x2, 27*XLEN/8, x1)

inst_39:
// rs1_val == 4294967287, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffffff7;  op2val:0x1a
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffffff7, 0x1a, x2, 28*XLEN/8, x1)

inst_40:
// rs1_val == 4294967279, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffffef;  op2val:0xb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffffef, 0xb, x2, 29*XLEN/8, x1)

inst_41:
// rs1_val == 4294967263, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffffdf;  op2val:0xffffffbf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffffdf, 0xffffffbf, x2, 30*XLEN/8, x1)

inst_42:
// rs1_val == 4294967231, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffffbf;  op2val:0x12
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffffbf, 0x12, x2, 31*XLEN/8, x1)

inst_43:
// rs1_val == 4294967167, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffff7f;  op2val:0xfffffffe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffff7f, 0xfffffffe, x2, 32*XLEN/8, x1)

inst_44:
// rs1_val == 4294967039, rs2_val == 65536
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffffeff;  op2val:0x10000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffffeff, 0x10000, x2, 33*XLEN/8, x1)

inst_45:
// rs1_val == 4294966271, rs2_val == 128
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffffbff;  op2val:0x80
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffffbff, 0x80, x2, 34*XLEN/8, x1)

inst_46:
// rs1_val == 4294965247, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffff7ff;  op2val:0x19
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffff7ff, 0x19, x2, 35*XLEN/8, x1)

inst_47:
// rs1_val == 4294963199, rs2_val == 4
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffefff;  op2val:0x4
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffefff, 0x4, x2, 36*XLEN/8, x1)

inst_48:
// rs1_val == 4294959103, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffdfff;  op2val:0x1f
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffdfff, 0x1f, x2, 37*XLEN/8, x1)

inst_49:
// rs1_val == 4294950911, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffbfff;  op2val:0xfffffffb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffbfff, 0xfffffffb, x2, 38*XLEN/8, x1)

inst_50:
// rs1_val == 4294934527, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffff7fff;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffff7fff, 0x1c, x2, 39*XLEN/8, x1)

inst_51:
// rs1_val == 4294901759, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffeffff;  op2val:0xfffffffb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffeffff, 0xfffffffb, x2, 40*XLEN/8, x1)

inst_52:
// rs1_val == 4294836223, rs2_val == 131072
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffdffff;  op2val:0x20000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffdffff, 0x20000, x2, 41*XLEN/8, x1)

inst_53:
// rs1_val == 4294705151, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffbffff;  op2val:0xfffff7ff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffbffff, 0xfffff7ff, x2, 42*XLEN/8, x1)

inst_54:
// rs1_val == 4294443007, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfff7ffff;  op2val:0x10000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfff7ffff, 0x10000, x2, 43*XLEN/8, x1)

inst_55:
// rs1_val == 4292870143, rs2_val == 1073741824
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffdfffff;  op2val:0x40000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffdfffff, 0x40000000, x2, 44*XLEN/8, x1)

inst_56:
// rs1_val == 4286578687, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xff7fffff;  op2val:0xfffffffe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xff7fffff, 0xfffffffe, x2, 45*XLEN/8, x1)

inst_57:
// rs1_val == 4278190079, rs2_val == 268435456
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfeffffff;  op2val:0x10000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfeffffff, 0x10000000, x2, 46*XLEN/8, x1)

inst_58:
// rs1_val == 4261412863, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfdffffff;  op2val:0xffffffbf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfdffffff, 0xffffffbf, x2, 47*XLEN/8, x1)

inst_59:
// rs1_val == 4227858431, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfbffffff;  op2val:0x15
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfbffffff, 0x15, x2, 48*XLEN/8, x1)

inst_60:
// rs1_val == 4160749567, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xf7ffffff;  op2val:0xd
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xf7ffffff, 0xd, x2, 49*XLEN/8, x1)

inst_61:
// rs1_val == 3758096383, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xdfffffff;  op2val:0x7
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xdfffffff, 0x7, x2, 50*XLEN/8, x1)

inst_62:
// rs1_val == 3221225471, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xbfffffff;  op2val:0xbfffffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xbfffffff, 0xbfffffff, x2, 51*XLEN/8, x1)

inst_63:
// rs2_val == 1, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1f;  op2val:0x1
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1f, 0x1, x2, 52*XLEN/8, x1)

inst_64:
// rs2_val == 8, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x7fffffff;  op2val:0x8
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x7fffffff, 0x8, x2, 53*XLEN/8, x1)

inst_65:
// rs2_val == 16, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1, 0x10, x2, 54*XLEN/8, x1)

inst_66:
// rs2_val == 32, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xd;  op2val:0x20
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xd, 0x20, x2, 55*XLEN/8, x1)

inst_67:
// rs2_val == 64, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x3;  op2val:0x40
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x3, 0x40, x2, 56*XLEN/8, x1)

inst_68:
// rs2_val == 256, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffbffff;  op2val:0x100
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffbffff, 0x100, x2, 57*XLEN/8, x1)

inst_69:
// rs2_val == 512, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x12;  op2val:0x200
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x12, 0x200, x2, 58*XLEN/8, x1)

inst_70:
// rs2_val == 1024, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x11;  op2val:0x400
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x11, 0x400, x2, 59*XLEN/8, x1)

inst_71:
// rs2_val == 2048, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x19;  op2val:0x800
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x19, 0x800, x2, 60*XLEN/8, x1)

inst_72:
// rs2_val == 4096, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xfffffffe;  op2val:0x1000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xfffffffe, 0x1000, x2, 61*XLEN/8, x1)

inst_73:
// rs2_val == 8192, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x3;  op2val:0x2000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x3, 0x2000, x2, 62*XLEN/8, x1)

inst_74:
// rs2_val == 16384, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1d;  op2val:0x4000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1d, 0x4000, x2, 63*XLEN/8, x1)

inst_75:
// rs2_val == 32768, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4;  op2val:0x8000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4, 0x8000, x2, 64*XLEN/8, x1)

inst_76:
// rs2_val == 262144, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffdfff;  op2val:0x40000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffdfff, 0x40000, x2, 65*XLEN/8, x1)

inst_77:
// rs2_val == 524288, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1b;  op2val:0x80000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1b, 0x80000, x2, 66*XLEN/8, x1)

inst_78:
// rs2_val == 1048576, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x9;  op2val:0x100000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x9, 0x100000, x2, 67*XLEN/8, x1)

inst_79:
// rs2_val == 2097152, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x19;  op2val:0x200000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x19, 0x200000, x2, 68*XLEN/8, x1)

inst_80:
// rs2_val == 4194304, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x12;  op2val:0x400000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x12, 0x400000, x2, 69*XLEN/8, x1)

inst_81:
// rs2_val == 8388608, rs1_val == 64
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x40;  op2val:0x800000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x40, 0x800000, x2, 70*XLEN/8, x1)

inst_82:
// rs2_val == 16777216, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x20;  op2val:0x1000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x20, 0x1000000, x2, 71*XLEN/8, x1)

inst_83:
// rs2_val == 33554432, rs1_val == 8192
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x2000;  op2val:0x2000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x2000, 0x2000000, x2, 72*XLEN/8, x1)

inst_84:
// rs2_val == 67108864, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x14;  op2val:0x4000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x14, 0x4000000, x2, 73*XLEN/8, x1)

inst_85:
// rs2_val == 536870912, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xffffffdf;  op2val:0x20000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xffffffdf, 0x20000000, x2, 74*XLEN/8, x1)

inst_86:
// rs2_val == 2147483648, rs1_val == 33554432
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x2000000;  op2val:0x80000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x2000000, 0x80000000, x2, 75*XLEN/8, x1)

inst_87:
// rs1_val == 2, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x2;  op2val:0xffdfffff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x2, 0xffdfffff, x2, 76*XLEN/8, x1)

inst_88:
// rs1_val == 8, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x8;  op2val:0xd
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x8, 0xd, x2, 77*XLEN/8, x1)

inst_89:
// rs1_val == 16, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x10;  op2val:0xfffffeff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x10, 0xfffffeff, x2, 78*XLEN/8, x1)

inst_90:
// rs1_val == 128, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x80;  op2val:0x4000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x80, 0x4000000, x2, 79*XLEN/8, x1)

inst_91:
// rs1_val == 512, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x200;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x200, 0x17, x2, 80*XLEN/8, x1)

inst_92:
// rs1_val == 1024, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x400;  op2val:0x15
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x400, 0x15, x2, 81*XLEN/8, x1)

inst_93:
// rs1_val == 2048, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x800;  op2val:0xffffbfff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x800, 0xffffbfff, x2, 82*XLEN/8, x1)

inst_94:
// rs1_val == 4096, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1000;  op2val:0xfffffeff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1000, 0xfffffeff, x2, 83*XLEN/8, x1)

inst_95:
// rs1_val == 131072, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x20000;  op2val:0xffffefff
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x20000, 0xffffefff, x2, 84*XLEN/8, x1)

inst_96:
// rs1_val == 262144, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x40000;  op2val:0x200
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x40000, 0x200, x2, 85*XLEN/8, x1)

inst_97:
// rs1_val == 524288, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x80000;  op2val:0x1000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x80000, 0x1000, x2, 86*XLEN/8, x1)

inst_98:
// rs1_val == 1048576, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x100000;  op2val:0x10000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x100000, 0x10000, x2, 87*XLEN/8, x1)

inst_99:
// rs1_val == 4194304, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x400000;  op2val:0xc
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x400000, 0xc, x2, 88*XLEN/8, x1)

inst_100:
// rs1_val == 8388608, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x800000;  op2val:0x20000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x800000, 0x20000000, x2, 89*XLEN/8, x1)

inst_101:
// rs1_val == 134217728, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x8000000;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x8000000, 0x1d, x2, 90*XLEN/8, x1)

inst_102:
// rs1_val == 536870912, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x20000000;  op2val:0x80000000
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x20000000, 0x80000000, x2, 91*XLEN/8, x1)

inst_103:
// rs1_val == 2147483648, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x80000000;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x80000000, 0x17, x2, 92*XLEN/8, x1)

inst_104:
// rs1_val == 0x797D76DF and rs2_val == 0x11 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x797d76df;  op2val:0x11
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x797d76df, 0x11, x2, 93*XLEN/8, x1)

inst_105:
// rs1_val == 0x50A03C5A and rs2_val == 0x16 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x50a03c5a;  op2val:0x16
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x50a03c5a, 0x16, x2, 94*XLEN/8, x1)

inst_106:
// rs1_val == 0x9205D39C and rs2_val == 0x18 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x6dfa2c64;  op2val:0x18
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x6dfa2c64, 0x18, x2, 95*XLEN/8, x1)

inst_107:
// rs1_val == 0x163DFF98 and rs2_val == 0x17 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x163dff98;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x163dff98, 0x17, x2, 96*XLEN/8, x1)

inst_108:
// rs1_val == 0xB87A9E30 and rs2_val == 0x11 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x478561d0;  op2val:0x11
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x478561d0, 0x11, x2, 97*XLEN/8, x1)

inst_109:
// rs1_val == 0x96CDF1A0 and rs2_val == 0x1D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x69320e60;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x69320e60, 0x1d, x2, 98*XLEN/8, x1)

inst_110:
// rs1_val == 0x32AB8740 and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x32ab8740;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x32ab8740, 0xe, x2, 99*XLEN/8, x1)

inst_111:
// rs1_val == 0x72C58380 and rs2_val == 0x00 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x72c58380;  op2val:0x0
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x72c58380, 0x0, x2, 100*XLEN/8, x1)

inst_112:
// rs1_val == 0x4C56BB00 and rs2_val == 0x09 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4c56bb00;  op2val:0x9
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4c56bb00, 0x9, x2, 101*XLEN/8, x1)

inst_113:
// rs1_val == 0xC1B7AE00 and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x3e485200;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x3e485200, 0x1c, x2, 102*XLEN/8, x1)

inst_114:
// rs1_val == 0x7AA5E400 and rs2_val == 0x0A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x7aa5e400;  op2val:0xa
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x7aa5e400, 0xa, x2, 103*XLEN/8, x1)

inst_115:
// rs1_val == 0xAA3D6800 and rs2_val == 0x0D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x55c29800;  op2val:0xd
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x55c29800, 0xd, x2, 104*XLEN/8, x1)

inst_116:
// rs1_val == 0xF1C6B000 and rs2_val == 0x0C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xe395000;  op2val:0xc
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xe395000, 0xc, x2, 105*XLEN/8, x1)

inst_117:
// rs1_val == 0x33BC2000 and rs2_val == 0x15 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x33bc2000;  op2val:0x15
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x33bc2000, 0x15, x2, 106*XLEN/8, x1)

inst_118:
// rs1_val == 0xA6C04000 and rs2_val == 0x19 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x593fc000;  op2val:0x19
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x593fc000, 0x19, x2, 107*XLEN/8, x1)

inst_119:
// rs1_val == 0xCD2F8000 and rs2_val == 0x05 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x32d08000;  op2val:0x5
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x32d08000, 0x5, x2, 108*XLEN/8, x1)

inst_120:
// rs1_val == 0x405D0000 and rs2_val == 0x03 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x405d0000;  op2val:0x3
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x405d0000, 0x3, x2, 109*XLEN/8, x1)

inst_121:
// rs1_val == 0xA56A0000 and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x5a960000;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x5a960000, 0xe, x2, 110*XLEN/8, x1)

inst_122:
// rs1_val == 0x55440000 and rs2_val == 0x1B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x55440000;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x55440000, 0x1b, x2, 111*XLEN/8, x1)

inst_123:
// rs1_val == 0x46880000 and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x46880000;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x46880000, 0x1c, x2, 112*XLEN/8, x1)

inst_124:
// rs1_val == 0xC7900000 and rs2_val == 0x1B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x38700000;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x38700000, 0x1b, x2, 113*XLEN/8, x1)

inst_125:
// rs1_val == 0xA3200000 and rs2_val == 0x08 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x5ce00000;  op2val:0x8
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x5ce00000, 0x8, x2, 114*XLEN/8, x1)

inst_126:
// rs1_val == 0xC8C00000 and rs2_val == 0x14 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x37400000;  op2val:0x14
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x37400000, 0x14, x2, 115*XLEN/8, x1)

inst_127:
// rs1_val == 0xD8800000 and rs2_val == 0x0A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x27800000;  op2val:0xa
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x27800000, 0xa, x2, 116*XLEN/8, x1)

inst_128:
// rs1_val == 0xFD000000 and rs2_val == 0x03 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x3000000;  op2val:0x3
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x3000000, 0x3, x2, 117*XLEN/8, x1)

inst_129:
// rs1_val == 0x82000000 and rs2_val == 0x0A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x7e000000;  op2val:0xa
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x7e000000, 0xa, x2, 118*XLEN/8, x1)

inst_130:
// rs1_val == 0xF4000000 and rs2_val == 0x05 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xc000000;  op2val:0x5
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xc000000, 0x5, x2, 119*XLEN/8, x1)

inst_131:
// rs1_val == 0x08000000 and rs2_val == 0x1A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x8000000;  op2val:0x1a
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x8000000, 0x1a, x2, 120*XLEN/8, x1)

inst_132:
// rs1_val == 0xB0000000 and rs2_val == 0x1E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x50000000;  op2val:0x1e
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x50000000, 0x1e, x2, 121*XLEN/8, x1)

inst_133:
// rs1_val == 0x60000000 and rs2_val == 0x18 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x60000000;  op2val:0x18
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x60000000, 0x18, x2, 122*XLEN/8, x1)

inst_134:
// rs1_val == 0x40000000 and rs2_val == 0x01 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x40000000;  op2val:0x1
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x40000000, 0x1, x2, 123*XLEN/8, x1)

inst_135:
// rs1_val == 0x80000000 and rs2_val == 0x05 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x80000000;  op2val:0x5
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x80000000, 0x5, x2, 124*XLEN/8, x1)

inst_136:
// rs1_val == 0x00000000 and rs2_val == 0x0C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0xc
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x0, 0xc, x2, 125*XLEN/8, x1)

inst_137:
// rs2_val == 0x1B and rs1_val == 0xA9E16E27 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x561e91d9;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x561e91d9, 0x1b, x2, 126*XLEN/8, x1)

inst_138:
// rs2_val == 0x1A and rs1_val == 0xF0EB21AA 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xf14de56;  op2val:0x1a
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xf14de56, 0x1a, x2, 127*XLEN/8, x1)

inst_139:
// rs2_val == 0x14 and rs1_val == 0xB0AB577A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x4f54a886;  op2val:0x14
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x4f54a886, 0x14, x2, 128*XLEN/8, x1)

inst_140:
// rs2_val == 0x18 and rs1_val == 0x4F55C73D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4f55c73d;  op2val:0x18
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4f55c73d, 0x18, x2, 129*XLEN/8, x1)

inst_141:
// rs2_val == 0x10 and rs1_val == 0x3C272728 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x3c272728;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x3c272728, 0x10, x2, 130*XLEN/8, x1)

inst_142:
// rs2_val == 0x00 and rs1_val == 0x2DEDB6A7 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x2dedb6a7;  op2val:0x0
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x2dedb6a7, 0x0, x2, 131*XLEN/8, x1)

inst_143:
// rs1_val == 0xFFFFFFFF and rs2_val == 0x12 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x1;  op2val:0x12
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x1, 0x12, x2, 132*XLEN/8, x1)

inst_144:
// rs1_val == 0x7FFFFFFF and rs2_val == 0x0B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x7fffffff;  op2val:0xb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x7fffffff, 0xb, x2, 133*XLEN/8, x1)

inst_145:
// rs1_val == 0xBFFFFFFF and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x40000001;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x40000001, 0xe, x2, 134*XLEN/8, x1)

inst_146:
// rs1_val == 0x9FFFFFFF and rs2_val == 0x09 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x60000001;  op2val:0x9
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x60000001, 0x9, x2, 135*XLEN/8, x1)

inst_147:
// rs1_val == 0xCFFFFFFF and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x30000001;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x30000001, 0xe, x2, 136*XLEN/8, x1)

inst_148:
// rs1_val == 0xA7FFFFFF and rs2_val == 0x0B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x58000001;  op2val:0xb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x58000001, 0xb, x2, 137*XLEN/8, x1)

inst_149:
// rs1_val == 0x23FFFFFF and rs2_val == 0x04 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x23ffffff;  op2val:0x4
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x23ffffff, 0x4, x2, 138*XLEN/8, x1)

inst_150:
// rs1_val == 0x89FFFFFF and rs2_val == 0x0D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x76000001;  op2val:0xd
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x76000001, 0xd, x2, 139*XLEN/8, x1)

inst_151:
// rs1_val == 0xBEFFFFFF and rs2_val == 0x12 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x41000001;  op2val:0x12
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x41000001, 0x12, x2, 140*XLEN/8, x1)

inst_152:
// rs1_val == 0x077FFFFF and rs2_val == 0x1B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x77fffff;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x77fffff, 0x1b, x2, 141*XLEN/8, x1)

inst_153:
// rs1_val == 0x203FFFFF and rs2_val == 0x00 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x203fffff;  op2val:0x0
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x203fffff, 0x0, x2, 142*XLEN/8, x1)

inst_154:
// rs1_val == 0xFE1FFFFF and rs2_val == 0x11 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x1e00001;  op2val:0x11
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x1e00001, 0x11, x2, 143*XLEN/8, x1)

inst_155:
// rs1_val == 0xD58FFFFF and rs2_val == 0x09 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x2a700001;  op2val:0x9
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x2a700001, 0x9, x2, 144*XLEN/8, x1)

inst_156:
// rs1_val == 0x15B7FFFF and rs2_val == 0x10 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x15b7ffff;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x15b7ffff, 0x10, x2, 145*XLEN/8, x1)

inst_157:
// rs1_val == 0xD38BFFFF and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x2c740001;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x2c740001, 0x1c, x2, 146*XLEN/8, x1)

inst_158:
// rs1_val == 0xBEA5FFFF and rs2_val == 0x1B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x415a0001;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x415a0001, 0x1b, x2, 147*XLEN/8, x1)

inst_159:
// rs1_val == 0xF306FFFF and rs2_val == 0x08 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xcf90001;  op2val:0x8
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xcf90001, 0x8, x2, 148*XLEN/8, x1)

inst_160:
// rs1_val == 0xCB347FFF and rs2_val == 0x10 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x34cb8001;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x34cb8001, 0x10, x2, 149*XLEN/8, x1)

inst_161:
// rs1_val == 0x5B11BFFF and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x5b11bfff;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x5b11bfff, 0xe, x2, 150*XLEN/8, x1)

inst_162:
// rs1_val == 0x7C9DDFFF and rs2_val == 0x1B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x7c9ddfff;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x7c9ddfff, 0x1b, x2, 151*XLEN/8, x1)

inst_163:
// rs1_val == 0xABB4CFFF and rs2_val == 0x17 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x544b3001;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x544b3001, 0x17, x2, 152*XLEN/8, x1)

inst_164:
// rs1_val == 0xE37D37FF and rs2_val == 0x1B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x1c82c801;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x1c82c801, 0x1b, x2, 153*XLEN/8, x1)

inst_165:
// rs1_val == 0xA37E33FF and rs2_val == 0x14 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x5c81cc01;  op2val:0x14
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x5c81cc01, 0x14, x2, 154*XLEN/8, x1)

inst_166:
// rs1_val == 0xA7BE99FF and rs2_val == 0x07 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x58416601;  op2val:0x7
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x58416601, 0x7, x2, 155*XLEN/8, x1)

inst_167:
// rs1_val == 0x589218FF and rs2_val == 0x10 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x589218ff;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x589218ff, 0x10, x2, 156*XLEN/8, x1)

inst_168:
// rs1_val == 0xB0E04E7F and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x4f1fb181;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x4f1fb181, 0x1c, x2, 157*XLEN/8, x1)

inst_169:
// rs1_val == 0x8DE1C73F and rs2_val == 0x08 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x721e38c1;  op2val:0x8
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x721e38c1, 0x8, x2, 158*XLEN/8, x1)

inst_170:
// rs1_val == 0x70BCB8DF and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x70bcb8df;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x70bcb8df, 0x1c, x2, 159*XLEN/8, x1)

inst_171:
// rs1_val == 0x8935B82F and rs2_val == 0x0B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x76ca47d1;  op2val:0xb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x76ca47d1, 0xb, x2, 160*XLEN/8, x1)

inst_172:
// rs1_val == 0x4B1634E7 and rs2_val == 0x0C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4b1634e7;  op2val:0xc
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4b1634e7, 0xc, x2, 161*XLEN/8, x1)

inst_173:
// rs1_val == 0x2DEDF123 and rs2_val == 0x16 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x2dedf123;  op2val:0x16
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x2dedf123, 0x16, x2, 162*XLEN/8, x1)

inst_174:
// rs1_val == 0x40D90A1D and rs2_val == 0x17 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x40d90a1d;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x40d90a1d, 0x17, x2, 163*XLEN/8, x1)

inst_175:
// rs1_val == 0x759F1B44 and rs2_val == 0x10 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x759f1b44;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x759f1b44, 0x10, x2, 164*XLEN/8, x1)

inst_176:
// rs2_val == 0x1F and rs1_val == 0x47B7097B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x47b7097b;  op2val:0x1f
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x47b7097b, 0x1f, x2, 165*XLEN/8, x1)

inst_177:
// rs2_val == 0x0F and rs1_val == 0x5DCF019D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x5dcf019d;  op2val:0xf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x5dcf019d, 0xf, x2, 166*XLEN/8, x1)

inst_178:
// rs2_val == 0x07 and rs1_val == 0x76B1FD3D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x76b1fd3d;  op2val:0x7
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x76b1fd3d, 0x7, x2, 167*XLEN/8, x1)

inst_179:
// rs2_val == 0x03 and rs1_val == 0xB808A677 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x47f75989;  op2val:0x3
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x47f75989, 0x3, x2, 168*XLEN/8, x1)

inst_180:
// rs2_val == 0x1D and rs1_val == 0xDE14BFF2 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x21eb400e;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x21eb400e, 0x1d, x2, 169*XLEN/8, x1)

inst_181:
// rs2_val == 0x08 and rs1_val == 0x24496FE3 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x24496fe3;  op2val:0x8
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x24496fe3, 0x8, x2, 170*XLEN/8, x1)

inst_182:
// rs1_val == 0x00000000 and rs2_val == 0x1D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x0;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x0, 0x1d, x2, 171*XLEN/8, x1)

inst_183:
// rs1_val == 0x00000001 and rs2_val == 0x0C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1;  op2val:0xc
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1, 0xc, x2, 172*XLEN/8, x1)

inst_184:
// rs1_val == 0x00000003 and rs2_val == 0x1E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x3;  op2val:0x1e
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x3, 0x1e, x2, 173*XLEN/8, x1)

inst_185:
// rs1_val == 0x00000006 and rs2_val == 0x0B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x6;  op2val:0xb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x6, 0xb, x2, 174*XLEN/8, x1)

inst_186:
// rs1_val == 0x0000000C and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xc;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xc, 0x1c, x2, 175*XLEN/8, x1)

inst_187:
// rs1_val == 0x00000012 and rs2_val == 0x09 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x12;  op2val:0x9
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x12, 0x9, x2, 176*XLEN/8, x1)

inst_188:
// rs1_val == 0x00000026 and rs2_val == 0x02 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x26;  op2val:0x2
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x26, 0x2, x2, 177*XLEN/8, x1)

inst_189:
// rs1_val == 0x0000004C and rs2_val == 0x19 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x4c;  op2val:0x19
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x4c, 0x19, x2, 178*XLEN/8, x1)

inst_190:
// rs1_val == 0x000000B9 and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xb9;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xb9, 0x1c, x2, 179*XLEN/8, x1)

inst_191:
// rs1_val == 0x00000197 and rs2_val == 0x0A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x197;  op2val:0xa
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x197, 0xa, x2, 180*XLEN/8, x1)

inst_192:
// rs1_val == 0x000002A7 and rs2_val == 0x00 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x2a7;  op2val:0x0
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x2a7, 0x0, x2, 181*XLEN/8, x1)

inst_193:
// rs1_val == 0x000005D1 and rs2_val == 0x04 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x5d1;  op2val:0x4
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x5d1, 0x4, x2, 182*XLEN/8, x1)

inst_194:
// rs1_val == 0x00000DD4 and rs2_val == 0x02 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xdd4;  op2val:0x2
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xdd4, 0x2, x2, 183*XLEN/8, x1)

inst_195:
// rs1_val == 0x00001D0C and rs2_val == 0x0F 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1d0c;  op2val:0xf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1d0c, 0xf, x2, 184*XLEN/8, x1)

inst_196:
// rs1_val == 0x00003226 and rs2_val == 0x01 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x3226;  op2val:0x1
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x3226, 0x1, x2, 185*XLEN/8, x1)

inst_197:
// rs1_val == 0x00005CC1 and rs2_val == 0x1D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x5cc1;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x5cc1, 0x1d, x2, 186*XLEN/8, x1)

inst_198:
// rs1_val == 0x0000F614 and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xf614;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xf614, 0x1c, x2, 187*XLEN/8, x1)

inst_199:
// rs1_val == 0x00011E24 and rs2_val == 0x0C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x11e24;  op2val:0xc
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x11e24, 0xc, x2, 188*XLEN/8, x1)

inst_200:
// rs1_val == 0x00035161 and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x35161;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x35161, 0xe, x2, 189*XLEN/8, x1)

inst_201:
// rs1_val == 0x0006284E and rs2_val == 0x12 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x6284e;  op2val:0x12
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x6284e, 0x12, x2, 190*XLEN/8, x1)

inst_202:
// rs1_val == 0x0009222A and rs2_val == 0x00 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x9222a;  op2val:0x0
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x9222a, 0x0, x2, 191*XLEN/8, x1)

inst_203:
// rs1_val == 0x00164AF0 and rs2_val == 0x05 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x164af0;  op2val:0x5
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x164af0, 0x5, x2, 192*XLEN/8, x1)

inst_204:
// rs1_val == 0x00339238 and rs2_val == 0x11 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x339238;  op2val:0x11
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x339238, 0x11, x2, 193*XLEN/8, x1)

inst_205:
// rs1_val == 0x0062A6B3 and rs2_val == 0x05 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x62a6b3;  op2val:0x5
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x62a6b3, 0x5, x2, 194*XLEN/8, x1)

inst_206:
// rs1_val == 0x00B302FD and rs2_val == 0x10 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xb302fd;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xb302fd, 0x10, x2, 195*XLEN/8, x1)

inst_207:
// rs1_val == 0x01B601FD and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x1b601fd;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x1b601fd, 0xe, x2, 196*XLEN/8, x1)

inst_208:
// rs1_val == 0x034C687B and rs2_val == 0x12 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x34c687b;  op2val:0x12
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x34c687b, 0x12, x2, 197*XLEN/8, x1)

inst_209:
// rs1_val == 0x079DD25B and rs2_val == 0x04 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x79dd25b;  op2val:0x4
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x79dd25b, 0x4, x2, 198*XLEN/8, x1)

inst_210:
// rs1_val == 0x082A1750 and rs2_val == 0x06 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x82a1750;  op2val:0x6
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x82a1750, 0x6, x2, 199*XLEN/8, x1)

inst_211:
// rs1_val == 0x16809A12 and rs2_val == 0x06 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x16809a12;  op2val:0x6
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x16809a12, 0x6, x2, 200*XLEN/8, x1)

inst_212:
// rs1_val == 0x38B9B45D and rs2_val == 0x12 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x38b9b45d;  op2val:0x12
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x38b9b45d, 0x12, x2, 201*XLEN/8, x1)

inst_213:
// rs1_val == 0x62F28D1B and rs2_val == 0x04 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x62f28d1b;  op2val:0x4
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x62f28d1b, 0x4, x2, 202*XLEN/8, x1)

inst_214:
// rs1_val == 0xF542441E and rs2_val == 0x01 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xabdbbe2;  op2val:0x1
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xabdbbe2, 0x1, x2, 203*XLEN/8, x1)

inst_215:
// rs2_val == 0x00 and rs1_val == 0xAF5570EE 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x50aa8f12;  op2val:0x0
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x50aa8f12, 0x0, x2, 204*XLEN/8, x1)

inst_216:
// rs2_val == 0x01 and rs1_val == 0xE90794DF 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x16f86b21;  op2val:0x1
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x16f86b21, 0x1, x2, 205*XLEN/8, x1)

inst_217:
// rs2_val == 0x02 and rs1_val == 0xB57A6A1D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x4a8595e3;  op2val:0x2
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x4a8595e3, 0x2, x2, 206*XLEN/8, x1)

inst_218:
// rs2_val == 0x06 and rs1_val == 0xA123F501 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x5edc0aff;  op2val:0x6
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x5edc0aff, 0x6, x2, 207*XLEN/8, x1)

inst_219:
// rs2_val == 0x09 and rs1_val == 0xACC6D8F2 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x5339270e;  op2val:0x9
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x5339270e, 0x9, x2, 208*XLEN/8, x1)

inst_220:
// rs2_val == 0x1B and rs1_val == 0x164F1513 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x164f1513;  op2val:0x1b
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x164f1513, 0x1b, x2, 209*XLEN/8, x1)

inst_221:
// rs1_val == 0xFFFFFFF9 and rs2_val == 0x1D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x7;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x7, 0x1d, x2, 210*XLEN/8, x1)

inst_222:
// rs1_val == 0xFFFFFFF2 and rs2_val == 0x1F 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xe;  op2val:0x1f
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xe, 0x1f, x2, 211*XLEN/8, x1)

inst_223:
// rs1_val == 0xFFFFFFE8 and rs2_val == 0x11 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x18;  op2val:0x11
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x18, 0x11, x2, 212*XLEN/8, x1)

inst_224:
// rs1_val == 0xFFFFFFC6 and rs2_val == 0x0A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x3a;  op2val:0xa
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x3a, 0xa, x2, 213*XLEN/8, x1)

inst_225:
// rs1_val == 0xFFFFFFBA and rs2_val == 0x1F 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x46;  op2val:0x1f
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x46, 0x1f, x2, 214*XLEN/8, x1)

inst_226:
// rs1_val == 0xFFFFFF44 and rs2_val == 0x04 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xbc;  op2val:0x4
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xbc, 0x4, x2, 215*XLEN/8, x1)

inst_227:
// rs1_val == 0xFFFFFE31 and rs2_val == 0x17 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x1cf;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x1cf, 0x17, x2, 216*XLEN/8, x1)

inst_228:
// rs1_val == 0xFFFFFC1D and rs2_val == 0x1A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x3e3;  op2val:0x1a
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x3e3, 0x1a, x2, 217*XLEN/8, x1)

inst_229:
// rs1_val == 0xFFFFFB84 and rs2_val == 0x08 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x47c;  op2val:0x8
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x47c, 0x8, x2, 218*XLEN/8, x1)

inst_230:
// rs1_val == 0xFFFFF32A and rs2_val == 0x16 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xcd6;  op2val:0x16
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xcd6, 0x16, x2, 219*XLEN/8, x1)

inst_231:
// rs1_val == 0xFFFFEE0A and rs2_val == 0x1A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x11f6;  op2val:0x1a
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x11f6, 0x1a, x2, 220*XLEN/8, x1)

inst_232:
// rs1_val == 0xFFFFD410 and rs2_val == 0x10 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x2bf0;  op2val:0x10
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x2bf0, 0x10, x2, 221*XLEN/8, x1)

inst_233:
// rs1_val == 0xFFFFA2EE and rs2_val == 0x0B 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x5d12;  op2val:0xb
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x5d12, 0xb, x2, 222*XLEN/8, x1)

inst_234:
// rs1_val == 0xFFFF1E5F and rs2_val == 0x13 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xe1a1;  op2val:0x13
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xe1a1, 0x13, x2, 223*XLEN/8, x1)

inst_235:
// rs1_val == 0xFFFEC2B4 and rs2_val == 0x17 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x13d4c;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x13d4c, 0x17, x2, 224*XLEN/8, x1)

inst_236:
// rs1_val == 0xFFFCDB0B and rs2_val == 0x1D 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x324f5;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x324f5, 0x1d, x2, 225*XLEN/8, x1)

inst_237:
// rs1_val == 0xFFF904D1 and rs2_val == 0x0F 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x6fb2f;  op2val:0xf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x6fb2f, 0xf, x2, 226*XLEN/8, x1)

inst_238:
// rs1_val == 0xFFF1D2A0 and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0xe2d60;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0xe2d60, 0x1c, x2, 227*XLEN/8, x1)

inst_239:
// rs1_val == 0xFFE2FC91 and rs2_val == 0x18 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x1d036f;  op2val:0x18
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x1d036f, 0x18, x2, 228*XLEN/8, x1)

inst_240:
// rs1_val == 0xFFD4AA23 and rs2_val == 0x00 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x2b55dd;  op2val:0x0
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x2b55dd, 0x0, x2, 229*XLEN/8, x1)

inst_241:
// rs1_val == 0xFF93D0E4 and rs2_val == 0x08 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x6c2f1c;  op2val:0x8
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x6c2f1c, 0x8, x2, 230*XLEN/8, x1)

inst_242:
// rs1_val == 0xFF6875BB and rs2_val == 0x13 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x978a45;  op2val:0x13
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x978a45, 0x13, x2, 231*XLEN/8, x1)

inst_243:
// rs1_val == 0xFE4DEAB5 and rs2_val == 0x17 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x1b2154b;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x1b2154b, 0x17, x2, 232*XLEN/8, x1)

inst_244:
// rs1_val == 0xFDA56D7F and rs2_val == 0x0F 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x25a9281;  op2val:0xf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x25a9281, 0xf, x2, 233*XLEN/8, x1)

inst_245:
// rs1_val == 0xF87A2561 and rs2_val == 0x1C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x785da9f;  op2val:0x1c
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x785da9f, 0x1c, x2, 234*XLEN/8, x1)

inst_246:
// rs1_val == 0xF79FB998 and rs2_val == 0x1E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x8604668;  op2val:0x1e
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x8604668, 0x1e, x2, 235*XLEN/8, x1)

inst_247:
// rs1_val == 0xE0A37559 and rs2_val == 0x14 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x1f5c8aa7;  op2val:0x14
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x1f5c8aa7, 0x14, x2, 236*XLEN/8, x1)

inst_248:
// rs1_val == 0xD814D576 and rs2_val == 0x0A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x27eb2a8a;  op2val:0xa
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x27eb2a8a, 0xa, x2, 237*XLEN/8, x1)

inst_249:
// rs1_val == 0x9798C9D0 and rs2_val == 0x0E 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x68673630;  op2val:0xe
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x68673630, 0xe, x2, 238*XLEN/8, x1)

inst_250:
// rs1_val == 0x7843BDB9 and rs2_val == 0x1A 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x7843bdb9;  op2val:0x1a
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x7843bdb9, 0x1a, x2, 239*XLEN/8, x1)

inst_251:
// rs2_val == 0x1F and rs1_val == 0x0973E89C 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x973e89c;  op2val:0x1f
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x973e89c, 0x1f, x2, 240*XLEN/8, x1)

inst_252:
// rs2_val == 0x1E and rs1_val == 0x14B91C79 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x14b91c79;  op2val:0x1e
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x14b91c79, 0x1e, x2, 241*XLEN/8, x1)

inst_253:
// rs2_val == 0x1D and rs1_val == 0x99EF1857 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x6610e7a9;  op2val:0x1d
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x6610e7a9, 0x1d, x2, 242*XLEN/8, x1)

inst_254:
// rs2_val == 0x18 and rs1_val == 0xC5EC6148 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x3a139eb8;  op2val:0x18
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x3a139eb8, 0x18, x2, 243*XLEN/8, x1)

inst_255:
// rs2_val == 0x17 and rs1_val == 0xCEB506F6 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:-0x314af90a;  op2val:0x17
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, -0x314af90a, 0x17, x2, 244*XLEN/8, x1)

inst_256:
// rs2_val == 0x0F and rs1_val == 0x59432A19 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x59432a19;  op2val:0xf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x59432a19, 0xf, x2, 245*XLEN/8, x1)

inst_257:
// rs1_val == 2863311530, rs2_val == 2
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xaaaaaaaa;  op2val:0x2
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xaaaaaaaa, 0x2, x2, 246*XLEN/8, x1)

inst_258:
// rs2_val == 1431655765, rs1_val == 4026531839
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xefffffff;  op2val:0x55555555
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xefffffff, 0x55555555, x2, 247*XLEN/8, x1)

inst_259:
// rs2_val == 2863311530, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xa;  op2val:0xaaaaaaaa
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xa, 0xaaaaaaaa, x2, 248*XLEN/8, x1)

inst_260:
// rs2_val == 4294967263, rs1_val == 2147483647
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0x7fffffff;  op2val:0xffffffdf
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0x7fffffff, 0xffffffdf, x2, 249*XLEN/8, x1)

inst_261:
// rs2_val == 4294967167, 
// opcode: bclr ; op1:x14; op2:x13; dest:x15; op1val:0xb;  op2val:0xffffff7f
TEST_RR_OP(bclr, x15, x14, x13, 0x00000000, 0xb, 0xffffff7f, x2, 250*XLEN/8, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x9_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x9_1:
    .fill 6*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 5*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 251*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
