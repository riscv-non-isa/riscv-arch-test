
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:32:06 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fsqrt.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fsqrt_b20 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fsqrt_b20)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x31, rd==x31,fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x31; dest:x31; op1val:0x7f7fffff; valaddr_reg:x3;
val_offset:0*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rd, rs1==x29, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x29; dest:x30; op1val:0x0; valaddr_reg:x3;
val_offset:1*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x30, x29, dyn, 0, 0, x3, 1*FLEN/8, x4, x1, x2)

inst_2:
// rs1==x30, rd==x29,fs1 == 0 and fe1 == 0x39 and fm1 == 0x480000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x29; op1val:0x1cc80000; valaddr_reg:x3;
val_offset:2*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x29, x30, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_3:
// rs1==x27, rd==x28,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x480000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x27; dest:x28; op1val:0x7cc80000; valaddr_reg:x3;
val_offset:3*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x28, x27, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_4:
// rs1==x28, rd==x27,fs1 == 0 and fe1 == 0xb7 and fm1 == 0x720000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x28; dest:x27; op1val:0x5bf20000; valaddr_reg:x3;
val_offset:4*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x27, x28, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x25, rd==x26,fs1 == 0 and fe1 == 0xc7 and fm1 == 0x720000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x25; dest:x26; op1val:0x63f20000; valaddr_reg:x3;
val_offset:5*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x26, x25, dyn, 0, 0, x3, 5*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x26, rd==x25,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x610000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x26; dest:x25; op1val:0x7a610000; valaddr_reg:x3;
val_offset:6*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x25, x26, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x23, rd==x24,fs1 == 0 and fe1 == 0x86 and fm1 == 0x704000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x23; dest:x24; op1val:0x43704000; valaddr_reg:x3;
val_offset:7*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x24, x23, dyn, 0, 0, x3, 7*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x24, rd==x23,fs1 == 0 and fe1 == 0x97 and fm1 == 0x5c8000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x24; dest:x23; op1val:0x4bdc8000; valaddr_reg:x3;
val_offset:8*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x23, x24, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x21, rd==x22,fs1 == 0 and fe1 == 0x82 and fm1 == 0x044000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x21; dest:x22; op1val:0x41044000; valaddr_reg:x3;
val_offset:9*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x22, x21, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x22, rd==x21,fs1 == 0 and fe1 == 0x3b and fm1 == 0x108000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x22; dest:x21; op1val:0x1d908000; valaddr_reg:x3;
val_offset:10*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x21, x22, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x19, rd==x20,fs1 == 0 and fe1 == 0x24 and fm1 == 0x689000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x19; dest:x20; op1val:0x12689000; valaddr_reg:x3;
val_offset:11*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x20, x19, dyn, 0, 0, x3, 11*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x20, rd==x19,fs1 == 0 and fe1 == 0x59 and fm1 == 0x7d2000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x20; dest:x19; op1val:0x2cfd2000; valaddr_reg:x3;
val_offset:12*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x19, x20, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rd==x18,fs1 == 0 and fe1 == 0x8e and fm1 == 0x689000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x17; dest:x18; op1val:0x47689000; valaddr_reg:x3;
val_offset:13*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x18, x17, dyn, 0, 0, x3, 13*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x18, rd==x17,fs1 == 0 and fe1 == 0x86 and fm1 == 0x130400 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x18; dest:x17; op1val:0x43130400; valaddr_reg:x3;
val_offset:14*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x17, x18, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rd==x16,fs1 == 0 and fe1 == 0x88 and fm1 == 0x7c0400 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x15; dest:x16; op1val:0x447c0400; valaddr_reg:x3;
val_offset:15*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x16, x15, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x16, rd==x15,fs1 == 0 and fe1 == 0x66 and fm1 == 0x64c400 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x16; dest:x15; op1val:0x3364c400; valaddr_reg:x3;
val_offset:16*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x15, x16, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rd==x14,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7ff200 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x13; dest:x14; op1val:0x7cfff200; valaddr_reg:x3;
val_offset:17*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x14, x13, dyn, 0, 0, x3, 17*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x14, rd==x13,fs1 == 0 and fe1 == 0x39 and fm1 == 0x69d200 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x14; dest:x13; op1val:0x1ce9d200; valaddr_reg:x3;
val_offset:18*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x13, x14, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x11, rd==x12,fs1 == 0 and fe1 == 0xef and fm1 == 0x7bb880 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x11; dest:x12; op1val:0x77fbb880; valaddr_reg:x3;
val_offset:19*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x12, x11, dyn, 0, 0, x3, 19*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x12, rd==x11,fs1 == 0 and fe1 == 0xd0 and fm1 == 0x095440 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x12; dest:x11; op1val:0x68095440; valaddr_reg:x3;
val_offset:20*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x11, x12, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x9, rd==x10,fs1 == 0 and fe1 == 0x7b and fm1 == 0x46c080 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x9; dest:x10; op1val:0x3dc6c080; valaddr_reg:x3;
val_offset:21*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x10, x9, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_22:
// rs1==x10, rd==x9,fs1 == 0 and fe1 == 0x80 and fm1 == 0x6d5a40 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x10; dest:x9; op1val:0x406d5a40; valaddr_reg:x3;
val_offset:22*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x9, x10, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_23:
// rs1==x7, rd==x8,fs1 == 0 and fe1 == 0xd3 and fm1 == 0x6a7f20 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x7; dest:x8; op1val:0x69ea7f20; valaddr_reg:x3;
val_offset:23*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x8, x7, dyn, 0, 0, x3, 23*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x9,test_dataset_1)

inst_24:
// rs1==x8, rd==x7,fs1 == 0 and fe1 == 0x34 and fm1 == 0x08f690 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x8; dest:x7; op1val:0x1a08f690; valaddr_reg:x9;
val_offset:0*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x7, x8, dyn, 0, 0, x9, 0*FLEN/8, x10, x1, x2)

inst_25:
// rs1==x5, rd==x6,fs1 == 0 and fe1 == 0x6a and fm1 == 0x3e2364 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x5; dest:x6; op1val:0x353e2364; valaddr_reg:x9;
val_offset:1*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x6, x5, dyn, 0, 0, x9, 1*FLEN/8, x10, x1, x2)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x6, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000160 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x6; dest:x5; op1val:0x160; valaddr_reg:x9;
val_offset:2*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x5, x6, dyn, 0, 0, x9, 2*FLEN/8, x10, x7, x8)

inst_27:
// rs1==x3, rd==x4,fs1 == 0 and fe1 == 0xbc and fm1 == 0x68cd04 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x3; dest:x4; op1val:0x5e68cd04; valaddr_reg:x9;
val_offset:3*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x4, x3, dyn, 0, 0, x9, 3*FLEN/8, x10, x7, x8)

inst_28:
// rs1==x4, rd==x3,fs1 == 0 and fe1 == 0x1b and fm1 == 0x5b5a62 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x4; dest:x3; op1val:0xddb5a62; valaddr_reg:x9;
val_offset:4*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x3, x4, dyn, 0, 0, x9, 4*FLEN/8, x10, x7, x8)

inst_29:
// rs1==x1, rd==x2,fs1 == 0 and fe1 == 0xea and fm1 == 0x4f33d9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x1; dest:x2; op1val:0x754f33d9; valaddr_reg:x9;
val_offset:5*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x2, x1, dyn, 0, 0, x9, 5*FLEN/8, x10, x7, x8)

inst_30:
// rs1==x2, rd==x1,fs1 == 0 and fe1 == 0xa0 and fm1 == 0x10d851 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x2; dest:x1; op1val:0x5010d851; valaddr_reg:x9;
val_offset:6*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x1, x2, dyn, 0, 0, x9, 6*FLEN/8, x10, x7, x8)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0xce and fm1 == 0x1168e1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x0; dest:x31; op1val:0x0; valaddr_reg:x9;
val_offset:7*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x0, dyn, 0, 0, x9, 7*FLEN/8, x10, x7, x8)

inst_32:
// rd==x0,fs1 == 0 and fe1 == 0x52 and fm1 == 0x216b44 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x31; dest:x0; op1val:0x29216b44; valaddr_reg:x9;
val_offset:8*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x0, x31, dyn, 0, 0, x9, 8*FLEN/8, x10, x7, x8)

inst_33:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x5; valaddr_reg:x9;
val_offset:9*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 9*FLEN/8, x10, x7, x8)

inst_34:
// fs1 == 0 and fe1 == 0x3c and fm1 == 0x124e58 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x1e124e58; valaddr_reg:x9;
val_offset:10*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 10*FLEN/8, x10, x7, x8)

inst_35:
// fs1 == 0 and fe1 == 0xc0 and fm1 == 0x3590aa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x603590aa; valaddr_reg:x9;
val_offset:11*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 11*FLEN/8, x10, x7, x8)

inst_36:
// fs1 == 0 and fe1 == 0xf3 and fm1 == 0x6653ed and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x79e653ed; valaddr_reg:x9;
val_offset:12*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 12*FLEN/8, x10, x7, x8)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f3827 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x7f7f3827; valaddr_reg:x9;
val_offset:13*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 13*FLEN/8, x10, x7, x8)

inst_38:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f78f8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x538f78f8; valaddr_reg:x9;
val_offset:14*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 14*FLEN/8, x10, x7, x8)

inst_39:
// fs1 == 0 and fe1 == 0x0b and fm1 == 0x0cd684 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x58cd684; valaddr_reg:x9;
val_offset:15*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 15*FLEN/8, x10, x7, x8)

inst_40:
// fs1 == 0 and fe1 == 0xdd and fm1 == 0x4096e8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x6ec096e8; valaddr_reg:x9;
val_offset:16*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 16*FLEN/8, x10, x7, x8)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x0cd173 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0xcd173; valaddr_reg:x9;
val_offset:17*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 17*FLEN/8, x10, x7, x8)

inst_42:
// fs1 == 0 and fe1 == 0x59 and fm1 == 0x0fed85 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x2c8fed85; valaddr_reg:x9;
val_offset:18*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 18*FLEN/8, x10, x7, x8)

inst_43:
// fs1 == 0 and fe1 == 0x39 and fm1 == 0x0ef3b1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x1c8ef3b1; valaddr_reg:x9;
val_offset:19*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 19*FLEN/8, x10, x7, x8)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x2bf296 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x2bf296; valaddr_reg:x9;
val_offset:20*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 20*FLEN/8, x10, x7, x8)

inst_45:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x0aadc1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x7a8aadc1; valaddr_reg:x9;
val_offset:21*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 21*FLEN/8, x10, x7, x8)

inst_46:
// fs1 == 0 and fe1 == 0x3f and fm1 == 0x0577a2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x1f8577a2; valaddr_reg:x9;
val_offset:22*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 22*FLEN/8, x10, x7, x8)

inst_47:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2b61ee and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x7cab61ee; valaddr_reg:x9;
val_offset:23*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 23*FLEN/8, x10, x7, x8)

inst_48:
// fs1 == 0 and fe1 == 0xe4 and fm1 == 0x1477dc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x721477dc; valaddr_reg:x9;
val_offset:24*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 24*FLEN/8, x10, x7, x8)

inst_49:
// fs1 == 0 and fe1 == 0xad and fm1 == 0x75bbd8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x56f5bbd8; valaddr_reg:x9;
val_offset:25*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 25*FLEN/8, x10, x7, x8)

inst_50:
// fs1 == 0 and fe1 == 0x31 and fm1 == 0x011313 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x18811313; valaddr_reg:x9;
val_offset:26*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 26*FLEN/8, x10, x7, x8)

inst_51:
// fs1 == 0 and fe1 == 0xc2 and fm1 == 0x26f9c3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x6126f9c3; valaddr_reg:x9;
val_offset:27*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 27*FLEN/8, x10, x7, x8)

inst_52:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x64e1f0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x3de4e1f0; valaddr_reg:x9;
val_offset:28*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 28*FLEN/8, x10, x7, x8)

inst_53:
// fs1 == 0 and fe1 == 0x65 and fm1 == 0x5b1e82 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x32db1e82; valaddr_reg:x9;
val_offset:29*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 29*FLEN/8, x10, x7, x8)

inst_54:
// fs1 == 0 and fe1 == 0xb6 and fm1 == 0x479816 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x5b479816; valaddr_reg:x9;
val_offset:30*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 30*FLEN/8, x10, x7, x8)

inst_55:
// fs1 == 0 and fe1 == 0x4e and fm1 == 0x454542 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x27454542; valaddr_reg:x9;
val_offset:31*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 31*FLEN/8, x10, x7, x8)

inst_56:
// fs1 == 0 and fe1 == 0xea and fm1 == 0x284ae6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x75284ae6; valaddr_reg:x9;
val_offset:32*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 32*FLEN/8, x10, x7, x8)

inst_57:
// fs1 == 0 and fe1 == 0xd3 and fm1 == 0x190acf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x69990acf; valaddr_reg:x9;
val_offset:33*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 33*FLEN/8, x10, x7, x8)

inst_58:
// fs1 == 0 and fe1 == 0x65 and fm1 == 0x064562 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x32864562; valaddr_reg:x9;
val_offset:34*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 34*FLEN/8, x10, x7, x8)

inst_59:
// fs1 == 0 and fe1 == 0xac and fm1 == 0x13884e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x5613884e; valaddr_reg:x9;
val_offset:35*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 35*FLEN/8, x10, x7, x8)

inst_60:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x785c55 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x3cf85c55; valaddr_reg:x9;
val_offset:36*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 36*FLEN/8, x10, x7, x8)

inst_61:
// fs1 == 0 and fe1 == 0x30 and fm1 == 0x75cb89 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x1875cb89; valaddr_reg:x9;
val_offset:37*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 37*FLEN/8, x10, x7, x8)

inst_62:
// fs1 == 0 and fe1 == 0xb7 and fm1 == 0x4bce51 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x5bcbce51; valaddr_reg:x9;
val_offset:38*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 38*FLEN/8, x10, x7, x8)

inst_63:
// fs1 == 0 and fe1 == 0xd0 and fm1 == 0x010151 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x68010151; valaddr_reg:x9;
val_offset:39*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 39*FLEN/8, x10, x7, x8)

inst_64:
// fs1 == 0 and fe1 == 0x9e and fm1 == 0x38d874 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x4f38d874; valaddr_reg:x9;
val_offset:40*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 40*FLEN/8, x10, x7, x8)

inst_65:
// fs1 == 0 and fe1 == 0xce and fm1 == 0x1168e1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x671168e1; valaddr_reg:x9;
val_offset:41*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 41*FLEN/8, x10, x7, x8)

inst_66:
// fs1 == 0 and fe1 == 0x52 and fm1 == 0x216b44 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000  
/* opcode: fsqrt.s ; op1:x30; dest:x31; op1val:0x29216b44; valaddr_reg:x9;
val_offset:42*FLEN/8; rmval:dyn; correctval:0; testreg:x8;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, x31, x30, dyn, 0, 0, x9, 42*FLEN/8, x10, x7, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(482869248,64,FLEN)
NAN_BOXED(2093481984,64,FLEN)
NAN_BOXED(1542586368,64,FLEN)
NAN_BOXED(1676804096,64,FLEN)
NAN_BOXED(2053177344,64,FLEN)
NAN_BOXED(1131429888,64,FLEN)
NAN_BOXED(1272741888,64,FLEN)
NAN_BOXED(1090797568,64,FLEN)
NAN_BOXED(496009216,64,FLEN)
NAN_BOXED(308842496,64,FLEN)
NAN_BOXED(754786304,64,FLEN)
NAN_BOXED(1198034944,64,FLEN)
NAN_BOXED(1125319680,64,FLEN)
NAN_BOXED(1148978176,64,FLEN)
NAN_BOXED(862241792,64,FLEN)
NAN_BOXED(2097148416,64,FLEN)
NAN_BOXED(485085696,64,FLEN)
NAN_BOXED(2012985472,64,FLEN)
NAN_BOXED(1745441856,64,FLEN)
NAN_BOXED(1036435584,64,FLEN)
NAN_BOXED(1080908352,64,FLEN)
NAN_BOXED(1776975648,64,FLEN)
test_dataset_1:
NAN_BOXED(436795024,32,FLEN)
NAN_BOXED(893264740,32,FLEN)
NAN_BOXED(352,32,FLEN)
NAN_BOXED(1583926532,32,FLEN)
NAN_BOXED(232479330,32,FLEN)
NAN_BOXED(1968124889,32,FLEN)
NAN_BOXED(1343281233,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(690056004,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(504516184,32,FLEN)
NAN_BOXED(1614123178,32,FLEN)
NAN_BOXED(2045137901,32,FLEN)
NAN_BOXED(2139043879,32,FLEN)
NAN_BOXED(1401911544,32,FLEN)
NAN_BOXED(93116036,32,FLEN)
NAN_BOXED(1858115304,32,FLEN)
NAN_BOXED(840051,32,FLEN)
NAN_BOXED(747629957,32,FLEN)
NAN_BOXED(479130545,32,FLEN)
NAN_BOXED(2880150,32,FLEN)
NAN_BOXED(2055908801,32,FLEN)
NAN_BOXED(528840610,32,FLEN)
NAN_BOXED(2091606510,32,FLEN)
NAN_BOXED(1913944028,32,FLEN)
NAN_BOXED(1458944984,32,FLEN)
NAN_BOXED(411112211,32,FLEN)
NAN_BOXED(1629944259,32,FLEN)
NAN_BOXED(1038410224,32,FLEN)
NAN_BOXED(853220994,32,FLEN)
NAN_BOXED(1531418646,32,FLEN)
NAN_BOXED(658851138,32,FLEN)
NAN_BOXED(1965574886,32,FLEN)
NAN_BOXED(1771637455,32,FLEN)
NAN_BOXED(847660386,32,FLEN)
NAN_BOXED(1444120654,32,FLEN)
NAN_BOXED(1022909525,32,FLEN)
NAN_BOXED(410373001,32,FLEN)
NAN_BOXED(1540083281,32,FLEN)
NAN_BOXED(1744896337,32,FLEN)
NAN_BOXED(1329125492,32,FLEN)
NAN_BOXED(1729194209,32,FLEN)
NAN_BOXED(690056004,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 26*((SIGALIGN)/4),4,0xdeadbeef


signature_x7_0:
    .fill 41*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
