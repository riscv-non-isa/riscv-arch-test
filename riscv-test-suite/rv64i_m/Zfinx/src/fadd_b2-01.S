
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:36:13 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fadd.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fadd_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fadd_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000031 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x31; op2:x31; dest:x31; op1val:0x32; op2val:0x32; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x31, x31, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x28, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000034 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x29; op2:x28; dest:x30; op1val:0x36; op2val:0x80000034; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x30, x29, x28, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x30; dest:x29; op1val:0x22; op2val:0x22; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x29, x30, x30, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2, rs1==x28, rs2==x29, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000037 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x28; op2:x29; dest:x28; op1val:0x3f; op2val:0x80000037; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x28, x28, x29, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000017 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x26; op2:x27; dest:x27; op1val:0x27; op2val:0x80000017; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x27, x26, x27, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x27; op2:x25; dest:x26; op1val:0x2e; op2val:0x8000000e; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x26, x27, x25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000024 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x24; op2:x26; dest:x25; op1val:0x1c; op2val:0x24; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x25, x24, x26, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00006e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x25; op2:x23; dest:x24; op1val:0x12; op2val:0x6e; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x24, x25, x23, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000ee and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x22; op2:x24; dest:x23; op1val:0x12; op2val:0xee; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x23, x22, x24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001f3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x23; op2:x21; dest:x22; op1val:0xd; op2val:0x1f3; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x22, x23, x21, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003df and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x20; op2:x22; dest:x21; op1val:0x21; op2val:0x3df; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x21, x20, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007a5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x21; op2:x19; dest:x20; op1val:0x5b; op2val:0x7a5; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x20, x21, x19, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fed and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x18; op2:x20; dest:x19; op1val:0x13; op2val:0xfed; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x19, x18, x20, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001ff3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x19; op2:x17; dest:x18; op1val:0xd; op2val:0x1ff3; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x18, x19, x17, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003ff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x16; op2:x18; dest:x17; op1val:0xa; op2val:0x3ff6; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x17, x16, x18, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fd5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x17; op2:x15; dest:x16; op1val:0x2b; op2val:0x7fd5; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x16, x17, x15, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffb8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x14; op2:x16; dest:x15; op1val:0x48; op2val:0xffb8; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x15, x14, x16, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffd2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x15; op2:x13; dest:x14; op1val:0x2e; op2val:0x1ffd2; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x14, x15, x13, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffd7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x12; op2:x14; dest:x13; op1val:0x29; op2val:0x3ffd7; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x13, x12, x14, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffae and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x13; op2:x11; dest:x12; op1val:0x52; op2val:0x7ffae; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x12, x13, x11, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffb9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x10; op2:x12; dest:x11; op1val:0x47; op2val:0xfffb9; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x11, x10, x12, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000039 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffc7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x11; op2:x9; dest:x10; op1val:0x39; op2val:0x1fffc7; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x10, x11, x9, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x11,test_dataset_1)

inst_22:
// rs1==x8, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffde and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x8; op2:x10; dest:x9; op1val:0x22; op2val:0x3fffde; 
   valaddr_reg:x11; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x9, x8, x10, dyn, 0, 0, x11, 0*FLEN/8, x12, x1, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000048 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x9; op2:x7; dest:x8; op1val:0x47; op2val:0x80000048; 
   valaddr_reg:x11; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x8, x9, x7, dyn, 0, 0, x11, 2*FLEN/8, x12, x1, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x6; op2:x8; dest:x7; op1val:0xc; op2val:0x8000000e; 
   valaddr_reg:x11; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x7, x6, x8, dyn, 0, 0, x11, 4*FLEN/8, x12, x1, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x7, rs2==x5, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000038 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x7; op2:x5; dest:x6; op1val:0x34; op2val:0x80000038; 
   valaddr_reg:x11; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x6, x7, x5, dyn, 0, 0, x11, 6*FLEN/8, x12, x8, x9)

inst_26:
// rs1==x4, rs2==x6, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00005e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x4; op2:x6; dest:x5; op1val:0x56; op2val:0x8000005e; 
   valaddr_reg:x11; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x5, x4, x6, dyn, 0, 0, x11, 8*FLEN/8, x12, x8, x9)

inst_27:
// rs1==x5, rs2==x3, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000011 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x5; op2:x3; dest:x4; op1val:0x1; op2val:0x80000011; 
   valaddr_reg:x11; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x4, x5, x3, dyn, 0, 0, x11, 10*FLEN/8, x12, x8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000060 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x2; op2:x4; dest:x3; op1val:0x40; op2val:0x80000060; 
   valaddr_reg:x11; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x3, x2, x4, dyn, 0, 0, x11, 12*FLEN/8, x12, x8, x9)

inst_29:
// rs1==x3, rs2==x1, rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000060 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x3; op2:x1; dest:x2; op1val:0x20; op2val:0x80000060; 
   valaddr_reg:x11; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x2, x3, x1, dyn, 0, 0, x11, 14*FLEN/8, x12, x8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000aa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0x800000aa; 
   valaddr_reg:x11; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x1, x0, x2, dyn, 0, 0, x11, 16*FLEN/8, x12, x8, x9)

inst_31:
// rs1==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000109 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x1; op2:x30; dest:x31; op1val:0x9; op2val:0x80000109; 
   valaddr_reg:x11; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x1, x30, dyn, 0, 0, x11, 18*FLEN/8, x12, x8, x9)

inst_32:
// rs2==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000249 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x0; dest:x31; op1val:0x49; op2val:0x0; 
   valaddr_reg:x11; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x0, dyn, 0, 0, x11, 20*FLEN/8, x12, x8, x9)

inst_33:
// rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00041f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x31; op2:x30; dest:x0; op1val:0x1f; op2val:0x8000041f; 
   valaddr_reg:x11; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x0, x31, x30, dyn, 0, 0, x11, 22*FLEN/8, x12, x8, x9)

inst_34:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000846 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x46; op2val:0x80000846; 
   valaddr_reg:x11; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 24*FLEN/8, x12, x8, x9)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00100c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xc; op2val:0x8000100c; 
   valaddr_reg:x11; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 26*FLEN/8, x12, x8, x9)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x002029 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x29; op2val:0x80002029; 
   valaddr_reg:x11; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 28*FLEN/8, x12, x8, x9)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00403f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f; op2val:0x8000403f; 
   valaddr_reg:x11; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 30*FLEN/8, x12, x8, x9)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x008027 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x27; op2val:0x80008027; 
   valaddr_reg:x11; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 32*FLEN/8, x12, x8, x9)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x010026 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x26; op2val:0x80010026; 
   valaddr_reg:x11; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 34*FLEN/8, x12, x8, x9)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x020010 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x10; op2val:0x80020010; 
   valaddr_reg:x11; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 36*FLEN/8, x12, x8, x9)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x04002b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2b; op2val:0x8004002b; 
   valaddr_reg:x11; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 38*FLEN/8, x12, x8, x9)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x08001b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1b; op2val:0x8008001b; 
   valaddr_reg:x11; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 40*FLEN/8, x12, x8, x9)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x100047 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x47; op2val:0x80100047; 
   valaddr_reg:x11; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 42*FLEN/8, x12, x8, x9)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x200025 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x25; op2val:0x80200025; 
   valaddr_reg:x11; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 44*FLEN/8, x12, x8, x9)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x40000c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xc; op2val:0x8040000c; 
   valaddr_reg:x11; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 46*FLEN/8, x12, x8, x9)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x440000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800032; op2val:0xb6c40000; 
   valaddr_reg:x11; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 48*FLEN/8, x12, x8, x9)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x6e and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004a; op2val:0xb7100000; 
   valaddr_reg:x11; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 50*FLEN/8, x12, x8, x9)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800026; op2val:0xb6880000; 
   valaddr_reg:x11; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 52*FLEN/8, x12, x8, x9)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800019; op2val:0xb6080000; 
   valaddr_reg:x11; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 54*FLEN/8, x12, x8, x9)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x6b and fm2 == 0x300000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800005; op2val:0x35b00000; 
   valaddr_reg:x11; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 56*FLEN/8, x12, x8, x9)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x540000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800055; op2val:0xb6d40000; 
   valaddr_reg:x11; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 58*FLEN/8, x12, x8, x9)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x69 and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80003d; op2val:0x34c00000; 
   valaddr_reg:x11; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 60*FLEN/8, x12, x8, x9)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x6e and fm2 == 0x680000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000c; op2val:0x37680000; 
   valaddr_reg:x11; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 62*FLEN/8, x12, x8, x9)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x1f0000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800061; op2val:0x379f0000; 
   valaddr_reg:x11; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 64*FLEN/8, x12, x8, x9)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000014 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x760000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800014; op2val:0x38760000; 
   valaddr_reg:x11; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 66*FLEN/8, x12, x8, x9)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x71 and fm2 == 0x7d4000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000b; op2val:0x38fd4000; 
   valaddr_reg:x11; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 68*FLEN/8, x12, x8, x9)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x774000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800046; op2val:0x39774000; 
   valaddr_reg:x11; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 70*FLEN/8, x12, x8, x9)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7cd000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800033; op2val:0x39fcd000; 
   valaddr_reg:x11; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 72*FLEN/8, x12, x8, x9)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7de000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800044; op2val:0x3a7de000; 
   valaddr_reg:x11; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 74*FLEN/8, x12, x8, x9)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7ef400 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800043; op2val:0x3afef400; 
   valaddr_reg:x11; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 76*FLEN/8, x12, x8, x9)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7fc800 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80001c; op2val:0x3b7fc800; 
   valaddr_reg:x11; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 78*FLEN/8, x12, x8, x9)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fb400 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004c; op2val:0x3bffb400; 
   valaddr_reg:x11; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 80*FLEN/8, x12, x8, x9)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fda80 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004b; op2val:0x3c7fda80; 
   valaddr_reg:x11; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 82*FLEN/8, x12, x8, x9)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7ff180 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80003a; op2val:0x3cfff180; 
   valaddr_reg:x11; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 84*FLEN/8, x12, x8, x9)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ff560 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800055; op2val:0x3d7ff560; 
   valaddr_reg:x11; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 86*FLEN/8, x12, x8, x9)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffa60 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80005a; op2val:0x3dfffa60; 
   valaddr_reg:x11; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 88*FLEN/8, x12, x8, x9)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fffa8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000b; op2val:0x3e7fffa8; 
   valaddr_reg:x11; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 90*FLEN/8, x12, x8, x9)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffec4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004f; op2val:0x3efffec4; 
   valaddr_reg:x11; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 92*FLEN/8, x12, x8, x9)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80003f; op2val:0xc0000020; 
   valaddr_reg:x11; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 94*FLEN/8, x12, x8, x9)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000051 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800051; op2val:0xc000002a; 
   valaddr_reg:x11; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 96*FLEN/8, x12, x8, x9)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800019; op2val:0xc000000e; 
   valaddr_reg:x11; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 98*FLEN/8, x12, x8, x9)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000006 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800003; op2val:0xc0000006; 
   valaddr_reg:x11; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 100*FLEN/8, x12, x8, x9)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00001a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800023; op2val:0xc000001a; 
   valaddr_reg:x11; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 102*FLEN/8, x12, x8, x9)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00003e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80005b; op2val:0xc000003e; 
   valaddr_reg:x11; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 104*FLEN/8, x12, x8, x9)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000038 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800030; op2val:0xc0000038; 
   valaddr_reg:x11; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 106*FLEN/8, x12, x8, x9)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000056 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80002b; op2val:0xc0000056; 
   valaddr_reg:x11; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 108*FLEN/8, x12, x8, x9)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000008 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000084 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800008; op2val:0xc0000084; 
   valaddr_reg:x11; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 110*FLEN/8, x12, x8, x9)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00010a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800013; op2val:0xc000010a; 
   valaddr_reg:x11; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 112*FLEN/8, x12, x8, x9)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00020e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80001d; op2val:0xc000020e; 
   valaddr_reg:x11; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 114*FLEN/8, x12, x8, x9)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000425 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004a; op2val:0xc0000425; 
   valaddr_reg:x11; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 116*FLEN/8, x12, x8, x9)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000045 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000822 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800045; op2val:0xc0000822; 
   valaddr_reg:x11; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 118*FLEN/8, x12, x8, x9)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00102c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800058; op2val:0xc000102c; 
   valaddr_reg:x11; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 120*FLEN/8, x12, x8, x9)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x002002 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800004; op2val:0xc0002002; 
   valaddr_reg:x11; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 122*FLEN/8, x12, x8, x9)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x004029 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800052; op2val:0xc0004029; 
   valaddr_reg:x11; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 124*FLEN/8, x12, x8, x9)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x008027 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004e; op2val:0xc0008027; 
   valaddr_reg:x11; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 126*FLEN/8, x12, x8, x9)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x010008 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800010; op2val:0xc0010008; 
   valaddr_reg:x11; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 128*FLEN/8, x12, x8, x9)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x020006 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000c; op2val:0xc0020006; 
   valaddr_reg:x11; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 130*FLEN/8, x12, x8, x9)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x040008 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000f; op2val:0xc0040008; 
   valaddr_reg:x11; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 132*FLEN/8, x12, x8, x9)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x080027 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004e; op2val:0xc0080027; 
   valaddr_reg:x11; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 134*FLEN/8, x12, x8, x9)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x10000c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800019; op2val:0xc010000c; 
   valaddr_reg:x11; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 136*FLEN/8, x12, x8, x9)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x20002e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80005c; op2val:0xc020002e; 
   valaddr_reg:x11; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 138*FLEN/8, x12, x8, x9)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e; op2val:0x8000003d; 
   valaddr_reg:x11; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 140*FLEN/8, x12, x8, x9)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00005b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5e; op2val:0x8000005b; 
   valaddr_reg:x11; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 142*FLEN/8, x12, x8, x9)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000052 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x57; op2val:0x80000052; 
   valaddr_reg:x11; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 144*FLEN/8, x12, x8, x9)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x46; op2val:0x8000003d; 
   valaddr_reg:x11; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 146*FLEN/8, x12, x8, x9)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x50; op2val:0x8000003f; 
   valaddr_reg:x11; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 148*FLEN/8, x12, x8, x9)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x22; op2val:0x80000001; 
   valaddr_reg:x11; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 150*FLEN/8, x12, x8, x9)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000024 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1d; op2val:0x24; 
   valaddr_reg:x11; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 152*FLEN/8, x12, x8, x9)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53; op2val:0x2e; 
   valaddr_reg:x11; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 154*FLEN/8, x12, x8, x9)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000d4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2d; op2val:0xd4; 
   valaddr_reg:x11; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 156*FLEN/8, x12, x8, x9)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001e9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x18; op2val:0x1e9; 
   valaddr_reg:x11; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 158*FLEN/8, x12, x8, x9)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003c0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x41; op2val:0x3c0; 
   valaddr_reg:x11; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 160*FLEN/8, x12, x8, x9)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007fb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x6; op2val:0x7fb; 
   valaddr_reg:x11; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 162*FLEN/8, x12, x8, x9)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000ff4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xd; op2val:0xff4; 
   valaddr_reg:x11; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 164*FLEN/8, x12, x8, x9)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fce and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x33; op2val:0x1fce; 
   valaddr_reg:x11; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 166*FLEN/8, x12, x8, x9)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fdf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x22; op2val:0x3fdf; 
   valaddr_reg:x11; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 168*FLEN/8, x12, x8, x9)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fa3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5e; op2val:0x7fa3; 
   valaddr_reg:x11; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 170*FLEN/8, x12, x8, x9)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffb8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x49; op2val:0xffb8; 
   valaddr_reg:x11; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 172*FLEN/8, x12, x8, x9)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffa7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5a; op2val:0x1ffa7; 
   valaddr_reg:x11; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 174*FLEN/8, x12, x8, x9)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffe6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1b; op2val:0x3ffe6; 
   valaddr_reg:x11; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 176*FLEN/8, x12, x8, x9)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07fff9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x8; op2val:0x7fff9; 
   valaddr_reg:x11; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 178*FLEN/8, x12, x8, x9)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x15; op2val:0xfffec; 
   valaddr_reg:x11; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 180*FLEN/8, x12, x8, x9)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1fffd5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2c; op2val:0x1fffd5; 
   valaddr_reg:x11; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 182*FLEN/8, x12, x8, x9)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffe0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x21; op2val:0x3fffe0; 
   valaddr_reg:x11; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 184*FLEN/8, x12, x8, x9)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00004e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x4d; op2val:0x8000004e; 
   valaddr_reg:x11; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 186*FLEN/8, x12, x8, x9)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000059 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x56; op2val:0x80000059; 
   valaddr_reg:x11; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 188*FLEN/8, x12, x8, x9)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x80000007; 
   valaddr_reg:x11; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 190*FLEN/8, x12, x8, x9)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000061 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x58; op2val:0x80000061; 
   valaddr_reg:x11; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 192*FLEN/8, x12, x8, x9)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00005a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x49; op2val:0x8000005a; 
   valaddr_reg:x11; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 194*FLEN/8, x12, x8, x9)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000049 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x28; op2val:0x80000049; 
   valaddr_reg:x11; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 196*FLEN/8, x12, x8, x9)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00006f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2e; op2val:0x8000006f; 
   valaddr_reg:x11; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 198*FLEN/8, x12, x8, x9)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000d6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x55; op2val:0x800000d6; 
   valaddr_reg:x11; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 200*FLEN/8, x12, x8, x9)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000115 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x14; op2val:0x80000115; 
   valaddr_reg:x11; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 202*FLEN/8, x12, x8, x9)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00025a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x59; op2val:0x8000025a; 
   valaddr_reg:x11; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 204*FLEN/8, x12, x8, x9)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00043c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3b; op2val:0x8000043c; 
   valaddr_reg:x11; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 206*FLEN/8, x12, x8, x9)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00080c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xb; op2val:0x8000080c; 
   valaddr_reg:x11; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 208*FLEN/8, x12, x8, x9)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001060 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5f; op2val:0x80001060; 
   valaddr_reg:x11; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 210*FLEN/8, x12, x8, x9)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x002047 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x46; op2val:0x80002047; 
   valaddr_reg:x11; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 212*FLEN/8, x12, x8, x9)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x004013 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x12; op2val:0x80004013; 
   valaddr_reg:x11; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 214*FLEN/8, x12, x8, x9)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x008063 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x62; op2val:0x80008063; 
   valaddr_reg:x11; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 216*FLEN/8, x12, x8, x9)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01002f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2e; op2val:0x8001002f; 
   valaddr_reg:x11; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 218*FLEN/8, x12, x8, x9)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x020026 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x25; op2val:0x80020026; 
   valaddr_reg:x11; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 220*FLEN/8, x12, x8, x9)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x04002f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2e; op2val:0x8004002f; 
   valaddr_reg:x11; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 222*FLEN/8, x12, x8, x9)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x080053 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52; op2val:0x80080053; 
   valaddr_reg:x11; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 224*FLEN/8, x12, x8, x9)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x100012 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x11; op2val:0x80100012; 
   valaddr_reg:x11; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 226*FLEN/8, x12, x8, x9)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x200029 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x28; op2val:0x80200029; 
   valaddr_reg:x11; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 228*FLEN/8, x12, x8, x9)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400061 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x60; op2val:0x80400061; 
   valaddr_reg:x11; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 230*FLEN/8, x12, x8, x9)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffaa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54; op2val:0x7fffaa; 
   valaddr_reg:x11; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 232*FLEN/8, x12, x8, x9)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x7ffffc; 
   valaddr_reg:x11; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 234*FLEN/8, x12, x8, x9)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffe2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x19; op2val:0x7fffe2; 
   valaddr_reg:x11; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 236*FLEN/8, x12, x8, x9)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffcc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2b; op2val:0x7fffcc; 
   valaddr_reg:x11; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 238*FLEN/8, x12, x8, x9)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffd0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1f; op2val:0x7fffd0; 
   valaddr_reg:x11; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 240*FLEN/8, x12, x8, x9)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff8d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52; op2val:0x7fff8d; 
   valaddr_reg:x11; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 242*FLEN/8, x12, x8, x9)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff8e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x31; op2val:0x7fff8e; 
   valaddr_reg:x11; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 244*FLEN/8, x12, x8, x9)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff28 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x57; op2val:0x7fff28; 
   valaddr_reg:x11; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 246*FLEN/8, x12, x8, x9)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffec9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x36; op2val:0x7ffec9; 
   valaddr_reg:x11; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 248*FLEN/8, x12, x8, x9)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffdcb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x34; op2val:0x7ffdcb; 
   valaddr_reg:x11; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 250*FLEN/8, x12, x8, x9)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffbb6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x49; op2val:0x7ffbb6; 
   valaddr_reg:x11; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 252*FLEN/8, x12, x8, x9)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff79c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x63; op2val:0x7ff79c; 
   valaddr_reg:x11; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 254*FLEN/8, x12, x8, x9)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fefa4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5b; op2val:0x7fefa4; 
   valaddr_reg:x11; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 256*FLEN/8, x12, x8, x9)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fdfe9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x16; op2val:0x7fdfe9; 
   valaddr_reg:x11; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 258*FLEN/8, x12, x8, x9)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fbff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x9; op2val:0x7fbff6; 
   valaddr_reg:x11; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 260*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f7fa5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5a; op2val:0x7f7fa5; 
   valaddr_reg:x11; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 262*FLEN/8, x12, x8, x9)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7effc5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3a; op2val:0x7effc5; 
   valaddr_reg:x11; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 264*FLEN/8, x12, x8, x9)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7dffc0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f; op2val:0x7dffc0; 
   valaddr_reg:x11; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 266*FLEN/8, x12, x8, x9)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7bffb1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x4e; op2val:0x7bffb1; 
   valaddr_reg:x11; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 268*FLEN/8, x12, x8, x9)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x77fffe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x77fffe; 
   valaddr_reg:x11; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 270*FLEN/8, x12, x8, x9)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x6fffbf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x40; op2val:0x6fffbf; 
   valaddr_reg:x11; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 272*FLEN/8, x12, x8, x9)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5fffd7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x28; op2val:0x5fffd7; 
   valaddr_reg:x11; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 274*FLEN/8, x12, x8, x9)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ffff8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7; op2val:0x3ffff8; 
   valaddr_reg:x11; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 276*FLEN/8, x12, x8, x9)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000017 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x19; op2val:0x80800017; 
   valaddr_reg:x11; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 278*FLEN/8, x12, x8, x9)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x00004f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52; op2val:0x8080004f; 
   valaddr_reg:x11; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 280*FLEN/8, x12, x8, x9)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000058 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5d; op2val:0x80800058; 
   valaddr_reg:x11; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 282*FLEN/8, x12, x8, x9)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x807ffff9; 
   valaddr_reg:x11; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 284*FLEN/8, x12, x8, x9)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000046 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x57; op2val:0x80800046; 
   valaddr_reg:x11; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 286*FLEN/8, x12, x8, x9)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x29; op2val:0x80800008; 
   valaddr_reg:x11; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 288*FLEN/8, x12, x8, x9)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffdb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1c; op2val:0x807fffdb; 
   valaddr_reg:x11; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 290*FLEN/8, x12, x8, x9)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffdb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5c; op2val:0x807fffdb; 
   valaddr_reg:x11; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 292*FLEN/8, x12, x8, x9)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x807fff00; 
   valaddr_reg:x11; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 294*FLEN/8, x12, x8, x9)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffe43 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x44; op2val:0x807ffe43; 
   valaddr_reg:x11; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 296*FLEN/8, x12, x8, x9)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffc0c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xd; op2val:0x807ffc0c; 
   valaddr_reg:x11; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 298*FLEN/8, x12, x8, x9)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff80f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x10; op2val:0x807ff80f; 
   valaddr_reg:x11; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 300*FLEN/8, x12, x8, x9)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff053 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54; op2val:0x807ff053; 
   valaddr_reg:x11; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 302*FLEN/8, x12, x8, x9)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fe026 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x27; op2val:0x807fe026; 
   valaddr_reg:x11; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 304*FLEN/8, x12, x8, x9)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fc058 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x59; op2val:0x807fc058; 
   valaddr_reg:x11; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 306*FLEN/8, x12, x8, x9)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f800c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xd; op2val:0x807f800c; 
   valaddr_reg:x11; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 308*FLEN/8, x12, x8, x9)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f0032 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x33; op2val:0x807f0032; 
   valaddr_reg:x11; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 310*FLEN/8, x12, x8, x9)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7e000a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xb; op2val:0x807e000a; 
   valaddr_reg:x11; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 312*FLEN/8, x12, x8, x9)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7c0023 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x24; op2val:0x807c0023; 
   valaddr_reg:x11; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 314*FLEN/8, x12, x8, x9)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x78000e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xf; op2val:0x8078000e; 
   valaddr_reg:x11; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 316*FLEN/8, x12, x8, x9)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x700011 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x12; op2val:0x80700011; 
   valaddr_reg:x11; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 318*FLEN/8, x12, x8, x9)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x600042 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x43; op2val:0x80600042; 
   valaddr_reg:x11; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 320*FLEN/8, x12, x8, x9)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400052 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53; op2val:0x80400052; 
   valaddr_reg:x11; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 322*FLEN/8, x12, x8, x9)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000f; op2val:0x8000000e; 
   valaddr_reg:x11; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 324*FLEN/8, x12, x8, x9)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000022 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800024; op2val:0x80000022; 
   valaddr_reg:x11; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 326*FLEN/8, x12, x8, x9)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800006; op2val:0x80000002; 
   valaddr_reg:x11; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 328*FLEN/8, x12, x8, x9)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000013 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80001b; op2val:0x80000013; 
   valaddr_reg:x11; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 330*FLEN/8, x12, x8, x9)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000012 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800022; op2val:0x80000012; 
   valaddr_reg:x11; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 332*FLEN/8, x12, x8, x9)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000009 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800029; op2val:0x80000009; 
   valaddr_reg:x11; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 334*FLEN/8, x12, x8, x9)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000009 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800049; op2val:0x80000009; 
   valaddr_reg:x11; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 336*FLEN/8, x12, x8, x9)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800060; op2val:0x20; 
   valaddr_reg:x11; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 338*FLEN/8, x12, x8, x9)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0000b2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80004e; op2val:0xb2; 
   valaddr_reg:x11; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 340*FLEN/8, x12, x8, x9)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0001c0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800040; op2val:0x1c0; 
   valaddr_reg:x11; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 342*FLEN/8, x12, x8, x9)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0003ad and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800053; op2val:0x3ad; 
   valaddr_reg:x11; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 344*FLEN/8, x12, x8, x9)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000052 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007ae and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800052; op2val:0x7ae; 
   valaddr_reg:x11; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 346*FLEN/8, x12, x8, x9)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000030 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000fd0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800030; op2val:0xfd0; 
   valaddr_reg:x11; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 348*FLEN/8, x12, x8, x9)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001fe9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800017; op2val:0x1fe9; 
   valaddr_reg:x11; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 350*FLEN/8, x12, x8, x9)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x003fcf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800031; op2val:0x3fcf; 
   valaddr_reg:x11; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 352*FLEN/8, x12, x8, x9)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x007fda and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800026; op2val:0x7fda; 
   valaddr_reg:x11; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 354*FLEN/8, x12, x8, x9)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00ffee and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800012; op2val:0xffee; 
   valaddr_reg:x11; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 356*FLEN/8, x12, x8, x9)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01ffdd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800023; op2val:0x1ffdd; 
   valaddr_reg:x11; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 358*FLEN/8, x12, x8, x9)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x03ffd4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80002c; op2val:0x3ffd4; 
   valaddr_reg:x11; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 360*FLEN/8, x12, x8, x9)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x07ffa4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005c; op2val:0x7ffa4; 
   valaddr_reg:x11; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 362*FLEN/8, x12, x8, x9)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0fffd4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80002c; op2val:0xfffd4; 
   valaddr_reg:x11; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 364*FLEN/8, x12, x8, x9)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x1ffffb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800005; op2val:0x1ffffb; 
   valaddr_reg:x11; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 366*FLEN/8, x12, x8, x9)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3fffdd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800023; op2val:0x3fffdd; 
   valaddr_reg:x11; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 368*FLEN/8, x12, x8, x9)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800014; op2val:0x8100000a; 
   valaddr_reg:x11; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 370*FLEN/8, x12, x8, x9)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000014 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800026; op2val:0x81000014; 
   valaddr_reg:x11; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 372*FLEN/8, x12, x8, x9)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00001c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800033; op2val:0x8100001c; 
   valaddr_reg:x11; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 374*FLEN/8, x12, x8, x9)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000011 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00000c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800011; op2val:0x8100000c; 
   valaddr_reg:x11; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 376*FLEN/8, x12, x8, x9)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000f; op2val:0x81000010; 
   valaddr_reg:x11; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 378*FLEN/8, x12, x8, x9)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00003f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005e; op2val:0x8100003f; 
   valaddr_reg:x11; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 380*FLEN/8, x12, x8, x9)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000024 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800007; op2val:0x81000024; 
   valaddr_reg:x11; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 382*FLEN/8, x12, x8, x9)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00004c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800017; op2val:0x8100004c; 
   valaddr_reg:x11; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 384*FLEN/8, x12, x8, x9)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0000af and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005e; op2val:0x810000af; 
   valaddr_reg:x11; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 386*FLEN/8, x12, x8, x9)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000027 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000114 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800027; op2val:0x81000114; 
   valaddr_reg:x11; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 388*FLEN/8, x12, x8, x9)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000216 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80002b; op2val:0x81000216; 
   valaddr_reg:x11; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 390*FLEN/8, x12, x8, x9)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00041b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800036; op2val:0x8100041b; 
   valaddr_reg:x11; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 392*FLEN/8, x12, x8, x9)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x02 and fm2 == 0x000806 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000d; op2val:0x81000806; 
   valaddr_reg:x11; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 394*FLEN/8, x12, x8, x9)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x00101f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80003e; op2val:0x8100101f; 
   valaddr_reg:x11; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 396*FLEN/8, x12, x8, x9)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x02 and fm2 == 0x002016 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80002c; op2val:0x81002016; 
   valaddr_reg:x11; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 398*FLEN/8, x12, x8, x9)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x004008 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800010; op2val:0x81004008; 
   valaddr_reg:x11; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 400*FLEN/8, x12, x8, x9)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x02 and fm2 == 0x008008 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000f; op2val:0x81008008; 
   valaddr_reg:x11; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 402*FLEN/8, x12, x8, x9)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x010020 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800040; op2val:0x81010020; 
   valaddr_reg:x11; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 404*FLEN/8, x12, x8, x9)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x020002 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800005; op2val:0x81020002; 
   valaddr_reg:x11; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 406*FLEN/8, x12, x8, x9)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x040016 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x80002b; op2val:0x81040016; 
   valaddr_reg:x11; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 408*FLEN/8, x12, x8, x9)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08002c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800058; op2val:0x8108002c; 
   valaddr_reg:x11; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 410*FLEN/8, x12, x8, x9)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10000b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800016; op2val:0x8110000b; 
   valaddr_reg:x11; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 412*FLEN/8, x12, x8, x9)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x200024 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x800049; op2val:0x81200024; 
   valaddr_reg:x11; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 414*FLEN/8, x12, x8, x9)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000052 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fff58 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000052; op2val:0x7effff58; 
   valaddr_reg:x11; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 416*FLEN/8, x12, x8, x9)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffe8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000009; op2val:0x7effffe8; 
   valaddr_reg:x11; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 418*FLEN/8, x12, x8, x9)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffc2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001a; op2val:0x7effffc2; 
   valaddr_reg:x11; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 420*FLEN/8, x12, x8, x9)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffb4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001d; op2val:0x7effffb4; 
   valaddr_reg:x11; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 422*FLEN/8, x12, x8, x9)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000032 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fff7a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000032; op2val:0x7effff7a; 
   valaddr_reg:x11; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 424*FLEN/8, x12, x8, x9)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fffa4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00000d; op2val:0x7effffa4; 
   valaddr_reg:x11; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 426*FLEN/8, x12, x8, x9)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000048 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffeee and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000048; op2val:0x7efffeee; 
   valaddr_reg:x11; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 428*FLEN/8, x12, x8, x9)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000026 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffeb2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000026; op2val:0x7efffeb2; 
   valaddr_reg:x11; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 430*FLEN/8, x12, x8, x9)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffd80 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003f; op2val:0x7efffd80; 
   valaddr_reg:x11; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 432*FLEN/8, x12, x8, x9)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ffb46 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005c; op2val:0x7efffb46; 
   valaddr_reg:x11; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 434*FLEN/8, x12, x8, x9)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7ff7c6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001c; op2val:0x7efff7c6; 
   valaddr_reg:x11; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 436*FLEN/8, x12, x8, x9)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fefe8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00000b; op2val:0x7effefe8; 
   valaddr_reg:x11; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 438*FLEN/8, x12, x8, x9)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fdfc4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001d; op2val:0x7effdfc4; 
   valaddr_reg:x11; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 440*FLEN/8, x12, x8, x9)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7fbf68 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004b; op2val:0x7effbf68; 
   valaddr_reg:x11; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 442*FLEN/8, x12, x8, x9)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000038 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7f7f8e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000038; op2val:0x7eff7f8e; 
   valaddr_reg:x11; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 444*FLEN/8, x12, x8, x9)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7effa2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00002e; op2val:0x7efeffa2; 
   valaddr_reg:x11; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 446*FLEN/8, x12, x8, x9)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7dffec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000009; op2val:0x7efdffec; 
   valaddr_reg:x11; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 448*FLEN/8, x12, x8, x9)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000004 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7bfff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000004; op2val:0x7efbfff6; 
   valaddr_reg:x11; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 450*FLEN/8, x12, x8, x9)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x77ff8a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003a; op2val:0x7ef7ff8a; 
   valaddr_reg:x11; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 452*FLEN/8, x12, x8, x9)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6fff50 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000057; op2val:0x7eefff50; 
   valaddr_reg:x11; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 454*FLEN/8, x12, x8, x9)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000010 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5fffde and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000010; op2val:0x7edfffde; 
   valaddr_reg:x11; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 456*FLEN/8, x12, x8, x9)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000033 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3fff98 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000033; op2val:0x7ebfff98; 
   valaddr_reg:x11; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 458*FLEN/8, x12, x8, x9)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7fff90 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001b; op2val:0x7e7fff90; 
   valaddr_reg:x11; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 460*FLEN/8, x12, x8, x9)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000006 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000006; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 462*FLEN/8, x12, x8, x9)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000050; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 464*FLEN/8, x12, x8, x9)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000e and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00000e; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 466*FLEN/8, x12, x8, x9)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003b and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003b; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 468*FLEN/8, x12, x8, x9)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002f and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00002f; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 470*FLEN/8, x12, x8, x9)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000014 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000014; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 472*FLEN/8, x12, x8, x9)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004d and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004d; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 474*FLEN/8, x12, x8, x9)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000013 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000013; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 476*FLEN/8, x12, x8, x9)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000034 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000034; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 478*FLEN/8, x12, x8, x9)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000058 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000058; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 480*FLEN/8, x12, x8, x9)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000043 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000043; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:482*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 482*FLEN/8, x12, x8, x9)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000057; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:484*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 484*FLEN/8, x12, x8, x9)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000040 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000040; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 486*FLEN/8, x12, x8, x9)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000052 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000052; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 488*FLEN/8, x12, x8, x9)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001a and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001a; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 490*FLEN/8, x12, x8, x9)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004f and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004f; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:492*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 492*FLEN/8, x12, x8, x9)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000002; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:494*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 494*FLEN/8, x12, x8, x9)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005b; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 496*FLEN/8, x12, x8, x9)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000029; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 498*FLEN/8, x12, x8, x9)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000005 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000005; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 500*FLEN/8, x12, x8, x9)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004e and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004e; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:502*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 502*FLEN/8, x12, x8, x9)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000031 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000031; op2val:0xff800000; 
   valaddr_reg:x11; val_offset:504*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 504*FLEN/8, x12, x8, x9)

inst_275:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000031 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x32; op2val:0x80000031; 
   valaddr_reg:x11; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 506*FLEN/8, x12, x8, x9)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x22; op2val:0x8000001e; 
   valaddr_reg:x11; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 508*FLEN/8, x12, x8, x9)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000aa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x2a; op2val:0x800000aa; 
   valaddr_reg:x11; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 510*FLEN/8, x12, x8, x9)

inst_278:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000249 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x49; op2val:0x80000249; 
   valaddr_reg:x11; val_offset:512*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 512*FLEN/8, x12, x8, x9)

inst_279:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00041f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x1f; op2val:0x8000041f; 
   valaddr_reg:x11; val_offset:514*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 514*FLEN/8, x12, x8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(50,64,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(2147483700,32,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(2147483703,32,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(2147483671,32,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(2147483662,32,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(110,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(238,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(499,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(991,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(1957,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(4077,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(8179,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(16374,64,FLEN)
NAN_BOXED(43,64,FLEN)
NAN_BOXED(32725,64,FLEN)
NAN_BOXED(72,64,FLEN)
NAN_BOXED(65464,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(131026,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(262103,64,FLEN)
NAN_BOXED(82,64,FLEN)
NAN_BOXED(524206,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(1048505,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(2097095,64,FLEN)
test_dataset_1:
NAN_BOXED(34,32,FLEN)
NAN_BOXED(4194270,32,FLEN)
NAN_BOXED(71,32,FLEN)
NAN_BOXED(2147483720,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(2147483662,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(2147483704,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(2147483742,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483665,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(2147483744,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(2147483744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483818,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(2147483913,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2147484703,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(2147485766,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(2147487756,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(2147491881,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2147500095,32,FLEN)
NAN_BOXED(39,32,FLEN)
NAN_BOXED(2147516455,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(2147549222,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(2147614736,32,FLEN)
NAN_BOXED(43,32,FLEN)
NAN_BOXED(2147745835,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(2148007963,32,FLEN)
NAN_BOXED(71,32,FLEN)
NAN_BOXED(2148532295,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(2149580837,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(2151677964,32,FLEN)
NAN_BOXED(1065353266,32,FLEN)
NAN_BOXED(3066298368,32,FLEN)
NAN_BOXED(1065353290,32,FLEN)
NAN_BOXED(3071279104,32,FLEN)
NAN_BOXED(1065353254,32,FLEN)
NAN_BOXED(3062366208,32,FLEN)
NAN_BOXED(1065353241,32,FLEN)
NAN_BOXED(3053977600,32,FLEN)
NAN_BOXED(1065353221,32,FLEN)
NAN_BOXED(900726784,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(3067346944,32,FLEN)
NAN_BOXED(1065353277,32,FLEN)
NAN_BOXED(884998144,32,FLEN)
NAN_BOXED(1065353228,32,FLEN)
NAN_BOXED(929562624,32,FLEN)
NAN_BOXED(1065353313,32,FLEN)
NAN_BOXED(933167104,32,FLEN)
NAN_BOXED(1065353236,32,FLEN)
NAN_BOXED(947257344,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(956121088,32,FLEN)
NAN_BOXED(1065353286,32,FLEN)
NAN_BOXED(964116480,32,FLEN)
NAN_BOXED(1065353267,32,FLEN)
NAN_BOXED(972869632,32,FLEN)
NAN_BOXED(1065353284,32,FLEN)
NAN_BOXED(981327872,32,FLEN)
NAN_BOXED(1065353283,32,FLEN)
NAN_BOXED(989787136,32,FLEN)
NAN_BOXED(1065353244,32,FLEN)
NAN_BOXED(998230016,32,FLEN)
NAN_BOXED(1065353292,32,FLEN)
NAN_BOXED(1006613504,32,FLEN)
NAN_BOXED(1065353291,32,FLEN)
NAN_BOXED(1015011968,32,FLEN)
NAN_BOXED(1065353274,32,FLEN)
NAN_BOXED(1023406464,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(1031796064,32,FLEN)
NAN_BOXED(1065353306,32,FLEN)
NAN_BOXED(1040185952,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(1048575912,32,FLEN)
NAN_BOXED(1065353295,32,FLEN)
NAN_BOXED(1056964292,32,FLEN)
NAN_BOXED(1065353279,32,FLEN)
NAN_BOXED(3221225504,32,FLEN)
NAN_BOXED(1065353297,32,FLEN)
NAN_BOXED(3221225514,32,FLEN)
NAN_BOXED(1065353241,32,FLEN)
NAN_BOXED(3221225486,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(3221225478,32,FLEN)
NAN_BOXED(1065353251,32,FLEN)
NAN_BOXED(3221225498,32,FLEN)
NAN_BOXED(1065353307,32,FLEN)
NAN_BOXED(3221225534,32,FLEN)
NAN_BOXED(1065353264,32,FLEN)
NAN_BOXED(3221225528,32,FLEN)
NAN_BOXED(1065353259,32,FLEN)
NAN_BOXED(3221225558,32,FLEN)
NAN_BOXED(1065353224,32,FLEN)
NAN_BOXED(3221225604,32,FLEN)
NAN_BOXED(1065353235,32,FLEN)
NAN_BOXED(3221225738,32,FLEN)
NAN_BOXED(1065353245,32,FLEN)
NAN_BOXED(3221225998,32,FLEN)
NAN_BOXED(1065353290,32,FLEN)
NAN_BOXED(3221226533,32,FLEN)
NAN_BOXED(1065353285,32,FLEN)
NAN_BOXED(3221227554,32,FLEN)
NAN_BOXED(1065353304,32,FLEN)
NAN_BOXED(3221229612,32,FLEN)
NAN_BOXED(1065353220,32,FLEN)
NAN_BOXED(3221233666,32,FLEN)
NAN_BOXED(1065353298,32,FLEN)
NAN_BOXED(3221241897,32,FLEN)
NAN_BOXED(1065353294,32,FLEN)
NAN_BOXED(3221258279,32,FLEN)
NAN_BOXED(1065353232,32,FLEN)
NAN_BOXED(3221291016,32,FLEN)
NAN_BOXED(1065353228,32,FLEN)
NAN_BOXED(3221356550,32,FLEN)
NAN_BOXED(1065353231,32,FLEN)
NAN_BOXED(3221487624,32,FLEN)
NAN_BOXED(1065353294,32,FLEN)
NAN_BOXED(3221749799,32,FLEN)
NAN_BOXED(1065353241,32,FLEN)
NAN_BOXED(3222274060,32,FLEN)
NAN_BOXED(1065353308,32,FLEN)
NAN_BOXED(3223322670,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(2147483709,32,FLEN)
NAN_BOXED(94,32,FLEN)
NAN_BOXED(2147483739,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(2147483730,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(2147483709,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(36,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(212,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(489,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(960,32,FLEN)
NAN_BOXED(6,32,FLEN)
NAN_BOXED(2043,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(4084,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(8142,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(16351,32,FLEN)
NAN_BOXED(94,32,FLEN)
NAN_BOXED(32675,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(65464,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(130983,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(262118,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(524281,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(1048556,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(2097109,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(4194272,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(2147483726,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(2147483737,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(88,32,FLEN)
NAN_BOXED(2147483745,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(2147483738,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(2147483721,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(2147483759,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(2147483862,32,FLEN)
NAN_BOXED(20,32,FLEN)
NAN_BOXED(2147483925,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(2147484250,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(2147484732,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(2147485708,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(2147487840,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(2147491911,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(2147500051,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(2147516515,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(2147549231,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(2147614758,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(2147745839,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(2148008019,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(2148532242,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(2149580841,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(2151678049,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(8388522,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(8388578,32,FLEN)
NAN_BOXED(43,32,FLEN)
NAN_BOXED(8388556,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(8388560,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(8388493,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(8388494,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(8388392,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(8388297,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(8388043,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(8387510,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(8386460,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(8384420,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(8380393,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(8372214,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(8355749,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(8323013,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(8257472,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(8126385,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(7864318,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(7339967,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(6291415,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(4194296,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(2155872279,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(2155872335,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(2155872344,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872249,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(2155872326,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(2155872264,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(2155872219,32,FLEN)
NAN_BOXED(92,32,FLEN)
NAN_BOXED(2155872219,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(2155871811,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(2155871244,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(2155870223,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(2155868243,32,FLEN)
NAN_BOXED(39,32,FLEN)
NAN_BOXED(2155864102,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(2155855960,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(2155839500,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(2155806770,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(2155741194,32,FLEN)
NAN_BOXED(36,32,FLEN)
NAN_BOXED(2155610147,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2155347982,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(2154823697,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(2153775170,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(2151678034,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2147483662,32,FLEN)
NAN_BOXED(8388644,32,FLEN)
NAN_BOXED(2147483682,32,FLEN)
NAN_BOXED(8388614,32,FLEN)
NAN_BOXED(2147483650,32,FLEN)
NAN_BOXED(8388635,32,FLEN)
NAN_BOXED(2147483667,32,FLEN)
NAN_BOXED(8388642,32,FLEN)
NAN_BOXED(2147483666,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(2147483657,32,FLEN)
NAN_BOXED(8388681,32,FLEN)
NAN_BOXED(2147483657,32,FLEN)
NAN_BOXED(8388704,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(8388686,32,FLEN)
NAN_BOXED(178,32,FLEN)
NAN_BOXED(8388672,32,FLEN)
NAN_BOXED(448,32,FLEN)
NAN_BOXED(8388691,32,FLEN)
NAN_BOXED(941,32,FLEN)
NAN_BOXED(8388690,32,FLEN)
NAN_BOXED(1966,32,FLEN)
NAN_BOXED(8388656,32,FLEN)
NAN_BOXED(4048,32,FLEN)
NAN_BOXED(8388631,32,FLEN)
NAN_BOXED(8169,32,FLEN)
NAN_BOXED(8388657,32,FLEN)
NAN_BOXED(16335,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(32730,32,FLEN)
NAN_BOXED(8388626,32,FLEN)
NAN_BOXED(65518,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(131037,32,FLEN)
NAN_BOXED(8388652,32,FLEN)
NAN_BOXED(262100,32,FLEN)
NAN_BOXED(8388700,32,FLEN)
NAN_BOXED(524196,32,FLEN)
NAN_BOXED(8388652,32,FLEN)
NAN_BOXED(1048532,32,FLEN)
NAN_BOXED(8388613,32,FLEN)
NAN_BOXED(2097147,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(4194269,32,FLEN)
NAN_BOXED(8388628,32,FLEN)
NAN_BOXED(2164260874,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(2164260884,32,FLEN)
NAN_BOXED(8388659,32,FLEN)
NAN_BOXED(2164260892,32,FLEN)
NAN_BOXED(8388625,32,FLEN)
NAN_BOXED(2164260876,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2164260880,32,FLEN)
NAN_BOXED(8388702,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2164260900,32,FLEN)
NAN_BOXED(8388631,32,FLEN)
NAN_BOXED(2164260940,32,FLEN)
NAN_BOXED(8388702,32,FLEN)
NAN_BOXED(2164261039,32,FLEN)
NAN_BOXED(8388647,32,FLEN)
NAN_BOXED(2164261140,32,FLEN)
NAN_BOXED(8388651,32,FLEN)
NAN_BOXED(2164261398,32,FLEN)
NAN_BOXED(8388662,32,FLEN)
NAN_BOXED(2164261915,32,FLEN)
NAN_BOXED(8388621,32,FLEN)
NAN_BOXED(2164262918,32,FLEN)
NAN_BOXED(8388670,32,FLEN)
NAN_BOXED(2164264991,32,FLEN)
NAN_BOXED(8388652,32,FLEN)
NAN_BOXED(2164269078,32,FLEN)
NAN_BOXED(8388624,32,FLEN)
NAN_BOXED(2164277256,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2164293640,32,FLEN)
NAN_BOXED(8388672,32,FLEN)
NAN_BOXED(2164326432,32,FLEN)
NAN_BOXED(8388613,32,FLEN)
NAN_BOXED(2164391938,32,FLEN)
NAN_BOXED(8388651,32,FLEN)
NAN_BOXED(2164523030,32,FLEN)
NAN_BOXED(8388696,32,FLEN)
NAN_BOXED(2164785196,32,FLEN)
NAN_BOXED(8388630,32,FLEN)
NAN_BOXED(2165309451,32,FLEN)
NAN_BOXED(8388681,32,FLEN)
NAN_BOXED(2166358052,32,FLEN)
NAN_BOXED(2130706514,32,FLEN)
NAN_BOXED(2130706264,32,FLEN)
NAN_BOXED(2130706441,32,FLEN)
NAN_BOXED(2130706408,32,FLEN)
NAN_BOXED(2130706458,32,FLEN)
NAN_BOXED(2130706370,32,FLEN)
NAN_BOXED(2130706461,32,FLEN)
NAN_BOXED(2130706356,32,FLEN)
NAN_BOXED(2130706482,32,FLEN)
NAN_BOXED(2130706298,32,FLEN)
NAN_BOXED(2130706445,32,FLEN)
NAN_BOXED(2130706340,32,FLEN)
NAN_BOXED(2130706504,32,FLEN)
NAN_BOXED(2130706158,32,FLEN)
NAN_BOXED(2130706470,32,FLEN)
NAN_BOXED(2130706098,32,FLEN)
NAN_BOXED(2130706495,32,FLEN)
NAN_BOXED(2130705792,32,FLEN)
NAN_BOXED(2130706524,32,FLEN)
NAN_BOXED(2130705222,32,FLEN)
NAN_BOXED(2130706460,32,FLEN)
NAN_BOXED(2130704326,32,FLEN)
NAN_BOXED(2130706443,32,FLEN)
NAN_BOXED(2130702312,32,FLEN)
NAN_BOXED(2130706461,32,FLEN)
NAN_BOXED(2130698180,32,FLEN)
NAN_BOXED(2130706507,32,FLEN)
NAN_BOXED(2130689896,32,FLEN)
NAN_BOXED(2130706488,32,FLEN)
NAN_BOXED(2130673550,32,FLEN)
NAN_BOXED(2130706478,32,FLEN)
NAN_BOXED(2130640802,32,FLEN)
NAN_BOXED(2130706441,32,FLEN)
NAN_BOXED(2130575340,32,FLEN)
NAN_BOXED(2130706436,32,FLEN)
NAN_BOXED(2130444278,32,FLEN)
NAN_BOXED(2130706490,32,FLEN)
NAN_BOXED(2130182026,32,FLEN)
NAN_BOXED(2130706519,32,FLEN)
NAN_BOXED(2129657680,32,FLEN)
NAN_BOXED(2130706448,32,FLEN)
NAN_BOXED(2128609246,32,FLEN)
NAN_BOXED(2130706483,32,FLEN)
NAN_BOXED(2126512024,32,FLEN)
NAN_BOXED(2130706459,32,FLEN)
NAN_BOXED(2122317712,32,FLEN)
NAN_BOXED(2130706438,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706512,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706446,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706491,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706479,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706452,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706509,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706451,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706484,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706520,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706499,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706519,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706496,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706514,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706458,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706511,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706434,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706523,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706473,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706437,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706510,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2130706481,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(2147483697,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(2147483678,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(2147483818,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(2147484233,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2147484703,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 254*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
