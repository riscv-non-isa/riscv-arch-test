
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:36:13 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fadd.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fadd_b13 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fadd_b13)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31,fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x31; op2:x31; dest:x31; op1val:0x7f222105; op2val:0x7f222105; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x31, x31, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x28, rd==x30,fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 1 and fe2 == 0xfd and fm2 == 0x217fdd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x29; op2:x28; dest:x30; op1val:0x7ea17fdd; op2val:0xfea17fdd; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x30, x29, x28, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x29,fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x30; dest:x29; op1val:0x7ec45459; op2val:0x7ec45459; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x29, x30, x30, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2, rs1==x28, rs2==x29, rd==x28,fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x167d44 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x28; op2:x29; dest:x28; op1val:0x7f167d44; op2val:0xff167d44; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x28, x28, x29, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x370362 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x26; op2:x27; dest:x27; op1val:0x7eb70362; op2val:0xfeb70362; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x27, x26, x27, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x27; op2:x25; dest:x26; op1val:0x7f2e5b90; op2val:0xff2e5b90; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x26, x27, x25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x24; op2:x26; dest:x25; op1val:0x7e587392; op2val:0xfe587392; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x25, x24, x26, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24,fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6d7424 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x25; op2:x23; dest:x24; op1val:0x7eed7424; op2val:0xfeed7424; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x24, x25, x23, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eabd8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x22; op2:x24; dest:x23; op1val:0x7f2eabd8; op2val:0xff2eabd8; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x23, x22, x24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22,fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1b8fcb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x23; op2:x21; dest:x22; op1val:0x7f1b8fcb; op2val:0xff1b8fcb; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x22, x23, x21, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6e317d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x20; op2:x22; dest:x21; op1val:0x7e6e317d; op2val:0xfe6e317d; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x21, x20, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c93b2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x21; op2:x19; dest:x20; op1val:0x7f2c93b2; op2val:0xff2c93b2; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x20, x21, x19, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x354d84 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x18; op2:x20; dest:x19; op1val:0x7eb54d84; op2val:0xfeb54d84; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x19, x18, x20, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18,fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x26b8d3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x19; op2:x17; dest:x18; op1val:0x7ea6b8d3; op2val:0xfea6b8d3; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x18, x19, x17, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2f4c51 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x16; op2:x18; dest:x17; op1val:0x7f2f4c51; op2val:0xff2f4c51; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x17, x16, x18, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16,fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x372bf7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x17; op2:x15; dest:x16; op1val:0x7eb72bf7; op2val:0xfeb72bf7; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x16, x17, x15, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xfc and fm2 == 0x480ede and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x14; op2:x16; dest:x15; op1val:0x7e480ede; op2val:0xfe480ede; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x15, x14, x16, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14,fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52b355 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x15; op2:x13; dest:x14; op1val:0x7ed2b355; op2val:0xfed2b355; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x14, x15, x13, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0a2eec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x12; op2:x14; dest:x13; op1val:0x7f0a2eec; op2val:0xff0a2eec; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x13, x12, x14, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12,fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e5ec7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x13; op2:x11; dest:x12; op1val:0x7f1e5ec7; op2val:0xff1e5ec7; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x12, x13, x11, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0xf4 and fm2 == 0x60affa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x10; op2:x12; dest:x11; op1val:0x7a60affa; op2val:0xfa60affa; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x11, x10, x12, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10,fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x269468 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x11; op2:x9; dest:x10; op1val:0x7f269468; op2val:0xff269468; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x10, x11, x9, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x11,test_dataset_1)

inst_22:
// rs1==x8, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x79c1c6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x8; op2:x10; dest:x9; op1val:0x7e79c1c6; op2val:0xfe79c1c6; 
   valaddr_reg:x11; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x9, x8, x10, dyn, 0, 0, x11, 0*FLEN/8, x12, x1, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8,fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x12bd51 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x9; op2:x7; dest:x8; op1val:0x7e12bd51; op2val:0xfe12bd51; 
   valaddr_reg:x11; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x8, x9, x7, dyn, 0, 0, x11, 2*FLEN/8, x12, x1, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3741cc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x6; op2:x8; dest:x7; op1val:0x7e3741cc; op2val:0xfe3741cc; 
   valaddr_reg:x11; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x7, x6, x8, dyn, 0, 0, x11, 4*FLEN/8, x12, x1, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x7, rs2==x5, rd==x6,fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a35e0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x7; op2:x5; dest:x6; op1val:0x7f1a35e0; op2val:0xff1a35e0; 
   valaddr_reg:x11; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x6, x7, x5, dyn, 0, 0, x11, 6*FLEN/8, x12, x8, x9)

inst_26:
// rs1==x4, rs2==x6, rd==x5,fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x772129 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x4; op2:x6; dest:x5; op1val:0x7d772129; op2val:0xfd772129; 
   valaddr_reg:x11; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x5, x4, x6, dyn, 0, 0, x11, 8*FLEN/8, x12, x8, x9)

inst_27:
// rs1==x5, rs2==x3, rd==x4,fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x430c98 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x5; op2:x3; dest:x4; op1val:0x7ec30c98; op2val:0xfec30c98; 
   valaddr_reg:x11; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x4, x5, x3, dyn, 0, 0, x11, 10*FLEN/8, x12, x8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x278349 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x2; op2:x4; dest:x3; op1val:0x7da78349; op2val:0xfda78349; 
   valaddr_reg:x11; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x3, x2, x4, dyn, 0, 0, x11, 12*FLEN/8, x12, x8, x9)

inst_29:
// rs1==x3, rs2==x1, rd==x2,fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07a8e7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x3; op2:x1; dest:x2; op1val:0x7f07a8e7; op2val:0xff07a8e7; 
   valaddr_reg:x11; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x2, x3, x1, dyn, 0, 0, x11, 14*FLEN/8, x12, x8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0xff1c60ac; 
   valaddr_reg:x11; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x1, x0, x2, dyn, 0, 0, x11, 16*FLEN/8, x12, x8, x9)

inst_31:
// rs1==x1,fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x390e97 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x1; op2:x30; dest:x31; op1val:0x7f390e97; op2val:0xff390e97; 
   valaddr_reg:x11; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x1, x30, dyn, 0, 0, x11, 18*FLEN/8, x12, x8, x9)

inst_32:
// rs2==x0,fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x0; dest:x31; op1val:0x7ee1a51b; op2val:0x0; 
   valaddr_reg:x11; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x0, dyn, 0, 0, x11, 20*FLEN/8, x12, x8, x9)

inst_33:
// rd==x0,fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x31; op2:x30; dest:x0; op1val:0x7ee4f961; op2val:0xfee4f961; 
   valaddr_reg:x11; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x0, x31, x30, dyn, 0, 0, x11, 22*FLEN/8, x12, x8, x9)

inst_34:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d0ccb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd0ccb; op2val:0xfedd0ccb; 
   valaddr_reg:x11; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 24*FLEN/8, x12, x8, x9)

inst_35:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1173d9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1173d9; op2val:0xfe1173d9; 
   valaddr_reg:x11; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 26*FLEN/8, x12, x8, x9)

inst_36:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4e0d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4e0d; op2val:0xfeeb4e0d; 
   valaddr_reg:x11; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 28*FLEN/8, x12, x8, x9)

inst_37:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x36fce6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb6fce6; op2val:0xfeb6fce6; 
   valaddr_reg:x11; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 30*FLEN/8, x12, x8, x9)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1175bf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1175bf; op2val:0xff1175bf; 
   valaddr_reg:x11; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 32*FLEN/8, x12, x8, x9)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x314a05 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f314a05; op2val:0xff314a05; 
   valaddr_reg:x11; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 34*FLEN/8, x12, x8, x9)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c7300 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c7300; op2val:0xff2c7300; 
   valaddr_reg:x11; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 36*FLEN/8, x12, x8, x9)

inst_41:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4f9722 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecf9722; op2val:0xfecf9722; 
   valaddr_reg:x11; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 38*FLEN/8, x12, x8, x9)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x076a16 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f076a16; op2val:0xff076a16; 
   valaddr_reg:x11; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 40*FLEN/8, x12, x8, x9)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1bd52c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1bd52c; op2val:0xff1bd52c; 
   valaddr_reg:x11; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 42*FLEN/8, x12, x8, x9)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bd8f4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bd8f4; op2val:0xff2bd8f4; 
   valaddr_reg:x11; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 44*FLEN/8, x12, x8, x9)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x365ad7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f365ad7; op2val:0xff365ad7; 
   valaddr_reg:x11; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 46*FLEN/8, x12, x8, x9)

inst_46:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d0427 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead0427; op2val:0xfead0427; 
   valaddr_reg:x11; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 48*FLEN/8, x12, x8, x9)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f4810 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3f4810; op2val:0xff3f4810; 
   valaddr_reg:x11; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 50*FLEN/8, x12, x8, x9)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x185183 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f185183; op2val:0xff185183; 
   valaddr_reg:x11; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 52*FLEN/8, x12, x8, x9)

inst_49:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4f07 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4f07; op2val:0xfeeb4f07; 
   valaddr_reg:x11; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 54*FLEN/8, x12, x8, x9)

inst_50:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71fa00 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71fa00 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1fa00; op2val:0xfef1fa00; 
   valaddr_reg:x11; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 56*FLEN/8, x12, x8, x9)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3aa6be and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3aa6be; op2val:0xfe3aa6be; 
   valaddr_reg:x11; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 58*FLEN/8, x12, x8, x9)

inst_52:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x33eb13 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x33eb13 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db3eb13; op2val:0xfdb3eb13; 
   valaddr_reg:x11; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 60*FLEN/8, x12, x8, x9)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188f57 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x188f57 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f188f57; op2val:0xff188f57; 
   valaddr_reg:x11; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 62*FLEN/8, x12, x8, x9)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1ca7c2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1ca7c2; op2val:0xff1ca7c2; 
   valaddr_reg:x11; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 64*FLEN/8, x12, x8, x9)

inst_55:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ce7f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ce7f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ce7f; op2val:0xfde0ce7f; 
   valaddr_reg:x11; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 66*FLEN/8, x12, x8, x9)

inst_56:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0af584 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0af584 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0af584; op2val:0xfd0af584; 
   valaddr_reg:x11; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 68*FLEN/8, x12, x8, x9)

inst_57:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb91a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb91a; op2val:0xff2eb91a; 
   valaddr_reg:x11; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 70*FLEN/8, x12, x8, x9)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ac50 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02ac50 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02ac50; op2val:0xff02ac50; 
   valaddr_reg:x11; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 72*FLEN/8, x12, x8, x9)

inst_59:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73d707 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x73d707 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef3d707; op2val:0xfef3d707; 
   valaddr_reg:x11; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 74*FLEN/8, x12, x8, x9)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d2a79 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd2a79; op2val:0xfedd2a79; 
   valaddr_reg:x11; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 76*FLEN/8, x12, x8, x9)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e223c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0e223c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8e223c; op2val:0xfe8e223c; 
   valaddr_reg:x11; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 78*FLEN/8, x12, x8, x9)

inst_62:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5f97b9 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5f97b9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdf97b9; op2val:0xfcdf97b9; 
   valaddr_reg:x11; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 80*FLEN/8, x12, x8, x9)

inst_63:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x38849b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f38849b; op2val:0xff38849b; 
   valaddr_reg:x11; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 82*FLEN/8, x12, x8, x9)

inst_64:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e4d8f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3e4d8f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbe4d8f; op2val:0xfdbe4d8f; 
   valaddr_reg:x11; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 84*FLEN/8, x12, x8, x9)

inst_65:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19be4b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x19be4b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f19be4b; op2val:0xff19be4b; 
   valaddr_reg:x11; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 86*FLEN/8, x12, x8, x9)

inst_66:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x0bf9e4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c8bf9e4; op2val:0xfc8bf9e4; 
   valaddr_reg:x11; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 88*FLEN/8, x12, x8, x9)

inst_67:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1be782 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1be782 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9be782; op2val:0xfd9be782; 
   valaddr_reg:x11; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 90*FLEN/8, x12, x8, x9)

inst_68:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2998cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2998cc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2998cc; op2val:0xfe2998cc; 
   valaddr_reg:x11; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 92*FLEN/8, x12, x8, x9)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x06834b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e86834b; op2val:0xfe86834b; 
   valaddr_reg:x11; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 94*FLEN/8, x12, x8, x9)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41657b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x41657b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec1657b; op2val:0xfec1657b; 
   valaddr_reg:x11; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 96*FLEN/8, x12, x8, x9)

inst_71:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b03d8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1b03d8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9b03d8; op2val:0xfd9b03d8; 
   valaddr_reg:x11; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 98*FLEN/8, x12, x8, x9)

inst_72:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x191af1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e191af1; op2val:0xfe191af1; 
   valaddr_reg:x11; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 100*FLEN/8, x12, x8, x9)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7784 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0c7784 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c7784; op2val:0xff0c7784; 
   valaddr_reg:x11; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 102*FLEN/8, x12, x8, x9)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30593a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x30593a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f30593a; op2val:0xff30593a; 
   valaddr_reg:x11; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 104*FLEN/8, x12, x8, x9)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0125a0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0125a0; op2val:0xff0125a0; 
   valaddr_reg:x11; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 106*FLEN/8, x12, x8, x9)

inst_76:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x32551e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x32551e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d32551e; op2val:0xfd32551e; 
   valaddr_reg:x11; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 108*FLEN/8, x12, x8, x9)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22524e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x22524e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f22524e; op2val:0xff22524e; 
   valaddr_reg:x11; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 110*FLEN/8, x12, x8, x9)

inst_78:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x408722 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e408722; op2val:0xfe408722; 
   valaddr_reg:x11; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 112*FLEN/8, x12, x8, x9)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d93c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x29d93c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea9d93c; op2val:0xfea9d93c; 
   valaddr_reg:x11; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 114*FLEN/8, x12, x8, x9)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x351aa9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x351aa9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb51aa9; op2val:0xfeb51aa9; 
   valaddr_reg:x11; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 116*FLEN/8, x12, x8, x9)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5a8a0e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eda8a0e; op2val:0xfeda8a0e; 
   valaddr_reg:x11; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 118*FLEN/8, x12, x8, x9)

inst_82:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f30c5 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6f30c5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6f30c5; op2val:0xfe6f30c5; 
   valaddr_reg:x11; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 120*FLEN/8, x12, x8, x9)

inst_83:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d4b8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x20d4b8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f20d4b8; op2val:0xff20d4b8; 
   valaddr_reg:x11; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 122*FLEN/8, x12, x8, x9)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x57453d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed7453d; op2val:0xfed7453d; 
   valaddr_reg:x11; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 124*FLEN/8, x12, x8, x9)

inst_85:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e61dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0e61dc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0e61dc; op2val:0xff0e61dc; 
   valaddr_reg:x11; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 126*FLEN/8, x12, x8, x9)

inst_86:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c612e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0c612e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0c612e; op2val:0xfd0c612e; 
   valaddr_reg:x11; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 128*FLEN/8, x12, x8, x9)

inst_87:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x386b8e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e386b8e; op2val:0xfe386b8e; 
   valaddr_reg:x11; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 130*FLEN/8, x12, x8, x9)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07412e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07412e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e87412e; op2val:0xfe87412e; 
   valaddr_reg:x11; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 132*FLEN/8, x12, x8, x9)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09eee9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x09eee9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e89eee9; op2val:0xfe89eee9; 
   valaddr_reg:x11; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 134*FLEN/8, x12, x8, x9)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x735bf2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef35bf2; op2val:0xfef35bf2; 
   valaddr_reg:x11; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 136*FLEN/8, x12, x8, x9)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09661e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09661e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09661e; op2val:0xff09661e; 
   valaddr_reg:x11; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 138*FLEN/8, x12, x8, x9)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f22f1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f22f1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f22f1; op2val:0xfe9f22f1; 
   valaddr_reg:x11; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 140*FLEN/8, x12, x8, x9)

inst_93:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 1 and fe2 == 0xf5 and fm2 == 0x15d64c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a95d64c; op2val:0xfa95d64c; 
   valaddr_reg:x11; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 142*FLEN/8, x12, x8, x9)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x006905 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x006905 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e806905; op2val:0xfe806905; 
   valaddr_reg:x11; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 144*FLEN/8, x12, x8, x9)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74c2e8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x74c2e8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef4c2e8; op2val:0xfef4c2e8; 
   valaddr_reg:x11; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 146*FLEN/8, x12, x8, x9)

inst_96:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2814cf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2814cf; op2val:0xff2814cf; 
   valaddr_reg:x11; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 148*FLEN/8, x12, x8, x9)

inst_97:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f21ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f21ce and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f21ce; op2val:0xfe9f21ce; 
   valaddr_reg:x11; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 150*FLEN/8, x12, x8, x9)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c054 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c054 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c054; op2val:0xff06c054; 
   valaddr_reg:x11; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 152*FLEN/8, x12, x8, x9)

inst_99:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e4880 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efe4880; op2val:0xfefe4880; 
   valaddr_reg:x11; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 154*FLEN/8, x12, x8, x9)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b03e6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2b03e6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eab03e6; op2val:0xfeab03e6; 
   valaddr_reg:x11; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 156*FLEN/8, x12, x8, x9)

inst_101:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7234e1 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7234e1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7df234e1; op2val:0xfdf234e1; 
   valaddr_reg:x11; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 158*FLEN/8, x12, x8, x9)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3b1c27 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebb1c27; op2val:0xfebb1c27; 
   valaddr_reg:x11; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 160*FLEN/8, x12, x8, x9)

inst_103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x110d95 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x110d95 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f110d95; op2val:0xff110d95; 
   valaddr_reg:x11; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 162*FLEN/8, x12, x8, x9)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3deb73 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3deb73 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebdeb73; op2val:0xfebdeb73; 
   valaddr_reg:x11; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 164*FLEN/8, x12, x8, x9)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x33495f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb3495f; op2val:0xfeb3495f; 
   valaddr_reg:x11; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 166*FLEN/8, x12, x8, x9)

inst_106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2800cd and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2800cd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2800cd; op2val:0xff2800cd; 
   valaddr_reg:x11; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 168*FLEN/8, x12, x8, x9)

inst_107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10628e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x10628e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e10628e; op2val:0xfe10628e; 
   valaddr_reg:x11; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 170*FLEN/8, x12, x8, x9)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x731b27 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef31b27; op2val:0xfef31b27; 
   valaddr_reg:x11; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 172*FLEN/8, x12, x8, x9)

inst_109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4e72 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0b4e72 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0b4e72; op2val:0xff0b4e72; 
   valaddr_reg:x11; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 174*FLEN/8, x12, x8, x9)

inst_110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a4c33 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1a4c33 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9a4c33; op2val:0xfe9a4c33; 
   valaddr_reg:x11; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 176*FLEN/8, x12, x8, x9)

inst_111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x72d2f3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e72d2f3; op2val:0xfe72d2f3; 
   valaddr_reg:x11; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 178*FLEN/8, x12, x8, x9)

inst_112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b9ea and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b9ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b9ea; op2val:0xff09b9ea; 
   valaddr_reg:x11; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 180*FLEN/8, x12, x8, x9)

inst_113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1df6e4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1df6e4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1df6e4; op2val:0xff1df6e4; 
   valaddr_reg:x11; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 182*FLEN/8, x12, x8, x9)

inst_114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 1 and fe2 == 0xfb and fm2 == 0x16325d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d96325d; op2val:0xfd96325d; 
   valaddr_reg:x11; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 184*FLEN/8, x12, x8, x9)

inst_115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795162 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x795162 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef95162; op2val:0xfef95162; 
   valaddr_reg:x11; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 186*FLEN/8, x12, x8, x9)

inst_116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5706d8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5706d8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5706d8; op2val:0xfe5706d8; 
   valaddr_reg:x11; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 188*FLEN/8, x12, x8, x9)

inst_117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x19e0a5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d99e0a5; op2val:0xfd99e0a5; 
   valaddr_reg:x11; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 190*FLEN/8, x12, x8, x9)

inst_118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1854d1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1854d1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9854d1; op2val:0xfe9854d1; 
   valaddr_reg:x11; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 192*FLEN/8, x12, x8, x9)

inst_119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x52faef and fs2 == 1 and fe2 == 0xfc and fm2 == 0x52faef and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e52faef; op2val:0xfe52faef; 
   valaddr_reg:x11; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 194*FLEN/8, x12, x8, x9)

inst_120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x18212b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f18212b; op2val:0xff18212b; 
   valaddr_reg:x11; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 196*FLEN/8, x12, x8, x9)

inst_121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4cef18 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x4cef18 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dccef18; op2val:0xfdccef18; 
   valaddr_reg:x11; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 198*FLEN/8, x12, x8, x9)

inst_122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79e697 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x79e697 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef9e697; op2val:0xfef9e697; 
   valaddr_reg:x11; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 200*FLEN/8, x12, x8, x9)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2765d9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2765d9; op2val:0xff2765d9; 
   valaddr_reg:x11; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 202*FLEN/8, x12, x8, x9)

inst_124:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x643dc7 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x643dc7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c643dc7; op2val:0xfc643dc7; 
   valaddr_reg:x11; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 204*FLEN/8, x12, x8, x9)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c05a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02c05a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02c05a; op2val:0xff02c05a; 
   valaddr_reg:x11; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 206*FLEN/8, x12, x8, x9)

inst_126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x35ba7d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f35ba7d; op2val:0xff35ba7d; 
   valaddr_reg:x11; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 208*FLEN/8, x12, x8, x9)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb100 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb100 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb100; op2val:0xff2eb100; 
   valaddr_reg:x11; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 210*FLEN/8, x12, x8, x9)

inst_128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fd579 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fd579 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0fd579; op2val:0xff0fd579; 
   valaddr_reg:x11; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 212*FLEN/8, x12, x8, x9)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ba8b0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efba8b0; op2val:0xfefba8b0; 
   valaddr_reg:x11; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 214*FLEN/8, x12, x8, x9)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d5201 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d5201 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d5201; op2val:0xff2d5201; 
   valaddr_reg:x11; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 216*FLEN/8, x12, x8, x9)

inst_131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0540 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0f0540 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8f0540; op2val:0xfe8f0540; 
   valaddr_reg:x11; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 218*FLEN/8, x12, x8, x9)

inst_132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f9fcf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f9fcf; op2val:0xfe1f9fcf; 
   valaddr_reg:x11; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 220*FLEN/8, x12, x8, x9)

inst_133:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5aa799 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5aa799 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bdaa799; op2val:0xfbdaa799; 
   valaddr_reg:x11; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 222*FLEN/8, x12, x8, x9)

inst_134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000760 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000760 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e800760; op2val:0xfe800760; 
   valaddr_reg:x11; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 224*FLEN/8, x12, x8, x9)

inst_135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09f3ae and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09f3ae; op2val:0xff09f3ae; 
   valaddr_reg:x11; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 226*FLEN/8, x12, x8, x9)

inst_136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4960 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6e4960 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eee4960; op2val:0xfeee4960; 
   valaddr_reg:x11; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 228*FLEN/8, x12, x8, x9)

inst_137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7bb095 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7bb095 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dfbb095; op2val:0xfdfbb095; 
   valaddr_reg:x11; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 230*FLEN/8, x12, x8, x9)

inst_138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5e5c14 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5e5c14; op2val:0xfe5e5c14; 
   valaddr_reg:x11; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 232*FLEN/8, x12, x8, x9)

inst_139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x529e32 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed29e32; op2val:0xfed29e32; 
   valaddr_reg:x11; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 234*FLEN/8, x12, x8, x9)

inst_140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3793aa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb793aa; op2val:0xfeb793aa; 
   valaddr_reg:x11; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 236*FLEN/8, x12, x8, x9)

inst_141:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x143e58 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d143e58; op2val:0xfd143e58; 
   valaddr_reg:x11; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 238*FLEN/8, x12, x8, x9)

inst_142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 1 and fe2 == 0xfd and fm2 == 0x48d9ed and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec8d9ed; op2val:0xfec8d9ed; 
   valaddr_reg:x11; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 240*FLEN/8, x12, x8, x9)

inst_143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1ad123 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9ad123; op2val:0xfe9ad123; 
   valaddr_reg:x11; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 242*FLEN/8, x12, x8, x9)

inst_144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f40ca and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f40ca; op2val:0xfe9f40ca; 
   valaddr_reg:x11; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 244*FLEN/8, x12, x8, x9)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7655 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e7655 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2e7655; op2val:0xff2e7655; 
   valaddr_reg:x11; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 246*FLEN/8, x12, x8, x9)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x217160 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f217160; op2val:0xff217160; 
   valaddr_reg:x11; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 248*FLEN/8, x12, x8, x9)

inst_147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03f653 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e83f653; op2val:0xfe83f653; 
   valaddr_reg:x11; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 250*FLEN/8, x12, x8, x9)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065281 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x065281 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f065281; op2val:0xff065281; 
   valaddr_reg:x11; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 252*FLEN/8, x12, x8, x9)

inst_149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67dc90 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x67dc90 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e67dc90; op2val:0xfe67dc90; 
   valaddr_reg:x11; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 254*FLEN/8, x12, x8, x9)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bb989 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bb989; op2val:0xff2bb989; 
   valaddr_reg:x11; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 256*FLEN/8, x12, x8, x9)

inst_151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ab3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x70ab3f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef0ab3f; op2val:0xfef0ab3f; 
   valaddr_reg:x11; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 258*FLEN/8, x12, x8, x9)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3b1d98 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3b1d98; op2val:0xff3b1d98; 
   valaddr_reg:x11; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 260*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_153:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4a3e7e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4a3e7e; op2val:0xfd4a3e7e; 
   valaddr_reg:x11; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 262*FLEN/8, x12, x8, x9)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0ff996 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0ff996; op2val:0xff0ff996; 
   valaddr_reg:x11; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 264*FLEN/8, x12, x8, x9)

inst_155:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x40f240 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x40f240 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bc0f240; op2val:0xfbc0f240; 
   valaddr_reg:x11; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 266*FLEN/8, x12, x8, x9)

inst_156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x474c23 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec74c23; op2val:0xfec74c23; 
   valaddr_reg:x11; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 268*FLEN/8, x12, x8, x9)

inst_157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ba12e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ba12e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebba12e; op2val:0xfebba12e; 
   valaddr_reg:x11; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 270*FLEN/8, x12, x8, x9)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026d14 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x026d14 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f026d14; op2val:0xff026d14; 
   valaddr_reg:x11; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 272*FLEN/8, x12, x8, x9)

inst_159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0d7074 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8d7074; op2val:0xfe8d7074; 
   valaddr_reg:x11; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 274*FLEN/8, x12, x8, x9)

inst_160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x486246 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x486246 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e486246; op2val:0xfe486246; 
   valaddr_reg:x11; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 276*FLEN/8, x12, x8, x9)

inst_161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2596bf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2596bf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea596bf; op2val:0xfea596bf; 
   valaddr_reg:x11; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 278*FLEN/8, x12, x8, x9)

inst_162:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x442bee and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d442bee; op2val:0xfd442bee; 
   valaddr_reg:x11; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 280*FLEN/8, x12, x8, x9)

inst_163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c8e8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c8e8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c8e8; op2val:0xff06c8e8; 
   valaddr_reg:x11; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 282*FLEN/8, x12, x8, x9)

inst_164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6b3e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d6b3e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead6b3e; op2val:0xfead6b3e; 
   valaddr_reg:x11; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 284*FLEN/8, x12, x8, x9)

inst_165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x36a56c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db6a56c; op2val:0xfdb6a56c; 
   valaddr_reg:x11; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 286*FLEN/8, x12, x8, x9)

inst_166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f2776 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f2776 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f2776; op2val:0xfe1f2776; 
   valaddr_reg:x11; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 288*FLEN/8, x12, x8, x9)

inst_167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x360231 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x360231 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f360231; op2val:0xff360231; 
   valaddr_reg:x11; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 290*FLEN/8, x12, x8, x9)

inst_168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ccec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ccec; op2val:0xfde0ccec; 
   valaddr_reg:x11; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 292*FLEN/8, x12, x8, x9)

inst_169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x112a0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x112a0d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e912a0d; op2val:0xfe912a0d; 
   valaddr_reg:x11; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 294*FLEN/8, x12, x8, x9)

inst_170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x687317 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x687317 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de87317; op2val:0xfde87317; 
   valaddr_reg:x11; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 296*FLEN/8, x12, x8, x9)

inst_171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3cbbe2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3cbbe2; op2val:0xff3cbbe2; 
   valaddr_reg:x11; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 298*FLEN/8, x12, x8, x9)

inst_172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bde44 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1bde44 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9bde44; op2val:0xfe9bde44; 
   valaddr_reg:x11; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 300*FLEN/8, x12, x8, x9)

inst_173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x288293 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f288293; op2val:0xff288293; 
   valaddr_reg:x11; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 302*FLEN/8, x12, x8, x9)

inst_174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3012ad and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3012ad; op2val:0xff3012ad; 
   valaddr_reg:x11; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 304*FLEN/8, x12, x8, x9)

inst_175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f66bb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3f66bb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebf66bb; op2val:0xfebf66bb; 
   valaddr_reg:x11; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 306*FLEN/8, x12, x8, x9)

inst_176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00a730 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00a730; op2val:0xff00a730; 
   valaddr_reg:x11; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 308*FLEN/8, x12, x8, x9)

inst_177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a26e3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea26e3; op2val:0xfeea26e3; 
   valaddr_reg:x11; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 310*FLEN/8, x12, x8, x9)

inst_178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x02a504 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e82a504; op2val:0xfe82a504; 
   valaddr_reg:x11; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 312*FLEN/8, x12, x8, x9)

inst_179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c9c0a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c9c0a; op2val:0xff2c9c0a; 
   valaddr_reg:x11; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 314*FLEN/8, x12, x8, x9)

inst_180:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x59eac0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cd9eac0; op2val:0xfcd9eac0; 
   valaddr_reg:x11; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 316*FLEN/8, x12, x8, x9)

inst_181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x454909 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x454909 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e454909; op2val:0xfe454909; 
   valaddr_reg:x11; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 318*FLEN/8, x12, x8, x9)

inst_182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x21ba5d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f21ba5d; op2val:0xff21ba5d; 
   valaddr_reg:x11; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 320*FLEN/8, x12, x8, x9)

inst_183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09e19b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09e19b; op2val:0xff09e19b; 
   valaddr_reg:x11; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 322*FLEN/8, x12, x8, x9)

inst_184:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4bdaf1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4bdaf1; op2val:0xfd4bdaf1; 
   valaddr_reg:x11; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 324*FLEN/8, x12, x8, x9)

inst_185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x26d3f0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f26d3f0; op2val:0xff26d3f0; 
   valaddr_reg:x11; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 326*FLEN/8, x12, x8, x9)

inst_186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2cde9f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2cde9f; op2val:0xfe2cde9f; 
   valaddr_reg:x11; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 328*FLEN/8, x12, x8, x9)

inst_187:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x3bd2e4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c3bd2e4; op2val:0xfc3bd2e4; 
   valaddr_reg:x11; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 330*FLEN/8, x12, x8, x9)

inst_188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7de57e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7de57e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e7de57e; op2val:0xfe7de57e; 
   valaddr_reg:x11; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 332*FLEN/8, x12, x8, x9)

inst_189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x649633 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de49633; op2val:0xfde49633; 
   valaddr_reg:x11; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 334*FLEN/8, x12, x8, x9)

inst_190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x39f88a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f39f88a; op2val:0xff39f88a; 
   valaddr_reg:x11; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 336*FLEN/8, x12, x8, x9)

inst_191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0265 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d0265 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d0265; op2val:0xff2d0265; 
   valaddr_reg:x11; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 338*FLEN/8, x12, x8, x9)

inst_192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5c5df5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edc5df5; op2val:0xfedc5df5; 
   valaddr_reg:x11; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 340*FLEN/8, x12, x8, x9)

inst_193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a94c3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a94c3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a94c3; op2val:0xff1a94c3; 
   valaddr_reg:x11; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 342*FLEN/8, x12, x8, x9)

inst_194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e2ea7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3e2ea7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3e2ea7; op2val:0xff3e2ea7; 
   valaddr_reg:x11; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 344*FLEN/8, x12, x8, x9)

inst_195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2de8ee and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2de8ee; op2val:0xff2de8ee; 
   valaddr_reg:x11; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 346*FLEN/8, x12, x8, x9)

inst_196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecd998f; op2val:0xfecd998f; 
   valaddr_reg:x11; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 348*FLEN/8, x12, x8, x9)

inst_197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e88a3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e88a3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e88a3; op2val:0xff1e88a3; 
   valaddr_reg:x11; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 350*FLEN/8, x12, x8, x9)

inst_198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x17e134 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f17e134; op2val:0xff17e134; 
   valaddr_reg:x11; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 352*FLEN/8, x12, x8, x9)

inst_199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x612c54 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x612c54 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee12c54; op2val:0xfee12c54; 
   valaddr_reg:x11; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 354*FLEN/8, x12, x8, x9)

inst_200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x11; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 356*FLEN/8, x12, x8, x9)

inst_201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec45459; op2val:0xfec45459; 
   valaddr_reg:x11; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 358*FLEN/8, x12, x8, x9)

inst_202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1c60ac; op2val:0xff1c60ac; 
   valaddr_reg:x11; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 360*FLEN/8, x12, x8, x9)

inst_203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee1a51b; op2val:0xfee1a51b; 
   valaddr_reg:x11; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 362*FLEN/8, x12, x8, x9)

inst_204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee4f961; op2val:0xfee4f961; 
   valaddr_reg:x11; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 364*FLEN/8, x12, x8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132943109,64,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(2124513245,64,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2126795865,64,FLEN)
NAN_BOXED(2126795865,32,FLEN)
NAN_BOXED(2132180292,64,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2125923170,64,FLEN)
NAN_BOXED(4273406818,32,FLEN)
NAN_BOXED(2133744528,64,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2119725970,64,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2129490980,64,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2133765080,64,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2132512715,64,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2121150845,64,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2133627826,64,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2125811076,64,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2124855507,64,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2133806161,64,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2125933559,64,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2118651614,64,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2127737685,64,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2131373804,64,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2132696775,64,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2053156858,64,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2133234792,64,FLEN)
NAN_BOXED(4280718440,32,FLEN)
test_dataset_1:
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2115157329,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2117550540,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2132424160,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2108130121,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2131208423,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2128717083,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2128935265,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2129350157,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2125921510,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2131850687,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2133936645,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2133619456,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2127533858,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2131192342,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2132530476,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2133580020,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2134268631,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2125268007,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2134853648,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2132300163,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2129350407,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2129787392,32,FLEN)
NAN_BOXED(4277271040,32,FLEN)
NAN_BOXED(2117772990,32,FLEN)
NAN_BOXED(4265256638,32,FLEN)
NAN_BOXED(2108943123,32,FLEN)
NAN_BOXED(4256426771,32,FLEN)
NAN_BOXED(2132315991,32,FLEN)
NAN_BOXED(4279799639,32,FLEN)
NAN_BOXED(2132584386,32,FLEN)
NAN_BOXED(4280068034,32,FLEN)
NAN_BOXED(2111884927,32,FLEN)
NAN_BOXED(4259368575,32,FLEN)
NAN_BOXED(2097870212,32,FLEN)
NAN_BOXED(4245353860,32,FLEN)
NAN_BOXED(2133768474,32,FLEN)
NAN_BOXED(4281252122,32,FLEN)
NAN_BOXED(2130881616,32,FLEN)
NAN_BOXED(4278365264,32,FLEN)
NAN_BOXED(2129909511,32,FLEN)
NAN_BOXED(4277393159,32,FLEN)
NAN_BOXED(2128423545,32,FLEN)
NAN_BOXED(4275907193,32,FLEN)
NAN_BOXED(2123244092,32,FLEN)
NAN_BOXED(4270727740,32,FLEN)
NAN_BOXED(2095028153,32,FLEN)
NAN_BOXED(4242511801,32,FLEN)
NAN_BOXED(2134410395,32,FLEN)
NAN_BOXED(4281894043,32,FLEN)
NAN_BOXED(2109623695,32,FLEN)
NAN_BOXED(4257107343,32,FLEN)
NAN_BOXED(2132393547,32,FLEN)
NAN_BOXED(4279877195,32,FLEN)
NAN_BOXED(2089548260,32,FLEN)
NAN_BOXED(4237031908,32,FLEN)
NAN_BOXED(2107369346,32,FLEN)
NAN_BOXED(4254852994,32,FLEN)
NAN_BOXED(2116655308,32,FLEN)
NAN_BOXED(4264138956,32,FLEN)
NAN_BOXED(2122744651,32,FLEN)
NAN_BOXED(4270228299,32,FLEN)
NAN_BOXED(2126603643,32,FLEN)
NAN_BOXED(4274087291,32,FLEN)
NAN_BOXED(2107311064,32,FLEN)
NAN_BOXED(4254794712,32,FLEN)
NAN_BOXED(2115574513,32,FLEN)
NAN_BOXED(4263058161,32,FLEN)
NAN_BOXED(2131523460,32,FLEN)
NAN_BOXED(4279007108,32,FLEN)
NAN_BOXED(2133875002,32,FLEN)
NAN_BOXED(4281358650,32,FLEN)
NAN_BOXED(2130781600,32,FLEN)
NAN_BOXED(4278265248,32,FLEN)
NAN_BOXED(2100450590,32,FLEN)
NAN_BOXED(4247934238,32,FLEN)
NAN_BOXED(2132955726,32,FLEN)
NAN_BOXED(4280439374,32,FLEN)
NAN_BOXED(2118158114,32,FLEN)
NAN_BOXED(4265641762,32,FLEN)
NAN_BOXED(2125060412,32,FLEN)
NAN_BOXED(4272544060,32,FLEN)
NAN_BOXED(2125798057,32,FLEN)
NAN_BOXED(4273281705,32,FLEN)
NAN_BOXED(2128251406,32,FLEN)
NAN_BOXED(4275735054,32,FLEN)
NAN_BOXED(2121216197,32,FLEN)
NAN_BOXED(4268699845,32,FLEN)
NAN_BOXED(2132858040,32,FLEN)
NAN_BOXED(4280341688,32,FLEN)
NAN_BOXED(2128037181,32,FLEN)
NAN_BOXED(4275520829,32,FLEN)
NAN_BOXED(2131648988,32,FLEN)
NAN_BOXED(4279132636,32,FLEN)
NAN_BOXED(2097963310,32,FLEN)
NAN_BOXED(4245446958,32,FLEN)
NAN_BOXED(2117626766,32,FLEN)
NAN_BOXED(4265110414,32,FLEN)
NAN_BOXED(2122793262,32,FLEN)
NAN_BOXED(4270276910,32,FLEN)
NAN_BOXED(2122968809,32,FLEN)
NAN_BOXED(4270452457,32,FLEN)
NAN_BOXED(2129878002,32,FLEN)
NAN_BOXED(4277361650,32,FLEN)
NAN_BOXED(2131322398,32,FLEN)
NAN_BOXED(4278806046,32,FLEN)
NAN_BOXED(2124358385,32,FLEN)
NAN_BOXED(4271842033,32,FLEN)
NAN_BOXED(2056640076,32,FLEN)
NAN_BOXED(4204123724,32,FLEN)
NAN_BOXED(2122344709,32,FLEN)
NAN_BOXED(4269828357,32,FLEN)
NAN_BOXED(2129969896,32,FLEN)
NAN_BOXED(4277453544,32,FLEN)
NAN_BOXED(2133333199,32,FLEN)
NAN_BOXED(4280816847,32,FLEN)
NAN_BOXED(2124358094,32,FLEN)
NAN_BOXED(4271841742,32,FLEN)
NAN_BOXED(2131148884,32,FLEN)
NAN_BOXED(4278632532,32,FLEN)
NAN_BOXED(2130593920,32,FLEN)
NAN_BOXED(4278077568,32,FLEN)
NAN_BOXED(2125136870,32,FLEN)
NAN_BOXED(4272620518,32,FLEN)
NAN_BOXED(2113025249,32,FLEN)
NAN_BOXED(4260508897,32,FLEN)
NAN_BOXED(2126191655,32,FLEN)
NAN_BOXED(4273675303,32,FLEN)
NAN_BOXED(2131824021,32,FLEN)
NAN_BOXED(4279307669,32,FLEN)
NAN_BOXED(2126375795,32,FLEN)
NAN_BOXED(4273859443,32,FLEN)
NAN_BOXED(2125678943,32,FLEN)
NAN_BOXED(4273162591,32,FLEN)
NAN_BOXED(2133328077,32,FLEN)
NAN_BOXED(4280811725,32,FLEN)
NAN_BOXED(2115003022,32,FLEN)
NAN_BOXED(4262486670,32,FLEN)
NAN_BOXED(2129861415,32,FLEN)
NAN_BOXED(4277345063,32,FLEN)
NAN_BOXED(2131447410,32,FLEN)
NAN_BOXED(4278931058,32,FLEN)
NAN_BOXED(2124041267,32,FLEN)
NAN_BOXED(4271524915,32,FLEN)
NAN_BOXED(2121454323,32,FLEN)
NAN_BOXED(4268937971,32,FLEN)
NAN_BOXED(2131343850,32,FLEN)
NAN_BOXED(4278827498,32,FLEN)
NAN_BOXED(2132670180,32,FLEN)
NAN_BOXED(4280153828,32,FLEN)
NAN_BOXED(2106995293,32,FLEN)
NAN_BOXED(4254478941,32,FLEN)
NAN_BOXED(2130268514,32,FLEN)
NAN_BOXED(4277752162,32,FLEN)
NAN_BOXED(2119632600,32,FLEN)
NAN_BOXED(4267116248,32,FLEN)
NAN_BOXED(2107236517,32,FLEN)
NAN_BOXED(4254720165,32,FLEN)
NAN_BOXED(2123912401,32,FLEN)
NAN_BOXED(4271396049,32,FLEN)
NAN_BOXED(2119367407,32,FLEN)
NAN_BOXED(4266851055,32,FLEN)
NAN_BOXED(2132287787,32,FLEN)
NAN_BOXED(4279771435,32,FLEN)
NAN_BOXED(2110582552,32,FLEN)
NAN_BOXED(4258066200,32,FLEN)
NAN_BOXED(2130306711,32,FLEN)
NAN_BOXED(4277790359,32,FLEN)
NAN_BOXED(2133288409,32,FLEN)
NAN_BOXED(4280772057,32,FLEN)
NAN_BOXED(2086944199,32,FLEN)
NAN_BOXED(4234427847,32,FLEN)
NAN_BOXED(2130886746,32,FLEN)
NAN_BOXED(4278370394,32,FLEN)
NAN_BOXED(2134227581,32,FLEN)
NAN_BOXED(4281711229,32,FLEN)
NAN_BOXED(2133766400,32,FLEN)
NAN_BOXED(4281250048,32,FLEN)
NAN_BOXED(2131744121,32,FLEN)
NAN_BOXED(4279227769,32,FLEN)
NAN_BOXED(2130421936,32,FLEN)
NAN_BOXED(4277905584,32,FLEN)
NAN_BOXED(2133676545,32,FLEN)
NAN_BOXED(4281160193,32,FLEN)
NAN_BOXED(2123302208,32,FLEN)
NAN_BOXED(4270785856,32,FLEN)
NAN_BOXED(2116001743,32,FLEN)
NAN_BOXED(4263485391,32,FLEN)
NAN_BOXED(2077927321,32,FLEN)
NAN_BOXED(4225410969,32,FLEN)
NAN_BOXED(2122319712,32,FLEN)
NAN_BOXED(4269803360,32,FLEN)
NAN_BOXED(2131358638,32,FLEN)
NAN_BOXED(4278842286,32,FLEN)
NAN_BOXED(2129545568,32,FLEN)
NAN_BOXED(4277029216,32,FLEN)
NAN_BOXED(2113646741,32,FLEN)
NAN_BOXED(4261130389,32,FLEN)
NAN_BOXED(2120113172,32,FLEN)
NAN_BOXED(4267596820,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(4275215922,32,FLEN)
NAN_BOXED(2125960106,32,FLEN)
NAN_BOXED(4273443754,32,FLEN)
NAN_BOXED(2098478680,32,FLEN)
NAN_BOXED(4245962328,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(4274575853,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(4271558947,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(4271849674,32,FLEN)
NAN_BOXED(2133751381,32,FLEN)
NAN_BOXED(4281235029,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(4280381792,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(4270061139,32,FLEN)
NAN_BOXED(2131120769,32,FLEN)
NAN_BOXED(4278604417,32,FLEN)
NAN_BOXED(2120735888,32,FLEN)
NAN_BOXED(4268219536,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(4281055625,32,FLEN)
NAN_BOXED(2129701695,32,FLEN)
NAN_BOXED(4277185343,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(4282064280,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(4249501310,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(4279237014,32,FLEN)
NAN_BOXED(2076242496,32,FLEN)
NAN_BOXED(4223726144,32,FLEN)
NAN_BOXED(2126990371,32,FLEN)
NAN_BOXED(4274474019,32,FLEN)
NAN_BOXED(2126225710,32,FLEN)
NAN_BOXED(4273709358,32,FLEN)
NAN_BOXED(2130865428,32,FLEN)
NAN_BOXED(4278349076,32,FLEN)
NAN_BOXED(2123198580,32,FLEN)
NAN_BOXED(4270682228,32,FLEN)
NAN_BOXED(2118672966,32,FLEN)
NAN_BOXED(4266156614,32,FLEN)
NAN_BOXED(2124781247,32,FLEN)
NAN_BOXED(4272264895,32,FLEN)
NAN_BOXED(2101619694,32,FLEN)
NAN_BOXED(4249103342,32,FLEN)
NAN_BOXED(2131151080,32,FLEN)
NAN_BOXED(4278634728,32,FLEN)
NAN_BOXED(2125294398,32,FLEN)
NAN_BOXED(4272778046,32,FLEN)
NAN_BOXED(2109121900,32,FLEN)
NAN_BOXED(4256605548,32,FLEN)
NAN_BOXED(2115970934,32,FLEN)
NAN_BOXED(4263454582,32,FLEN)
NAN_BOXED(2134245937,32,FLEN)
NAN_BOXED(4281729585,32,FLEN)
NAN_BOXED(2111884524,32,FLEN)
NAN_BOXED(4259368172,32,FLEN)
NAN_BOXED(2123442701,32,FLEN)
NAN_BOXED(4270926349,32,FLEN)
NAN_BOXED(2112385815,32,FLEN)
NAN_BOXED(4259869463,32,FLEN)
NAN_BOXED(2134686690,32,FLEN)
NAN_BOXED(4282170338,32,FLEN)
NAN_BOXED(2124144196,32,FLEN)
NAN_BOXED(4271627844,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(4280844947,32,FLEN)
NAN_BOXED(2133856941,32,FLEN)
NAN_BOXED(4281340589,32,FLEN)
NAN_BOXED(2126472891,32,FLEN)
NAN_BOXED(4273956539,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(4278232880,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(4276758243,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(4269974788,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(4281113610,32,FLEN)
NAN_BOXED(2094656192,32,FLEN)
NAN_BOXED(4242139840,32,FLEN)
NAN_BOXED(2118469897,32,FLEN)
NAN_BOXED(4265953545,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(4280400477,32,FLEN)
NAN_BOXED(2131354011,32,FLEN)
NAN_BOXED(4278837659,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(4249606897,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(4280734704,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(4264353439,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(4231779044,32,FLEN)
NAN_BOXED(2122179966,32,FLEN)
NAN_BOXED(4269663614,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(4259616307,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(4281989258,32,FLEN)
NAN_BOXED(2133656165,32,FLEN)
NAN_BOXED(4281139813,32,FLEN)
NAN_BOXED(2128371189,32,FLEN)
NAN_BOXED(4275854837,32,FLEN)
NAN_BOXED(2132448451,32,FLEN)
NAN_BOXED(4279932099,32,FLEN)
NAN_BOXED(2134781607,32,FLEN)
NAN_BOXED(4282265255,32,FLEN)
NAN_BOXED(2133715182,32,FLEN)
NAN_BOXED(4281198830,32,FLEN)
NAN_BOXED(2127403407,32,FLEN)
NAN_BOXED(4274887055,32,FLEN)
NAN_BOXED(2132707491,32,FLEN)
NAN_BOXED(4280191139,32,FLEN)
NAN_BOXED(2132271412,32,FLEN)
NAN_BOXED(4279755060,32,FLEN)
NAN_BOXED(2128686164,32,FLEN)
NAN_BOXED(4276169812,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2126795865,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2128717083,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2128935265,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 104*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
