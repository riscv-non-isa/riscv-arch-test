
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:36:13 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fadd.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fadd_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fadd_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31,fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x31; op2:x31; dest:x31; op1val:0x3e1f4fe0; op2val:0x3e1f4fe0; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x31, x31, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x28, rd==x30,fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x29; op2:x28; dest:x30; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x30, x29, x28, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x29,fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x30; dest:x29; op1val:0x3e1f4fe0; op2val:0x3e1f4fe0; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x29, x30, x30, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2, rs1==x28, rs2==x29, rd==x28,fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x28; op2:x29; dest:x28; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x28, x28, x29, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x26; op2:x27; dest:x27; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x27, x26, x27, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26,fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x27; op2:x25; dest:x26; op1val:0x3f14556b; op2val:0xbf14556b; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x26, x27, x25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x24; op2:x26; dest:x25; op1val:0x3f14556b; op2val:0xbf14556b; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x25, x24, x26, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24,fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x25; op2:x23; dest:x24; op1val:0x3f14556b; op2val:0xbf14556b; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x24, x25, x23, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23,fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x22; op2:x24; dest:x23; op1val:0x3f14556b; op2val:0xbf14556b; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x23, x22, x24, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22,fs1 == 0 and fe1 == 0x7e and fm1 == 0x14556b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x14556b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x23; op2:x21; dest:x22; op1val:0x3f14556b; op2val:0xbf14556b; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x22, x23, x21, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x20; op2:x22; dest:x21; op1val:0x3efa3a33; op2val:0xbefa3a33; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x21, x20, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20,fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x21; op2:x19; dest:x20; op1val:0x3efa3a33; op2val:0xbefa3a33; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x20, x21, x19, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x18; op2:x20; dest:x19; op1val:0x3efa3a33; op2val:0xbefa3a33; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x19, x18, x20, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18,fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x19; op2:x17; dest:x18; op1val:0x3efa3a33; op2val:0xbefa3a33; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x18, x19, x17, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17,fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a3a33 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7a3a33 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x16; op2:x18; dest:x17; op1val:0x3efa3a33; op2val:0xbefa3a33; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x17, x16, x18, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16,fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x17; op2:x15; dest:x16; op1val:0x3e5d63e7; op2val:0xbe5d63e7; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x16, x17, x15, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x14; op2:x16; dest:x15; op1val:0x3e5d63e7; op2val:0xbe5d63e7; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x15, x14, x16, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14,fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x15; op2:x13; dest:x14; op1val:0x3e5d63e7; op2val:0xbe5d63e7; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x14, x15, x13, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x12; op2:x14; dest:x13; op1val:0x3e5d63e7; op2val:0xbe5d63e7; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x13, x12, x14, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12,fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d63e7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5d63e7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x13; op2:x11; dest:x12; op1val:0x3e5d63e7; op2val:0xbe5d63e7; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x12, x13, x11, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11,fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x10; op2:x12; dest:x11; op1val:0x3f05fdbd; op2val:0xbf05fdbd; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x11, x10, x12, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10,fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x11; op2:x9; dest:x10; op1val:0x3f05fdbd; op2val:0xbf05fdbd; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x10, x11, x9, dyn, 32, 0, x3, 42*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x11,test_dataset_1)

inst_22:
// rs1==x8, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x8; op2:x10; dest:x9; op1val:0x3f05fdbd; op2val:0xbf05fdbd; 
   valaddr_reg:x11; val_offset:0*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x9, x8, x10, dyn, 64, 0, x11, 0*FLEN/8, x12, x1, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8,fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x9; op2:x7; dest:x8; op1val:0x3f05fdbd; op2val:0xbf05fdbd; 
   valaddr_reg:x11; val_offset:2*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x8, x9, x7, dyn, 96, 0, x11, 2*FLEN/8, x12, x1, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 0 and fe1 == 0x7e and fm1 == 0x05fdbd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05fdbd and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x6; op2:x8; dest:x7; op1val:0x3f05fdbd; op2val:0xbf05fdbd; 
   valaddr_reg:x11; val_offset:4*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x7, x6, x8, dyn, 128, 0, x11, 4*FLEN/8, x12, x1, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x7, rs2==x5, rd==x6,fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x7; op2:x5; dest:x6; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; 
   valaddr_reg:x11; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x6, x7, x5, dyn, 0, 0, x11, 6*FLEN/8, x12, x8, x9)

inst_26:
// rs1==x4, rs2==x6, rd==x5,fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x4; op2:x6; dest:x5; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; 
   valaddr_reg:x11; val_offset:8*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x5, x4, x6, dyn, 32, 0, x11, 8*FLEN/8, x12, x8, x9)

inst_27:
// rs1==x5, rs2==x3, rd==x4,fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x5; op2:x3; dest:x4; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; 
   valaddr_reg:x11; val_offset:10*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x4, x5, x3, dyn, 64, 0, x11, 10*FLEN/8, x12, x8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x2; op2:x4; dest:x3; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; 
   valaddr_reg:x11; val_offset:12*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x3, x2, x4, dyn, 96, 0, x11, 12*FLEN/8, x12, x8, x9)

inst_29:
// rs1==x3, rs2==x1, rd==x2,fs1 == 0 and fe1 == 0x7b and fm1 == 0x3c2f4f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3c2f4f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x3; op2:x1; dest:x2; op1val:0x3dbc2f4f; op2val:0xbdbc2f4f; 
   valaddr_reg:x11; val_offset:14*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x2, x3, x1, dyn, 128, 0, x11, 14*FLEN/8, x12, x8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0xbf37d979; 
   valaddr_reg:x11; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x1, x0, x2, dyn, 0, 0, x11, 16*FLEN/8, x12, x8, x9)

inst_31:
// rs1==x1,fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x1; op2:x30; dest:x31; op1val:0x3f37d979; op2val:0xbf37d979; 
   valaddr_reg:x11; val_offset:18*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x1, x30, dyn, 32, 0, x11, 18*FLEN/8, x12, x8, x9)

inst_32:
// rs2==x0,fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x0; dest:x31; op1val:0x3f37d979; op2val:0x0; 
   valaddr_reg:x11; val_offset:20*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x0, dyn, 64, 0, x11, 20*FLEN/8, x12, x8, x9)

inst_33:
// rd==x0,fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x31; op2:x30; dest:x0; op1val:0x3f37d979; op2val:0xbf37d979; 
   valaddr_reg:x11; val_offset:22*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x0, x31, x30, dyn, 96, 0, x11, 22*FLEN/8, x12, x8, x9)

inst_34:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37d979; op2val:0xbf37d979; 
   valaddr_reg:x11; val_offset:24*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 24*FLEN/8, x12, x8, x9)

inst_35:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec36523; op2val:0xbec36523; 
   valaddr_reg:x11; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 26*FLEN/8, x12, x8, x9)

inst_36:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec36523; op2val:0xbec36523; 
   valaddr_reg:x11; val_offset:28*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 28*FLEN/8, x12, x8, x9)

inst_37:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec36523; op2val:0xbec36523; 
   valaddr_reg:x11; val_offset:30*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 30*FLEN/8, x12, x8, x9)

inst_38:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec36523; op2val:0xbec36523; 
   valaddr_reg:x11; val_offset:32*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 32*FLEN/8, x12, x8, x9)

inst_39:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x436523 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x436523 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec36523; op2val:0xbec36523; 
   valaddr_reg:x11; val_offset:34*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 34*FLEN/8, x12, x8, x9)

inst_40:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; 
   valaddr_reg:x11; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 36*FLEN/8, x12, x8, x9)

inst_41:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; 
   valaddr_reg:x11; val_offset:38*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 38*FLEN/8, x12, x8, x9)

inst_42:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; 
   valaddr_reg:x11; val_offset:40*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 40*FLEN/8, x12, x8, x9)

inst_43:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; 
   valaddr_reg:x11; val_offset:42*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 42*FLEN/8, x12, x8, x9)

inst_44:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x38d6f4 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x38d6f4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db8d6f4; op2val:0xbdb8d6f4; 
   valaddr_reg:x11; val_offset:44*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 44*FLEN/8, x12, x8, x9)

inst_45:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e425669; op2val:0xbe425669; 
   valaddr_reg:x11; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 46*FLEN/8, x12, x8, x9)

inst_46:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e425669; op2val:0xbe425669; 
   valaddr_reg:x11; val_offset:48*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 48*FLEN/8, x12, x8, x9)

inst_47:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e425669; op2val:0xbe425669; 
   valaddr_reg:x11; val_offset:50*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 50*FLEN/8, x12, x8, x9)

inst_48:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e425669; op2val:0xbe425669; 
   valaddr_reg:x11; val_offset:52*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 52*FLEN/8, x12, x8, x9)

inst_49:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x425669 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x425669 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e425669; op2val:0xbe425669; 
   valaddr_reg:x11; val_offset:54*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 54*FLEN/8, x12, x8, x9)

inst_50:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f309a2b; op2val:0xbf309a2b; 
   valaddr_reg:x11; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 56*FLEN/8, x12, x8, x9)

inst_51:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f309a2b; op2val:0xbf309a2b; 
   valaddr_reg:x11; val_offset:58*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 58*FLEN/8, x12, x8, x9)

inst_52:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f309a2b; op2val:0xbf309a2b; 
   valaddr_reg:x11; val_offset:60*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 60*FLEN/8, x12, x8, x9)

inst_53:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f309a2b; op2val:0xbf309a2b; 
   valaddr_reg:x11; val_offset:62*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 62*FLEN/8, x12, x8, x9)

inst_54:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x309a2b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x309a2b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f309a2b; op2val:0xbf309a2b; 
   valaddr_reg:x11; val_offset:64*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 64*FLEN/8, x12, x8, x9)

inst_55:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; 
   valaddr_reg:x11; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 66*FLEN/8, x12, x8, x9)

inst_56:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; 
   valaddr_reg:x11; val_offset:68*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 68*FLEN/8, x12, x8, x9)

inst_57:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; 
   valaddr_reg:x11; val_offset:70*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 70*FLEN/8, x12, x8, x9)

inst_58:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; 
   valaddr_reg:x11; val_offset:72*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 72*FLEN/8, x12, x8, x9)

inst_59:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4f2ddf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4f2ddf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcf2ddf; op2val:0xbdcf2ddf; 
   valaddr_reg:x11; val_offset:74*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 74*FLEN/8, x12, x8, x9)

inst_60:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0721a7; op2val:0xbf0721a7; 
   valaddr_reg:x11; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 76*FLEN/8, x12, x8, x9)

inst_61:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0721a7; op2val:0xbf0721a7; 
   valaddr_reg:x11; val_offset:78*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 78*FLEN/8, x12, x8, x9)

inst_62:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0721a7; op2val:0xbf0721a7; 
   valaddr_reg:x11; val_offset:80*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 80*FLEN/8, x12, x8, x9)

inst_63:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0721a7; op2val:0xbf0721a7; 
   valaddr_reg:x11; val_offset:82*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 82*FLEN/8, x12, x8, x9)

inst_64:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0721a7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0721a7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0721a7; op2val:0xbf0721a7; 
   valaddr_reg:x11; val_offset:84*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 84*FLEN/8, x12, x8, x9)

inst_65:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f10da1d; op2val:0xbf10da1d; 
   valaddr_reg:x11; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 86*FLEN/8, x12, x8, x9)

inst_66:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f10da1d; op2val:0xbf10da1d; 
   valaddr_reg:x11; val_offset:88*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 88*FLEN/8, x12, x8, x9)

inst_67:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f10da1d; op2val:0xbf10da1d; 
   valaddr_reg:x11; val_offset:90*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 90*FLEN/8, x12, x8, x9)

inst_68:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f10da1d; op2val:0xbf10da1d; 
   valaddr_reg:x11; val_offset:92*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 92*FLEN/8, x12, x8, x9)

inst_69:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x10da1d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x10da1d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f10da1d; op2val:0xbf10da1d; 
   valaddr_reg:x11; val_offset:94*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 94*FLEN/8, x12, x8, x9)

inst_70:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db22742; op2val:0xbdb22742; 
   valaddr_reg:x11; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 96*FLEN/8, x12, x8, x9)

inst_71:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db22742; op2val:0xbdb22742; 
   valaddr_reg:x11; val_offset:98*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 98*FLEN/8, x12, x8, x9)

inst_72:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db22742; op2val:0xbdb22742; 
   valaddr_reg:x11; val_offset:100*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 100*FLEN/8, x12, x8, x9)

inst_73:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db22742; op2val:0xbdb22742; 
   valaddr_reg:x11; val_offset:102*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 102*FLEN/8, x12, x8, x9)

inst_74:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x322742 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x322742 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db22742; op2val:0xbdb22742; 
   valaddr_reg:x11; val_offset:104*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 104*FLEN/8, x12, x8, x9)

inst_75:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05e2af; op2val:0xbf05e2af; 
   valaddr_reg:x11; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 106*FLEN/8, x12, x8, x9)

inst_76:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05e2af; op2val:0xbf05e2af; 
   valaddr_reg:x11; val_offset:108*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 108*FLEN/8, x12, x8, x9)

inst_77:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05e2af; op2val:0xbf05e2af; 
   valaddr_reg:x11; val_offset:110*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 110*FLEN/8, x12, x8, x9)

inst_78:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05e2af; op2val:0xbf05e2af; 
   valaddr_reg:x11; val_offset:112*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 112*FLEN/8, x12, x8, x9)

inst_79:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05e2af and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05e2af and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05e2af; op2val:0xbf05e2af; 
   valaddr_reg:x11; val_offset:114*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 114*FLEN/8, x12, x8, x9)

inst_80:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d5060; op2val:0xbf3d5060; 
   valaddr_reg:x11; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 116*FLEN/8, x12, x8, x9)

inst_81:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d5060; op2val:0xbf3d5060; 
   valaddr_reg:x11; val_offset:118*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 118*FLEN/8, x12, x8, x9)

inst_82:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d5060; op2val:0xbf3d5060; 
   valaddr_reg:x11; val_offset:120*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 120*FLEN/8, x12, x8, x9)

inst_83:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d5060; op2val:0xbf3d5060; 
   valaddr_reg:x11; val_offset:122*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 122*FLEN/8, x12, x8, x9)

inst_84:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d5060 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d5060 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d5060; op2val:0xbf3d5060; 
   valaddr_reg:x11; val_offset:124*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 124*FLEN/8, x12, x8, x9)

inst_85:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee710e2; op2val:0xbee710e2; 
   valaddr_reg:x11; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 126*FLEN/8, x12, x8, x9)

inst_86:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee710e2; op2val:0xbee710e2; 
   valaddr_reg:x11; val_offset:128*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 128*FLEN/8, x12, x8, x9)

inst_87:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee710e2; op2val:0xbee710e2; 
   valaddr_reg:x11; val_offset:130*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 130*FLEN/8, x12, x8, x9)

inst_88:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee710e2; op2val:0xbee710e2; 
   valaddr_reg:x11; val_offset:132*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 132*FLEN/8, x12, x8, x9)

inst_89:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6710e2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6710e2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee710e2; op2val:0xbee710e2; 
   valaddr_reg:x11; val_offset:134*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 134*FLEN/8, x12, x8, x9)

inst_90:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8f82de; op2val:0xbe8f82de; 
   valaddr_reg:x11; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 136*FLEN/8, x12, x8, x9)

inst_91:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8f82de; op2val:0xbe8f82de; 
   valaddr_reg:x11; val_offset:138*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 138*FLEN/8, x12, x8, x9)

inst_92:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8f82de; op2val:0xbe8f82de; 
   valaddr_reg:x11; val_offset:140*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 140*FLEN/8, x12, x8, x9)

inst_93:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8f82de; op2val:0xbe8f82de; 
   valaddr_reg:x11; val_offset:142*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 142*FLEN/8, x12, x8, x9)

inst_94:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0f82de and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0f82de and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8f82de; op2val:0xbe8f82de; 
   valaddr_reg:x11; val_offset:144*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 144*FLEN/8, x12, x8, x9)

inst_95:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e335bd6; op2val:0xbe335bd6; 
   valaddr_reg:x11; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 146*FLEN/8, x12, x8, x9)

inst_96:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e335bd6; op2val:0xbe335bd6; 
   valaddr_reg:x11; val_offset:148*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 148*FLEN/8, x12, x8, x9)

inst_97:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e335bd6; op2val:0xbe335bd6; 
   valaddr_reg:x11; val_offset:150*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 150*FLEN/8, x12, x8, x9)

inst_98:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e335bd6; op2val:0xbe335bd6; 
   valaddr_reg:x11; val_offset:152*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 152*FLEN/8, x12, x8, x9)

inst_99:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x335bd6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x335bd6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e335bd6; op2val:0xbe335bd6; 
   valaddr_reg:x11; val_offset:154*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 154*FLEN/8, x12, x8, x9)

inst_100:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7fb51a; op2val:0xbf7fb51a; 
   valaddr_reg:x11; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 156*FLEN/8, x12, x8, x9)

inst_101:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7fb51a; op2val:0xbf7fb51a; 
   valaddr_reg:x11; val_offset:158*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 158*FLEN/8, x12, x8, x9)

inst_102:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7fb51a; op2val:0xbf7fb51a; 
   valaddr_reg:x11; val_offset:160*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 160*FLEN/8, x12, x8, x9)

inst_103:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7fb51a; op2val:0xbf7fb51a; 
   valaddr_reg:x11; val_offset:162*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 162*FLEN/8, x12, x8, x9)

inst_104:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7fb51a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fb51a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7fb51a; op2val:0xbf7fb51a; 
   valaddr_reg:x11; val_offset:164*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 164*FLEN/8, x12, x8, x9)

inst_105:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e079323; op2val:0xbe079323; 
   valaddr_reg:x11; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 166*FLEN/8, x12, x8, x9)

inst_106:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e079323; op2val:0xbe079323; 
   valaddr_reg:x11; val_offset:168*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 168*FLEN/8, x12, x8, x9)

inst_107:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e079323; op2val:0xbe079323; 
   valaddr_reg:x11; val_offset:170*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 170*FLEN/8, x12, x8, x9)

inst_108:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e079323; op2val:0xbe079323; 
   valaddr_reg:x11; val_offset:172*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 172*FLEN/8, x12, x8, x9)

inst_109:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x079323 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x079323 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e079323; op2val:0xbe079323; 
   valaddr_reg:x11; val_offset:174*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 174*FLEN/8, x12, x8, x9)

inst_110:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cbf68; op2val:0xbf2cbf68; 
   valaddr_reg:x11; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 176*FLEN/8, x12, x8, x9)

inst_111:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cbf68; op2val:0xbf2cbf68; 
   valaddr_reg:x11; val_offset:178*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 178*FLEN/8, x12, x8, x9)

inst_112:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cbf68; op2val:0xbf2cbf68; 
   valaddr_reg:x11; val_offset:180*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 180*FLEN/8, x12, x8, x9)

inst_113:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cbf68; op2val:0xbf2cbf68; 
   valaddr_reg:x11; val_offset:182*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 182*FLEN/8, x12, x8, x9)

inst_114:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cbf68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2cbf68 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cbf68; op2val:0xbf2cbf68; 
   valaddr_reg:x11; val_offset:184*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 184*FLEN/8, x12, x8, x9)

inst_115:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f163a; op2val:0xbf4f163a; 
   valaddr_reg:x11; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 186*FLEN/8, x12, x8, x9)

inst_116:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f163a; op2val:0xbf4f163a; 
   valaddr_reg:x11; val_offset:188*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 188*FLEN/8, x12, x8, x9)

inst_117:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f163a; op2val:0xbf4f163a; 
   valaddr_reg:x11; val_offset:190*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 190*FLEN/8, x12, x8, x9)

inst_118:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f163a; op2val:0xbf4f163a; 
   valaddr_reg:x11; val_offset:192*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 192*FLEN/8, x12, x8, x9)

inst_119:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f163a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f163a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f163a; op2val:0xbf4f163a; 
   valaddr_reg:x11; val_offset:194*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 194*FLEN/8, x12, x8, x9)

inst_120:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42ea11; op2val:0xbf42ea11; 
   valaddr_reg:x11; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 196*FLEN/8, x12, x8, x9)

inst_121:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42ea11; op2val:0xbf42ea11; 
   valaddr_reg:x11; val_offset:198*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 198*FLEN/8, x12, x8, x9)

inst_122:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42ea11; op2val:0xbf42ea11; 
   valaddr_reg:x11; val_offset:200*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 200*FLEN/8, x12, x8, x9)

inst_123:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42ea11; op2val:0xbf42ea11; 
   valaddr_reg:x11; val_offset:202*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 202*FLEN/8, x12, x8, x9)

inst_124:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42ea11 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x42ea11 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42ea11; op2val:0xbf42ea11; 
   valaddr_reg:x11; val_offset:204*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 204*FLEN/8, x12, x8, x9)

inst_125:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e498b52; op2val:0xbe498b52; 
   valaddr_reg:x11; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 206*FLEN/8, x12, x8, x9)

inst_126:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e498b52; op2val:0xbe498b52; 
   valaddr_reg:x11; val_offset:208*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 208*FLEN/8, x12, x8, x9)

inst_127:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e498b52; op2val:0xbe498b52; 
   valaddr_reg:x11; val_offset:210*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 210*FLEN/8, x12, x8, x9)

inst_128:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e498b52; op2val:0xbe498b52; 
   valaddr_reg:x11; val_offset:212*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 212*FLEN/8, x12, x8, x9)

inst_129:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x498b52 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x498b52 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e498b52; op2val:0xbe498b52; 
   valaddr_reg:x11; val_offset:214*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 214*FLEN/8, x12, x8, x9)

inst_130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b67e7; op2val:0xbf6b67e7; 
   valaddr_reg:x11; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 216*FLEN/8, x12, x8, x9)

inst_131:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b67e7; op2val:0xbf6b67e7; 
   valaddr_reg:x11; val_offset:218*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 218*FLEN/8, x12, x8, x9)

inst_132:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b67e7; op2val:0xbf6b67e7; 
   valaddr_reg:x11; val_offset:220*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 220*FLEN/8, x12, x8, x9)

inst_133:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b67e7; op2val:0xbf6b67e7; 
   valaddr_reg:x11; val_offset:222*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 222*FLEN/8, x12, x8, x9)

inst_134:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b67e7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b67e7; op2val:0xbf6b67e7; 
   valaddr_reg:x11; val_offset:224*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 224*FLEN/8, x12, x8, x9)

inst_135:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbef34; op2val:0xbefbef34; 
   valaddr_reg:x11; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 226*FLEN/8, x12, x8, x9)

inst_136:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbef34; op2val:0xbefbef34; 
   valaddr_reg:x11; val_offset:228*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 228*FLEN/8, x12, x8, x9)

inst_137:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbef34; op2val:0xbefbef34; 
   valaddr_reg:x11; val_offset:230*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 230*FLEN/8, x12, x8, x9)

inst_138:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbef34; op2val:0xbefbef34; 
   valaddr_reg:x11; val_offset:232*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 232*FLEN/8, x12, x8, x9)

inst_139:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7bef34 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7bef34 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbef34; op2val:0xbefbef34; 
   valaddr_reg:x11; val_offset:234*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 234*FLEN/8, x12, x8, x9)

inst_140:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6414c8; op2val:0xbf6414c8; 
   valaddr_reg:x11; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 236*FLEN/8, x12, x8, x9)

inst_141:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6414c8; op2val:0xbf6414c8; 
   valaddr_reg:x11; val_offset:238*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 238*FLEN/8, x12, x8, x9)

inst_142:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6414c8; op2val:0xbf6414c8; 
   valaddr_reg:x11; val_offset:240*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 240*FLEN/8, x12, x8, x9)

inst_143:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6414c8; op2val:0xbf6414c8; 
   valaddr_reg:x11; val_offset:242*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 242*FLEN/8, x12, x8, x9)

inst_144:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6414c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6414c8 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6414c8; op2val:0xbf6414c8; 
   valaddr_reg:x11; val_offset:244*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 244*FLEN/8, x12, x8, x9)

inst_145:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e963d95; op2val:0xbe963d95; 
   valaddr_reg:x11; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 246*FLEN/8, x12, x8, x9)

inst_146:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e963d95; op2val:0xbe963d95; 
   valaddr_reg:x11; val_offset:248*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 248*FLEN/8, x12, x8, x9)

inst_147:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e963d95; op2val:0xbe963d95; 
   valaddr_reg:x11; val_offset:250*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 250*FLEN/8, x12, x8, x9)

inst_148:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e963d95; op2val:0xbe963d95; 
   valaddr_reg:x11; val_offset:252*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 252*FLEN/8, x12, x8, x9)

inst_149:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x163d95 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x163d95 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e963d95; op2val:0xbe963d95; 
   valaddr_reg:x11; val_offset:254*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 254*FLEN/8, x12, x8, x9)

inst_150:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3dfc66; op2val:0xbe3dfc66; 
   valaddr_reg:x11; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 256*FLEN/8, x12, x8, x9)

inst_151:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3dfc66; op2val:0xbe3dfc66; 
   valaddr_reg:x11; val_offset:258*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 258*FLEN/8, x12, x8, x9)

inst_152:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3dfc66; op2val:0xbe3dfc66; 
   valaddr_reg:x11; val_offset:260*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 260*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_153:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3dfc66; op2val:0xbe3dfc66; 
   valaddr_reg:x11; val_offset:262*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 262*FLEN/8, x12, x8, x9)

inst_154:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3dfc66 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3dfc66 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3dfc66; op2val:0xbe3dfc66; 
   valaddr_reg:x11; val_offset:264*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 264*FLEN/8, x12, x8, x9)

inst_155:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d141e08; op2val:0xbd141e08; 
   valaddr_reg:x11; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 266*FLEN/8, x12, x8, x9)

inst_156:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d141e08; op2val:0xbd141e08; 
   valaddr_reg:x11; val_offset:268*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 268*FLEN/8, x12, x8, x9)

inst_157:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d141e08; op2val:0xbd141e08; 
   valaddr_reg:x11; val_offset:270*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 270*FLEN/8, x12, x8, x9)

inst_158:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d141e08; op2val:0xbd141e08; 
   valaddr_reg:x11; val_offset:272*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 272*FLEN/8, x12, x8, x9)

inst_159:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x141e08 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x141e08 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d141e08; op2val:0xbd141e08; 
   valaddr_reg:x11; val_offset:274*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 274*FLEN/8, x12, x8, x9)

inst_160:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed323db; op2val:0xbed323db; 
   valaddr_reg:x11; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 276*FLEN/8, x12, x8, x9)

inst_161:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed323db; op2val:0xbed323db; 
   valaddr_reg:x11; val_offset:278*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 278*FLEN/8, x12, x8, x9)

inst_162:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed323db; op2val:0xbed323db; 
   valaddr_reg:x11; val_offset:280*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 280*FLEN/8, x12, x8, x9)

inst_163:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed323db; op2val:0xbed323db; 
   valaddr_reg:x11; val_offset:282*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 282*FLEN/8, x12, x8, x9)

inst_164:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5323db and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5323db and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed323db; op2val:0xbed323db; 
   valaddr_reg:x11; val_offset:284*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 284*FLEN/8, x12, x8, x9)

inst_165:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eceb37d; op2val:0xbeceb37d; 
   valaddr_reg:x11; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 286*FLEN/8, x12, x8, x9)

inst_166:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eceb37d; op2val:0xbeceb37d; 
   valaddr_reg:x11; val_offset:288*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 288*FLEN/8, x12, x8, x9)

inst_167:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eceb37d; op2val:0xbeceb37d; 
   valaddr_reg:x11; val_offset:290*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 290*FLEN/8, x12, x8, x9)

inst_168:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eceb37d; op2val:0xbeceb37d; 
   valaddr_reg:x11; val_offset:292*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 292*FLEN/8, x12, x8, x9)

inst_169:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4eb37d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4eb37d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eceb37d; op2val:0xbeceb37d; 
   valaddr_reg:x11; val_offset:294*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 294*FLEN/8, x12, x8, x9)

inst_170:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed94445; op2val:0xbed94445; 
   valaddr_reg:x11; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 296*FLEN/8, x12, x8, x9)

inst_171:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed94445; op2val:0xbed94445; 
   valaddr_reg:x11; val_offset:298*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 298*FLEN/8, x12, x8, x9)

inst_172:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed94445; op2val:0xbed94445; 
   valaddr_reg:x11; val_offset:300*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 300*FLEN/8, x12, x8, x9)

inst_173:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed94445; op2val:0xbed94445; 
   valaddr_reg:x11; val_offset:302*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 302*FLEN/8, x12, x8, x9)

inst_174:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x594445 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x594445 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed94445; op2val:0xbed94445; 
   valaddr_reg:x11; val_offset:304*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 304*FLEN/8, x12, x8, x9)

inst_175:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f840c; op2val:0xbf4f840c; 
   valaddr_reg:x11; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 306*FLEN/8, x12, x8, x9)

inst_176:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f840c; op2val:0xbf4f840c; 
   valaddr_reg:x11; val_offset:308*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 308*FLEN/8, x12, x8, x9)

inst_177:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f840c; op2val:0xbf4f840c; 
   valaddr_reg:x11; val_offset:310*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 310*FLEN/8, x12, x8, x9)

inst_178:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f840c; op2val:0xbf4f840c; 
   valaddr_reg:x11; val_offset:312*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 312*FLEN/8, x12, x8, x9)

inst_179:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4f840c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4f840c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4f840c; op2val:0xbf4f840c; 
   valaddr_reg:x11; val_offset:314*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 314*FLEN/8, x12, x8, x9)

inst_180:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec64298; op2val:0xbec64298; 
   valaddr_reg:x11; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 316*FLEN/8, x12, x8, x9)

inst_181:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec64298; op2val:0xbec64298; 
   valaddr_reg:x11; val_offset:318*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 318*FLEN/8, x12, x8, x9)

inst_182:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec64298; op2val:0xbec64298; 
   valaddr_reg:x11; val_offset:320*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 320*FLEN/8, x12, x8, x9)

inst_183:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec64298; op2val:0xbec64298; 
   valaddr_reg:x11; val_offset:322*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 322*FLEN/8, x12, x8, x9)

inst_184:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x464298 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x464298 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec64298; op2val:0xbec64298; 
   valaddr_reg:x11; val_offset:324*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 324*FLEN/8, x12, x8, x9)

inst_185:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f060210; op2val:0xbf060210; 
   valaddr_reg:x11; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 326*FLEN/8, x12, x8, x9)

inst_186:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f060210; op2val:0xbf060210; 
   valaddr_reg:x11; val_offset:328*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 328*FLEN/8, x12, x8, x9)

inst_187:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f060210; op2val:0xbf060210; 
   valaddr_reg:x11; val_offset:330*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 330*FLEN/8, x12, x8, x9)

inst_188:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f060210; op2val:0xbf060210; 
   valaddr_reg:x11; val_offset:332*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 332*FLEN/8, x12, x8, x9)

inst_189:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x060210 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x060210 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f060210; op2val:0xbf060210; 
   valaddr_reg:x11; val_offset:334*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 334*FLEN/8, x12, x8, x9)

inst_190:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7836ad; op2val:0xbe7836ad; 
   valaddr_reg:x11; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 336*FLEN/8, x12, x8, x9)

inst_191:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7836ad; op2val:0xbe7836ad; 
   valaddr_reg:x11; val_offset:338*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 338*FLEN/8, x12, x8, x9)

inst_192:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7836ad; op2val:0xbe7836ad; 
   valaddr_reg:x11; val_offset:340*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 340*FLEN/8, x12, x8, x9)

inst_193:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7836ad; op2val:0xbe7836ad; 
   valaddr_reg:x11; val_offset:342*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 342*FLEN/8, x12, x8, x9)

inst_194:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7836ad and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7836ad and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7836ad; op2val:0xbe7836ad; 
   valaddr_reg:x11; val_offset:344*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 344*FLEN/8, x12, x8, x9)

inst_195:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9cea69; op2val:0xbd9cea69; 
   valaddr_reg:x11; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 346*FLEN/8, x12, x8, x9)

inst_196:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9cea69; op2val:0xbd9cea69; 
   valaddr_reg:x11; val_offset:348*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 348*FLEN/8, x12, x8, x9)

inst_197:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9cea69; op2val:0xbd9cea69; 
   valaddr_reg:x11; val_offset:350*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 350*FLEN/8, x12, x8, x9)

inst_198:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9cea69; op2val:0xbd9cea69; 
   valaddr_reg:x11; val_offset:352*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 352*FLEN/8, x12, x8, x9)

inst_199:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1cea69 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1cea69 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9cea69; op2val:0xbd9cea69; 
   valaddr_reg:x11; val_offset:354*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 354*FLEN/8, x12, x8, x9)

inst_200:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd08a9c; op2val:0xbdd08a9c; 
   valaddr_reg:x11; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 356*FLEN/8, x12, x8, x9)

inst_201:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd08a9c; op2val:0xbdd08a9c; 
   valaddr_reg:x11; val_offset:358*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 358*FLEN/8, x12, x8, x9)

inst_202:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd08a9c; op2val:0xbdd08a9c; 
   valaddr_reg:x11; val_offset:360*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 360*FLEN/8, x12, x8, x9)

inst_203:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd08a9c; op2val:0xbdd08a9c; 
   valaddr_reg:x11; val_offset:362*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 362*FLEN/8, x12, x8, x9)

inst_204:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x508a9c and fs2 == 1 and fe2 == 0x7b and fm2 == 0x508a9c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd08a9c; op2val:0xbdd08a9c; 
   valaddr_reg:x11; val_offset:364*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 364*FLEN/8, x12, x8, x9)

inst_205:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eeb367c; op2val:0xbeeb367c; 
   valaddr_reg:x11; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 366*FLEN/8, x12, x8, x9)

inst_206:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eeb367c; op2val:0xbeeb367c; 
   valaddr_reg:x11; val_offset:368*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 368*FLEN/8, x12, x8, x9)

inst_207:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eeb367c; op2val:0xbeeb367c; 
   valaddr_reg:x11; val_offset:370*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 370*FLEN/8, x12, x8, x9)

inst_208:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eeb367c; op2val:0xbeeb367c; 
   valaddr_reg:x11; val_offset:372*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 372*FLEN/8, x12, x8, x9)

inst_209:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6b367c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b367c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eeb367c; op2val:0xbeeb367c; 
   valaddr_reg:x11; val_offset:374*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 374*FLEN/8, x12, x8, x9)

inst_210:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e96e518; op2val:0xbe96e518; 
   valaddr_reg:x11; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 376*FLEN/8, x12, x8, x9)

inst_211:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e96e518; op2val:0xbe96e518; 
   valaddr_reg:x11; val_offset:378*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 378*FLEN/8, x12, x8, x9)

inst_212:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e96e518; op2val:0xbe96e518; 
   valaddr_reg:x11; val_offset:380*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 380*FLEN/8, x12, x8, x9)

inst_213:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e96e518; op2val:0xbe96e518; 
   valaddr_reg:x11; val_offset:382*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 382*FLEN/8, x12, x8, x9)

inst_214:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x16e518 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x16e518 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e96e518; op2val:0xbe96e518; 
   valaddr_reg:x11; val_offset:384*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 384*FLEN/8, x12, x8, x9)

inst_215:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e40e467; op2val:0xbe40e467; 
   valaddr_reg:x11; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 386*FLEN/8, x12, x8, x9)

inst_216:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e40e467; op2val:0xbe40e467; 
   valaddr_reg:x11; val_offset:388*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 388*FLEN/8, x12, x8, x9)

inst_217:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e40e467; op2val:0xbe40e467; 
   valaddr_reg:x11; val_offset:390*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 390*FLEN/8, x12, x8, x9)

inst_218:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e40e467; op2val:0xbe40e467; 
   valaddr_reg:x11; val_offset:392*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 392*FLEN/8, x12, x8, x9)

inst_219:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x40e467 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x40e467 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e40e467; op2val:0xbe40e467; 
   valaddr_reg:x11; val_offset:394*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 394*FLEN/8, x12, x8, x9)

inst_220:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; 
   valaddr_reg:x11; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 396*FLEN/8, x12, x8, x9)

inst_221:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; 
   valaddr_reg:x11; val_offset:398*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 398*FLEN/8, x12, x8, x9)

inst_222:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; 
   valaddr_reg:x11; val_offset:400*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 400*FLEN/8, x12, x8, x9)

inst_223:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; 
   valaddr_reg:x11; val_offset:402*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 402*FLEN/8, x12, x8, x9)

inst_224:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x56f5cf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x56f5cf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd6f5cf; op2val:0xbdd6f5cf; 
   valaddr_reg:x11; val_offset:404*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 404*FLEN/8, x12, x8, x9)

inst_225:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4dc359; op2val:0xbd4dc359; 
   valaddr_reg:x11; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 406*FLEN/8, x12, x8, x9)

inst_226:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4dc359; op2val:0xbd4dc359; 
   valaddr_reg:x11; val_offset:408*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 408*FLEN/8, x12, x8, x9)

inst_227:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4dc359; op2val:0xbd4dc359; 
   valaddr_reg:x11; val_offset:410*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 410*FLEN/8, x12, x8, x9)

inst_228:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4dc359; op2val:0xbd4dc359; 
   valaddr_reg:x11; val_offset:412*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 412*FLEN/8, x12, x8, x9)

inst_229:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4dc359 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x4dc359 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4dc359; op2val:0xbd4dc359; 
   valaddr_reg:x11; val_offset:414*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 414*FLEN/8, x12, x8, x9)

inst_230:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; 
   valaddr_reg:x11; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 416*FLEN/8, x12, x8, x9)

inst_231:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; 
   valaddr_reg:x11; val_offset:418*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 418*FLEN/8, x12, x8, x9)

inst_232:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; 
   valaddr_reg:x11; val_offset:420*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 420*FLEN/8, x12, x8, x9)

inst_233:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; 
   valaddr_reg:x11; val_offset:422*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 422*FLEN/8, x12, x8, x9)

inst_234:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ca7e5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ca7e5 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ca7e5; op2val:0xbf0ca7e5; 
   valaddr_reg:x11; val_offset:424*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 424*FLEN/8, x12, x8, x9)

inst_235:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3b753f09; op2val:0xbb753f09; 
   valaddr_reg:x11; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 426*FLEN/8, x12, x8, x9)

inst_236:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3b753f09; op2val:0xbb753f09; 
   valaddr_reg:x11; val_offset:428*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 428*FLEN/8, x12, x8, x9)

inst_237:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3b753f09; op2val:0xbb753f09; 
   valaddr_reg:x11; val_offset:430*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 430*FLEN/8, x12, x8, x9)

inst_238:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3b753f09; op2val:0xbb753f09; 
   valaddr_reg:x11; val_offset:432*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 432*FLEN/8, x12, x8, x9)

inst_239:
// fs1 == 0 and fe1 == 0x76 and fm1 == 0x753f09 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x753f09 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3b753f09; op2val:0xbb753f09; 
   valaddr_reg:x11; val_offset:434*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 434*FLEN/8, x12, x8, x9)

inst_240:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e53a296; op2val:0xbe53a296; 
   valaddr_reg:x11; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 436*FLEN/8, x12, x8, x9)

inst_241:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e53a296; op2val:0xbe53a296; 
   valaddr_reg:x11; val_offset:438*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 438*FLEN/8, x12, x8, x9)

inst_242:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e53a296; op2val:0xbe53a296; 
   valaddr_reg:x11; val_offset:440*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 440*FLEN/8, x12, x8, x9)

inst_243:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e53a296; op2val:0xbe53a296; 
   valaddr_reg:x11; val_offset:442*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 442*FLEN/8, x12, x8, x9)

inst_244:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x53a296 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x53a296 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e53a296; op2val:0xbe53a296; 
   valaddr_reg:x11; val_offset:444*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 444*FLEN/8, x12, x8, x9)

inst_245:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec6414a; op2val:0xbec6414a; 
   valaddr_reg:x11; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 446*FLEN/8, x12, x8, x9)

inst_246:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec6414a; op2val:0xbec6414a; 
   valaddr_reg:x11; val_offset:448*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 448*FLEN/8, x12, x8, x9)

inst_247:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec6414a; op2val:0xbec6414a; 
   valaddr_reg:x11; val_offset:450*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 450*FLEN/8, x12, x8, x9)

inst_248:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec6414a; op2val:0xbec6414a; 
   valaddr_reg:x11; val_offset:452*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 452*FLEN/8, x12, x8, x9)

inst_249:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x46414a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x46414a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec6414a; op2val:0xbec6414a; 
   valaddr_reg:x11; val_offset:454*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 454*FLEN/8, x12, x8, x9)

inst_250:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd5d53; op2val:0xbebd5d53; 
   valaddr_reg:x11; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 456*FLEN/8, x12, x8, x9)

inst_251:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd5d53; op2val:0xbebd5d53; 
   valaddr_reg:x11; val_offset:458*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 458*FLEN/8, x12, x8, x9)

inst_252:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd5d53; op2val:0xbebd5d53; 
   valaddr_reg:x11; val_offset:460*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 460*FLEN/8, x12, x8, x9)

inst_253:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd5d53; op2val:0xbebd5d53; 
   valaddr_reg:x11; val_offset:462*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 462*FLEN/8, x12, x8, x9)

inst_254:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d5d53 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d5d53 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd5d53; op2val:0xbebd5d53; 
   valaddr_reg:x11; val_offset:464*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 464*FLEN/8, x12, x8, x9)

inst_255:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f41c86a; op2val:0xbf41c86a; 
   valaddr_reg:x11; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 466*FLEN/8, x12, x8, x9)

inst_256:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f41c86a; op2val:0xbf41c86a; 
   valaddr_reg:x11; val_offset:468*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 468*FLEN/8, x12, x8, x9)

inst_257:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f41c86a; op2val:0xbf41c86a; 
   valaddr_reg:x11; val_offset:470*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 470*FLEN/8, x12, x8, x9)

inst_258:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f41c86a; op2val:0xbf41c86a; 
   valaddr_reg:x11; val_offset:472*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 472*FLEN/8, x12, x8, x9)

inst_259:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x41c86a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x41c86a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f41c86a; op2val:0xbf41c86a; 
   valaddr_reg:x11; val_offset:474*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 474*FLEN/8, x12, x8, x9)

inst_260:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f62037c; op2val:0xbf62037c; 
   valaddr_reg:x11; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 476*FLEN/8, x12, x8, x9)

inst_261:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f62037c; op2val:0xbf62037c; 
   valaddr_reg:x11; val_offset:478*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 478*FLEN/8, x12, x8, x9)

inst_262:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f62037c; op2val:0xbf62037c; 
   valaddr_reg:x11; val_offset:480*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 480*FLEN/8, x12, x8, x9)

inst_263:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f62037c; op2val:0xbf62037c; 
   valaddr_reg:x11; val_offset:482*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 482*FLEN/8, x12, x8, x9)

inst_264:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x62037c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x62037c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f62037c; op2val:0xbf62037c; 
   valaddr_reg:x11; val_offset:484*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 484*FLEN/8, x12, x8, x9)

inst_265:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5258d7; op2val:0xbe5258d7; 
   valaddr_reg:x11; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 486*FLEN/8, x12, x8, x9)

inst_266:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5258d7; op2val:0xbe5258d7; 
   valaddr_reg:x11; val_offset:488*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 488*FLEN/8, x12, x8, x9)

inst_267:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5258d7; op2val:0xbe5258d7; 
   valaddr_reg:x11; val_offset:490*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 490*FLEN/8, x12, x8, x9)

inst_268:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5258d7; op2val:0xbe5258d7; 
   valaddr_reg:x11; val_offset:492*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 492*FLEN/8, x12, x8, x9)

inst_269:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5258d7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5258d7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5258d7; op2val:0xbe5258d7; 
   valaddr_reg:x11; val_offset:494*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 494*FLEN/8, x12, x8, x9)

inst_270:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3c8146; op2val:0xbe3c8146; 
   valaddr_reg:x11; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 496*FLEN/8, x12, x8, x9)

inst_271:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3c8146; op2val:0xbe3c8146; 
   valaddr_reg:x11; val_offset:498*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 498*FLEN/8, x12, x8, x9)

inst_272:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3c8146; op2val:0xbe3c8146; 
   valaddr_reg:x11; val_offset:500*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 500*FLEN/8, x12, x8, x9)

inst_273:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3c8146; op2val:0xbe3c8146; 
   valaddr_reg:x11; val_offset:502*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 502*FLEN/8, x12, x8, x9)

inst_274:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3c8146 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3c8146 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3c8146; op2val:0xbe3c8146; 
   valaddr_reg:x11; val_offset:504*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 504*FLEN/8, x12, x8, x9)

inst_275:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8840; op2val:0xbf5a8840; 
   valaddr_reg:x11; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 506*FLEN/8, x12, x8, x9)

inst_276:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8840; op2val:0xbf5a8840; 
   valaddr_reg:x11; val_offset:508*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 508*FLEN/8, x12, x8, x9)

inst_277:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8840; op2val:0xbf5a8840; 
   valaddr_reg:x11; val_offset:510*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 510*FLEN/8, x12, x8, x9)

inst_278:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8840; op2val:0xbf5a8840; 
   valaddr_reg:x11; val_offset:512*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 512*FLEN/8, x12, x8, x9)

inst_279:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8840 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8840 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8840; op2val:0xbf5a8840; 
   valaddr_reg:x11; val_offset:514*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 514*FLEN/8, x12, x8, x9)

inst_280:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f746b8a; op2val:0xbf746b8a; 
   valaddr_reg:x11; val_offset:516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 516*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_2)

inst_281:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f746b8a; op2val:0xbf746b8a; 
   valaddr_reg:x11; val_offset:518*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 518*FLEN/8, x12, x8, x9)

inst_282:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f746b8a; op2val:0xbf746b8a; 
   valaddr_reg:x11; val_offset:520*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 520*FLEN/8, x12, x8, x9)

inst_283:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f746b8a; op2val:0xbf746b8a; 
   valaddr_reg:x11; val_offset:522*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 522*FLEN/8, x12, x8, x9)

inst_284:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x746b8a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x746b8a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f746b8a; op2val:0xbf746b8a; 
   valaddr_reg:x11; val_offset:524*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 524*FLEN/8, x12, x8, x9)

inst_285:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db84986; op2val:0xbdb84986; 
   valaddr_reg:x11; val_offset:526*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 526*FLEN/8, x12, x8, x9)

inst_286:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db84986; op2val:0xbdb84986; 
   valaddr_reg:x11; val_offset:528*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 528*FLEN/8, x12, x8, x9)

inst_287:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db84986; op2val:0xbdb84986; 
   valaddr_reg:x11; val_offset:530*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 530*FLEN/8, x12, x8, x9)

inst_288:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db84986; op2val:0xbdb84986; 
   valaddr_reg:x11; val_offset:532*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 532*FLEN/8, x12, x8, x9)

inst_289:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x384986 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x384986 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db84986; op2val:0xbdb84986; 
   valaddr_reg:x11; val_offset:534*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 534*FLEN/8, x12, x8, x9)

inst_290:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea389d2; op2val:0xbea389d2; 
   valaddr_reg:x11; val_offset:536*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 536*FLEN/8, x12, x8, x9)

inst_291:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea389d2; op2val:0xbea389d2; 
   valaddr_reg:x11; val_offset:538*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 538*FLEN/8, x12, x8, x9)

inst_292:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea389d2; op2val:0xbea389d2; 
   valaddr_reg:x11; val_offset:540*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 540*FLEN/8, x12, x8, x9)

inst_293:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea389d2; op2val:0xbea389d2; 
   valaddr_reg:x11; val_offset:542*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 542*FLEN/8, x12, x8, x9)

inst_294:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2389d2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2389d2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea389d2; op2val:0xbea389d2; 
   valaddr_reg:x11; val_offset:544*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 544*FLEN/8, x12, x8, x9)

inst_295:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebae14a; op2val:0xbebae14a; 
   valaddr_reg:x11; val_offset:546*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 546*FLEN/8, x12, x8, x9)

inst_296:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebae14a; op2val:0xbebae14a; 
   valaddr_reg:x11; val_offset:548*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 548*FLEN/8, x12, x8, x9)

inst_297:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebae14a; op2val:0xbebae14a; 
   valaddr_reg:x11; val_offset:550*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 550*FLEN/8, x12, x8, x9)

inst_298:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebae14a; op2val:0xbebae14a; 
   valaddr_reg:x11; val_offset:552*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 552*FLEN/8, x12, x8, x9)

inst_299:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3ae14a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3ae14a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebae14a; op2val:0xbebae14a; 
   valaddr_reg:x11; val_offset:554*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 554*FLEN/8, x12, x8, x9)

inst_300:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed91cb1; op2val:0xbed91cb1; 
   valaddr_reg:x11; val_offset:556*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 556*FLEN/8, x12, x8, x9)

inst_301:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed91cb1; op2val:0xbed91cb1; 
   valaddr_reg:x11; val_offset:558*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 558*FLEN/8, x12, x8, x9)

inst_302:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed91cb1; op2val:0xbed91cb1; 
   valaddr_reg:x11; val_offset:560*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 560*FLEN/8, x12, x8, x9)

inst_303:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed91cb1; op2val:0xbed91cb1; 
   valaddr_reg:x11; val_offset:562*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 562*FLEN/8, x12, x8, x9)

inst_304:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x591cb1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x591cb1 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed91cb1; op2val:0xbed91cb1; 
   valaddr_reg:x11; val_offset:564*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 564*FLEN/8, x12, x8, x9)

inst_305:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f213e82; op2val:0xbf213e82; 
   valaddr_reg:x11; val_offset:566*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 566*FLEN/8, x12, x8, x9)

inst_306:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f213e82; op2val:0xbf213e82; 
   valaddr_reg:x11; val_offset:568*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 568*FLEN/8, x12, x8, x9)

inst_307:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f213e82; op2val:0xbf213e82; 
   valaddr_reg:x11; val_offset:570*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 570*FLEN/8, x12, x8, x9)

inst_308:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f213e82; op2val:0xbf213e82; 
   valaddr_reg:x11; val_offset:572*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 572*FLEN/8, x12, x8, x9)

inst_309:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x213e82 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x213e82 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f213e82; op2val:0xbf213e82; 
   valaddr_reg:x11; val_offset:574*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 574*FLEN/8, x12, x8, x9)

inst_310:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76af02; op2val:0xbf76af02; 
   valaddr_reg:x11; val_offset:576*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 576*FLEN/8, x12, x8, x9)

inst_311:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76af02; op2val:0xbf76af02; 
   valaddr_reg:x11; val_offset:578*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 578*FLEN/8, x12, x8, x9)

inst_312:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76af02; op2val:0xbf76af02; 
   valaddr_reg:x11; val_offset:580*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 580*FLEN/8, x12, x8, x9)

inst_313:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76af02; op2val:0xbf76af02; 
   valaddr_reg:x11; val_offset:582*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 582*FLEN/8, x12, x8, x9)

inst_314:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76af02 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76af02 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76af02; op2val:0xbf76af02; 
   valaddr_reg:x11; val_offset:584*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 584*FLEN/8, x12, x8, x9)

inst_315:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d1f9daa; op2val:0xbd1f9daa; 
   valaddr_reg:x11; val_offset:586*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 586*FLEN/8, x12, x8, x9)

inst_316:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d1f9daa; op2val:0xbd1f9daa; 
   valaddr_reg:x11; val_offset:588*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 588*FLEN/8, x12, x8, x9)

inst_317:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d1f9daa; op2val:0xbd1f9daa; 
   valaddr_reg:x11; val_offset:590*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 590*FLEN/8, x12, x8, x9)

inst_318:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d1f9daa; op2val:0xbd1f9daa; 
   valaddr_reg:x11; val_offset:592*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 592*FLEN/8, x12, x8, x9)

inst_319:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x1f9daa and fs2 == 1 and fe2 == 0x7a and fm2 == 0x1f9daa and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d1f9daa; op2val:0xbd1f9daa; 
   valaddr_reg:x11; val_offset:594*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 594*FLEN/8, x12, x8, x9)

inst_320:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f604868; op2val:0xbf604868; 
   valaddr_reg:x11; val_offset:596*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 596*FLEN/8, x12, x8, x9)

inst_321:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f604868; op2val:0xbf604868; 
   valaddr_reg:x11; val_offset:598*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 598*FLEN/8, x12, x8, x9)

inst_322:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f604868; op2val:0xbf604868; 
   valaddr_reg:x11; val_offset:600*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 600*FLEN/8, x12, x8, x9)

inst_323:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f604868; op2val:0xbf604868; 
   valaddr_reg:x11; val_offset:602*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 602*FLEN/8, x12, x8, x9)

inst_324:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x604868 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x604868 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f604868; op2val:0xbf604868; 
   valaddr_reg:x11; val_offset:604*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 604*FLEN/8, x12, x8, x9)

inst_325:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4c0915; op2val:0xbe4c0915; 
   valaddr_reg:x11; val_offset:606*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 606*FLEN/8, x12, x8, x9)

inst_326:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4c0915; op2val:0xbe4c0915; 
   valaddr_reg:x11; val_offset:608*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 608*FLEN/8, x12, x8, x9)

inst_327:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4c0915; op2val:0xbe4c0915; 
   valaddr_reg:x11; val_offset:610*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 610*FLEN/8, x12, x8, x9)

inst_328:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4c0915; op2val:0xbe4c0915; 
   valaddr_reg:x11; val_offset:612*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 612*FLEN/8, x12, x8, x9)

inst_329:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4c0915 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4c0915 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4c0915; op2val:0xbe4c0915; 
   valaddr_reg:x11; val_offset:614*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 614*FLEN/8, x12, x8, x9)

inst_330:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; 
   valaddr_reg:x11; val_offset:616*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 616*FLEN/8, x12, x8, x9)

inst_331:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; 
   valaddr_reg:x11; val_offset:618*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 618*FLEN/8, x12, x8, x9)

inst_332:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; 
   valaddr_reg:x11; val_offset:620*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 620*FLEN/8, x12, x8, x9)

inst_333:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; 
   valaddr_reg:x11; val_offset:622*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 622*FLEN/8, x12, x8, x9)

inst_334:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7a2aeb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7a2aeb and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7a2aeb; op2val:0xbf7a2aeb; 
   valaddr_reg:x11; val_offset:624*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 624*FLEN/8, x12, x8, x9)

inst_335:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f660414; op2val:0xbf660414; 
   valaddr_reg:x11; val_offset:626*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 626*FLEN/8, x12, x8, x9)

inst_336:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f660414; op2val:0xbf660414; 
   valaddr_reg:x11; val_offset:628*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 628*FLEN/8, x12, x8, x9)

inst_337:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f660414; op2val:0xbf660414; 
   valaddr_reg:x11; val_offset:630*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 630*FLEN/8, x12, x8, x9)

inst_338:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f660414; op2val:0xbf660414; 
   valaddr_reg:x11; val_offset:632*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 632*FLEN/8, x12, x8, x9)

inst_339:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x660414 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x660414 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f660414; op2val:0xbf660414; 
   valaddr_reg:x11; val_offset:634*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 634*FLEN/8, x12, x8, x9)

inst_340:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4777bb; op2val:0xbf4777bb; 
   valaddr_reg:x11; val_offset:636*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 636*FLEN/8, x12, x8, x9)

inst_341:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4777bb; op2val:0xbf4777bb; 
   valaddr_reg:x11; val_offset:638*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 638*FLEN/8, x12, x8, x9)

inst_342:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4777bb; op2val:0xbf4777bb; 
   valaddr_reg:x11; val_offset:640*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 640*FLEN/8, x12, x8, x9)

inst_343:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4777bb; op2val:0xbf4777bb; 
   valaddr_reg:x11; val_offset:642*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 642*FLEN/8, x12, x8, x9)

inst_344:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4777bb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4777bb and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4777bb; op2val:0xbf4777bb; 
   valaddr_reg:x11; val_offset:644*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 644*FLEN/8, x12, x8, x9)

inst_345:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f265322; op2val:0xbf265322; 
   valaddr_reg:x11; val_offset:646*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 646*FLEN/8, x12, x8, x9)

inst_346:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f265322; op2val:0xbf265322; 
   valaddr_reg:x11; val_offset:648*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 648*FLEN/8, x12, x8, x9)

inst_347:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f265322; op2val:0xbf265322; 
   valaddr_reg:x11; val_offset:650*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 650*FLEN/8, x12, x8, x9)

inst_348:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f265322; op2val:0xbf265322; 
   valaddr_reg:x11; val_offset:652*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 652*FLEN/8, x12, x8, x9)

inst_349:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x265322 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x265322 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f265322; op2val:0xbf265322; 
   valaddr_reg:x11; val_offset:654*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 654*FLEN/8, x12, x8, x9)

inst_350:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe235b; op2val:0xbefe235b; 
   valaddr_reg:x11; val_offset:656*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 656*FLEN/8, x12, x8, x9)

inst_351:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe235b; op2val:0xbefe235b; 
   valaddr_reg:x11; val_offset:658*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 658*FLEN/8, x12, x8, x9)

inst_352:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe235b; op2val:0xbefe235b; 
   valaddr_reg:x11; val_offset:660*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 660*FLEN/8, x12, x8, x9)

inst_353:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe235b; op2val:0xbefe235b; 
   valaddr_reg:x11; val_offset:662*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 662*FLEN/8, x12, x8, x9)

inst_354:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e235b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7e235b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe235b; op2val:0xbefe235b; 
   valaddr_reg:x11; val_offset:664*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 664*FLEN/8, x12, x8, x9)

inst_355:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f662a06; op2val:0xbf662a06; 
   valaddr_reg:x11; val_offset:666*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 666*FLEN/8, x12, x8, x9)

inst_356:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f662a06; op2val:0xbf662a06; 
   valaddr_reg:x11; val_offset:668*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 668*FLEN/8, x12, x8, x9)

inst_357:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f662a06; op2val:0xbf662a06; 
   valaddr_reg:x11; val_offset:670*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 670*FLEN/8, x12, x8, x9)

inst_358:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f662a06; op2val:0xbf662a06; 
   valaddr_reg:x11; val_offset:672*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 672*FLEN/8, x12, x8, x9)

inst_359:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x662a06 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x662a06 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f662a06; op2val:0xbf662a06; 
   valaddr_reg:x11; val_offset:674*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 674*FLEN/8, x12, x8, x9)

inst_360:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4cf704; op2val:0xbf4cf704; 
   valaddr_reg:x11; val_offset:676*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 676*FLEN/8, x12, x8, x9)

inst_361:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4cf704; op2val:0xbf4cf704; 
   valaddr_reg:x11; val_offset:678*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 678*FLEN/8, x12, x8, x9)

inst_362:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4cf704; op2val:0xbf4cf704; 
   valaddr_reg:x11; val_offset:680*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 680*FLEN/8, x12, x8, x9)

inst_363:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4cf704; op2val:0xbf4cf704; 
   valaddr_reg:x11; val_offset:682*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 682*FLEN/8, x12, x8, x9)

inst_364:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4cf704 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4cf704 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4cf704; op2val:0xbf4cf704; 
   valaddr_reg:x11; val_offset:684*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 684*FLEN/8, x12, x8, x9)

inst_365:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e896bf2; op2val:0xbe896bf2; 
   valaddr_reg:x11; val_offset:686*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 686*FLEN/8, x12, x8, x9)

inst_366:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e896bf2; op2val:0xbe896bf2; 
   valaddr_reg:x11; val_offset:688*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 688*FLEN/8, x12, x8, x9)

inst_367:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e896bf2; op2val:0xbe896bf2; 
   valaddr_reg:x11; val_offset:690*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 690*FLEN/8, x12, x8, x9)

inst_368:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e896bf2; op2val:0xbe896bf2; 
   valaddr_reg:x11; val_offset:692*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 692*FLEN/8, x12, x8, x9)

inst_369:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x096bf2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x096bf2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e896bf2; op2val:0xbe896bf2; 
   valaddr_reg:x11; val_offset:694*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 694*FLEN/8, x12, x8, x9)

inst_370:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da6f2e0; op2val:0xbda6f2e0; 
   valaddr_reg:x11; val_offset:696*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 696*FLEN/8, x12, x8, x9)

inst_371:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da6f2e0; op2val:0xbda6f2e0; 
   valaddr_reg:x11; val_offset:698*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 698*FLEN/8, x12, x8, x9)

inst_372:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da6f2e0; op2val:0xbda6f2e0; 
   valaddr_reg:x11; val_offset:700*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 700*FLEN/8, x12, x8, x9)

inst_373:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da6f2e0; op2val:0xbda6f2e0; 
   valaddr_reg:x11; val_offset:702*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 702*FLEN/8, x12, x8, x9)

inst_374:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x26f2e0 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x26f2e0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da6f2e0; op2val:0xbda6f2e0; 
   valaddr_reg:x11; val_offset:704*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 704*FLEN/8, x12, x8, x9)

inst_375:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea79ba7; op2val:0xbea79ba7; 
   valaddr_reg:x11; val_offset:706*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 706*FLEN/8, x12, x8, x9)

inst_376:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea79ba7; op2val:0xbea79ba7; 
   valaddr_reg:x11; val_offset:708*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 708*FLEN/8, x12, x8, x9)

inst_377:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea79ba7; op2val:0xbea79ba7; 
   valaddr_reg:x11; val_offset:710*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 710*FLEN/8, x12, x8, x9)

inst_378:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea79ba7; op2val:0xbea79ba7; 
   valaddr_reg:x11; val_offset:712*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 712*FLEN/8, x12, x8, x9)

inst_379:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x279ba7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x279ba7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea79ba7; op2val:0xbea79ba7; 
   valaddr_reg:x11; val_offset:714*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 714*FLEN/8, x12, x8, x9)

inst_380:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f712392; op2val:0xbf712392; 
   valaddr_reg:x11; val_offset:716*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 716*FLEN/8, x12, x8, x9)

inst_381:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f712392; op2val:0xbf712392; 
   valaddr_reg:x11; val_offset:718*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 718*FLEN/8, x12, x8, x9)

inst_382:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f712392; op2val:0xbf712392; 
   valaddr_reg:x11; val_offset:720*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 720*FLEN/8, x12, x8, x9)

inst_383:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f712392; op2val:0xbf712392; 
   valaddr_reg:x11; val_offset:722*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 722*FLEN/8, x12, x8, x9)

inst_384:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x712392 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x712392 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f712392; op2val:0xbf712392; 
   valaddr_reg:x11; val_offset:724*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 724*FLEN/8, x12, x8, x9)

inst_385:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1e4903; op2val:0xbe1e4903; 
   valaddr_reg:x11; val_offset:726*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 726*FLEN/8, x12, x8, x9)

inst_386:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1e4903; op2val:0xbe1e4903; 
   valaddr_reg:x11; val_offset:728*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 728*FLEN/8, x12, x8, x9)

inst_387:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1e4903; op2val:0xbe1e4903; 
   valaddr_reg:x11; val_offset:730*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 730*FLEN/8, x12, x8, x9)

inst_388:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1e4903; op2val:0xbe1e4903; 
   valaddr_reg:x11; val_offset:732*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 732*FLEN/8, x12, x8, x9)

inst_389:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1e4903 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e4903 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1e4903; op2val:0xbe1e4903; 
   valaddr_reg:x11; val_offset:734*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 734*FLEN/8, x12, x8, x9)

inst_390:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; 
   valaddr_reg:x11; val_offset:736*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 736*FLEN/8, x12, x8, x9)

inst_391:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; 
   valaddr_reg:x11; val_offset:738*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 738*FLEN/8, x12, x8, x9)

inst_392:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; 
   valaddr_reg:x11; val_offset:740*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 740*FLEN/8, x12, x8, x9)

inst_393:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; 
   valaddr_reg:x11; val_offset:742*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 742*FLEN/8, x12, x8, x9)

inst_394:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fd2f4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fd2f4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fd2f4; op2val:0xbf3fd2f4; 
   valaddr_reg:x11; val_offset:744*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 744*FLEN/8, x12, x8, x9)

inst_395:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ec481; op2val:0xbf0ec481; 
   valaddr_reg:x11; val_offset:746*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 746*FLEN/8, x12, x8, x9)

inst_396:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ec481; op2val:0xbf0ec481; 
   valaddr_reg:x11; val_offset:748*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 748*FLEN/8, x12, x8, x9)

inst_397:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ec481; op2val:0xbf0ec481; 
   valaddr_reg:x11; val_offset:750*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 750*FLEN/8, x12, x8, x9)

inst_398:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ec481; op2val:0xbf0ec481; 
   valaddr_reg:x11; val_offset:752*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 752*FLEN/8, x12, x8, x9)

inst_399:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0ec481 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0ec481 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0ec481; op2val:0xbf0ec481; 
   valaddr_reg:x11; val_offset:754*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 754*FLEN/8, x12, x8, x9)

inst_400:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f07438e; op2val:0xbf07438e; 
   valaddr_reg:x11; val_offset:756*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 756*FLEN/8, x12, x8, x9)

inst_401:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f07438e; op2val:0xbf07438e; 
   valaddr_reg:x11; val_offset:758*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 758*FLEN/8, x12, x8, x9)

inst_402:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f07438e; op2val:0xbf07438e; 
   valaddr_reg:x11; val_offset:760*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 760*FLEN/8, x12, x8, x9)

inst_403:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f07438e; op2val:0xbf07438e; 
   valaddr_reg:x11; val_offset:762*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 762*FLEN/8, x12, x8, x9)

inst_404:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x07438e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x07438e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f07438e; op2val:0xbf07438e; 
   valaddr_reg:x11; val_offset:764*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 764*FLEN/8, x12, x8, x9)

inst_405:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc9d41; op2val:0xbedc9d41; 
   valaddr_reg:x11; val_offset:766*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 766*FLEN/8, x12, x8, x9)

inst_406:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc9d41; op2val:0xbedc9d41; 
   valaddr_reg:x11; val_offset:768*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 768*FLEN/8, x12, x8, x9)

inst_407:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc9d41; op2val:0xbedc9d41; 
   valaddr_reg:x11; val_offset:770*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 770*FLEN/8, x12, x8, x9)

inst_408:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc9d41; op2val:0xbedc9d41; 
   valaddr_reg:x11; val_offset:772*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 772*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_3)

inst_409:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c9d41 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5c9d41 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc9d41; op2val:0xbedc9d41; 
   valaddr_reg:x11; val_offset:774*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 774*FLEN/8, x12, x8, x9)

inst_410:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f304513; op2val:0xbf304513; 
   valaddr_reg:x11; val_offset:776*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 776*FLEN/8, x12, x8, x9)

inst_411:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f304513; op2val:0xbf304513; 
   valaddr_reg:x11; val_offset:778*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 778*FLEN/8, x12, x8, x9)

inst_412:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f304513; op2val:0xbf304513; 
   valaddr_reg:x11; val_offset:780*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 780*FLEN/8, x12, x8, x9)

inst_413:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f304513; op2val:0xbf304513; 
   valaddr_reg:x11; val_offset:782*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 782*FLEN/8, x12, x8, x9)

inst_414:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x304513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x304513 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f304513; op2val:0xbf304513; 
   valaddr_reg:x11; val_offset:784*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 784*FLEN/8, x12, x8, x9)

inst_415:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e263c26; op2val:0xbe263c26; 
   valaddr_reg:x11; val_offset:786*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 786*FLEN/8, x12, x8, x9)

inst_416:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e263c26; op2val:0xbe263c26; 
   valaddr_reg:x11; val_offset:788*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 788*FLEN/8, x12, x8, x9)

inst_417:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e263c26; op2val:0xbe263c26; 
   valaddr_reg:x11; val_offset:790*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 790*FLEN/8, x12, x8, x9)

inst_418:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e263c26; op2val:0xbe263c26; 
   valaddr_reg:x11; val_offset:792*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 792*FLEN/8, x12, x8, x9)

inst_419:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x263c26 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x263c26 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e263c26; op2val:0xbe263c26; 
   valaddr_reg:x11; val_offset:794*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 794*FLEN/8, x12, x8, x9)

inst_420:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee0f902; op2val:0xbee0f902; 
   valaddr_reg:x11; val_offset:796*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 796*FLEN/8, x12, x8, x9)

inst_421:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee0f902; op2val:0xbee0f902; 
   valaddr_reg:x11; val_offset:798*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 798*FLEN/8, x12, x8, x9)

inst_422:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee0f902; op2val:0xbee0f902; 
   valaddr_reg:x11; val_offset:800*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 800*FLEN/8, x12, x8, x9)

inst_423:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee0f902; op2val:0xbee0f902; 
   valaddr_reg:x11; val_offset:802*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 802*FLEN/8, x12, x8, x9)

inst_424:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x60f902 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x60f902 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee0f902; op2val:0xbee0f902; 
   valaddr_reg:x11; val_offset:804*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 804*FLEN/8, x12, x8, x9)

inst_425:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e84505c; op2val:0xbe84505c; 
   valaddr_reg:x11; val_offset:806*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 806*FLEN/8, x12, x8, x9)

inst_426:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e84505c; op2val:0xbe84505c; 
   valaddr_reg:x11; val_offset:808*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 808*FLEN/8, x12, x8, x9)

inst_427:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e84505c; op2val:0xbe84505c; 
   valaddr_reg:x11; val_offset:810*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 810*FLEN/8, x12, x8, x9)

inst_428:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e84505c; op2val:0xbe84505c; 
   valaddr_reg:x11; val_offset:812*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 812*FLEN/8, x12, x8, x9)

inst_429:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x04505c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x04505c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e84505c; op2val:0xbe84505c; 
   valaddr_reg:x11; val_offset:814*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 814*FLEN/8, x12, x8, x9)

inst_430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f744d3c; op2val:0xbf744d3c; 
   valaddr_reg:x11; val_offset:816*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 816*FLEN/8, x12, x8, x9)

inst_431:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f744d3c; op2val:0xbf744d3c; 
   valaddr_reg:x11; val_offset:818*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 818*FLEN/8, x12, x8, x9)

inst_432:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f744d3c; op2val:0xbf744d3c; 
   valaddr_reg:x11; val_offset:820*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 820*FLEN/8, x12, x8, x9)

inst_433:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f744d3c; op2val:0xbf744d3c; 
   valaddr_reg:x11; val_offset:822*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 822*FLEN/8, x12, x8, x9)

inst_434:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x744d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x744d3c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f744d3c; op2val:0xbf744d3c; 
   valaddr_reg:x11; val_offset:824*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 824*FLEN/8, x12, x8, x9)

inst_435:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4286d0; op2val:0xbf4286d0; 
   valaddr_reg:x11; val_offset:826*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 826*FLEN/8, x12, x8, x9)

inst_436:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4286d0; op2val:0xbf4286d0; 
   valaddr_reg:x11; val_offset:828*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 828*FLEN/8, x12, x8, x9)

inst_437:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4286d0; op2val:0xbf4286d0; 
   valaddr_reg:x11; val_offset:830*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 830*FLEN/8, x12, x8, x9)

inst_438:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4286d0; op2val:0xbf4286d0; 
   valaddr_reg:x11; val_offset:832*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 832*FLEN/8, x12, x8, x9)

inst_439:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4286d0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4286d0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4286d0; op2val:0xbf4286d0; 
   valaddr_reg:x11; val_offset:834*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 834*FLEN/8, x12, x8, x9)

inst_440:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25d48b; op2val:0xbf25d48b; 
   valaddr_reg:x11; val_offset:836*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 836*FLEN/8, x12, x8, x9)

inst_441:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25d48b; op2val:0xbf25d48b; 
   valaddr_reg:x11; val_offset:838*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 838*FLEN/8, x12, x8, x9)

inst_442:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25d48b; op2val:0xbf25d48b; 
   valaddr_reg:x11; val_offset:840*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 840*FLEN/8, x12, x8, x9)

inst_443:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25d48b; op2val:0xbf25d48b; 
   valaddr_reg:x11; val_offset:842*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 842*FLEN/8, x12, x8, x9)

inst_444:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25d48b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x25d48b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25d48b; op2val:0xbf25d48b; 
   valaddr_reg:x11; val_offset:844*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 844*FLEN/8, x12, x8, x9)

inst_445:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f240b63; op2val:0xbf240b63; 
   valaddr_reg:x11; val_offset:846*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 846*FLEN/8, x12, x8, x9)

inst_446:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f240b63; op2val:0xbf240b63; 
   valaddr_reg:x11; val_offset:848*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 848*FLEN/8, x12, x8, x9)

inst_447:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f240b63; op2val:0xbf240b63; 
   valaddr_reg:x11; val_offset:850*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 850*FLEN/8, x12, x8, x9)

inst_448:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f240b63; op2val:0xbf240b63; 
   valaddr_reg:x11; val_offset:852*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 852*FLEN/8, x12, x8, x9)

inst_449:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x240b63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x240b63 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f240b63; op2val:0xbf240b63; 
   valaddr_reg:x11; val_offset:854*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 854*FLEN/8, x12, x8, x9)

inst_450:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb8566; op2val:0xbebb8566; 
   valaddr_reg:x11; val_offset:856*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 856*FLEN/8, x12, x8, x9)

inst_451:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb8566; op2val:0xbebb8566; 
   valaddr_reg:x11; val_offset:858*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 858*FLEN/8, x12, x8, x9)

inst_452:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb8566; op2val:0xbebb8566; 
   valaddr_reg:x11; val_offset:860*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 860*FLEN/8, x12, x8, x9)

inst_453:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb8566; op2val:0xbebb8566; 
   valaddr_reg:x11; val_offset:862*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 862*FLEN/8, x12, x8, x9)

inst_454:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b8566 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b8566 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb8566; op2val:0xbebb8566; 
   valaddr_reg:x11; val_offset:864*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 864*FLEN/8, x12, x8, x9)

inst_455:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e919a57; op2val:0xbe919a57; 
   valaddr_reg:x11; val_offset:866*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 866*FLEN/8, x12, x8, x9)

inst_456:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e919a57; op2val:0xbe919a57; 
   valaddr_reg:x11; val_offset:868*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 868*FLEN/8, x12, x8, x9)

inst_457:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e919a57; op2val:0xbe919a57; 
   valaddr_reg:x11; val_offset:870*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 870*FLEN/8, x12, x8, x9)

inst_458:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e919a57; op2val:0xbe919a57; 
   valaddr_reg:x11; val_offset:872*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 872*FLEN/8, x12, x8, x9)

inst_459:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x119a57 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x119a57 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e919a57; op2val:0xbe919a57; 
   valaddr_reg:x11; val_offset:874*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 874*FLEN/8, x12, x8, x9)

inst_460:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e8b3; op2val:0xbf15e8b3; 
   valaddr_reg:x11; val_offset:876*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 876*FLEN/8, x12, x8, x9)

inst_461:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e8b3; op2val:0xbf15e8b3; 
   valaddr_reg:x11; val_offset:878*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 878*FLEN/8, x12, x8, x9)

inst_462:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e8b3; op2val:0xbf15e8b3; 
   valaddr_reg:x11; val_offset:880*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 880*FLEN/8, x12, x8, x9)

inst_463:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e8b3; op2val:0xbf15e8b3; 
   valaddr_reg:x11; val_offset:882*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 882*FLEN/8, x12, x8, x9)

inst_464:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e8b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e8b3 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e8b3; op2val:0xbf15e8b3; 
   valaddr_reg:x11; val_offset:884*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 884*FLEN/8, x12, x8, x9)

inst_465:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; 
   valaddr_reg:x11; val_offset:886*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 886*FLEN/8, x12, x8, x9)

inst_466:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; 
   valaddr_reg:x11; val_offset:888*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 888*FLEN/8, x12, x8, x9)

inst_467:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; 
   valaddr_reg:x11; val_offset:890*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 890*FLEN/8, x12, x8, x9)

inst_468:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; 
   valaddr_reg:x11; val_offset:892*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 892*FLEN/8, x12, x8, x9)

inst_469:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7f9c1b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f9c1b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7f9c1b; op2val:0xbf7f9c1b; 
   valaddr_reg:x11; val_offset:894*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 894*FLEN/8, x12, x8, x9)

inst_470:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a64a6; op2val:0xbf2a64a6; 
   valaddr_reg:x11; val_offset:896*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 896*FLEN/8, x12, x8, x9)

inst_471:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a64a6; op2val:0xbf2a64a6; 
   valaddr_reg:x11; val_offset:898*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 898*FLEN/8, x12, x8, x9)

inst_472:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a64a6; op2val:0xbf2a64a6; 
   valaddr_reg:x11; val_offset:900*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 900*FLEN/8, x12, x8, x9)

inst_473:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a64a6; op2val:0xbf2a64a6; 
   valaddr_reg:x11; val_offset:902*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 902*FLEN/8, x12, x8, x9)

inst_474:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a64a6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a64a6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a64a6; op2val:0xbf2a64a6; 
   valaddr_reg:x11; val_offset:904*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 904*FLEN/8, x12, x8, x9)

inst_475:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; 
   valaddr_reg:x11; val_offset:906*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 906*FLEN/8, x12, x8, x9)

inst_476:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; 
   valaddr_reg:x11; val_offset:908*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 908*FLEN/8, x12, x8, x9)

inst_477:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; 
   valaddr_reg:x11; val_offset:910*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 910*FLEN/8, x12, x8, x9)

inst_478:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; 
   valaddr_reg:x11; val_offset:912*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 912*FLEN/8, x12, x8, x9)

inst_479:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x39a6c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39a6c9 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb9a6c9; op2val:0xbeb9a6c9; 
   valaddr_reg:x11; val_offset:914*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 914*FLEN/8, x12, x8, x9)

inst_480:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dff2205; op2val:0xbdff2205; 
   valaddr_reg:x11; val_offset:916*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 916*FLEN/8, x12, x8, x9)

inst_481:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dff2205; op2val:0xbdff2205; 
   valaddr_reg:x11; val_offset:918*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 918*FLEN/8, x12, x8, x9)

inst_482:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dff2205; op2val:0xbdff2205; 
   valaddr_reg:x11; val_offset:920*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 920*FLEN/8, x12, x8, x9)

inst_483:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dff2205; op2val:0xbdff2205; 
   valaddr_reg:x11; val_offset:922*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 922*FLEN/8, x12, x8, x9)

inst_484:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7f2205 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7f2205 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dff2205; op2val:0xbdff2205; 
   valaddr_reg:x11; val_offset:924*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 924*FLEN/8, x12, x8, x9)

inst_485:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e976; op2val:0xbf15e976; 
   valaddr_reg:x11; val_offset:926*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 926*FLEN/8, x12, x8, x9)

inst_486:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e976; op2val:0xbf15e976; 
   valaddr_reg:x11; val_offset:928*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 928*FLEN/8, x12, x8, x9)

inst_487:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e976; op2val:0xbf15e976; 
   valaddr_reg:x11; val_offset:930*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 930*FLEN/8, x12, x8, x9)

inst_488:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e976; op2val:0xbf15e976; 
   valaddr_reg:x11; val_offset:932*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 932*FLEN/8, x12, x8, x9)

inst_489:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15e976 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15e976 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15e976; op2val:0xbf15e976; 
   valaddr_reg:x11; val_offset:934*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 934*FLEN/8, x12, x8, x9)

inst_490:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e98a9c9; op2val:0xbe98a9c9; 
   valaddr_reg:x11; val_offset:936*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 936*FLEN/8, x12, x8, x9)

inst_491:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e98a9c9; op2val:0xbe98a9c9; 
   valaddr_reg:x11; val_offset:938*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 938*FLEN/8, x12, x8, x9)

inst_492:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e98a9c9; op2val:0xbe98a9c9; 
   valaddr_reg:x11; val_offset:940*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 940*FLEN/8, x12, x8, x9)

inst_493:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e98a9c9; op2val:0xbe98a9c9; 
   valaddr_reg:x11; val_offset:942*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 942*FLEN/8, x12, x8, x9)

inst_494:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x18a9c9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18a9c9 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e98a9c9; op2val:0xbe98a9c9; 
   valaddr_reg:x11; val_offset:944*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 944*FLEN/8, x12, x8, x9)

inst_495:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eacf4a9; op2val:0xbeacf4a9; 
   valaddr_reg:x11; val_offset:946*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 946*FLEN/8, x12, x8, x9)

inst_496:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eacf4a9; op2val:0xbeacf4a9; 
   valaddr_reg:x11; val_offset:948*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 948*FLEN/8, x12, x8, x9)

inst_497:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eacf4a9; op2val:0xbeacf4a9; 
   valaddr_reg:x11; val_offset:950*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 950*FLEN/8, x12, x8, x9)

inst_498:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eacf4a9; op2val:0xbeacf4a9; 
   valaddr_reg:x11; val_offset:952*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 952*FLEN/8, x12, x8, x9)

inst_499:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2cf4a9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2cf4a9 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eacf4a9; op2val:0xbeacf4a9; 
   valaddr_reg:x11; val_offset:954*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 954*FLEN/8, x12, x8, x9)

inst_500:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfd66; op2val:0xbf0dfd66; 
   valaddr_reg:x11; val_offset:956*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 956*FLEN/8, x12, x8, x9)

inst_501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfd66; op2val:0xbf0dfd66; 
   valaddr_reg:x11; val_offset:958*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 958*FLEN/8, x12, x8, x9)

inst_502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfd66; op2val:0xbf0dfd66; 
   valaddr_reg:x11; val_offset:960*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 960*FLEN/8, x12, x8, x9)

inst_503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfd66; op2val:0xbf0dfd66; 
   valaddr_reg:x11; val_offset:962*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 962*FLEN/8, x12, x8, x9)

inst_504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfd66 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0dfd66 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfd66; op2val:0xbf0dfd66; 
   valaddr_reg:x11; val_offset:964*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 964*FLEN/8, x12, x8, x9)

inst_505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f57a1da; op2val:0xbf57a1da; 
   valaddr_reg:x11; val_offset:966*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 966*FLEN/8, x12, x8, x9)

inst_506:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f57a1da; op2val:0xbf57a1da; 
   valaddr_reg:x11; val_offset:968*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 968*FLEN/8, x12, x8, x9)

inst_507:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f57a1da; op2val:0xbf57a1da; 
   valaddr_reg:x11; val_offset:970*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 970*FLEN/8, x12, x8, x9)

inst_508:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f57a1da; op2val:0xbf57a1da; 
   valaddr_reg:x11; val_offset:972*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 972*FLEN/8, x12, x8, x9)

inst_509:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x57a1da and fs2 == 1 and fe2 == 0x7e and fm2 == 0x57a1da and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f57a1da; op2val:0xbf57a1da; 
   valaddr_reg:x11; val_offset:974*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 974*FLEN/8, x12, x8, x9)

inst_510:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03428f; op2val:0xbf03428f; 
   valaddr_reg:x11; val_offset:976*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 976*FLEN/8, x12, x8, x9)

inst_511:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03428f; op2val:0xbf03428f; 
   valaddr_reg:x11; val_offset:978*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 978*FLEN/8, x12, x8, x9)

inst_512:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03428f; op2val:0xbf03428f; 
   valaddr_reg:x11; val_offset:980*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 980*FLEN/8, x12, x8, x9)

inst_513:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03428f; op2val:0xbf03428f; 
   valaddr_reg:x11; val_offset:982*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 982*FLEN/8, x12, x8, x9)

inst_514:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03428f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x03428f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03428f; op2val:0xbf03428f; 
   valaddr_reg:x11; val_offset:984*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 984*FLEN/8, x12, x8, x9)

inst_515:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a6233; op2val:0xbe7a6233; 
   valaddr_reg:x11; val_offset:986*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 986*FLEN/8, x12, x8, x9)

inst_516:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a6233; op2val:0xbe7a6233; 
   valaddr_reg:x11; val_offset:988*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 988*FLEN/8, x12, x8, x9)

inst_517:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a6233; op2val:0xbe7a6233; 
   valaddr_reg:x11; val_offset:990*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 990*FLEN/8, x12, x8, x9)

inst_518:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a6233; op2val:0xbe7a6233; 
   valaddr_reg:x11; val_offset:992*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 992*FLEN/8, x12, x8, x9)

inst_519:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a6233 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7a6233 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a6233; op2val:0xbe7a6233; 
   valaddr_reg:x11; val_offset:994*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 994*FLEN/8, x12, x8, x9)

inst_520:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f016307; op2val:0xbf016307; 
   valaddr_reg:x11; val_offset:996*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 996*FLEN/8, x12, x8, x9)

inst_521:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f016307; op2val:0xbf016307; 
   valaddr_reg:x11; val_offset:998*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 998*FLEN/8, x12, x8, x9)

inst_522:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f016307; op2val:0xbf016307; 
   valaddr_reg:x11; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1000*FLEN/8, x12, x8, x9)

inst_523:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f016307; op2val:0xbf016307; 
   valaddr_reg:x11; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1002*FLEN/8, x12, x8, x9)

inst_524:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x016307 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x016307 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f016307; op2val:0xbf016307; 
   valaddr_reg:x11; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1004*FLEN/8, x12, x8, x9)

inst_525:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0879c0; op2val:0xbf0879c0; 
   valaddr_reg:x11; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1006*FLEN/8, x12, x8, x9)

inst_526:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0879c0; op2val:0xbf0879c0; 
   valaddr_reg:x11; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1008*FLEN/8, x12, x8, x9)

inst_527:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0879c0; op2val:0xbf0879c0; 
   valaddr_reg:x11; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1010*FLEN/8, x12, x8, x9)

inst_528:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0879c0; op2val:0xbf0879c0; 
   valaddr_reg:x11; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1012*FLEN/8, x12, x8, x9)

inst_529:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0879c0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0879c0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0879c0; op2val:0xbf0879c0; 
   valaddr_reg:x11; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1014*FLEN/8, x12, x8, x9)

inst_530:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfff770; op2val:0xbdfff770; 
   valaddr_reg:x11; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1016*FLEN/8, x12, x8, x9)

inst_531:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfff770; op2val:0xbdfff770; 
   valaddr_reg:x11; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1018*FLEN/8, x12, x8, x9)

inst_532:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfff770; op2val:0xbdfff770; 
   valaddr_reg:x11; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1020*FLEN/8, x12, x8, x9)

inst_533:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfff770; op2val:0xbdfff770; 
   valaddr_reg:x11; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1022*FLEN/8, x12, x8, x9)

inst_534:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7ff770 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ff770 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfff770; op2val:0xbdfff770; 
   valaddr_reg:x11; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1024*FLEN/8, x12, x8, x9)

inst_535:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4fdf25; op2val:0xbf4fdf25; 
   valaddr_reg:x11; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1026*FLEN/8, x12, x8, x9)

inst_536:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4fdf25; op2val:0xbf4fdf25; 
   valaddr_reg:x11; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1028*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_4)

inst_537:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4fdf25; op2val:0xbf4fdf25; 
   valaddr_reg:x11; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1030*FLEN/8, x12, x8, x9)

inst_538:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4fdf25; op2val:0xbf4fdf25; 
   valaddr_reg:x11; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1032*FLEN/8, x12, x8, x9)

inst_539:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4fdf25 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4fdf25 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4fdf25; op2val:0xbf4fdf25; 
   valaddr_reg:x11; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1034*FLEN/8, x12, x8, x9)

inst_540:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebbdbca; op2val:0xbebbdbca; 
   valaddr_reg:x11; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1036*FLEN/8, x12, x8, x9)

inst_541:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebbdbca; op2val:0xbebbdbca; 
   valaddr_reg:x11; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1038*FLEN/8, x12, x8, x9)

inst_542:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebbdbca; op2val:0xbebbdbca; 
   valaddr_reg:x11; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1040*FLEN/8, x12, x8, x9)

inst_543:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebbdbca; op2val:0xbebbdbca; 
   valaddr_reg:x11; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1042*FLEN/8, x12, x8, x9)

inst_544:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3bdbca and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3bdbca and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebbdbca; op2val:0xbebbdbca; 
   valaddr_reg:x11; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1044*FLEN/8, x12, x8, x9)

inst_545:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8c8423; op2val:0xbe8c8423; 
   valaddr_reg:x11; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1046*FLEN/8, x12, x8, x9)

inst_546:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8c8423; op2val:0xbe8c8423; 
   valaddr_reg:x11; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1048*FLEN/8, x12, x8, x9)

inst_547:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8c8423; op2val:0xbe8c8423; 
   valaddr_reg:x11; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1050*FLEN/8, x12, x8, x9)

inst_548:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8c8423; op2val:0xbe8c8423; 
   valaddr_reg:x11; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1052*FLEN/8, x12, x8, x9)

inst_549:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0c8423 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0c8423 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8c8423; op2val:0xbe8c8423; 
   valaddr_reg:x11; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1054*FLEN/8, x12, x8, x9)

inst_550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f192288; op2val:0xbf192288; 
   valaddr_reg:x11; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1056*FLEN/8, x12, x8, x9)

inst_551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f192288; op2val:0xbf192288; 
   valaddr_reg:x11; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1058*FLEN/8, x12, x8, x9)

inst_552:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f192288; op2val:0xbf192288; 
   valaddr_reg:x11; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1060*FLEN/8, x12, x8, x9)

inst_553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f192288; op2val:0xbf192288; 
   valaddr_reg:x11; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1062*FLEN/8, x12, x8, x9)

inst_554:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x192288 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x192288 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f192288; op2val:0xbf192288; 
   valaddr_reg:x11; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1064*FLEN/8, x12, x8, x9)

inst_555:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f0f03; op2val:0xbf2f0f03; 
   valaddr_reg:x11; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1066*FLEN/8, x12, x8, x9)

inst_556:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f0f03; op2val:0xbf2f0f03; 
   valaddr_reg:x11; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1068*FLEN/8, x12, x8, x9)

inst_557:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f0f03; op2val:0xbf2f0f03; 
   valaddr_reg:x11; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1070*FLEN/8, x12, x8, x9)

inst_558:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f0f03; op2val:0xbf2f0f03; 
   valaddr_reg:x11; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1072*FLEN/8, x12, x8, x9)

inst_559:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f0f03 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f0f03 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f0f03; op2val:0xbf2f0f03; 
   valaddr_reg:x11; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1074*FLEN/8, x12, x8, x9)

inst_560:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90bae3; op2val:0xbe90bae3; 
   valaddr_reg:x11; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1076*FLEN/8, x12, x8, x9)

inst_561:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90bae3; op2val:0xbe90bae3; 
   valaddr_reg:x11; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1078*FLEN/8, x12, x8, x9)

inst_562:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90bae3; op2val:0xbe90bae3; 
   valaddr_reg:x11; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1080*FLEN/8, x12, x8, x9)

inst_563:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90bae3; op2val:0xbe90bae3; 
   valaddr_reg:x11; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1082*FLEN/8, x12, x8, x9)

inst_564:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10bae3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10bae3 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90bae3; op2val:0xbe90bae3; 
   valaddr_reg:x11; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1084*FLEN/8, x12, x8, x9)

inst_565:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3585e5; op2val:0xbe3585e5; 
   valaddr_reg:x11; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1086*FLEN/8, x12, x8, x9)

inst_566:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3585e5; op2val:0xbe3585e5; 
   valaddr_reg:x11; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1088*FLEN/8, x12, x8, x9)

inst_567:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3585e5; op2val:0xbe3585e5; 
   valaddr_reg:x11; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1090*FLEN/8, x12, x8, x9)

inst_568:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3585e5; op2val:0xbe3585e5; 
   valaddr_reg:x11; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1092*FLEN/8, x12, x8, x9)

inst_569:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x3585e5 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3585e5 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e3585e5; op2val:0xbe3585e5; 
   valaddr_reg:x11; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1094*FLEN/8, x12, x8, x9)

inst_570:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f66f79a; op2val:0xbf66f79a; 
   valaddr_reg:x11; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1096*FLEN/8, x12, x8, x9)

inst_571:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f66f79a; op2val:0xbf66f79a; 
   valaddr_reg:x11; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1098*FLEN/8, x12, x8, x9)

inst_572:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f66f79a; op2val:0xbf66f79a; 
   valaddr_reg:x11; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1100*FLEN/8, x12, x8, x9)

inst_573:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f66f79a; op2val:0xbf66f79a; 
   valaddr_reg:x11; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1102*FLEN/8, x12, x8, x9)

inst_574:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x66f79a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x66f79a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f66f79a; op2val:0xbf66f79a; 
   valaddr_reg:x11; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1104*FLEN/8, x12, x8, x9)

inst_575:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3937b; op2val:0xbeb3937b; 
   valaddr_reg:x11; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1106*FLEN/8, x12, x8, x9)

inst_576:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3937b; op2val:0xbeb3937b; 
   valaddr_reg:x11; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1108*FLEN/8, x12, x8, x9)

inst_577:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3937b; op2val:0xbeb3937b; 
   valaddr_reg:x11; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1110*FLEN/8, x12, x8, x9)

inst_578:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3937b; op2val:0xbeb3937b; 
   valaddr_reg:x11; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1112*FLEN/8, x12, x8, x9)

inst_579:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33937b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x33937b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3937b; op2val:0xbeb3937b; 
   valaddr_reg:x11; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1114*FLEN/8, x12, x8, x9)

inst_580:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f38530d; op2val:0xbf38530d; 
   valaddr_reg:x11; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1116*FLEN/8, x12, x8, x9)

inst_581:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f38530d; op2val:0xbf38530d; 
   valaddr_reg:x11; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1118*FLEN/8, x12, x8, x9)

inst_582:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f38530d; op2val:0xbf38530d; 
   valaddr_reg:x11; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1120*FLEN/8, x12, x8, x9)

inst_583:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f38530d; op2val:0xbf38530d; 
   valaddr_reg:x11; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1122*FLEN/8, x12, x8, x9)

inst_584:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x38530d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x38530d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f38530d; op2val:0xbf38530d; 
   valaddr_reg:x11; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1124*FLEN/8, x12, x8, x9)

inst_585:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665a8e; op2val:0xbf665a8e; 
   valaddr_reg:x11; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1126*FLEN/8, x12, x8, x9)

inst_586:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665a8e; op2val:0xbf665a8e; 
   valaddr_reg:x11; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1128*FLEN/8, x12, x8, x9)

inst_587:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665a8e; op2val:0xbf665a8e; 
   valaddr_reg:x11; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1130*FLEN/8, x12, x8, x9)

inst_588:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665a8e; op2val:0xbf665a8e; 
   valaddr_reg:x11; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1132*FLEN/8, x12, x8, x9)

inst_589:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665a8e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x665a8e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665a8e; op2val:0xbf665a8e; 
   valaddr_reg:x11; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1134*FLEN/8, x12, x8, x9)

inst_590:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a721e; op2val:0xbf1a721e; 
   valaddr_reg:x11; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1136*FLEN/8, x12, x8, x9)

inst_591:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a721e; op2val:0xbf1a721e; 
   valaddr_reg:x11; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1138*FLEN/8, x12, x8, x9)

inst_592:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a721e; op2val:0xbf1a721e; 
   valaddr_reg:x11; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1140*FLEN/8, x12, x8, x9)

inst_593:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a721e; op2val:0xbf1a721e; 
   valaddr_reg:x11; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1142*FLEN/8, x12, x8, x9)

inst_594:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a721e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a721e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a721e; op2val:0xbf1a721e; 
   valaddr_reg:x11; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1144*FLEN/8, x12, x8, x9)

inst_595:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f39ac5a; op2val:0xbf39ac5a; 
   valaddr_reg:x11; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1146*FLEN/8, x12, x8, x9)

inst_596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f39ac5a; op2val:0xbf39ac5a; 
   valaddr_reg:x11; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1148*FLEN/8, x12, x8, x9)

inst_597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f39ac5a; op2val:0xbf39ac5a; 
   valaddr_reg:x11; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1150*FLEN/8, x12, x8, x9)

inst_598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f39ac5a; op2val:0xbf39ac5a; 
   valaddr_reg:x11; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1152*FLEN/8, x12, x8, x9)

inst_599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x39ac5a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x39ac5a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f39ac5a; op2val:0xbf39ac5a; 
   valaddr_reg:x11; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1154*FLEN/8, x12, x8, x9)

inst_600:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54a46b; op2val:0xbe54a46b; 
   valaddr_reg:x11; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1156*FLEN/8, x12, x8, x9)

inst_601:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54a46b; op2val:0xbe54a46b; 
   valaddr_reg:x11; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1158*FLEN/8, x12, x8, x9)

inst_602:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54a46b; op2val:0xbe54a46b; 
   valaddr_reg:x11; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1160*FLEN/8, x12, x8, x9)

inst_603:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54a46b; op2val:0xbe54a46b; 
   valaddr_reg:x11; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1162*FLEN/8, x12, x8, x9)

inst_604:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54a46b and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54a46b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54a46b; op2val:0xbe54a46b; 
   valaddr_reg:x11; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1164*FLEN/8, x12, x8, x9)

inst_605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5dd826; op2val:0xbf5dd826; 
   valaddr_reg:x11; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1166*FLEN/8, x12, x8, x9)

inst_606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5dd826; op2val:0xbf5dd826; 
   valaddr_reg:x11; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1168*FLEN/8, x12, x8, x9)

inst_607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5dd826; op2val:0xbf5dd826; 
   valaddr_reg:x11; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1170*FLEN/8, x12, x8, x9)

inst_608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5dd826; op2val:0xbf5dd826; 
   valaddr_reg:x11; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1172*FLEN/8, x12, x8, x9)

inst_609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5dd826 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5dd826 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5dd826; op2val:0xbf5dd826; 
   valaddr_reg:x11; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1174*FLEN/8, x12, x8, x9)

inst_610:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; 
   valaddr_reg:x11; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1176*FLEN/8, x12, x8, x9)

inst_611:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; 
   valaddr_reg:x11; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1178*FLEN/8, x12, x8, x9)

inst_612:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; 
   valaddr_reg:x11; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1180*FLEN/8, x12, x8, x9)

inst_613:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; 
   valaddr_reg:x11; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1182*FLEN/8, x12, x8, x9)

inst_614:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x32cc8a and fs2 == 1 and fe2 == 0x7d and fm2 == 0x32cc8a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb2cc8a; op2val:0xbeb2cc8a; 
   valaddr_reg:x11; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1184*FLEN/8, x12, x8, x9)

inst_615:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e033620; op2val:0xbe033620; 
   valaddr_reg:x11; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1186*FLEN/8, x12, x8, x9)

inst_616:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e033620; op2val:0xbe033620; 
   valaddr_reg:x11; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1188*FLEN/8, x12, x8, x9)

inst_617:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e033620; op2val:0xbe033620; 
   valaddr_reg:x11; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1190*FLEN/8, x12, x8, x9)

inst_618:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e033620; op2val:0xbe033620; 
   valaddr_reg:x11; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1192*FLEN/8, x12, x8, x9)

inst_619:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x033620 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x033620 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e033620; op2val:0xbe033620; 
   valaddr_reg:x11; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1194*FLEN/8, x12, x8, x9)

inst_620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; 
   valaddr_reg:x11; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1196*FLEN/8, x12, x8, x9)

inst_621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; 
   valaddr_reg:x11; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1198*FLEN/8, x12, x8, x9)

inst_622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; 
   valaddr_reg:x11; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1200*FLEN/8, x12, x8, x9)

inst_623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; 
   valaddr_reg:x11; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1202*FLEN/8, x12, x8, x9)

inst_624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7b3eb6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7b3eb6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7b3eb6; op2val:0xbf7b3eb6; 
   valaddr_reg:x11; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1204*FLEN/8, x12, x8, x9)

inst_625:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea35464; op2val:0xbea35464; 
   valaddr_reg:x11; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1206*FLEN/8, x12, x8, x9)

inst_626:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea35464; op2val:0xbea35464; 
   valaddr_reg:x11; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1208*FLEN/8, x12, x8, x9)

inst_627:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea35464; op2val:0xbea35464; 
   valaddr_reg:x11; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1210*FLEN/8, x12, x8, x9)

inst_628:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea35464; op2val:0xbea35464; 
   valaddr_reg:x11; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1212*FLEN/8, x12, x8, x9)

inst_629:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x235464 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x235464 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea35464; op2val:0xbea35464; 
   valaddr_reg:x11; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1214*FLEN/8, x12, x8, x9)

inst_630:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d5b2023; op2val:0xbd5b2023; 
   valaddr_reg:x11; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1216*FLEN/8, x12, x8, x9)

inst_631:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d5b2023; op2val:0xbd5b2023; 
   valaddr_reg:x11; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1218*FLEN/8, x12, x8, x9)

inst_632:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d5b2023; op2val:0xbd5b2023; 
   valaddr_reg:x11; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1220*FLEN/8, x12, x8, x9)

inst_633:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d5b2023; op2val:0xbd5b2023; 
   valaddr_reg:x11; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1222*FLEN/8, x12, x8, x9)

inst_634:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x5b2023 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x5b2023 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d5b2023; op2val:0xbd5b2023; 
   valaddr_reg:x11; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1224*FLEN/8, x12, x8, x9)

inst_635:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db89ff2; op2val:0xbdb89ff2; 
   valaddr_reg:x11; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1226*FLEN/8, x12, x8, x9)

inst_636:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db89ff2; op2val:0xbdb89ff2; 
   valaddr_reg:x11; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1228*FLEN/8, x12, x8, x9)

inst_637:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db89ff2; op2val:0xbdb89ff2; 
   valaddr_reg:x11; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1230*FLEN/8, x12, x8, x9)

inst_638:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db89ff2; op2val:0xbdb89ff2; 
   valaddr_reg:x11; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1232*FLEN/8, x12, x8, x9)

inst_639:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x389ff2 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x389ff2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db89ff2; op2val:0xbdb89ff2; 
   valaddr_reg:x11; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1234*FLEN/8, x12, x8, x9)

inst_640:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e807166; op2val:0xbe807166; 
   valaddr_reg:x11; val_offset:1236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1236*FLEN/8, x12, x8, x9)

inst_641:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e807166; op2val:0xbe807166; 
   valaddr_reg:x11; val_offset:1238*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1238*FLEN/8, x12, x8, x9)

inst_642:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e807166; op2val:0xbe807166; 
   valaddr_reg:x11; val_offset:1240*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1240*FLEN/8, x12, x8, x9)

inst_643:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e807166; op2val:0xbe807166; 
   valaddr_reg:x11; val_offset:1242*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1242*FLEN/8, x12, x8, x9)

inst_644:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x007166 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x007166 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e807166; op2val:0xbe807166; 
   valaddr_reg:x11; val_offset:1244*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1244*FLEN/8, x12, x8, x9)

inst_645:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb07468; op2val:0xbeb07468; 
   valaddr_reg:x11; val_offset:1246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1246*FLEN/8, x12, x8, x9)

inst_646:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb07468; op2val:0xbeb07468; 
   valaddr_reg:x11; val_offset:1248*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1248*FLEN/8, x12, x8, x9)

inst_647:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb07468; op2val:0xbeb07468; 
   valaddr_reg:x11; val_offset:1250*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1250*FLEN/8, x12, x8, x9)

inst_648:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb07468; op2val:0xbeb07468; 
   valaddr_reg:x11; val_offset:1252*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1252*FLEN/8, x12, x8, x9)

inst_649:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x307468 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x307468 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb07468; op2val:0xbeb07468; 
   valaddr_reg:x11; val_offset:1254*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1254*FLEN/8, x12, x8, x9)

inst_650:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc73fe6; op2val:0xbdc73fe6; 
   valaddr_reg:x11; val_offset:1256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1256*FLEN/8, x12, x8, x9)

inst_651:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc73fe6; op2val:0xbdc73fe6; 
   valaddr_reg:x11; val_offset:1258*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1258*FLEN/8, x12, x8, x9)

inst_652:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc73fe6; op2val:0xbdc73fe6; 
   valaddr_reg:x11; val_offset:1260*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1260*FLEN/8, x12, x8, x9)

inst_653:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc73fe6; op2val:0xbdc73fe6; 
   valaddr_reg:x11; val_offset:1262*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1262*FLEN/8, x12, x8, x9)

inst_654:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x473fe6 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x473fe6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc73fe6; op2val:0xbdc73fe6; 
   valaddr_reg:x11; val_offset:1264*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1264*FLEN/8, x12, x8, x9)

inst_655:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20a72a; op2val:0xbf20a72a; 
   valaddr_reg:x11; val_offset:1266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1266*FLEN/8, x12, x8, x9)

inst_656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20a72a; op2val:0xbf20a72a; 
   valaddr_reg:x11; val_offset:1268*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1268*FLEN/8, x12, x8, x9)

inst_657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20a72a; op2val:0xbf20a72a; 
   valaddr_reg:x11; val_offset:1270*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1270*FLEN/8, x12, x8, x9)

inst_658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20a72a; op2val:0xbf20a72a; 
   valaddr_reg:x11; val_offset:1272*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1272*FLEN/8, x12, x8, x9)

inst_659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20a72a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x20a72a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20a72a; op2val:0xbf20a72a; 
   valaddr_reg:x11; val_offset:1274*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1274*FLEN/8, x12, x8, x9)

inst_660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4acaba; op2val:0xbf4acaba; 
   valaddr_reg:x11; val_offset:1276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1276*FLEN/8, x12, x8, x9)

inst_661:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4acaba; op2val:0xbf4acaba; 
   valaddr_reg:x11; val_offset:1278*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1278*FLEN/8, x12, x8, x9)

inst_662:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4acaba; op2val:0xbf4acaba; 
   valaddr_reg:x11; val_offset:1280*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1280*FLEN/8, x12, x8, x9)

inst_663:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4acaba; op2val:0xbf4acaba; 
   valaddr_reg:x11; val_offset:1282*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1282*FLEN/8, x12, x8, x9)

inst_664:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4acaba and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4acaba and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4acaba; op2val:0xbf4acaba; 
   valaddr_reg:x11; val_offset:1284*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1284*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_5)

inst_665:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7db8eb; op2val:0xbf7db8eb; 
   valaddr_reg:x11; val_offset:1286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1286*FLEN/8, x12, x8, x9)

inst_666:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7db8eb; op2val:0xbf7db8eb; 
   valaddr_reg:x11; val_offset:1288*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1288*FLEN/8, x12, x8, x9)

inst_667:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7db8eb; op2val:0xbf7db8eb; 
   valaddr_reg:x11; val_offset:1290*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1290*FLEN/8, x12, x8, x9)

inst_668:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7db8eb; op2val:0xbf7db8eb; 
   valaddr_reg:x11; val_offset:1292*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1292*FLEN/8, x12, x8, x9)

inst_669:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7db8eb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7db8eb and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7db8eb; op2val:0xbf7db8eb; 
   valaddr_reg:x11; val_offset:1294*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1294*FLEN/8, x12, x8, x9)

inst_670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; 
   valaddr_reg:x11; val_offset:1296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1296*FLEN/8, x12, x8, x9)

inst_671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; 
   valaddr_reg:x11; val_offset:1298*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1298*FLEN/8, x12, x8, x9)

inst_672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; 
   valaddr_reg:x11; val_offset:1300*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1300*FLEN/8, x12, x8, x9)

inst_673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; 
   valaddr_reg:x11; val_offset:1302*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1302*FLEN/8, x12, x8, x9)

inst_674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2aa5bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2aa5bf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2aa5bf; op2val:0xbf2aa5bf; 
   valaddr_reg:x11; val_offset:1304*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1304*FLEN/8, x12, x8, x9)

inst_675:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9020d7; op2val:0xbe9020d7; 
   valaddr_reg:x11; val_offset:1306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1306*FLEN/8, x12, x8, x9)

inst_676:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9020d7; op2val:0xbe9020d7; 
   valaddr_reg:x11; val_offset:1308*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1308*FLEN/8, x12, x8, x9)

inst_677:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9020d7; op2val:0xbe9020d7; 
   valaddr_reg:x11; val_offset:1310*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1310*FLEN/8, x12, x8, x9)

inst_678:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9020d7; op2val:0xbe9020d7; 
   valaddr_reg:x11; val_offset:1312*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1312*FLEN/8, x12, x8, x9)

inst_679:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1020d7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1020d7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9020d7; op2val:0xbe9020d7; 
   valaddr_reg:x11; val_offset:1314*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1314*FLEN/8, x12, x8, x9)

inst_680:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec248d4; op2val:0xbec248d4; 
   valaddr_reg:x11; val_offset:1316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1316*FLEN/8, x12, x8, x9)

inst_681:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec248d4; op2val:0xbec248d4; 
   valaddr_reg:x11; val_offset:1318*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1318*FLEN/8, x12, x8, x9)

inst_682:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec248d4; op2val:0xbec248d4; 
   valaddr_reg:x11; val_offset:1320*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1320*FLEN/8, x12, x8, x9)

inst_683:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec248d4; op2val:0xbec248d4; 
   valaddr_reg:x11; val_offset:1322*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1322*FLEN/8, x12, x8, x9)

inst_684:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4248d4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4248d4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec248d4; op2val:0xbec248d4; 
   valaddr_reg:x11; val_offset:1324*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1324*FLEN/8, x12, x8, x9)

inst_685:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f560d3c; op2val:0xbf560d3c; 
   valaddr_reg:x11; val_offset:1326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1326*FLEN/8, x12, x8, x9)

inst_686:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f560d3c; op2val:0xbf560d3c; 
   valaddr_reg:x11; val_offset:1328*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1328*FLEN/8, x12, x8, x9)

inst_687:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f560d3c; op2val:0xbf560d3c; 
   valaddr_reg:x11; val_offset:1330*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1330*FLEN/8, x12, x8, x9)

inst_688:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f560d3c; op2val:0xbf560d3c; 
   valaddr_reg:x11; val_offset:1332*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1332*FLEN/8, x12, x8, x9)

inst_689:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x560d3c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x560d3c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f560d3c; op2val:0xbf560d3c; 
   valaddr_reg:x11; val_offset:1334*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1334*FLEN/8, x12, x8, x9)

inst_690:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35e14e; op2val:0xbf35e14e; 
   valaddr_reg:x11; val_offset:1336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1336*FLEN/8, x12, x8, x9)

inst_691:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35e14e; op2val:0xbf35e14e; 
   valaddr_reg:x11; val_offset:1338*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1338*FLEN/8, x12, x8, x9)

inst_692:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35e14e; op2val:0xbf35e14e; 
   valaddr_reg:x11; val_offset:1340*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1340*FLEN/8, x12, x8, x9)

inst_693:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35e14e; op2val:0xbf35e14e; 
   valaddr_reg:x11; val_offset:1342*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1342*FLEN/8, x12, x8, x9)

inst_694:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35e14e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35e14e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35e14e; op2val:0xbf35e14e; 
   valaddr_reg:x11; val_offset:1344*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1344*FLEN/8, x12, x8, x9)

inst_695:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee72d10; op2val:0xbee72d10; 
   valaddr_reg:x11; val_offset:1346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1346*FLEN/8, x12, x8, x9)

inst_696:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee72d10; op2val:0xbee72d10; 
   valaddr_reg:x11; val_offset:1348*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1348*FLEN/8, x12, x8, x9)

inst_697:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee72d10; op2val:0xbee72d10; 
   valaddr_reg:x11; val_offset:1350*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1350*FLEN/8, x12, x8, x9)

inst_698:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee72d10; op2val:0xbee72d10; 
   valaddr_reg:x11; val_offset:1352*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1352*FLEN/8, x12, x8, x9)

inst_699:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x672d10 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x672d10 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee72d10; op2val:0xbee72d10; 
   valaddr_reg:x11; val_offset:1354*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1354*FLEN/8, x12, x8, x9)

inst_700:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f059d8d; op2val:0xbf059d8d; 
   valaddr_reg:x11; val_offset:1356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1356*FLEN/8, x12, x8, x9)

inst_701:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f059d8d; op2val:0xbf059d8d; 
   valaddr_reg:x11; val_offset:1358*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1358*FLEN/8, x12, x8, x9)

inst_702:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f059d8d; op2val:0xbf059d8d; 
   valaddr_reg:x11; val_offset:1360*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1360*FLEN/8, x12, x8, x9)

inst_703:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f059d8d; op2val:0xbf059d8d; 
   valaddr_reg:x11; val_offset:1362*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1362*FLEN/8, x12, x8, x9)

inst_704:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x059d8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x059d8d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f059d8d; op2val:0xbf059d8d; 
   valaddr_reg:x11; val_offset:1364*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1364*FLEN/8, x12, x8, x9)

inst_705:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a578; op2val:0xbf73a578; 
   valaddr_reg:x11; val_offset:1366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1366*FLEN/8, x12, x8, x9)

inst_706:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a578; op2val:0xbf73a578; 
   valaddr_reg:x11; val_offset:1368*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1368*FLEN/8, x12, x8, x9)

inst_707:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a578; op2val:0xbf73a578; 
   valaddr_reg:x11; val_offset:1370*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1370*FLEN/8, x12, x8, x9)

inst_708:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a578; op2val:0xbf73a578; 
   valaddr_reg:x11; val_offset:1372*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1372*FLEN/8, x12, x8, x9)

inst_709:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a578 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73a578 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a578; op2val:0xbf73a578; 
   valaddr_reg:x11; val_offset:1374*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1374*FLEN/8, x12, x8, x9)

inst_710:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef432c2; op2val:0xbef432c2; 
   valaddr_reg:x11; val_offset:1376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1376*FLEN/8, x12, x8, x9)

inst_711:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef432c2; op2val:0xbef432c2; 
   valaddr_reg:x11; val_offset:1378*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1378*FLEN/8, x12, x8, x9)

inst_712:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef432c2; op2val:0xbef432c2; 
   valaddr_reg:x11; val_offset:1380*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1380*FLEN/8, x12, x8, x9)

inst_713:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef432c2; op2val:0xbef432c2; 
   valaddr_reg:x11; val_offset:1382*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1382*FLEN/8, x12, x8, x9)

inst_714:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7432c2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7432c2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef432c2; op2val:0xbef432c2; 
   valaddr_reg:x11; val_offset:1384*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1384*FLEN/8, x12, x8, x9)

inst_715:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18c9e8; op2val:0xbf18c9e8; 
   valaddr_reg:x11; val_offset:1386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1386*FLEN/8, x12, x8, x9)

inst_716:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18c9e8; op2val:0xbf18c9e8; 
   valaddr_reg:x11; val_offset:1388*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1388*FLEN/8, x12, x8, x9)

inst_717:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18c9e8; op2val:0xbf18c9e8; 
   valaddr_reg:x11; val_offset:1390*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1390*FLEN/8, x12, x8, x9)

inst_718:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18c9e8; op2val:0xbf18c9e8; 
   valaddr_reg:x11; val_offset:1392*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1392*FLEN/8, x12, x8, x9)

inst_719:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18c9e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18c9e8 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18c9e8; op2val:0xbf18c9e8; 
   valaddr_reg:x11; val_offset:1394*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1394*FLEN/8, x12, x8, x9)

inst_720:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15d4cd; op2val:0xbf15d4cd; 
   valaddr_reg:x11; val_offset:1396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1396*FLEN/8, x12, x8, x9)

inst_721:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15d4cd; op2val:0xbf15d4cd; 
   valaddr_reg:x11; val_offset:1398*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1398*FLEN/8, x12, x8, x9)

inst_722:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15d4cd; op2val:0xbf15d4cd; 
   valaddr_reg:x11; val_offset:1400*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1400*FLEN/8, x12, x8, x9)

inst_723:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15d4cd; op2val:0xbf15d4cd; 
   valaddr_reg:x11; val_offset:1402*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1402*FLEN/8, x12, x8, x9)

inst_724:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x15d4cd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15d4cd and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f15d4cd; op2val:0xbf15d4cd; 
   valaddr_reg:x11; val_offset:1404*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1404*FLEN/8, x12, x8, x9)

inst_725:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbb11bf; op2val:0xbdbb11bf; 
   valaddr_reg:x11; val_offset:1406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1406*FLEN/8, x12, x8, x9)

inst_726:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbb11bf; op2val:0xbdbb11bf; 
   valaddr_reg:x11; val_offset:1408*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1408*FLEN/8, x12, x8, x9)

inst_727:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbb11bf; op2val:0xbdbb11bf; 
   valaddr_reg:x11; val_offset:1410*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1410*FLEN/8, x12, x8, x9)

inst_728:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbb11bf; op2val:0xbdbb11bf; 
   valaddr_reg:x11; val_offset:1412*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1412*FLEN/8, x12, x8, x9)

inst_729:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3b11bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x3b11bf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbb11bf; op2val:0xbdbb11bf; 
   valaddr_reg:x11; val_offset:1414*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1414*FLEN/8, x12, x8, x9)

inst_730:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22f8a7; op2val:0xbe22f8a7; 
   valaddr_reg:x11; val_offset:1416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1416*FLEN/8, x12, x8, x9)

inst_731:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22f8a7; op2val:0xbe22f8a7; 
   valaddr_reg:x11; val_offset:1418*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1418*FLEN/8, x12, x8, x9)

inst_732:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22f8a7; op2val:0xbe22f8a7; 
   valaddr_reg:x11; val_offset:1420*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1420*FLEN/8, x12, x8, x9)

inst_733:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22f8a7; op2val:0xbe22f8a7; 
   valaddr_reg:x11; val_offset:1422*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1422*FLEN/8, x12, x8, x9)

inst_734:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22f8a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22f8a7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22f8a7; op2val:0xbe22f8a7; 
   valaddr_reg:x11; val_offset:1424*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1424*FLEN/8, x12, x8, x9)

inst_735:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f280672; op2val:0xbf280672; 
   valaddr_reg:x11; val_offset:1426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1426*FLEN/8, x12, x8, x9)

inst_736:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f280672; op2val:0xbf280672; 
   valaddr_reg:x11; val_offset:1428*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1428*FLEN/8, x12, x8, x9)

inst_737:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f280672; op2val:0xbf280672; 
   valaddr_reg:x11; val_offset:1430*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1430*FLEN/8, x12, x8, x9)

inst_738:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f280672; op2val:0xbf280672; 
   valaddr_reg:x11; val_offset:1432*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1432*FLEN/8, x12, x8, x9)

inst_739:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x280672 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x280672 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f280672; op2val:0xbf280672; 
   valaddr_reg:x11; val_offset:1434*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1434*FLEN/8, x12, x8, x9)

inst_740:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99cea5; op2val:0xbe99cea5; 
   valaddr_reg:x11; val_offset:1436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1436*FLEN/8, x12, x8, x9)

inst_741:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99cea5; op2val:0xbe99cea5; 
   valaddr_reg:x11; val_offset:1438*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1438*FLEN/8, x12, x8, x9)

inst_742:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99cea5; op2val:0xbe99cea5; 
   valaddr_reg:x11; val_offset:1440*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1440*FLEN/8, x12, x8, x9)

inst_743:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99cea5; op2val:0xbe99cea5; 
   valaddr_reg:x11; val_offset:1442*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1442*FLEN/8, x12, x8, x9)

inst_744:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19cea5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19cea5 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99cea5; op2val:0xbe99cea5; 
   valaddr_reg:x11; val_offset:1444*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1444*FLEN/8, x12, x8, x9)

inst_745:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f32b67a; op2val:0xbf32b67a; 
   valaddr_reg:x11; val_offset:1446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1446*FLEN/8, x12, x8, x9)

inst_746:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f32b67a; op2val:0xbf32b67a; 
   valaddr_reg:x11; val_offset:1448*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1448*FLEN/8, x12, x8, x9)

inst_747:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f32b67a; op2val:0xbf32b67a; 
   valaddr_reg:x11; val_offset:1450*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1450*FLEN/8, x12, x8, x9)

inst_748:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f32b67a; op2val:0xbf32b67a; 
   valaddr_reg:x11; val_offset:1452*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1452*FLEN/8, x12, x8, x9)

inst_749:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x32b67a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x32b67a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f32b67a; op2val:0xbf32b67a; 
   valaddr_reg:x11; val_offset:1454*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1454*FLEN/8, x12, x8, x9)

inst_750:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd844ed; op2val:0xbdd844ed; 
   valaddr_reg:x11; val_offset:1456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1456*FLEN/8, x12, x8, x9)

inst_751:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd844ed; op2val:0xbdd844ed; 
   valaddr_reg:x11; val_offset:1458*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1458*FLEN/8, x12, x8, x9)

inst_752:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd844ed; op2val:0xbdd844ed; 
   valaddr_reg:x11; val_offset:1460*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1460*FLEN/8, x12, x8, x9)

inst_753:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd844ed; op2val:0xbdd844ed; 
   valaddr_reg:x11; val_offset:1462*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1462*FLEN/8, x12, x8, x9)

inst_754:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5844ed and fs2 == 1 and fe2 == 0x7b and fm2 == 0x5844ed and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd844ed; op2val:0xbdd844ed; 
   valaddr_reg:x11; val_offset:1464*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1464*FLEN/8, x12, x8, x9)

inst_755:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf1baa; op2val:0xbebf1baa; 
   valaddr_reg:x11; val_offset:1466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1466*FLEN/8, x12, x8, x9)

inst_756:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf1baa; op2val:0xbebf1baa; 
   valaddr_reg:x11; val_offset:1468*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1468*FLEN/8, x12, x8, x9)

inst_757:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf1baa; op2val:0xbebf1baa; 
   valaddr_reg:x11; val_offset:1470*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1470*FLEN/8, x12, x8, x9)

inst_758:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf1baa; op2val:0xbebf1baa; 
   valaddr_reg:x11; val_offset:1472*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1472*FLEN/8, x12, x8, x9)

inst_759:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f1baa and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3f1baa and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf1baa; op2val:0xbebf1baa; 
   valaddr_reg:x11; val_offset:1474*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1474*FLEN/8, x12, x8, x9)

inst_760:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd06674; op2val:0xbcd06674; 
   valaddr_reg:x11; val_offset:1476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1476*FLEN/8, x12, x8, x9)

inst_761:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd06674; op2val:0xbcd06674; 
   valaddr_reg:x11; val_offset:1478*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1478*FLEN/8, x12, x8, x9)

inst_762:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd06674; op2val:0xbcd06674; 
   valaddr_reg:x11; val_offset:1480*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1480*FLEN/8, x12, x8, x9)

inst_763:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd06674; op2val:0xbcd06674; 
   valaddr_reg:x11; val_offset:1482*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1482*FLEN/8, x12, x8, x9)

inst_764:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x506674 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x506674 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd06674; op2val:0xbcd06674; 
   valaddr_reg:x11; val_offset:1484*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1484*FLEN/8, x12, x8, x9)

inst_765:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f2575; op2val:0xbf6f2575; 
   valaddr_reg:x11; val_offset:1486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1486*FLEN/8, x12, x8, x9)

inst_766:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f2575; op2val:0xbf6f2575; 
   valaddr_reg:x11; val_offset:1488*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1488*FLEN/8, x12, x8, x9)

inst_767:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f2575; op2val:0xbf6f2575; 
   valaddr_reg:x11; val_offset:1490*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1490*FLEN/8, x12, x8, x9)

inst_768:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f2575; op2val:0xbf6f2575; 
   valaddr_reg:x11; val_offset:1492*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1492*FLEN/8, x12, x8, x9)

inst_769:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f2575 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f2575 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f2575; op2val:0xbf6f2575; 
   valaddr_reg:x11; val_offset:1494*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1494*FLEN/8, x12, x8, x9)

inst_770:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e801118; op2val:0xbe801118; 
   valaddr_reg:x11; val_offset:1496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1496*FLEN/8, x12, x8, x9)

inst_771:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e801118; op2val:0xbe801118; 
   valaddr_reg:x11; val_offset:1498*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1498*FLEN/8, x12, x8, x9)

inst_772:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e801118; op2val:0xbe801118; 
   valaddr_reg:x11; val_offset:1500*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1500*FLEN/8, x12, x8, x9)

inst_773:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e801118; op2val:0xbe801118; 
   valaddr_reg:x11; val_offset:1502*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1502*FLEN/8, x12, x8, x9)

inst_774:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x001118 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x001118 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e801118; op2val:0xbe801118; 
   valaddr_reg:x11; val_offset:1504*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1504*FLEN/8, x12, x8, x9)

inst_775:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7dfd79; op2val:0xbf7dfd79; 
   valaddr_reg:x11; val_offset:1506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1506*FLEN/8, x12, x8, x9)

inst_776:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7dfd79; op2val:0xbf7dfd79; 
   valaddr_reg:x11; val_offset:1508*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1508*FLEN/8, x12, x8, x9)

inst_777:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7dfd79; op2val:0xbf7dfd79; 
   valaddr_reg:x11; val_offset:1510*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1510*FLEN/8, x12, x8, x9)

inst_778:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7dfd79; op2val:0xbf7dfd79; 
   valaddr_reg:x11; val_offset:1512*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1512*FLEN/8, x12, x8, x9)

inst_779:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7dfd79 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dfd79 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7dfd79; op2val:0xbf7dfd79; 
   valaddr_reg:x11; val_offset:1514*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1514*FLEN/8, x12, x8, x9)

inst_780:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef64524; op2val:0xbef64524; 
   valaddr_reg:x11; val_offset:1516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1516*FLEN/8, x12, x8, x9)

inst_781:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef64524; op2val:0xbef64524; 
   valaddr_reg:x11; val_offset:1518*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1518*FLEN/8, x12, x8, x9)

inst_782:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef64524; op2val:0xbef64524; 
   valaddr_reg:x11; val_offset:1520*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1520*FLEN/8, x12, x8, x9)

inst_783:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef64524; op2val:0xbef64524; 
   valaddr_reg:x11; val_offset:1522*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1522*FLEN/8, x12, x8, x9)

inst_784:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x764524 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x764524 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef64524; op2val:0xbef64524; 
   valaddr_reg:x11; val_offset:1524*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1524*FLEN/8, x12, x8, x9)

inst_785:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02e9e0; op2val:0xbf02e9e0; 
   valaddr_reg:x11; val_offset:1526*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1526*FLEN/8, x12, x8, x9)

inst_786:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02e9e0; op2val:0xbf02e9e0; 
   valaddr_reg:x11; val_offset:1528*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1528*FLEN/8, x12, x8, x9)

inst_787:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02e9e0; op2val:0xbf02e9e0; 
   valaddr_reg:x11; val_offset:1530*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1530*FLEN/8, x12, x8, x9)

inst_788:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02e9e0; op2val:0xbf02e9e0; 
   valaddr_reg:x11; val_offset:1532*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1532*FLEN/8, x12, x8, x9)

inst_789:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02e9e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02e9e0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02e9e0; op2val:0xbf02e9e0; 
   valaddr_reg:x11; val_offset:1534*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1534*FLEN/8, x12, x8, x9)

inst_790:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea43274; op2val:0xbea43274; 
   valaddr_reg:x11; val_offset:1536*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1536*FLEN/8, x12, x8, x9)

inst_791:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea43274; op2val:0xbea43274; 
   valaddr_reg:x11; val_offset:1538*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1538*FLEN/8, x12, x8, x9)

inst_792:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea43274; op2val:0xbea43274; 
   valaddr_reg:x11; val_offset:1540*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1540*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_6)

inst_793:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea43274; op2val:0xbea43274; 
   valaddr_reg:x11; val_offset:1542*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1542*FLEN/8, x12, x8, x9)

inst_794:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x243274 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x243274 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea43274; op2val:0xbea43274; 
   valaddr_reg:x11; val_offset:1544*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1544*FLEN/8, x12, x8, x9)

inst_795:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f21b507; op2val:0xbf21b507; 
   valaddr_reg:x11; val_offset:1546*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1546*FLEN/8, x12, x8, x9)

inst_796:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f21b507; op2val:0xbf21b507; 
   valaddr_reg:x11; val_offset:1548*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1548*FLEN/8, x12, x8, x9)

inst_797:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f21b507; op2val:0xbf21b507; 
   valaddr_reg:x11; val_offset:1550*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1550*FLEN/8, x12, x8, x9)

inst_798:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f21b507; op2val:0xbf21b507; 
   valaddr_reg:x11; val_offset:1552*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1552*FLEN/8, x12, x8, x9)

inst_799:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x21b507 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21b507 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f21b507; op2val:0xbf21b507; 
   valaddr_reg:x11; val_offset:1554*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1554*FLEN/8, x12, x8, x9)

inst_800:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d3492; op2val:0xbf3d3492; 
   valaddr_reg:x11; val_offset:1556*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1556*FLEN/8, x12, x8, x9)

inst_801:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d3492; op2val:0xbf3d3492; 
   valaddr_reg:x11; val_offset:1558*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1558*FLEN/8, x12, x8, x9)

inst_802:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d3492; op2val:0xbf3d3492; 
   valaddr_reg:x11; val_offset:1560*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1560*FLEN/8, x12, x8, x9)

inst_803:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d3492; op2val:0xbf3d3492; 
   valaddr_reg:x11; val_offset:1562*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1562*FLEN/8, x12, x8, x9)

inst_804:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3d3492 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3d3492 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3d3492; op2val:0xbf3d3492; 
   valaddr_reg:x11; val_offset:1564*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1564*FLEN/8, x12, x8, x9)

inst_805:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f119b7f; op2val:0xbf119b7f; 
   valaddr_reg:x11; val_offset:1566*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1566*FLEN/8, x12, x8, x9)

inst_806:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f119b7f; op2val:0xbf119b7f; 
   valaddr_reg:x11; val_offset:1568*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1568*FLEN/8, x12, x8, x9)

inst_807:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f119b7f; op2val:0xbf119b7f; 
   valaddr_reg:x11; val_offset:1570*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1570*FLEN/8, x12, x8, x9)

inst_808:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f119b7f; op2val:0xbf119b7f; 
   valaddr_reg:x11; val_offset:1572*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1572*FLEN/8, x12, x8, x9)

inst_809:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x119b7f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x119b7f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f119b7f; op2val:0xbf119b7f; 
   valaddr_reg:x11; val_offset:1574*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1574*FLEN/8, x12, x8, x9)

inst_810:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6fa701; op2val:0xbf6fa701; 
   valaddr_reg:x11; val_offset:1576*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1576*FLEN/8, x12, x8, x9)

inst_811:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6fa701; op2val:0xbf6fa701; 
   valaddr_reg:x11; val_offset:1578*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1578*FLEN/8, x12, x8, x9)

inst_812:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6fa701; op2val:0xbf6fa701; 
   valaddr_reg:x11; val_offset:1580*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1580*FLEN/8, x12, x8, x9)

inst_813:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6fa701; op2val:0xbf6fa701; 
   valaddr_reg:x11; val_offset:1582*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1582*FLEN/8, x12, x8, x9)

inst_814:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6fa701 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fa701 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6fa701; op2val:0xbf6fa701; 
   valaddr_reg:x11; val_offset:1584*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1584*FLEN/8, x12, x8, x9)

inst_815:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9892e9; op2val:0xbe9892e9; 
   valaddr_reg:x11; val_offset:1586*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1586*FLEN/8, x12, x8, x9)

inst_816:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9892e9; op2val:0xbe9892e9; 
   valaddr_reg:x11; val_offset:1588*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1588*FLEN/8, x12, x8, x9)

inst_817:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9892e9; op2val:0xbe9892e9; 
   valaddr_reg:x11; val_offset:1590*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1590*FLEN/8, x12, x8, x9)

inst_818:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9892e9; op2val:0xbe9892e9; 
   valaddr_reg:x11; val_offset:1592*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1592*FLEN/8, x12, x8, x9)

inst_819:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1892e9 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1892e9 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9892e9; op2val:0xbe9892e9; 
   valaddr_reg:x11; val_offset:1594*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1594*FLEN/8, x12, x8, x9)

inst_820:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0c632b; op2val:0xbf0c632b; 
   valaddr_reg:x11; val_offset:1596*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1596*FLEN/8, x12, x8, x9)

inst_821:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0c632b; op2val:0xbf0c632b; 
   valaddr_reg:x11; val_offset:1598*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1598*FLEN/8, x12, x8, x9)

inst_822:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0c632b; op2val:0xbf0c632b; 
   valaddr_reg:x11; val_offset:1600*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1600*FLEN/8, x12, x8, x9)

inst_823:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0c632b; op2val:0xbf0c632b; 
   valaddr_reg:x11; val_offset:1602*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1602*FLEN/8, x12, x8, x9)

inst_824:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0c632b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c632b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0c632b; op2val:0xbf0c632b; 
   valaddr_reg:x11; val_offset:1604*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1604*FLEN/8, x12, x8, x9)

inst_825:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f618f18; op2val:0xbf618f18; 
   valaddr_reg:x11; val_offset:1606*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1606*FLEN/8, x12, x8, x9)

inst_826:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f618f18; op2val:0xbf618f18; 
   valaddr_reg:x11; val_offset:1608*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1608*FLEN/8, x12, x8, x9)

inst_827:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f618f18; op2val:0xbf618f18; 
   valaddr_reg:x11; val_offset:1610*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1610*FLEN/8, x12, x8, x9)

inst_828:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f618f18; op2val:0xbf618f18; 
   valaddr_reg:x11; val_offset:1612*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1612*FLEN/8, x12, x8, x9)

inst_829:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x618f18 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x618f18 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f618f18; op2val:0xbf618f18; 
   valaddr_reg:x11; val_offset:1614*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1614*FLEN/8, x12, x8, x9)

inst_830:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4af2d8; op2val:0xbf4af2d8; 
   valaddr_reg:x11; val_offset:1616*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1616*FLEN/8, x12, x8, x9)

inst_831:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4af2d8; op2val:0xbf4af2d8; 
   valaddr_reg:x11; val_offset:1618*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1618*FLEN/8, x12, x8, x9)

inst_832:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4af2d8; op2val:0xbf4af2d8; 
   valaddr_reg:x11; val_offset:1620*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1620*FLEN/8, x12, x8, x9)

inst_833:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4af2d8; op2val:0xbf4af2d8; 
   valaddr_reg:x11; val_offset:1622*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1622*FLEN/8, x12, x8, x9)

inst_834:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4af2d8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4af2d8 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4af2d8; op2val:0xbf4af2d8; 
   valaddr_reg:x11; val_offset:1624*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1624*FLEN/8, x12, x8, x9)

inst_835:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d55267a; op2val:0xbd55267a; 
   valaddr_reg:x11; val_offset:1626*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1626*FLEN/8, x12, x8, x9)

inst_836:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d55267a; op2val:0xbd55267a; 
   valaddr_reg:x11; val_offset:1628*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1628*FLEN/8, x12, x8, x9)

inst_837:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d55267a; op2val:0xbd55267a; 
   valaddr_reg:x11; val_offset:1630*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1630*FLEN/8, x12, x8, x9)

inst_838:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d55267a; op2val:0xbd55267a; 
   valaddr_reg:x11; val_offset:1632*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1632*FLEN/8, x12, x8, x9)

inst_839:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x55267a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x55267a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d55267a; op2val:0xbd55267a; 
   valaddr_reg:x11; val_offset:1634*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1634*FLEN/8, x12, x8, x9)

inst_840:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8883; op2val:0xbf5a8883; 
   valaddr_reg:x11; val_offset:1636*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1636*FLEN/8, x12, x8, x9)

inst_841:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8883; op2val:0xbf5a8883; 
   valaddr_reg:x11; val_offset:1638*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1638*FLEN/8, x12, x8, x9)

inst_842:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8883; op2val:0xbf5a8883; 
   valaddr_reg:x11; val_offset:1640*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1640*FLEN/8, x12, x8, x9)

inst_843:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8883; op2val:0xbf5a8883; 
   valaddr_reg:x11; val_offset:1642*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1642*FLEN/8, x12, x8, x9)

inst_844:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a8883 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a8883 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a8883; op2val:0xbf5a8883; 
   valaddr_reg:x11; val_offset:1644*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1644*FLEN/8, x12, x8, x9)

inst_845:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f394c; op2val:0xbf1f394c; 
   valaddr_reg:x11; val_offset:1646*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1646*FLEN/8, x12, x8, x9)

inst_846:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f394c; op2val:0xbf1f394c; 
   valaddr_reg:x11; val_offset:1648*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1648*FLEN/8, x12, x8, x9)

inst_847:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f394c; op2val:0xbf1f394c; 
   valaddr_reg:x11; val_offset:1650*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1650*FLEN/8, x12, x8, x9)

inst_848:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f394c; op2val:0xbf1f394c; 
   valaddr_reg:x11; val_offset:1652*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1652*FLEN/8, x12, x8, x9)

inst_849:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f394c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f394c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f394c; op2val:0xbf1f394c; 
   valaddr_reg:x11; val_offset:1654*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1654*FLEN/8, x12, x8, x9)

inst_850:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f594226; op2val:0xbf594226; 
   valaddr_reg:x11; val_offset:1656*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1656*FLEN/8, x12, x8, x9)

inst_851:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f594226; op2val:0xbf594226; 
   valaddr_reg:x11; val_offset:1658*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1658*FLEN/8, x12, x8, x9)

inst_852:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f594226; op2val:0xbf594226; 
   valaddr_reg:x11; val_offset:1660*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1660*FLEN/8, x12, x8, x9)

inst_853:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f594226; op2val:0xbf594226; 
   valaddr_reg:x11; val_offset:1662*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1662*FLEN/8, x12, x8, x9)

inst_854:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x594226 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x594226 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f594226; op2val:0xbf594226; 
   valaddr_reg:x11; val_offset:1664*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1664*FLEN/8, x12, x8, x9)

inst_855:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8b5a36; op2val:0xbc8b5a36; 
   valaddr_reg:x11; val_offset:1666*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1666*FLEN/8, x12, x8, x9)

inst_856:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8b5a36; op2val:0xbc8b5a36; 
   valaddr_reg:x11; val_offset:1668*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1668*FLEN/8, x12, x8, x9)

inst_857:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8b5a36; op2val:0xbc8b5a36; 
   valaddr_reg:x11; val_offset:1670*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1670*FLEN/8, x12, x8, x9)

inst_858:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8b5a36; op2val:0xbc8b5a36; 
   valaddr_reg:x11; val_offset:1672*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1672*FLEN/8, x12, x8, x9)

inst_859:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0b5a36 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x0b5a36 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8b5a36; op2val:0xbc8b5a36; 
   valaddr_reg:x11; val_offset:1674*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1674*FLEN/8, x12, x8, x9)

inst_860:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18167c; op2val:0xbf18167c; 
   valaddr_reg:x11; val_offset:1676*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1676*FLEN/8, x12, x8, x9)

inst_861:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18167c; op2val:0xbf18167c; 
   valaddr_reg:x11; val_offset:1678*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1678*FLEN/8, x12, x8, x9)

inst_862:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18167c; op2val:0xbf18167c; 
   valaddr_reg:x11; val_offset:1680*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1680*FLEN/8, x12, x8, x9)

inst_863:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18167c; op2val:0xbf18167c; 
   valaddr_reg:x11; val_offset:1682*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1682*FLEN/8, x12, x8, x9)

inst_864:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x18167c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x18167c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f18167c; op2val:0xbf18167c; 
   valaddr_reg:x11; val_offset:1684*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1684*FLEN/8, x12, x8, x9)

inst_865:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; 
   valaddr_reg:x11; val_offset:1686*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1686*FLEN/8, x12, x8, x9)

inst_866:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; 
   valaddr_reg:x11; val_offset:1688*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1688*FLEN/8, x12, x8, x9)

inst_867:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; 
   valaddr_reg:x11; val_offset:1690*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1690*FLEN/8, x12, x8, x9)

inst_868:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; 
   valaddr_reg:x11; val_offset:1692*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1692*FLEN/8, x12, x8, x9)

inst_869:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7a8f2f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7a8f2f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dfa8f2f; op2val:0xbdfa8f2f; 
   valaddr_reg:x11; val_offset:1694*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1694*FLEN/8, x12, x8, x9)

inst_870:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da9e36f; op2val:0xbda9e36f; 
   valaddr_reg:x11; val_offset:1696*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1696*FLEN/8, x12, x8, x9)

inst_871:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da9e36f; op2val:0xbda9e36f; 
   valaddr_reg:x11; val_offset:1698*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1698*FLEN/8, x12, x8, x9)

inst_872:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da9e36f; op2val:0xbda9e36f; 
   valaddr_reg:x11; val_offset:1700*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1700*FLEN/8, x12, x8, x9)

inst_873:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da9e36f; op2val:0xbda9e36f; 
   valaddr_reg:x11; val_offset:1702*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1702*FLEN/8, x12, x8, x9)

inst_874:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x29e36f and fs2 == 1 and fe2 == 0x7b and fm2 == 0x29e36f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da9e36f; op2val:0xbda9e36f; 
   valaddr_reg:x11; val_offset:1704*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1704*FLEN/8, x12, x8, x9)

inst_875:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f00662d; op2val:0xbf00662d; 
   valaddr_reg:x11; val_offset:1706*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1706*FLEN/8, x12, x8, x9)

inst_876:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f00662d; op2val:0xbf00662d; 
   valaddr_reg:x11; val_offset:1708*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1708*FLEN/8, x12, x8, x9)

inst_877:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f00662d; op2val:0xbf00662d; 
   valaddr_reg:x11; val_offset:1710*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1710*FLEN/8, x12, x8, x9)

inst_878:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f00662d; op2val:0xbf00662d; 
   valaddr_reg:x11; val_offset:1712*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1712*FLEN/8, x12, x8, x9)

inst_879:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x00662d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x00662d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f00662d; op2val:0xbf00662d; 
   valaddr_reg:x11; val_offset:1714*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1714*FLEN/8, x12, x8, x9)

inst_880:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; 
   valaddr_reg:x11; val_offset:1716*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1716*FLEN/8, x12, x8, x9)

inst_881:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; 
   valaddr_reg:x11; val_offset:1718*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1718*FLEN/8, x12, x8, x9)

inst_882:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; 
   valaddr_reg:x11; val_offset:1720*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1720*FLEN/8, x12, x8, x9)

inst_883:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; 
   valaddr_reg:x11; val_offset:1722*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1722*FLEN/8, x12, x8, x9)

inst_884:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28ecd3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x28ecd3 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8ecd3; op2val:0xbea8ecd3; 
   valaddr_reg:x11; val_offset:1724*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1724*FLEN/8, x12, x8, x9)

inst_885:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec7cc25; op2val:0xbec7cc25; 
   valaddr_reg:x11; val_offset:1726*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1726*FLEN/8, x12, x8, x9)

inst_886:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec7cc25; op2val:0xbec7cc25; 
   valaddr_reg:x11; val_offset:1728*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1728*FLEN/8, x12, x8, x9)

inst_887:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec7cc25; op2val:0xbec7cc25; 
   valaddr_reg:x11; val_offset:1730*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1730*FLEN/8, x12, x8, x9)

inst_888:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec7cc25; op2val:0xbec7cc25; 
   valaddr_reg:x11; val_offset:1732*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1732*FLEN/8, x12, x8, x9)

inst_889:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x47cc25 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47cc25 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec7cc25; op2val:0xbec7cc25; 
   valaddr_reg:x11; val_offset:1734*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1734*FLEN/8, x12, x8, x9)

inst_890:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e752; op2val:0xbf28e752; 
   valaddr_reg:x11; val_offset:1736*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1736*FLEN/8, x12, x8, x9)

inst_891:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e752; op2val:0xbf28e752; 
   valaddr_reg:x11; val_offset:1738*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1738*FLEN/8, x12, x8, x9)

inst_892:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e752; op2val:0xbf28e752; 
   valaddr_reg:x11; val_offset:1740*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1740*FLEN/8, x12, x8, x9)

inst_893:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e752; op2val:0xbf28e752; 
   valaddr_reg:x11; val_offset:1742*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1742*FLEN/8, x12, x8, x9)

inst_894:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e752 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28e752 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e752; op2val:0xbf28e752; 
   valaddr_reg:x11; val_offset:1744*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1744*FLEN/8, x12, x8, x9)

inst_895:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dced4df; op2val:0xbdced4df; 
   valaddr_reg:x11; val_offset:1746*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1746*FLEN/8, x12, x8, x9)

inst_896:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dced4df; op2val:0xbdced4df; 
   valaddr_reg:x11; val_offset:1748*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1748*FLEN/8, x12, x8, x9)

inst_897:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dced4df; op2val:0xbdced4df; 
   valaddr_reg:x11; val_offset:1750*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1750*FLEN/8, x12, x8, x9)

inst_898:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dced4df; op2val:0xbdced4df; 
   valaddr_reg:x11; val_offset:1752*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1752*FLEN/8, x12, x8, x9)

inst_899:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ed4df and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4ed4df and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dced4df; op2val:0xbdced4df; 
   valaddr_reg:x11; val_offset:1754*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1754*FLEN/8, x12, x8, x9)

inst_900:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76eb8d; op2val:0xbf76eb8d; 
   valaddr_reg:x11; val_offset:1756*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1756*FLEN/8, x12, x8, x9)

inst_901:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76eb8d; op2val:0xbf76eb8d; 
   valaddr_reg:x11; val_offset:1758*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1758*FLEN/8, x12, x8, x9)

inst_902:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76eb8d; op2val:0xbf76eb8d; 
   valaddr_reg:x11; val_offset:1760*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1760*FLEN/8, x12, x8, x9)

inst_903:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76eb8d; op2val:0xbf76eb8d; 
   valaddr_reg:x11; val_offset:1762*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1762*FLEN/8, x12, x8, x9)

inst_904:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76eb8d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76eb8d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76eb8d; op2val:0xbf76eb8d; 
   valaddr_reg:x11; val_offset:1764*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1764*FLEN/8, x12, x8, x9)

inst_905:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; 
   valaddr_reg:x11; val_offset:1766*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1766*FLEN/8, x12, x8, x9)

inst_906:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; 
   valaddr_reg:x11; val_offset:1768*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1768*FLEN/8, x12, x8, x9)

inst_907:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; 
   valaddr_reg:x11; val_offset:1770*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1770*FLEN/8, x12, x8, x9)

inst_908:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; 
   valaddr_reg:x11; val_offset:1772*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1772*FLEN/8, x12, x8, x9)

inst_909:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3e3cfc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e3cfc and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3e3cfc; op2val:0xbf3e3cfc; 
   valaddr_reg:x11; val_offset:1774*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1774*FLEN/8, x12, x8, x9)

inst_910:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e21735f; op2val:0xbe21735f; 
   valaddr_reg:x11; val_offset:1776*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1776*FLEN/8, x12, x8, x9)

inst_911:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e21735f; op2val:0xbe21735f; 
   valaddr_reg:x11; val_offset:1778*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1778*FLEN/8, x12, x8, x9)

inst_912:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e21735f; op2val:0xbe21735f; 
   valaddr_reg:x11; val_offset:1780*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1780*FLEN/8, x12, x8, x9)

inst_913:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e21735f; op2val:0xbe21735f; 
   valaddr_reg:x11; val_offset:1782*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1782*FLEN/8, x12, x8, x9)

inst_914:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x21735f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x21735f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e21735f; op2val:0xbe21735f; 
   valaddr_reg:x11; val_offset:1784*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1784*FLEN/8, x12, x8, x9)

inst_915:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90510c; op2val:0xbe90510c; 
   valaddr_reg:x11; val_offset:1786*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1786*FLEN/8, x12, x8, x9)

inst_916:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90510c; op2val:0xbe90510c; 
   valaddr_reg:x11; val_offset:1788*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1788*FLEN/8, x12, x8, x9)

inst_917:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90510c; op2val:0xbe90510c; 
   valaddr_reg:x11; val_offset:1790*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1790*FLEN/8, x12, x8, x9)

inst_918:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90510c; op2val:0xbe90510c; 
   valaddr_reg:x11; val_offset:1792*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1792*FLEN/8, x12, x8, x9)

inst_919:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10510c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10510c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90510c; op2val:0xbe90510c; 
   valaddr_reg:x11; val_offset:1794*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1794*FLEN/8, x12, x8, x9)

inst_920:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f0316; op2val:0xbf6f0316; 
   valaddr_reg:x11; val_offset:1796*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1796*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_7)

inst_921:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f0316; op2val:0xbf6f0316; 
   valaddr_reg:x11; val_offset:1798*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1798*FLEN/8, x12, x8, x9)

inst_922:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f0316; op2val:0xbf6f0316; 
   valaddr_reg:x11; val_offset:1800*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1800*FLEN/8, x12, x8, x9)

inst_923:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f0316; op2val:0xbf6f0316; 
   valaddr_reg:x11; val_offset:1802*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1802*FLEN/8, x12, x8, x9)

inst_924:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f0316 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f0316 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f0316; op2val:0xbf6f0316; 
   valaddr_reg:x11; val_offset:1804*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1804*FLEN/8, x12, x8, x9)

inst_925:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e06404e; op2val:0xbe06404e; 
   valaddr_reg:x11; val_offset:1806*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1806*FLEN/8, x12, x8, x9)

inst_926:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e06404e; op2val:0xbe06404e; 
   valaddr_reg:x11; val_offset:1808*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1808*FLEN/8, x12, x8, x9)

inst_927:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e06404e; op2val:0xbe06404e; 
   valaddr_reg:x11; val_offset:1810*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1810*FLEN/8, x12, x8, x9)

inst_928:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e06404e; op2val:0xbe06404e; 
   valaddr_reg:x11; val_offset:1812*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1812*FLEN/8, x12, x8, x9)

inst_929:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x06404e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x06404e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e06404e; op2val:0xbe06404e; 
   valaddr_reg:x11; val_offset:1814*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1814*FLEN/8, x12, x8, x9)

inst_930:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f466075; op2val:0xbf466075; 
   valaddr_reg:x11; val_offset:1816*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1816*FLEN/8, x12, x8, x9)

inst_931:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f466075; op2val:0xbf466075; 
   valaddr_reg:x11; val_offset:1818*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1818*FLEN/8, x12, x8, x9)

inst_932:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f466075; op2val:0xbf466075; 
   valaddr_reg:x11; val_offset:1820*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1820*FLEN/8, x12, x8, x9)

inst_933:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f466075; op2val:0xbf466075; 
   valaddr_reg:x11; val_offset:1822*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1822*FLEN/8, x12, x8, x9)

inst_934:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x466075 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x466075 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f466075; op2val:0xbf466075; 
   valaddr_reg:x11; val_offset:1824*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1824*FLEN/8, x12, x8, x9)

inst_935:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7c1645; op2val:0xbf7c1645; 
   valaddr_reg:x11; val_offset:1826*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1826*FLEN/8, x12, x8, x9)

inst_936:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7c1645; op2val:0xbf7c1645; 
   valaddr_reg:x11; val_offset:1828*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1828*FLEN/8, x12, x8, x9)

inst_937:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7c1645; op2val:0xbf7c1645; 
   valaddr_reg:x11; val_offset:1830*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1830*FLEN/8, x12, x8, x9)

inst_938:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7c1645; op2val:0xbf7c1645; 
   valaddr_reg:x11; val_offset:1832*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1832*FLEN/8, x12, x8, x9)

inst_939:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7c1645 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7c1645 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7c1645; op2val:0xbf7c1645; 
   valaddr_reg:x11; val_offset:1834*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1834*FLEN/8, x12, x8, x9)

inst_940:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; 
   valaddr_reg:x11; val_offset:1836*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1836*FLEN/8, x12, x8, x9)

inst_941:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; 
   valaddr_reg:x11; val_offset:1838*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1838*FLEN/8, x12, x8, x9)

inst_942:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; 
   valaddr_reg:x11; val_offset:1840*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1840*FLEN/8, x12, x8, x9)

inst_943:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; 
   valaddr_reg:x11; val_offset:1842*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1842*FLEN/8, x12, x8, x9)

inst_944:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2b5e2a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2b5e2a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2b5e2a; op2val:0xbf2b5e2a; 
   valaddr_reg:x11; val_offset:1844*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1844*FLEN/8, x12, x8, x9)

inst_945:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f59e6f7; op2val:0xbf59e6f7; 
   valaddr_reg:x11; val_offset:1846*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1846*FLEN/8, x12, x8, x9)

inst_946:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f59e6f7; op2val:0xbf59e6f7; 
   valaddr_reg:x11; val_offset:1848*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1848*FLEN/8, x12, x8, x9)

inst_947:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f59e6f7; op2val:0xbf59e6f7; 
   valaddr_reg:x11; val_offset:1850*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1850*FLEN/8, x12, x8, x9)

inst_948:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f59e6f7; op2val:0xbf59e6f7; 
   valaddr_reg:x11; val_offset:1852*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1852*FLEN/8, x12, x8, x9)

inst_949:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x59e6f7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x59e6f7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f59e6f7; op2val:0xbf59e6f7; 
   valaddr_reg:x11; val_offset:1854*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1854*FLEN/8, x12, x8, x9)

inst_950:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d009f19; op2val:0xbd009f19; 
   valaddr_reg:x11; val_offset:1856*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1856*FLEN/8, x12, x8, x9)

inst_951:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d009f19; op2val:0xbd009f19; 
   valaddr_reg:x11; val_offset:1858*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1858*FLEN/8, x12, x8, x9)

inst_952:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d009f19; op2val:0xbd009f19; 
   valaddr_reg:x11; val_offset:1860*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1860*FLEN/8, x12, x8, x9)

inst_953:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d009f19; op2val:0xbd009f19; 
   valaddr_reg:x11; val_offset:1862*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1862*FLEN/8, x12, x8, x9)

inst_954:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x009f19 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x009f19 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d009f19; op2val:0xbd009f19; 
   valaddr_reg:x11; val_offset:1864*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1864*FLEN/8, x12, x8, x9)

inst_955:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dca9113; op2val:0xbdca9113; 
   valaddr_reg:x11; val_offset:1866*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1866*FLEN/8, x12, x8, x9)

inst_956:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dca9113; op2val:0xbdca9113; 
   valaddr_reg:x11; val_offset:1868*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1868*FLEN/8, x12, x8, x9)

inst_957:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dca9113; op2val:0xbdca9113; 
   valaddr_reg:x11; val_offset:1870*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1870*FLEN/8, x12, x8, x9)

inst_958:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dca9113; op2val:0xbdca9113; 
   valaddr_reg:x11; val_offset:1872*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1872*FLEN/8, x12, x8, x9)

inst_959:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4a9113 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x4a9113 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dca9113; op2val:0xbdca9113; 
   valaddr_reg:x11; val_offset:1874*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1874*FLEN/8, x12, x8, x9)

inst_960:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda2d62; op2val:0xbeda2d62; 
   valaddr_reg:x11; val_offset:1876*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1876*FLEN/8, x12, x8, x9)

inst_961:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda2d62; op2val:0xbeda2d62; 
   valaddr_reg:x11; val_offset:1878*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1878*FLEN/8, x12, x8, x9)

inst_962:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda2d62; op2val:0xbeda2d62; 
   valaddr_reg:x11; val_offset:1880*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1880*FLEN/8, x12, x8, x9)

inst_963:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda2d62; op2val:0xbeda2d62; 
   valaddr_reg:x11; val_offset:1882*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1882*FLEN/8, x12, x8, x9)

inst_964:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a2d62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a2d62 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda2d62; op2val:0xbeda2d62; 
   valaddr_reg:x11; val_offset:1884*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1884*FLEN/8, x12, x8, x9)

inst_965:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e47913f; op2val:0xbe47913f; 
   valaddr_reg:x11; val_offset:1886*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1886*FLEN/8, x12, x8, x9)

inst_966:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e47913f; op2val:0xbe47913f; 
   valaddr_reg:x11; val_offset:1888*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1888*FLEN/8, x12, x8, x9)

inst_967:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e47913f; op2val:0xbe47913f; 
   valaddr_reg:x11; val_offset:1890*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1890*FLEN/8, x12, x8, x9)

inst_968:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e47913f; op2val:0xbe47913f; 
   valaddr_reg:x11; val_offset:1892*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1892*FLEN/8, x12, x8, x9)

inst_969:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x47913f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x47913f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e47913f; op2val:0xbe47913f; 
   valaddr_reg:x11; val_offset:1894*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1894*FLEN/8, x12, x8, x9)

inst_970:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; 
   valaddr_reg:x11; val_offset:1896*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1896*FLEN/8, x12, x8, x9)

inst_971:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; 
   valaddr_reg:x11; val_offset:1898*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1898*FLEN/8, x12, x8, x9)

inst_972:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; 
   valaddr_reg:x11; val_offset:1900*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1900*FLEN/8, x12, x8, x9)

inst_973:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; 
   valaddr_reg:x11; val_offset:1902*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1902*FLEN/8, x12, x8, x9)

inst_974:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x1b1d4f and fs2 == 1 and fe2 == 0x78 and fm2 == 0x1b1d4f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c1b1d4f; op2val:0xbc1b1d4f; 
   valaddr_reg:x11; val_offset:1904*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1904*FLEN/8, x12, x8, x9)

inst_975:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc0f609; op2val:0xbdc0f609; 
   valaddr_reg:x11; val_offset:1906*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1906*FLEN/8, x12, x8, x9)

inst_976:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc0f609; op2val:0xbdc0f609; 
   valaddr_reg:x11; val_offset:1908*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1908*FLEN/8, x12, x8, x9)

inst_977:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc0f609; op2val:0xbdc0f609; 
   valaddr_reg:x11; val_offset:1910*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1910*FLEN/8, x12, x8, x9)

inst_978:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc0f609; op2val:0xbdc0f609; 
   valaddr_reg:x11; val_offset:1912*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1912*FLEN/8, x12, x8, x9)

inst_979:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x40f609 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x40f609 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc0f609; op2val:0xbdc0f609; 
   valaddr_reg:x11; val_offset:1914*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1914*FLEN/8, x12, x8, x9)

inst_980:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eedddea; op2val:0xbeedddea; 
   valaddr_reg:x11; val_offset:1916*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1916*FLEN/8, x12, x8, x9)

inst_981:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eedddea; op2val:0xbeedddea; 
   valaddr_reg:x11; val_offset:1918*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1918*FLEN/8, x12, x8, x9)

inst_982:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eedddea; op2val:0xbeedddea; 
   valaddr_reg:x11; val_offset:1920*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1920*FLEN/8, x12, x8, x9)

inst_983:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eedddea; op2val:0xbeedddea; 
   valaddr_reg:x11; val_offset:1922*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1922*FLEN/8, x12, x8, x9)

inst_984:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6dddea and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6dddea and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eedddea; op2val:0xbeedddea; 
   valaddr_reg:x11; val_offset:1924*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1924*FLEN/8, x12, x8, x9)

inst_985:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e327c96; op2val:0xbe327c96; 
   valaddr_reg:x11; val_offset:1926*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1926*FLEN/8, x12, x8, x9)

inst_986:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e327c96; op2val:0xbe327c96; 
   valaddr_reg:x11; val_offset:1928*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1928*FLEN/8, x12, x8, x9)

inst_987:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e327c96; op2val:0xbe327c96; 
   valaddr_reg:x11; val_offset:1930*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1930*FLEN/8, x12, x8, x9)

inst_988:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e327c96; op2val:0xbe327c96; 
   valaddr_reg:x11; val_offset:1932*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1932*FLEN/8, x12, x8, x9)

inst_989:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x327c96 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x327c96 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e327c96; op2val:0xbe327c96; 
   valaddr_reg:x11; val_offset:1934*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1934*FLEN/8, x12, x8, x9)

inst_990:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55f98e; op2val:0xbe55f98e; 
   valaddr_reg:x11; val_offset:1936*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1936*FLEN/8, x12, x8, x9)

inst_991:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55f98e; op2val:0xbe55f98e; 
   valaddr_reg:x11; val_offset:1938*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1938*FLEN/8, x12, x8, x9)

inst_992:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55f98e; op2val:0xbe55f98e; 
   valaddr_reg:x11; val_offset:1940*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1940*FLEN/8, x12, x8, x9)

inst_993:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55f98e; op2val:0xbe55f98e; 
   valaddr_reg:x11; val_offset:1942*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1942*FLEN/8, x12, x8, x9)

inst_994:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55f98e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x55f98e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55f98e; op2val:0xbe55f98e; 
   valaddr_reg:x11; val_offset:1944*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1944*FLEN/8, x12, x8, x9)

inst_995:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; 
   valaddr_reg:x11; val_offset:1946*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1946*FLEN/8, x12, x8, x9)

inst_996:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; 
   valaddr_reg:x11; val_offset:1948*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1948*FLEN/8, x12, x8, x9)

inst_997:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; 
   valaddr_reg:x11; val_offset:1950*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1950*FLEN/8, x12, x8, x9)

inst_998:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; 
   valaddr_reg:x11; val_offset:1952*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1952*FLEN/8, x12, x8, x9)

inst_999:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x53c4e4 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x53c4e4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed3c4e4; op2val:0xbed3c4e4; 
   valaddr_reg:x11; val_offset:1954*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1954*FLEN/8, x12, x8, x9)

inst_1000:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4ec97f; op2val:0xbe4ec97f; 
   valaddr_reg:x11; val_offset:1956*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1956*FLEN/8, x12, x8, x9)

inst_1001:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4ec97f; op2val:0xbe4ec97f; 
   valaddr_reg:x11; val_offset:1958*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1958*FLEN/8, x12, x8, x9)

inst_1002:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4ec97f; op2val:0xbe4ec97f; 
   valaddr_reg:x11; val_offset:1960*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1960*FLEN/8, x12, x8, x9)

inst_1003:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4ec97f; op2val:0xbe4ec97f; 
   valaddr_reg:x11; val_offset:1962*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1962*FLEN/8, x12, x8, x9)

inst_1004:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4ec97f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4ec97f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4ec97f; op2val:0xbe4ec97f; 
   valaddr_reg:x11; val_offset:1964*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1964*FLEN/8, x12, x8, x9)

inst_1005:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ff039; op2val:0xbf7ff039; 
   valaddr_reg:x11; val_offset:1966*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1966*FLEN/8, x12, x8, x9)

inst_1006:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ff039; op2val:0xbf7ff039; 
   valaddr_reg:x11; val_offset:1968*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1968*FLEN/8, x12, x8, x9)

inst_1007:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ff039; op2val:0xbf7ff039; 
   valaddr_reg:x11; val_offset:1970*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1970*FLEN/8, x12, x8, x9)

inst_1008:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ff039; op2val:0xbf7ff039; 
   valaddr_reg:x11; val_offset:1972*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1972*FLEN/8, x12, x8, x9)

inst_1009:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ff039 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff039 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ff039; op2val:0xbf7ff039; 
   valaddr_reg:x11; val_offset:1974*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1974*FLEN/8, x12, x8, x9)

inst_1010:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efc7d22; op2val:0xbefc7d22; 
   valaddr_reg:x11; val_offset:1976*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1976*FLEN/8, x12, x8, x9)

inst_1011:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efc7d22; op2val:0xbefc7d22; 
   valaddr_reg:x11; val_offset:1978*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1978*FLEN/8, x12, x8, x9)

inst_1012:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efc7d22; op2val:0xbefc7d22; 
   valaddr_reg:x11; val_offset:1980*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1980*FLEN/8, x12, x8, x9)

inst_1013:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efc7d22; op2val:0xbefc7d22; 
   valaddr_reg:x11; val_offset:1982*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1982*FLEN/8, x12, x8, x9)

inst_1014:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7c7d22 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7c7d22 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efc7d22; op2val:0xbefc7d22; 
   valaddr_reg:x11; val_offset:1984*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1984*FLEN/8, x12, x8, x9)

inst_1015:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f3378; op2val:0xbf6f3378; 
   valaddr_reg:x11; val_offset:1986*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1986*FLEN/8, x12, x8, x9)

inst_1016:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f3378; op2val:0xbf6f3378; 
   valaddr_reg:x11; val_offset:1988*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1988*FLEN/8, x12, x8, x9)

inst_1017:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f3378; op2val:0xbf6f3378; 
   valaddr_reg:x11; val_offset:1990*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 1990*FLEN/8, x12, x8, x9)

inst_1018:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f3378; op2val:0xbf6f3378; 
   valaddr_reg:x11; val_offset:1992*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 1992*FLEN/8, x12, x8, x9)

inst_1019:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6f3378 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6f3378 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6f3378; op2val:0xbf6f3378; 
   valaddr_reg:x11; val_offset:1994*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 1994*FLEN/8, x12, x8, x9)

inst_1020:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d69b062; op2val:0xbd69b062; 
   valaddr_reg:x11; val_offset:1996*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 1996*FLEN/8, x12, x8, x9)

inst_1021:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d69b062; op2val:0xbd69b062; 
   valaddr_reg:x11; val_offset:1998*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 1998*FLEN/8, x12, x8, x9)

inst_1022:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d69b062; op2val:0xbd69b062; 
   valaddr_reg:x11; val_offset:2000*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2000*FLEN/8, x12, x8, x9)

inst_1023:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d69b062; op2val:0xbd69b062; 
   valaddr_reg:x11; val_offset:2002*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2002*FLEN/8, x12, x8, x9)

inst_1024:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x69b062 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x69b062 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d69b062; op2val:0xbd69b062; 
   valaddr_reg:x11; val_offset:2004*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2004*FLEN/8, x12, x8, x9)

inst_1025:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f178884; op2val:0xbf178884; 
   valaddr_reg:x11; val_offset:2006*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2006*FLEN/8, x12, x8, x9)

inst_1026:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f178884; op2val:0xbf178884; 
   valaddr_reg:x11; val_offset:2008*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2008*FLEN/8, x12, x8, x9)

inst_1027:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f178884; op2val:0xbf178884; 
   valaddr_reg:x11; val_offset:2010*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2010*FLEN/8, x12, x8, x9)

inst_1028:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f178884; op2val:0xbf178884; 
   valaddr_reg:x11; val_offset:2012*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2012*FLEN/8, x12, x8, x9)

inst_1029:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x178884 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x178884 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f178884; op2val:0xbf178884; 
   valaddr_reg:x11; val_offset:2014*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2014*FLEN/8, x12, x8, x9)

inst_1030:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f700fcf; op2val:0xbf700fcf; 
   valaddr_reg:x11; val_offset:2016*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2016*FLEN/8, x12, x8, x9)

inst_1031:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f700fcf; op2val:0xbf700fcf; 
   valaddr_reg:x11; val_offset:2018*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2018*FLEN/8, x12, x8, x9)

inst_1032:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f700fcf; op2val:0xbf700fcf; 
   valaddr_reg:x11; val_offset:2020*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2020*FLEN/8, x12, x8, x9)

inst_1033:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f700fcf; op2val:0xbf700fcf; 
   valaddr_reg:x11; val_offset:2022*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2022*FLEN/8, x12, x8, x9)

inst_1034:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x700fcf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x700fcf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f700fcf; op2val:0xbf700fcf; 
   valaddr_reg:x11; val_offset:2024*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2024*FLEN/8, x12, x8, x9)

inst_1035:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f67e7; op2val:0xbf5f67e7; 
   valaddr_reg:x11; val_offset:2026*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2026*FLEN/8, x12, x8, x9)

inst_1036:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f67e7; op2val:0xbf5f67e7; 
   valaddr_reg:x11; val_offset:2028*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2028*FLEN/8, x12, x8, x9)

inst_1037:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f67e7; op2val:0xbf5f67e7; 
   valaddr_reg:x11; val_offset:2030*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2030*FLEN/8, x12, x8, x9)

inst_1038:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f67e7; op2val:0xbf5f67e7; 
   valaddr_reg:x11; val_offset:2032*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2032*FLEN/8, x12, x8, x9)

inst_1039:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f67e7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f67e7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f67e7; op2val:0xbf5f67e7; 
   valaddr_reg:x11; val_offset:2034*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2034*FLEN/8, x12, x8, x9)

inst_1040:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e2407; op2val:0xbe2e2407; 
   valaddr_reg:x11; val_offset:2036*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2036*FLEN/8, x12, x8, x9)

inst_1041:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e2407; op2val:0xbe2e2407; 
   valaddr_reg:x11; val_offset:2038*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2038*FLEN/8, x12, x8, x9)

inst_1042:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e2407; op2val:0xbe2e2407; 
   valaddr_reg:x11; val_offset:2040*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2040*FLEN/8, x12, x8, x9)

inst_1043:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e2407; op2val:0xbe2e2407; 
   valaddr_reg:x11; val_offset:2042*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2042*FLEN/8, x12, x8, x9)

inst_1044:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e2407 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e2407 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e2407; op2val:0xbe2e2407; 
   valaddr_reg:x11; val_offset:2044*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2044*FLEN/8, x12, x8, x9)

inst_1045:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76cd0a; op2val:0xbf76cd0a; 
   valaddr_reg:x11; val_offset:2046*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2046*FLEN/8, x12, x8, x9)

inst_1046:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76cd0a; op2val:0xbf76cd0a; 
   valaddr_reg:x11; val_offset:2048*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2048*FLEN/8, x12, x8, x9)

inst_1047:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76cd0a; op2val:0xbf76cd0a; 
   valaddr_reg:x11; val_offset:2050*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2050*FLEN/8, x12, x8, x9)

inst_1048:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76cd0a; op2val:0xbf76cd0a; 
   valaddr_reg:x11; val_offset:2052*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2052*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_8)

inst_1049:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x76cd0a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76cd0a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f76cd0a; op2val:0xbf76cd0a; 
   valaddr_reg:x11; val_offset:2054*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2054*FLEN/8, x12, x8, x9)

inst_1050:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02175d; op2val:0xbf02175d; 
   valaddr_reg:x11; val_offset:2056*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2056*FLEN/8, x12, x8, x9)

inst_1051:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02175d; op2val:0xbf02175d; 
   valaddr_reg:x11; val_offset:2058*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2058*FLEN/8, x12, x8, x9)

inst_1052:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02175d; op2val:0xbf02175d; 
   valaddr_reg:x11; val_offset:2060*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2060*FLEN/8, x12, x8, x9)

inst_1053:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02175d; op2val:0xbf02175d; 
   valaddr_reg:x11; val_offset:2062*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2062*FLEN/8, x12, x8, x9)

inst_1054:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02175d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x02175d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02175d; op2val:0xbf02175d; 
   valaddr_reg:x11; val_offset:2064*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2064*FLEN/8, x12, x8, x9)

inst_1055:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90cca2; op2val:0xbe90cca2; 
   valaddr_reg:x11; val_offset:2066*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2066*FLEN/8, x12, x8, x9)

inst_1056:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90cca2; op2val:0xbe90cca2; 
   valaddr_reg:x11; val_offset:2068*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2068*FLEN/8, x12, x8, x9)

inst_1057:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90cca2; op2val:0xbe90cca2; 
   valaddr_reg:x11; val_offset:2070*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2070*FLEN/8, x12, x8, x9)

inst_1058:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90cca2; op2val:0xbe90cca2; 
   valaddr_reg:x11; val_offset:2072*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2072*FLEN/8, x12, x8, x9)

inst_1059:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x10cca2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x10cca2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e90cca2; op2val:0xbe90cca2; 
   valaddr_reg:x11; val_offset:2074*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2074*FLEN/8, x12, x8, x9)

inst_1060:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f593f91; op2val:0xbf593f91; 
   valaddr_reg:x11; val_offset:2076*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2076*FLEN/8, x12, x8, x9)

inst_1061:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f593f91; op2val:0xbf593f91; 
   valaddr_reg:x11; val_offset:2078*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2078*FLEN/8, x12, x8, x9)

inst_1062:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f593f91; op2val:0xbf593f91; 
   valaddr_reg:x11; val_offset:2080*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2080*FLEN/8, x12, x8, x9)

inst_1063:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f593f91; op2val:0xbf593f91; 
   valaddr_reg:x11; val_offset:2082*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2082*FLEN/8, x12, x8, x9)

inst_1064:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x593f91 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x593f91 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f593f91; op2val:0xbf593f91; 
   valaddr_reg:x11; val_offset:2084*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2084*FLEN/8, x12, x8, x9)

inst_1065:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f16bf84; op2val:0xbf16bf84; 
   valaddr_reg:x11; val_offset:2086*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2086*FLEN/8, x12, x8, x9)

inst_1066:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f16bf84; op2val:0xbf16bf84; 
   valaddr_reg:x11; val_offset:2088*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2088*FLEN/8, x12, x8, x9)

inst_1067:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f16bf84; op2val:0xbf16bf84; 
   valaddr_reg:x11; val_offset:2090*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2090*FLEN/8, x12, x8, x9)

inst_1068:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f16bf84; op2val:0xbf16bf84; 
   valaddr_reg:x11; val_offset:2092*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2092*FLEN/8, x12, x8, x9)

inst_1069:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x16bf84 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x16bf84 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f16bf84; op2val:0xbf16bf84; 
   valaddr_reg:x11; val_offset:2094*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2094*FLEN/8, x12, x8, x9)

inst_1070:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1d0257; op2val:0xbf1d0257; 
   valaddr_reg:x11; val_offset:2096*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2096*FLEN/8, x12, x8, x9)

inst_1071:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1d0257; op2val:0xbf1d0257; 
   valaddr_reg:x11; val_offset:2098*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2098*FLEN/8, x12, x8, x9)

inst_1072:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1d0257; op2val:0xbf1d0257; 
   valaddr_reg:x11; val_offset:2100*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2100*FLEN/8, x12, x8, x9)

inst_1073:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1d0257; op2val:0xbf1d0257; 
   valaddr_reg:x11; val_offset:2102*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2102*FLEN/8, x12, x8, x9)

inst_1074:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1d0257 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d0257 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1d0257; op2val:0xbf1d0257; 
   valaddr_reg:x11; val_offset:2104*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2104*FLEN/8, x12, x8, x9)

inst_1075:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0773ce; op2val:0xbf0773ce; 
   valaddr_reg:x11; val_offset:2106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2106*FLEN/8, x12, x8, x9)

inst_1076:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0773ce; op2val:0xbf0773ce; 
   valaddr_reg:x11; val_offset:2108*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2108*FLEN/8, x12, x8, x9)

inst_1077:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0773ce; op2val:0xbf0773ce; 
   valaddr_reg:x11; val_offset:2110*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2110*FLEN/8, x12, x8, x9)

inst_1078:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0773ce; op2val:0xbf0773ce; 
   valaddr_reg:x11; val_offset:2112*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2112*FLEN/8, x12, x8, x9)

inst_1079:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0773ce and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0773ce and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0773ce; op2val:0xbf0773ce; 
   valaddr_reg:x11; val_offset:2114*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2114*FLEN/8, x12, x8, x9)

inst_1080:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f77b057; op2val:0xbf77b057; 
   valaddr_reg:x11; val_offset:2116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2116*FLEN/8, x12, x8, x9)

inst_1081:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f77b057; op2val:0xbf77b057; 
   valaddr_reg:x11; val_offset:2118*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2118*FLEN/8, x12, x8, x9)

inst_1082:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f77b057; op2val:0xbf77b057; 
   valaddr_reg:x11; val_offset:2120*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2120*FLEN/8, x12, x8, x9)

inst_1083:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f77b057; op2val:0xbf77b057; 
   valaddr_reg:x11; val_offset:2122*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2122*FLEN/8, x12, x8, x9)

inst_1084:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x77b057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77b057 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f77b057; op2val:0xbf77b057; 
   valaddr_reg:x11; val_offset:2124*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2124*FLEN/8, x12, x8, x9)

inst_1085:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd750e; op2val:0xbebd750e; 
   valaddr_reg:x11; val_offset:2126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2126*FLEN/8, x12, x8, x9)

inst_1086:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd750e; op2val:0xbebd750e; 
   valaddr_reg:x11; val_offset:2128*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2128*FLEN/8, x12, x8, x9)

inst_1087:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd750e; op2val:0xbebd750e; 
   valaddr_reg:x11; val_offset:2130*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2130*FLEN/8, x12, x8, x9)

inst_1088:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd750e; op2val:0xbebd750e; 
   valaddr_reg:x11; val_offset:2132*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2132*FLEN/8, x12, x8, x9)

inst_1089:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3d750e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3d750e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebd750e; op2val:0xbebd750e; 
   valaddr_reg:x11; val_offset:2134*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2134*FLEN/8, x12, x8, x9)

inst_1090:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; 
   valaddr_reg:x11; val_offset:2136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2136*FLEN/8, x12, x8, x9)

inst_1091:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; 
   valaddr_reg:x11; val_offset:2138*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2138*FLEN/8, x12, x8, x9)

inst_1092:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; 
   valaddr_reg:x11; val_offset:2140*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2140*FLEN/8, x12, x8, x9)

inst_1093:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; 
   valaddr_reg:x11; val_offset:2142*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2142*FLEN/8, x12, x8, x9)

inst_1094:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66d6a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x66d6a0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6d6a0; op2val:0xbee6d6a0; 
   valaddr_reg:x11; val_offset:2144*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2144*FLEN/8, x12, x8, x9)

inst_1095:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1dd893; op2val:0xbf1dd893; 
   valaddr_reg:x11; val_offset:2146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2146*FLEN/8, x12, x8, x9)

inst_1096:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1dd893; op2val:0xbf1dd893; 
   valaddr_reg:x11; val_offset:2148*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2148*FLEN/8, x12, x8, x9)

inst_1097:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1dd893; op2val:0xbf1dd893; 
   valaddr_reg:x11; val_offset:2150*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2150*FLEN/8, x12, x8, x9)

inst_1098:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1dd893; op2val:0xbf1dd893; 
   valaddr_reg:x11; val_offset:2152*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2152*FLEN/8, x12, x8, x9)

inst_1099:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1dd893 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1dd893 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1dd893; op2val:0xbf1dd893; 
   valaddr_reg:x11; val_offset:2154*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2154*FLEN/8, x12, x8, x9)

inst_1100:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f027a68; op2val:0xbf027a68; 
   valaddr_reg:x11; val_offset:2156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2156*FLEN/8, x12, x8, x9)

inst_1101:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f027a68; op2val:0xbf027a68; 
   valaddr_reg:x11; val_offset:2158*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2158*FLEN/8, x12, x8, x9)

inst_1102:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f027a68; op2val:0xbf027a68; 
   valaddr_reg:x11; val_offset:2160*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2160*FLEN/8, x12, x8, x9)

inst_1103:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f027a68; op2val:0xbf027a68; 
   valaddr_reg:x11; val_offset:2162*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2162*FLEN/8, x12, x8, x9)

inst_1104:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x027a68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x027a68 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f027a68; op2val:0xbf027a68; 
   valaddr_reg:x11; val_offset:2164*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2164*FLEN/8, x12, x8, x9)

inst_1105:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec79e62; op2val:0xbec79e62; 
   valaddr_reg:x11; val_offset:2166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2166*FLEN/8, x12, x8, x9)

inst_1106:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec79e62; op2val:0xbec79e62; 
   valaddr_reg:x11; val_offset:2168*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2168*FLEN/8, x12, x8, x9)

inst_1107:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec79e62; op2val:0xbec79e62; 
   valaddr_reg:x11; val_offset:2170*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2170*FLEN/8, x12, x8, x9)

inst_1108:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec79e62; op2val:0xbec79e62; 
   valaddr_reg:x11; val_offset:2172*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2172*FLEN/8, x12, x8, x9)

inst_1109:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x479e62 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x479e62 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec79e62; op2val:0xbec79e62; 
   valaddr_reg:x11; val_offset:2174*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2174*FLEN/8, x12, x8, x9)

inst_1110:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebc4184; op2val:0xbebc4184; 
   valaddr_reg:x11; val_offset:2176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2176*FLEN/8, x12, x8, x9)

inst_1111:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebc4184; op2val:0xbebc4184; 
   valaddr_reg:x11; val_offset:2178*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2178*FLEN/8, x12, x8, x9)

inst_1112:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebc4184; op2val:0xbebc4184; 
   valaddr_reg:x11; val_offset:2180*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2180*FLEN/8, x12, x8, x9)

inst_1113:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebc4184; op2val:0xbebc4184; 
   valaddr_reg:x11; val_offset:2182*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2182*FLEN/8, x12, x8, x9)

inst_1114:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3c4184 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3c4184 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebc4184; op2val:0xbebc4184; 
   valaddr_reg:x11; val_offset:2184*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2184*FLEN/8, x12, x8, x9)

inst_1115:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f602c50; op2val:0xbf602c50; 
   valaddr_reg:x11; val_offset:2186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2186*FLEN/8, x12, x8, x9)

inst_1116:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f602c50; op2val:0xbf602c50; 
   valaddr_reg:x11; val_offset:2188*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2188*FLEN/8, x12, x8, x9)

inst_1117:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f602c50; op2val:0xbf602c50; 
   valaddr_reg:x11; val_offset:2190*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2190*FLEN/8, x12, x8, x9)

inst_1118:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f602c50; op2val:0xbf602c50; 
   valaddr_reg:x11; val_offset:2192*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2192*FLEN/8, x12, x8, x9)

inst_1119:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x602c50 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x602c50 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f602c50; op2val:0xbf602c50; 
   valaddr_reg:x11; val_offset:2194*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2194*FLEN/8, x12, x8, x9)

inst_1120:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1844e; op2val:0xbec1844e; 
   valaddr_reg:x11; val_offset:2196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2196*FLEN/8, x12, x8, x9)

inst_1121:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1844e; op2val:0xbec1844e; 
   valaddr_reg:x11; val_offset:2198*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2198*FLEN/8, x12, x8, x9)

inst_1122:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1844e; op2val:0xbec1844e; 
   valaddr_reg:x11; val_offset:2200*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2200*FLEN/8, x12, x8, x9)

inst_1123:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1844e; op2val:0xbec1844e; 
   valaddr_reg:x11; val_offset:2202*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2202*FLEN/8, x12, x8, x9)

inst_1124:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41844e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41844e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1844e; op2val:0xbec1844e; 
   valaddr_reg:x11; val_offset:2204*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2204*FLEN/8, x12, x8, x9)

inst_1125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f75c6; op2val:0xbf5f75c6; 
   valaddr_reg:x11; val_offset:2206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2206*FLEN/8, x12, x8, x9)

inst_1126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f75c6; op2val:0xbf5f75c6; 
   valaddr_reg:x11; val_offset:2208*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2208*FLEN/8, x12, x8, x9)

inst_1127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f75c6; op2val:0xbf5f75c6; 
   valaddr_reg:x11; val_offset:2210*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2210*FLEN/8, x12, x8, x9)

inst_1128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f75c6; op2val:0xbf5f75c6; 
   valaddr_reg:x11; val_offset:2212*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2212*FLEN/8, x12, x8, x9)

inst_1129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5f75c6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5f75c6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5f75c6; op2val:0xbf5f75c6; 
   valaddr_reg:x11; val_offset:2214*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2214*FLEN/8, x12, x8, x9)

inst_1130:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4d797f; op2val:0xbe4d797f; 
   valaddr_reg:x11; val_offset:2216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2216*FLEN/8, x12, x8, x9)

inst_1131:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4d797f; op2val:0xbe4d797f; 
   valaddr_reg:x11; val_offset:2218*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2218*FLEN/8, x12, x8, x9)

inst_1132:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4d797f; op2val:0xbe4d797f; 
   valaddr_reg:x11; val_offset:2220*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2220*FLEN/8, x12, x8, x9)

inst_1133:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4d797f; op2val:0xbe4d797f; 
   valaddr_reg:x11; val_offset:2222*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2222*FLEN/8, x12, x8, x9)

inst_1134:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4d797f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4d797f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4d797f; op2val:0xbe4d797f; 
   valaddr_reg:x11; val_offset:2224*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2224*FLEN/8, x12, x8, x9)

inst_1135:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e028642; op2val:0xbe028642; 
   valaddr_reg:x11; val_offset:2226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2226*FLEN/8, x12, x8, x9)

inst_1136:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e028642; op2val:0xbe028642; 
   valaddr_reg:x11; val_offset:2228*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2228*FLEN/8, x12, x8, x9)

inst_1137:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e028642; op2val:0xbe028642; 
   valaddr_reg:x11; val_offset:2230*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2230*FLEN/8, x12, x8, x9)

inst_1138:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e028642; op2val:0xbe028642; 
   valaddr_reg:x11; val_offset:2232*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2232*FLEN/8, x12, x8, x9)

inst_1139:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x028642 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x028642 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e028642; op2val:0xbe028642; 
   valaddr_reg:x11; val_offset:2234*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2234*FLEN/8, x12, x8, x9)

inst_1140:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e424d99; op2val:0xbe424d99; 
   valaddr_reg:x11; val_offset:2236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2236*FLEN/8, x12, x8, x9)

inst_1141:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e424d99; op2val:0xbe424d99; 
   valaddr_reg:x11; val_offset:2238*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2238*FLEN/8, x12, x8, x9)

inst_1142:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e424d99; op2val:0xbe424d99; 
   valaddr_reg:x11; val_offset:2240*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2240*FLEN/8, x12, x8, x9)

inst_1143:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e424d99; op2val:0xbe424d99; 
   valaddr_reg:x11; val_offset:2242*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2242*FLEN/8, x12, x8, x9)

inst_1144:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x424d99 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x424d99 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e424d99; op2val:0xbe424d99; 
   valaddr_reg:x11; val_offset:2244*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2244*FLEN/8, x12, x8, x9)

inst_1145:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; 
   valaddr_reg:x11; val_offset:2246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2246*FLEN/8, x12, x8, x9)

inst_1146:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; 
   valaddr_reg:x11; val_offset:2248*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2248*FLEN/8, x12, x8, x9)

inst_1147:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; 
   valaddr_reg:x11; val_offset:2250*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2250*FLEN/8, x12, x8, x9)

inst_1148:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; 
   valaddr_reg:x11; val_offset:2252*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2252*FLEN/8, x12, x8, x9)

inst_1149:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5ba8bb and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5ba8bb and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5ba8bb; op2val:0xbe5ba8bb; 
   valaddr_reg:x11; val_offset:2254*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2254*FLEN/8, x12, x8, x9)

inst_1150:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; 
   valaddr_reg:x11; val_offset:2256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2256*FLEN/8, x12, x8, x9)

inst_1151:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; 
   valaddr_reg:x11; val_offset:2258*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2258*FLEN/8, x12, x8, x9)

inst_1152:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; 
   valaddr_reg:x11; val_offset:2260*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2260*FLEN/8, x12, x8, x9)

inst_1153:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; 
   valaddr_reg:x11; val_offset:2262*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2262*FLEN/8, x12, x8, x9)

inst_1154:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f1d7a and fs2 == 1 and fe2 == 0x7c and fm2 == 0x5f1d7a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f1d7a; op2val:0xbe5f1d7a; 
   valaddr_reg:x11; val_offset:2264*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2264*FLEN/8, x12, x8, x9)

inst_1155:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e793998; op2val:0xbe793998; 
   valaddr_reg:x11; val_offset:2266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2266*FLEN/8, x12, x8, x9)

inst_1156:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e793998; op2val:0xbe793998; 
   valaddr_reg:x11; val_offset:2268*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2268*FLEN/8, x12, x8, x9)

inst_1157:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e793998; op2val:0xbe793998; 
   valaddr_reg:x11; val_offset:2270*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2270*FLEN/8, x12, x8, x9)

inst_1158:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e793998; op2val:0xbe793998; 
   valaddr_reg:x11; val_offset:2272*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2272*FLEN/8, x12, x8, x9)

inst_1159:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x793998 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793998 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e793998; op2val:0xbe793998; 
   valaddr_reg:x11; val_offset:2274*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2274*FLEN/8, x12, x8, x9)

inst_1160:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e577dea; op2val:0xbe577dea; 
   valaddr_reg:x11; val_offset:2276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2276*FLEN/8, x12, x8, x9)

inst_1161:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e577dea; op2val:0xbe577dea; 
   valaddr_reg:x11; val_offset:2278*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2278*FLEN/8, x12, x8, x9)

inst_1162:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e577dea; op2val:0xbe577dea; 
   valaddr_reg:x11; val_offset:2280*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2280*FLEN/8, x12, x8, x9)

inst_1163:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e577dea; op2val:0xbe577dea; 
   valaddr_reg:x11; val_offset:2282*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2282*FLEN/8, x12, x8, x9)

inst_1164:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x577dea and fs2 == 1 and fe2 == 0x7c and fm2 == 0x577dea and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e577dea; op2val:0xbe577dea; 
   valaddr_reg:x11; val_offset:2284*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2284*FLEN/8, x12, x8, x9)

inst_1165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f749269; op2val:0xbf749269; 
   valaddr_reg:x11; val_offset:2286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2286*FLEN/8, x12, x8, x9)

inst_1166:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f749269; op2val:0xbf749269; 
   valaddr_reg:x11; val_offset:2288*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2288*FLEN/8, x12, x8, x9)

inst_1167:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f749269; op2val:0xbf749269; 
   valaddr_reg:x11; val_offset:2290*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2290*FLEN/8, x12, x8, x9)

inst_1168:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f749269; op2val:0xbf749269; 
   valaddr_reg:x11; val_offset:2292*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2292*FLEN/8, x12, x8, x9)

inst_1169:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x749269 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x749269 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f749269; op2val:0xbf749269; 
   valaddr_reg:x11; val_offset:2294*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2294*FLEN/8, x12, x8, x9)

inst_1170:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f038aaf; op2val:0xbf038aaf; 
   valaddr_reg:x11; val_offset:2296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2296*FLEN/8, x12, x8, x9)

inst_1171:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f038aaf; op2val:0xbf038aaf; 
   valaddr_reg:x11; val_offset:2298*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2298*FLEN/8, x12, x8, x9)

inst_1172:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f038aaf; op2val:0xbf038aaf; 
   valaddr_reg:x11; val_offset:2300*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2300*FLEN/8, x12, x8, x9)

inst_1173:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f038aaf; op2val:0xbf038aaf; 
   valaddr_reg:x11; val_offset:2302*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2302*FLEN/8, x12, x8, x9)

inst_1174:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x038aaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x038aaf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f038aaf; op2val:0xbf038aaf; 
   valaddr_reg:x11; val_offset:2304*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2304*FLEN/8, x12, x8, x9)

inst_1175:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d622af4; op2val:0xbd622af4; 
   valaddr_reg:x11; val_offset:2306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2306*FLEN/8, x12, x8, x9)

inst_1176:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d622af4; op2val:0xbd622af4; 
   valaddr_reg:x11; val_offset:2308*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2308*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_9)

inst_1177:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d622af4; op2val:0xbd622af4; 
   valaddr_reg:x11; val_offset:2310*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2310*FLEN/8, x12, x8, x9)

inst_1178:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d622af4; op2val:0xbd622af4; 
   valaddr_reg:x11; val_offset:2312*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2312*FLEN/8, x12, x8, x9)

inst_1179:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x622af4 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x622af4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d622af4; op2val:0xbd622af4; 
   valaddr_reg:x11; val_offset:2314*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2314*FLEN/8, x12, x8, x9)

inst_1180:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edb3d72; op2val:0xbedb3d72; 
   valaddr_reg:x11; val_offset:2316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2316*FLEN/8, x12, x8, x9)

inst_1181:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edb3d72; op2val:0xbedb3d72; 
   valaddr_reg:x11; val_offset:2318*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2318*FLEN/8, x12, x8, x9)

inst_1182:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edb3d72; op2val:0xbedb3d72; 
   valaddr_reg:x11; val_offset:2320*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2320*FLEN/8, x12, x8, x9)

inst_1183:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edb3d72; op2val:0xbedb3d72; 
   valaddr_reg:x11; val_offset:2322*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2322*FLEN/8, x12, x8, x9)

inst_1184:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5b3d72 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5b3d72 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edb3d72; op2val:0xbedb3d72; 
   valaddr_reg:x11; val_offset:2324*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2324*FLEN/8, x12, x8, x9)

inst_1185:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6811f1; op2val:0xbf6811f1; 
   valaddr_reg:x11; val_offset:2326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2326*FLEN/8, x12, x8, x9)

inst_1186:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6811f1; op2val:0xbf6811f1; 
   valaddr_reg:x11; val_offset:2328*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2328*FLEN/8, x12, x8, x9)

inst_1187:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6811f1; op2val:0xbf6811f1; 
   valaddr_reg:x11; val_offset:2330*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2330*FLEN/8, x12, x8, x9)

inst_1188:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6811f1; op2val:0xbf6811f1; 
   valaddr_reg:x11; val_offset:2332*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2332*FLEN/8, x12, x8, x9)

inst_1189:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6811f1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6811f1 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6811f1; op2val:0xbf6811f1; 
   valaddr_reg:x11; val_offset:2334*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2334*FLEN/8, x12, x8, x9)

inst_1190:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de3cb78; op2val:0xbde3cb78; 
   valaddr_reg:x11; val_offset:2336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2336*FLEN/8, x12, x8, x9)

inst_1191:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de3cb78; op2val:0xbde3cb78; 
   valaddr_reg:x11; val_offset:2338*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2338*FLEN/8, x12, x8, x9)

inst_1192:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de3cb78; op2val:0xbde3cb78; 
   valaddr_reg:x11; val_offset:2340*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2340*FLEN/8, x12, x8, x9)

inst_1193:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de3cb78; op2val:0xbde3cb78; 
   valaddr_reg:x11; val_offset:2342*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2342*FLEN/8, x12, x8, x9)

inst_1194:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x63cb78 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x63cb78 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de3cb78; op2val:0xbde3cb78; 
   valaddr_reg:x11; val_offset:2344*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2344*FLEN/8, x12, x8, x9)

inst_1195:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9a5de3; op2val:0xbe9a5de3; 
   valaddr_reg:x11; val_offset:2346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2346*FLEN/8, x12, x8, x9)

inst_1196:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9a5de3; op2val:0xbe9a5de3; 
   valaddr_reg:x11; val_offset:2348*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2348*FLEN/8, x12, x8, x9)

inst_1197:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9a5de3; op2val:0xbe9a5de3; 
   valaddr_reg:x11; val_offset:2350*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2350*FLEN/8, x12, x8, x9)

inst_1198:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9a5de3; op2val:0xbe9a5de3; 
   valaddr_reg:x11; val_offset:2352*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2352*FLEN/8, x12, x8, x9)

inst_1199:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1a5de3 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1a5de3 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9a5de3; op2val:0xbe9a5de3; 
   valaddr_reg:x11; val_offset:2354*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2354*FLEN/8, x12, x8, x9)

inst_1200:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f31d719; op2val:0xbf31d719; 
   valaddr_reg:x11; val_offset:2356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2356*FLEN/8, x12, x8, x9)

inst_1201:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f31d719; op2val:0xbf31d719; 
   valaddr_reg:x11; val_offset:2358*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2358*FLEN/8, x12, x8, x9)

inst_1202:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f31d719; op2val:0xbf31d719; 
   valaddr_reg:x11; val_offset:2360*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2360*FLEN/8, x12, x8, x9)

inst_1203:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f31d719; op2val:0xbf31d719; 
   valaddr_reg:x11; val_offset:2362*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2362*FLEN/8, x12, x8, x9)

inst_1204:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x31d719 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31d719 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f31d719; op2val:0xbf31d719; 
   valaddr_reg:x11; val_offset:2364*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2364*FLEN/8, x12, x8, x9)

inst_1205:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f12f39d; op2val:0xbf12f39d; 
   valaddr_reg:x11; val_offset:2366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2366*FLEN/8, x12, x8, x9)

inst_1206:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f12f39d; op2val:0xbf12f39d; 
   valaddr_reg:x11; val_offset:2368*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2368*FLEN/8, x12, x8, x9)

inst_1207:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f12f39d; op2val:0xbf12f39d; 
   valaddr_reg:x11; val_offset:2370*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2370*FLEN/8, x12, x8, x9)

inst_1208:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f12f39d; op2val:0xbf12f39d; 
   valaddr_reg:x11; val_offset:2372*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2372*FLEN/8, x12, x8, x9)

inst_1209:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x12f39d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12f39d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f12f39d; op2val:0xbf12f39d; 
   valaddr_reg:x11; val_offset:2374*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2374*FLEN/8, x12, x8, x9)

inst_1210:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9df0c8; op2val:0xbd9df0c8; 
   valaddr_reg:x11; val_offset:2376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2376*FLEN/8, x12, x8, x9)

inst_1211:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9df0c8; op2val:0xbd9df0c8; 
   valaddr_reg:x11; val_offset:2378*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2378*FLEN/8, x12, x8, x9)

inst_1212:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9df0c8; op2val:0xbd9df0c8; 
   valaddr_reg:x11; val_offset:2380*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2380*FLEN/8, x12, x8, x9)

inst_1213:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9df0c8; op2val:0xbd9df0c8; 
   valaddr_reg:x11; val_offset:2382*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2382*FLEN/8, x12, x8, x9)

inst_1214:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x1df0c8 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x1df0c8 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d9df0c8; op2val:0xbd9df0c8; 
   valaddr_reg:x11; val_offset:2384*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2384*FLEN/8, x12, x8, x9)

inst_1215:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f159889; op2val:0xbf159889; 
   valaddr_reg:x11; val_offset:2386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2386*FLEN/8, x12, x8, x9)

inst_1216:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f159889; op2val:0xbf159889; 
   valaddr_reg:x11; val_offset:2388*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2388*FLEN/8, x12, x8, x9)

inst_1217:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f159889; op2val:0xbf159889; 
   valaddr_reg:x11; val_offset:2390*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2390*FLEN/8, x12, x8, x9)

inst_1218:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f159889; op2val:0xbf159889; 
   valaddr_reg:x11; val_offset:2392*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2392*FLEN/8, x12, x8, x9)

inst_1219:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x159889 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x159889 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f159889; op2val:0xbf159889; 
   valaddr_reg:x11; val_offset:2394*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2394*FLEN/8, x12, x8, x9)

inst_1220:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e679c0f; op2val:0xbe679c0f; 
   valaddr_reg:x11; val_offset:2396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2396*FLEN/8, x12, x8, x9)

inst_1221:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e679c0f; op2val:0xbe679c0f; 
   valaddr_reg:x11; val_offset:2398*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2398*FLEN/8, x12, x8, x9)

inst_1222:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e679c0f; op2val:0xbe679c0f; 
   valaddr_reg:x11; val_offset:2400*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2400*FLEN/8, x12, x8, x9)

inst_1223:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e679c0f; op2val:0xbe679c0f; 
   valaddr_reg:x11; val_offset:2402*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2402*FLEN/8, x12, x8, x9)

inst_1224:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x679c0f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x679c0f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e679c0f; op2val:0xbe679c0f; 
   valaddr_reg:x11; val_offset:2404*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2404*FLEN/8, x12, x8, x9)

inst_1225:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7823fd; op2val:0xbf7823fd; 
   valaddr_reg:x11; val_offset:2406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2406*FLEN/8, x12, x8, x9)

inst_1226:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7823fd; op2val:0xbf7823fd; 
   valaddr_reg:x11; val_offset:2408*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2408*FLEN/8, x12, x8, x9)

inst_1227:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7823fd; op2val:0xbf7823fd; 
   valaddr_reg:x11; val_offset:2410*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2410*FLEN/8, x12, x8, x9)

inst_1228:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7823fd; op2val:0xbf7823fd; 
   valaddr_reg:x11; val_offset:2412*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2412*FLEN/8, x12, x8, x9)

inst_1229:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7823fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7823fd and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7823fd; op2val:0xbf7823fd; 
   valaddr_reg:x11; val_offset:2414*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2414*FLEN/8, x12, x8, x9)

inst_1230:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08dce; op2val:0xbea08dce; 
   valaddr_reg:x11; val_offset:2416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2416*FLEN/8, x12, x8, x9)

inst_1231:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08dce; op2val:0xbea08dce; 
   valaddr_reg:x11; val_offset:2418*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2418*FLEN/8, x12, x8, x9)

inst_1232:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08dce; op2val:0xbea08dce; 
   valaddr_reg:x11; val_offset:2420*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2420*FLEN/8, x12, x8, x9)

inst_1233:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08dce; op2val:0xbea08dce; 
   valaddr_reg:x11; val_offset:2422*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2422*FLEN/8, x12, x8, x9)

inst_1234:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208dce and fs2 == 1 and fe2 == 0x7d and fm2 == 0x208dce and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08dce; op2val:0xbea08dce; 
   valaddr_reg:x11; val_offset:2424*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2424*FLEN/8, x12, x8, x9)

inst_1235:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da54f4b; op2val:0xbda54f4b; 
   valaddr_reg:x11; val_offset:2426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2426*FLEN/8, x12, x8, x9)

inst_1236:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da54f4b; op2val:0xbda54f4b; 
   valaddr_reg:x11; val_offset:2428*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2428*FLEN/8, x12, x8, x9)

inst_1237:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da54f4b; op2val:0xbda54f4b; 
   valaddr_reg:x11; val_offset:2430*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2430*FLEN/8, x12, x8, x9)

inst_1238:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da54f4b; op2val:0xbda54f4b; 
   valaddr_reg:x11; val_offset:2432*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2432*FLEN/8, x12, x8, x9)

inst_1239:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x254f4b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x254f4b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da54f4b; op2val:0xbda54f4b; 
   valaddr_reg:x11; val_offset:2434*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2434*FLEN/8, x12, x8, x9)

inst_1240:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e0edf; op2val:0xbe8e0edf; 
   valaddr_reg:x11; val_offset:2436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2436*FLEN/8, x12, x8, x9)

inst_1241:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e0edf; op2val:0xbe8e0edf; 
   valaddr_reg:x11; val_offset:2438*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2438*FLEN/8, x12, x8, x9)

inst_1242:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e0edf; op2val:0xbe8e0edf; 
   valaddr_reg:x11; val_offset:2440*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2440*FLEN/8, x12, x8, x9)

inst_1243:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e0edf; op2val:0xbe8e0edf; 
   valaddr_reg:x11; val_offset:2442*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2442*FLEN/8, x12, x8, x9)

inst_1244:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e0edf and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0e0edf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e0edf; op2val:0xbe8e0edf; 
   valaddr_reg:x11; val_offset:2444*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2444*FLEN/8, x12, x8, x9)

inst_1245:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6dfee3; op2val:0xbf6dfee3; 
   valaddr_reg:x11; val_offset:2446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2446*FLEN/8, x12, x8, x9)

inst_1246:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6dfee3; op2val:0xbf6dfee3; 
   valaddr_reg:x11; val_offset:2448*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2448*FLEN/8, x12, x8, x9)

inst_1247:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6dfee3; op2val:0xbf6dfee3; 
   valaddr_reg:x11; val_offset:2450*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2450*FLEN/8, x12, x8, x9)

inst_1248:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6dfee3; op2val:0xbf6dfee3; 
   valaddr_reg:x11; val_offset:2452*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2452*FLEN/8, x12, x8, x9)

inst_1249:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6dfee3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6dfee3 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6dfee3; op2val:0xbf6dfee3; 
   valaddr_reg:x11; val_offset:2454*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2454*FLEN/8, x12, x8, x9)

inst_1250:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f787ab7; op2val:0xbf787ab7; 
   valaddr_reg:x11; val_offset:2456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2456*FLEN/8, x12, x8, x9)

inst_1251:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f787ab7; op2val:0xbf787ab7; 
   valaddr_reg:x11; val_offset:2458*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2458*FLEN/8, x12, x8, x9)

inst_1252:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f787ab7; op2val:0xbf787ab7; 
   valaddr_reg:x11; val_offset:2460*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2460*FLEN/8, x12, x8, x9)

inst_1253:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f787ab7; op2val:0xbf787ab7; 
   valaddr_reg:x11; val_offset:2462*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2462*FLEN/8, x12, x8, x9)

inst_1254:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x787ab7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x787ab7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f787ab7; op2val:0xbf787ab7; 
   valaddr_reg:x11; val_offset:2464*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2464*FLEN/8, x12, x8, x9)

inst_1255:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d72fb; op2val:0xbf7d72fb; 
   valaddr_reg:x11; val_offset:2466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2466*FLEN/8, x12, x8, x9)

inst_1256:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d72fb; op2val:0xbf7d72fb; 
   valaddr_reg:x11; val_offset:2468*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2468*FLEN/8, x12, x8, x9)

inst_1257:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d72fb; op2val:0xbf7d72fb; 
   valaddr_reg:x11; val_offset:2470*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2470*FLEN/8, x12, x8, x9)

inst_1258:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d72fb; op2val:0xbf7d72fb; 
   valaddr_reg:x11; val_offset:2472*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2472*FLEN/8, x12, x8, x9)

inst_1259:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d72fb and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d72fb and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d72fb; op2val:0xbf7d72fb; 
   valaddr_reg:x11; val_offset:2474*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2474*FLEN/8, x12, x8, x9)

inst_1260:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d1aa6c; op2val:0x53b9564e; 
   valaddr_reg:x11; val_offset:2476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2476*FLEN/8, x12, x8, x9)

inst_1261:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d1aa6c; op2val:0x53b9564e; 
   valaddr_reg:x11; val_offset:2478*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2478*FLEN/8, x12, x8, x9)

inst_1262:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d1aa6c; op2val:0x53b9564e; 
   valaddr_reg:x11; val_offset:2480*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2480*FLEN/8, x12, x8, x9)

inst_1263:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d1aa6c; op2val:0x53b9564e; 
   valaddr_reg:x11; val_offset:2482*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2482*FLEN/8, x12, x8, x9)

inst_1264:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x51aa6c and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x39564e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d1aa6c; op2val:0x53b9564e; 
   valaddr_reg:x11; val_offset:2484*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2484*FLEN/8, x12, x8, x9)

inst_1265:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e4b829; op2val:0x535a3eb4; 
   valaddr_reg:x11; val_offset:2486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2486*FLEN/8, x12, x8, x9)

inst_1266:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e4b829; op2val:0x535a3eb4; 
   valaddr_reg:x11; val_offset:2488*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2488*FLEN/8, x12, x8, x9)

inst_1267:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e4b829; op2val:0x535a3eb4; 
   valaddr_reg:x11; val_offset:2490*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2490*FLEN/8, x12, x8, x9)

inst_1268:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e4b829; op2val:0x535a3eb4; 
   valaddr_reg:x11; val_offset:2492*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2492*FLEN/8, x12, x8, x9)

inst_1269:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x64b829 and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x5a3eb4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e4b829; op2val:0x535a3eb4; 
   valaddr_reg:x11; val_offset:2494*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2494*FLEN/8, x12, x8, x9)

inst_1270:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d1b4ae; op2val:0x54cb92d4; 
   valaddr_reg:x11; val_offset:2496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2496*FLEN/8, x12, x8, x9)

inst_1271:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d1b4ae; op2val:0x54cb92d4; 
   valaddr_reg:x11; val_offset:2498*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2498*FLEN/8, x12, x8, x9)

inst_1272:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d1b4ae; op2val:0x54cb92d4; 
   valaddr_reg:x11; val_offset:2500*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2500*FLEN/8, x12, x8, x9)

inst_1273:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d1b4ae; op2val:0x54cb92d4; 
   valaddr_reg:x11; val_offset:2502*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2502*FLEN/8, x12, x8, x9)

inst_1274:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x51b4ae and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4b92d4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d1b4ae; op2val:0x54cb92d4; 
   valaddr_reg:x11; val_offset:2504*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2504*FLEN/8, x12, x8, x9)

inst_1275:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f031f5; op2val:0x52fce0b4; 
   valaddr_reg:x11; val_offset:2506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2506*FLEN/8, x12, x8, x9)

inst_1276:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f031f5; op2val:0x52fce0b4; 
   valaddr_reg:x11; val_offset:2508*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2508*FLEN/8, x12, x8, x9)

inst_1277:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f031f5; op2val:0x52fce0b4; 
   valaddr_reg:x11; val_offset:2510*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2510*FLEN/8, x12, x8, x9)

inst_1278:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f031f5; op2val:0x52fce0b4; 
   valaddr_reg:x11; val_offset:2512*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2512*FLEN/8, x12, x8, x9)

inst_1279:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7031f5 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x7ce0b4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f031f5; op2val:0x52fce0b4; 
   valaddr_reg:x11; val_offset:2514*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2514*FLEN/8, x12, x8, x9)

inst_1280:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x516b6c85; op2val:0x54fe2927; 
   valaddr_reg:x11; val_offset:2516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2516*FLEN/8, x12, x8, x9)

inst_1281:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x516b6c85; op2val:0x54fe2927; 
   valaddr_reg:x11; val_offset:2518*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2518*FLEN/8, x12, x8, x9)

inst_1282:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x516b6c85; op2val:0x54fe2927; 
   valaddr_reg:x11; val_offset:2520*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2520*FLEN/8, x12, x8, x9)

inst_1283:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x516b6c85; op2val:0x54fe2927; 
   valaddr_reg:x11; val_offset:2522*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2522*FLEN/8, x12, x8, x9)

inst_1284:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x6b6c85 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e2927 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x516b6c85; op2val:0x54fe2927; 
   valaddr_reg:x11; val_offset:2524*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2524*FLEN/8, x12, x8, x9)

inst_1285:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5249eed4; op2val:0x54f9b089; 
   valaddr_reg:x11; val_offset:2526*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2526*FLEN/8, x12, x8, x9)

inst_1286:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5249eed4; op2val:0x54f9b089; 
   valaddr_reg:x11; val_offset:2528*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2528*FLEN/8, x12, x8, x9)

inst_1287:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5249eed4; op2val:0x54f9b089; 
   valaddr_reg:x11; val_offset:2530*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2530*FLEN/8, x12, x8, x9)

inst_1288:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5249eed4; op2val:0x54f9b089; 
   valaddr_reg:x11; val_offset:2532*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2532*FLEN/8, x12, x8, x9)

inst_1289:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x49eed4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x79b089 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5249eed4; op2val:0x54f9b089; 
   valaddr_reg:x11; val_offset:2534*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2534*FLEN/8, x12, x8, x9)

inst_1290:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54dbf2ef; op2val:0x53903445; 
   valaddr_reg:x11; val_offset:2536*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2536*FLEN/8, x12, x8, x9)

inst_1291:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54dbf2ef; op2val:0x53903445; 
   valaddr_reg:x11; val_offset:2538*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2538*FLEN/8, x12, x8, x9)

inst_1292:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54dbf2ef; op2val:0x53903445; 
   valaddr_reg:x11; val_offset:2540*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2540*FLEN/8, x12, x8, x9)

inst_1293:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54dbf2ef; op2val:0x53903445; 
   valaddr_reg:x11; val_offset:2542*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2542*FLEN/8, x12, x8, x9)

inst_1294:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5bf2ef and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x103445 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54dbf2ef; op2val:0x53903445; 
   valaddr_reg:x11; val_offset:2544*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2544*FLEN/8, x12, x8, x9)

inst_1295:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53662d46; op2val:0x54e33a57; 
   valaddr_reg:x11; val_offset:2546*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2546*FLEN/8, x12, x8, x9)

inst_1296:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53662d46; op2val:0x54e33a57; 
   valaddr_reg:x11; val_offset:2548*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2548*FLEN/8, x12, x8, x9)

inst_1297:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53662d46; op2val:0x54e33a57; 
   valaddr_reg:x11; val_offset:2550*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2550*FLEN/8, x12, x8, x9)

inst_1298:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53662d46; op2val:0x54e33a57; 
   valaddr_reg:x11; val_offset:2552*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2552*FLEN/8, x12, x8, x9)

inst_1299:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x662d46 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x633a57 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53662d46; op2val:0x54e33a57; 
   valaddr_reg:x11; val_offset:2554*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2554*FLEN/8, x12, x8, x9)

inst_1300:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f58c44; op2val:0x52a73bc3; 
   valaddr_reg:x11; val_offset:2556*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2556*FLEN/8, x12, x8, x9)

inst_1301:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f58c44; op2val:0x52a73bc3; 
   valaddr_reg:x11; val_offset:2558*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2558*FLEN/8, x12, x8, x9)

inst_1302:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f58c44; op2val:0x52a73bc3; 
   valaddr_reg:x11; val_offset:2560*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2560*FLEN/8, x12, x8, x9)

inst_1303:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f58c44; op2val:0x52a73bc3; 
   valaddr_reg:x11; val_offset:2562*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2562*FLEN/8, x12, x8, x9)

inst_1304:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x758c44 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x273bc3 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f58c44; op2val:0x52a73bc3; 
   valaddr_reg:x11; val_offset:2564*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2564*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_10)

inst_1305:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f76dcf; op2val:0x52892319; 
   valaddr_reg:x11; val_offset:2566*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2566*FLEN/8, x12, x8, x9)

inst_1306:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f76dcf; op2val:0x52892319; 
   valaddr_reg:x11; val_offset:2568*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2568*FLEN/8, x12, x8, x9)

inst_1307:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f76dcf; op2val:0x52892319; 
   valaddr_reg:x11; val_offset:2570*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2570*FLEN/8, x12, x8, x9)

inst_1308:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f76dcf; op2val:0x52892319; 
   valaddr_reg:x11; val_offset:2572*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2572*FLEN/8, x12, x8, x9)

inst_1309:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x776dcf and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x092319 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f76dcf; op2val:0x52892319; 
   valaddr_reg:x11; val_offset:2574*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2574*FLEN/8, x12, x8, x9)

inst_1310:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54725d9b; op2val:0x5486d132; 
   valaddr_reg:x11; val_offset:2576*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2576*FLEN/8, x12, x8, x9)

inst_1311:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54725d9b; op2val:0x5486d132; 
   valaddr_reg:x11; val_offset:2578*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2578*FLEN/8, x12, x8, x9)

inst_1312:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54725d9b; op2val:0x5486d132; 
   valaddr_reg:x11; val_offset:2580*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2580*FLEN/8, x12, x8, x9)

inst_1313:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54725d9b; op2val:0x5486d132; 
   valaddr_reg:x11; val_offset:2582*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2582*FLEN/8, x12, x8, x9)

inst_1314:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x725d9b and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x06d132 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54725d9b; op2val:0x5486d132; 
   valaddr_reg:x11; val_offset:2584*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2584*FLEN/8, x12, x8, x9)

inst_1315:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe78c; op2val:0x5300c3a4; 
   valaddr_reg:x11; val_offset:2586*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2586*FLEN/8, x12, x8, x9)

inst_1316:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe78c; op2val:0x5300c3a4; 
   valaddr_reg:x11; val_offset:2588*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2588*FLEN/8, x12, x8, x9)

inst_1317:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe78c; op2val:0x5300c3a4; 
   valaddr_reg:x11; val_offset:2590*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2590*FLEN/8, x12, x8, x9)

inst_1318:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe78c; op2val:0x5300c3a4; 
   valaddr_reg:x11; val_offset:2592*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2592*FLEN/8, x12, x8, x9)

inst_1319:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe78c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x00c3a4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe78c; op2val:0x5300c3a4; 
   valaddr_reg:x11; val_offset:2594*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2594*FLEN/8, x12, x8, x9)

inst_1320:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a2cb5f; op2val:0x543a6942; 
   valaddr_reg:x11; val_offset:2596*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2596*FLEN/8, x12, x8, x9)

inst_1321:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a2cb5f; op2val:0x543a6942; 
   valaddr_reg:x11; val_offset:2598*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2598*FLEN/8, x12, x8, x9)

inst_1322:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a2cb5f; op2val:0x543a6942; 
   valaddr_reg:x11; val_offset:2600*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2600*FLEN/8, x12, x8, x9)

inst_1323:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a2cb5f; op2val:0x543a6942; 
   valaddr_reg:x11; val_offset:2602*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2602*FLEN/8, x12, x8, x9)

inst_1324:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x22cb5f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x3a6942 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a2cb5f; op2val:0x543a6942; 
   valaddr_reg:x11; val_offset:2604*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2604*FLEN/8, x12, x8, x9)

inst_1325:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fe3217; op2val:0x5166f4af; 
   valaddr_reg:x11; val_offset:2606*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2606*FLEN/8, x12, x8, x9)

inst_1326:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fe3217; op2val:0x5166f4af; 
   valaddr_reg:x11; val_offset:2608*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2608*FLEN/8, x12, x8, x9)

inst_1327:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fe3217; op2val:0x5166f4af; 
   valaddr_reg:x11; val_offset:2610*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2610*FLEN/8, x12, x8, x9)

inst_1328:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fe3217; op2val:0x5166f4af; 
   valaddr_reg:x11; val_offset:2612*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2612*FLEN/8, x12, x8, x9)

inst_1329:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7e3217 and fs2 == 0 and fe2 == 0xa2 and fm2 == 0x66f4af and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fe3217; op2val:0x5166f4af; 
   valaddr_reg:x11; val_offset:2614*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2614*FLEN/8, x12, x8, x9)

inst_1330:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5494b28b; op2val:0x54569ae9; 
   valaddr_reg:x11; val_offset:2616*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2616*FLEN/8, x12, x8, x9)

inst_1331:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5494b28b; op2val:0x54569ae9; 
   valaddr_reg:x11; val_offset:2618*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2618*FLEN/8, x12, x8, x9)

inst_1332:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5494b28b; op2val:0x54569ae9; 
   valaddr_reg:x11; val_offset:2620*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2620*FLEN/8, x12, x8, x9)

inst_1333:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5494b28b; op2val:0x54569ae9; 
   valaddr_reg:x11; val_offset:2622*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2622*FLEN/8, x12, x8, x9)

inst_1334:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x14b28b and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x569ae9 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5494b28b; op2val:0x54569ae9; 
   valaddr_reg:x11; val_offset:2624*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2624*FLEN/8, x12, x8, x9)

inst_1335:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5ce0c; op2val:0x53518f9b; 
   valaddr_reg:x11; val_offset:2626*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2626*FLEN/8, x12, x8, x9)

inst_1336:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5ce0c; op2val:0x53518f9b; 
   valaddr_reg:x11; val_offset:2628*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2628*FLEN/8, x12, x8, x9)

inst_1337:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5ce0c; op2val:0x53518f9b; 
   valaddr_reg:x11; val_offset:2630*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2630*FLEN/8, x12, x8, x9)

inst_1338:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5ce0c; op2val:0x53518f9b; 
   valaddr_reg:x11; val_offset:2632*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2632*FLEN/8, x12, x8, x9)

inst_1339:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65ce0c and fs2 == 0 and fe2 == 0xa6 and fm2 == 0x518f9b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5ce0c; op2val:0x53518f9b; 
   valaddr_reg:x11; val_offset:2634*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2634*FLEN/8, x12, x8, x9)

inst_1340:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cdec85; op2val:0x53c84de9; 
   valaddr_reg:x11; val_offset:2636*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2636*FLEN/8, x12, x8, x9)

inst_1341:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cdec85; op2val:0x53c84de9; 
   valaddr_reg:x11; val_offset:2638*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2638*FLEN/8, x12, x8, x9)

inst_1342:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cdec85; op2val:0x53c84de9; 
   valaddr_reg:x11; val_offset:2640*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2640*FLEN/8, x12, x8, x9)

inst_1343:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cdec85; op2val:0x53c84de9; 
   valaddr_reg:x11; val_offset:2642*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2642*FLEN/8, x12, x8, x9)

inst_1344:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4dec85 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x484de9 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cdec85; op2val:0x53c84de9; 
   valaddr_reg:x11; val_offset:2644*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2644*FLEN/8, x12, x8, x9)

inst_1345:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53f8aab4; op2val:0x54c1d553; 
   valaddr_reg:x11; val_offset:2646*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2646*FLEN/8, x12, x8, x9)

inst_1346:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53f8aab4; op2val:0x54c1d553; 
   valaddr_reg:x11; val_offset:2648*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2648*FLEN/8, x12, x8, x9)

inst_1347:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53f8aab4; op2val:0x54c1d553; 
   valaddr_reg:x11; val_offset:2650*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2650*FLEN/8, x12, x8, x9)

inst_1348:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53f8aab4; op2val:0x54c1d553; 
   valaddr_reg:x11; val_offset:2652*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2652*FLEN/8, x12, x8, x9)

inst_1349:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x78aab4 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x41d553 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53f8aab4; op2val:0x54c1d553; 
   valaddr_reg:x11; val_offset:2654*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2654*FLEN/8, x12, x8, x9)

inst_1350:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x541505c1; op2val:0x54b57d1f; 
   valaddr_reg:x11; val_offset:2656*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2656*FLEN/8, x12, x8, x9)

inst_1351:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x541505c1; op2val:0x54b57d1f; 
   valaddr_reg:x11; val_offset:2658*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2658*FLEN/8, x12, x8, x9)

inst_1352:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x541505c1; op2val:0x54b57d1f; 
   valaddr_reg:x11; val_offset:2660*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2660*FLEN/8, x12, x8, x9)

inst_1353:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x541505c1; op2val:0x54b57d1f; 
   valaddr_reg:x11; val_offset:2662*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2662*FLEN/8, x12, x8, x9)

inst_1354:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1505c1 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x357d1f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x541505c1; op2val:0x54b57d1f; 
   valaddr_reg:x11; val_offset:2664*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2664*FLEN/8, x12, x8, x9)

inst_1355:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52bd7698; op2val:0x54f42896; 
   valaddr_reg:x11; val_offset:2666*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2666*FLEN/8, x12, x8, x9)

inst_1356:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52bd7698; op2val:0x54f42896; 
   valaddr_reg:x11; val_offset:2668*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2668*FLEN/8, x12, x8, x9)

inst_1357:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52bd7698; op2val:0x54f42896; 
   valaddr_reg:x11; val_offset:2670*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2670*FLEN/8, x12, x8, x9)

inst_1358:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52bd7698; op2val:0x54f42896; 
   valaddr_reg:x11; val_offset:2672*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2672*FLEN/8, x12, x8, x9)

inst_1359:
// fs1 == 0 and fe1 == 0xa5 and fm1 == 0x3d7698 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x742896 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x52bd7698; op2val:0x54f42896; 
   valaddr_reg:x11; val_offset:2674*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2674*FLEN/8, x12, x8, x9)

inst_1360:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x522857ad; op2val:0x54fabd43; 
   valaddr_reg:x11; val_offset:2676*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2676*FLEN/8, x12, x8, x9)

inst_1361:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x522857ad; op2val:0x54fabd43; 
   valaddr_reg:x11; val_offset:2678*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2678*FLEN/8, x12, x8, x9)

inst_1362:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x522857ad; op2val:0x54fabd43; 
   valaddr_reg:x11; val_offset:2680*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2680*FLEN/8, x12, x8, x9)

inst_1363:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x522857ad; op2val:0x54fabd43; 
   valaddr_reg:x11; val_offset:2682*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2682*FLEN/8, x12, x8, x9)

inst_1364:
// fs1 == 0 and fe1 == 0xa4 and fm1 == 0x2857ad and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7abd43 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x522857ad; op2val:0x54fabd43; 
   valaddr_reg:x11; val_offset:2684*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2684*FLEN/8, x12, x8, x9)

inst_1365:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5315efba; op2val:0x54ed4209; 
   valaddr_reg:x11; val_offset:2686*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2686*FLEN/8, x12, x8, x9)

inst_1366:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5315efba; op2val:0x54ed4209; 
   valaddr_reg:x11; val_offset:2688*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2688*FLEN/8, x12, x8, x9)

inst_1367:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5315efba; op2val:0x54ed4209; 
   valaddr_reg:x11; val_offset:2690*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2690*FLEN/8, x12, x8, x9)

inst_1368:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5315efba; op2val:0x54ed4209; 
   valaddr_reg:x11; val_offset:2692*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2692*FLEN/8, x12, x8, x9)

inst_1369:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x15efba and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x6d4209 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5315efba; op2val:0x54ed4209; 
   valaddr_reg:x11; val_offset:2694*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2694*FLEN/8, x12, x8, x9)

inst_1370:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548cffbc; op2val:0x54660089; 
   valaddr_reg:x11; val_offset:2696*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2696*FLEN/8, x12, x8, x9)

inst_1371:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548cffbc; op2val:0x54660089; 
   valaddr_reg:x11; val_offset:2698*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2698*FLEN/8, x12, x8, x9)

inst_1372:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548cffbc; op2val:0x54660089; 
   valaddr_reg:x11; val_offset:2700*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2700*FLEN/8, x12, x8, x9)

inst_1373:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548cffbc; op2val:0x54660089; 
   valaddr_reg:x11; val_offset:2702*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2702*FLEN/8, x12, x8, x9)

inst_1374:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0cffbc and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x660089 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548cffbc; op2val:0x54660089; 
   valaddr_reg:x11; val_offset:2704*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2704*FLEN/8, x12, x8, x9)

inst_1375:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391b2c2; op2val:0x54db9350; 
   valaddr_reg:x11; val_offset:2706*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2706*FLEN/8, x12, x8, x9)

inst_1376:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391b2c2; op2val:0x54db9350; 
   valaddr_reg:x11; val_offset:2708*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2708*FLEN/8, x12, x8, x9)

inst_1377:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391b2c2; op2val:0x54db9350; 
   valaddr_reg:x11; val_offset:2710*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2710*FLEN/8, x12, x8, x9)

inst_1378:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391b2c2; op2val:0x54db9350; 
   valaddr_reg:x11; val_offset:2712*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2712*FLEN/8, x12, x8, x9)

inst_1379:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11b2c2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b9350 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391b2c2; op2val:0x54db9350; 
   valaddr_reg:x11; val_offset:2714*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2714*FLEN/8, x12, x8, x9)

inst_1380:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a31035; op2val:0x5439df96; 
   valaddr_reg:x11; val_offset:2716*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2716*FLEN/8, x12, x8, x9)

inst_1381:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a31035; op2val:0x5439df96; 
   valaddr_reg:x11; val_offset:2718*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2718*FLEN/8, x12, x8, x9)

inst_1382:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a31035; op2val:0x5439df96; 
   valaddr_reg:x11; val_offset:2720*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2720*FLEN/8, x12, x8, x9)

inst_1383:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a31035; op2val:0x5439df96; 
   valaddr_reg:x11; val_offset:2722*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2722*FLEN/8, x12, x8, x9)

inst_1384:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x231035 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39df96 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a31035; op2val:0x5439df96; 
   valaddr_reg:x11; val_offset:2724*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2724*FLEN/8, x12, x8, x9)

inst_1385:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5463be4a; op2val:0x548e20db; 
   valaddr_reg:x11; val_offset:2726*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2726*FLEN/8, x12, x8, x9)

inst_1386:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5463be4a; op2val:0x548e20db; 
   valaddr_reg:x11; val_offset:2728*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2728*FLEN/8, x12, x8, x9)

inst_1387:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5463be4a; op2val:0x548e20db; 
   valaddr_reg:x11; val_offset:2730*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2730*FLEN/8, x12, x8, x9)

inst_1388:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5463be4a; op2val:0x548e20db; 
   valaddr_reg:x11; val_offset:2732*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2732*FLEN/8, x12, x8, x9)

inst_1389:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x63be4a and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0e20db and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5463be4a; op2val:0x548e20db; 
   valaddr_reg:x11; val_offset:2734*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2734*FLEN/8, x12, x8, x9)

inst_1390:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f2ed34; op2val:0x52d12cc1; 
   valaddr_reg:x11; val_offset:2736*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2736*FLEN/8, x12, x8, x9)

inst_1391:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f2ed34; op2val:0x52d12cc1; 
   valaddr_reg:x11; val_offset:2738*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2738*FLEN/8, x12, x8, x9)

inst_1392:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f2ed34; op2val:0x52d12cc1; 
   valaddr_reg:x11; val_offset:2740*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2740*FLEN/8, x12, x8, x9)

inst_1393:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f2ed34; op2val:0x52d12cc1; 
   valaddr_reg:x11; val_offset:2742*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2742*FLEN/8, x12, x8, x9)

inst_1394:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x72ed34 and fs2 == 0 and fe2 == 0xa5 and fm2 == 0x512cc1 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54f2ed34; op2val:0x52d12cc1; 
   valaddr_reg:x11; val_offset:2744*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2744*FLEN/8, x12, x8, x9)

inst_1395:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54513775; op2val:0x54976446; 
   valaddr_reg:x11; val_offset:2746*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2746*FLEN/8, x12, x8, x9)

inst_1396:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54513775; op2val:0x54976446; 
   valaddr_reg:x11; val_offset:2748*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2748*FLEN/8, x12, x8, x9)

inst_1397:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54513775; op2val:0x54976446; 
   valaddr_reg:x11; val_offset:2750*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2750*FLEN/8, x12, x8, x9)

inst_1398:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54513775; op2val:0x54976446; 
   valaddr_reg:x11; val_offset:2752*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2752*FLEN/8, x12, x8, x9)

inst_1399:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x513775 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x176446 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54513775; op2val:0x54976446; 
   valaddr_reg:x11; val_offset:2754*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2754*FLEN/8, x12, x8, x9)

inst_1400:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54ba6a09; op2val:0x540b2bec; 
   valaddr_reg:x11; val_offset:2756*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2756*FLEN/8, x12, x8, x9)

inst_1401:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54ba6a09; op2val:0x540b2bec; 
   valaddr_reg:x11; val_offset:2758*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2758*FLEN/8, x12, x8, x9)

inst_1402:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54ba6a09; op2val:0x540b2bec; 
   valaddr_reg:x11; val_offset:2760*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2760*FLEN/8, x12, x8, x9)

inst_1403:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54ba6a09; op2val:0x540b2bec; 
   valaddr_reg:x11; val_offset:2762*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2762*FLEN/8, x12, x8, x9)

inst_1404:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3a6a09 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x0b2bec and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54ba6a09; op2val:0x540b2bec; 
   valaddr_reg:x11; val_offset:2764*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2764*FLEN/8, x12, x8, x9)

inst_1405:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d0e2d3; op2val:0x54cbc74b; 
   valaddr_reg:x11; val_offset:2766*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2766*FLEN/8, x12, x8, x9)

inst_1406:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d0e2d3; op2val:0x54cbc74b; 
   valaddr_reg:x11; val_offset:2768*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2768*FLEN/8, x12, x8, x9)

inst_1407:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d0e2d3; op2val:0x54cbc74b; 
   valaddr_reg:x11; val_offset:2770*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2770*FLEN/8, x12, x8, x9)

inst_1408:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d0e2d3; op2val:0x54cbc74b; 
   valaddr_reg:x11; val_offset:2772*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2772*FLEN/8, x12, x8, x9)

inst_1409:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x50e2d3 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bc74b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d0e2d3; op2val:0x54cbc74b; 
   valaddr_reg:x11; val_offset:2774*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2774*FLEN/8, x12, x8, x9)

inst_1410:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5471182c; op2val:0x548773ea; 
   valaddr_reg:x11; val_offset:2776*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2776*FLEN/8, x12, x8, x9)

inst_1411:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5471182c; op2val:0x548773ea; 
   valaddr_reg:x11; val_offset:2778*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2778*FLEN/8, x12, x8, x9)

inst_1412:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5471182c; op2val:0x548773ea; 
   valaddr_reg:x11; val_offset:2780*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2780*FLEN/8, x12, x8, x9)

inst_1413:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5471182c; op2val:0x548773ea; 
   valaddr_reg:x11; val_offset:2782*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2782*FLEN/8, x12, x8, x9)

inst_1414:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x71182c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0773ea and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5471182c; op2val:0x548773ea; 
   valaddr_reg:x11; val_offset:2784*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2784*FLEN/8, x12, x8, x9)

inst_1415:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbe88a; op2val:0x53d05dd7; 
   valaddr_reg:x11; val_offset:2786*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2786*FLEN/8, x12, x8, x9)

inst_1416:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbe88a; op2val:0x53d05dd7; 
   valaddr_reg:x11; val_offset:2788*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2788*FLEN/8, x12, x8, x9)

inst_1417:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbe88a; op2val:0x53d05dd7; 
   valaddr_reg:x11; val_offset:2790*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2790*FLEN/8, x12, x8, x9)

inst_1418:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbe88a; op2val:0x53d05dd7; 
   valaddr_reg:x11; val_offset:2792*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2792*FLEN/8, x12, x8, x9)

inst_1419:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4be88a and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x505dd7 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbe88a; op2val:0x53d05dd7; 
   valaddr_reg:x11; val_offset:2794*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2794*FLEN/8, x12, x8, x9)

inst_1420:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548ee4fd; op2val:0x54623606; 
   valaddr_reg:x11; val_offset:2796*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2796*FLEN/8, x12, x8, x9)

inst_1421:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548ee4fd; op2val:0x54623606; 
   valaddr_reg:x11; val_offset:2798*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2798*FLEN/8, x12, x8, x9)

inst_1422:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548ee4fd; op2val:0x54623606; 
   valaddr_reg:x11; val_offset:2800*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2800*FLEN/8, x12, x8, x9)

inst_1423:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548ee4fd; op2val:0x54623606; 
   valaddr_reg:x11; val_offset:2802*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2802*FLEN/8, x12, x8, x9)

inst_1424:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0ee4fd and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x623606 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x548ee4fd; op2val:0x54623606; 
   valaddr_reg:x11; val_offset:2804*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2804*FLEN/8, x12, x8, x9)

inst_1425:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbb030; op2val:0x53d13f40; 
   valaddr_reg:x11; val_offset:2806*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2806*FLEN/8, x12, x8, x9)

inst_1426:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbb030; op2val:0x53d13f40; 
   valaddr_reg:x11; val_offset:2808*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2808*FLEN/8, x12, x8, x9)

inst_1427:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbb030; op2val:0x53d13f40; 
   valaddr_reg:x11; val_offset:2810*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2810*FLEN/8, x12, x8, x9)

inst_1428:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbb030; op2val:0x53d13f40; 
   valaddr_reg:x11; val_offset:2812*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2812*FLEN/8, x12, x8, x9)

inst_1429:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x4bb030 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x513f40 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54cbb030; op2val:0x53d13f40; 
   valaddr_reg:x11; val_offset:2814*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2814*FLEN/8, x12, x8, x9)

inst_1430:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x544c2c7c; op2val:0x5499e9c2; 
   valaddr_reg:x11; val_offset:2816*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2816*FLEN/8, x12, x8, x9)

inst_1431:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x544c2c7c; op2val:0x5499e9c2; 
   valaddr_reg:x11; val_offset:2818*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2818*FLEN/8, x12, x8, x9)

inst_1432:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x544c2c7c; op2val:0x5499e9c2; 
   valaddr_reg:x11; val_offset:2820*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2820*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_11)

inst_1433:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x544c2c7c; op2val:0x5499e9c2; 
   valaddr_reg:x11; val_offset:2822*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2822*FLEN/8, x12, x8, x9)

inst_1434:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4c2c7c and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x19e9c2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x544c2c7c; op2val:0x5499e9c2; 
   valaddr_reg:x11; val_offset:2824*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2824*FLEN/8, x12, x8, x9)

inst_1435:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x545d09f2; op2val:0x54917b07; 
   valaddr_reg:x11; val_offset:2826*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2826*FLEN/8, x12, x8, x9)

inst_1436:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x545d09f2; op2val:0x54917b07; 
   valaddr_reg:x11; val_offset:2828*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2828*FLEN/8, x12, x8, x9)

inst_1437:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x545d09f2; op2val:0x54917b07; 
   valaddr_reg:x11; val_offset:2830*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2830*FLEN/8, x12, x8, x9)

inst_1438:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x545d09f2; op2val:0x54917b07; 
   valaddr_reg:x11; val_offset:2832*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2832*FLEN/8, x12, x8, x9)

inst_1439:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x5d09f2 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x117b07 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x545d09f2; op2val:0x54917b07; 
   valaddr_reg:x11; val_offset:2834*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2834*FLEN/8, x12, x8, x9)

inst_1440:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54682a36; op2val:0x548beae5; 
   valaddr_reg:x11; val_offset:2836*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2836*FLEN/8, x12, x8, x9)

inst_1441:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54682a36; op2val:0x548beae5; 
   valaddr_reg:x11; val_offset:2838*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2838*FLEN/8, x12, x8, x9)

inst_1442:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54682a36; op2val:0x548beae5; 
   valaddr_reg:x11; val_offset:2840*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2840*FLEN/8, x12, x8, x9)

inst_1443:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54682a36; op2val:0x548beae5; 
   valaddr_reg:x11; val_offset:2842*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2842*FLEN/8, x12, x8, x9)

inst_1444:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x682a36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x0beae5 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54682a36; op2val:0x548beae5; 
   valaddr_reg:x11; val_offset:2844*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2844*FLEN/8, x12, x8, x9)

inst_1445:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391fd36; op2val:0x54db80b3; 
   valaddr_reg:x11; val_offset:2846*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2846*FLEN/8, x12, x8, x9)

inst_1446:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391fd36; op2val:0x54db80b3; 
   valaddr_reg:x11; val_offset:2848*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2848*FLEN/8, x12, x8, x9)

inst_1447:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391fd36; op2val:0x54db80b3; 
   valaddr_reg:x11; val_offset:2850*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2850*FLEN/8, x12, x8, x9)

inst_1448:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391fd36; op2val:0x54db80b3; 
   valaddr_reg:x11; val_offset:2852*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2852*FLEN/8, x12, x8, x9)

inst_1449:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x11fd36 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x5b80b3 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x5391fd36; op2val:0x54db80b3; 
   valaddr_reg:x11; val_offset:2854*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2854*FLEN/8, x12, x8, x9)

inst_1450:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a32653; op2val:0x5439b35a; 
   valaddr_reg:x11; val_offset:2856*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2856*FLEN/8, x12, x8, x9)

inst_1451:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a32653; op2val:0x5439b35a; 
   valaddr_reg:x11; val_offset:2858*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2858*FLEN/8, x12, x8, x9)

inst_1452:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a32653; op2val:0x5439b35a; 
   valaddr_reg:x11; val_offset:2860*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2860*FLEN/8, x12, x8, x9)

inst_1453:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a32653; op2val:0x5439b35a; 
   valaddr_reg:x11; val_offset:2862*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2862*FLEN/8, x12, x8, x9)

inst_1454:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x232653 and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x39b35a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a32653; op2val:0x5439b35a; 
   valaddr_reg:x11; val_offset:2864*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2864*FLEN/8, x12, x8, x9)

inst_1455:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d086fb; op2val:0x54cbde42; 
   valaddr_reg:x11; val_offset:2866*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2866*FLEN/8, x12, x8, x9)

inst_1456:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d086fb; op2val:0x54cbde42; 
   valaddr_reg:x11; val_offset:2868*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2868*FLEN/8, x12, x8, x9)

inst_1457:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d086fb; op2val:0x54cbde42; 
   valaddr_reg:x11; val_offset:2870*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2870*FLEN/8, x12, x8, x9)

inst_1458:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d086fb; op2val:0x54cbde42; 
   valaddr_reg:x11; val_offset:2872*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2872*FLEN/8, x12, x8, x9)

inst_1459:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x5086fb and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x4bde42 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d086fb; op2val:0x54cbde42; 
   valaddr_reg:x11; val_offset:2874*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2874*FLEN/8, x12, x8, x9)

inst_1460:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b2f11f; op2val:0x541a1dc2; 
   valaddr_reg:x11; val_offset:2876*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2876*FLEN/8, x12, x8, x9)

inst_1461:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b2f11f; op2val:0x541a1dc2; 
   valaddr_reg:x11; val_offset:2878*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2878*FLEN/8, x12, x8, x9)

inst_1462:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b2f11f; op2val:0x541a1dc2; 
   valaddr_reg:x11; val_offset:2880*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2880*FLEN/8, x12, x8, x9)

inst_1463:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b2f11f; op2val:0x541a1dc2; 
   valaddr_reg:x11; val_offset:2882*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2882*FLEN/8, x12, x8, x9)

inst_1464:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x32f11f and fs2 == 0 and fe2 == 0xa8 and fm2 == 0x1a1dc2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b2f11f; op2val:0x541a1dc2; 
   valaddr_reg:x11; val_offset:2884*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2884*FLEN/8, x12, x8, x9)

inst_1465:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x517ed344; op2val:0x54fe025a; 
   valaddr_reg:x11; val_offset:2886*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2886*FLEN/8, x12, x8, x9)

inst_1466:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x517ed344; op2val:0x54fe025a; 
   valaddr_reg:x11; val_offset:2888*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2888*FLEN/8, x12, x8, x9)

inst_1467:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x517ed344; op2val:0x54fe025a; 
   valaddr_reg:x11; val_offset:2890*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2890*FLEN/8, x12, x8, x9)

inst_1468:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x517ed344; op2val:0x54fe025a; 
   valaddr_reg:x11; val_offset:2892*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2892*FLEN/8, x12, x8, x9)

inst_1469:
// fs1 == 0 and fe1 == 0xa2 and fm1 == 0x7ed344 and fs2 == 0 and fe2 == 0xa9 and fm2 == 0x7e025a and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x517ed344; op2val:0x54fe025a; 
   valaddr_reg:x11; val_offset:2894*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2894*FLEN/8, x12, x8, x9)

inst_1470:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6ceb24; op2val:0xbe6ceb24; 
   valaddr_reg:x11; val_offset:2896*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2896*FLEN/8, x12, x8, x9)

inst_1471:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6ceb24; op2val:0xbe6ceb24; 
   valaddr_reg:x11; val_offset:2898*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2898*FLEN/8, x12, x8, x9)

inst_1472:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6ceb24; op2val:0xbe6ceb24; 
   valaddr_reg:x11; val_offset:2900*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2900*FLEN/8, x12, x8, x9)

inst_1473:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6ceb24; op2val:0xbe6ceb24; 
   valaddr_reg:x11; val_offset:2902*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2902*FLEN/8, x12, x8, x9)

inst_1474:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6ceb24 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6ceb24 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6ceb24; op2val:0xbe6ceb24; 
   valaddr_reg:x11; val_offset:2904*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2904*FLEN/8, x12, x8, x9)

inst_1475:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8da7b; op2val:0xbee8da7b; 
   valaddr_reg:x11; val_offset:2906*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2906*FLEN/8, x12, x8, x9)

inst_1476:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8da7b; op2val:0xbee8da7b; 
   valaddr_reg:x11; val_offset:2908*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2908*FLEN/8, x12, x8, x9)

inst_1477:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8da7b; op2val:0xbee8da7b; 
   valaddr_reg:x11; val_offset:2910*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2910*FLEN/8, x12, x8, x9)

inst_1478:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8da7b; op2val:0xbee8da7b; 
   valaddr_reg:x11; val_offset:2912*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2912*FLEN/8, x12, x8, x9)

inst_1479:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68da7b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x68da7b and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8da7b; op2val:0xbee8da7b; 
   valaddr_reg:x11; val_offset:2914*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2914*FLEN/8, x12, x8, x9)

inst_1480:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9660a0; op2val:0xbe9660a0; 
   valaddr_reg:x11; val_offset:2916*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2916*FLEN/8, x12, x8, x9)

inst_1481:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9660a0; op2val:0xbe9660a0; 
   valaddr_reg:x11; val_offset:2918*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2918*FLEN/8, x12, x8, x9)

inst_1482:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9660a0; op2val:0xbe9660a0; 
   valaddr_reg:x11; val_offset:2920*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2920*FLEN/8, x12, x8, x9)

inst_1483:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9660a0; op2val:0xbe9660a0; 
   valaddr_reg:x11; val_offset:2922*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2922*FLEN/8, x12, x8, x9)

inst_1484:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1660a0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1660a0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9660a0; op2val:0xbe9660a0; 
   valaddr_reg:x11; val_offset:2924*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2924*FLEN/8, x12, x8, x9)

inst_1485:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; 
   valaddr_reg:x11; val_offset:2926*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2926*FLEN/8, x12, x8, x9)

inst_1486:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; 
   valaddr_reg:x11; val_offset:2928*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2928*FLEN/8, x12, x8, x9)

inst_1487:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; 
   valaddr_reg:x11; val_offset:2930*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2930*FLEN/8, x12, x8, x9)

inst_1488:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; 
   valaddr_reg:x11; val_offset:2932*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2932*FLEN/8, x12, x8, x9)

inst_1489:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c5c1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x24c5c1 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c5c1; op2val:0xbea4c5c1; 
   valaddr_reg:x11; val_offset:2934*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2934*FLEN/8, x12, x8, x9)

inst_1490:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4483e0; op2val:0xbf4483e0; 
   valaddr_reg:x11; val_offset:2936*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2936*FLEN/8, x12, x8, x9)

inst_1491:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4483e0; op2val:0xbf4483e0; 
   valaddr_reg:x11; val_offset:2938*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2938*FLEN/8, x12, x8, x9)

inst_1492:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4483e0; op2val:0xbf4483e0; 
   valaddr_reg:x11; val_offset:2940*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2940*FLEN/8, x12, x8, x9)

inst_1493:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4483e0; op2val:0xbf4483e0; 
   valaddr_reg:x11; val_offset:2942*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2942*FLEN/8, x12, x8, x9)

inst_1494:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4483e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4483e0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4483e0; op2val:0xbf4483e0; 
   valaddr_reg:x11; val_offset:2944*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2944*FLEN/8, x12, x8, x9)

inst_1495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f384c20; op2val:0xbf384c20; 
   valaddr_reg:x11; val_offset:2946*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2946*FLEN/8, x12, x8, x9)

inst_1496:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f384c20; op2val:0xbf384c20; 
   valaddr_reg:x11; val_offset:2948*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2948*FLEN/8, x12, x8, x9)

inst_1497:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f384c20; op2val:0xbf384c20; 
   valaddr_reg:x11; val_offset:2950*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2950*FLEN/8, x12, x8, x9)

inst_1498:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f384c20; op2val:0xbf384c20; 
   valaddr_reg:x11; val_offset:2952*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2952*FLEN/8, x12, x8, x9)

inst_1499:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x384c20 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x384c20 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f384c20; op2val:0xbf384c20; 
   valaddr_reg:x11; val_offset:2954*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2954*FLEN/8, x12, x8, x9)

inst_1500:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61112d; op2val:0xbf61112d; 
   valaddr_reg:x11; val_offset:2956*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2956*FLEN/8, x12, x8, x9)

inst_1501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61112d; op2val:0xbf61112d; 
   valaddr_reg:x11; val_offset:2958*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2958*FLEN/8, x12, x8, x9)

inst_1502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61112d; op2val:0xbf61112d; 
   valaddr_reg:x11; val_offset:2960*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2960*FLEN/8, x12, x8, x9)

inst_1503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61112d; op2val:0xbf61112d; 
   valaddr_reg:x11; val_offset:2962*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2962*FLEN/8, x12, x8, x9)

inst_1504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61112d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x61112d and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61112d; op2val:0xbf61112d; 
   valaddr_reg:x11; val_offset:2964*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2964*FLEN/8, x12, x8, x9)

inst_1505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f759eb4; op2val:0xbf759eb4; 
   valaddr_reg:x11; val_offset:2966*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2966*FLEN/8, x12, x8, x9)

inst_1506:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f759eb4; op2val:0xbf759eb4; 
   valaddr_reg:x11; val_offset:2968*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2968*FLEN/8, x12, x8, x9)

inst_1507:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f759eb4; op2val:0xbf759eb4; 
   valaddr_reg:x11; val_offset:2970*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2970*FLEN/8, x12, x8, x9)

inst_1508:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f759eb4; op2val:0xbf759eb4; 
   valaddr_reg:x11; val_offset:2972*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2972*FLEN/8, x12, x8, x9)

inst_1509:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x759eb4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x759eb4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f759eb4; op2val:0xbf759eb4; 
   valaddr_reg:x11; val_offset:2974*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2974*FLEN/8, x12, x8, x9)

inst_1510:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; 
   valaddr_reg:x11; val_offset:2976*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2976*FLEN/8, x12, x8, x9)

inst_1511:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; 
   valaddr_reg:x11; val_offset:2978*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2978*FLEN/8, x12, x8, x9)

inst_1512:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; 
   valaddr_reg:x11; val_offset:2980*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2980*FLEN/8, x12, x8, x9)

inst_1513:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; 
   valaddr_reg:x11; val_offset:2982*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2982*FLEN/8, x12, x8, x9)

inst_1514:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72a2c5 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x72a2c5 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2a2c5; op2val:0xbef2a2c5; 
   valaddr_reg:x11; val_offset:2984*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2984*FLEN/8, x12, x8, x9)

inst_1515:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a9058; op2val:0xbf1a9058; 
   valaddr_reg:x11; val_offset:2986*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2986*FLEN/8, x12, x8, x9)

inst_1516:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a9058; op2val:0xbf1a9058; 
   valaddr_reg:x11; val_offset:2988*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2988*FLEN/8, x12, x8, x9)

inst_1517:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a9058; op2val:0xbf1a9058; 
   valaddr_reg:x11; val_offset:2990*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 2990*FLEN/8, x12, x8, x9)

inst_1518:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a9058; op2val:0xbf1a9058; 
   valaddr_reg:x11; val_offset:2992*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 2992*FLEN/8, x12, x8, x9)

inst_1519:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1a9058 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1a9058 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1a9058; op2val:0xbf1a9058; 
   valaddr_reg:x11; val_offset:2994*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 2994*FLEN/8, x12, x8, x9)

inst_1520:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f5513; op2val:0xbf3f5513; 
   valaddr_reg:x11; val_offset:2996*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 2996*FLEN/8, x12, x8, x9)

inst_1521:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f5513; op2val:0xbf3f5513; 
   valaddr_reg:x11; val_offset:2998*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 2998*FLEN/8, x12, x8, x9)

inst_1522:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f5513; op2val:0xbf3f5513; 
   valaddr_reg:x11; val_offset:3000*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3000*FLEN/8, x12, x8, x9)

inst_1523:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f5513; op2val:0xbf3f5513; 
   valaddr_reg:x11; val_offset:3002*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3002*FLEN/8, x12, x8, x9)

inst_1524:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f5513 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3f5513 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f5513; op2val:0xbf3f5513; 
   valaddr_reg:x11; val_offset:3004*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3004*FLEN/8, x12, x8, x9)

inst_1525:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; 
   valaddr_reg:x11; val_offset:3006*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3006*FLEN/8, x12, x8, x9)

inst_1526:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; 
   valaddr_reg:x11; val_offset:3008*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3008*FLEN/8, x12, x8, x9)

inst_1527:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; 
   valaddr_reg:x11; val_offset:3010*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3010*FLEN/8, x12, x8, x9)

inst_1528:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; 
   valaddr_reg:x11; val_offset:3012*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3012*FLEN/8, x12, x8, x9)

inst_1529:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7aa6dc and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7aa6dc and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7aa6dc; op2val:0xbe7aa6dc; 
   valaddr_reg:x11; val_offset:3014*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3014*FLEN/8, x12, x8, x9)

inst_1530:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecf266e; op2val:0xbecf266e; 
   valaddr_reg:x11; val_offset:3016*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3016*FLEN/8, x12, x8, x9)

inst_1531:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecf266e; op2val:0xbecf266e; 
   valaddr_reg:x11; val_offset:3018*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3018*FLEN/8, x12, x8, x9)

inst_1532:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecf266e; op2val:0xbecf266e; 
   valaddr_reg:x11; val_offset:3020*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3020*FLEN/8, x12, x8, x9)

inst_1533:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecf266e; op2val:0xbecf266e; 
   valaddr_reg:x11; val_offset:3022*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3022*FLEN/8, x12, x8, x9)

inst_1534:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4f266e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4f266e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecf266e; op2val:0xbecf266e; 
   valaddr_reg:x11; val_offset:3024*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3024*FLEN/8, x12, x8, x9)

inst_1535:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54bff6; op2val:0xbe54bff6; 
   valaddr_reg:x11; val_offset:3026*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3026*FLEN/8, x12, x8, x9)

inst_1536:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54bff6; op2val:0xbe54bff6; 
   valaddr_reg:x11; val_offset:3028*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3028*FLEN/8, x12, x8, x9)

inst_1537:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54bff6; op2val:0xbe54bff6; 
   valaddr_reg:x11; val_offset:3030*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3030*FLEN/8, x12, x8, x9)

inst_1538:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54bff6; op2val:0xbe54bff6; 
   valaddr_reg:x11; val_offset:3032*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3032*FLEN/8, x12, x8, x9)

inst_1539:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x54bff6 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x54bff6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e54bff6; op2val:0xbe54bff6; 
   valaddr_reg:x11; val_offset:3034*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3034*FLEN/8, x12, x8, x9)

inst_1540:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28fcf1; op2val:0xbf28fcf1; 
   valaddr_reg:x11; val_offset:3036*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3036*FLEN/8, x12, x8, x9)

inst_1541:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28fcf1; op2val:0xbf28fcf1; 
   valaddr_reg:x11; val_offset:3038*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3038*FLEN/8, x12, x8, x9)

inst_1542:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28fcf1; op2val:0xbf28fcf1; 
   valaddr_reg:x11; val_offset:3040*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3040*FLEN/8, x12, x8, x9)

inst_1543:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28fcf1; op2val:0xbf28fcf1; 
   valaddr_reg:x11; val_offset:3042*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3042*FLEN/8, x12, x8, x9)

inst_1544:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28fcf1 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x28fcf1 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28fcf1; op2val:0xbf28fcf1; 
   valaddr_reg:x11; val_offset:3044*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3044*FLEN/8, x12, x8, x9)

inst_1545:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f403e73; op2val:0xbf403e73; 
   valaddr_reg:x11; val_offset:3046*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3046*FLEN/8, x12, x8, x9)

inst_1546:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f403e73; op2val:0xbf403e73; 
   valaddr_reg:x11; val_offset:3048*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3048*FLEN/8, x12, x8, x9)

inst_1547:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f403e73; op2val:0xbf403e73; 
   valaddr_reg:x11; val_offset:3050*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3050*FLEN/8, x12, x8, x9)

inst_1548:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f403e73; op2val:0xbf403e73; 
   valaddr_reg:x11; val_offset:3052*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3052*FLEN/8, x12, x8, x9)

inst_1549:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x403e73 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x403e73 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f403e73; op2val:0xbf403e73; 
   valaddr_reg:x11; val_offset:3054*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3054*FLEN/8, x12, x8, x9)

inst_1550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f562146; op2val:0xbf562146; 
   valaddr_reg:x11; val_offset:3056*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3056*FLEN/8, x12, x8, x9)

inst_1551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f562146; op2val:0xbf562146; 
   valaddr_reg:x11; val_offset:3058*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3058*FLEN/8, x12, x8, x9)

inst_1552:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f562146; op2val:0xbf562146; 
   valaddr_reg:x11; val_offset:3060*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3060*FLEN/8, x12, x8, x9)

inst_1553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f562146; op2val:0xbf562146; 
   valaddr_reg:x11; val_offset:3062*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3062*FLEN/8, x12, x8, x9)

inst_1554:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x562146 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x562146 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f562146; op2val:0xbf562146; 
   valaddr_reg:x11; val_offset:3064*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3064*FLEN/8, x12, x8, x9)

inst_1555:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d6bf; op2val:0xbf35d6bf; 
   valaddr_reg:x11; val_offset:3066*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3066*FLEN/8, x12, x8, x9)

inst_1556:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d6bf; op2val:0xbf35d6bf; 
   valaddr_reg:x11; val_offset:3068*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3068*FLEN/8, x12, x8, x9)

inst_1557:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d6bf; op2val:0xbf35d6bf; 
   valaddr_reg:x11; val_offset:3070*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3070*FLEN/8, x12, x8, x9)

inst_1558:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d6bf; op2val:0xbf35d6bf; 
   valaddr_reg:x11; val_offset:3072*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3072*FLEN/8, x12, x8, x9)

inst_1559:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d6bf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x35d6bf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d6bf; op2val:0xbf35d6bf; 
   valaddr_reg:x11; val_offset:3074*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3074*FLEN/8, x12, x8, x9)

inst_1560:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda1f0e; op2val:0xbeda1f0e; 
   valaddr_reg:x11; val_offset:3076*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3076*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_12)

inst_1561:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda1f0e; op2val:0xbeda1f0e; 
   valaddr_reg:x11; val_offset:3078*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3078*FLEN/8, x12, x8, x9)

inst_1562:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda1f0e; op2val:0xbeda1f0e; 
   valaddr_reg:x11; val_offset:3080*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3080*FLEN/8, x12, x8, x9)

inst_1563:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda1f0e; op2val:0xbeda1f0e; 
   valaddr_reg:x11; val_offset:3082*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3082*FLEN/8, x12, x8, x9)

inst_1564:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5a1f0e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5a1f0e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eda1f0e; op2val:0xbeda1f0e; 
   valaddr_reg:x11; val_offset:3084*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3084*FLEN/8, x12, x8, x9)

inst_1565:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eefef82; op2val:0xbeefef82; 
   valaddr_reg:x11; val_offset:3086*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3086*FLEN/8, x12, x8, x9)

inst_1566:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eefef82; op2val:0xbeefef82; 
   valaddr_reg:x11; val_offset:3088*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3088*FLEN/8, x12, x8, x9)

inst_1567:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eefef82; op2val:0xbeefef82; 
   valaddr_reg:x11; val_offset:3090*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3090*FLEN/8, x12, x8, x9)

inst_1568:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eefef82; op2val:0xbeefef82; 
   valaddr_reg:x11; val_offset:3092*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3092*FLEN/8, x12, x8, x9)

inst_1569:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6fef82 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6fef82 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eefef82; op2val:0xbeefef82; 
   valaddr_reg:x11; val_offset:3094*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3094*FLEN/8, x12, x8, x9)

inst_1570:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb167e; op2val:0xbebb167e; 
   valaddr_reg:x11; val_offset:3096*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3096*FLEN/8, x12, x8, x9)

inst_1571:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb167e; op2val:0xbebb167e; 
   valaddr_reg:x11; val_offset:3098*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3098*FLEN/8, x12, x8, x9)

inst_1572:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb167e; op2val:0xbebb167e; 
   valaddr_reg:x11; val_offset:3100*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3100*FLEN/8, x12, x8, x9)

inst_1573:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb167e; op2val:0xbebb167e; 
   valaddr_reg:x11; val_offset:3102*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3102*FLEN/8, x12, x8, x9)

inst_1574:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3b167e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3b167e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebb167e; op2val:0xbebb167e; 
   valaddr_reg:x11; val_offset:3104*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3104*FLEN/8, x12, x8, x9)

inst_1575:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e62c3b8; op2val:0xbe62c3b8; 
   valaddr_reg:x11; val_offset:3106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3106*FLEN/8, x12, x8, x9)

inst_1576:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e62c3b8; op2val:0xbe62c3b8; 
   valaddr_reg:x11; val_offset:3108*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3108*FLEN/8, x12, x8, x9)

inst_1577:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e62c3b8; op2val:0xbe62c3b8; 
   valaddr_reg:x11; val_offset:3110*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3110*FLEN/8, x12, x8, x9)

inst_1578:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e62c3b8; op2val:0xbe62c3b8; 
   valaddr_reg:x11; val_offset:3112*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3112*FLEN/8, x12, x8, x9)

inst_1579:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x62c3b8 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x62c3b8 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e62c3b8; op2val:0xbe62c3b8; 
   valaddr_reg:x11; val_offset:3114*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3114*FLEN/8, x12, x8, x9)

inst_1580:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f352ed4; op2val:0xbf352ed4; 
   valaddr_reg:x11; val_offset:3116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3116*FLEN/8, x12, x8, x9)

inst_1581:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f352ed4; op2val:0xbf352ed4; 
   valaddr_reg:x11; val_offset:3118*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3118*FLEN/8, x12, x8, x9)

inst_1582:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f352ed4; op2val:0xbf352ed4; 
   valaddr_reg:x11; val_offset:3120*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3120*FLEN/8, x12, x8, x9)

inst_1583:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f352ed4; op2val:0xbf352ed4; 
   valaddr_reg:x11; val_offset:3122*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3122*FLEN/8, x12, x8, x9)

inst_1584:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x352ed4 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x352ed4 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f352ed4; op2val:0xbf352ed4; 
   valaddr_reg:x11; val_offset:3124*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3124*FLEN/8, x12, x8, x9)

inst_1585:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; 
   valaddr_reg:x11; val_offset:3126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3126*FLEN/8, x12, x8, x9)

inst_1586:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; 
   valaddr_reg:x11; val_offset:3128*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3128*FLEN/8, x12, x8, x9)

inst_1587:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; 
   valaddr_reg:x11; val_offset:3130*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3130*FLEN/8, x12, x8, x9)

inst_1588:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; 
   valaddr_reg:x11; val_offset:3132*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3132*FLEN/8, x12, x8, x9)

inst_1589:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3e0c7f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x3e0c7f and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebe0c7f; op2val:0xbebe0c7f; 
   valaddr_reg:x11; val_offset:3134*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3134*FLEN/8, x12, x8, x9)

inst_1590:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; 
   valaddr_reg:x11; val_offset:3136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3136*FLEN/8, x12, x8, x9)

inst_1591:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; 
   valaddr_reg:x11; val_offset:3138*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3138*FLEN/8, x12, x8, x9)

inst_1592:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; 
   valaddr_reg:x11; val_offset:3140*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3140*FLEN/8, x12, x8, x9)

inst_1593:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; 
   valaddr_reg:x11; val_offset:3142*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3142*FLEN/8, x12, x8, x9)

inst_1594:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1b1ea1 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x1b1ea1 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9b1ea1; op2val:0xbe9b1ea1; 
   valaddr_reg:x11; val_offset:3144*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3144*FLEN/8, x12, x8, x9)

inst_1595:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed16042; op2val:0xbed16042; 
   valaddr_reg:x11; val_offset:3146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3146*FLEN/8, x12, x8, x9)

inst_1596:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed16042; op2val:0xbed16042; 
   valaddr_reg:x11; val_offset:3148*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3148*FLEN/8, x12, x8, x9)

inst_1597:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed16042; op2val:0xbed16042; 
   valaddr_reg:x11; val_offset:3150*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3150*FLEN/8, x12, x8, x9)

inst_1598:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed16042; op2val:0xbed16042; 
   valaddr_reg:x11; val_offset:3152*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3152*FLEN/8, x12, x8, x9)

inst_1599:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x516042 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x516042 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed16042; op2val:0xbed16042; 
   valaddr_reg:x11; val_offset:3154*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3154*FLEN/8, x12, x8, x9)

inst_1600:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea9da09; op2val:0xbea9da09; 
   valaddr_reg:x11; val_offset:3156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3156*FLEN/8, x12, x8, x9)

inst_1601:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea9da09; op2val:0xbea9da09; 
   valaddr_reg:x11; val_offset:3158*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3158*FLEN/8, x12, x8, x9)

inst_1602:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea9da09; op2val:0xbea9da09; 
   valaddr_reg:x11; val_offset:3160*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3160*FLEN/8, x12, x8, x9)

inst_1603:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea9da09; op2val:0xbea9da09; 
   valaddr_reg:x11; val_offset:3162*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3162*FLEN/8, x12, x8, x9)

inst_1604:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x29da09 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x29da09 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea9da09; op2val:0xbea9da09; 
   valaddr_reg:x11; val_offset:3164*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3164*FLEN/8, x12, x8, x9)

inst_1605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f06ff63; op2val:0xbf06ff63; 
   valaddr_reg:x11; val_offset:3166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3166*FLEN/8, x12, x8, x9)

inst_1606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f06ff63; op2val:0xbf06ff63; 
   valaddr_reg:x11; val_offset:3168*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3168*FLEN/8, x12, x8, x9)

inst_1607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f06ff63; op2val:0xbf06ff63; 
   valaddr_reg:x11; val_offset:3170*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3170*FLEN/8, x12, x8, x9)

inst_1608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f06ff63; op2val:0xbf06ff63; 
   valaddr_reg:x11; val_offset:3172*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3172*FLEN/8, x12, x8, x9)

inst_1609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x06ff63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x06ff63 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f06ff63; op2val:0xbf06ff63; 
   valaddr_reg:x11; val_offset:3174*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3174*FLEN/8, x12, x8, x9)

inst_1610:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05f5fd; op2val:0xbf05f5fd; 
   valaddr_reg:x11; val_offset:3176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3176*FLEN/8, x12, x8, x9)

inst_1611:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05f5fd; op2val:0xbf05f5fd; 
   valaddr_reg:x11; val_offset:3178*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3178*FLEN/8, x12, x8, x9)

inst_1612:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05f5fd; op2val:0xbf05f5fd; 
   valaddr_reg:x11; val_offset:3180*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3180*FLEN/8, x12, x8, x9)

inst_1613:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05f5fd; op2val:0xbf05f5fd; 
   valaddr_reg:x11; val_offset:3182*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3182*FLEN/8, x12, x8, x9)

inst_1614:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x05f5fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x05f5fd and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f05f5fd; op2val:0xbf05f5fd; 
   valaddr_reg:x11; val_offset:3184*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3184*FLEN/8, x12, x8, x9)

inst_1615:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e87cf; op2val:0xbf2e87cf; 
   valaddr_reg:x11; val_offset:3186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3186*FLEN/8, x12, x8, x9)

inst_1616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e87cf; op2val:0xbf2e87cf; 
   valaddr_reg:x11; val_offset:3188*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3188*FLEN/8, x12, x8, x9)

inst_1617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e87cf; op2val:0xbf2e87cf; 
   valaddr_reg:x11; val_offset:3190*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3190*FLEN/8, x12, x8, x9)

inst_1618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e87cf; op2val:0xbf2e87cf; 
   valaddr_reg:x11; val_offset:3192*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3192*FLEN/8, x12, x8, x9)

inst_1619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e87cf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e87cf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e87cf; op2val:0xbf2e87cf; 
   valaddr_reg:x11; val_offset:3194*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3194*FLEN/8, x12, x8, x9)

inst_1620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f709548; op2val:0xbf709548; 
   valaddr_reg:x11; val_offset:3196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3196*FLEN/8, x12, x8, x9)

inst_1621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f709548; op2val:0xbf709548; 
   valaddr_reg:x11; val_offset:3198*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3198*FLEN/8, x12, x8, x9)

inst_1622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f709548; op2val:0xbf709548; 
   valaddr_reg:x11; val_offset:3200*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3200*FLEN/8, x12, x8, x9)

inst_1623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f709548; op2val:0xbf709548; 
   valaddr_reg:x11; val_offset:3202*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3202*FLEN/8, x12, x8, x9)

inst_1624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x709548 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x709548 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f709548; op2val:0xbf709548; 
   valaddr_reg:x11; val_offset:3204*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3204*FLEN/8, x12, x8, x9)

inst_1625:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8273e0; op2val:0xbe8273e0; 
   valaddr_reg:x11; val_offset:3206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3206*FLEN/8, x12, x8, x9)

inst_1626:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8273e0; op2val:0xbe8273e0; 
   valaddr_reg:x11; val_offset:3208*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3208*FLEN/8, x12, x8, x9)

inst_1627:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8273e0; op2val:0xbe8273e0; 
   valaddr_reg:x11; val_offset:3210*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3210*FLEN/8, x12, x8, x9)

inst_1628:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8273e0; op2val:0xbe8273e0; 
   valaddr_reg:x11; val_offset:3212*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3212*FLEN/8, x12, x8, x9)

inst_1629:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0273e0 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x0273e0 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8273e0; op2val:0xbe8273e0; 
   valaddr_reg:x11; val_offset:3214*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3214*FLEN/8, x12, x8, x9)

inst_1630:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; 
   valaddr_reg:x11; val_offset:3216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3216*FLEN/8, x12, x8, x9)

inst_1631:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; 
   valaddr_reg:x11; val_offset:3218*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3218*FLEN/8, x12, x8, x9)

inst_1632:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; 
   valaddr_reg:x11; val_offset:3220*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3220*FLEN/8, x12, x8, x9)

inst_1633:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; 
   valaddr_reg:x11; val_offset:3222*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3222*FLEN/8, x12, x8, x9)

inst_1634:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x41f9a6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x41f9a6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec1f9a6; op2val:0xbec1f9a6; 
   valaddr_reg:x11; val_offset:3224*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3224*FLEN/8, x12, x8, x9)

inst_1635:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0749e2; op2val:0xbf0749e2; 
   valaddr_reg:x11; val_offset:3226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3226*FLEN/8, x12, x8, x9)

inst_1636:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0749e2; op2val:0xbf0749e2; 
   valaddr_reg:x11; val_offset:3228*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3228*FLEN/8, x12, x8, x9)

inst_1637:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0749e2; op2val:0xbf0749e2; 
   valaddr_reg:x11; val_offset:3230*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3230*FLEN/8, x12, x8, x9)

inst_1638:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0749e2; op2val:0xbf0749e2; 
   valaddr_reg:x11; val_offset:3232*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3232*FLEN/8, x12, x8, x9)

inst_1639:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0749e2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0749e2 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0749e2; op2val:0xbf0749e2; 
   valaddr_reg:x11; val_offset:3234*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3234*FLEN/8, x12, x8, x9)

inst_1640:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d696c; op2val:0xbf7d696c; 
   valaddr_reg:x11; val_offset:3236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3236*FLEN/8, x12, x8, x9)

inst_1641:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d696c; op2val:0xbf7d696c; 
   valaddr_reg:x11; val_offset:3238*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3238*FLEN/8, x12, x8, x9)

inst_1642:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d696c; op2val:0xbf7d696c; 
   valaddr_reg:x11; val_offset:3240*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3240*FLEN/8, x12, x8, x9)

inst_1643:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d696c; op2val:0xbf7d696c; 
   valaddr_reg:x11; val_offset:3242*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3242*FLEN/8, x12, x8, x9)

inst_1644:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d696c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7d696c and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7d696c; op2val:0xbf7d696c; 
   valaddr_reg:x11; val_offset:3244*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3244*FLEN/8, x12, x8, x9)

inst_1645:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6efcaf; op2val:0xbf6efcaf; 
   valaddr_reg:x11; val_offset:3246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3246*FLEN/8, x12, x8, x9)

inst_1646:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6efcaf; op2val:0xbf6efcaf; 
   valaddr_reg:x11; val_offset:3248*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3248*FLEN/8, x12, x8, x9)

inst_1647:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6efcaf; op2val:0xbf6efcaf; 
   valaddr_reg:x11; val_offset:3250*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3250*FLEN/8, x12, x8, x9)

inst_1648:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6efcaf; op2val:0xbf6efcaf; 
   valaddr_reg:x11; val_offset:3252*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3252*FLEN/8, x12, x8, x9)

inst_1649:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6efcaf and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6efcaf and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6efcaf; op2val:0xbf6efcaf; 
   valaddr_reg:x11; val_offset:3254*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3254*FLEN/8, x12, x8, x9)

inst_1650:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea09dbe; op2val:0xbea09dbe; 
   valaddr_reg:x11; val_offset:3256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3256*FLEN/8, x12, x8, x9)

inst_1651:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea09dbe; op2val:0xbea09dbe; 
   valaddr_reg:x11; val_offset:3258*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3258*FLEN/8, x12, x8, x9)

inst_1652:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea09dbe; op2val:0xbea09dbe; 
   valaddr_reg:x11; val_offset:3260*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3260*FLEN/8, x12, x8, x9)

inst_1653:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea09dbe; op2val:0xbea09dbe; 
   valaddr_reg:x11; val_offset:3262*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3262*FLEN/8, x12, x8, x9)

inst_1654:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x209dbe and fs2 == 1 and fe2 == 0x7d and fm2 == 0x209dbe and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea09dbe; op2val:0xbea09dbe; 
   valaddr_reg:x11; val_offset:3264*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3264*FLEN/8, x12, x8, x9)

inst_1655:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea977d6; op2val:0xbea977d6; 
   valaddr_reg:x11; val_offset:3266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3266*FLEN/8, x12, x8, x9)

inst_1656:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea977d6; op2val:0xbea977d6; 
   valaddr_reg:x11; val_offset:3268*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3268*FLEN/8, x12, x8, x9)

inst_1657:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea977d6; op2val:0xbea977d6; 
   valaddr_reg:x11; val_offset:3270*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3270*FLEN/8, x12, x8, x9)

inst_1658:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea977d6; op2val:0xbea977d6; 
   valaddr_reg:x11; val_offset:3272*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3272*FLEN/8, x12, x8, x9)

inst_1659:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2977d6 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2977d6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea977d6; op2val:0xbea977d6; 
   valaddr_reg:x11; val_offset:3274*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3274*FLEN/8, x12, x8, x9)

inst_1660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75755e; op2val:0xbf75755e; 
   valaddr_reg:x11; val_offset:3276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3276*FLEN/8, x12, x8, x9)

inst_1661:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75755e; op2val:0xbf75755e; 
   valaddr_reg:x11; val_offset:3278*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3278*FLEN/8, x12, x8, x9)

inst_1662:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75755e; op2val:0xbf75755e; 
   valaddr_reg:x11; val_offset:3280*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3280*FLEN/8, x12, x8, x9)

inst_1663:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75755e; op2val:0xbf75755e; 
   valaddr_reg:x11; val_offset:3282*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3282*FLEN/8, x12, x8, x9)

inst_1664:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75755e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x75755e and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75755e; op2val:0xbf75755e; 
   valaddr_reg:x11; val_offset:3284*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3284*FLEN/8, x12, x8, x9)

inst_1665:
// fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x39a515ba; op2val:0xb9a515ba; 
   valaddr_reg:x11; val_offset:3286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3286*FLEN/8, x12, x8, x9)

inst_1666:
// fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x39a515ba; op2val:0xb9a515ba; 
   valaddr_reg:x11; val_offset:3288*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3288*FLEN/8, x12, x8, x9)

inst_1667:
// fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x39a515ba; op2val:0xb9a515ba; 
   valaddr_reg:x11; val_offset:3290*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3290*FLEN/8, x12, x8, x9)

inst_1668:
// fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x39a515ba; op2val:0xb9a515ba; 
   valaddr_reg:x11; val_offset:3292*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3292*FLEN/8, x12, x8, x9)

inst_1669:
// fs1 == 0 and fe1 == 0x73 and fm1 == 0x2515ba and fs2 == 1 and fe2 == 0x73 and fm2 == 0x2515ba and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x39a515ba; op2val:0xb9a515ba; 
   valaddr_reg:x11; val_offset:3294*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3294*FLEN/8, x12, x8, x9)

inst_1670:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99c2c8; op2val:0xbe99c2c8; 
   valaddr_reg:x11; val_offset:3296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3296*FLEN/8, x12, x8, x9)

inst_1671:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99c2c8; op2val:0xbe99c2c8; 
   valaddr_reg:x11; val_offset:3298*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3298*FLEN/8, x12, x8, x9)

inst_1672:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99c2c8; op2val:0xbe99c2c8; 
   valaddr_reg:x11; val_offset:3300*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3300*FLEN/8, x12, x8, x9)

inst_1673:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99c2c8; op2val:0xbe99c2c8; 
   valaddr_reg:x11; val_offset:3302*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3302*FLEN/8, x12, x8, x9)

inst_1674:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x19c2c8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19c2c8 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e99c2c8; op2val:0xbe99c2c8; 
   valaddr_reg:x11; val_offset:3304*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3304*FLEN/8, x12, x8, x9)

inst_1675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f45f7d6; op2val:0xbf45f7d6; 
   valaddr_reg:x11; val_offset:3306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3306*FLEN/8, x12, x8, x9)

inst_1676:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and  fcsr == 0x20 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f45f7d6; op2val:0xbf45f7d6; 
   valaddr_reg:x11; val_offset:3308*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x11, 3308*FLEN/8, x12, x8, x9)

inst_1677:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f45f7d6; op2val:0xbf45f7d6; 
   valaddr_reg:x11; val_offset:3310*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3310*FLEN/8, x12, x8, x9)

inst_1678:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f45f7d6; op2val:0xbf45f7d6; 
   valaddr_reg:x11; val_offset:3312*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3312*FLEN/8, x12, x8, x9)

inst_1679:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x45f7d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x45f7d6 and  fcsr == 0x80 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f45f7d6; op2val:0xbf45f7d6; 
   valaddr_reg:x11; val_offset:3314*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x11, 3314*FLEN/8, x12, x8, x9)

inst_1680:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; 
   valaddr_reg:x11; val_offset:3316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3316*FLEN/8, x12, x8, x9)

inst_1681:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1f4fe0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f4fe0 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1f4fe0; op2val:0xbe1f4fe0; 
   valaddr_reg:x11; val_offset:3318*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3318*FLEN/8, x12, x8, x9)

inst_1682:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37d979; op2val:0xbf37d979; 
   valaddr_reg:x11; val_offset:3320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 3320*FLEN/8, x12, x8, x9)

inst_1683:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x40 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37d979; op2val:0xbf37d979; 
   valaddr_reg:x11; val_offset:3322*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x11, 3322*FLEN/8, x12, x8, x9)

inst_1684:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37d979 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x37d979 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37d979; op2val:0xbf37d979; 
   valaddr_reg:x11; val_offset:3324*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x11, 3324*FLEN/8, x12, x8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1042239456,64,FLEN)
NAN_BOXED(1042239456,32,FLEN)
NAN_BOXED(1042239456,64,FLEN)
NAN_BOXED(3189723104,32,FLEN)
NAN_BOXED(1042239456,64,FLEN)
NAN_BOXED(1042239456,32,FLEN)
NAN_BOXED(1042239456,64,FLEN)
NAN_BOXED(3189723104,32,FLEN)
NAN_BOXED(1042239456,64,FLEN)
NAN_BOXED(3189723104,32,FLEN)
NAN_BOXED(1058297195,64,FLEN)
NAN_BOXED(3205780843,32,FLEN)
NAN_BOXED(1058297195,64,FLEN)
NAN_BOXED(3205780843,32,FLEN)
NAN_BOXED(1058297195,64,FLEN)
NAN_BOXED(3205780843,32,FLEN)
NAN_BOXED(1058297195,64,FLEN)
NAN_BOXED(3205780843,32,FLEN)
NAN_BOXED(1058297195,64,FLEN)
NAN_BOXED(3205780843,32,FLEN)
NAN_BOXED(1056586291,64,FLEN)
NAN_BOXED(3204069939,32,FLEN)
NAN_BOXED(1056586291,64,FLEN)
NAN_BOXED(3204069939,32,FLEN)
NAN_BOXED(1056586291,64,FLEN)
NAN_BOXED(3204069939,32,FLEN)
NAN_BOXED(1056586291,64,FLEN)
NAN_BOXED(3204069939,32,FLEN)
NAN_BOXED(1056586291,64,FLEN)
NAN_BOXED(3204069939,32,FLEN)
NAN_BOXED(1046307815,64,FLEN)
NAN_BOXED(3193791463,32,FLEN)
NAN_BOXED(1046307815,64,FLEN)
NAN_BOXED(3193791463,32,FLEN)
NAN_BOXED(1046307815,64,FLEN)
NAN_BOXED(3193791463,32,FLEN)
NAN_BOXED(1046307815,64,FLEN)
NAN_BOXED(3193791463,32,FLEN)
NAN_BOXED(1046307815,64,FLEN)
NAN_BOXED(3193791463,32,FLEN)
NAN_BOXED(1057357245,64,FLEN)
NAN_BOXED(3204840893,32,FLEN)
NAN_BOXED(1057357245,64,FLEN)
NAN_BOXED(3204840893,32,FLEN)
test_dataset_1:
NAN_BOXED(1057357245,32,FLEN)
NAN_BOXED(3204840893,32,FLEN)
NAN_BOXED(1057357245,32,FLEN)
NAN_BOXED(3204840893,32,FLEN)
NAN_BOXED(1057357245,32,FLEN)
NAN_BOXED(3204840893,32,FLEN)
NAN_BOXED(1035743055,32,FLEN)
NAN_BOXED(3183226703,32,FLEN)
NAN_BOXED(1035743055,32,FLEN)
NAN_BOXED(3183226703,32,FLEN)
NAN_BOXED(1035743055,32,FLEN)
NAN_BOXED(3183226703,32,FLEN)
NAN_BOXED(1035743055,32,FLEN)
NAN_BOXED(3183226703,32,FLEN)
NAN_BOXED(1035743055,32,FLEN)
NAN_BOXED(3183226703,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3208108409,32,FLEN)
NAN_BOXED(1060624761,32,FLEN)
NAN_BOXED(3208108409,32,FLEN)
NAN_BOXED(1060624761,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1060624761,32,FLEN)
NAN_BOXED(3208108409,32,FLEN)
NAN_BOXED(1060624761,32,FLEN)
NAN_BOXED(3208108409,32,FLEN)
NAN_BOXED(1052992803,32,FLEN)
NAN_BOXED(3200476451,32,FLEN)
NAN_BOXED(1052992803,32,FLEN)
NAN_BOXED(3200476451,32,FLEN)
NAN_BOXED(1052992803,32,FLEN)
NAN_BOXED(3200476451,32,FLEN)
NAN_BOXED(1052992803,32,FLEN)
NAN_BOXED(3200476451,32,FLEN)
NAN_BOXED(1052992803,32,FLEN)
NAN_BOXED(3200476451,32,FLEN)
NAN_BOXED(1035523828,32,FLEN)
NAN_BOXED(3183007476,32,FLEN)
NAN_BOXED(1035523828,32,FLEN)
NAN_BOXED(3183007476,32,FLEN)
NAN_BOXED(1035523828,32,FLEN)
NAN_BOXED(3183007476,32,FLEN)
NAN_BOXED(1035523828,32,FLEN)
NAN_BOXED(3183007476,32,FLEN)
NAN_BOXED(1035523828,32,FLEN)
NAN_BOXED(3183007476,32,FLEN)
NAN_BOXED(1044534889,32,FLEN)
NAN_BOXED(3192018537,32,FLEN)
NAN_BOXED(1044534889,32,FLEN)
NAN_BOXED(3192018537,32,FLEN)
NAN_BOXED(1044534889,32,FLEN)
NAN_BOXED(3192018537,32,FLEN)
NAN_BOXED(1044534889,32,FLEN)
NAN_BOXED(3192018537,32,FLEN)
NAN_BOXED(1044534889,32,FLEN)
NAN_BOXED(3192018537,32,FLEN)
NAN_BOXED(1060149803,32,FLEN)
NAN_BOXED(3207633451,32,FLEN)
NAN_BOXED(1060149803,32,FLEN)
NAN_BOXED(3207633451,32,FLEN)
NAN_BOXED(1060149803,32,FLEN)
NAN_BOXED(3207633451,32,FLEN)
NAN_BOXED(1060149803,32,FLEN)
NAN_BOXED(3207633451,32,FLEN)
NAN_BOXED(1060149803,32,FLEN)
NAN_BOXED(3207633451,32,FLEN)
NAN_BOXED(1036987871,32,FLEN)
NAN_BOXED(3184471519,32,FLEN)
NAN_BOXED(1036987871,32,FLEN)
NAN_BOXED(3184471519,32,FLEN)
NAN_BOXED(1036987871,32,FLEN)
NAN_BOXED(3184471519,32,FLEN)
NAN_BOXED(1036987871,32,FLEN)
NAN_BOXED(3184471519,32,FLEN)
NAN_BOXED(1036987871,32,FLEN)
NAN_BOXED(3184471519,32,FLEN)
NAN_BOXED(1057431975,32,FLEN)
NAN_BOXED(3204915623,32,FLEN)
NAN_BOXED(1057431975,32,FLEN)
NAN_BOXED(3204915623,32,FLEN)
NAN_BOXED(1057431975,32,FLEN)
NAN_BOXED(3204915623,32,FLEN)
NAN_BOXED(1057431975,32,FLEN)
NAN_BOXED(3204915623,32,FLEN)
NAN_BOXED(1057431975,32,FLEN)
NAN_BOXED(3204915623,32,FLEN)
NAN_BOXED(1058069021,32,FLEN)
NAN_BOXED(3205552669,32,FLEN)
NAN_BOXED(1058069021,32,FLEN)
NAN_BOXED(3205552669,32,FLEN)
NAN_BOXED(1058069021,32,FLEN)
NAN_BOXED(3205552669,32,FLEN)
NAN_BOXED(1058069021,32,FLEN)
NAN_BOXED(3205552669,32,FLEN)
NAN_BOXED(1058069021,32,FLEN)
NAN_BOXED(3205552669,32,FLEN)
NAN_BOXED(1035085634,32,FLEN)
NAN_BOXED(3182569282,32,FLEN)
NAN_BOXED(1035085634,32,FLEN)
NAN_BOXED(3182569282,32,FLEN)
NAN_BOXED(1035085634,32,FLEN)
NAN_BOXED(3182569282,32,FLEN)
NAN_BOXED(1035085634,32,FLEN)
NAN_BOXED(3182569282,32,FLEN)
NAN_BOXED(1035085634,32,FLEN)
NAN_BOXED(3182569282,32,FLEN)
NAN_BOXED(1057350319,32,FLEN)
NAN_BOXED(3204833967,32,FLEN)
NAN_BOXED(1057350319,32,FLEN)
NAN_BOXED(3204833967,32,FLEN)
NAN_BOXED(1057350319,32,FLEN)
NAN_BOXED(3204833967,32,FLEN)
NAN_BOXED(1057350319,32,FLEN)
NAN_BOXED(3204833967,32,FLEN)
NAN_BOXED(1057350319,32,FLEN)
NAN_BOXED(3204833967,32,FLEN)
NAN_BOXED(1060982880,32,FLEN)
NAN_BOXED(3208466528,32,FLEN)
NAN_BOXED(1060982880,32,FLEN)
NAN_BOXED(3208466528,32,FLEN)
NAN_BOXED(1060982880,32,FLEN)
NAN_BOXED(3208466528,32,FLEN)
NAN_BOXED(1060982880,32,FLEN)
NAN_BOXED(3208466528,32,FLEN)
NAN_BOXED(1060982880,32,FLEN)
NAN_BOXED(3208466528,32,FLEN)
NAN_BOXED(1055330530,32,FLEN)
NAN_BOXED(3202814178,32,FLEN)
NAN_BOXED(1055330530,32,FLEN)
NAN_BOXED(3202814178,32,FLEN)
NAN_BOXED(1055330530,32,FLEN)
NAN_BOXED(3202814178,32,FLEN)
NAN_BOXED(1055330530,32,FLEN)
NAN_BOXED(3202814178,32,FLEN)
NAN_BOXED(1055330530,32,FLEN)
NAN_BOXED(3202814178,32,FLEN)
NAN_BOXED(1049592542,32,FLEN)
NAN_BOXED(3197076190,32,FLEN)
NAN_BOXED(1049592542,32,FLEN)
NAN_BOXED(3197076190,32,FLEN)
NAN_BOXED(1049592542,32,FLEN)
NAN_BOXED(3197076190,32,FLEN)
NAN_BOXED(1049592542,32,FLEN)
NAN_BOXED(3197076190,32,FLEN)
NAN_BOXED(1049592542,32,FLEN)
NAN_BOXED(3197076190,32,FLEN)
NAN_BOXED(1043553238,32,FLEN)
NAN_BOXED(3191036886,32,FLEN)
NAN_BOXED(1043553238,32,FLEN)
NAN_BOXED(3191036886,32,FLEN)
NAN_BOXED(1043553238,32,FLEN)
NAN_BOXED(3191036886,32,FLEN)
NAN_BOXED(1043553238,32,FLEN)
NAN_BOXED(3191036886,32,FLEN)
NAN_BOXED(1043553238,32,FLEN)
NAN_BOXED(3191036886,32,FLEN)
NAN_BOXED(1065334042,32,FLEN)
NAN_BOXED(3212817690,32,FLEN)
NAN_BOXED(1065334042,32,FLEN)
NAN_BOXED(3212817690,32,FLEN)
NAN_BOXED(1065334042,32,FLEN)
NAN_BOXED(3212817690,32,FLEN)
NAN_BOXED(1065334042,32,FLEN)
NAN_BOXED(3212817690,32,FLEN)
NAN_BOXED(1065334042,32,FLEN)
NAN_BOXED(3212817690,32,FLEN)
NAN_BOXED(1040683811,32,FLEN)
NAN_BOXED(3188167459,32,FLEN)
NAN_BOXED(1040683811,32,FLEN)
NAN_BOXED(3188167459,32,FLEN)
NAN_BOXED(1040683811,32,FLEN)
NAN_BOXED(3188167459,32,FLEN)
NAN_BOXED(1040683811,32,FLEN)
NAN_BOXED(3188167459,32,FLEN)
NAN_BOXED(1040683811,32,FLEN)
NAN_BOXED(3188167459,32,FLEN)
NAN_BOXED(1059897192,32,FLEN)
NAN_BOXED(3207380840,32,FLEN)
NAN_BOXED(1059897192,32,FLEN)
NAN_BOXED(3207380840,32,FLEN)
NAN_BOXED(1059897192,32,FLEN)
NAN_BOXED(3207380840,32,FLEN)
NAN_BOXED(1059897192,32,FLEN)
NAN_BOXED(3207380840,32,FLEN)
NAN_BOXED(1059897192,32,FLEN)
NAN_BOXED(3207380840,32,FLEN)
NAN_BOXED(1062147642,32,FLEN)
NAN_BOXED(3209631290,32,FLEN)
NAN_BOXED(1062147642,32,FLEN)
NAN_BOXED(3209631290,32,FLEN)
NAN_BOXED(1062147642,32,FLEN)
NAN_BOXED(3209631290,32,FLEN)
NAN_BOXED(1062147642,32,FLEN)
NAN_BOXED(3209631290,32,FLEN)
NAN_BOXED(1062147642,32,FLEN)
NAN_BOXED(3209631290,32,FLEN)
NAN_BOXED(1061349905,32,FLEN)
NAN_BOXED(3208833553,32,FLEN)
NAN_BOXED(1061349905,32,FLEN)
NAN_BOXED(3208833553,32,FLEN)
NAN_BOXED(1061349905,32,FLEN)
NAN_BOXED(3208833553,32,FLEN)
NAN_BOXED(1061349905,32,FLEN)
NAN_BOXED(3208833553,32,FLEN)
NAN_BOXED(1061349905,32,FLEN)
NAN_BOXED(3208833553,32,FLEN)
NAN_BOXED(1045007186,32,FLEN)
NAN_BOXED(3192490834,32,FLEN)
NAN_BOXED(1045007186,32,FLEN)
NAN_BOXED(3192490834,32,FLEN)
NAN_BOXED(1045007186,32,FLEN)
NAN_BOXED(3192490834,32,FLEN)
NAN_BOXED(1045007186,32,FLEN)
NAN_BOXED(3192490834,32,FLEN)
NAN_BOXED(1045007186,32,FLEN)
NAN_BOXED(3192490834,32,FLEN)
NAN_BOXED(1064003559,32,FLEN)
NAN_BOXED(3211487207,32,FLEN)
NAN_BOXED(1064003559,32,FLEN)
NAN_BOXED(3211487207,32,FLEN)
NAN_BOXED(1064003559,32,FLEN)
NAN_BOXED(3211487207,32,FLEN)
NAN_BOXED(1064003559,32,FLEN)
NAN_BOXED(3211487207,32,FLEN)
NAN_BOXED(1064003559,32,FLEN)
NAN_BOXED(3211487207,32,FLEN)
NAN_BOXED(1056698164,32,FLEN)
NAN_BOXED(3204181812,32,FLEN)
NAN_BOXED(1056698164,32,FLEN)
NAN_BOXED(3204181812,32,FLEN)
NAN_BOXED(1056698164,32,FLEN)
NAN_BOXED(3204181812,32,FLEN)
NAN_BOXED(1056698164,32,FLEN)
NAN_BOXED(3204181812,32,FLEN)
NAN_BOXED(1056698164,32,FLEN)
NAN_BOXED(3204181812,32,FLEN)
NAN_BOXED(1063523528,32,FLEN)
NAN_BOXED(3211007176,32,FLEN)
NAN_BOXED(1063523528,32,FLEN)
NAN_BOXED(3211007176,32,FLEN)
NAN_BOXED(1063523528,32,FLEN)
NAN_BOXED(3211007176,32,FLEN)
NAN_BOXED(1063523528,32,FLEN)
NAN_BOXED(3211007176,32,FLEN)
NAN_BOXED(1063523528,32,FLEN)
NAN_BOXED(3211007176,32,FLEN)
NAN_BOXED(1050033557,32,FLEN)
NAN_BOXED(3197517205,32,FLEN)
NAN_BOXED(1050033557,32,FLEN)
NAN_BOXED(3197517205,32,FLEN)
NAN_BOXED(1050033557,32,FLEN)
NAN_BOXED(3197517205,32,FLEN)
NAN_BOXED(1050033557,32,FLEN)
NAN_BOXED(3197517205,32,FLEN)
NAN_BOXED(1050033557,32,FLEN)
NAN_BOXED(3197517205,32,FLEN)
NAN_BOXED(1044249702,32,FLEN)
NAN_BOXED(3191733350,32,FLEN)
NAN_BOXED(1044249702,32,FLEN)
NAN_BOXED(3191733350,32,FLEN)
NAN_BOXED(1044249702,32,FLEN)
NAN_BOXED(3191733350,32,FLEN)
NAN_BOXED(1044249702,32,FLEN)
NAN_BOXED(3191733350,32,FLEN)
NAN_BOXED(1044249702,32,FLEN)
NAN_BOXED(3191733350,32,FLEN)
NAN_BOXED(1024728584,32,FLEN)
NAN_BOXED(3172212232,32,FLEN)
NAN_BOXED(1024728584,32,FLEN)
NAN_BOXED(3172212232,32,FLEN)
NAN_BOXED(1024728584,32,FLEN)
NAN_BOXED(3172212232,32,FLEN)
NAN_BOXED(1024728584,32,FLEN)
NAN_BOXED(3172212232,32,FLEN)
NAN_BOXED(1024728584,32,FLEN)
NAN_BOXED(3172212232,32,FLEN)
NAN_BOXED(1054024667,32,FLEN)
NAN_BOXED(3201508315,32,FLEN)
NAN_BOXED(1054024667,32,FLEN)
NAN_BOXED(3201508315,32,FLEN)
NAN_BOXED(1054024667,32,FLEN)
NAN_BOXED(3201508315,32,FLEN)
NAN_BOXED(1054024667,32,FLEN)
NAN_BOXED(3201508315,32,FLEN)
NAN_BOXED(1054024667,32,FLEN)
NAN_BOXED(3201508315,32,FLEN)
NAN_BOXED(1053733757,32,FLEN)
NAN_BOXED(3201217405,32,FLEN)
NAN_BOXED(1053733757,32,FLEN)
NAN_BOXED(3201217405,32,FLEN)
NAN_BOXED(1053733757,32,FLEN)
NAN_BOXED(3201217405,32,FLEN)
NAN_BOXED(1053733757,32,FLEN)
NAN_BOXED(3201217405,32,FLEN)
NAN_BOXED(1053733757,32,FLEN)
NAN_BOXED(3201217405,32,FLEN)
NAN_BOXED(1054426181,32,FLEN)
NAN_BOXED(3201909829,32,FLEN)
NAN_BOXED(1054426181,32,FLEN)
NAN_BOXED(3201909829,32,FLEN)
NAN_BOXED(1054426181,32,FLEN)
NAN_BOXED(3201909829,32,FLEN)
NAN_BOXED(1054426181,32,FLEN)
NAN_BOXED(3201909829,32,FLEN)
NAN_BOXED(1054426181,32,FLEN)
NAN_BOXED(3201909829,32,FLEN)
NAN_BOXED(1062175756,32,FLEN)
NAN_BOXED(3209659404,32,FLEN)
NAN_BOXED(1062175756,32,FLEN)
NAN_BOXED(3209659404,32,FLEN)
NAN_BOXED(1062175756,32,FLEN)
NAN_BOXED(3209659404,32,FLEN)
NAN_BOXED(1062175756,32,FLEN)
NAN_BOXED(3209659404,32,FLEN)
NAN_BOXED(1062175756,32,FLEN)
NAN_BOXED(3209659404,32,FLEN)
NAN_BOXED(1053180568,32,FLEN)
NAN_BOXED(3200664216,32,FLEN)
NAN_BOXED(1053180568,32,FLEN)
NAN_BOXED(3200664216,32,FLEN)
NAN_BOXED(1053180568,32,FLEN)
NAN_BOXED(3200664216,32,FLEN)
NAN_BOXED(1053180568,32,FLEN)
NAN_BOXED(3200664216,32,FLEN)
NAN_BOXED(1053180568,32,FLEN)
NAN_BOXED(3200664216,32,FLEN)
NAN_BOXED(1057358352,32,FLEN)
NAN_BOXED(3204842000,32,FLEN)
NAN_BOXED(1057358352,32,FLEN)
NAN_BOXED(3204842000,32,FLEN)
NAN_BOXED(1057358352,32,FLEN)
NAN_BOXED(3204842000,32,FLEN)
NAN_BOXED(1057358352,32,FLEN)
NAN_BOXED(3204842000,32,FLEN)
NAN_BOXED(1057358352,32,FLEN)
NAN_BOXED(3204842000,32,FLEN)
NAN_BOXED(1048065709,32,FLEN)
NAN_BOXED(3195549357,32,FLEN)
NAN_BOXED(1048065709,32,FLEN)
NAN_BOXED(3195549357,32,FLEN)
NAN_BOXED(1048065709,32,FLEN)
NAN_BOXED(3195549357,32,FLEN)
NAN_BOXED(1048065709,32,FLEN)
NAN_BOXED(3195549357,32,FLEN)
NAN_BOXED(1048065709,32,FLEN)
NAN_BOXED(3195549357,32,FLEN)
NAN_BOXED(1033693801,32,FLEN)
NAN_BOXED(3181177449,32,FLEN)
NAN_BOXED(1033693801,32,FLEN)
NAN_BOXED(3181177449,32,FLEN)
NAN_BOXED(1033693801,32,FLEN)
NAN_BOXED(3181177449,32,FLEN)
NAN_BOXED(1033693801,32,FLEN)
NAN_BOXED(3181177449,32,FLEN)
NAN_BOXED(1033693801,32,FLEN)
NAN_BOXED(3181177449,32,FLEN)
NAN_BOXED(1037077148,32,FLEN)
NAN_BOXED(3184560796,32,FLEN)
NAN_BOXED(1037077148,32,FLEN)
NAN_BOXED(3184560796,32,FLEN)
NAN_BOXED(1037077148,32,FLEN)
NAN_BOXED(3184560796,32,FLEN)
NAN_BOXED(1037077148,32,FLEN)
NAN_BOXED(3184560796,32,FLEN)
NAN_BOXED(1037077148,32,FLEN)
NAN_BOXED(3184560796,32,FLEN)
NAN_BOXED(1055602300,32,FLEN)
NAN_BOXED(3203085948,32,FLEN)
NAN_BOXED(1055602300,32,FLEN)
NAN_BOXED(3203085948,32,FLEN)
NAN_BOXED(1055602300,32,FLEN)
NAN_BOXED(3203085948,32,FLEN)
NAN_BOXED(1055602300,32,FLEN)
NAN_BOXED(3203085948,32,FLEN)
NAN_BOXED(1055602300,32,FLEN)
NAN_BOXED(3203085948,32,FLEN)
NAN_BOXED(1050076440,32,FLEN)
NAN_BOXED(3197560088,32,FLEN)
NAN_BOXED(1050076440,32,FLEN)
NAN_BOXED(3197560088,32,FLEN)
NAN_BOXED(1050076440,32,FLEN)
NAN_BOXED(3197560088,32,FLEN)
NAN_BOXED(1050076440,32,FLEN)
NAN_BOXED(3197560088,32,FLEN)
NAN_BOXED(1050076440,32,FLEN)
NAN_BOXED(3197560088,32,FLEN)
NAN_BOXED(1044440167,32,FLEN)
NAN_BOXED(3191923815,32,FLEN)
NAN_BOXED(1044440167,32,FLEN)
NAN_BOXED(3191923815,32,FLEN)
NAN_BOXED(1044440167,32,FLEN)
NAN_BOXED(3191923815,32,FLEN)
NAN_BOXED(1044440167,32,FLEN)
NAN_BOXED(3191923815,32,FLEN)
NAN_BOXED(1044440167,32,FLEN)
NAN_BOXED(3191923815,32,FLEN)
NAN_BOXED(1037497807,32,FLEN)
NAN_BOXED(3184981455,32,FLEN)
NAN_BOXED(1037497807,32,FLEN)
NAN_BOXED(3184981455,32,FLEN)
NAN_BOXED(1037497807,32,FLEN)
NAN_BOXED(3184981455,32,FLEN)
NAN_BOXED(1037497807,32,FLEN)
NAN_BOXED(3184981455,32,FLEN)
NAN_BOXED(1037497807,32,FLEN)
NAN_BOXED(3184981455,32,FLEN)
NAN_BOXED(1028506457,32,FLEN)
NAN_BOXED(3175990105,32,FLEN)
NAN_BOXED(1028506457,32,FLEN)
NAN_BOXED(3175990105,32,FLEN)
NAN_BOXED(1028506457,32,FLEN)
NAN_BOXED(3175990105,32,FLEN)
NAN_BOXED(1028506457,32,FLEN)
NAN_BOXED(3175990105,32,FLEN)
NAN_BOXED(1028506457,32,FLEN)
NAN_BOXED(3175990105,32,FLEN)
NAN_BOXED(1057794021,32,FLEN)
NAN_BOXED(3205277669,32,FLEN)
NAN_BOXED(1057794021,32,FLEN)
NAN_BOXED(3205277669,32,FLEN)
NAN_BOXED(1057794021,32,FLEN)
NAN_BOXED(3205277669,32,FLEN)
NAN_BOXED(1057794021,32,FLEN)
NAN_BOXED(3205277669,32,FLEN)
NAN_BOXED(1057794021,32,FLEN)
NAN_BOXED(3205277669,32,FLEN)
NAN_BOXED(997539593,32,FLEN)
NAN_BOXED(3145023241,32,FLEN)
NAN_BOXED(997539593,32,FLEN)
NAN_BOXED(3145023241,32,FLEN)
NAN_BOXED(997539593,32,FLEN)
NAN_BOXED(3145023241,32,FLEN)
NAN_BOXED(997539593,32,FLEN)
NAN_BOXED(3145023241,32,FLEN)
NAN_BOXED(997539593,32,FLEN)
NAN_BOXED(3145023241,32,FLEN)
NAN_BOXED(1045668502,32,FLEN)
NAN_BOXED(3193152150,32,FLEN)
NAN_BOXED(1045668502,32,FLEN)
NAN_BOXED(3193152150,32,FLEN)
NAN_BOXED(1045668502,32,FLEN)
NAN_BOXED(3193152150,32,FLEN)
NAN_BOXED(1045668502,32,FLEN)
NAN_BOXED(3193152150,32,FLEN)
NAN_BOXED(1045668502,32,FLEN)
NAN_BOXED(3193152150,32,FLEN)
NAN_BOXED(1053180234,32,FLEN)
NAN_BOXED(3200663882,32,FLEN)
NAN_BOXED(1053180234,32,FLEN)
NAN_BOXED(3200663882,32,FLEN)
NAN_BOXED(1053180234,32,FLEN)
NAN_BOXED(3200663882,32,FLEN)
NAN_BOXED(1053180234,32,FLEN)
NAN_BOXED(3200663882,32,FLEN)
NAN_BOXED(1053180234,32,FLEN)
NAN_BOXED(3200663882,32,FLEN)
NAN_BOXED(1052597587,32,FLEN)
NAN_BOXED(3200081235,32,FLEN)
NAN_BOXED(1052597587,32,FLEN)
NAN_BOXED(3200081235,32,FLEN)
NAN_BOXED(1052597587,32,FLEN)
NAN_BOXED(3200081235,32,FLEN)
NAN_BOXED(1052597587,32,FLEN)
NAN_BOXED(3200081235,32,FLEN)
NAN_BOXED(1052597587,32,FLEN)
NAN_BOXED(3200081235,32,FLEN)
NAN_BOXED(1061275754,32,FLEN)
NAN_BOXED(3208759402,32,FLEN)
NAN_BOXED(1061275754,32,FLEN)
NAN_BOXED(3208759402,32,FLEN)
NAN_BOXED(1061275754,32,FLEN)
NAN_BOXED(3208759402,32,FLEN)
NAN_BOXED(1061275754,32,FLEN)
NAN_BOXED(3208759402,32,FLEN)
NAN_BOXED(1061275754,32,FLEN)
NAN_BOXED(3208759402,32,FLEN)
NAN_BOXED(1063388028,32,FLEN)
NAN_BOXED(3210871676,32,FLEN)
NAN_BOXED(1063388028,32,FLEN)
NAN_BOXED(3210871676,32,FLEN)
NAN_BOXED(1063388028,32,FLEN)
NAN_BOXED(3210871676,32,FLEN)
NAN_BOXED(1063388028,32,FLEN)
NAN_BOXED(3210871676,32,FLEN)
NAN_BOXED(1063388028,32,FLEN)
NAN_BOXED(3210871676,32,FLEN)
NAN_BOXED(1045584087,32,FLEN)
NAN_BOXED(3193067735,32,FLEN)
NAN_BOXED(1045584087,32,FLEN)
NAN_BOXED(3193067735,32,FLEN)
NAN_BOXED(1045584087,32,FLEN)
NAN_BOXED(3193067735,32,FLEN)
NAN_BOXED(1045584087,32,FLEN)
NAN_BOXED(3193067735,32,FLEN)
NAN_BOXED(1045584087,32,FLEN)
NAN_BOXED(3193067735,32,FLEN)
NAN_BOXED(1044152646,32,FLEN)
NAN_BOXED(3191636294,32,FLEN)
NAN_BOXED(1044152646,32,FLEN)
NAN_BOXED(3191636294,32,FLEN)
NAN_BOXED(1044152646,32,FLEN)
NAN_BOXED(3191636294,32,FLEN)
NAN_BOXED(1044152646,32,FLEN)
NAN_BOXED(3191636294,32,FLEN)
NAN_BOXED(1044152646,32,FLEN)
NAN_BOXED(3191636294,32,FLEN)
NAN_BOXED(1062897728,32,FLEN)
NAN_BOXED(3210381376,32,FLEN)
NAN_BOXED(1062897728,32,FLEN)
NAN_BOXED(3210381376,32,FLEN)
NAN_BOXED(1062897728,32,FLEN)
NAN_BOXED(3210381376,32,FLEN)
NAN_BOXED(1062897728,32,FLEN)
NAN_BOXED(3210381376,32,FLEN)
NAN_BOXED(1062897728,32,FLEN)
NAN_BOXED(3210381376,32,FLEN)
NAN_BOXED(1064594314,32,FLEN)
NAN_BOXED(3212077962,32,FLEN)
NAN_BOXED(1064594314,32,FLEN)
NAN_BOXED(3212077962,32,FLEN)
NAN_BOXED(1064594314,32,FLEN)
NAN_BOXED(3212077962,32,FLEN)
NAN_BOXED(1064594314,32,FLEN)
NAN_BOXED(3212077962,32,FLEN)
NAN_BOXED(1064594314,32,FLEN)
NAN_BOXED(3212077962,32,FLEN)
NAN_BOXED(1035487622,32,FLEN)
NAN_BOXED(3182971270,32,FLEN)
NAN_BOXED(1035487622,32,FLEN)
NAN_BOXED(3182971270,32,FLEN)
NAN_BOXED(1035487622,32,FLEN)
NAN_BOXED(3182971270,32,FLEN)
NAN_BOXED(1035487622,32,FLEN)
NAN_BOXED(3182971270,32,FLEN)
NAN_BOXED(1035487622,32,FLEN)
NAN_BOXED(3182971270,32,FLEN)
NAN_BOXED(1050905042,32,FLEN)
NAN_BOXED(3198388690,32,FLEN)
NAN_BOXED(1050905042,32,FLEN)
NAN_BOXED(3198388690,32,FLEN)
NAN_BOXED(1050905042,32,FLEN)
NAN_BOXED(3198388690,32,FLEN)
NAN_BOXED(1050905042,32,FLEN)
NAN_BOXED(3198388690,32,FLEN)
NAN_BOXED(1050905042,32,FLEN)
NAN_BOXED(3198388690,32,FLEN)
NAN_BOXED(1052434762,32,FLEN)
NAN_BOXED(3199918410,32,FLEN)
NAN_BOXED(1052434762,32,FLEN)
NAN_BOXED(3199918410,32,FLEN)
NAN_BOXED(1052434762,32,FLEN)
NAN_BOXED(3199918410,32,FLEN)
NAN_BOXED(1052434762,32,FLEN)
NAN_BOXED(3199918410,32,FLEN)
NAN_BOXED(1052434762,32,FLEN)
NAN_BOXED(3199918410,32,FLEN)
NAN_BOXED(1054416049,32,FLEN)
NAN_BOXED(3201899697,32,FLEN)
NAN_BOXED(1054416049,32,FLEN)
NAN_BOXED(3201899697,32,FLEN)
NAN_BOXED(1054416049,32,FLEN)
NAN_BOXED(3201899697,32,FLEN)
NAN_BOXED(1054416049,32,FLEN)
NAN_BOXED(3201899697,32,FLEN)
NAN_BOXED(1054416049,32,FLEN)
NAN_BOXED(3201899697,32,FLEN)
NAN_BOXED(1059143298,32,FLEN)
NAN_BOXED(3206626946,32,FLEN)
NAN_BOXED(1059143298,32,FLEN)
NAN_BOXED(3206626946,32,FLEN)
NAN_BOXED(1059143298,32,FLEN)
NAN_BOXED(3206626946,32,FLEN)
NAN_BOXED(1059143298,32,FLEN)
NAN_BOXED(3206626946,32,FLEN)
NAN_BOXED(1059143298,32,FLEN)
NAN_BOXED(3206626946,32,FLEN)
NAN_BOXED(1064742658,32,FLEN)
NAN_BOXED(3212226306,32,FLEN)
NAN_BOXED(1064742658,32,FLEN)
NAN_BOXED(3212226306,32,FLEN)
NAN_BOXED(1064742658,32,FLEN)
NAN_BOXED(3212226306,32,FLEN)
NAN_BOXED(1064742658,32,FLEN)
NAN_BOXED(3212226306,32,FLEN)
NAN_BOXED(1064742658,32,FLEN)
NAN_BOXED(3212226306,32,FLEN)
NAN_BOXED(1025482154,32,FLEN)
NAN_BOXED(3172965802,32,FLEN)
NAN_BOXED(1025482154,32,FLEN)
NAN_BOXED(3172965802,32,FLEN)
NAN_BOXED(1025482154,32,FLEN)
NAN_BOXED(3172965802,32,FLEN)
NAN_BOXED(1025482154,32,FLEN)
NAN_BOXED(3172965802,32,FLEN)
NAN_BOXED(1025482154,32,FLEN)
NAN_BOXED(3172965802,32,FLEN)
NAN_BOXED(1063274600,32,FLEN)
NAN_BOXED(3210758248,32,FLEN)
NAN_BOXED(1063274600,32,FLEN)
NAN_BOXED(3210758248,32,FLEN)
NAN_BOXED(1063274600,32,FLEN)
NAN_BOXED(3210758248,32,FLEN)
NAN_BOXED(1063274600,32,FLEN)
NAN_BOXED(3210758248,32,FLEN)
NAN_BOXED(1063274600,32,FLEN)
NAN_BOXED(3210758248,32,FLEN)
NAN_BOXED(1045170453,32,FLEN)
NAN_BOXED(3192654101,32,FLEN)
NAN_BOXED(1045170453,32,FLEN)
NAN_BOXED(3192654101,32,FLEN)
NAN_BOXED(1045170453,32,FLEN)
NAN_BOXED(3192654101,32,FLEN)
NAN_BOXED(1045170453,32,FLEN)
NAN_BOXED(3192654101,32,FLEN)
NAN_BOXED(1045170453,32,FLEN)
NAN_BOXED(3192654101,32,FLEN)
NAN_BOXED(1064970987,32,FLEN)
NAN_BOXED(3212454635,32,FLEN)
NAN_BOXED(1064970987,32,FLEN)
NAN_BOXED(3212454635,32,FLEN)
NAN_BOXED(1064970987,32,FLEN)
NAN_BOXED(3212454635,32,FLEN)
NAN_BOXED(1064970987,32,FLEN)
NAN_BOXED(3212454635,32,FLEN)
NAN_BOXED(1064970987,32,FLEN)
NAN_BOXED(3212454635,32,FLEN)
NAN_BOXED(1063650324,32,FLEN)
NAN_BOXED(3211133972,32,FLEN)
NAN_BOXED(1063650324,32,FLEN)
NAN_BOXED(3211133972,32,FLEN)
NAN_BOXED(1063650324,32,FLEN)
NAN_BOXED(3211133972,32,FLEN)
NAN_BOXED(1063650324,32,FLEN)
NAN_BOXED(3211133972,32,FLEN)
NAN_BOXED(1063650324,32,FLEN)
NAN_BOXED(3211133972,32,FLEN)
NAN_BOXED(1061648315,32,FLEN)
NAN_BOXED(3209131963,32,FLEN)
NAN_BOXED(1061648315,32,FLEN)
NAN_BOXED(3209131963,32,FLEN)
NAN_BOXED(1061648315,32,FLEN)
NAN_BOXED(3209131963,32,FLEN)
NAN_BOXED(1061648315,32,FLEN)
NAN_BOXED(3209131963,32,FLEN)
NAN_BOXED(1061648315,32,FLEN)
NAN_BOXED(3209131963,32,FLEN)
NAN_BOXED(1059476258,32,FLEN)
NAN_BOXED(3206959906,32,FLEN)
NAN_BOXED(1059476258,32,FLEN)
NAN_BOXED(3206959906,32,FLEN)
NAN_BOXED(1059476258,32,FLEN)
NAN_BOXED(3206959906,32,FLEN)
NAN_BOXED(1059476258,32,FLEN)
NAN_BOXED(3206959906,32,FLEN)
NAN_BOXED(1059476258,32,FLEN)
NAN_BOXED(3206959906,32,FLEN)
NAN_BOXED(1056842587,32,FLEN)
NAN_BOXED(3204326235,32,FLEN)
NAN_BOXED(1056842587,32,FLEN)
NAN_BOXED(3204326235,32,FLEN)
NAN_BOXED(1056842587,32,FLEN)
NAN_BOXED(3204326235,32,FLEN)
NAN_BOXED(1056842587,32,FLEN)
NAN_BOXED(3204326235,32,FLEN)
NAN_BOXED(1056842587,32,FLEN)
NAN_BOXED(3204326235,32,FLEN)
NAN_BOXED(1063660038,32,FLEN)
NAN_BOXED(3211143686,32,FLEN)
NAN_BOXED(1063660038,32,FLEN)
NAN_BOXED(3211143686,32,FLEN)
NAN_BOXED(1063660038,32,FLEN)
NAN_BOXED(3211143686,32,FLEN)
NAN_BOXED(1063660038,32,FLEN)
NAN_BOXED(3211143686,32,FLEN)
NAN_BOXED(1063660038,32,FLEN)
NAN_BOXED(3211143686,32,FLEN)
NAN_BOXED(1062008580,32,FLEN)
NAN_BOXED(3209492228,32,FLEN)
NAN_BOXED(1062008580,32,FLEN)
NAN_BOXED(3209492228,32,FLEN)
NAN_BOXED(1062008580,32,FLEN)
NAN_BOXED(3209492228,32,FLEN)
NAN_BOXED(1062008580,32,FLEN)
NAN_BOXED(3209492228,32,FLEN)
NAN_BOXED(1062008580,32,FLEN)
NAN_BOXED(3209492228,32,FLEN)
NAN_BOXED(1049193458,32,FLEN)
NAN_BOXED(3196677106,32,FLEN)
NAN_BOXED(1049193458,32,FLEN)
NAN_BOXED(3196677106,32,FLEN)
NAN_BOXED(1049193458,32,FLEN)
NAN_BOXED(3196677106,32,FLEN)
NAN_BOXED(1049193458,32,FLEN)
NAN_BOXED(3196677106,32,FLEN)
NAN_BOXED(1049193458,32,FLEN)
NAN_BOXED(3196677106,32,FLEN)
NAN_BOXED(1034351328,32,FLEN)
NAN_BOXED(3181834976,32,FLEN)
NAN_BOXED(1034351328,32,FLEN)
NAN_BOXED(3181834976,32,FLEN)
NAN_BOXED(1034351328,32,FLEN)
NAN_BOXED(3181834976,32,FLEN)
NAN_BOXED(1034351328,32,FLEN)
NAN_BOXED(3181834976,32,FLEN)
NAN_BOXED(1034351328,32,FLEN)
NAN_BOXED(3181834976,32,FLEN)
NAN_BOXED(1051171751,32,FLEN)
NAN_BOXED(3198655399,32,FLEN)
NAN_BOXED(1051171751,32,FLEN)
NAN_BOXED(3198655399,32,FLEN)
NAN_BOXED(1051171751,32,FLEN)
NAN_BOXED(3198655399,32,FLEN)
NAN_BOXED(1051171751,32,FLEN)
NAN_BOXED(3198655399,32,FLEN)
NAN_BOXED(1051171751,32,FLEN)
NAN_BOXED(3198655399,32,FLEN)
NAN_BOXED(1064379282,32,FLEN)
NAN_BOXED(3211862930,32,FLEN)
NAN_BOXED(1064379282,32,FLEN)
NAN_BOXED(3211862930,32,FLEN)
NAN_BOXED(1064379282,32,FLEN)
NAN_BOXED(3211862930,32,FLEN)
NAN_BOXED(1064379282,32,FLEN)
NAN_BOXED(3211862930,32,FLEN)
NAN_BOXED(1064379282,32,FLEN)
NAN_BOXED(3211862930,32,FLEN)
NAN_BOXED(1042172163,32,FLEN)
NAN_BOXED(3189655811,32,FLEN)
NAN_BOXED(1042172163,32,FLEN)
NAN_BOXED(3189655811,32,FLEN)
NAN_BOXED(1042172163,32,FLEN)
NAN_BOXED(3189655811,32,FLEN)
NAN_BOXED(1042172163,32,FLEN)
NAN_BOXED(3189655811,32,FLEN)
NAN_BOXED(1042172163,32,FLEN)
NAN_BOXED(3189655811,32,FLEN)
NAN_BOXED(1061147380,32,FLEN)
NAN_BOXED(3208631028,32,FLEN)
NAN_BOXED(1061147380,32,FLEN)
NAN_BOXED(3208631028,32,FLEN)
NAN_BOXED(1061147380,32,FLEN)
NAN_BOXED(3208631028,32,FLEN)
NAN_BOXED(1061147380,32,FLEN)
NAN_BOXED(3208631028,32,FLEN)
NAN_BOXED(1061147380,32,FLEN)
NAN_BOXED(3208631028,32,FLEN)
NAN_BOXED(1057932417,32,FLEN)
NAN_BOXED(3205416065,32,FLEN)
NAN_BOXED(1057932417,32,FLEN)
NAN_BOXED(3205416065,32,FLEN)
NAN_BOXED(1057932417,32,FLEN)
NAN_BOXED(3205416065,32,FLEN)
NAN_BOXED(1057932417,32,FLEN)
NAN_BOXED(3205416065,32,FLEN)
NAN_BOXED(1057932417,32,FLEN)
NAN_BOXED(3205416065,32,FLEN)
NAN_BOXED(1057440654,32,FLEN)
NAN_BOXED(3204924302,32,FLEN)
NAN_BOXED(1057440654,32,FLEN)
NAN_BOXED(3204924302,32,FLEN)
NAN_BOXED(1057440654,32,FLEN)
NAN_BOXED(3204924302,32,FLEN)
NAN_BOXED(1057440654,32,FLEN)
NAN_BOXED(3204924302,32,FLEN)
NAN_BOXED(1057440654,32,FLEN)
NAN_BOXED(3204924302,32,FLEN)
NAN_BOXED(1054645569,32,FLEN)
NAN_BOXED(3202129217,32,FLEN)
NAN_BOXED(1054645569,32,FLEN)
NAN_BOXED(3202129217,32,FLEN)
NAN_BOXED(1054645569,32,FLEN)
NAN_BOXED(3202129217,32,FLEN)
NAN_BOXED(1054645569,32,FLEN)
NAN_BOXED(3202129217,32,FLEN)
NAN_BOXED(1054645569,32,FLEN)
NAN_BOXED(3202129217,32,FLEN)
NAN_BOXED(1060128019,32,FLEN)
NAN_BOXED(3207611667,32,FLEN)
NAN_BOXED(1060128019,32,FLEN)
NAN_BOXED(3207611667,32,FLEN)
NAN_BOXED(1060128019,32,FLEN)
NAN_BOXED(3207611667,32,FLEN)
NAN_BOXED(1060128019,32,FLEN)
NAN_BOXED(3207611667,32,FLEN)
NAN_BOXED(1060128019,32,FLEN)
NAN_BOXED(3207611667,32,FLEN)
NAN_BOXED(1042693158,32,FLEN)
NAN_BOXED(3190176806,32,FLEN)
NAN_BOXED(1042693158,32,FLEN)
NAN_BOXED(3190176806,32,FLEN)
NAN_BOXED(1042693158,32,FLEN)
NAN_BOXED(3190176806,32,FLEN)
NAN_BOXED(1042693158,32,FLEN)
NAN_BOXED(3190176806,32,FLEN)
NAN_BOXED(1042693158,32,FLEN)
NAN_BOXED(3190176806,32,FLEN)
NAN_BOXED(1054931202,32,FLEN)
NAN_BOXED(3202414850,32,FLEN)
NAN_BOXED(1054931202,32,FLEN)
NAN_BOXED(3202414850,32,FLEN)
NAN_BOXED(1054931202,32,FLEN)
NAN_BOXED(3202414850,32,FLEN)
NAN_BOXED(1054931202,32,FLEN)
NAN_BOXED(3202414850,32,FLEN)
NAN_BOXED(1054931202,32,FLEN)
NAN_BOXED(3202414850,32,FLEN)
NAN_BOXED(1048858716,32,FLEN)
NAN_BOXED(3196342364,32,FLEN)
NAN_BOXED(1048858716,32,FLEN)
NAN_BOXED(3196342364,32,FLEN)
NAN_BOXED(1048858716,32,FLEN)
NAN_BOXED(3196342364,32,FLEN)
NAN_BOXED(1048858716,32,FLEN)
NAN_BOXED(3196342364,32,FLEN)
NAN_BOXED(1048858716,32,FLEN)
NAN_BOXED(3196342364,32,FLEN)
NAN_BOXED(1064586556,32,FLEN)
NAN_BOXED(3212070204,32,FLEN)
NAN_BOXED(1064586556,32,FLEN)
NAN_BOXED(3212070204,32,FLEN)
NAN_BOXED(1064586556,32,FLEN)
NAN_BOXED(3212070204,32,FLEN)
NAN_BOXED(1064586556,32,FLEN)
NAN_BOXED(3212070204,32,FLEN)
NAN_BOXED(1064586556,32,FLEN)
NAN_BOXED(3212070204,32,FLEN)
NAN_BOXED(1061324496,32,FLEN)
NAN_BOXED(3208808144,32,FLEN)
NAN_BOXED(1061324496,32,FLEN)
NAN_BOXED(3208808144,32,FLEN)
NAN_BOXED(1061324496,32,FLEN)
NAN_BOXED(3208808144,32,FLEN)
NAN_BOXED(1061324496,32,FLEN)
NAN_BOXED(3208808144,32,FLEN)
NAN_BOXED(1061324496,32,FLEN)
NAN_BOXED(3208808144,32,FLEN)
NAN_BOXED(1059443851,32,FLEN)
NAN_BOXED(3206927499,32,FLEN)
NAN_BOXED(1059443851,32,FLEN)
NAN_BOXED(3206927499,32,FLEN)
NAN_BOXED(1059443851,32,FLEN)
NAN_BOXED(3206927499,32,FLEN)
NAN_BOXED(1059443851,32,FLEN)
NAN_BOXED(3206927499,32,FLEN)
NAN_BOXED(1059443851,32,FLEN)
NAN_BOXED(3206927499,32,FLEN)
NAN_BOXED(1059326819,32,FLEN)
NAN_BOXED(3206810467,32,FLEN)
NAN_BOXED(1059326819,32,FLEN)
NAN_BOXED(3206810467,32,FLEN)
NAN_BOXED(1059326819,32,FLEN)
NAN_BOXED(3206810467,32,FLEN)
NAN_BOXED(1059326819,32,FLEN)
NAN_BOXED(3206810467,32,FLEN)
NAN_BOXED(1059326819,32,FLEN)
NAN_BOXED(3206810467,32,FLEN)
NAN_BOXED(1052476774,32,FLEN)
NAN_BOXED(3199960422,32,FLEN)
NAN_BOXED(1052476774,32,FLEN)
NAN_BOXED(3199960422,32,FLEN)
NAN_BOXED(1052476774,32,FLEN)
NAN_BOXED(3199960422,32,FLEN)
NAN_BOXED(1052476774,32,FLEN)
NAN_BOXED(3199960422,32,FLEN)
NAN_BOXED(1052476774,32,FLEN)
NAN_BOXED(3199960422,32,FLEN)
NAN_BOXED(1049729623,32,FLEN)
NAN_BOXED(3197213271,32,FLEN)
NAN_BOXED(1049729623,32,FLEN)
NAN_BOXED(3197213271,32,FLEN)
NAN_BOXED(1049729623,32,FLEN)
NAN_BOXED(3197213271,32,FLEN)
NAN_BOXED(1049729623,32,FLEN)
NAN_BOXED(3197213271,32,FLEN)
NAN_BOXED(1049729623,32,FLEN)
NAN_BOXED(3197213271,32,FLEN)
NAN_BOXED(1058400435,32,FLEN)
NAN_BOXED(3205884083,32,FLEN)
NAN_BOXED(1058400435,32,FLEN)
NAN_BOXED(3205884083,32,FLEN)
NAN_BOXED(1058400435,32,FLEN)
NAN_BOXED(3205884083,32,FLEN)
NAN_BOXED(1058400435,32,FLEN)
NAN_BOXED(3205884083,32,FLEN)
NAN_BOXED(1058400435,32,FLEN)
NAN_BOXED(3205884083,32,FLEN)
NAN_BOXED(1065327643,32,FLEN)
NAN_BOXED(3212811291,32,FLEN)
NAN_BOXED(1065327643,32,FLEN)
NAN_BOXED(3212811291,32,FLEN)
NAN_BOXED(1065327643,32,FLEN)
NAN_BOXED(3212811291,32,FLEN)
NAN_BOXED(1065327643,32,FLEN)
NAN_BOXED(3212811291,32,FLEN)
NAN_BOXED(1065327643,32,FLEN)
NAN_BOXED(3212811291,32,FLEN)
NAN_BOXED(1059742886,32,FLEN)
NAN_BOXED(3207226534,32,FLEN)
NAN_BOXED(1059742886,32,FLEN)
NAN_BOXED(3207226534,32,FLEN)
NAN_BOXED(1059742886,32,FLEN)
NAN_BOXED(3207226534,32,FLEN)
NAN_BOXED(1059742886,32,FLEN)
NAN_BOXED(3207226534,32,FLEN)
NAN_BOXED(1059742886,32,FLEN)
NAN_BOXED(3207226534,32,FLEN)
NAN_BOXED(1052354249,32,FLEN)
NAN_BOXED(3199837897,32,FLEN)
NAN_BOXED(1052354249,32,FLEN)
NAN_BOXED(3199837897,32,FLEN)
NAN_BOXED(1052354249,32,FLEN)
NAN_BOXED(3199837897,32,FLEN)
NAN_BOXED(1052354249,32,FLEN)
NAN_BOXED(3199837897,32,FLEN)
NAN_BOXED(1052354249,32,FLEN)
NAN_BOXED(3199837897,32,FLEN)
NAN_BOXED(1040130565,32,FLEN)
NAN_BOXED(3187614213,32,FLEN)
NAN_BOXED(1040130565,32,FLEN)
NAN_BOXED(3187614213,32,FLEN)
NAN_BOXED(1040130565,32,FLEN)
NAN_BOXED(3187614213,32,FLEN)
NAN_BOXED(1040130565,32,FLEN)
NAN_BOXED(3187614213,32,FLEN)
NAN_BOXED(1040130565,32,FLEN)
NAN_BOXED(3187614213,32,FLEN)
NAN_BOXED(1058400630,32,FLEN)
NAN_BOXED(3205884278,32,FLEN)
NAN_BOXED(1058400630,32,FLEN)
NAN_BOXED(3205884278,32,FLEN)
NAN_BOXED(1058400630,32,FLEN)
NAN_BOXED(3205884278,32,FLEN)
NAN_BOXED(1058400630,32,FLEN)
NAN_BOXED(3205884278,32,FLEN)
NAN_BOXED(1058400630,32,FLEN)
NAN_BOXED(3205884278,32,FLEN)
NAN_BOXED(1050192329,32,FLEN)
NAN_BOXED(3197675977,32,FLEN)
NAN_BOXED(1050192329,32,FLEN)
NAN_BOXED(3197675977,32,FLEN)
NAN_BOXED(1050192329,32,FLEN)
NAN_BOXED(3197675977,32,FLEN)
NAN_BOXED(1050192329,32,FLEN)
NAN_BOXED(3197675977,32,FLEN)
NAN_BOXED(1050192329,32,FLEN)
NAN_BOXED(3197675977,32,FLEN)
NAN_BOXED(1051522217,32,FLEN)
NAN_BOXED(3199005865,32,FLEN)
NAN_BOXED(1051522217,32,FLEN)
NAN_BOXED(3199005865,32,FLEN)
NAN_BOXED(1051522217,32,FLEN)
NAN_BOXED(3199005865,32,FLEN)
NAN_BOXED(1051522217,32,FLEN)
NAN_BOXED(3199005865,32,FLEN)
NAN_BOXED(1051522217,32,FLEN)
NAN_BOXED(3199005865,32,FLEN)
NAN_BOXED(1057881446,32,FLEN)
NAN_BOXED(3205365094,32,FLEN)
NAN_BOXED(1057881446,32,FLEN)
NAN_BOXED(3205365094,32,FLEN)
NAN_BOXED(1057881446,32,FLEN)
NAN_BOXED(3205365094,32,FLEN)
NAN_BOXED(1057881446,32,FLEN)
NAN_BOXED(3205365094,32,FLEN)
NAN_BOXED(1057881446,32,FLEN)
NAN_BOXED(3205365094,32,FLEN)
NAN_BOXED(1062707674,32,FLEN)
NAN_BOXED(3210191322,32,FLEN)
NAN_BOXED(1062707674,32,FLEN)
NAN_BOXED(3210191322,32,FLEN)
NAN_BOXED(1062707674,32,FLEN)
NAN_BOXED(3210191322,32,FLEN)
NAN_BOXED(1062707674,32,FLEN)
NAN_BOXED(3210191322,32,FLEN)
NAN_BOXED(1062707674,32,FLEN)
NAN_BOXED(3210191322,32,FLEN)
NAN_BOXED(1057178255,32,FLEN)
NAN_BOXED(3204661903,32,FLEN)
NAN_BOXED(1057178255,32,FLEN)
NAN_BOXED(3204661903,32,FLEN)
NAN_BOXED(1057178255,32,FLEN)
NAN_BOXED(3204661903,32,FLEN)
NAN_BOXED(1057178255,32,FLEN)
NAN_BOXED(3204661903,32,FLEN)
NAN_BOXED(1057178255,32,FLEN)
NAN_BOXED(3204661903,32,FLEN)
NAN_BOXED(1048207923,32,FLEN)
NAN_BOXED(3195691571,32,FLEN)
NAN_BOXED(1048207923,32,FLEN)
NAN_BOXED(3195691571,32,FLEN)
NAN_BOXED(1048207923,32,FLEN)
NAN_BOXED(3195691571,32,FLEN)
NAN_BOXED(1048207923,32,FLEN)
NAN_BOXED(3195691571,32,FLEN)
NAN_BOXED(1048207923,32,FLEN)
NAN_BOXED(3195691571,32,FLEN)
NAN_BOXED(1057055495,32,FLEN)
NAN_BOXED(3204539143,32,FLEN)
NAN_BOXED(1057055495,32,FLEN)
NAN_BOXED(3204539143,32,FLEN)
NAN_BOXED(1057055495,32,FLEN)
NAN_BOXED(3204539143,32,FLEN)
NAN_BOXED(1057055495,32,FLEN)
NAN_BOXED(3204539143,32,FLEN)
NAN_BOXED(1057055495,32,FLEN)
NAN_BOXED(3204539143,32,FLEN)
NAN_BOXED(1057520064,32,FLEN)
NAN_BOXED(3205003712,32,FLEN)
NAN_BOXED(1057520064,32,FLEN)
NAN_BOXED(3205003712,32,FLEN)
NAN_BOXED(1057520064,32,FLEN)
NAN_BOXED(3205003712,32,FLEN)
NAN_BOXED(1057520064,32,FLEN)
NAN_BOXED(3205003712,32,FLEN)
NAN_BOXED(1057520064,32,FLEN)
NAN_BOXED(3205003712,32,FLEN)
NAN_BOXED(1040185200,32,FLEN)
NAN_BOXED(3187668848,32,FLEN)
NAN_BOXED(1040185200,32,FLEN)
NAN_BOXED(3187668848,32,FLEN)
NAN_BOXED(1040185200,32,FLEN)
NAN_BOXED(3187668848,32,FLEN)
NAN_BOXED(1040185200,32,FLEN)
NAN_BOXED(3187668848,32,FLEN)
NAN_BOXED(1040185200,32,FLEN)
NAN_BOXED(3187668848,32,FLEN)
NAN_BOXED(1062199077,32,FLEN)
NAN_BOXED(3209682725,32,FLEN)
NAN_BOXED(1062199077,32,FLEN)
NAN_BOXED(3209682725,32,FLEN)
NAN_BOXED(1062199077,32,FLEN)
NAN_BOXED(3209682725,32,FLEN)
NAN_BOXED(1062199077,32,FLEN)
NAN_BOXED(3209682725,32,FLEN)
NAN_BOXED(1062199077,32,FLEN)
NAN_BOXED(3209682725,32,FLEN)
NAN_BOXED(1052498890,32,FLEN)
NAN_BOXED(3199982538,32,FLEN)
NAN_BOXED(1052498890,32,FLEN)
NAN_BOXED(3199982538,32,FLEN)
NAN_BOXED(1052498890,32,FLEN)
NAN_BOXED(3199982538,32,FLEN)
NAN_BOXED(1052498890,32,FLEN)
NAN_BOXED(3199982538,32,FLEN)
NAN_BOXED(1052498890,32,FLEN)
NAN_BOXED(3199982538,32,FLEN)
NAN_BOXED(1049396259,32,FLEN)
NAN_BOXED(3196879907,32,FLEN)
NAN_BOXED(1049396259,32,FLEN)
NAN_BOXED(3196879907,32,FLEN)
NAN_BOXED(1049396259,32,FLEN)
NAN_BOXED(3196879907,32,FLEN)
NAN_BOXED(1049396259,32,FLEN)
NAN_BOXED(3196879907,32,FLEN)
NAN_BOXED(1049396259,32,FLEN)
NAN_BOXED(3196879907,32,FLEN)
NAN_BOXED(1058611848,32,FLEN)
NAN_BOXED(3206095496,32,FLEN)
NAN_BOXED(1058611848,32,FLEN)
NAN_BOXED(3206095496,32,FLEN)
NAN_BOXED(1058611848,32,FLEN)
NAN_BOXED(3206095496,32,FLEN)
NAN_BOXED(1058611848,32,FLEN)
NAN_BOXED(3206095496,32,FLEN)
NAN_BOXED(1058611848,32,FLEN)
NAN_BOXED(3206095496,32,FLEN)
NAN_BOXED(1060048643,32,FLEN)
NAN_BOXED(3207532291,32,FLEN)
NAN_BOXED(1060048643,32,FLEN)
NAN_BOXED(3207532291,32,FLEN)
NAN_BOXED(1060048643,32,FLEN)
NAN_BOXED(3207532291,32,FLEN)
NAN_BOXED(1060048643,32,FLEN)
NAN_BOXED(3207532291,32,FLEN)
NAN_BOXED(1060048643,32,FLEN)
NAN_BOXED(3207532291,32,FLEN)
NAN_BOXED(1049672419,32,FLEN)
NAN_BOXED(3197156067,32,FLEN)
NAN_BOXED(1049672419,32,FLEN)
NAN_BOXED(3197156067,32,FLEN)
NAN_BOXED(1049672419,32,FLEN)
NAN_BOXED(3197156067,32,FLEN)
NAN_BOXED(1049672419,32,FLEN)
NAN_BOXED(3197156067,32,FLEN)
NAN_BOXED(1049672419,32,FLEN)
NAN_BOXED(3197156067,32,FLEN)
NAN_BOXED(1043695077,32,FLEN)
NAN_BOXED(3191178725,32,FLEN)
NAN_BOXED(1043695077,32,FLEN)
NAN_BOXED(3191178725,32,FLEN)
NAN_BOXED(1043695077,32,FLEN)
NAN_BOXED(3191178725,32,FLEN)
NAN_BOXED(1043695077,32,FLEN)
NAN_BOXED(3191178725,32,FLEN)
NAN_BOXED(1043695077,32,FLEN)
NAN_BOXED(3191178725,32,FLEN)
NAN_BOXED(1063712666,32,FLEN)
NAN_BOXED(3211196314,32,FLEN)
NAN_BOXED(1063712666,32,FLEN)
NAN_BOXED(3211196314,32,FLEN)
NAN_BOXED(1063712666,32,FLEN)
NAN_BOXED(3211196314,32,FLEN)
NAN_BOXED(1063712666,32,FLEN)
NAN_BOXED(3211196314,32,FLEN)
NAN_BOXED(1063712666,32,FLEN)
NAN_BOXED(3211196314,32,FLEN)
NAN_BOXED(1051956091,32,FLEN)
NAN_BOXED(3199439739,32,FLEN)
NAN_BOXED(1051956091,32,FLEN)
NAN_BOXED(3199439739,32,FLEN)
NAN_BOXED(1051956091,32,FLEN)
NAN_BOXED(3199439739,32,FLEN)
NAN_BOXED(1051956091,32,FLEN)
NAN_BOXED(3199439739,32,FLEN)
NAN_BOXED(1051956091,32,FLEN)
NAN_BOXED(3199439739,32,FLEN)
NAN_BOXED(1060655885,32,FLEN)
NAN_BOXED(3208139533,32,FLEN)
NAN_BOXED(1060655885,32,FLEN)
NAN_BOXED(3208139533,32,FLEN)
NAN_BOXED(1060655885,32,FLEN)
NAN_BOXED(3208139533,32,FLEN)
NAN_BOXED(1060655885,32,FLEN)
NAN_BOXED(3208139533,32,FLEN)
NAN_BOXED(1060655885,32,FLEN)
NAN_BOXED(3208139533,32,FLEN)
NAN_BOXED(1063672462,32,FLEN)
NAN_BOXED(3211156110,32,FLEN)
NAN_BOXED(1063672462,32,FLEN)
NAN_BOXED(3211156110,32,FLEN)
NAN_BOXED(1063672462,32,FLEN)
NAN_BOXED(3211156110,32,FLEN)
NAN_BOXED(1063672462,32,FLEN)
NAN_BOXED(3211156110,32,FLEN)
NAN_BOXED(1063672462,32,FLEN)
NAN_BOXED(3211156110,32,FLEN)
NAN_BOXED(1058697758,32,FLEN)
NAN_BOXED(3206181406,32,FLEN)
NAN_BOXED(1058697758,32,FLEN)
NAN_BOXED(3206181406,32,FLEN)
NAN_BOXED(1058697758,32,FLEN)
NAN_BOXED(3206181406,32,FLEN)
NAN_BOXED(1058697758,32,FLEN)
NAN_BOXED(3206181406,32,FLEN)
NAN_BOXED(1058697758,32,FLEN)
NAN_BOXED(3206181406,32,FLEN)
NAN_BOXED(1060744282,32,FLEN)
NAN_BOXED(3208227930,32,FLEN)
NAN_BOXED(1060744282,32,FLEN)
NAN_BOXED(3208227930,32,FLEN)
NAN_BOXED(1060744282,32,FLEN)
NAN_BOXED(3208227930,32,FLEN)
NAN_BOXED(1060744282,32,FLEN)
NAN_BOXED(3208227930,32,FLEN)
NAN_BOXED(1060744282,32,FLEN)
NAN_BOXED(3208227930,32,FLEN)
NAN_BOXED(1045734507,32,FLEN)
NAN_BOXED(3193218155,32,FLEN)
NAN_BOXED(1045734507,32,FLEN)
NAN_BOXED(3193218155,32,FLEN)
NAN_BOXED(1045734507,32,FLEN)
NAN_BOXED(3193218155,32,FLEN)
NAN_BOXED(1045734507,32,FLEN)
NAN_BOXED(3193218155,32,FLEN)
NAN_BOXED(1045734507,32,FLEN)
NAN_BOXED(3193218155,32,FLEN)
NAN_BOXED(1063114790,32,FLEN)
NAN_BOXED(3210598438,32,FLEN)
NAN_BOXED(1063114790,32,FLEN)
NAN_BOXED(3210598438,32,FLEN)
NAN_BOXED(1063114790,32,FLEN)
NAN_BOXED(3210598438,32,FLEN)
NAN_BOXED(1063114790,32,FLEN)
NAN_BOXED(3210598438,32,FLEN)
NAN_BOXED(1063114790,32,FLEN)
NAN_BOXED(3210598438,32,FLEN)
NAN_BOXED(1051905162,32,FLEN)
NAN_BOXED(3199388810,32,FLEN)
NAN_BOXED(1051905162,32,FLEN)
NAN_BOXED(3199388810,32,FLEN)
NAN_BOXED(1051905162,32,FLEN)
NAN_BOXED(3199388810,32,FLEN)
NAN_BOXED(1051905162,32,FLEN)
NAN_BOXED(3199388810,32,FLEN)
NAN_BOXED(1051905162,32,FLEN)
NAN_BOXED(3199388810,32,FLEN)
NAN_BOXED(1040397856,32,FLEN)
NAN_BOXED(3187881504,32,FLEN)
NAN_BOXED(1040397856,32,FLEN)
NAN_BOXED(3187881504,32,FLEN)
NAN_BOXED(1040397856,32,FLEN)
NAN_BOXED(3187881504,32,FLEN)
NAN_BOXED(1040397856,32,FLEN)
NAN_BOXED(3187881504,32,FLEN)
NAN_BOXED(1040397856,32,FLEN)
NAN_BOXED(3187881504,32,FLEN)
NAN_BOXED(1065041590,32,FLEN)
NAN_BOXED(3212525238,32,FLEN)
NAN_BOXED(1065041590,32,FLEN)
NAN_BOXED(3212525238,32,FLEN)
NAN_BOXED(1065041590,32,FLEN)
NAN_BOXED(3212525238,32,FLEN)
NAN_BOXED(1065041590,32,FLEN)
NAN_BOXED(3212525238,32,FLEN)
NAN_BOXED(1065041590,32,FLEN)
NAN_BOXED(3212525238,32,FLEN)
NAN_BOXED(1050891364,32,FLEN)
NAN_BOXED(3198375012,32,FLEN)
NAN_BOXED(1050891364,32,FLEN)
NAN_BOXED(3198375012,32,FLEN)
NAN_BOXED(1050891364,32,FLEN)
NAN_BOXED(3198375012,32,FLEN)
NAN_BOXED(1050891364,32,FLEN)
NAN_BOXED(3198375012,32,FLEN)
NAN_BOXED(1050891364,32,FLEN)
NAN_BOXED(3198375012,32,FLEN)
NAN_BOXED(1029382179,32,FLEN)
NAN_BOXED(3176865827,32,FLEN)
NAN_BOXED(1029382179,32,FLEN)
NAN_BOXED(3176865827,32,FLEN)
NAN_BOXED(1029382179,32,FLEN)
NAN_BOXED(3176865827,32,FLEN)
NAN_BOXED(1029382179,32,FLEN)
NAN_BOXED(3176865827,32,FLEN)
NAN_BOXED(1029382179,32,FLEN)
NAN_BOXED(3176865827,32,FLEN)
NAN_BOXED(1035509746,32,FLEN)
NAN_BOXED(3182993394,32,FLEN)
NAN_BOXED(1035509746,32,FLEN)
NAN_BOXED(3182993394,32,FLEN)
NAN_BOXED(1035509746,32,FLEN)
NAN_BOXED(3182993394,32,FLEN)
NAN_BOXED(1035509746,32,FLEN)
NAN_BOXED(3182993394,32,FLEN)
NAN_BOXED(1035509746,32,FLEN)
NAN_BOXED(3182993394,32,FLEN)
NAN_BOXED(1048605030,32,FLEN)
NAN_BOXED(3196088678,32,FLEN)
NAN_BOXED(1048605030,32,FLEN)
NAN_BOXED(3196088678,32,FLEN)
NAN_BOXED(1048605030,32,FLEN)
NAN_BOXED(3196088678,32,FLEN)
NAN_BOXED(1048605030,32,FLEN)
NAN_BOXED(3196088678,32,FLEN)
NAN_BOXED(1048605030,32,FLEN)
NAN_BOXED(3196088678,32,FLEN)
NAN_BOXED(1051751528,32,FLEN)
NAN_BOXED(3199235176,32,FLEN)
NAN_BOXED(1051751528,32,FLEN)
NAN_BOXED(3199235176,32,FLEN)
NAN_BOXED(1051751528,32,FLEN)
NAN_BOXED(3199235176,32,FLEN)
NAN_BOXED(1051751528,32,FLEN)
NAN_BOXED(3199235176,32,FLEN)
NAN_BOXED(1051751528,32,FLEN)
NAN_BOXED(3199235176,32,FLEN)
NAN_BOXED(1036468198,32,FLEN)
NAN_BOXED(3183951846,32,FLEN)
NAN_BOXED(1036468198,32,FLEN)
NAN_BOXED(3183951846,32,FLEN)
NAN_BOXED(1036468198,32,FLEN)
NAN_BOXED(3183951846,32,FLEN)
NAN_BOXED(1036468198,32,FLEN)
NAN_BOXED(3183951846,32,FLEN)
NAN_BOXED(1036468198,32,FLEN)
NAN_BOXED(3183951846,32,FLEN)
NAN_BOXED(1059104554,32,FLEN)
NAN_BOXED(3206588202,32,FLEN)
NAN_BOXED(1059104554,32,FLEN)
NAN_BOXED(3206588202,32,FLEN)
NAN_BOXED(1059104554,32,FLEN)
NAN_BOXED(3206588202,32,FLEN)
NAN_BOXED(1059104554,32,FLEN)
NAN_BOXED(3206588202,32,FLEN)
NAN_BOXED(1059104554,32,FLEN)
NAN_BOXED(3206588202,32,FLEN)
NAN_BOXED(1061866170,32,FLEN)
NAN_BOXED(3209349818,32,FLEN)
NAN_BOXED(1061866170,32,FLEN)
NAN_BOXED(3209349818,32,FLEN)
NAN_BOXED(1061866170,32,FLEN)
NAN_BOXED(3209349818,32,FLEN)
NAN_BOXED(1061866170,32,FLEN)
NAN_BOXED(3209349818,32,FLEN)
NAN_BOXED(1061866170,32,FLEN)
NAN_BOXED(3209349818,32,FLEN)
NAN_BOXED(1065203947,32,FLEN)
NAN_BOXED(3212687595,32,FLEN)
NAN_BOXED(1065203947,32,FLEN)
NAN_BOXED(3212687595,32,FLEN)
NAN_BOXED(1065203947,32,FLEN)
NAN_BOXED(3212687595,32,FLEN)
NAN_BOXED(1065203947,32,FLEN)
NAN_BOXED(3212687595,32,FLEN)
NAN_BOXED(1065203947,32,FLEN)
NAN_BOXED(3212687595,32,FLEN)
NAN_BOXED(1059759551,32,FLEN)
NAN_BOXED(3207243199,32,FLEN)
NAN_BOXED(1059759551,32,FLEN)
NAN_BOXED(3207243199,32,FLEN)
NAN_BOXED(1059759551,32,FLEN)
NAN_BOXED(3207243199,32,FLEN)
NAN_BOXED(1059759551,32,FLEN)
NAN_BOXED(3207243199,32,FLEN)
NAN_BOXED(1059759551,32,FLEN)
NAN_BOXED(3207243199,32,FLEN)
NAN_BOXED(1049632983,32,FLEN)
NAN_BOXED(3197116631,32,FLEN)
NAN_BOXED(1049632983,32,FLEN)
NAN_BOXED(3197116631,32,FLEN)
NAN_BOXED(1049632983,32,FLEN)
NAN_BOXED(3197116631,32,FLEN)
NAN_BOXED(1049632983,32,FLEN)
NAN_BOXED(3197116631,32,FLEN)
NAN_BOXED(1049632983,32,FLEN)
NAN_BOXED(3197116631,32,FLEN)
NAN_BOXED(1052920020,32,FLEN)
NAN_BOXED(3200403668,32,FLEN)
NAN_BOXED(1052920020,32,FLEN)
NAN_BOXED(3200403668,32,FLEN)
NAN_BOXED(1052920020,32,FLEN)
NAN_BOXED(3200403668,32,FLEN)
NAN_BOXED(1052920020,32,FLEN)
NAN_BOXED(3200403668,32,FLEN)
NAN_BOXED(1052920020,32,FLEN)
NAN_BOXED(3200403668,32,FLEN)
NAN_BOXED(1062604092,32,FLEN)
NAN_BOXED(3210087740,32,FLEN)
NAN_BOXED(1062604092,32,FLEN)
NAN_BOXED(3210087740,32,FLEN)
NAN_BOXED(1062604092,32,FLEN)
NAN_BOXED(3210087740,32,FLEN)
NAN_BOXED(1062604092,32,FLEN)
NAN_BOXED(3210087740,32,FLEN)
NAN_BOXED(1062604092,32,FLEN)
NAN_BOXED(3210087740,32,FLEN)
NAN_BOXED(1060495694,32,FLEN)
NAN_BOXED(3207979342,32,FLEN)
NAN_BOXED(1060495694,32,FLEN)
NAN_BOXED(3207979342,32,FLEN)
NAN_BOXED(1060495694,32,FLEN)
NAN_BOXED(3207979342,32,FLEN)
NAN_BOXED(1060495694,32,FLEN)
NAN_BOXED(3207979342,32,FLEN)
NAN_BOXED(1060495694,32,FLEN)
NAN_BOXED(3207979342,32,FLEN)
NAN_BOXED(1055337744,32,FLEN)
NAN_BOXED(3202821392,32,FLEN)
NAN_BOXED(1055337744,32,FLEN)
NAN_BOXED(3202821392,32,FLEN)
NAN_BOXED(1055337744,32,FLEN)
NAN_BOXED(3202821392,32,FLEN)
NAN_BOXED(1055337744,32,FLEN)
NAN_BOXED(3202821392,32,FLEN)
NAN_BOXED(1055337744,32,FLEN)
NAN_BOXED(3202821392,32,FLEN)
NAN_BOXED(1057332621,32,FLEN)
NAN_BOXED(3204816269,32,FLEN)
NAN_BOXED(1057332621,32,FLEN)
NAN_BOXED(3204816269,32,FLEN)
NAN_BOXED(1057332621,32,FLEN)
NAN_BOXED(3204816269,32,FLEN)
NAN_BOXED(1057332621,32,FLEN)
NAN_BOXED(3204816269,32,FLEN)
NAN_BOXED(1057332621,32,FLEN)
NAN_BOXED(3204816269,32,FLEN)
NAN_BOXED(1064543608,32,FLEN)
NAN_BOXED(3212027256,32,FLEN)
NAN_BOXED(1064543608,32,FLEN)
NAN_BOXED(3212027256,32,FLEN)
NAN_BOXED(1064543608,32,FLEN)
NAN_BOXED(3212027256,32,FLEN)
NAN_BOXED(1064543608,32,FLEN)
NAN_BOXED(3212027256,32,FLEN)
NAN_BOXED(1064543608,32,FLEN)
NAN_BOXED(3212027256,32,FLEN)
NAN_BOXED(1056191170,32,FLEN)
NAN_BOXED(3203674818,32,FLEN)
NAN_BOXED(1056191170,32,FLEN)
NAN_BOXED(3203674818,32,FLEN)
NAN_BOXED(1056191170,32,FLEN)
NAN_BOXED(3203674818,32,FLEN)
NAN_BOXED(1056191170,32,FLEN)
NAN_BOXED(3203674818,32,FLEN)
NAN_BOXED(1056191170,32,FLEN)
NAN_BOXED(3203674818,32,FLEN)
NAN_BOXED(1058589160,32,FLEN)
NAN_BOXED(3206072808,32,FLEN)
NAN_BOXED(1058589160,32,FLEN)
NAN_BOXED(3206072808,32,FLEN)
NAN_BOXED(1058589160,32,FLEN)
NAN_BOXED(3206072808,32,FLEN)
NAN_BOXED(1058589160,32,FLEN)
NAN_BOXED(3206072808,32,FLEN)
NAN_BOXED(1058589160,32,FLEN)
NAN_BOXED(3206072808,32,FLEN)
NAN_BOXED(1058395341,32,FLEN)
NAN_BOXED(3205878989,32,FLEN)
NAN_BOXED(1058395341,32,FLEN)
NAN_BOXED(3205878989,32,FLEN)
NAN_BOXED(1058395341,32,FLEN)
NAN_BOXED(3205878989,32,FLEN)
NAN_BOXED(1058395341,32,FLEN)
NAN_BOXED(3205878989,32,FLEN)
NAN_BOXED(1058395341,32,FLEN)
NAN_BOXED(3205878989,32,FLEN)
NAN_BOXED(1035669951,32,FLEN)
NAN_BOXED(3183153599,32,FLEN)
NAN_BOXED(1035669951,32,FLEN)
NAN_BOXED(3183153599,32,FLEN)
NAN_BOXED(1035669951,32,FLEN)
NAN_BOXED(3183153599,32,FLEN)
NAN_BOXED(1035669951,32,FLEN)
NAN_BOXED(3183153599,32,FLEN)
NAN_BOXED(1035669951,32,FLEN)
NAN_BOXED(3183153599,32,FLEN)
NAN_BOXED(1042479271,32,FLEN)
NAN_BOXED(3189962919,32,FLEN)
NAN_BOXED(1042479271,32,FLEN)
NAN_BOXED(3189962919,32,FLEN)
NAN_BOXED(1042479271,32,FLEN)
NAN_BOXED(3189962919,32,FLEN)
NAN_BOXED(1042479271,32,FLEN)
NAN_BOXED(3189962919,32,FLEN)
NAN_BOXED(1042479271,32,FLEN)
NAN_BOXED(3189962919,32,FLEN)
NAN_BOXED(1059587698,32,FLEN)
NAN_BOXED(3207071346,32,FLEN)
NAN_BOXED(1059587698,32,FLEN)
NAN_BOXED(3207071346,32,FLEN)
NAN_BOXED(1059587698,32,FLEN)
NAN_BOXED(3207071346,32,FLEN)
NAN_BOXED(1059587698,32,FLEN)
NAN_BOXED(3207071346,32,FLEN)
NAN_BOXED(1059587698,32,FLEN)
NAN_BOXED(3207071346,32,FLEN)
NAN_BOXED(1050267301,32,FLEN)
NAN_BOXED(3197750949,32,FLEN)
NAN_BOXED(1050267301,32,FLEN)
NAN_BOXED(3197750949,32,FLEN)
NAN_BOXED(1050267301,32,FLEN)
NAN_BOXED(3197750949,32,FLEN)
NAN_BOXED(1050267301,32,FLEN)
NAN_BOXED(3197750949,32,FLEN)
NAN_BOXED(1050267301,32,FLEN)
NAN_BOXED(3197750949,32,FLEN)
NAN_BOXED(1060288122,32,FLEN)
NAN_BOXED(3207771770,32,FLEN)
NAN_BOXED(1060288122,32,FLEN)
NAN_BOXED(3207771770,32,FLEN)
NAN_BOXED(1060288122,32,FLEN)
NAN_BOXED(3207771770,32,FLEN)
NAN_BOXED(1060288122,32,FLEN)
NAN_BOXED(3207771770,32,FLEN)
NAN_BOXED(1060288122,32,FLEN)
NAN_BOXED(3207771770,32,FLEN)
NAN_BOXED(1037583597,32,FLEN)
NAN_BOXED(3185067245,32,FLEN)
NAN_BOXED(1037583597,32,FLEN)
NAN_BOXED(3185067245,32,FLEN)
NAN_BOXED(1037583597,32,FLEN)
NAN_BOXED(3185067245,32,FLEN)
NAN_BOXED(1037583597,32,FLEN)
NAN_BOXED(3185067245,32,FLEN)
NAN_BOXED(1037583597,32,FLEN)
NAN_BOXED(3185067245,32,FLEN)
NAN_BOXED(1052711850,32,FLEN)
NAN_BOXED(3200195498,32,FLEN)
NAN_BOXED(1052711850,32,FLEN)
NAN_BOXED(3200195498,32,FLEN)
NAN_BOXED(1052711850,32,FLEN)
NAN_BOXED(3200195498,32,FLEN)
NAN_BOXED(1052711850,32,FLEN)
NAN_BOXED(3200195498,32,FLEN)
NAN_BOXED(1052711850,32,FLEN)
NAN_BOXED(3200195498,32,FLEN)
NAN_BOXED(1020290676,32,FLEN)
NAN_BOXED(3167774324,32,FLEN)
NAN_BOXED(1020290676,32,FLEN)
NAN_BOXED(3167774324,32,FLEN)
NAN_BOXED(1020290676,32,FLEN)
NAN_BOXED(3167774324,32,FLEN)
NAN_BOXED(1020290676,32,FLEN)
NAN_BOXED(3167774324,32,FLEN)
NAN_BOXED(1020290676,32,FLEN)
NAN_BOXED(3167774324,32,FLEN)
NAN_BOXED(1064248693,32,FLEN)
NAN_BOXED(3211732341,32,FLEN)
NAN_BOXED(1064248693,32,FLEN)
NAN_BOXED(3211732341,32,FLEN)
NAN_BOXED(1064248693,32,FLEN)
NAN_BOXED(3211732341,32,FLEN)
NAN_BOXED(1064248693,32,FLEN)
NAN_BOXED(3211732341,32,FLEN)
NAN_BOXED(1064248693,32,FLEN)
NAN_BOXED(3211732341,32,FLEN)
NAN_BOXED(1048580376,32,FLEN)
NAN_BOXED(3196064024,32,FLEN)
NAN_BOXED(1048580376,32,FLEN)
NAN_BOXED(3196064024,32,FLEN)
NAN_BOXED(1048580376,32,FLEN)
NAN_BOXED(3196064024,32,FLEN)
NAN_BOXED(1048580376,32,FLEN)
NAN_BOXED(3196064024,32,FLEN)
NAN_BOXED(1048580376,32,FLEN)
NAN_BOXED(3196064024,32,FLEN)
NAN_BOXED(1065221497,32,FLEN)
NAN_BOXED(3212705145,32,FLEN)
NAN_BOXED(1065221497,32,FLEN)
NAN_BOXED(3212705145,32,FLEN)
NAN_BOXED(1065221497,32,FLEN)
NAN_BOXED(3212705145,32,FLEN)
NAN_BOXED(1065221497,32,FLEN)
NAN_BOXED(3212705145,32,FLEN)
NAN_BOXED(1065221497,32,FLEN)
NAN_BOXED(3212705145,32,FLEN)
NAN_BOXED(1056326948,32,FLEN)
NAN_BOXED(3203810596,32,FLEN)
NAN_BOXED(1056326948,32,FLEN)
NAN_BOXED(3203810596,32,FLEN)
NAN_BOXED(1056326948,32,FLEN)
NAN_BOXED(3203810596,32,FLEN)
NAN_BOXED(1056326948,32,FLEN)
NAN_BOXED(3203810596,32,FLEN)
NAN_BOXED(1056326948,32,FLEN)
NAN_BOXED(3203810596,32,FLEN)
NAN_BOXED(1057155552,32,FLEN)
NAN_BOXED(3204639200,32,FLEN)
NAN_BOXED(1057155552,32,FLEN)
NAN_BOXED(3204639200,32,FLEN)
NAN_BOXED(1057155552,32,FLEN)
NAN_BOXED(3204639200,32,FLEN)
NAN_BOXED(1057155552,32,FLEN)
NAN_BOXED(3204639200,32,FLEN)
NAN_BOXED(1057155552,32,FLEN)
NAN_BOXED(3204639200,32,FLEN)
NAN_BOXED(1050948212,32,FLEN)
NAN_BOXED(3198431860,32,FLEN)
NAN_BOXED(1050948212,32,FLEN)
NAN_BOXED(3198431860,32,FLEN)
NAN_BOXED(1050948212,32,FLEN)
NAN_BOXED(3198431860,32,FLEN)
NAN_BOXED(1050948212,32,FLEN)
NAN_BOXED(3198431860,32,FLEN)
NAN_BOXED(1050948212,32,FLEN)
NAN_BOXED(3198431860,32,FLEN)
NAN_BOXED(1059173639,32,FLEN)
NAN_BOXED(3206657287,32,FLEN)
NAN_BOXED(1059173639,32,FLEN)
NAN_BOXED(3206657287,32,FLEN)
NAN_BOXED(1059173639,32,FLEN)
NAN_BOXED(3206657287,32,FLEN)
NAN_BOXED(1059173639,32,FLEN)
NAN_BOXED(3206657287,32,FLEN)
NAN_BOXED(1059173639,32,FLEN)
NAN_BOXED(3206657287,32,FLEN)
NAN_BOXED(1060975762,32,FLEN)
NAN_BOXED(3208459410,32,FLEN)
NAN_BOXED(1060975762,32,FLEN)
NAN_BOXED(3208459410,32,FLEN)
NAN_BOXED(1060975762,32,FLEN)
NAN_BOXED(3208459410,32,FLEN)
NAN_BOXED(1060975762,32,FLEN)
NAN_BOXED(3208459410,32,FLEN)
NAN_BOXED(1060975762,32,FLEN)
NAN_BOXED(3208459410,32,FLEN)
NAN_BOXED(1058118527,32,FLEN)
NAN_BOXED(3205602175,32,FLEN)
NAN_BOXED(1058118527,32,FLEN)
NAN_BOXED(3205602175,32,FLEN)
NAN_BOXED(1058118527,32,FLEN)
NAN_BOXED(3205602175,32,FLEN)
NAN_BOXED(1058118527,32,FLEN)
NAN_BOXED(3205602175,32,FLEN)
NAN_BOXED(1058118527,32,FLEN)
NAN_BOXED(3205602175,32,FLEN)
NAN_BOXED(1064281857,32,FLEN)
NAN_BOXED(3211765505,32,FLEN)
NAN_BOXED(1064281857,32,FLEN)
NAN_BOXED(3211765505,32,FLEN)
NAN_BOXED(1064281857,32,FLEN)
NAN_BOXED(3211765505,32,FLEN)
NAN_BOXED(1064281857,32,FLEN)
NAN_BOXED(3211765505,32,FLEN)
NAN_BOXED(1064281857,32,FLEN)
NAN_BOXED(3211765505,32,FLEN)
NAN_BOXED(1050186473,32,FLEN)
NAN_BOXED(3197670121,32,FLEN)
NAN_BOXED(1050186473,32,FLEN)
NAN_BOXED(3197670121,32,FLEN)
NAN_BOXED(1050186473,32,FLEN)
NAN_BOXED(3197670121,32,FLEN)
NAN_BOXED(1050186473,32,FLEN)
NAN_BOXED(3197670121,32,FLEN)
NAN_BOXED(1050186473,32,FLEN)
NAN_BOXED(3197670121,32,FLEN)
NAN_BOXED(1057776427,32,FLEN)
NAN_BOXED(3205260075,32,FLEN)
NAN_BOXED(1057776427,32,FLEN)
NAN_BOXED(3205260075,32,FLEN)
NAN_BOXED(1057776427,32,FLEN)
NAN_BOXED(3205260075,32,FLEN)
NAN_BOXED(1057776427,32,FLEN)
NAN_BOXED(3205260075,32,FLEN)
NAN_BOXED(1057776427,32,FLEN)
NAN_BOXED(3205260075,32,FLEN)
NAN_BOXED(1063358232,32,FLEN)
NAN_BOXED(3210841880,32,FLEN)
NAN_BOXED(1063358232,32,FLEN)
NAN_BOXED(3210841880,32,FLEN)
NAN_BOXED(1063358232,32,FLEN)
NAN_BOXED(3210841880,32,FLEN)
NAN_BOXED(1063358232,32,FLEN)
NAN_BOXED(3210841880,32,FLEN)
NAN_BOXED(1063358232,32,FLEN)
NAN_BOXED(3210841880,32,FLEN)
NAN_BOXED(1061876440,32,FLEN)
NAN_BOXED(3209360088,32,FLEN)
NAN_BOXED(1061876440,32,FLEN)
NAN_BOXED(3209360088,32,FLEN)
NAN_BOXED(1061876440,32,FLEN)
NAN_BOXED(3209360088,32,FLEN)
NAN_BOXED(1061876440,32,FLEN)
NAN_BOXED(3209360088,32,FLEN)
NAN_BOXED(1061876440,32,FLEN)
NAN_BOXED(3209360088,32,FLEN)
NAN_BOXED(1028990586,32,FLEN)
NAN_BOXED(3176474234,32,FLEN)
NAN_BOXED(1028990586,32,FLEN)
NAN_BOXED(3176474234,32,FLEN)
NAN_BOXED(1028990586,32,FLEN)
NAN_BOXED(3176474234,32,FLEN)
NAN_BOXED(1028990586,32,FLEN)
NAN_BOXED(3176474234,32,FLEN)
NAN_BOXED(1028990586,32,FLEN)
NAN_BOXED(3176474234,32,FLEN)
NAN_BOXED(1062897795,32,FLEN)
NAN_BOXED(3210381443,32,FLEN)
NAN_BOXED(1062897795,32,FLEN)
NAN_BOXED(3210381443,32,FLEN)
NAN_BOXED(1062897795,32,FLEN)
NAN_BOXED(3210381443,32,FLEN)
NAN_BOXED(1062897795,32,FLEN)
NAN_BOXED(3210381443,32,FLEN)
NAN_BOXED(1062897795,32,FLEN)
NAN_BOXED(3210381443,32,FLEN)
NAN_BOXED(1059010892,32,FLEN)
NAN_BOXED(3206494540,32,FLEN)
NAN_BOXED(1059010892,32,FLEN)
NAN_BOXED(3206494540,32,FLEN)
NAN_BOXED(1059010892,32,FLEN)
NAN_BOXED(3206494540,32,FLEN)
NAN_BOXED(1059010892,32,FLEN)
NAN_BOXED(3206494540,32,FLEN)
NAN_BOXED(1059010892,32,FLEN)
NAN_BOXED(3206494540,32,FLEN)
NAN_BOXED(1062814246,32,FLEN)
NAN_BOXED(3210297894,32,FLEN)
NAN_BOXED(1062814246,32,FLEN)
NAN_BOXED(3210297894,32,FLEN)
NAN_BOXED(1062814246,32,FLEN)
NAN_BOXED(3210297894,32,FLEN)
NAN_BOXED(1062814246,32,FLEN)
NAN_BOXED(3210297894,32,FLEN)
NAN_BOXED(1062814246,32,FLEN)
NAN_BOXED(3210297894,32,FLEN)
NAN_BOXED(1015765558,32,FLEN)
NAN_BOXED(3163249206,32,FLEN)
NAN_BOXED(1015765558,32,FLEN)
NAN_BOXED(3163249206,32,FLEN)
NAN_BOXED(1015765558,32,FLEN)
NAN_BOXED(3163249206,32,FLEN)
NAN_BOXED(1015765558,32,FLEN)
NAN_BOXED(3163249206,32,FLEN)
NAN_BOXED(1015765558,32,FLEN)
NAN_BOXED(3163249206,32,FLEN)
NAN_BOXED(1058543228,32,FLEN)
NAN_BOXED(3206026876,32,FLEN)
NAN_BOXED(1058543228,32,FLEN)
NAN_BOXED(3206026876,32,FLEN)
NAN_BOXED(1058543228,32,FLEN)
NAN_BOXED(3206026876,32,FLEN)
NAN_BOXED(1058543228,32,FLEN)
NAN_BOXED(3206026876,32,FLEN)
NAN_BOXED(1058543228,32,FLEN)
NAN_BOXED(3206026876,32,FLEN)
NAN_BOXED(1039830831,32,FLEN)
NAN_BOXED(3187314479,32,FLEN)
NAN_BOXED(1039830831,32,FLEN)
NAN_BOXED(3187314479,32,FLEN)
NAN_BOXED(1039830831,32,FLEN)
NAN_BOXED(3187314479,32,FLEN)
NAN_BOXED(1039830831,32,FLEN)
NAN_BOXED(3187314479,32,FLEN)
NAN_BOXED(1039830831,32,FLEN)
NAN_BOXED(3187314479,32,FLEN)
NAN_BOXED(1034543983,32,FLEN)
NAN_BOXED(3182027631,32,FLEN)
NAN_BOXED(1034543983,32,FLEN)
NAN_BOXED(3182027631,32,FLEN)
NAN_BOXED(1034543983,32,FLEN)
NAN_BOXED(3182027631,32,FLEN)
NAN_BOXED(1034543983,32,FLEN)
NAN_BOXED(3182027631,32,FLEN)
NAN_BOXED(1034543983,32,FLEN)
NAN_BOXED(3182027631,32,FLEN)
NAN_BOXED(1056990765,32,FLEN)
NAN_BOXED(3204474413,32,FLEN)
NAN_BOXED(1056990765,32,FLEN)
NAN_BOXED(3204474413,32,FLEN)
NAN_BOXED(1056990765,32,FLEN)
NAN_BOXED(3204474413,32,FLEN)
NAN_BOXED(1056990765,32,FLEN)
NAN_BOXED(3204474413,32,FLEN)
NAN_BOXED(1056990765,32,FLEN)
NAN_BOXED(3204474413,32,FLEN)
NAN_BOXED(1051258067,32,FLEN)
NAN_BOXED(3198741715,32,FLEN)
NAN_BOXED(1051258067,32,FLEN)
NAN_BOXED(3198741715,32,FLEN)
NAN_BOXED(1051258067,32,FLEN)
NAN_BOXED(3198741715,32,FLEN)
NAN_BOXED(1051258067,32,FLEN)
NAN_BOXED(3198741715,32,FLEN)
NAN_BOXED(1051258067,32,FLEN)
NAN_BOXED(3198741715,32,FLEN)
NAN_BOXED(1053281317,32,FLEN)
NAN_BOXED(3200764965,32,FLEN)
NAN_BOXED(1053281317,32,FLEN)
NAN_BOXED(3200764965,32,FLEN)
NAN_BOXED(1053281317,32,FLEN)
NAN_BOXED(3200764965,32,FLEN)
NAN_BOXED(1053281317,32,FLEN)
NAN_BOXED(3200764965,32,FLEN)
NAN_BOXED(1053281317,32,FLEN)
NAN_BOXED(3200764965,32,FLEN)
NAN_BOXED(1059645266,32,FLEN)
NAN_BOXED(3207128914,32,FLEN)
NAN_BOXED(1059645266,32,FLEN)
NAN_BOXED(3207128914,32,FLEN)
NAN_BOXED(1059645266,32,FLEN)
NAN_BOXED(3207128914,32,FLEN)
NAN_BOXED(1059645266,32,FLEN)
NAN_BOXED(3207128914,32,FLEN)
NAN_BOXED(1059645266,32,FLEN)
NAN_BOXED(3207128914,32,FLEN)
NAN_BOXED(1036965087,32,FLEN)
NAN_BOXED(3184448735,32,FLEN)
NAN_BOXED(1036965087,32,FLEN)
NAN_BOXED(3184448735,32,FLEN)
NAN_BOXED(1036965087,32,FLEN)
NAN_BOXED(3184448735,32,FLEN)
NAN_BOXED(1036965087,32,FLEN)
NAN_BOXED(3184448735,32,FLEN)
NAN_BOXED(1036965087,32,FLEN)
NAN_BOXED(3184448735,32,FLEN)
NAN_BOXED(1064758157,32,FLEN)
NAN_BOXED(3212241805,32,FLEN)
NAN_BOXED(1064758157,32,FLEN)
NAN_BOXED(3212241805,32,FLEN)
NAN_BOXED(1064758157,32,FLEN)
NAN_BOXED(3212241805,32,FLEN)
NAN_BOXED(1064758157,32,FLEN)
NAN_BOXED(3212241805,32,FLEN)
NAN_BOXED(1064758157,32,FLEN)
NAN_BOXED(3212241805,32,FLEN)
NAN_BOXED(1061043452,32,FLEN)
NAN_BOXED(3208527100,32,FLEN)
NAN_BOXED(1061043452,32,FLEN)
NAN_BOXED(3208527100,32,FLEN)
NAN_BOXED(1061043452,32,FLEN)
NAN_BOXED(3208527100,32,FLEN)
NAN_BOXED(1061043452,32,FLEN)
NAN_BOXED(3208527100,32,FLEN)
NAN_BOXED(1061043452,32,FLEN)
NAN_BOXED(3208527100,32,FLEN)
NAN_BOXED(1042379615,32,FLEN)
NAN_BOXED(3189863263,32,FLEN)
NAN_BOXED(1042379615,32,FLEN)
NAN_BOXED(3189863263,32,FLEN)
NAN_BOXED(1042379615,32,FLEN)
NAN_BOXED(3189863263,32,FLEN)
NAN_BOXED(1042379615,32,FLEN)
NAN_BOXED(3189863263,32,FLEN)
NAN_BOXED(1042379615,32,FLEN)
NAN_BOXED(3189863263,32,FLEN)
NAN_BOXED(1049645324,32,FLEN)
NAN_BOXED(3197128972,32,FLEN)
NAN_BOXED(1049645324,32,FLEN)
NAN_BOXED(3197128972,32,FLEN)
NAN_BOXED(1049645324,32,FLEN)
NAN_BOXED(3197128972,32,FLEN)
NAN_BOXED(1049645324,32,FLEN)
NAN_BOXED(3197128972,32,FLEN)
NAN_BOXED(1049645324,32,FLEN)
NAN_BOXED(3197128972,32,FLEN)
NAN_BOXED(1064239894,32,FLEN)
NAN_BOXED(3211723542,32,FLEN)
NAN_BOXED(1064239894,32,FLEN)
NAN_BOXED(3211723542,32,FLEN)
NAN_BOXED(1064239894,32,FLEN)
NAN_BOXED(3211723542,32,FLEN)
NAN_BOXED(1064239894,32,FLEN)
NAN_BOXED(3211723542,32,FLEN)
NAN_BOXED(1064239894,32,FLEN)
NAN_BOXED(3211723542,32,FLEN)
NAN_BOXED(1040597070,32,FLEN)
NAN_BOXED(3188080718,32,FLEN)
NAN_BOXED(1040597070,32,FLEN)
NAN_BOXED(3188080718,32,FLEN)
NAN_BOXED(1040597070,32,FLEN)
NAN_BOXED(3188080718,32,FLEN)
NAN_BOXED(1040597070,32,FLEN)
NAN_BOXED(3188080718,32,FLEN)
NAN_BOXED(1040597070,32,FLEN)
NAN_BOXED(3188080718,32,FLEN)
NAN_BOXED(1061576821,32,FLEN)
NAN_BOXED(3209060469,32,FLEN)
NAN_BOXED(1061576821,32,FLEN)
NAN_BOXED(3209060469,32,FLEN)
NAN_BOXED(1061576821,32,FLEN)
NAN_BOXED(3209060469,32,FLEN)
NAN_BOXED(1061576821,32,FLEN)
NAN_BOXED(3209060469,32,FLEN)
NAN_BOXED(1061576821,32,FLEN)
NAN_BOXED(3209060469,32,FLEN)
NAN_BOXED(1065096773,32,FLEN)
NAN_BOXED(3212580421,32,FLEN)
NAN_BOXED(1065096773,32,FLEN)
NAN_BOXED(3212580421,32,FLEN)
NAN_BOXED(1065096773,32,FLEN)
NAN_BOXED(3212580421,32,FLEN)
NAN_BOXED(1065096773,32,FLEN)
NAN_BOXED(3212580421,32,FLEN)
NAN_BOXED(1065096773,32,FLEN)
NAN_BOXED(3212580421,32,FLEN)
NAN_BOXED(1059806762,32,FLEN)
NAN_BOXED(3207290410,32,FLEN)
NAN_BOXED(1059806762,32,FLEN)
NAN_BOXED(3207290410,32,FLEN)
NAN_BOXED(1059806762,32,FLEN)
NAN_BOXED(3207290410,32,FLEN)
NAN_BOXED(1059806762,32,FLEN)
NAN_BOXED(3207290410,32,FLEN)
NAN_BOXED(1059806762,32,FLEN)
NAN_BOXED(3207290410,32,FLEN)
NAN_BOXED(1062856439,32,FLEN)
NAN_BOXED(3210340087,32,FLEN)
NAN_BOXED(1062856439,32,FLEN)
NAN_BOXED(3210340087,32,FLEN)
NAN_BOXED(1062856439,32,FLEN)
NAN_BOXED(3210340087,32,FLEN)
NAN_BOXED(1062856439,32,FLEN)
NAN_BOXED(3210340087,32,FLEN)
NAN_BOXED(1062856439,32,FLEN)
NAN_BOXED(3210340087,32,FLEN)
NAN_BOXED(1023450905,32,FLEN)
NAN_BOXED(3170934553,32,FLEN)
NAN_BOXED(1023450905,32,FLEN)
NAN_BOXED(3170934553,32,FLEN)
NAN_BOXED(1023450905,32,FLEN)
NAN_BOXED(3170934553,32,FLEN)
NAN_BOXED(1023450905,32,FLEN)
NAN_BOXED(3170934553,32,FLEN)
NAN_BOXED(1023450905,32,FLEN)
NAN_BOXED(3170934553,32,FLEN)
NAN_BOXED(1036685587,32,FLEN)
NAN_BOXED(3184169235,32,FLEN)
NAN_BOXED(1036685587,32,FLEN)
NAN_BOXED(3184169235,32,FLEN)
NAN_BOXED(1036685587,32,FLEN)
NAN_BOXED(3184169235,32,FLEN)
NAN_BOXED(1036685587,32,FLEN)
NAN_BOXED(3184169235,32,FLEN)
NAN_BOXED(1036685587,32,FLEN)
NAN_BOXED(3184169235,32,FLEN)
NAN_BOXED(1054485858,32,FLEN)
NAN_BOXED(3201969506,32,FLEN)
NAN_BOXED(1054485858,32,FLEN)
NAN_BOXED(3201969506,32,FLEN)
NAN_BOXED(1054485858,32,FLEN)
NAN_BOXED(3201969506,32,FLEN)
NAN_BOXED(1054485858,32,FLEN)
NAN_BOXED(3201969506,32,FLEN)
NAN_BOXED(1054485858,32,FLEN)
NAN_BOXED(3201969506,32,FLEN)
NAN_BOXED(1044877631,32,FLEN)
NAN_BOXED(3192361279,32,FLEN)
NAN_BOXED(1044877631,32,FLEN)
NAN_BOXED(3192361279,32,FLEN)
NAN_BOXED(1044877631,32,FLEN)
NAN_BOXED(3192361279,32,FLEN)
NAN_BOXED(1044877631,32,FLEN)
NAN_BOXED(3192361279,32,FLEN)
NAN_BOXED(1044877631,32,FLEN)
NAN_BOXED(3192361279,32,FLEN)
NAN_BOXED(1008409935,32,FLEN)
NAN_BOXED(3155893583,32,FLEN)
NAN_BOXED(1008409935,32,FLEN)
NAN_BOXED(3155893583,32,FLEN)
NAN_BOXED(1008409935,32,FLEN)
NAN_BOXED(3155893583,32,FLEN)
NAN_BOXED(1008409935,32,FLEN)
NAN_BOXED(3155893583,32,FLEN)
NAN_BOXED(1008409935,32,FLEN)
NAN_BOXED(3155893583,32,FLEN)
NAN_BOXED(1036056073,32,FLEN)
NAN_BOXED(3183539721,32,FLEN)
NAN_BOXED(1036056073,32,FLEN)
NAN_BOXED(3183539721,32,FLEN)
NAN_BOXED(1036056073,32,FLEN)
NAN_BOXED(3183539721,32,FLEN)
NAN_BOXED(1036056073,32,FLEN)
NAN_BOXED(3183539721,32,FLEN)
NAN_BOXED(1036056073,32,FLEN)
NAN_BOXED(3183539721,32,FLEN)
NAN_BOXED(1055776234,32,FLEN)
NAN_BOXED(3203259882,32,FLEN)
NAN_BOXED(1055776234,32,FLEN)
NAN_BOXED(3203259882,32,FLEN)
NAN_BOXED(1055776234,32,FLEN)
NAN_BOXED(3203259882,32,FLEN)
NAN_BOXED(1055776234,32,FLEN)
NAN_BOXED(3203259882,32,FLEN)
NAN_BOXED(1055776234,32,FLEN)
NAN_BOXED(3203259882,32,FLEN)
NAN_BOXED(1043496086,32,FLEN)
NAN_BOXED(3190979734,32,FLEN)
NAN_BOXED(1043496086,32,FLEN)
NAN_BOXED(3190979734,32,FLEN)
NAN_BOXED(1043496086,32,FLEN)
NAN_BOXED(3190979734,32,FLEN)
NAN_BOXED(1043496086,32,FLEN)
NAN_BOXED(3190979734,32,FLEN)
NAN_BOXED(1043496086,32,FLEN)
NAN_BOXED(3190979734,32,FLEN)
NAN_BOXED(1045821838,32,FLEN)
NAN_BOXED(3193305486,32,FLEN)
NAN_BOXED(1045821838,32,FLEN)
NAN_BOXED(3193305486,32,FLEN)
NAN_BOXED(1045821838,32,FLEN)
NAN_BOXED(3193305486,32,FLEN)
NAN_BOXED(1045821838,32,FLEN)
NAN_BOXED(3193305486,32,FLEN)
NAN_BOXED(1045821838,32,FLEN)
NAN_BOXED(3193305486,32,FLEN)
NAN_BOXED(1054065892,32,FLEN)
NAN_BOXED(3201549540,32,FLEN)
NAN_BOXED(1054065892,32,FLEN)
NAN_BOXED(3201549540,32,FLEN)
NAN_BOXED(1054065892,32,FLEN)
NAN_BOXED(3201549540,32,FLEN)
NAN_BOXED(1054065892,32,FLEN)
NAN_BOXED(3201549540,32,FLEN)
NAN_BOXED(1054065892,32,FLEN)
NAN_BOXED(3201549540,32,FLEN)
NAN_BOXED(1045350783,32,FLEN)
NAN_BOXED(3192834431,32,FLEN)
NAN_BOXED(1045350783,32,FLEN)
NAN_BOXED(3192834431,32,FLEN)
NAN_BOXED(1045350783,32,FLEN)
NAN_BOXED(3192834431,32,FLEN)
NAN_BOXED(1045350783,32,FLEN)
NAN_BOXED(3192834431,32,FLEN)
NAN_BOXED(1045350783,32,FLEN)
NAN_BOXED(3192834431,32,FLEN)
NAN_BOXED(1065349177,32,FLEN)
NAN_BOXED(3212832825,32,FLEN)
NAN_BOXED(1065349177,32,FLEN)
NAN_BOXED(3212832825,32,FLEN)
NAN_BOXED(1065349177,32,FLEN)
NAN_BOXED(3212832825,32,FLEN)
NAN_BOXED(1065349177,32,FLEN)
NAN_BOXED(3212832825,32,FLEN)
NAN_BOXED(1065349177,32,FLEN)
NAN_BOXED(3212832825,32,FLEN)
NAN_BOXED(1056734498,32,FLEN)
NAN_BOXED(3204218146,32,FLEN)
NAN_BOXED(1056734498,32,FLEN)
NAN_BOXED(3204218146,32,FLEN)
NAN_BOXED(1056734498,32,FLEN)
NAN_BOXED(3204218146,32,FLEN)
NAN_BOXED(1056734498,32,FLEN)
NAN_BOXED(3204218146,32,FLEN)
NAN_BOXED(1056734498,32,FLEN)
NAN_BOXED(3204218146,32,FLEN)
NAN_BOXED(1064252280,32,FLEN)
NAN_BOXED(3211735928,32,FLEN)
NAN_BOXED(1064252280,32,FLEN)
NAN_BOXED(3211735928,32,FLEN)
NAN_BOXED(1064252280,32,FLEN)
NAN_BOXED(3211735928,32,FLEN)
NAN_BOXED(1064252280,32,FLEN)
NAN_BOXED(3211735928,32,FLEN)
NAN_BOXED(1064252280,32,FLEN)
NAN_BOXED(3211735928,32,FLEN)
NAN_BOXED(1030336610,32,FLEN)
NAN_BOXED(3177820258,32,FLEN)
NAN_BOXED(1030336610,32,FLEN)
NAN_BOXED(3177820258,32,FLEN)
NAN_BOXED(1030336610,32,FLEN)
NAN_BOXED(3177820258,32,FLEN)
NAN_BOXED(1030336610,32,FLEN)
NAN_BOXED(3177820258,32,FLEN)
NAN_BOXED(1030336610,32,FLEN)
NAN_BOXED(3177820258,32,FLEN)
NAN_BOXED(1058506884,32,FLEN)
NAN_BOXED(3205990532,32,FLEN)
NAN_BOXED(1058506884,32,FLEN)
NAN_BOXED(3205990532,32,FLEN)
NAN_BOXED(1058506884,32,FLEN)
NAN_BOXED(3205990532,32,FLEN)
NAN_BOXED(1058506884,32,FLEN)
NAN_BOXED(3205990532,32,FLEN)
NAN_BOXED(1058506884,32,FLEN)
NAN_BOXED(3205990532,32,FLEN)
NAN_BOXED(1064308687,32,FLEN)
NAN_BOXED(3211792335,32,FLEN)
NAN_BOXED(1064308687,32,FLEN)
NAN_BOXED(3211792335,32,FLEN)
NAN_BOXED(1064308687,32,FLEN)
NAN_BOXED(3211792335,32,FLEN)
NAN_BOXED(1064308687,32,FLEN)
NAN_BOXED(3211792335,32,FLEN)
NAN_BOXED(1064308687,32,FLEN)
NAN_BOXED(3211792335,32,FLEN)
NAN_BOXED(1063217127,32,FLEN)
NAN_BOXED(3210700775,32,FLEN)
NAN_BOXED(1063217127,32,FLEN)
NAN_BOXED(3210700775,32,FLEN)
NAN_BOXED(1063217127,32,FLEN)
NAN_BOXED(3210700775,32,FLEN)
NAN_BOXED(1063217127,32,FLEN)
NAN_BOXED(3210700775,32,FLEN)
NAN_BOXED(1063217127,32,FLEN)
NAN_BOXED(3210700775,32,FLEN)
NAN_BOXED(1043211271,32,FLEN)
NAN_BOXED(3190694919,32,FLEN)
NAN_BOXED(1043211271,32,FLEN)
NAN_BOXED(3190694919,32,FLEN)
NAN_BOXED(1043211271,32,FLEN)
NAN_BOXED(3190694919,32,FLEN)
NAN_BOXED(1043211271,32,FLEN)
NAN_BOXED(3190694919,32,FLEN)
NAN_BOXED(1043211271,32,FLEN)
NAN_BOXED(3190694919,32,FLEN)
NAN_BOXED(1064750346,32,FLEN)
NAN_BOXED(3212233994,32,FLEN)
NAN_BOXED(1064750346,32,FLEN)
NAN_BOXED(3212233994,32,FLEN)
NAN_BOXED(1064750346,32,FLEN)
NAN_BOXED(3212233994,32,FLEN)
NAN_BOXED(1064750346,32,FLEN)
NAN_BOXED(3212233994,32,FLEN)
NAN_BOXED(1064750346,32,FLEN)
NAN_BOXED(3212233994,32,FLEN)
NAN_BOXED(1057101661,32,FLEN)
NAN_BOXED(3204585309,32,FLEN)
NAN_BOXED(1057101661,32,FLEN)
NAN_BOXED(3204585309,32,FLEN)
NAN_BOXED(1057101661,32,FLEN)
NAN_BOXED(3204585309,32,FLEN)
NAN_BOXED(1057101661,32,FLEN)
NAN_BOXED(3204585309,32,FLEN)
NAN_BOXED(1057101661,32,FLEN)
NAN_BOXED(3204585309,32,FLEN)
NAN_BOXED(1049676962,32,FLEN)
NAN_BOXED(3197160610,32,FLEN)
NAN_BOXED(1049676962,32,FLEN)
NAN_BOXED(3197160610,32,FLEN)
NAN_BOXED(1049676962,32,FLEN)
NAN_BOXED(3197160610,32,FLEN)
NAN_BOXED(1049676962,32,FLEN)
NAN_BOXED(3197160610,32,FLEN)
NAN_BOXED(1049676962,32,FLEN)
NAN_BOXED(3197160610,32,FLEN)
NAN_BOXED(1062813585,32,FLEN)
NAN_BOXED(3210297233,32,FLEN)
NAN_BOXED(1062813585,32,FLEN)
NAN_BOXED(3210297233,32,FLEN)
NAN_BOXED(1062813585,32,FLEN)
NAN_BOXED(3210297233,32,FLEN)
NAN_BOXED(1062813585,32,FLEN)
NAN_BOXED(3210297233,32,FLEN)
NAN_BOXED(1062813585,32,FLEN)
NAN_BOXED(3210297233,32,FLEN)
NAN_BOXED(1058455428,32,FLEN)
NAN_BOXED(3205939076,32,FLEN)
NAN_BOXED(1058455428,32,FLEN)
NAN_BOXED(3205939076,32,FLEN)
NAN_BOXED(1058455428,32,FLEN)
NAN_BOXED(3205939076,32,FLEN)
NAN_BOXED(1058455428,32,FLEN)
NAN_BOXED(3205939076,32,FLEN)
NAN_BOXED(1058455428,32,FLEN)
NAN_BOXED(3205939076,32,FLEN)
NAN_BOXED(1058865751,32,FLEN)
NAN_BOXED(3206349399,32,FLEN)
NAN_BOXED(1058865751,32,FLEN)
NAN_BOXED(3206349399,32,FLEN)
NAN_BOXED(1058865751,32,FLEN)
NAN_BOXED(3206349399,32,FLEN)
NAN_BOXED(1058865751,32,FLEN)
NAN_BOXED(3206349399,32,FLEN)
NAN_BOXED(1058865751,32,FLEN)
NAN_BOXED(3206349399,32,FLEN)
NAN_BOXED(1057453006,32,FLEN)
NAN_BOXED(3204936654,32,FLEN)
NAN_BOXED(1057453006,32,FLEN)
NAN_BOXED(3204936654,32,FLEN)
NAN_BOXED(1057453006,32,FLEN)
NAN_BOXED(3204936654,32,FLEN)
NAN_BOXED(1057453006,32,FLEN)
NAN_BOXED(3204936654,32,FLEN)
NAN_BOXED(1057453006,32,FLEN)
NAN_BOXED(3204936654,32,FLEN)
NAN_BOXED(1064808535,32,FLEN)
NAN_BOXED(3212292183,32,FLEN)
NAN_BOXED(1064808535,32,FLEN)
NAN_BOXED(3212292183,32,FLEN)
NAN_BOXED(1064808535,32,FLEN)
NAN_BOXED(3212292183,32,FLEN)
NAN_BOXED(1064808535,32,FLEN)
NAN_BOXED(3212292183,32,FLEN)
NAN_BOXED(1064808535,32,FLEN)
NAN_BOXED(3212292183,32,FLEN)
NAN_BOXED(1052603662,32,FLEN)
NAN_BOXED(3200087310,32,FLEN)
NAN_BOXED(1052603662,32,FLEN)
NAN_BOXED(3200087310,32,FLEN)
NAN_BOXED(1052603662,32,FLEN)
NAN_BOXED(3200087310,32,FLEN)
NAN_BOXED(1052603662,32,FLEN)
NAN_BOXED(3200087310,32,FLEN)
NAN_BOXED(1052603662,32,FLEN)
NAN_BOXED(3200087310,32,FLEN)
NAN_BOXED(1055315616,32,FLEN)
NAN_BOXED(3202799264,32,FLEN)
NAN_BOXED(1055315616,32,FLEN)
NAN_BOXED(3202799264,32,FLEN)
NAN_BOXED(1055315616,32,FLEN)
NAN_BOXED(3202799264,32,FLEN)
NAN_BOXED(1055315616,32,FLEN)
NAN_BOXED(3202799264,32,FLEN)
NAN_BOXED(1055315616,32,FLEN)
NAN_BOXED(3202799264,32,FLEN)
NAN_BOXED(1058920595,32,FLEN)
NAN_BOXED(3206404243,32,FLEN)
NAN_BOXED(1058920595,32,FLEN)
NAN_BOXED(3206404243,32,FLEN)
NAN_BOXED(1058920595,32,FLEN)
NAN_BOXED(3206404243,32,FLEN)
NAN_BOXED(1058920595,32,FLEN)
NAN_BOXED(3206404243,32,FLEN)
NAN_BOXED(1058920595,32,FLEN)
NAN_BOXED(3206404243,32,FLEN)
NAN_BOXED(1057127016,32,FLEN)
NAN_BOXED(3204610664,32,FLEN)
NAN_BOXED(1057127016,32,FLEN)
NAN_BOXED(3204610664,32,FLEN)
NAN_BOXED(1057127016,32,FLEN)
NAN_BOXED(3204610664,32,FLEN)
NAN_BOXED(1057127016,32,FLEN)
NAN_BOXED(3204610664,32,FLEN)
NAN_BOXED(1057127016,32,FLEN)
NAN_BOXED(3204610664,32,FLEN)
NAN_BOXED(1053269602,32,FLEN)
NAN_BOXED(3200753250,32,FLEN)
NAN_BOXED(1053269602,32,FLEN)
NAN_BOXED(3200753250,32,FLEN)
NAN_BOXED(1053269602,32,FLEN)
NAN_BOXED(3200753250,32,FLEN)
NAN_BOXED(1053269602,32,FLEN)
NAN_BOXED(3200753250,32,FLEN)
NAN_BOXED(1053269602,32,FLEN)
NAN_BOXED(3200753250,32,FLEN)
NAN_BOXED(1052524932,32,FLEN)
NAN_BOXED(3200008580,32,FLEN)
NAN_BOXED(1052524932,32,FLEN)
NAN_BOXED(3200008580,32,FLEN)
NAN_BOXED(1052524932,32,FLEN)
NAN_BOXED(3200008580,32,FLEN)
NAN_BOXED(1052524932,32,FLEN)
NAN_BOXED(3200008580,32,FLEN)
NAN_BOXED(1052524932,32,FLEN)
NAN_BOXED(3200008580,32,FLEN)
NAN_BOXED(1063267408,32,FLEN)
NAN_BOXED(3210751056,32,FLEN)
NAN_BOXED(1063267408,32,FLEN)
NAN_BOXED(3210751056,32,FLEN)
NAN_BOXED(1063267408,32,FLEN)
NAN_BOXED(3210751056,32,FLEN)
NAN_BOXED(1063267408,32,FLEN)
NAN_BOXED(3210751056,32,FLEN)
NAN_BOXED(1063267408,32,FLEN)
NAN_BOXED(3210751056,32,FLEN)
NAN_BOXED(1052869710,32,FLEN)
NAN_BOXED(3200353358,32,FLEN)
NAN_BOXED(1052869710,32,FLEN)
NAN_BOXED(3200353358,32,FLEN)
NAN_BOXED(1052869710,32,FLEN)
NAN_BOXED(3200353358,32,FLEN)
NAN_BOXED(1052869710,32,FLEN)
NAN_BOXED(3200353358,32,FLEN)
NAN_BOXED(1052869710,32,FLEN)
NAN_BOXED(3200353358,32,FLEN)
NAN_BOXED(1063220678,32,FLEN)
NAN_BOXED(3210704326,32,FLEN)
NAN_BOXED(1063220678,32,FLEN)
NAN_BOXED(3210704326,32,FLEN)
NAN_BOXED(1063220678,32,FLEN)
NAN_BOXED(3210704326,32,FLEN)
NAN_BOXED(1063220678,32,FLEN)
NAN_BOXED(3210704326,32,FLEN)
NAN_BOXED(1063220678,32,FLEN)
NAN_BOXED(3210704326,32,FLEN)
NAN_BOXED(1045264767,32,FLEN)
NAN_BOXED(3192748415,32,FLEN)
NAN_BOXED(1045264767,32,FLEN)
NAN_BOXED(3192748415,32,FLEN)
NAN_BOXED(1045264767,32,FLEN)
NAN_BOXED(3192748415,32,FLEN)
NAN_BOXED(1045264767,32,FLEN)
NAN_BOXED(3192748415,32,FLEN)
NAN_BOXED(1045264767,32,FLEN)
NAN_BOXED(3192748415,32,FLEN)
NAN_BOXED(1040352834,32,FLEN)
NAN_BOXED(3187836482,32,FLEN)
NAN_BOXED(1040352834,32,FLEN)
NAN_BOXED(3187836482,32,FLEN)
NAN_BOXED(1040352834,32,FLEN)
NAN_BOXED(3187836482,32,FLEN)
NAN_BOXED(1040352834,32,FLEN)
NAN_BOXED(3187836482,32,FLEN)
NAN_BOXED(1040352834,32,FLEN)
NAN_BOXED(3187836482,32,FLEN)
NAN_BOXED(1044532633,32,FLEN)
NAN_BOXED(3192016281,32,FLEN)
NAN_BOXED(1044532633,32,FLEN)
NAN_BOXED(3192016281,32,FLEN)
NAN_BOXED(1044532633,32,FLEN)
NAN_BOXED(3192016281,32,FLEN)
NAN_BOXED(1044532633,32,FLEN)
NAN_BOXED(3192016281,32,FLEN)
NAN_BOXED(1044532633,32,FLEN)
NAN_BOXED(3192016281,32,FLEN)
NAN_BOXED(1046194363,32,FLEN)
NAN_BOXED(3193678011,32,FLEN)
NAN_BOXED(1046194363,32,FLEN)
NAN_BOXED(3193678011,32,FLEN)
NAN_BOXED(1046194363,32,FLEN)
NAN_BOXED(3193678011,32,FLEN)
NAN_BOXED(1046194363,32,FLEN)
NAN_BOXED(3193678011,32,FLEN)
NAN_BOXED(1046194363,32,FLEN)
NAN_BOXED(3193678011,32,FLEN)
NAN_BOXED(1046420858,32,FLEN)
NAN_BOXED(3193904506,32,FLEN)
NAN_BOXED(1046420858,32,FLEN)
NAN_BOXED(3193904506,32,FLEN)
NAN_BOXED(1046420858,32,FLEN)
NAN_BOXED(3193904506,32,FLEN)
NAN_BOXED(1046420858,32,FLEN)
NAN_BOXED(3193904506,32,FLEN)
NAN_BOXED(1046420858,32,FLEN)
NAN_BOXED(3193904506,32,FLEN)
NAN_BOXED(1048131992,32,FLEN)
NAN_BOXED(3195615640,32,FLEN)
NAN_BOXED(1048131992,32,FLEN)
NAN_BOXED(3195615640,32,FLEN)
NAN_BOXED(1048131992,32,FLEN)
NAN_BOXED(3195615640,32,FLEN)
NAN_BOXED(1048131992,32,FLEN)
NAN_BOXED(3195615640,32,FLEN)
NAN_BOXED(1048131992,32,FLEN)
NAN_BOXED(3195615640,32,FLEN)
NAN_BOXED(1045921258,32,FLEN)
NAN_BOXED(3193404906,32,FLEN)
NAN_BOXED(1045921258,32,FLEN)
NAN_BOXED(3193404906,32,FLEN)
NAN_BOXED(1045921258,32,FLEN)
NAN_BOXED(3193404906,32,FLEN)
NAN_BOXED(1045921258,32,FLEN)
NAN_BOXED(3193404906,32,FLEN)
NAN_BOXED(1045921258,32,FLEN)
NAN_BOXED(3193404906,32,FLEN)
NAN_BOXED(1064604265,32,FLEN)
NAN_BOXED(3212087913,32,FLEN)
NAN_BOXED(1064604265,32,FLEN)
NAN_BOXED(3212087913,32,FLEN)
NAN_BOXED(1064604265,32,FLEN)
NAN_BOXED(3212087913,32,FLEN)
NAN_BOXED(1064604265,32,FLEN)
NAN_BOXED(3212087913,32,FLEN)
NAN_BOXED(1064604265,32,FLEN)
NAN_BOXED(3212087913,32,FLEN)
NAN_BOXED(1057196719,32,FLEN)
NAN_BOXED(3204680367,32,FLEN)
NAN_BOXED(1057196719,32,FLEN)
NAN_BOXED(3204680367,32,FLEN)
NAN_BOXED(1057196719,32,FLEN)
NAN_BOXED(3204680367,32,FLEN)
NAN_BOXED(1057196719,32,FLEN)
NAN_BOXED(3204680367,32,FLEN)
NAN_BOXED(1057196719,32,FLEN)
NAN_BOXED(3204680367,32,FLEN)
NAN_BOXED(1029843700,32,FLEN)
NAN_BOXED(3177327348,32,FLEN)
NAN_BOXED(1029843700,32,FLEN)
NAN_BOXED(3177327348,32,FLEN)
NAN_BOXED(1029843700,32,FLEN)
NAN_BOXED(3177327348,32,FLEN)
NAN_BOXED(1029843700,32,FLEN)
NAN_BOXED(3177327348,32,FLEN)
NAN_BOXED(1029843700,32,FLEN)
NAN_BOXED(3177327348,32,FLEN)
NAN_BOXED(1054555506,32,FLEN)
NAN_BOXED(3202039154,32,FLEN)
NAN_BOXED(1054555506,32,FLEN)
NAN_BOXED(3202039154,32,FLEN)
NAN_BOXED(1054555506,32,FLEN)
NAN_BOXED(3202039154,32,FLEN)
NAN_BOXED(1054555506,32,FLEN)
NAN_BOXED(3202039154,32,FLEN)
NAN_BOXED(1054555506,32,FLEN)
NAN_BOXED(3202039154,32,FLEN)
NAN_BOXED(1063784945,32,FLEN)
NAN_BOXED(3211268593,32,FLEN)
NAN_BOXED(1063784945,32,FLEN)
NAN_BOXED(3211268593,32,FLEN)
NAN_BOXED(1063784945,32,FLEN)
NAN_BOXED(3211268593,32,FLEN)
NAN_BOXED(1063784945,32,FLEN)
NAN_BOXED(3211268593,32,FLEN)
NAN_BOXED(1063784945,32,FLEN)
NAN_BOXED(3211268593,32,FLEN)
NAN_BOXED(1038338936,32,FLEN)
NAN_BOXED(3185822584,32,FLEN)
NAN_BOXED(1038338936,32,FLEN)
NAN_BOXED(3185822584,32,FLEN)
NAN_BOXED(1038338936,32,FLEN)
NAN_BOXED(3185822584,32,FLEN)
NAN_BOXED(1038338936,32,FLEN)
NAN_BOXED(3185822584,32,FLEN)
NAN_BOXED(1038338936,32,FLEN)
NAN_BOXED(3185822584,32,FLEN)
NAN_BOXED(1050303971,32,FLEN)
NAN_BOXED(3197787619,32,FLEN)
NAN_BOXED(1050303971,32,FLEN)
NAN_BOXED(3197787619,32,FLEN)
NAN_BOXED(1050303971,32,FLEN)
NAN_BOXED(3197787619,32,FLEN)
NAN_BOXED(1050303971,32,FLEN)
NAN_BOXED(3197787619,32,FLEN)
NAN_BOXED(1050303971,32,FLEN)
NAN_BOXED(3197787619,32,FLEN)
NAN_BOXED(1060230937,32,FLEN)
NAN_BOXED(3207714585,32,FLEN)
NAN_BOXED(1060230937,32,FLEN)
NAN_BOXED(3207714585,32,FLEN)
NAN_BOXED(1060230937,32,FLEN)
NAN_BOXED(3207714585,32,FLEN)
NAN_BOXED(1060230937,32,FLEN)
NAN_BOXED(3207714585,32,FLEN)
NAN_BOXED(1060230937,32,FLEN)
NAN_BOXED(3207714585,32,FLEN)
NAN_BOXED(1058206621,32,FLEN)
NAN_BOXED(3205690269,32,FLEN)
NAN_BOXED(1058206621,32,FLEN)
NAN_BOXED(3205690269,32,FLEN)
NAN_BOXED(1058206621,32,FLEN)
NAN_BOXED(3205690269,32,FLEN)
NAN_BOXED(1058206621,32,FLEN)
NAN_BOXED(3205690269,32,FLEN)
NAN_BOXED(1058206621,32,FLEN)
NAN_BOXED(3205690269,32,FLEN)
NAN_BOXED(1033760968,32,FLEN)
NAN_BOXED(3181244616,32,FLEN)
NAN_BOXED(1033760968,32,FLEN)
NAN_BOXED(3181244616,32,FLEN)
NAN_BOXED(1033760968,32,FLEN)
NAN_BOXED(3181244616,32,FLEN)
NAN_BOXED(1033760968,32,FLEN)
NAN_BOXED(3181244616,32,FLEN)
NAN_BOXED(1033760968,32,FLEN)
NAN_BOXED(3181244616,32,FLEN)
NAN_BOXED(1058379913,32,FLEN)
NAN_BOXED(3205863561,32,FLEN)
NAN_BOXED(1058379913,32,FLEN)
NAN_BOXED(3205863561,32,FLEN)
NAN_BOXED(1058379913,32,FLEN)
NAN_BOXED(3205863561,32,FLEN)
NAN_BOXED(1058379913,32,FLEN)
NAN_BOXED(3205863561,32,FLEN)
NAN_BOXED(1058379913,32,FLEN)
NAN_BOXED(3205863561,32,FLEN)
NAN_BOXED(1046977551,32,FLEN)
NAN_BOXED(3194461199,32,FLEN)
NAN_BOXED(1046977551,32,FLEN)
NAN_BOXED(3194461199,32,FLEN)
NAN_BOXED(1046977551,32,FLEN)
NAN_BOXED(3194461199,32,FLEN)
NAN_BOXED(1046977551,32,FLEN)
NAN_BOXED(3194461199,32,FLEN)
NAN_BOXED(1046977551,32,FLEN)
NAN_BOXED(3194461199,32,FLEN)
NAN_BOXED(1064838141,32,FLEN)
NAN_BOXED(3212321789,32,FLEN)
NAN_BOXED(1064838141,32,FLEN)
NAN_BOXED(3212321789,32,FLEN)
NAN_BOXED(1064838141,32,FLEN)
NAN_BOXED(3212321789,32,FLEN)
NAN_BOXED(1064838141,32,FLEN)
NAN_BOXED(3212321789,32,FLEN)
NAN_BOXED(1064838141,32,FLEN)
NAN_BOXED(3212321789,32,FLEN)
NAN_BOXED(1050709454,32,FLEN)
NAN_BOXED(3198193102,32,FLEN)
NAN_BOXED(1050709454,32,FLEN)
NAN_BOXED(3198193102,32,FLEN)
NAN_BOXED(1050709454,32,FLEN)
NAN_BOXED(3198193102,32,FLEN)
NAN_BOXED(1050709454,32,FLEN)
NAN_BOXED(3198193102,32,FLEN)
NAN_BOXED(1050709454,32,FLEN)
NAN_BOXED(3198193102,32,FLEN)
NAN_BOXED(1034243915,32,FLEN)
NAN_BOXED(3181727563,32,FLEN)
NAN_BOXED(1034243915,32,FLEN)
NAN_BOXED(3181727563,32,FLEN)
NAN_BOXED(1034243915,32,FLEN)
NAN_BOXED(3181727563,32,FLEN)
NAN_BOXED(1034243915,32,FLEN)
NAN_BOXED(3181727563,32,FLEN)
NAN_BOXED(1034243915,32,FLEN)
NAN_BOXED(3181727563,32,FLEN)
NAN_BOXED(1049497311,32,FLEN)
NAN_BOXED(3196980959,32,FLEN)
NAN_BOXED(1049497311,32,FLEN)
NAN_BOXED(3196980959,32,FLEN)
NAN_BOXED(1049497311,32,FLEN)
NAN_BOXED(3196980959,32,FLEN)
NAN_BOXED(1049497311,32,FLEN)
NAN_BOXED(3196980959,32,FLEN)
NAN_BOXED(1049497311,32,FLEN)
NAN_BOXED(3196980959,32,FLEN)
NAN_BOXED(1064173283,32,FLEN)
NAN_BOXED(3211656931,32,FLEN)
NAN_BOXED(1064173283,32,FLEN)
NAN_BOXED(3211656931,32,FLEN)
NAN_BOXED(1064173283,32,FLEN)
NAN_BOXED(3211656931,32,FLEN)
NAN_BOXED(1064173283,32,FLEN)
NAN_BOXED(3211656931,32,FLEN)
NAN_BOXED(1064173283,32,FLEN)
NAN_BOXED(3211656931,32,FLEN)
NAN_BOXED(1064860343,32,FLEN)
NAN_BOXED(3212343991,32,FLEN)
NAN_BOXED(1064860343,32,FLEN)
NAN_BOXED(3212343991,32,FLEN)
NAN_BOXED(1064860343,32,FLEN)
NAN_BOXED(3212343991,32,FLEN)
NAN_BOXED(1064860343,32,FLEN)
NAN_BOXED(3212343991,32,FLEN)
NAN_BOXED(1064860343,32,FLEN)
NAN_BOXED(3212343991,32,FLEN)
NAN_BOXED(1065186043,32,FLEN)
NAN_BOXED(3212669691,32,FLEN)
NAN_BOXED(1065186043,32,FLEN)
NAN_BOXED(3212669691,32,FLEN)
NAN_BOXED(1065186043,32,FLEN)
NAN_BOXED(3212669691,32,FLEN)
NAN_BOXED(1065186043,32,FLEN)
NAN_BOXED(3212669691,32,FLEN)
NAN_BOXED(1065186043,32,FLEN)
NAN_BOXED(3212669691,32,FLEN)
NAN_BOXED(1423026796,32,FLEN)
NAN_BOXED(1404655182,32,FLEN)
NAN_BOXED(1423026796,32,FLEN)
NAN_BOXED(1404655182,32,FLEN)
NAN_BOXED(1423026796,32,FLEN)
NAN_BOXED(1404655182,32,FLEN)
NAN_BOXED(1423026796,32,FLEN)
NAN_BOXED(1404655182,32,FLEN)
NAN_BOXED(1423026796,32,FLEN)
NAN_BOXED(1404655182,32,FLEN)
NAN_BOXED(1424275497,32,FLEN)
NAN_BOXED(1398423220,32,FLEN)
NAN_BOXED(1424275497,32,FLEN)
NAN_BOXED(1398423220,32,FLEN)
NAN_BOXED(1424275497,32,FLEN)
NAN_BOXED(1398423220,32,FLEN)
NAN_BOXED(1424275497,32,FLEN)
NAN_BOXED(1398423220,32,FLEN)
NAN_BOXED(1424275497,32,FLEN)
NAN_BOXED(1398423220,32,FLEN)
NAN_BOXED(1406252206,32,FLEN)
NAN_BOXED(1422627540,32,FLEN)
NAN_BOXED(1406252206,32,FLEN)
NAN_BOXED(1422627540,32,FLEN)
NAN_BOXED(1406252206,32,FLEN)
NAN_BOXED(1422627540,32,FLEN)
NAN_BOXED(1406252206,32,FLEN)
NAN_BOXED(1422627540,32,FLEN)
NAN_BOXED(1406252206,32,FLEN)
NAN_BOXED(1422627540,32,FLEN)
NAN_BOXED(1425027573,32,FLEN)
NAN_BOXED(1392304308,32,FLEN)
NAN_BOXED(1425027573,32,FLEN)
NAN_BOXED(1392304308,32,FLEN)
NAN_BOXED(1425027573,32,FLEN)
NAN_BOXED(1392304308,32,FLEN)
NAN_BOXED(1425027573,32,FLEN)
NAN_BOXED(1392304308,32,FLEN)
NAN_BOXED(1425027573,32,FLEN)
NAN_BOXED(1392304308,32,FLEN)
NAN_BOXED(1365994629,32,FLEN)
NAN_BOXED(1425942823,32,FLEN)
NAN_BOXED(1365994629,32,FLEN)
NAN_BOXED(1425942823,32,FLEN)
NAN_BOXED(1365994629,32,FLEN)
NAN_BOXED(1425942823,32,FLEN)
NAN_BOXED(1365994629,32,FLEN)
NAN_BOXED(1425942823,32,FLEN)
NAN_BOXED(1365994629,32,FLEN)
NAN_BOXED(1425942823,32,FLEN)
NAN_BOXED(1380576980,32,FLEN)
NAN_BOXED(1425649801,32,FLEN)
NAN_BOXED(1380576980,32,FLEN)
NAN_BOXED(1425649801,32,FLEN)
NAN_BOXED(1380576980,32,FLEN)
NAN_BOXED(1425649801,32,FLEN)
NAN_BOXED(1380576980,32,FLEN)
NAN_BOXED(1425649801,32,FLEN)
NAN_BOXED(1380576980,32,FLEN)
NAN_BOXED(1425649801,32,FLEN)
NAN_BOXED(1423700719,32,FLEN)
NAN_BOXED(1401959493,32,FLEN)
NAN_BOXED(1423700719,32,FLEN)
NAN_BOXED(1401959493,32,FLEN)
NAN_BOXED(1423700719,32,FLEN)
NAN_BOXED(1401959493,32,FLEN)
NAN_BOXED(1423700719,32,FLEN)
NAN_BOXED(1401959493,32,FLEN)
NAN_BOXED(1423700719,32,FLEN)
NAN_BOXED(1401959493,32,FLEN)
NAN_BOXED(1399205190,32,FLEN)
NAN_BOXED(1424177751,32,FLEN)
NAN_BOXED(1399205190,32,FLEN)
NAN_BOXED(1424177751,32,FLEN)
NAN_BOXED(1399205190,32,FLEN)
NAN_BOXED(1424177751,32,FLEN)
NAN_BOXED(1399205190,32,FLEN)
NAN_BOXED(1424177751,32,FLEN)
NAN_BOXED(1399205190,32,FLEN)
NAN_BOXED(1424177751,32,FLEN)
NAN_BOXED(1425378372,32,FLEN)
NAN_BOXED(1386691523,32,FLEN)
NAN_BOXED(1425378372,32,FLEN)
NAN_BOXED(1386691523,32,FLEN)
NAN_BOXED(1425378372,32,FLEN)
NAN_BOXED(1386691523,32,FLEN)
NAN_BOXED(1425378372,32,FLEN)
NAN_BOXED(1386691523,32,FLEN)
NAN_BOXED(1425378372,32,FLEN)
NAN_BOXED(1386691523,32,FLEN)
NAN_BOXED(1425501647,32,FLEN)
NAN_BOXED(1384719129,32,FLEN)
NAN_BOXED(1425501647,32,FLEN)
NAN_BOXED(1384719129,32,FLEN)
NAN_BOXED(1425501647,32,FLEN)
NAN_BOXED(1384719129,32,FLEN)
NAN_BOXED(1425501647,32,FLEN)
NAN_BOXED(1384719129,32,FLEN)
NAN_BOXED(1425501647,32,FLEN)
NAN_BOXED(1384719129,32,FLEN)
NAN_BOXED(1416781211,32,FLEN)
NAN_BOXED(1418121522,32,FLEN)
NAN_BOXED(1416781211,32,FLEN)
NAN_BOXED(1418121522,32,FLEN)
NAN_BOXED(1416781211,32,FLEN)
NAN_BOXED(1418121522,32,FLEN)
NAN_BOXED(1416781211,32,FLEN)
NAN_BOXED(1418121522,32,FLEN)
NAN_BOXED(1416781211,32,FLEN)
NAN_BOXED(1418121522,32,FLEN)
NAN_BOXED(1425008524,32,FLEN)
NAN_BOXED(1392559012,32,FLEN)
NAN_BOXED(1425008524,32,FLEN)
NAN_BOXED(1392559012,32,FLEN)
NAN_BOXED(1425008524,32,FLEN)
NAN_BOXED(1392559012,32,FLEN)
NAN_BOXED(1425008524,32,FLEN)
NAN_BOXED(1392559012,32,FLEN)
NAN_BOXED(1425008524,32,FLEN)
NAN_BOXED(1392559012,32,FLEN)
NAN_BOXED(1419955039,32,FLEN)
NAN_BOXED(1413114178,32,FLEN)
NAN_BOXED(1419955039,32,FLEN)
NAN_BOXED(1413114178,32,FLEN)
NAN_BOXED(1419955039,32,FLEN)
NAN_BOXED(1413114178,32,FLEN)
NAN_BOXED(1419955039,32,FLEN)
NAN_BOXED(1413114178,32,FLEN)
NAN_BOXED(1419955039,32,FLEN)
NAN_BOXED(1413114178,32,FLEN)
NAN_BOXED(1425945111,32,FLEN)
NAN_BOXED(1365701807,32,FLEN)
NAN_BOXED(1425945111,32,FLEN)
NAN_BOXED(1365701807,32,FLEN)
NAN_BOXED(1425945111,32,FLEN)
NAN_BOXED(1365701807,32,FLEN)
NAN_BOXED(1425945111,32,FLEN)
NAN_BOXED(1365701807,32,FLEN)
NAN_BOXED(1425945111,32,FLEN)
NAN_BOXED(1365701807,32,FLEN)
NAN_BOXED(1419031179,32,FLEN)
NAN_BOXED(1414961897,32,FLEN)
NAN_BOXED(1419031179,32,FLEN)
NAN_BOXED(1414961897,32,FLEN)
NAN_BOXED(1419031179,32,FLEN)
NAN_BOXED(1414961897,32,FLEN)
NAN_BOXED(1419031179,32,FLEN)
NAN_BOXED(1414961897,32,FLEN)
NAN_BOXED(1419031179,32,FLEN)
NAN_BOXED(1414961897,32,FLEN)
NAN_BOXED(1424346636,32,FLEN)
NAN_BOXED(1397854107,32,FLEN)
NAN_BOXED(1424346636,32,FLEN)
NAN_BOXED(1397854107,32,FLEN)
NAN_BOXED(1424346636,32,FLEN)
NAN_BOXED(1397854107,32,FLEN)
NAN_BOXED(1424346636,32,FLEN)
NAN_BOXED(1397854107,32,FLEN)
NAN_BOXED(1424346636,32,FLEN)
NAN_BOXED(1397854107,32,FLEN)
NAN_BOXED(1422781573,32,FLEN)
NAN_BOXED(1405636073,32,FLEN)
NAN_BOXED(1422781573,32,FLEN)
NAN_BOXED(1405636073,32,FLEN)
NAN_BOXED(1422781573,32,FLEN)
NAN_BOXED(1405636073,32,FLEN)
NAN_BOXED(1422781573,32,FLEN)
NAN_BOXED(1405636073,32,FLEN)
NAN_BOXED(1422781573,32,FLEN)
NAN_BOXED(1405636073,32,FLEN)
NAN_BOXED(1408805556,32,FLEN)
NAN_BOXED(1421989203,32,FLEN)
NAN_BOXED(1408805556,32,FLEN)
NAN_BOXED(1421989203,32,FLEN)
NAN_BOXED(1408805556,32,FLEN)
NAN_BOXED(1421989203,32,FLEN)
NAN_BOXED(1408805556,32,FLEN)
NAN_BOXED(1421989203,32,FLEN)
NAN_BOXED(1408805556,32,FLEN)
NAN_BOXED(1421989203,32,FLEN)
NAN_BOXED(1410663873,32,FLEN)
NAN_BOXED(1421180191,32,FLEN)
NAN_BOXED(1410663873,32,FLEN)
NAN_BOXED(1421180191,32,FLEN)
NAN_BOXED(1410663873,32,FLEN)
NAN_BOXED(1421180191,32,FLEN)
NAN_BOXED(1410663873,32,FLEN)
NAN_BOXED(1421180191,32,FLEN)
NAN_BOXED(1410663873,32,FLEN)
NAN_BOXED(1421180191,32,FLEN)
NAN_BOXED(1388148376,32,FLEN)
NAN_BOXED(1425287318,32,FLEN)
NAN_BOXED(1388148376,32,FLEN)
NAN_BOXED(1425287318,32,FLEN)
NAN_BOXED(1388148376,32,FLEN)
NAN_BOXED(1425287318,32,FLEN)
NAN_BOXED(1388148376,32,FLEN)
NAN_BOXED(1425287318,32,FLEN)
NAN_BOXED(1388148376,32,FLEN)
NAN_BOXED(1425287318,32,FLEN)
NAN_BOXED(1378375597,32,FLEN)
NAN_BOXED(1425718595,32,FLEN)
NAN_BOXED(1378375597,32,FLEN)
NAN_BOXED(1425718595,32,FLEN)
NAN_BOXED(1378375597,32,FLEN)
NAN_BOXED(1425718595,32,FLEN)
NAN_BOXED(1378375597,32,FLEN)
NAN_BOXED(1425718595,32,FLEN)
NAN_BOXED(1378375597,32,FLEN)
NAN_BOXED(1425718595,32,FLEN)
NAN_BOXED(1393946554,32,FLEN)
NAN_BOXED(1424835081,32,FLEN)
NAN_BOXED(1393946554,32,FLEN)
NAN_BOXED(1424835081,32,FLEN)
NAN_BOXED(1393946554,32,FLEN)
NAN_BOXED(1424835081,32,FLEN)
NAN_BOXED(1393946554,32,FLEN)
NAN_BOXED(1424835081,32,FLEN)
NAN_BOXED(1393946554,32,FLEN)
NAN_BOXED(1424835081,32,FLEN)
NAN_BOXED(1418526652,32,FLEN)
NAN_BOXED(1415970953,32,FLEN)
NAN_BOXED(1418526652,32,FLEN)
NAN_BOXED(1415970953,32,FLEN)
NAN_BOXED(1418526652,32,FLEN)
NAN_BOXED(1415970953,32,FLEN)
NAN_BOXED(1418526652,32,FLEN)
NAN_BOXED(1415970953,32,FLEN)
NAN_BOXED(1418526652,32,FLEN)
NAN_BOXED(1415970953,32,FLEN)
NAN_BOXED(1402057410,32,FLEN)
NAN_BOXED(1423676240,32,FLEN)
NAN_BOXED(1402057410,32,FLEN)
NAN_BOXED(1423676240,32,FLEN)
NAN_BOXED(1402057410,32,FLEN)
NAN_BOXED(1423676240,32,FLEN)
NAN_BOXED(1402057410,32,FLEN)
NAN_BOXED(1423676240,32,FLEN)
NAN_BOXED(1402057410,32,FLEN)
NAN_BOXED(1423676240,32,FLEN)
NAN_BOXED(1419972661,32,FLEN)
NAN_BOXED(1413078934,32,FLEN)
NAN_BOXED(1419972661,32,FLEN)
NAN_BOXED(1413078934,32,FLEN)
NAN_BOXED(1419972661,32,FLEN)
NAN_BOXED(1413078934,32,FLEN)
NAN_BOXED(1419972661,32,FLEN)
NAN_BOXED(1413078934,32,FLEN)
NAN_BOXED(1419972661,32,FLEN)
NAN_BOXED(1413078934,32,FLEN)
NAN_BOXED(1415822922,32,FLEN)
NAN_BOXED(1418600667,32,FLEN)
NAN_BOXED(1415822922,32,FLEN)
NAN_BOXED(1418600667,32,FLEN)
NAN_BOXED(1415822922,32,FLEN)
NAN_BOXED(1418600667,32,FLEN)
NAN_BOXED(1415822922,32,FLEN)
NAN_BOXED(1418600667,32,FLEN)
NAN_BOXED(1415822922,32,FLEN)
NAN_BOXED(1418600667,32,FLEN)
NAN_BOXED(1425206580,32,FLEN)
NAN_BOXED(1389440193,32,FLEN)
NAN_BOXED(1425206580,32,FLEN)
NAN_BOXED(1389440193,32,FLEN)
NAN_BOXED(1425206580,32,FLEN)
NAN_BOXED(1389440193,32,FLEN)
NAN_BOXED(1425206580,32,FLEN)
NAN_BOXED(1389440193,32,FLEN)
NAN_BOXED(1425206580,32,FLEN)
NAN_BOXED(1389440193,32,FLEN)
NAN_BOXED(1414608757,32,FLEN)
NAN_BOXED(1419207750,32,FLEN)
NAN_BOXED(1414608757,32,FLEN)
NAN_BOXED(1419207750,32,FLEN)
NAN_BOXED(1414608757,32,FLEN)
NAN_BOXED(1419207750,32,FLEN)
NAN_BOXED(1414608757,32,FLEN)
NAN_BOXED(1419207750,32,FLEN)
NAN_BOXED(1414608757,32,FLEN)
NAN_BOXED(1419207750,32,FLEN)
NAN_BOXED(1421502985,32,FLEN)
NAN_BOXED(1410018284,32,FLEN)
NAN_BOXED(1421502985,32,FLEN)
NAN_BOXED(1410018284,32,FLEN)
NAN_BOXED(1421502985,32,FLEN)
NAN_BOXED(1410018284,32,FLEN)
NAN_BOXED(1421502985,32,FLEN)
NAN_BOXED(1410018284,32,FLEN)
NAN_BOXED(1421502985,32,FLEN)
NAN_BOXED(1410018284,32,FLEN)
NAN_BOXED(1406198483,32,FLEN)
NAN_BOXED(1422640971,32,FLEN)
NAN_BOXED(1406198483,32,FLEN)
NAN_BOXED(1422640971,32,FLEN)
NAN_BOXED(1406198483,32,FLEN)
NAN_BOXED(1422640971,32,FLEN)
NAN_BOXED(1406198483,32,FLEN)
NAN_BOXED(1422640971,32,FLEN)
NAN_BOXED(1406198483,32,FLEN)
NAN_BOXED(1422640971,32,FLEN)
NAN_BOXED(1416697900,32,FLEN)
NAN_BOXED(1418163178,32,FLEN)
NAN_BOXED(1416697900,32,FLEN)
NAN_BOXED(1418163178,32,FLEN)
NAN_BOXED(1416697900,32,FLEN)
NAN_BOXED(1418163178,32,FLEN)
NAN_BOXED(1416697900,32,FLEN)
NAN_BOXED(1418163178,32,FLEN)
NAN_BOXED(1416697900,32,FLEN)
NAN_BOXED(1418163178,32,FLEN)
NAN_BOXED(1422649482,32,FLEN)
NAN_BOXED(1406164439,32,FLEN)
NAN_BOXED(1422649482,32,FLEN)
NAN_BOXED(1406164439,32,FLEN)
NAN_BOXED(1422649482,32,FLEN)
NAN_BOXED(1406164439,32,FLEN)
NAN_BOXED(1422649482,32,FLEN)
NAN_BOXED(1406164439,32,FLEN)
NAN_BOXED(1422649482,32,FLEN)
NAN_BOXED(1406164439,32,FLEN)
NAN_BOXED(1418650877,32,FLEN)
NAN_BOXED(1415722502,32,FLEN)
NAN_BOXED(1418650877,32,FLEN)
NAN_BOXED(1415722502,32,FLEN)
NAN_BOXED(1418650877,32,FLEN)
NAN_BOXED(1415722502,32,FLEN)
NAN_BOXED(1418650877,32,FLEN)
NAN_BOXED(1415722502,32,FLEN)
NAN_BOXED(1418650877,32,FLEN)
NAN_BOXED(1415722502,32,FLEN)
NAN_BOXED(1422635056,32,FLEN)
NAN_BOXED(1406222144,32,FLEN)
NAN_BOXED(1422635056,32,FLEN)
NAN_BOXED(1406222144,32,FLEN)
NAN_BOXED(1422635056,32,FLEN)
NAN_BOXED(1406222144,32,FLEN)
NAN_BOXED(1422635056,32,FLEN)
NAN_BOXED(1406222144,32,FLEN)
NAN_BOXED(1422635056,32,FLEN)
NAN_BOXED(1406222144,32,FLEN)
NAN_BOXED(1414278268,32,FLEN)
NAN_BOXED(1419372994,32,FLEN)
NAN_BOXED(1414278268,32,FLEN)
NAN_BOXED(1419372994,32,FLEN)
NAN_BOXED(1414278268,32,FLEN)
NAN_BOXED(1419372994,32,FLEN)
NAN_BOXED(1414278268,32,FLEN)
NAN_BOXED(1419372994,32,FLEN)
NAN_BOXED(1414278268,32,FLEN)
NAN_BOXED(1419372994,32,FLEN)
NAN_BOXED(1415383538,32,FLEN)
NAN_BOXED(1418820359,32,FLEN)
NAN_BOXED(1415383538,32,FLEN)
NAN_BOXED(1418820359,32,FLEN)
NAN_BOXED(1415383538,32,FLEN)
NAN_BOXED(1418820359,32,FLEN)
NAN_BOXED(1415383538,32,FLEN)
NAN_BOXED(1418820359,32,FLEN)
NAN_BOXED(1415383538,32,FLEN)
NAN_BOXED(1418820359,32,FLEN)
NAN_BOXED(1416112694,32,FLEN)
NAN_BOXED(1418455781,32,FLEN)
NAN_BOXED(1416112694,32,FLEN)
NAN_BOXED(1418455781,32,FLEN)
NAN_BOXED(1416112694,32,FLEN)
NAN_BOXED(1418455781,32,FLEN)
NAN_BOXED(1416112694,32,FLEN)
NAN_BOXED(1418455781,32,FLEN)
NAN_BOXED(1416112694,32,FLEN)
NAN_BOXED(1418455781,32,FLEN)
NAN_BOXED(1402076470,32,FLEN)
NAN_BOXED(1423671475,32,FLEN)
NAN_BOXED(1402076470,32,FLEN)
NAN_BOXED(1423671475,32,FLEN)
NAN_BOXED(1402076470,32,FLEN)
NAN_BOXED(1423671475,32,FLEN)
NAN_BOXED(1402076470,32,FLEN)
NAN_BOXED(1423671475,32,FLEN)
NAN_BOXED(1402076470,32,FLEN)
NAN_BOXED(1423671475,32,FLEN)
NAN_BOXED(1419978323,32,FLEN)
NAN_BOXED(1413067610,32,FLEN)
NAN_BOXED(1419978323,32,FLEN)
NAN_BOXED(1413067610,32,FLEN)
NAN_BOXED(1419978323,32,FLEN)
NAN_BOXED(1413067610,32,FLEN)
NAN_BOXED(1419978323,32,FLEN)
NAN_BOXED(1413067610,32,FLEN)
NAN_BOXED(1419978323,32,FLEN)
NAN_BOXED(1413067610,32,FLEN)
NAN_BOXED(1406174971,32,FLEN)
NAN_BOXED(1422646850,32,FLEN)
NAN_BOXED(1406174971,32,FLEN)
NAN_BOXED(1422646850,32,FLEN)
NAN_BOXED(1406174971,32,FLEN)
NAN_BOXED(1422646850,32,FLEN)
NAN_BOXED(1406174971,32,FLEN)
NAN_BOXED(1422646850,32,FLEN)
NAN_BOXED(1406174971,32,FLEN)
NAN_BOXED(1422646850,32,FLEN)
NAN_BOXED(1421013279,32,FLEN)
NAN_BOXED(1410997698,32,FLEN)
NAN_BOXED(1421013279,32,FLEN)
NAN_BOXED(1410997698,32,FLEN)
NAN_BOXED(1421013279,32,FLEN)
NAN_BOXED(1410997698,32,FLEN)
NAN_BOXED(1421013279,32,FLEN)
NAN_BOXED(1410997698,32,FLEN)
NAN_BOXED(1421013279,32,FLEN)
NAN_BOXED(1410997698,32,FLEN)
NAN_BOXED(1367266116,32,FLEN)
NAN_BOXED(1425932890,32,FLEN)
NAN_BOXED(1367266116,32,FLEN)
NAN_BOXED(1425932890,32,FLEN)
NAN_BOXED(1367266116,32,FLEN)
NAN_BOXED(1425932890,32,FLEN)
NAN_BOXED(1367266116,32,FLEN)
NAN_BOXED(1425932890,32,FLEN)
NAN_BOXED(1367266116,32,FLEN)
NAN_BOXED(1425932890,32,FLEN)
NAN_BOXED(1047325476,32,FLEN)
NAN_BOXED(3194809124,32,FLEN)
NAN_BOXED(1047325476,32,FLEN)
NAN_BOXED(3194809124,32,FLEN)
NAN_BOXED(1047325476,32,FLEN)
NAN_BOXED(3194809124,32,FLEN)
NAN_BOXED(1047325476,32,FLEN)
NAN_BOXED(3194809124,32,FLEN)
NAN_BOXED(1047325476,32,FLEN)
NAN_BOXED(3194809124,32,FLEN)
NAN_BOXED(1055447675,32,FLEN)
NAN_BOXED(3202931323,32,FLEN)
NAN_BOXED(1055447675,32,FLEN)
NAN_BOXED(3202931323,32,FLEN)
NAN_BOXED(1055447675,32,FLEN)
NAN_BOXED(3202931323,32,FLEN)
NAN_BOXED(1055447675,32,FLEN)
NAN_BOXED(3202931323,32,FLEN)
NAN_BOXED(1055447675,32,FLEN)
NAN_BOXED(3202931323,32,FLEN)
NAN_BOXED(1050042528,32,FLEN)
NAN_BOXED(3197526176,32,FLEN)
NAN_BOXED(1050042528,32,FLEN)
NAN_BOXED(3197526176,32,FLEN)
NAN_BOXED(1050042528,32,FLEN)
NAN_BOXED(3197526176,32,FLEN)
NAN_BOXED(1050042528,32,FLEN)
NAN_BOXED(3197526176,32,FLEN)
NAN_BOXED(1050042528,32,FLEN)
NAN_BOXED(3197526176,32,FLEN)
NAN_BOXED(1050985921,32,FLEN)
NAN_BOXED(3198469569,32,FLEN)
NAN_BOXED(1050985921,32,FLEN)
NAN_BOXED(3198469569,32,FLEN)
NAN_BOXED(1050985921,32,FLEN)
NAN_BOXED(3198469569,32,FLEN)
NAN_BOXED(1050985921,32,FLEN)
NAN_BOXED(3198469569,32,FLEN)
NAN_BOXED(1050985921,32,FLEN)
NAN_BOXED(3198469569,32,FLEN)
NAN_BOXED(1061454816,32,FLEN)
NAN_BOXED(3208938464,32,FLEN)
NAN_BOXED(1061454816,32,FLEN)
NAN_BOXED(3208938464,32,FLEN)
NAN_BOXED(1061454816,32,FLEN)
NAN_BOXED(3208938464,32,FLEN)
NAN_BOXED(1061454816,32,FLEN)
NAN_BOXED(3208938464,32,FLEN)
NAN_BOXED(1061454816,32,FLEN)
NAN_BOXED(3208938464,32,FLEN)
NAN_BOXED(1060654112,32,FLEN)
NAN_BOXED(3208137760,32,FLEN)
NAN_BOXED(1060654112,32,FLEN)
NAN_BOXED(3208137760,32,FLEN)
NAN_BOXED(1060654112,32,FLEN)
NAN_BOXED(3208137760,32,FLEN)
NAN_BOXED(1060654112,32,FLEN)
NAN_BOXED(3208137760,32,FLEN)
NAN_BOXED(1060654112,32,FLEN)
NAN_BOXED(3208137760,32,FLEN)
NAN_BOXED(1063325997,32,FLEN)
NAN_BOXED(3210809645,32,FLEN)
NAN_BOXED(1063325997,32,FLEN)
NAN_BOXED(3210809645,32,FLEN)
NAN_BOXED(1063325997,32,FLEN)
NAN_BOXED(3210809645,32,FLEN)
NAN_BOXED(1063325997,32,FLEN)
NAN_BOXED(3210809645,32,FLEN)
NAN_BOXED(1063325997,32,FLEN)
NAN_BOXED(3210809645,32,FLEN)
NAN_BOXED(1064672948,32,FLEN)
NAN_BOXED(3212156596,32,FLEN)
NAN_BOXED(1064672948,32,FLEN)
NAN_BOXED(3212156596,32,FLEN)
NAN_BOXED(1064672948,32,FLEN)
NAN_BOXED(3212156596,32,FLEN)
NAN_BOXED(1064672948,32,FLEN)
NAN_BOXED(3212156596,32,FLEN)
NAN_BOXED(1064672948,32,FLEN)
NAN_BOXED(3212156596,32,FLEN)
NAN_BOXED(1056088773,32,FLEN)
NAN_BOXED(3203572421,32,FLEN)
NAN_BOXED(1056088773,32,FLEN)
NAN_BOXED(3203572421,32,FLEN)
NAN_BOXED(1056088773,32,FLEN)
NAN_BOXED(3203572421,32,FLEN)
NAN_BOXED(1056088773,32,FLEN)
NAN_BOXED(3203572421,32,FLEN)
NAN_BOXED(1056088773,32,FLEN)
NAN_BOXED(3203572421,32,FLEN)
NAN_BOXED(1058705496,32,FLEN)
NAN_BOXED(3206189144,32,FLEN)
NAN_BOXED(1058705496,32,FLEN)
NAN_BOXED(3206189144,32,FLEN)
NAN_BOXED(1058705496,32,FLEN)
NAN_BOXED(3206189144,32,FLEN)
NAN_BOXED(1058705496,32,FLEN)
NAN_BOXED(3206189144,32,FLEN)
NAN_BOXED(1058705496,32,FLEN)
NAN_BOXED(3206189144,32,FLEN)
NAN_BOXED(1061115155,32,FLEN)
NAN_BOXED(3208598803,32,FLEN)
NAN_BOXED(1061115155,32,FLEN)
NAN_BOXED(3208598803,32,FLEN)
NAN_BOXED(1061115155,32,FLEN)
NAN_BOXED(3208598803,32,FLEN)
NAN_BOXED(1061115155,32,FLEN)
NAN_BOXED(3208598803,32,FLEN)
NAN_BOXED(1061115155,32,FLEN)
NAN_BOXED(3208598803,32,FLEN)
NAN_BOXED(1048225500,32,FLEN)
NAN_BOXED(3195709148,32,FLEN)
NAN_BOXED(1048225500,32,FLEN)
NAN_BOXED(3195709148,32,FLEN)
NAN_BOXED(1048225500,32,FLEN)
NAN_BOXED(3195709148,32,FLEN)
NAN_BOXED(1048225500,32,FLEN)
NAN_BOXED(3195709148,32,FLEN)
NAN_BOXED(1048225500,32,FLEN)
NAN_BOXED(3195709148,32,FLEN)
NAN_BOXED(1053763182,32,FLEN)
NAN_BOXED(3201246830,32,FLEN)
NAN_BOXED(1053763182,32,FLEN)
NAN_BOXED(3201246830,32,FLEN)
NAN_BOXED(1053763182,32,FLEN)
NAN_BOXED(3201246830,32,FLEN)
NAN_BOXED(1053763182,32,FLEN)
NAN_BOXED(3201246830,32,FLEN)
NAN_BOXED(1053763182,32,FLEN)
NAN_BOXED(3201246830,32,FLEN)
NAN_BOXED(1045741558,32,FLEN)
NAN_BOXED(3193225206,32,FLEN)
NAN_BOXED(1045741558,32,FLEN)
NAN_BOXED(3193225206,32,FLEN)
NAN_BOXED(1045741558,32,FLEN)
NAN_BOXED(3193225206,32,FLEN)
NAN_BOXED(1045741558,32,FLEN)
NAN_BOXED(3193225206,32,FLEN)
NAN_BOXED(1045741558,32,FLEN)
NAN_BOXED(3193225206,32,FLEN)
NAN_BOXED(1059650801,32,FLEN)
NAN_BOXED(3207134449,32,FLEN)
NAN_BOXED(1059650801,32,FLEN)
NAN_BOXED(3207134449,32,FLEN)
NAN_BOXED(1059650801,32,FLEN)
NAN_BOXED(3207134449,32,FLEN)
NAN_BOXED(1059650801,32,FLEN)
NAN_BOXED(3207134449,32,FLEN)
NAN_BOXED(1059650801,32,FLEN)
NAN_BOXED(3207134449,32,FLEN)
NAN_BOXED(1061174899,32,FLEN)
NAN_BOXED(3208658547,32,FLEN)
NAN_BOXED(1061174899,32,FLEN)
NAN_BOXED(3208658547,32,FLEN)
NAN_BOXED(1061174899,32,FLEN)
NAN_BOXED(3208658547,32,FLEN)
NAN_BOXED(1061174899,32,FLEN)
NAN_BOXED(3208658547,32,FLEN)
NAN_BOXED(1061174899,32,FLEN)
NAN_BOXED(3208658547,32,FLEN)
NAN_BOXED(1062609222,32,FLEN)
NAN_BOXED(3210092870,32,FLEN)
NAN_BOXED(1062609222,32,FLEN)
NAN_BOXED(3210092870,32,FLEN)
NAN_BOXED(1062609222,32,FLEN)
NAN_BOXED(3210092870,32,FLEN)
NAN_BOXED(1062609222,32,FLEN)
NAN_BOXED(3210092870,32,FLEN)
NAN_BOXED(1062609222,32,FLEN)
NAN_BOXED(3210092870,32,FLEN)
NAN_BOXED(1060492991,32,FLEN)
NAN_BOXED(3207976639,32,FLEN)
NAN_BOXED(1060492991,32,FLEN)
NAN_BOXED(3207976639,32,FLEN)
NAN_BOXED(1060492991,32,FLEN)
NAN_BOXED(3207976639,32,FLEN)
NAN_BOXED(1060492991,32,FLEN)
NAN_BOXED(3207976639,32,FLEN)
NAN_BOXED(1060492991,32,FLEN)
NAN_BOXED(3207976639,32,FLEN)
NAN_BOXED(1054482190,32,FLEN)
NAN_BOXED(3201965838,32,FLEN)
NAN_BOXED(1054482190,32,FLEN)
NAN_BOXED(3201965838,32,FLEN)
NAN_BOXED(1054482190,32,FLEN)
NAN_BOXED(3201965838,32,FLEN)
NAN_BOXED(1054482190,32,FLEN)
NAN_BOXED(3201965838,32,FLEN)
NAN_BOXED(1054482190,32,FLEN)
NAN_BOXED(3201965838,32,FLEN)
NAN_BOXED(1055911810,32,FLEN)
NAN_BOXED(3203395458,32,FLEN)
NAN_BOXED(1055911810,32,FLEN)
NAN_BOXED(3203395458,32,FLEN)
NAN_BOXED(1055911810,32,FLEN)
NAN_BOXED(3203395458,32,FLEN)
NAN_BOXED(1055911810,32,FLEN)
NAN_BOXED(3203395458,32,FLEN)
NAN_BOXED(1055911810,32,FLEN)
NAN_BOXED(3203395458,32,FLEN)
NAN_BOXED(1052448382,32,FLEN)
NAN_BOXED(3199932030,32,FLEN)
NAN_BOXED(1052448382,32,FLEN)
NAN_BOXED(3199932030,32,FLEN)
NAN_BOXED(1052448382,32,FLEN)
NAN_BOXED(3199932030,32,FLEN)
NAN_BOXED(1052448382,32,FLEN)
NAN_BOXED(3199932030,32,FLEN)
NAN_BOXED(1052448382,32,FLEN)
NAN_BOXED(3199932030,32,FLEN)
NAN_BOXED(1046660024,32,FLEN)
NAN_BOXED(3194143672,32,FLEN)
NAN_BOXED(1046660024,32,FLEN)
NAN_BOXED(3194143672,32,FLEN)
NAN_BOXED(1046660024,32,FLEN)
NAN_BOXED(3194143672,32,FLEN)
NAN_BOXED(1046660024,32,FLEN)
NAN_BOXED(3194143672,32,FLEN)
NAN_BOXED(1046660024,32,FLEN)
NAN_BOXED(3194143672,32,FLEN)
NAN_BOXED(1060450004,32,FLEN)
NAN_BOXED(3207933652,32,FLEN)
NAN_BOXED(1060450004,32,FLEN)
NAN_BOXED(3207933652,32,FLEN)
NAN_BOXED(1060450004,32,FLEN)
NAN_BOXED(3207933652,32,FLEN)
NAN_BOXED(1060450004,32,FLEN)
NAN_BOXED(3207933652,32,FLEN)
NAN_BOXED(1060450004,32,FLEN)
NAN_BOXED(3207933652,32,FLEN)
NAN_BOXED(1052642431,32,FLEN)
NAN_BOXED(3200126079,32,FLEN)
NAN_BOXED(1052642431,32,FLEN)
NAN_BOXED(3200126079,32,FLEN)
NAN_BOXED(1052642431,32,FLEN)
NAN_BOXED(3200126079,32,FLEN)
NAN_BOXED(1052642431,32,FLEN)
NAN_BOXED(3200126079,32,FLEN)
NAN_BOXED(1052642431,32,FLEN)
NAN_BOXED(3200126079,32,FLEN)
NAN_BOXED(1050353313,32,FLEN)
NAN_BOXED(3197836961,32,FLEN)
NAN_BOXED(1050353313,32,FLEN)
NAN_BOXED(3197836961,32,FLEN)
NAN_BOXED(1050353313,32,FLEN)
NAN_BOXED(3197836961,32,FLEN)
NAN_BOXED(1050353313,32,FLEN)
NAN_BOXED(3197836961,32,FLEN)
NAN_BOXED(1050353313,32,FLEN)
NAN_BOXED(3197836961,32,FLEN)
NAN_BOXED(1053909058,32,FLEN)
NAN_BOXED(3201392706,32,FLEN)
NAN_BOXED(1053909058,32,FLEN)
NAN_BOXED(3201392706,32,FLEN)
NAN_BOXED(1053909058,32,FLEN)
NAN_BOXED(3201392706,32,FLEN)
NAN_BOXED(1053909058,32,FLEN)
NAN_BOXED(3201392706,32,FLEN)
NAN_BOXED(1053909058,32,FLEN)
NAN_BOXED(3201392706,32,FLEN)
NAN_BOXED(1051318793,32,FLEN)
NAN_BOXED(3198802441,32,FLEN)
NAN_BOXED(1051318793,32,FLEN)
NAN_BOXED(3198802441,32,FLEN)
NAN_BOXED(1051318793,32,FLEN)
NAN_BOXED(3198802441,32,FLEN)
NAN_BOXED(1051318793,32,FLEN)
NAN_BOXED(3198802441,32,FLEN)
NAN_BOXED(1051318793,32,FLEN)
NAN_BOXED(3198802441,32,FLEN)
NAN_BOXED(1057423203,32,FLEN)
NAN_BOXED(3204906851,32,FLEN)
NAN_BOXED(1057423203,32,FLEN)
NAN_BOXED(3204906851,32,FLEN)
NAN_BOXED(1057423203,32,FLEN)
NAN_BOXED(3204906851,32,FLEN)
NAN_BOXED(1057423203,32,FLEN)
NAN_BOXED(3204906851,32,FLEN)
NAN_BOXED(1057423203,32,FLEN)
NAN_BOXED(3204906851,32,FLEN)
NAN_BOXED(1057355261,32,FLEN)
NAN_BOXED(3204838909,32,FLEN)
NAN_BOXED(1057355261,32,FLEN)
NAN_BOXED(3204838909,32,FLEN)
NAN_BOXED(1057355261,32,FLEN)
NAN_BOXED(3204838909,32,FLEN)
NAN_BOXED(1057355261,32,FLEN)
NAN_BOXED(3204838909,32,FLEN)
NAN_BOXED(1057355261,32,FLEN)
NAN_BOXED(3204838909,32,FLEN)
NAN_BOXED(1060014031,32,FLEN)
NAN_BOXED(3207497679,32,FLEN)
NAN_BOXED(1060014031,32,FLEN)
NAN_BOXED(3207497679,32,FLEN)
NAN_BOXED(1060014031,32,FLEN)
NAN_BOXED(3207497679,32,FLEN)
NAN_BOXED(1060014031,32,FLEN)
NAN_BOXED(3207497679,32,FLEN)
NAN_BOXED(1060014031,32,FLEN)
NAN_BOXED(3207497679,32,FLEN)
NAN_BOXED(1064342856,32,FLEN)
NAN_BOXED(3211826504,32,FLEN)
NAN_BOXED(1064342856,32,FLEN)
NAN_BOXED(3211826504,32,FLEN)
NAN_BOXED(1064342856,32,FLEN)
NAN_BOXED(3211826504,32,FLEN)
NAN_BOXED(1064342856,32,FLEN)
NAN_BOXED(3211826504,32,FLEN)
NAN_BOXED(1064342856,32,FLEN)
NAN_BOXED(3211826504,32,FLEN)
NAN_BOXED(1048736736,32,FLEN)
NAN_BOXED(3196220384,32,FLEN)
NAN_BOXED(1048736736,32,FLEN)
NAN_BOXED(3196220384,32,FLEN)
NAN_BOXED(1048736736,32,FLEN)
NAN_BOXED(3196220384,32,FLEN)
NAN_BOXED(1048736736,32,FLEN)
NAN_BOXED(3196220384,32,FLEN)
NAN_BOXED(1048736736,32,FLEN)
NAN_BOXED(3196220384,32,FLEN)
NAN_BOXED(1052899750,32,FLEN)
NAN_BOXED(3200383398,32,FLEN)
NAN_BOXED(1052899750,32,FLEN)
NAN_BOXED(3200383398,32,FLEN)
NAN_BOXED(1052899750,32,FLEN)
NAN_BOXED(3200383398,32,FLEN)
NAN_BOXED(1052899750,32,FLEN)
NAN_BOXED(3200383398,32,FLEN)
NAN_BOXED(1052899750,32,FLEN)
NAN_BOXED(3200383398,32,FLEN)
NAN_BOXED(1057442274,32,FLEN)
NAN_BOXED(3204925922,32,FLEN)
NAN_BOXED(1057442274,32,FLEN)
NAN_BOXED(3204925922,32,FLEN)
NAN_BOXED(1057442274,32,FLEN)
NAN_BOXED(3204925922,32,FLEN)
NAN_BOXED(1057442274,32,FLEN)
NAN_BOXED(3204925922,32,FLEN)
NAN_BOXED(1057442274,32,FLEN)
NAN_BOXED(3204925922,32,FLEN)
NAN_BOXED(1065183596,32,FLEN)
NAN_BOXED(3212667244,32,FLEN)
NAN_BOXED(1065183596,32,FLEN)
NAN_BOXED(3212667244,32,FLEN)
NAN_BOXED(1065183596,32,FLEN)
NAN_BOXED(3212667244,32,FLEN)
NAN_BOXED(1065183596,32,FLEN)
NAN_BOXED(3212667244,32,FLEN)
NAN_BOXED(1065183596,32,FLEN)
NAN_BOXED(3212667244,32,FLEN)
NAN_BOXED(1064238255,32,FLEN)
NAN_BOXED(3211721903,32,FLEN)
NAN_BOXED(1064238255,32,FLEN)
NAN_BOXED(3211721903,32,FLEN)
NAN_BOXED(1064238255,32,FLEN)
NAN_BOXED(3211721903,32,FLEN)
NAN_BOXED(1064238255,32,FLEN)
NAN_BOXED(3211721903,32,FLEN)
NAN_BOXED(1064238255,32,FLEN)
NAN_BOXED(3211721903,32,FLEN)
NAN_BOXED(1050713534,32,FLEN)
NAN_BOXED(3198197182,32,FLEN)
NAN_BOXED(1050713534,32,FLEN)
NAN_BOXED(3198197182,32,FLEN)
NAN_BOXED(1050713534,32,FLEN)
NAN_BOXED(3198197182,32,FLEN)
NAN_BOXED(1050713534,32,FLEN)
NAN_BOXED(3198197182,32,FLEN)
NAN_BOXED(1050713534,32,FLEN)
NAN_BOXED(3198197182,32,FLEN)
NAN_BOXED(1051293654,32,FLEN)
NAN_BOXED(3198777302,32,FLEN)
NAN_BOXED(1051293654,32,FLEN)
NAN_BOXED(3198777302,32,FLEN)
NAN_BOXED(1051293654,32,FLEN)
NAN_BOXED(3198777302,32,FLEN)
NAN_BOXED(1051293654,32,FLEN)
NAN_BOXED(3198777302,32,FLEN)
NAN_BOXED(1051293654,32,FLEN)
NAN_BOXED(3198777302,32,FLEN)
NAN_BOXED(1064662366,32,FLEN)
NAN_BOXED(3212146014,32,FLEN)
NAN_BOXED(1064662366,32,FLEN)
NAN_BOXED(3212146014,32,FLEN)
NAN_BOXED(1064662366,32,FLEN)
NAN_BOXED(3212146014,32,FLEN)
NAN_BOXED(1064662366,32,FLEN)
NAN_BOXED(3212146014,32,FLEN)
NAN_BOXED(1064662366,32,FLEN)
NAN_BOXED(3212146014,32,FLEN)
NAN_BOXED(967120314,32,FLEN)
NAN_BOXED(3114603962,32,FLEN)
NAN_BOXED(967120314,32,FLEN)
NAN_BOXED(3114603962,32,FLEN)
NAN_BOXED(967120314,32,FLEN)
NAN_BOXED(3114603962,32,FLEN)
NAN_BOXED(967120314,32,FLEN)
NAN_BOXED(3114603962,32,FLEN)
NAN_BOXED(967120314,32,FLEN)
NAN_BOXED(3114603962,32,FLEN)
NAN_BOXED(1050264264,32,FLEN)
NAN_BOXED(3197747912,32,FLEN)
NAN_BOXED(1050264264,32,FLEN)
NAN_BOXED(3197747912,32,FLEN)
NAN_BOXED(1050264264,32,FLEN)
NAN_BOXED(3197747912,32,FLEN)
NAN_BOXED(1050264264,32,FLEN)
NAN_BOXED(3197747912,32,FLEN)
NAN_BOXED(1050264264,32,FLEN)
NAN_BOXED(3197747912,32,FLEN)
NAN_BOXED(1061550038,32,FLEN)
NAN_BOXED(3209033686,32,FLEN)
NAN_BOXED(1061550038,32,FLEN)
NAN_BOXED(3209033686,32,FLEN)
NAN_BOXED(1061550038,32,FLEN)
NAN_BOXED(3209033686,32,FLEN)
NAN_BOXED(1061550038,32,FLEN)
NAN_BOXED(3209033686,32,FLEN)
NAN_BOXED(1061550038,32,FLEN)
NAN_BOXED(3209033686,32,FLEN)
NAN_BOXED(1042239456,32,FLEN)
NAN_BOXED(3189723104,32,FLEN)
NAN_BOXED(1042239456,32,FLEN)
NAN_BOXED(3189723104,32,FLEN)
NAN_BOXED(1060624761,32,FLEN)
NAN_BOXED(3208108409,32,FLEN)
NAN_BOXED(1060624761,32,FLEN)
NAN_BOXED(3208108409,32,FLEN)
NAN_BOXED(1060624761,32,FLEN)
NAN_BOXED(3208108409,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_12:
    .fill 248*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
