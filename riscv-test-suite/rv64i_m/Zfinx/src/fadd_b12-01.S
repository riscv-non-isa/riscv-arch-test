
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:36:13 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fadd.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fadd_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fadd_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31,fs1 == 1 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x31; op2:x31; dest:x31; op1val:0xff222105; op2val:0xff222105; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x31, x31, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x28, rd==x30,fs1 == 1 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x027635 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x29; op2:x28; dest:x30; op1val:0xfea17fdd; op2val:0x7f027635; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x30, x29, x28, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x29,fs1 == 1 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2fe97e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x30; dest:x29; op1val:0xfec45459; op2val:0xfec45459; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x29, x30, x30, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2, rs1==x28, rs2==x29, rd==x28,fs1 == 1 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x50b9b1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x28; op2:x29; dest:x28; op1val:0xff167d44; op2val:0x7f50b9b1; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x28, x28, x29, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x27, rd==x27,fs1 == 1 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4b8415 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x26; op2:x27; dest:x27; op1val:0xfeb70362; op2val:0x7f4b8415; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x27, x26, x27, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26,fs1 == 1 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x27; op2:x25; dest:x26; op1val:0xff2e5b90; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x26, x27, x25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 1 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x473a2e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x24; op2:x26; dest:x25; op1val:0xfe587392; op2val:0x7f473a2e; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x25, x24, x26, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24,fs1 == 1 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x26d2f5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x25; op2:x23; dest:x24; op1val:0xfeed7424; op2val:0x7f26d2f5; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x24, x25, x23, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23,fs1 == 1 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x22; op2:x24; dest:x23; op1val:0xff2eabd8; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x23, x22, x24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22,fs1 == 1 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x23; op2:x21; dest:x22; op1val:0xff1b8fcb; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x22, x23, x21, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21,fs1 == 1 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x47ad0f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x20; op2:x22; dest:x21; op1val:0xfe6e317d; op2val:0x7f47ad0f; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x21, x20, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20,fs1 == 1 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x21; op2:x19; dest:x20; op1val:0xff2c93b2; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x20, x21, x19, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 1 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5bf8d8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x18; op2:x20; dest:x19; op1val:0xfeb54d84; op2val:0x7edbf8d8; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x19, x18, x20, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18,fs1 == 1 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x48a6ba and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x19; op2:x17; dest:x18; op1val:0xfea6b8d3; op2val:0x7f48a6ba; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x18, x19, x17, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17,fs1 == 1 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x16; op2:x18; dest:x17; op1val:0xff2f4c51; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x17, x16, x18, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16,fs1 == 1 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x17; op2:x15; dest:x16; op1val:0xfeb72bf7; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x16, x17, x15, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15,fs1 == 1 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4c9471 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x14; op2:x16; dest:x15; op1val:0xfe480ede; op2val:0x7f4c9471; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x15, x14, x16, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14,fs1 == 1 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5817b0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x15; op2:x13; dest:x14; op1val:0xfed2b355; op2val:0x7ed817b0; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x14, x15, x13, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 1 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 0 and fe2 == 0xfe and fm2 == 0x56c1e5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x12; op2:x14; dest:x13; op1val:0xff0a2eec; op2val:0x7f56c1e5; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x13, x12, x14, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12,fs1 == 1 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x13; op2:x11; dest:x12; op1val:0xff1e5ec7; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x12, x13, x11, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11,fs1 == 1 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3df905 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x10; op2:x12; dest:x11; op1val:0xfa60affa; op2val:0x7ebdf905; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x11, x10, x12, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10,fs1 == 1 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x55691d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x11; op2:x9; dest:x10; op1val:0xff269468; op2val:0x7f55691d; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x10, x11, x9, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x11,test_dataset_1)

inst_22:
// rs1==x8, rs2==x10, rd==x9,fs1 == 1 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x6591d8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x8; op2:x10; dest:x9; op1val:0xfe79c1c6; op2val:0x7f6591d8; 
   valaddr_reg:x11; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x9, x8, x10, dyn, 0, 0, x11, 0*FLEN/8, x12, x1, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8,fs1 == 1 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11a59d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x9; op2:x7; dest:x8; op1val:0xfe12bd51; op2val:0x7f11a59d; 
   valaddr_reg:x11; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x8, x9, x7, dyn, 0, 0, x11, 2*FLEN/8, x12, x1, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 1 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x6794fc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x6; op2:x8; dest:x7; op1val:0xfe3741cc; op2val:0x7f6794fc; 
   valaddr_reg:x11; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x7, x6, x8, dyn, 0, 0, x11, 4*FLEN/8, x12, x1, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x7, rs2==x5, rd==x6,fs1 == 1 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x703879 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x7; op2:x5; dest:x6; op1val:0xff1a35e0; op2val:0x7f703879; 
   valaddr_reg:x11; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x6, x7, x5, dyn, 0, 0, x11, 6*FLEN/8, x12, x8, x9)

inst_26:
// rs1==x4, rs2==x6, rd==x5,fs1 == 1 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x19caca and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x4; op2:x6; dest:x5; op1val:0xfd772129; op2val:0x7e99caca; 
   valaddr_reg:x11; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x5, x4, x6, dyn, 0, 0, x11, 8*FLEN/8, x12, x8, x9)

inst_27:
// rs1==x5, rs2==x3, rd==x4,fs1 == 1 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x5; op2:x3; dest:x4; op1val:0xfec30c98; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x4, x5, x3, dyn, 0, 0, x11, 10*FLEN/8, x12, x8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3,fs1 == 1 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d9098 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x2; op2:x4; dest:x3; op1val:0xfda78349; op2val:0x7efd9098; 
   valaddr_reg:x11; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x3, x2, x4, dyn, 0, 0, x11, 12*FLEN/8, x12, x8, x9)

inst_29:
// rs1==x3, rs2==x1, rd==x2,fs1 == 1 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x70c4b8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x3; op2:x1; dest:x2; op1val:0xff07a8e7; op2val:0x7f70c4b8; 
   valaddr_reg:x11; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x2, x3, x1, dyn, 0, 0, x11, 14*FLEN/8, x12, x8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 1 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x1, x0, x2, dyn, 0, 0, x11, 16*FLEN/8, x12, x8, x9)

inst_31:
// rs1==x1,fs1 == 1 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x1; op2:x30; dest:x31; op1val:0xff390e97; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x1, x30, dyn, 0, 0, x11, 18*FLEN/8, x12, x8, x9)

inst_32:
// rs2==x0,fs1 == 1 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4642a7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x0; dest:x31; op1val:0xfee1a51b; op2val:0x0; 
   valaddr_reg:x11; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x0, dyn, 0, 0, x11, 20*FLEN/8, x12, x8, x9)

inst_33:
// rd==x0,fs1 == 1 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c6359 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x31; op2:x30; dest:x0; op1val:0xfee4f961; op2val:0x7f3c6359; 
   valaddr_reg:x11; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x0, x31, x30, dyn, 0, 0, x11, 22*FLEN/8, x12, x8, x9)

inst_34:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2644ac and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfedd0ccb; op2val:0x7f2644ac; 
   valaddr_reg:x11; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 24*FLEN/8, x12, x8, x9)

inst_35:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x106e2e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfe1173d9; op2val:0x7e906e2e; 
   valaddr_reg:x11; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 26*FLEN/8, x12, x8, x9)

inst_36:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x73bb25 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfeeb4e0d; op2val:0x7f73bb25; 
   valaddr_reg:x11; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 28*FLEN/8, x12, x8, x9)

inst_37:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x597afe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfeb6fce6; op2val:0x7ed97afe; 
   valaddr_reg:x11; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 30*FLEN/8, x12, x8, x9)

inst_38:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff1175bf; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 32*FLEN/8, x12, x8, x9)

inst_39:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff314a05; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 34*FLEN/8, x12, x8, x9)

inst_40:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff2c7300; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 36*FLEN/8, x12, x8, x9)

inst_41:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32ec8c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfecf9722; op2val:0x7f32ec8c; 
   valaddr_reg:x11; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 38*FLEN/8, x12, x8, x9)

inst_42:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c560e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff076a16; op2val:0x7f3c560e; 
   valaddr_reg:x11; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 40*FLEN/8, x12, x8, x9)

inst_43:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff1bd52c; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 42*FLEN/8, x12, x8, x9)

inst_44:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff2bd8f4; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 44*FLEN/8, x12, x8, x9)

inst_45:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff365ad7; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 46*FLEN/8, x12, x8, x9)

inst_46:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x554674 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfead0427; op2val:0x7f554674; 
   valaddr_reg:x11; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 48*FLEN/8, x12, x8, x9)

inst_47:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff3f4810; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 50*FLEN/8, x12, x8, x9)

inst_48:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28224f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff185183; op2val:0x7f28224f; 
   valaddr_reg:x11; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 52*FLEN/8, x12, x8, x9)

inst_49:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x530d37 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfeeb4f07; op2val:0x7f530d37; 
   valaddr_reg:x11; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 54*FLEN/8, x12, x8, x9)

inst_50:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff222105; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 56*FLEN/8, x12, x8, x9)

inst_51:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2fe97e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfec45459; op2val:0x7f2fe97e; 
   valaddr_reg:x11; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 58*FLEN/8, x12, x8, x9)

inst_52:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xff1c60ac; op2val:0x7f7fffff; 
   valaddr_reg:x11; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 60*FLEN/8, x12, x8, x9)

inst_53:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4642a7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfee1a51b; op2val:0x7f4642a7; 
   valaddr_reg:x11; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 62*FLEN/8, x12, x8, x9)

inst_54:
// fs1 == 1 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c6359 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0xfee4f961; op2val:0x7f3c6359; 
   valaddr_reg:x11; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x11, 64*FLEN/8, x12, x8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(4280426757,64,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2130867765,64,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(4274279513,64,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2135996849,64,FLEN)
NAN_BOXED(4273406818,32,FLEN)
NAN_BOXED(2135655445,64,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2135374382,64,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2133250805,64,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2135403791,64,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2128345304,64,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2135467706,64,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2135725169,64,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2128091056,64,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2136392165,64,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2126379269,64,FLEN)
NAN_BOXED(4280718440,32,FLEN)
NAN_BOXED(2136303901,64,FLEN)
test_dataset_1:
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2137362904,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2131862941,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2137494780,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2138060921,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2124008138,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2130546840,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(2138096824,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2134664025,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2133214380,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2123394606,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2138290981,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2128182014,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2134043788,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2134660622,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2136295028,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2133336655,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2136149303,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2133846398,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2135311015,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2134664025,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 60*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
