
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:19:04 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fsub.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fsub_b10 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fsub_b10)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x30, rd==x31,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x178cde and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x31; op2:x30; dest:x31; op1val:0x78d35630; op2val:0x178cde;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x31, x31, x30, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x0fbd4b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x29; op2:x29; dest:x29; op1val:0x78d35630; op2val:0x78d35630;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x29, x29, x29, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x31, rd==x30,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x12 and fm2 == 0x33ac9e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x28; op2:x31; dest:x30; op1val:0x78d35630; op2val:0x933ac9e;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x30, x28, x31, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x28,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x15 and fm2 == 0x6097c5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x27; op2:x27; dest:x28; op1val:0x78d35630; op2val:0x78d35630;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x28, x27, x27, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x26, rd==x26,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x19 and fm2 == 0x0c5edb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x26; dest:x26; op1val:0x78d35630; op2val:0xc8c5edb;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x26, x30, x26, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x26, rs2==x28, rd==x27,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x1c and fm2 == 0x2f7692 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x26; op2:x28; dest:x27; op1val:0x78d35630; op2val:0xe2f7692;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x27, x26, x28, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x23, rd==x25,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x1f and fm2 == 0x5b5437 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x24; op2:x23; dest:x25; op1val:0x78d35630; op2val:0xfdb5437;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x25, x24, x23, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x23, rs2==x25, rd==x24,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x23 and fm2 == 0x0914a2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x23; op2:x25; dest:x24; op1val:0x78d35630; op2val:0x118914a2;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x24, x23, x25, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x25, rs2==x24, rd==x23,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x26 and fm2 == 0x2b59cb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x25; op2:x24; dest:x23; op1val:0x78d35630; op2val:0x132b59cb;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x23, x25, x24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x21, rs2==x20, rd==x22,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x29 and fm2 == 0x56303d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x21; op2:x20; dest:x22; op1val:0x78d35630; op2val:0x14d6303d;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x22, x21, x20, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x2d and fm2 == 0x05de26 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x20; op2:x22; dest:x21; op1val:0x78d35630; op2val:0x1685de26;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x21, x20, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x22, rs2==x21, rd==x20,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x30 and fm2 == 0x2755b0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x22; op2:x21; dest:x20; op1val:0x78d35630; op2val:0x182755b0;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x20, x22, x21, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x17, rd==x19,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x33 and fm2 == 0x512b1c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x18; op2:x17; dest:x19; op1val:0x78d35630; op2val:0x19d12b1c;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x19, x18, x17, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rs2==x19, rd==x18,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x37 and fm2 == 0x02baf1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x17; op2:x19; dest:x18; op1val:0x78d35630; op2val:0x1b82baf1;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x18, x17, x19, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x19, rs2==x18, rd==x17,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x3a and fm2 == 0x2369ae and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x19; op2:x18; dest:x17; op1val:0x78d35630; op2val:0x1d2369ae;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x17, x19, x18, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x14, rd==x16,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x3d and fm2 == 0x4c4419 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x15; op2:x14; dest:x16; op1val:0x78d35630; op2val:0x1ecc4419;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x16, x15, x14, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x40 and fm2 == 0x7f5520 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x14; op2:x16; dest:x15; op1val:0x78d35630; op2val:0x207f5520;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x15, x14, x16, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x16, rs2==x15, rd==x14,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x44 and fm2 == 0x1f9534 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x16; op2:x15; dest:x14; op1val:0x78d35630; op2val:0x221f9534;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x14, x16, x15, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x11, rd==x13,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x47 and fm2 == 0x477a81 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x12; op2:x11; dest:x13; op1val:0x78d35630; op2val:0x23c77a81;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x13, x12, x11, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x11, rs2==x13, rd==x12,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x795921 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x11; op2:x13; dest:x12; op1val:0x78d35630; op2val:0x25795921;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x12, x11, x13, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x13, rs2==x12, rd==x11,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x4e and fm2 == 0x1bd7b4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x13; op2:x12; dest:x11; op1val:0x78d35630; op2val:0x271bd7b4;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x11, x13, x12, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x9, rs2==x8, rd==x10,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x51 and fm2 == 0x42cda2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x9; op2:x8; dest:x10; op1val:0x78d35630; op2val:0x28c2cda2;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x10, x9, x8, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x11,test_dataset_1)

inst_22:
// rs1==x8, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x54 and fm2 == 0x73810a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x8; op2:x10; dest:x9; op1val:0x78d35630; op2val:0x2a73810a;
   valaddr_reg:x11; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x9, x8, x10, dyn, 0, 0, x11, 0*FLEN/8, x12, x1, x2)

inst_23:
// rs1==x10, rs2==x9, rd==x8,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x58 and fm2 == 0x1830a6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x10; op2:x9; dest:x8; op1val:0x78d35630; op2val:0x2c1830a6;
   valaddr_reg:x11; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x8, x10, x9, dyn, 0, 0, x11, 2*FLEN/8, x12, x1, x2)

inst_24:
// rs1==x6, rs2==x5, rd==x7,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x5b and fm2 == 0x3e3cd0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x6; op2:x5; dest:x7; op1val:0x78d35630; op2val:0x2dbe3cd0;
   valaddr_reg:x11; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x7, x6, x5, dyn, 0, 0, x11, 4*FLEN/8, x12, x1, x2)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x5, rs2==x7, rd==x6,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x5e and fm2 == 0x6dcc04 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x5; op2:x7; dest:x6; op1val:0x78d35630; op2val:0x2f6dcc04;
   valaddr_reg:x11; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x6, x5, x7, dyn, 0, 0, x11, 6*FLEN/8, x12, x8, x9)

inst_26:
// rs1==x7, rs2==x6, rd==x5,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x62 and fm2 == 0x149f82 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x7; op2:x6; dest:x5; op1val:0x78d35630; op2val:0x31149f82;
   valaddr_reg:x11; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x5, x7, x6, dyn, 0, 0, x11, 8*FLEN/8, x12, x8, x9)

inst_27:
// rs1==x3, rs2==x2, rd==x4,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x65 and fm2 == 0x39c763 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x3; op2:x2; dest:x4; op1val:0x78d35630; op2val:0x32b9c763;
   valaddr_reg:x11; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x4, x3, x2, dyn, 0, 0, x11, 10*FLEN/8, x12, x8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x68 and fm2 == 0x68393c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x2; op2:x4; dest:x3; op1val:0x78d35630; op2val:0x3468393c;
   valaddr_reg:x11; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x3, x2, x4, dyn, 0, 0, x11, 12*FLEN/8, x12, x8, x9)

inst_29:
// rs1==x4, rs2==x3, rd==x2,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x1123c5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x4; op2:x3; dest:x2; op1val:0x78d35630; op2val:0x361123c5;
   valaddr_reg:x11; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x2, x4, x3, dyn, 0, 0, x11, 14*FLEN/8, x12, x8, x9)

inst_30:
// rs1==x1,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x356cb7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x1; op2:x30; dest:x31; op1val:0x78d35630; op2val:0x37b56cb7;
   valaddr_reg:x11; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x1, x30, dyn, 0, 0, x11, 16*FLEN/8, x12, x8, x9)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x62c7e4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x0; op2:x30; dest:x31; op1val:0x0; op2val:0x3962c7e4;
   valaddr_reg:x11; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x0, x30, dyn, 0, 0, x11, 18*FLEN/8, x12, x8, x9)

inst_32:
// rs2==x1,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x0dbcef and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x1; dest:x31; op1val:0x78d35630; op2val:0x3b0dbcef;
   valaddr_reg:x11; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x1, dyn, 0, 0, x11, 20*FLEN/8, x12, x8, x9)

inst_33:
// rs2==x0,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x312c2a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x0; dest:x31; op1val:0x78d35630; op2val:0x0;
   valaddr_reg:x11; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x0, dyn, 0, 0, x11, 22*FLEN/8, x12, x8, x9)

inst_34:
// rd==x1,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d7735 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x31; op2:x30; dest:x1; op1val:0x78d35630; op2val:0x3e5d7735;
   valaddr_reg:x11; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x1, x31, x30, dyn, 0, 0, x11, 24*FLEN/8, x12, x8, x9)

inst_35:
// rd==x0,fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0a6a81 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x31; op2:x30; dest:x0; op1val:0x78d35630; op2val:0x400a6a81;
   valaddr_reg:x11; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x0, x31, x30, dyn, 0, 0, x11, 26*FLEN/8, x12, x8, x9)

inst_36:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x2d0521 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x41ad0521;
   valaddr_reg:x11; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 28*FLEN/8, x12, x8, x9)

inst_37:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x58466a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x4358466a;
   valaddr_reg:x11; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 30*FLEN/8, x12, x8, x9)

inst_38:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x072c02 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x45072c02;
   valaddr_reg:x11; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 32*FLEN/8, x12, x8, x9)

inst_39:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x28f703 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x46a8f703;
   valaddr_reg:x11; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 34*FLEN/8, x12, x8, x9)

inst_40:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x5334c3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x485334c3;
   valaddr_reg:x11; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 36*FLEN/8, x12, x8, x9)

inst_41:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x0400fa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x4a0400fa;
   valaddr_reg:x11; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 38*FLEN/8, x12, x8, x9)

inst_42:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x97 and fm2 == 0x250138 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x4ba50138;
   valaddr_reg:x11; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 40*FLEN/8, x12, x8, x9)

inst_43:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x9a and fm2 == 0x4e4187 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x4d4e4187;
   valaddr_reg:x11; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 42*FLEN/8, x12, x8, x9)

inst_44:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x9e and fm2 == 0x00e8f4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x4f00e8f4;
   valaddr_reg:x11; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 44*FLEN/8, x12, x8, x9)

inst_45:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xa1 and fm2 == 0x212331 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x50a12331;
   valaddr_reg:x11; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 46*FLEN/8, x12, x8, x9)

inst_46:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xa4 and fm2 == 0x496bfe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x52496bfe;
   valaddr_reg:x11; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 48*FLEN/8, x12, x8, x9)

inst_47:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xa7 and fm2 == 0x7bc6fd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x53fbc6fd;
   valaddr_reg:x11; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 50*FLEN/8, x12, x8, x9)

inst_48:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xab and fm2 == 0x1d5c5e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x559d5c5e;
   valaddr_reg:x11; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 52*FLEN/8, x12, x8, x9)

inst_49:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xae and fm2 == 0x44b376 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x5744b376;
   valaddr_reg:x11; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 54*FLEN/8, x12, x8, x9)

inst_50:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xb1 and fm2 == 0x75e053 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x58f5e053;
   valaddr_reg:x11; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 56*FLEN/8, x12, x8, x9)

inst_51:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xb5 and fm2 == 0x19ac34 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x5a99ac34;
   valaddr_reg:x11; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 58*FLEN/8, x12, x8, x9)

inst_52:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xb8 and fm2 == 0x401741 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x5c401741;
   valaddr_reg:x11; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 60*FLEN/8, x12, x8, x9)

inst_53:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xbb and fm2 == 0x701d11 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x5df01d11;
   valaddr_reg:x11; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 62*FLEN/8, x12, x8, x9)

inst_54:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xbf and fm2 == 0x16122b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x5f96122b;
   valaddr_reg:x11; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 64*FLEN/8, x12, x8, x9)

inst_55:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xc2 and fm2 == 0x3b96b5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x613b96b5;
   valaddr_reg:x11; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 66*FLEN/8, x12, x8, x9)

inst_56:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xc5 and fm2 == 0x6a7c63 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x62ea7c63;
   valaddr_reg:x11; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 68*FLEN/8, x12, x8, x9)

inst_57:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xc9 and fm2 == 0x128dbe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x64928dbe;
   valaddr_reg:x11; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 70*FLEN/8, x12, x8, x9)

inst_58:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xcc and fm2 == 0x37312d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x6637312d;
   valaddr_reg:x11; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 72*FLEN/8, x12, x8, x9)

inst_59:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xcf and fm2 == 0x64fd78 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x67e4fd78;
   valaddr_reg:x11; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 74*FLEN/8, x12, x8, x9)

inst_60:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xd3 and fm2 == 0x0f1e6b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x698f1e6b;
   valaddr_reg:x11; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 76*FLEN/8, x12, x8, x9)

inst_61:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xd6 and fm2 == 0x32e606 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x6b32e606;
   valaddr_reg:x11; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 78*FLEN/8, x12, x8, x9)

inst_62:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xd9 and fm2 == 0x5f9f88 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x6cdf9f88;
   valaddr_reg:x11; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 80*FLEN/8, x12, x8, x9)

inst_63:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xdd and fm2 == 0x0bc3b5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x6e8bc3b5;
   valaddr_reg:x11; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 82*FLEN/8, x12, x8, x9)

inst_64:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xe0 and fm2 == 0x2eb4a2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x702eb4a2;
   valaddr_reg:x11; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 84*FLEN/8, x12, x8, x9)

inst_65:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xe3 and fm2 == 0x5a61ca and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x71da61ca;
   valaddr_reg:x11; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 86*FLEN/8, x12, x8, x9)

inst_66:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xe7 and fm2 == 0x087d1e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x73887d1e;
   valaddr_reg:x11; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 88*FLEN/8, x12, x8, x9)

inst_67:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xea and fm2 == 0x2a9c66 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x752a9c66;
   valaddr_reg:x11; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 90*FLEN/8, x12, x8, x9)

inst_68:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xed and fm2 == 0x554380 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x76d54380;
   valaddr_reg:x11; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 92*FLEN/8, x12, x8, x9)

inst_69:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xf1 and fm2 == 0x054a30 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x78854a30;
   valaddr_reg:x11; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 94*FLEN/8, x12, x8, x9)

inst_70:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x7f7fffff;
   valaddr_reg:x11; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 96*FLEN/8, x12, x8, x9)

inst_71:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x0fbd4b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x78fbd4b;
   valaddr_reg:x11; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 98*FLEN/8, x12, x8, x9)

inst_72:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x15 and fm2 == 0x6097c5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0xae097c5;
   valaddr_reg:x11; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 100*FLEN/8, x12, x8, x9)

inst_73:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x62c7e4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x3962c7e4;
   valaddr_reg:x11; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 102*FLEN/8, x12, x8, x9)

inst_74:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x312c2a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x3cb12c2a;
   valaddr_reg:x11; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 104*FLEN/8, x12, x8, x9)

inst_75:
// fs1 == 0 and fe1 == 0xf1 and fm1 == 0x535630 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0a6a81 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x78d35630; op2val:0x400a6a81;
   valaddr_reg:x11; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x11, 106*FLEN/8, x12, x8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(1543390,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(154381470,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(210525915,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(237991570,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(266032183,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(294196386,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(321608139,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(349581373,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(377871910,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(405231024,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(433138460,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(461552369,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(488860078,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(516703257,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(545215776,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(572495156,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(600275585,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(628709665,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(656136116,64,FLEN)
NAN_BOXED(2027116080,64,FLEN)
NAN_BOXED(683855266,64,FLEN)
test_dataset_1:
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(712212746,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(739782822,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(767442128,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(795724804,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(823435138,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(851036003,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(879245628,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(907092933,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(934636727,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(962775012,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(990756079,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1046312757,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1074424449,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1101858081,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1129858666,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1158097922,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1185478403,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1213412547,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1241776378,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1269104952,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1296974215,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1325459700,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1352737585,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1380543486,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1409009405,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1436376158,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1464120182,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1492508755,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1520020532,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1547704129,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1576017169,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1603670571,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1631295157,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1659534435,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1687326142,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1714893101,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1743060344,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1770987115,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1798497798,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1826594696,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1854653365,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1882109090,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1910137290,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1938324766,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1965726822,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1993687936,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(2022001200,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(126860619,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(182491077,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(962775012,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1018244138,32,FLEN)
NAN_BOXED(2027116080,32,FLEN)
NAN_BOXED(1074424449,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 102*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
