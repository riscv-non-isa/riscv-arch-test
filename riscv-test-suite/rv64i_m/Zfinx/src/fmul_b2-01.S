
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:30:15 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fmul.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fmul_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fmul_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x31; dest:x31; op1val:0x8; op2val:0x3e000000;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x31, x30, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3a2e8c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x31; op2:x29; dest:x30; op1val:0xb; op2val:0x3e3a2e8c;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x30, x31, x29, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd != rs2, rs1==x29, rs2==x30, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3a2e8c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x29; op2:x30; dest:x29; op1val:0x16; op2val:0x3e3a2e8c;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x29, x29, x30, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e82fa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x28; op2:x28; dest:x28; op1val:0x56; op2val:0x56;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x28, x28, x28, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x783e10 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x26; op2:x26; dest:x27; op1val:0x21; op2val:0x21;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x27, x26, x26, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x124925 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x27; op2:x25; dest:x26; op1val:0x1c; op2val:0x3f924925;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x26, x27, x25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4ccccd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x24; op2:x27; dest:x25; op1val:0x5; op2val:0x414ccccd;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x25, x24, x27, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3a2e8c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x25; op2:x23; dest:x24; op1val:0x58; op2val:0x3fba2e8c;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x24, x25, x23, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x124925 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x22; op2:x24; dest:x23; op1val:0x38; op2val:0x40924925;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x23, x22, x24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x20a0a1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x23; op2:x21; dest:x22; op1val:0x33; op2val:0x4120a0a1;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x22, x23, x21, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x783e10 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x20; op2:x22; dest:x21; op1val:0x42; op2val:0x41783e10;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x21, x20, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6a0ea1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x21; op2:x19; dest:x20; op1val:0x46; op2val:0x41ea0ea1;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x20, x21, x19, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7c0fc1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x18; op2:x20; dest:x19; op1val:0x41; op2val:0x427c0fc1;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x19, x18, x20, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x4ccccd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x19; op2:x17; dest:x18; op1val:0x5; op2val:0x44cccccd;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x18, x19, x17, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x2e4c41 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x16; op2:x18; dest:x17; op1val:0x2f; op2val:0x43ae4c41;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x17, x16, x18, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x47ce0c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x17; op2:x15; dest:x16; op1val:0x29; op2val:0x4447ce0c;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x16, x17, x15, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x14f209 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x14; op2:x16; dest:x15; op1val:0x37; op2val:0x4494f209;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x15, x14, x16, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x3a2e8c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x15; op2:x13; dest:x14; op1val:0x16; op2val:0x45ba2e8c;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x14, x15, x13, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x321643 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x12; op2:x14; dest:x13; op1val:0x17; op2val:0x46321643;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x13, x12, x14, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x8d and fm2 == 0x088889 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x13; op2:x11; dest:x12; op1val:0x1e; op2val:0x46888889;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x12, x13, x11, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x321643 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x10; op2:x12; dest:x11; op1val:0x17; op2val:0x47321643;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x11, x10, x12, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x321643 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x11; op2:x9; dest:x10; op1val:0x17; op2val:0x47b21643;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x10, x11, x9, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x11,test_dataset_1)

inst_22:
// rs1==x8, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x783e10 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x8; op2:x10; dest:x9; op1val:0x42; op2val:0x47783e10;
   valaddr_reg:x11; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x9, x8, x10, dyn, 0, 0, x11, 0*FLEN/8, x12, x1, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x79 and fm2 == 0x2e4c41 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x9; op2:x7; dest:x8; op1val:0x2f; op2val:0xbcae4c41;
   valaddr_reg:x11; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x8, x9, x7, dyn, 0, 0, x11, 2*FLEN/8, x12, x1, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x3c5264 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x6; op2:x8; dest:x7; op1val:0x57; op2val:0xbcbc5264;
   valaddr_reg:x11; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x7, x6, x8, dyn, 0, 0, x11, 4*FLEN/8, x12, x1, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x7, rs2==x5, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2aaaab and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x7; op2:x5; dest:x6; op1val:0x18; op2val:0xbe2aaaab;
   valaddr_reg:x11; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x6, x7, x5, dyn, 0, 0, x11, 6*FLEN/8, x12, x8, x9)

inst_26:
// rs1==x4, rs2==x6, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x17b426 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x4; op2:x6; dest:x5; op1val:0x36; op2val:0xbe17b426;
   valaddr_reg:x11; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x5, x4, x6, dyn, 0, 0, x11, 8*FLEN/8, x12, x8, x9)

inst_27:
// rs1==x5, rs2==x3, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x70f0f1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x5; op2:x3; dest:x4; op1val:0x44; op2val:0xbe70f0f1;
   valaddr_reg:x11; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x4, x5, x3, dyn, 0, 0, x11, 10*FLEN/8, x12, x8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2e4c41 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x2; op2:x4; dest:x3; op1val:0x2f; op2val:0xbf2e4c41;
   valaddr_reg:x11; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x3, x2, x4, dyn, 0, 0, x11, 12*FLEN/8, x12, x8, x9)

inst_29:
// rs1==x3, rs2==x1, rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x321643 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x3; op2:x1; dest:x2; op1val:0x2e; op2val:0xbfb21643;
   valaddr_reg:x11; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x2, x3, x1, dyn, 0, 0, x11, 14*FLEN/8, x12, x8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0d3dcb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0xc00d3dcb;
   valaddr_reg:x11; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x1, x0, x2, dyn, 0, 0, x11, 16*FLEN/8, x12, x8, x9)

inst_31:
// rs1==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x28e83f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x1; op2:x30; dest:x31; op1val:0x61; op2val:0xc028e83f;
   valaddr_reg:x11; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x1, x30, dyn, 0, 0, x11, 18*FLEN/8, x12, x8, x9)

inst_32:
// rs2==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x321643 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x0; dest:x31; op1val:0x5c; op2val:0x0;
   valaddr_reg:x11; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x0, dyn, 0, 0, x11, 20*FLEN/8, x12, x8, x9)

inst_33:
// rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x088889 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x31; op2:x30; dest:x0; op1val:0x3c; op2val:0xc1888889;
   valaddr_reg:x11; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x0, x31, x30, dyn, 0, 0, x11, 22*FLEN/8, x12, x8, x9)

inst_34:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x70f0f1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x44; op2val:0xc1f0f0f1;
   valaddr_reg:x11; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 24*FLEN/8, x12, x8, x9)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x85 and fm2 == 0x020821 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f; op2val:0xc2820821;
   valaddr_reg:x11; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 26*FLEN/8, x12, x8, x9)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x40; op2val:0xc3000000;
   valaddr_reg:x11; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 28*FLEN/8, x12, x8, x9)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x783e10 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x42; op2val:0xc3783e10;
   valaddr_reg:x11; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 30*FLEN/8, x12, x8, x9)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x40c0c1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x55; op2val:0xc3c0c0c1;
   valaddr_reg:x11; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 32*FLEN/8, x12, x8, x9)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x89 and fm2 == 0x088889 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c; op2val:0xc4888889;
   valaddr_reg:x11; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 34*FLEN/8, x12, x8, x9)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x607038 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x49; op2val:0xc4e07038;
   valaddr_reg:x11; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 36*FLEN/8, x12, x8, x9)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x638e39 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x48; op2val:0xc5638e39;
   valaddr_reg:x11; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 38*FLEN/8, x12, x8, x9)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x8c and fm2 == 0x0ad8f3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3b; op2val:0xc60ad8f3;
   valaddr_reg:x11; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 40*FLEN/8, x12, x8, x9)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x40c0c1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x55; op2val:0xc640c0c1;
   valaddr_reg:x11; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 42*FLEN/8, x12, x8, x9)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x8e and fm2 == 0x430c31 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x2a; op2val:0xc7430c31;
   valaddr_reg:x11; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 44*FLEN/8, x12, x8, x9)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x3a2e8c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x16; op2val:0xc83a2e8c;
   valaddr_reg:x11; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 46*FLEN/8, x12, x8, x9)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffbc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800023; op2val:0x3f7fffbc;
   valaddr_reg:x11; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 48*FLEN/8, x12, x8, x9)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff88 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80003e; op2val:0x3f7fff88;
   valaddr_reg:x11; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 50*FLEN/8, x12, x8, x9)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000027 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffba and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800027; op2val:0x3f7fffba;
   valaddr_reg:x11; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 52*FLEN/8, x12, x8, x9)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff8e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800041; op2val:0x3f7fff8e;
   valaddr_reg:x11; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 54*FLEN/8, x12, x8, x9)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff9a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800043; op2val:0x3f7fff9a;
   valaddr_reg:x11; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 56*FLEN/8, x12, x8, x9)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff98 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800054; op2val:0x3f7fff98;
   valaddr_reg:x11; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 58*FLEN/8, x12, x8, x9)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffe8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004c; op2val:0x3f7fffe8;
   valaddr_reg:x11; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 60*FLEN/8, x12, x8, x9)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000058 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800028; op2val:0x3f800058;
   valaddr_reg:x11; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 62*FLEN/8, x12, x8, x9)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0000e5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80001b; op2val:0x3f8000e5;
   valaddr_reg:x11; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 64*FLEN/8, x12, x8, x9)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0001be and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800042; op2val:0x3f8001be;
   valaddr_reg:x11; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 66*FLEN/8, x12, x8, x9)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0003a8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800058; op2val:0x3f8003a8;
   valaddr_reg:x11; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 68*FLEN/8, x12, x8, x9)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0007f6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000a; op2val:0x3f8007f6;
   valaddr_reg:x11; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 70*FLEN/8, x12, x8, x9)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000fa3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80005d; op2val:0x3f800fa3;
   valaddr_reg:x11; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 72*FLEN/8, x12, x8, x9)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x001fe7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800019; op2val:0x3f801fe7;
   valaddr_reg:x11; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 74*FLEN/8, x12, x8, x9)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x003ff2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000e; op2val:0x3f803ff2;
   valaddr_reg:x11; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 76*FLEN/8, x12, x8, x9)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x007fb6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004a; op2val:0x3f807fb6;
   valaddr_reg:x11; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 78*FLEN/8, x12, x8, x9)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00fff9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800007; op2val:0x3f80fff9;
   valaddr_reg:x11; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 80*FLEN/8, x12, x8, x9)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01ffb3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004c; op2val:0x3f81ffb3;
   valaddr_reg:x11; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 82*FLEN/8, x12, x8, x9)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03ffa5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800058; op2val:0x3f83ffa5;
   valaddr_reg:x11; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 84*FLEN/8, x12, x8, x9)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x07ff99 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800061; op2val:0x3f87ff99;
   valaddr_reg:x11; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 86*FLEN/8, x12, x8, x9)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0fffec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800012; op2val:0x3f8fffec;
   valaddr_reg:x11; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 88*FLEN/8, x12, x8, x9)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1fffd8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800020; op2val:0x3f9fffd8;
   valaddr_reg:x11; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 90*FLEN/8, x12, x8, x9)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffff4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800008; op2val:0x3fbffff4;
   valaddr_reg:x11; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 92*FLEN/8, x12, x8, x9)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff4a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80005c; op2val:0xbf7fff4a;
   valaddr_reg:x11; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 94*FLEN/8, x12, x8, x9)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffffa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800005; op2val:0xbf7ffffa;
   valaddr_reg:x11; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 96*FLEN/8, x12, x8, x9)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffaa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80002f; op2val:0xbf7fffaa;
   valaddr_reg:x11; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 98*FLEN/8, x12, x8, x9)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffe2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800017; op2val:0xbf7fffe2;
   valaddr_reg:x11; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 100*FLEN/8, x12, x8, x9)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff72 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800057; op2val:0xbf7fff72;
   valaddr_reg:x11; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 102*FLEN/8, x12, x8, x9)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000015 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000b; op2val:0xbf800015;
   valaddr_reg:x11; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 104*FLEN/8, x12, x8, x9)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000037 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800009; op2val:0xbf800037;
   valaddr_reg:x11; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 106*FLEN/8, x12, x8, x9)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00007a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800006; op2val:0xbf80007a;
   valaddr_reg:x11; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 108*FLEN/8, x12, x8, x9)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0000fd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800003; op2val:0xbf8000fd;
   valaddr_reg:x11; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 110*FLEN/8, x12, x8, x9)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0001df and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800021; op2val:0xbf8001df;
   valaddr_reg:x11; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 112*FLEN/8, x12, x8, x9)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0003eb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800015; op2val:0xbf8003eb;
   valaddr_reg:x11; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 114*FLEN/8, x12, x8, x9)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0007e8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800018; op2val:0xbf8007e8;
   valaddr_reg:x11; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 116*FLEN/8, x12, x8, x9)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000059 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000fa7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800059; op2val:0xbf800fa7;
   valaddr_reg:x11; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 118*FLEN/8, x12, x8, x9)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x001fce and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800032; op2val:0xbf801fce;
   valaddr_reg:x11; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 120*FLEN/8, x12, x8, x9)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x003ffa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800006; op2val:0xbf803ffa;
   valaddr_reg:x11; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 122*FLEN/8, x12, x8, x9)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x007fec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800014; op2val:0xbf807fec;
   valaddr_reg:x11; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 124*FLEN/8, x12, x8, x9)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00ffff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800001; op2val:0xbf80ffff;
   valaddr_reg:x11; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 126*FLEN/8, x12, x8, x9)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01ffb0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80004f; op2val:0xbf81ffb0;
   valaddr_reg:x11; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 128*FLEN/8, x12, x8, x9)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ff9d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800060; op2val:0xbf83ff9d;
   valaddr_reg:x11; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 130*FLEN/8, x12, x8, x9)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07fff0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80000f; op2val:0xbf87fff0;
   valaddr_reg:x11; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 132*FLEN/8, x12, x8, x9)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fffcf and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80002c; op2val:0xbf8fffcf;
   valaddr_reg:x11; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 134*FLEN/8, x12, x8, x9)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1ffffb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800004; op2val:0xbf9ffffb;
   valaddr_reg:x11; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 136*FLEN/8, x12, x8, x9)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3fffa9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f80003a; op2val:0xbfbfffa9;
   valaddr_reg:x11; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 138*FLEN/8, x12, x8, x9)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x6c33c9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x63; op2val:0x3bec33c9;
   valaddr_reg:x11; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 140*FLEN/8, x12, x8, x9)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0158ed and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5f; op2val:0x3d0158ed;
   valaddr_reg:x11; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 142*FLEN/8, x12, x8, x9)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x169697 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x22; op2val:0x3e169697;
   valaddr_reg:x11; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 144*FLEN/8, x12, x8, x9)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x313b14 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x34; op2val:0x3e313b14;
   valaddr_reg:x11; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 146*FLEN/8, x12, x8, x9)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x3f4bf5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5b; op2val:0x3e3f4bf5;
   valaddr_reg:x11; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 148*FLEN/8, x12, x8, x9)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0a7de7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d; op2val:0x3f0a7de7;
   valaddr_reg:x11; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 150*FLEN/8, x12, x8, x9)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2d5555 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xc; op2val:0x40ad5555;
   valaddr_reg:x11; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 152*FLEN/8, x12, x8, x9)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ba2e9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x58; op2val:0x3fbba2e9;
   valaddr_reg:x11; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 154*FLEN/8, x12, x8, x9)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 0 and fe2 == 0x83 and fm2 == 0x12db6e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xe; op2val:0x4192db6e;
   valaddr_reg:x11; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 156*FLEN/8, x12, x8, x9)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0d846a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3a; op2val:0x410d846a;
   valaddr_reg:x11; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 158*FLEN/8, x12, x8, x9)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x74c6b0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x43; op2val:0x4174c6b0;
   valaddr_reg:x11; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 160*FLEN/8, x12, x8, x9)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x20b4b5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x33; op2val:0x4220b4b5;
   valaddr_reg:x11; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 162*FLEN/8, x12, x8, x9)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x784d93 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x42; op2val:0x42784d93;
   valaddr_reg:x11; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 164*FLEN/8, x12, x8, x9)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x579af3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x13; op2val:0x43d79af3;
   valaddr_reg:x11; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 166*FLEN/8, x12, x8, x9)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x70f4b5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x22; op2val:0x43f0f4b5;
   valaddr_reg:x11; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 168*FLEN/8, x12, x8, x9)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x87 and fm2 == 0x520ec5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4e; op2val:0x43d20ec5;
   valaddr_reg:x11; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 170*FLEN/8, x12, x8, x9)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x430cf4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x54; op2val:0x44430cf4;
   valaddr_reg:x11; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 172*FLEN/8, x12, x8, x9)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x89 and fm2 == 0x360bbc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5a; op2val:0x44b60bbc;
   valaddr_reg:x11; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 174*FLEN/8, x12, x8, x9)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x638e72 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x12; op2val:0x46638e72;
   valaddr_reg:x11; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 176*FLEN/8, x12, x8, x9)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000008 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x8; op2val:0x47800010;
   valaddr_reg:x11; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 178*FLEN/8, x12, x8, x9)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x4cccda and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5; op2val:0x484cccda;
   valaddr_reg:x11; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 180*FLEN/8, x12, x8, x9)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x430c37 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x15; op2val:0x47c30c37;
   valaddr_reg:x11; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 182*FLEN/8, x12, x8, x9)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x91 and fm2 == 0x1d89db and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xd; op2val:0x489d89db;
   valaddr_reg:x11; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 184*FLEN/8, x12, x8, x9)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000052 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x0e95e5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x52; op2val:0xbc0e95e5;
   valaddr_reg:x11; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 186*FLEN/8, x12, x8, x9)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x3a2e8c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x42; op2val:0xbd3a2e8c;
   valaddr_reg:x11; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 188*FLEN/8, x12, x8, x9)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5; op2val:0xbf800000;
   valaddr_reg:x11; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 190*FLEN/8, x12, x8, x9)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19999a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1e; op2val:0xbe99999a;
   valaddr_reg:x11; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 192*FLEN/8, x12, x8, x9)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000039 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x18b3a6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x39; op2val:0xbe98b3a6;
   valaddr_reg:x11; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 194*FLEN/8, x12, x8, x9)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x21; op2val:0xbf800000;
   valaddr_reg:x11; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 196*FLEN/8, x12, x8, x9)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5af287 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4c; op2val:0xbf5af287;
   valaddr_reg:x11; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 198*FLEN/8, x12, x8, x9)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4e6666 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x50; op2val:0xbfce6666;
   valaddr_reg:x11; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 200*FLEN/8, x12, x8, x9)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x34bf4c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5b; op2val:0xc034bf4c;
   valaddr_reg:x11; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 202*FLEN/8, x12, x8, x9)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x78ba2f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x21; op2val:0xc178ba2f;
   valaddr_reg:x11; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 204*FLEN/8, x12, x8, x9)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x151746 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x37; op2val:0xc1951746;
   valaddr_reg:x11; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 206*FLEN/8, x12, x8, x9)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x710f0f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x44; op2val:0xc1f10f0f;
   valaddr_reg:x11; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 208*FLEN/8, x12, x8, x9)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xc5800800;
   valaddr_reg:x11; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 210*FLEN/8, x12, x8, x9)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x4cd333 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5; op2val:0xc4ccd333;
   valaddr_reg:x11; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 212*FLEN/8, x12, x8, x9)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x1a9352 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x35; op2val:0xc39a9352;
   valaddr_reg:x11; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 214*FLEN/8, x12, x8, x9)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x8a and fm2 == 0x08899a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xf; op2val:0xc508899a;
   valaddr_reg:x11; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 216*FLEN/8, x12, x8, x9)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x88 and fm2 == 0x302cbb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5d; op2val:0xc4302cbb;
   valaddr_reg:x11; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 218*FLEN/8, x12, x8, x9)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x8b and fm2 == 0x04214a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1f; op2val:0xc584214a;
   valaddr_reg:x11; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 220*FLEN/8, x12, x8, x9)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x8d and fm2 == 0x1d8a00 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xd; op2val:0xc69d8a00;
   valaddr_reg:x11; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 222*FLEN/8, x12, x8, x9)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000018 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x2aaac0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x18; op2val:0xc6aaaac0;
   valaddr_reg:x11; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 224*FLEN/8, x12, x8, x9)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x8e and fm2 == 0x088891 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1e; op2val:0xc7088891;
   valaddr_reg:x11; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 226*FLEN/8, x12, x8, x9)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x8f and fm2 == 0x124929 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1c; op2val:0xc7924929;
   valaddr_reg:x11; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 228*FLEN/8, x12, x8, x9)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x748991 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x43; op2val:0xc7748991;
   valaddr_reg:x11; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 230*FLEN/8, x12, x8, x9)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x90 and fm2 == 0x088886 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c; op2val:0x48088886;
   valaddr_reg:x11; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 232*FLEN/8, x12, x8, x9)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x4cccc8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x28; op2val:0x484cccc8;
   valaddr_reg:x11; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 234*FLEN/8, x12, x8, x9)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x4565c1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x53; op2val:0x47c565c1;
   valaddr_reg:x11; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 236*FLEN/8, x12, x8, x9)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x91 and fm2 == 0x12491a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1c; op2val:0x4892491a;
   valaddr_reg:x11; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 238*FLEN/8, x12, x8, x9)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x272eef and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x62; op2val:0x47a72eef;
   valaddr_reg:x11; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 240*FLEN/8, x12, x8, x9)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x8f and fm2 == 0x2e4c14 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5e; op2val:0x47ae4c14;
   valaddr_reg:x11; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 242*FLEN/8, x12, x8, x9)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x14f1be and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x37; op2val:0x4814f1be;
   valaddr_reg:x11; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 244*FLEN/8, x12, x8, x9)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x2aa9ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3; op2val:0x4a2aa9ff;
   valaddr_reg:x11; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 246*FLEN/8, x12, x8, x9)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x8f and fm2 == 0x579285 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4c; op2val:0x47d79285;
   valaddr_reg:x11; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 248*FLEN/8, x12, x8, x9)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x17b1c6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x36; op2val:0x4817b1c6;
   valaddr_reg:x11; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 250*FLEN/8, x12, x8, x9)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x8f and fm2 == 0x5a6d38 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4b; op2val:0x47da6d38;
   valaddr_reg:x11; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 252*FLEN/8, x12, x8, x9)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x92 and fm2 == 0x1d7fff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xd; op2val:0x491d7fff;
   valaddr_reg:x11; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 254*FLEN/8, x12, x8, x9)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x90 and fm2 == 0x041083 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e; op2val:0x48041083;
   valaddr_reg:x11; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 256*FLEN/8, x12, x8, x9)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x2a7fff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3; op2val:0x4a2a7fff;
   valaddr_reg:x11; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 258*FLEN/8, x12, x8, x9)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x7f7ffe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x10; op2val:0x48ff7ffe;
   valaddr_reg:x11; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 260*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x90 and fm2 == 0x2d9df4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x2f; op2val:0x482d9df4;
   valaddr_reg:x11; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 262*FLEN/8, x12, x8, x9)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x36a6d3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x59; op2val:0x47b6a6d3;
   valaddr_reg:x11; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 264*FLEN/8, x12, x8, x9)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x499998 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x28; op2val:0x48499998;
   valaddr_reg:x11; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 266*FLEN/8, x12, x8, x9)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x345d16 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x58; op2val:0x47b45d16;
   valaddr_reg:x11; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 268*FLEN/8, x12, x8, x9)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x92 and fm2 == 0x13b13a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xd; op2val:0x4913b13a;
   valaddr_reg:x11; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 270*FLEN/8, x12, x8, x9)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x333332 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x28; op2val:0x48333332;
   valaddr_reg:x11; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 272*FLEN/8, x12, x8, x9)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x0d3dca and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x57; op2val:0x478d3dca;
   valaddr_reg:x11; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 274*FLEN/8, x12, x8, x9)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x8f and fm2 == 0x0d3dc9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3a; op2val:0x478d3dc9;
   valaddr_reg:x11; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 276*FLEN/8, x12, x8, x9)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x1a90e5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x35; op2val:0xc81a90e5;
   valaddr_reg:x11; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 278*FLEN/8, x12, x8, x9)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x90 and fm2 == 0x02081d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f; op2val:0xc802081d;
   valaddr_reg:x11; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 280*FLEN/8, x12, x8, x9)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x91 and fm2 == 0x17b420 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1b; op2val:0xc897b420;
   valaddr_reg:x11; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 282*FLEN/8, x12, x8, x9)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4f6466 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4f; op2val:0xc7cf6466;
   valaddr_reg:x11; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 284*FLEN/8, x12, x8, x9)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x7fffde and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xcaffffde;
   valaddr_reg:x11; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 286*FLEN/8, x12, x8, x9)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x7fffbe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4; op2val:0xc9ffffbe;
   valaddr_reg:x11; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 288*FLEN/8, x12, x8, x9)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x4ccc65 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x28; op2val:0xc84ccc65;
   valaddr_reg:x11; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 290*FLEN/8, x12, x8, x9)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 1 and fe2 == 0x92 and fm2 == 0x4ccbfe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xa; op2val:0xc94ccbfe;
   valaddr_reg:x11; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 292*FLEN/8, x12, x8, x9)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x28e6ec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x61; op2val:0xc7a8e6ec;
   valaddr_reg:x11; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 294*FLEN/8, x12, x8, x9)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x23d47a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x19; op2val:0xc8a3d47a;
   valaddr_reg:x11; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 296*FLEN/8, x12, x8, x9)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x8f and fm2 == 0x5d60dc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4a; op2val:0xc7dd60dc;
   valaddr_reg:x11; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 298*FLEN/8, x12, x8, x9)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x209695 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x33; op2val:0xc8209695;
   valaddr_reg:x11; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 300*FLEN/8, x12, x8, x9)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x90 and fm2 == 0x087776 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c; op2val:0xc8087776;
   valaddr_reg:x11; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 302*FLEN/8, x12, x8, x9)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x28be04 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x61; op2val:0xc7a8be04;
   valaddr_reg:x11; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 304*FLEN/8, x12, x8, x9)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x20504f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x33; op2val:0xc820504f;
   valaddr_reg:x11; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 306*FLEN/8, x12, x8, x9)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x7745d0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x21; op2val:0xc87745d0;
   valaddr_reg:x11; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 308*FLEN/8, x12, x8, x9)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000010 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x7dfffe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x10; op2val:0xc8fdfffe;
   valaddr_reg:x11; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 310*FLEN/8, x12, x8, x9)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x8f and fm2 == 0x4c26e1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x4f; op2val:0xc7cc26e1;
   valaddr_reg:x11; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 312*FLEN/8, x12, x8, x9)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x3f3a99 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x53; op2val:0xc7bf3a99;
   valaddr_reg:x11; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 314*FLEN/8, x12, x8, x9)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x91 and fm2 == 0x092491 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x1c; op2val:0xc8892491;
   valaddr_reg:x11; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 316*FLEN/8, x12, x8, x9)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x91 and fm2 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0xe; op2val:0xc8fffffe;
   valaddr_reg:x11; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 318*FLEN/8, x12, x8, x9)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x199998 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x50; op2val:0xc7999998;
   valaddr_reg:x11; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 320*FLEN/8, x12, x8, x9)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x8f and fm2 == 0x064b88 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d; op2val:0xc7864b88;
   valaddr_reg:x11; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 322*FLEN/8, x12, x8, x9)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff48 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005d; op2val:0x3f7fff48;
   valaddr_reg:x11; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 324*FLEN/8, x12, x8, x9)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff84 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800040; op2val:0x3f7fff84;
   valaddr_reg:x11; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 326*FLEN/8, x12, x8, x9)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffac and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80002e; op2val:0x3f7fffac;
   valaddr_reg:x11; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 328*FLEN/8, x12, x8, x9)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800013; op2val:0x3f7fffea;
   valaddr_reg:x11; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 330*FLEN/8, x12, x8, x9)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffda and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800023; op2val:0x3f7fffda;
   valaddr_reg:x11; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 332*FLEN/8, x12, x8, x9)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000044 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffb8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800044; op2val:0x3f7fffb8;
   valaddr_reg:x11; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 334*FLEN/8, x12, x8, x9)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffc6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005d; op2val:0x3f7fffc6;
   valaddr_reg:x11; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 336*FLEN/8, x12, x8, x9)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00004a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800036; op2val:0x3f80004a;
   valaddr_reg:x11; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 338*FLEN/8, x12, x8, x9)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0000a8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800058; op2val:0x3f8000a8;
   valaddr_reg:x11; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 340*FLEN/8, x12, x8, x9)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0001cd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800033; op2val:0x3f8001cd;
   valaddr_reg:x11; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 342*FLEN/8, x12, x8, x9)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0003eb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800015; op2val:0x3f8003eb;
   valaddr_reg:x11; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 344*FLEN/8, x12, x8, x9)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0007b3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80004d; op2val:0x3f8007b3;
   valaddr_reg:x11; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 346*FLEN/8, x12, x8, x9)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000fb9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800047; op2val:0x3f800fb9;
   valaddr_reg:x11; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 348*FLEN/8, x12, x8, x9)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x001fa6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005a; op2val:0x3f801fa6;
   valaddr_reg:x11; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 350*FLEN/8, x12, x8, x9)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x003fa6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005a; op2val:0x3f803fa6;
   valaddr_reg:x11; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 352*FLEN/8, x12, x8, x9)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x007fb5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80004b; op2val:0x3f807fb5;
   valaddr_reg:x11; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 354*FLEN/8, x12, x8, x9)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x00ffb5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80004a; op2val:0x3f80ffb5;
   valaddr_reg:x11; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 356*FLEN/8, x12, x8, x9)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x01fff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000a; op2val:0x3f81fff6;
   valaddr_reg:x11; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 358*FLEN/8, x12, x8, x9)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03ffe8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800017; op2val:0x3f83ffe8;
   valaddr_reg:x11; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 360*FLEN/8, x12, x8, x9)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000013 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x07ffec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800013; op2val:0x3f87ffec;
   valaddr_reg:x11; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 362*FLEN/8, x12, x8, x9)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0ffff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800009; op2val:0x3f8ffff6;
   valaddr_reg:x11; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 364*FLEN/8, x12, x8, x9)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000058 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1fff92 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800058; op2val:0x3f9fff92;
   valaddr_reg:x11; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 366*FLEN/8, x12, x8, x9)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ffff9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800005; op2val:0x3fbffff9;
   valaddr_reg:x11; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 368*FLEN/8, x12, x8, x9)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffb6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800026; op2val:0xbf7fffb6;
   valaddr_reg:x11; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 370*FLEN/8, x12, x8, x9)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffc8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80001e; op2val:0xbf7fffc8;
   valaddr_reg:x11; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 372*FLEN/8, x12, x8, x9)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff5c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800056; op2val:0xbf7fff5c;
   valaddr_reg:x11; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 374*FLEN/8, x12, x8, x9)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00002b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffba and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80002b; op2val:0xbf7fffba;
   valaddr_reg:x11; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 376*FLEN/8, x12, x8, x9)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffff2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800017; op2val:0xbf7ffff2;
   valaddr_reg:x11; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 378*FLEN/8, x12, x8, x9)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000025 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800025; op2val:0xbf7ffff6;
   valaddr_reg:x11; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 380*FLEN/8, x12, x8, x9)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000014 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00002c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800014; op2val:0xbf80002c;
   valaddr_reg:x11; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 382*FLEN/8, x12, x8, x9)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000061 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00001f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800061; op2val:0xbf80001f;
   valaddr_reg:x11; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 384*FLEN/8, x12, x8, x9)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0000f3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000d; op2val:0xbf8000f3;
   valaddr_reg:x11; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 386*FLEN/8, x12, x8, x9)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000043 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0001bd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800043; op2val:0xbf8001bd;
   valaddr_reg:x11; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 388*FLEN/8, x12, x8, x9)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0003a4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005c; op2val:0xbf8003a4;
   valaddr_reg:x11; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 390*FLEN/8, x12, x8, x9)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000021 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0007df and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800021; op2val:0xbf8007df;
   valaddr_reg:x11; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 392*FLEN/8, x12, x8, x9)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000feb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800015; op2val:0xbf800feb;
   valaddr_reg:x11; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 394*FLEN/8, x12, x8, x9)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x001fa5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005b; op2val:0xbf801fa5;
   valaddr_reg:x11; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 396*FLEN/8, x12, x8, x9)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x003fcc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800034; op2val:0xbf803fcc;
   valaddr_reg:x11; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 398*FLEN/8, x12, x8, x9)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x007f9e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800062; op2val:0xbf807f9e;
   valaddr_reg:x11; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 400*FLEN/8, x12, x8, x9)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x00ffa1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005e; op2val:0xbf80ffa1;
   valaddr_reg:x11; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 402*FLEN/8, x12, x8, x9)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01ffc3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80003c; op2val:0xbf81ffc3;
   valaddr_reg:x11; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 404*FLEN/8, x12, x8, x9)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ffa0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005d; op2val:0xbf83ffa0;
   valaddr_reg:x11; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 406*FLEN/8, x12, x8, x9)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07ffae and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80004d; op2val:0xbf87ffae;
   valaddr_reg:x11; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 408*FLEN/8, x12, x8, x9)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fff95 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x80005f; op2val:0xbf8fff95;
   valaddr_reg:x11; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 410*FLEN/8, x12, x8, x9)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1fffc0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800033; op2val:0xbf9fffc0;
   valaddr_reg:x11; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 412*FLEN/8, x12, x8, x9)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3ffff6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800007; op2val:0xbfbffff6;
   valaddr_reg:x11; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 414*FLEN/8, x12, x8, x9)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000024 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffb6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000024; op2val:0x3fffffb6;
   valaddr_reg:x11; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 416*FLEN/8, x12, x8, x9)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffbb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000021; op2val:0x3fffffbb;
   valaddr_reg:x11; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 418*FLEN/8, x12, x8, x9)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff3f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005e; op2val:0x3fffff3f;
   valaddr_reg:x11; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 420*FLEN/8, x12, x8, x9)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff41 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005b; op2val:0x3fffff41;
   valaddr_reg:x11; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 422*FLEN/8, x12, x8, x9)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff75 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003d; op2val:0x3fffff75;
   valaddr_reg:x11; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 424*FLEN/8, x12, x8, x9)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff51 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000047; op2val:0x3fffff51;
   valaddr_reg:x11; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 426*FLEN/8, x12, x8, x9)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff07 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005c; op2val:0x3fffff07;
   valaddr_reg:x11; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 428*FLEN/8, x12, x8, x9)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffed5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000055; op2val:0x3ffffed5;
   valaddr_reg:x11; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 430*FLEN/8, x12, x8, x9)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffe3b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000062; op2val:0x3ffffe3b;
   valaddr_reg:x11; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 432*FLEN/8, x12, x8, x9)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffdc5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001d; op2val:0x3ffffdc5;
   valaddr_reg:x11; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 434*FLEN/8, x12, x8, x9)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffb5f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000050; op2val:0x3ffffb5f;
   valaddr_reg:x11; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 436*FLEN/8, x12, x8, x9)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ff797 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000034; op2val:0x3ffff797;
   valaddr_reg:x11; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 438*FLEN/8, x12, x8, x9)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fef9d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000031; op2val:0x3fffef9d;
   valaddr_reg:x11; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 440*FLEN/8, x12, x8, x9)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fdffb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000002; op2val:0x3fffdffb;
   valaddr_reg:x11; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 442*FLEN/8, x12, x8, x9)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fbf87 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003c; op2val:0x3fffbf87;
   valaddr_reg:x11; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 444*FLEN/8, x12, x8, x9)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7f7f47 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005c; op2val:0x3fff7f47;
   valaddr_reg:x11; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 446*FLEN/8, x12, x8, x9)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eff58 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000054; op2val:0x3ffeff58;
   valaddr_reg:x11; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 448*FLEN/8, x12, x8, x9)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7dffe5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00000d; op2val:0x3ffdffe5;
   valaddr_reg:x11; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 450*FLEN/8, x12, x8, x9)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7bff99 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000034; op2val:0x3ffbff99;
   valaddr_reg:x11; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 452*FLEN/8, x12, x8, x9)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x77ff49 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005e; op2val:0x3ff7ff49;
   valaddr_reg:x11; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 454*FLEN/8, x12, x8, x9)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6fff6d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004e; op2val:0x3fefff6d;
   valaddr_reg:x11; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 456*FLEN/8, x12, x8, x9)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5fffce and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00001c; op2val:0x3fdfffce;
   valaddr_reg:x11; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 458*FLEN/8, x12, x8, x9)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000032 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3fffb4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000032; op2val:0x3fbfffb4;
   valaddr_reg:x11; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 460*FLEN/8, x12, x8, x9)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff38 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000063; op2val:0xbfffff38;
   valaddr_reg:x11; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 462*FLEN/8, x12, x8, x9)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000024 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffb5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000024; op2val:0xbfffffb5;
   valaddr_reg:x11; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 464*FLEN/8, x12, x8, x9)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff63 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004c; op2val:0xbfffff63;
   valaddr_reg:x11; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 466*FLEN/8, x12, x8, x9)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffc5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000019; op2val:0xbfffffc5;
   valaddr_reg:x11; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 468*FLEN/8, x12, x8, x9)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff51 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004f; op2val:0xbfffff51;
   valaddr_reg:x11; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 470*FLEN/8, x12, x8, x9)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffdb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000002; op2val:0xbfffffdb;
   valaddr_reg:x11; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 472*FLEN/8, x12, x8, x9)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff11 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000057; op2val:0xbfffff11;
   valaddr_reg:x11; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 474*FLEN/8, x12, x8, x9)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff03 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003e; op2val:0xbfffff03;
   valaddr_reg:x11; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 476*FLEN/8, x12, x8, x9)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffe7b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000042; op2val:0xbffffe7b;
   valaddr_reg:x11; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 478*FLEN/8, x12, x8, x9)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000017 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffdd1 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000017; op2val:0xbffffdd1;
   valaddr_reg:x11; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 480*FLEN/8, x12, x8, x9)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffb47 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00005c; op2val:0xbffffb47;
   valaddr_reg:x11; val_offset:482*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 482*FLEN/8, x12, x8, x9)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ff73b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000062; op2val:0xbffff73b;
   valaddr_reg:x11; val_offset:484*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 484*FLEN/8, x12, x8, x9)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fefa5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00002d; op2val:0xbfffefa5;
   valaddr_reg:x11; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 486*FLEN/8, x12, x8, x9)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fdf81 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003f; op2val:0xbfffdf81;
   valaddr_reg:x11; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 488*FLEN/8, x12, x8, x9)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fbf53 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000056; op2val:0xbfffbf53;
   valaddr_reg:x11; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 490*FLEN/8, x12, x8, x9)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f7fed and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000009; op2val:0xbfff7fed;
   valaddr_reg:x11; val_offset:492*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 492*FLEN/8, x12, x8, x9)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7eff68 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004c; op2val:0xbffeff68;
   valaddr_reg:x11; val_offset:494*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 494*FLEN/8, x12, x8, x9)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7dff52 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000057; op2val:0xbffdff52;
   valaddr_reg:x11; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 496*FLEN/8, x12, x8, x9)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7bff8b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00003b; op2val:0xbffbff8b;
   valaddr_reg:x11; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 498*FLEN/8, x12, x8, x9)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000041 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77ff81 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000041; op2val:0xbff7ff81;
   valaddr_reg:x11; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 500*FLEN/8, x12, x8, x9)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6ffff8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000004; op2val:0xbfeffff8;
   valaddr_reg:x11; val_offset:502*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 502*FLEN/8, x12, x8, x9)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5fff75 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00004f; op2val:0xbfdfff75;
   valaddr_reg:x11; val_offset:504*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 504*FLEN/8, x12, x8, x9)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3fffbc and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00002d; op2val:0xbfbfffbc;
   valaddr_reg:x11; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 506*FLEN/8, x12, x8, x9)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e82fa and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x56; op2val:0x3dbe82fa;
   valaddr_reg:x11; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 508*FLEN/8, x12, x8, x9)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x783e10 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x21; op2val:0x3ef83e10;
   valaddr_reg:x11; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 510*FLEN/8, x12, x8, x9)

inst_278:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0d3dcb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3a; op2val:0xc00d3dcb;
   valaddr_reg:x11; val_offset:512*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 512*FLEN/8, x12, x8, x9)

inst_279:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x321643 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x5c; op2val:0xc0b21643;
   valaddr_reg:x11; val_offset:514*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 514*FLEN/8, x12, x8, x9)

inst_280:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x088889 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c; op2val:0xc1888889;
   valaddr_reg:x11; val_offset:516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 516*FLEN/8, x12, x8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(8,64,FLEN)
NAN_BOXED(1040187392,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(1044000396,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(1044000396,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(33,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(1066551589,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(1095552205,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(1069166220,64,FLEN)
NAN_BOXED(56,64,FLEN)
NAN_BOXED(1083328805,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(1092657313,64,FLEN)
NAN_BOXED(66,64,FLEN)
NAN_BOXED(1098399248,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(1105858209,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(1115426753,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(1154272461,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(1135496257,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(1145556492,64,FLEN)
NAN_BOXED(55,64,FLEN)
NAN_BOXED(1150611977,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(1169829516,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(1177687619,64,FLEN)
NAN_BOXED(30,64,FLEN)
NAN_BOXED(1183352969,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(1194464835,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(1202853443,64,FLEN)
test_dataset_1:
NAN_BOXED(66,32,FLEN)
NAN_BOXED(1199062544,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(3165539393,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(3166458468,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(3190467243,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(3189224486,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(3195072753,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(3207482433,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(3216119363,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3222093259,32,FLEN)
NAN_BOXED(97,32,FLEN)
NAN_BOXED(3223906367,32,FLEN)
NAN_BOXED(92,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(3246950537,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(3253793009,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(3263301665,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(3271557120,32,FLEN)
NAN_BOXED(66,32,FLEN)
NAN_BOXED(3279437328,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(3284189377,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(3297282185,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(3303043128,32,FLEN)
NAN_BOXED(72,32,FLEN)
NAN_BOXED(3311636025,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(3322599667,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(3326132417,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(3343060017,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(3359256204,32,FLEN)
NAN_BOXED(1065353251,32,FLEN)
NAN_BOXED(1065353148,32,FLEN)
NAN_BOXED(1065353278,32,FLEN)
NAN_BOXED(1065353096,32,FLEN)
NAN_BOXED(1065353255,32,FLEN)
NAN_BOXED(1065353146,32,FLEN)
NAN_BOXED(1065353281,32,FLEN)
NAN_BOXED(1065353102,32,FLEN)
NAN_BOXED(1065353283,32,FLEN)
NAN_BOXED(1065353114,32,FLEN)
NAN_BOXED(1065353300,32,FLEN)
NAN_BOXED(1065353112,32,FLEN)
NAN_BOXED(1065353292,32,FLEN)
NAN_BOXED(1065353192,32,FLEN)
NAN_BOXED(1065353256,32,FLEN)
NAN_BOXED(1065353304,32,FLEN)
NAN_BOXED(1065353243,32,FLEN)
NAN_BOXED(1065353445,32,FLEN)
NAN_BOXED(1065353282,32,FLEN)
NAN_BOXED(1065353662,32,FLEN)
NAN_BOXED(1065353304,32,FLEN)
NAN_BOXED(1065354152,32,FLEN)
NAN_BOXED(1065353226,32,FLEN)
NAN_BOXED(1065355254,32,FLEN)
NAN_BOXED(1065353309,32,FLEN)
NAN_BOXED(1065357219,32,FLEN)
NAN_BOXED(1065353241,32,FLEN)
NAN_BOXED(1065361383,32,FLEN)
NAN_BOXED(1065353230,32,FLEN)
NAN_BOXED(1065369586,32,FLEN)
NAN_BOXED(1065353290,32,FLEN)
NAN_BOXED(1065385910,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(1065418745,32,FLEN)
NAN_BOXED(1065353292,32,FLEN)
NAN_BOXED(1065484211,32,FLEN)
NAN_BOXED(1065353304,32,FLEN)
NAN_BOXED(1065615269,32,FLEN)
NAN_BOXED(1065353313,32,FLEN)
NAN_BOXED(1065877401,32,FLEN)
NAN_BOXED(1065353234,32,FLEN)
NAN_BOXED(1066401772,32,FLEN)
NAN_BOXED(1065353248,32,FLEN)
NAN_BOXED(1067450328,32,FLEN)
NAN_BOXED(1065353224,32,FLEN)
NAN_BOXED(1069547508,32,FLEN)
NAN_BOXED(1065353308,32,FLEN)
NAN_BOXED(3212836682,32,FLEN)
NAN_BOXED(1065353221,32,FLEN)
NAN_BOXED(3212836858,32,FLEN)
NAN_BOXED(1065353263,32,FLEN)
NAN_BOXED(3212836778,32,FLEN)
NAN_BOXED(1065353239,32,FLEN)
NAN_BOXED(3212836834,32,FLEN)
NAN_BOXED(1065353303,32,FLEN)
NAN_BOXED(3212836722,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(3212836885,32,FLEN)
NAN_BOXED(1065353225,32,FLEN)
NAN_BOXED(3212836919,32,FLEN)
NAN_BOXED(1065353222,32,FLEN)
NAN_BOXED(3212836986,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(3212837117,32,FLEN)
NAN_BOXED(1065353249,32,FLEN)
NAN_BOXED(3212837343,32,FLEN)
NAN_BOXED(1065353237,32,FLEN)
NAN_BOXED(3212837867,32,FLEN)
NAN_BOXED(1065353240,32,FLEN)
NAN_BOXED(3212838888,32,FLEN)
NAN_BOXED(1065353305,32,FLEN)
NAN_BOXED(3212840871,32,FLEN)
NAN_BOXED(1065353266,32,FLEN)
NAN_BOXED(3212845006,32,FLEN)
NAN_BOXED(1065353222,32,FLEN)
NAN_BOXED(3212853242,32,FLEN)
NAN_BOXED(1065353236,32,FLEN)
NAN_BOXED(3212869612,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(3212902399,32,FLEN)
NAN_BOXED(1065353295,32,FLEN)
NAN_BOXED(3212967856,32,FLEN)
NAN_BOXED(1065353312,32,FLEN)
NAN_BOXED(3213098909,32,FLEN)
NAN_BOXED(1065353231,32,FLEN)
NAN_BOXED(3213361136,32,FLEN)
NAN_BOXED(1065353260,32,FLEN)
NAN_BOXED(3213885391,32,FLEN)
NAN_BOXED(1065353220,32,FLEN)
NAN_BOXED(3214934011,32,FLEN)
NAN_BOXED(1065353274,32,FLEN)
NAN_BOXED(3217031081,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(1005335497,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(1023498477,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(1041667735,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(1043413780,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(1044335605,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(1057652199,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(1085101397,32,FLEN)
NAN_BOXED(88,32,FLEN)
NAN_BOXED(1069261545,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(1100143470,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(1091404906,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(1098172080,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(1109439669,32,FLEN)
NAN_BOXED(66,32,FLEN)
NAN_BOXED(1115180435,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(1138203379,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(1139864757,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(1137839813,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(1145244916,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(1152781244,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(1180929650,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(1199570960,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(1212992730,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(1203964983,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(1218283995,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(3155072485,32,FLEN)
NAN_BOXED(66,32,FLEN)
NAN_BOXED(3174706828,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(3197737370,32,FLEN)
NAN_BOXED(57,32,FLEN)
NAN_BOXED(3197678502,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(3210408583,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(3217974886,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(3224682316,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(3245914671,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(3247773510,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(3253800719,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3313502208,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(3301757747,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(3281687378,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(3305671066,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(3291491515,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(3313770826,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(3332213248,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(3333073600,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(3339225233,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(3348252969,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(3346303377,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(1208518790,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(1212992712,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(1204118977,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(1217546522,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(1202138863,32,FLEN)
NAN_BOXED(94,32,FLEN)
NAN_BOXED(1202605076,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(1209332158,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(1244310015,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(1205310085,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(1209512390,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(1205497144,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(1226670079,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(1208225923,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(1244299263,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(1224703998,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(1210949108,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(1203152595,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(1212783000,32,FLEN)
NAN_BOXED(88,32,FLEN)
NAN_BOXED(1203002646,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(1226027322,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(1211314994,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(1200438730,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(1200438729,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(3357184229,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(3355576349,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(3365385248,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(3352257638,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3405774814,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(3388997566,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(3360476261,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(3377253374,32,FLEN)
NAN_BOXED(97,32,FLEN)
NAN_BOXED(3349735148,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(3366179962,32,FLEN)
NAN_BOXED(74,32,FLEN)
NAN_BOXED(3353174236,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(3357578901,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(3355998070,32,FLEN)
NAN_BOXED(97,32,FLEN)
NAN_BOXED(3349724676,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(3357560911,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(3363259856,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(3372089342,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(3352045281,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(3351198361,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(3364430993,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(3372220414,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(3348732312,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(3347467144,32,FLEN)
NAN_BOXED(8388701,32,FLEN)
NAN_BOXED(1065353032,32,FLEN)
NAN_BOXED(8388672,32,FLEN)
NAN_BOXED(1065353092,32,FLEN)
NAN_BOXED(8388654,32,FLEN)
NAN_BOXED(1065353132,32,FLEN)
NAN_BOXED(8388627,32,FLEN)
NAN_BOXED(1065353194,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(1065353178,32,FLEN)
NAN_BOXED(8388676,32,FLEN)
NAN_BOXED(1065353144,32,FLEN)
NAN_BOXED(8388701,32,FLEN)
NAN_BOXED(1065353158,32,FLEN)
NAN_BOXED(8388662,32,FLEN)
NAN_BOXED(1065353290,32,FLEN)
NAN_BOXED(8388696,32,FLEN)
NAN_BOXED(1065353384,32,FLEN)
NAN_BOXED(8388659,32,FLEN)
NAN_BOXED(1065353677,32,FLEN)
NAN_BOXED(8388629,32,FLEN)
NAN_BOXED(1065354219,32,FLEN)
NAN_BOXED(8388685,32,FLEN)
NAN_BOXED(1065355187,32,FLEN)
NAN_BOXED(8388679,32,FLEN)
NAN_BOXED(1065357241,32,FLEN)
NAN_BOXED(8388698,32,FLEN)
NAN_BOXED(1065361318,32,FLEN)
NAN_BOXED(8388698,32,FLEN)
NAN_BOXED(1065369510,32,FLEN)
NAN_BOXED(8388683,32,FLEN)
NAN_BOXED(1065385909,32,FLEN)
NAN_BOXED(8388682,32,FLEN)
NAN_BOXED(1065418677,32,FLEN)
NAN_BOXED(8388618,32,FLEN)
NAN_BOXED(1065484278,32,FLEN)
NAN_BOXED(8388631,32,FLEN)
NAN_BOXED(1065615336,32,FLEN)
NAN_BOXED(8388627,32,FLEN)
NAN_BOXED(1065877484,32,FLEN)
NAN_BOXED(8388617,32,FLEN)
NAN_BOXED(1066401782,32,FLEN)
NAN_BOXED(8388696,32,FLEN)
NAN_BOXED(1067450258,32,FLEN)
NAN_BOXED(8388613,32,FLEN)
NAN_BOXED(1069547513,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(3212836790,32,FLEN)
NAN_BOXED(8388638,32,FLEN)
NAN_BOXED(3212836808,32,FLEN)
NAN_BOXED(8388694,32,FLEN)
NAN_BOXED(3212836700,32,FLEN)
NAN_BOXED(8388651,32,FLEN)
NAN_BOXED(3212836794,32,FLEN)
NAN_BOXED(8388631,32,FLEN)
NAN_BOXED(3212836850,32,FLEN)
NAN_BOXED(8388645,32,FLEN)
NAN_BOXED(3212836854,32,FLEN)
NAN_BOXED(8388628,32,FLEN)
NAN_BOXED(3212836908,32,FLEN)
NAN_BOXED(8388705,32,FLEN)
NAN_BOXED(3212836895,32,FLEN)
NAN_BOXED(8388621,32,FLEN)
NAN_BOXED(3212837107,32,FLEN)
NAN_BOXED(8388675,32,FLEN)
NAN_BOXED(3212837309,32,FLEN)
NAN_BOXED(8388700,32,FLEN)
NAN_BOXED(3212837796,32,FLEN)
NAN_BOXED(8388641,32,FLEN)
NAN_BOXED(3212838879,32,FLEN)
NAN_BOXED(8388629,32,FLEN)
NAN_BOXED(3212840939,32,FLEN)
NAN_BOXED(8388699,32,FLEN)
NAN_BOXED(3212844965,32,FLEN)
NAN_BOXED(8388660,32,FLEN)
NAN_BOXED(3212853196,32,FLEN)
NAN_BOXED(8388706,32,FLEN)
NAN_BOXED(3212869534,32,FLEN)
NAN_BOXED(8388702,32,FLEN)
NAN_BOXED(3212902305,32,FLEN)
NAN_BOXED(8388668,32,FLEN)
NAN_BOXED(3212967875,32,FLEN)
NAN_BOXED(8388701,32,FLEN)
NAN_BOXED(3213098912,32,FLEN)
NAN_BOXED(8388685,32,FLEN)
NAN_BOXED(3213361070,32,FLEN)
NAN_BOXED(8388703,32,FLEN)
NAN_BOXED(3213885333,32,FLEN)
NAN_BOXED(8388659,32,FLEN)
NAN_BOXED(3214933952,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(3217031158,32,FLEN)
NAN_BOXED(2130706468,32,FLEN)
NAN_BOXED(1073741750,32,FLEN)
NAN_BOXED(2130706465,32,FLEN)
NAN_BOXED(1073741755,32,FLEN)
NAN_BOXED(2130706526,32,FLEN)
NAN_BOXED(1073741631,32,FLEN)
NAN_BOXED(2130706523,32,FLEN)
NAN_BOXED(1073741633,32,FLEN)
NAN_BOXED(2130706493,32,FLEN)
NAN_BOXED(1073741685,32,FLEN)
NAN_BOXED(2130706503,32,FLEN)
NAN_BOXED(1073741649,32,FLEN)
NAN_BOXED(2130706524,32,FLEN)
NAN_BOXED(1073741575,32,FLEN)
NAN_BOXED(2130706517,32,FLEN)
NAN_BOXED(1073741525,32,FLEN)
NAN_BOXED(2130706530,32,FLEN)
NAN_BOXED(1073741371,32,FLEN)
NAN_BOXED(2130706461,32,FLEN)
NAN_BOXED(1073741253,32,FLEN)
NAN_BOXED(2130706512,32,FLEN)
NAN_BOXED(1073740639,32,FLEN)
NAN_BOXED(2130706484,32,FLEN)
NAN_BOXED(1073739671,32,FLEN)
NAN_BOXED(2130706481,32,FLEN)
NAN_BOXED(1073737629,32,FLEN)
NAN_BOXED(2130706434,32,FLEN)
NAN_BOXED(1073733627,32,FLEN)
NAN_BOXED(2130706492,32,FLEN)
NAN_BOXED(1073725319,32,FLEN)
NAN_BOXED(2130706524,32,FLEN)
NAN_BOXED(1073708871,32,FLEN)
NAN_BOXED(2130706516,32,FLEN)
NAN_BOXED(1073676120,32,FLEN)
NAN_BOXED(2130706445,32,FLEN)
NAN_BOXED(1073610725,32,FLEN)
NAN_BOXED(2130706484,32,FLEN)
NAN_BOXED(1073479577,32,FLEN)
NAN_BOXED(2130706526,32,FLEN)
NAN_BOXED(1073217353,32,FLEN)
NAN_BOXED(2130706510,32,FLEN)
NAN_BOXED(1072693101,32,FLEN)
NAN_BOXED(2130706460,32,FLEN)
NAN_BOXED(1071644622,32,FLEN)
NAN_BOXED(2130706482,32,FLEN)
NAN_BOXED(1069547444,32,FLEN)
NAN_BOXED(2130706531,32,FLEN)
NAN_BOXED(3221225272,32,FLEN)
NAN_BOXED(2130706468,32,FLEN)
NAN_BOXED(3221225397,32,FLEN)
NAN_BOXED(2130706508,32,FLEN)
NAN_BOXED(3221225315,32,FLEN)
NAN_BOXED(2130706457,32,FLEN)
NAN_BOXED(3221225413,32,FLEN)
NAN_BOXED(2130706511,32,FLEN)
NAN_BOXED(3221225297,32,FLEN)
NAN_BOXED(2130706434,32,FLEN)
NAN_BOXED(3221225435,32,FLEN)
NAN_BOXED(2130706519,32,FLEN)
NAN_BOXED(3221225233,32,FLEN)
NAN_BOXED(2130706494,32,FLEN)
NAN_BOXED(3221225219,32,FLEN)
NAN_BOXED(2130706498,32,FLEN)
NAN_BOXED(3221225083,32,FLEN)
NAN_BOXED(2130706455,32,FLEN)
NAN_BOXED(3221224913,32,FLEN)
NAN_BOXED(2130706524,32,FLEN)
NAN_BOXED(3221224263,32,FLEN)
NAN_BOXED(2130706530,32,FLEN)
NAN_BOXED(3221223227,32,FLEN)
NAN_BOXED(2130706477,32,FLEN)
NAN_BOXED(3221221285,32,FLEN)
NAN_BOXED(2130706495,32,FLEN)
NAN_BOXED(3221217153,32,FLEN)
NAN_BOXED(2130706518,32,FLEN)
NAN_BOXED(3221208915,32,FLEN)
NAN_BOXED(2130706441,32,FLEN)
NAN_BOXED(3221192685,32,FLEN)
NAN_BOXED(2130706508,32,FLEN)
NAN_BOXED(3221159784,32,FLEN)
NAN_BOXED(2130706519,32,FLEN)
NAN_BOXED(3221094226,32,FLEN)
NAN_BOXED(2130706491,32,FLEN)
NAN_BOXED(3220963211,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(3220701057,32,FLEN)
NAN_BOXED(2130706436,32,FLEN)
NAN_BOXED(3220176888,32,FLEN)
NAN_BOXED(2130706511,32,FLEN)
NAN_BOXED(3219128181,32,FLEN)
NAN_BOXED(2130706477,32,FLEN)
NAN_BOXED(3217031100,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(1035895546,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(1056456208,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(3222093259,32,FLEN)
NAN_BOXED(92,32,FLEN)
NAN_BOXED(3232896579,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(3246950537,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
