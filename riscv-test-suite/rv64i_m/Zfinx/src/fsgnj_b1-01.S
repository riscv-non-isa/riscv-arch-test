
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Jun 21 10:24:22 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/update/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64Zfinx/fsgnj.s.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsgnj.s instruction of the RISC-V RV64_Zfinx,RV64_Zdinx extension for the fsgnj_b1 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fsgnj_b1)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x30, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x31; op2:x30; dest:x31; op1val:0x0; op2val:0x0;
   valaddr_reg:x3; val_offset:0*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x31, x30, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x29; op2:x29; dest:x30; op1val:0x0; op2val:0x0;
   valaddr_reg:x3; val_offset:2*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x30, x29, x29, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs2 == rd != rs1, rs1==x30, rs2==x28, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x28; dest:x28; op1val:0x0; op2val:0x1;
   valaddr_reg:x3; val_offset:4*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x28, x30, x28, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x27; op2:x27; dest:x27; op1val:0x0; op2val:0x0;
   valaddr_reg:x3; val_offset:6*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x27, x27, x27, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x31, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x28; op2:x31; dest:x29; op1val:0x0; op2val:0x2;
   valaddr_reg:x3; val_offset:8*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x29, x28, x31, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x25, rs2==x24, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x25; op2:x24; dest:x26; op1val:0x0; op2val:0x807ffffe;
   valaddr_reg:x3; val_offset:10*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x26, x25, x24, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x24; op2:x26; dest:x25; op1val:0x0; op2val:0x7fffff;
   valaddr_reg:x3; val_offset:12*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x25, x24, x26, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x26, rs2==x25, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x26; op2:x25; dest:x24; op1val:0x0; op2val:0x807fffff;
   valaddr_reg:x3; val_offset:14*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x24, x26, x25, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x21, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x22; op2:x21; dest:x23; op1val:0x0; op2val:0x800000;
   valaddr_reg:x3; val_offset:16*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x23, x22, x21, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x21, rs2==x23, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x21; op2:x23; dest:x22; op1val:0x0; op2val:0x80800000;
   valaddr_reg:x3; val_offset:18*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x22, x21, x23, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x23, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x23; op2:x22; dest:x21; op1val:0x0; op2val:0x800001;
   valaddr_reg:x3; val_offset:20*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x21, x23, x22, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x19, rs2==x18, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x19; op2:x18; dest:x20; op1val:0x0; op2val:0x80855555;
   valaddr_reg:x3; val_offset:22*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x20, x19, x18, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x18; op2:x20; dest:x19; op1val:0x0; op2val:0x7f7fffff;
   valaddr_reg:x3; val_offset:24*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x19, x18, x20, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x20, rs2==x19, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x20; op2:x19; dest:x18; op1val:0x0; op2val:0xff7fffff;
   valaddr_reg:x3; val_offset:26*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x18, x20, x19, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x15, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x16; op2:x15; dest:x17; op1val:0x0; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:28*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x17, x16, x15, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x17, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x15; op2:x17; dest:x16; op1val:0x0; op2val:0xff800000;
   valaddr_reg:x3; val_offset:30*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x16, x15, x17, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x17, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x17; op2:x16; dest:x15; op1val:0x0; op2val:0x7fc00000;
   valaddr_reg:x3; val_offset:32*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x15, x17, x16, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x12, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x13; op2:x12; dest:x14; op1val:0x0; op2val:0xffc00000;
   valaddr_reg:x3; val_offset:34*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x14, x13, x12, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x12; op2:x14; dest:x13; op1val:0x0; op2val:0x7fc00001;
   valaddr_reg:x3; val_offset:36*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x13, x12, x14, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x14, rs2==x13, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x14; op2:x13; dest:x12; op1val:0x0; op2val:0xffc55555;
   valaddr_reg:x3; val_offset:38*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x12, x14, x13, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x9, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x10; op2:x9; dest:x11; op1val:0x0; op2val:0x7f800001;
   valaddr_reg:x3; val_offset:40*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x11, x10, x9, 0, 0, x3, 40*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x12,test_dataset_1)

inst_21:
// rs1==x9, rs2==x11, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x9; op2:x11; dest:x10; op1val:0x0; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:0*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x10, x9, x11, 0, 0, x12, 0*FLEN/8, x13, x1, x2)

inst_22:
// rs1==x11, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x11; op2:x10; dest:x9; op1val:0x0; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:2*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x9, x11, x10, 0, 0, x12, 2*FLEN/8, x13, x1, x2)

inst_23:
// rs1==x7, rs2==x6, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x7; op2:x6; dest:x8; op1val:0x0; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:4*FLEN/8; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP_NRM(fsgnj.s, x8, x7, x6, 0, 0, x12, 4*FLEN/8, x13, x1, x2)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x6; op2:x8; dest:x7; op1val:0x80000000; op2val:0x0;
   valaddr_reg:x12; val_offset:6*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x7, x6, x8, 0, 0, x12, 6*FLEN/8, x13, x9, x10)

inst_25:
// rs1==x8, rs2==x7, rd==x6,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x8; op2:x7; dest:x6; op1val:0x80000000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:8*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x6, x8, x7, 0, 0, x12, 8*FLEN/8, x13, x9, x10)

inst_26:
// rs1==x4, rs2==x3, rd==x5,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x4; op2:x3; dest:x5; op1val:0x80000000; op2val:0x1;
   valaddr_reg:x12; val_offset:10*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x5, x4, x3, 0, 0, x12, 10*FLEN/8, x13, x9, x10)

inst_27:
// rs1==x3, rs2==x5, rd==x4,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x3; op2:x5; dest:x4; op1val:0x80000000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:12*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x4, x3, x5, 0, 0, x12, 12*FLEN/8, x13, x9, x10)

inst_28:
// rs1==x5, rs2==x4, rd==x3,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x5; op2:x4; dest:x3; op1val:0x80000000; op2val:0x2;
   valaddr_reg:x12; val_offset:14*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x3, x5, x4, 0, 0, x12, 14*FLEN/8, x13, x9, x10)

inst_29:
// rs1==x1, rs2==x0, rd==x2,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x1; op2:x0; dest:x2; op1val:0x80000000; op2val:0x0;
   valaddr_reg:x12; val_offset:16*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x2, x1, x0, 0, 0, x12, 16*FLEN/8, x13, x9, x10)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:18*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x1, x0, x2, 0, 0, x12, 18*FLEN/8, x13, x9, x10)

inst_31:
// rs1==x2, rs2==x1, rd==x0,fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x2; op2:x1; dest:x0; op1val:0x80000000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:20*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x0, x2, x1, 0, 0, x12, 20*FLEN/8, x13, x9, x10)

inst_32:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x800000;
   valaddr_reg:x12; val_offset:22*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 22*FLEN/8, x13, x9, x10)

inst_33:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:24*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 24*FLEN/8, x13, x9, x10)

inst_34:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x800001;
   valaddr_reg:x12; val_offset:26*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 26*FLEN/8, x13, x9, x10)

inst_35:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:28*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 28*FLEN/8, x13, x9, x10)

inst_36:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:30*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 30*FLEN/8, x13, x9, x10)

inst_37:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:32*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 32*FLEN/8, x13, x9, x10)

inst_38:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:34*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 34*FLEN/8, x13, x9, x10)

inst_39:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:36*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 36*FLEN/8, x13, x9, x10)

inst_40:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:38*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 38*FLEN/8, x13, x9, x10)

inst_41:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:40*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 40*FLEN/8, x13, x9, x10)

inst_42:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:42*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 42*FLEN/8, x13, x9, x10)

inst_43:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:44*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 44*FLEN/8, x13, x9, x10)

inst_44:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:46*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 46*FLEN/8, x13, x9, x10)

inst_45:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:48*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 48*FLEN/8, x13, x9, x10)

inst_46:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:50*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 50*FLEN/8, x13, x9, x10)

inst_47:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:52*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 52*FLEN/8, x13, x9, x10)

inst_48:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x0;
   valaddr_reg:x12; val_offset:54*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 54*FLEN/8, x13, x9, x10)

inst_49:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x80000000;
   valaddr_reg:x12; val_offset:56*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 56*FLEN/8, x13, x9, x10)

inst_50:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x1;
   valaddr_reg:x12; val_offset:58*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 58*FLEN/8, x13, x9, x10)

inst_51:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x80000001;
   valaddr_reg:x12; val_offset:60*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 60*FLEN/8, x13, x9, x10)

inst_52:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x2;
   valaddr_reg:x12; val_offset:62*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 62*FLEN/8, x13, x9, x10)

inst_53:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:64*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 64*FLEN/8, x13, x9, x10)

inst_54:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:66*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 66*FLEN/8, x13, x9, x10)

inst_55:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:68*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 68*FLEN/8, x13, x9, x10)

inst_56:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x800000;
   valaddr_reg:x12; val_offset:70*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 70*FLEN/8, x13, x9, x10)

inst_57:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x80800000;
   valaddr_reg:x12; val_offset:72*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 72*FLEN/8, x13, x9, x10)

inst_58:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x800001;
   valaddr_reg:x12; val_offset:74*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 74*FLEN/8, x13, x9, x10)

inst_59:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x80855555;
   valaddr_reg:x12; val_offset:76*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 76*FLEN/8, x13, x9, x10)

inst_60:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:78*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 78*FLEN/8, x13, x9, x10)

inst_61:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:80*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 80*FLEN/8, x13, x9, x10)

inst_62:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:82*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 82*FLEN/8, x13, x9, x10)

inst_63:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xff800000;
   valaddr_reg:x12; val_offset:84*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 84*FLEN/8, x13, x9, x10)

inst_64:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:86*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 86*FLEN/8, x13, x9, x10)

inst_65:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:88*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 88*FLEN/8, x13, x9, x10)

inst_66:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:90*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 90*FLEN/8, x13, x9, x10)

inst_67:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:92*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 92*FLEN/8, x13, x9, x10)

inst_68:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:94*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 94*FLEN/8, x13, x9, x10)

inst_69:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:96*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 96*FLEN/8, x13, x9, x10)

inst_70:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:98*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 98*FLEN/8, x13, x9, x10)

inst_71:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x1; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:100*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 100*FLEN/8, x13, x9, x10)

inst_72:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x0;
   valaddr_reg:x12; val_offset:102*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 102*FLEN/8, x13, x9, x10)

inst_73:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x80000000;
   valaddr_reg:x12; val_offset:104*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 104*FLEN/8, x13, x9, x10)

inst_74:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x1;
   valaddr_reg:x12; val_offset:106*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 106*FLEN/8, x13, x9, x10)

inst_75:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x80000001;
   valaddr_reg:x12; val_offset:108*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 108*FLEN/8, x13, x9, x10)

inst_76:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x2;
   valaddr_reg:x12; val_offset:110*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 110*FLEN/8, x13, x9, x10)

inst_77:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:112*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 112*FLEN/8, x13, x9, x10)

inst_78:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:114*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 114*FLEN/8, x13, x9, x10)

inst_79:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:116*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 116*FLEN/8, x13, x9, x10)

inst_80:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x800000;
   valaddr_reg:x12; val_offset:118*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 118*FLEN/8, x13, x9, x10)

inst_81:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x80800000;
   valaddr_reg:x12; val_offset:120*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 120*FLEN/8, x13, x9, x10)

inst_82:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x800001;
   valaddr_reg:x12; val_offset:122*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 122*FLEN/8, x13, x9, x10)

inst_83:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x80855555;
   valaddr_reg:x12; val_offset:124*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 124*FLEN/8, x13, x9, x10)

inst_84:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:126*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 126*FLEN/8, x13, x9, x10)

inst_85:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:128*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 128*FLEN/8, x13, x9, x10)

inst_86:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:130*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 130*FLEN/8, x13, x9, x10)

inst_87:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0xff800000;
   valaddr_reg:x12; val_offset:132*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 132*FLEN/8, x13, x9, x10)

inst_88:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:134*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 134*FLEN/8, x13, x9, x10)

inst_89:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:136*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 136*FLEN/8, x13, x9, x10)

inst_90:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:138*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 138*FLEN/8, x13, x9, x10)

inst_91:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:140*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 140*FLEN/8, x13, x9, x10)

inst_92:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:142*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 142*FLEN/8, x13, x9, x10)

inst_93:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:144*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 144*FLEN/8, x13, x9, x10)

inst_94:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:146*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 146*FLEN/8, x13, x9, x10)

inst_95:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000001; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:148*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 148*FLEN/8, x13, x9, x10)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x0;
   valaddr_reg:x12; val_offset:150*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 150*FLEN/8, x13, x9, x10)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x80000000;
   valaddr_reg:x12; val_offset:152*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 152*FLEN/8, x13, x9, x10)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x1;
   valaddr_reg:x12; val_offset:154*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 154*FLEN/8, x13, x9, x10)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x80000001;
   valaddr_reg:x12; val_offset:156*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 156*FLEN/8, x13, x9, x10)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x2;
   valaddr_reg:x12; val_offset:158*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 158*FLEN/8, x13, x9, x10)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:160*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 160*FLEN/8, x13, x9, x10)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:162*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 162*FLEN/8, x13, x9, x10)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:164*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 164*FLEN/8, x13, x9, x10)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x800000;
   valaddr_reg:x12; val_offset:166*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 166*FLEN/8, x13, x9, x10)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x80800000;
   valaddr_reg:x12; val_offset:168*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 168*FLEN/8, x13, x9, x10)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x800001;
   valaddr_reg:x12; val_offset:170*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 170*FLEN/8, x13, x9, x10)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x80855555;
   valaddr_reg:x12; val_offset:172*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 172*FLEN/8, x13, x9, x10)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:174*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 174*FLEN/8, x13, x9, x10)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:176*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 176*FLEN/8, x13, x9, x10)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:178*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 178*FLEN/8, x13, x9, x10)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0xff800000;
   valaddr_reg:x12; val_offset:180*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 180*FLEN/8, x13, x9, x10)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:182*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 182*FLEN/8, x13, x9, x10)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:184*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 184*FLEN/8, x13, x9, x10)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:186*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 186*FLEN/8, x13, x9, x10)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:188*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 188*FLEN/8, x13, x9, x10)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:190*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 190*FLEN/8, x13, x9, x10)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:192*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 192*FLEN/8, x13, x9, x10)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:194*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 194*FLEN/8, x13, x9, x10)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x2; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:196*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 196*FLEN/8, x13, x9, x10)

inst_120:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x0;
   valaddr_reg:x12; val_offset:198*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 198*FLEN/8, x13, x9, x10)

inst_121:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x80000000;
   valaddr_reg:x12; val_offset:200*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 200*FLEN/8, x13, x9, x10)

inst_122:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x1;
   valaddr_reg:x12; val_offset:202*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 202*FLEN/8, x13, x9, x10)

inst_123:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x80000001;
   valaddr_reg:x12; val_offset:204*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 204*FLEN/8, x13, x9, x10)

inst_124:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x2;
   valaddr_reg:x12; val_offset:206*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 206*FLEN/8, x13, x9, x10)

inst_125:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:208*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 208*FLEN/8, x13, x9, x10)

inst_126:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:210*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 210*FLEN/8, x13, x9, x10)

inst_127:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:212*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 212*FLEN/8, x13, x9, x10)

inst_128:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x800000;
   valaddr_reg:x12; val_offset:214*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 214*FLEN/8, x13, x9, x10)

inst_129:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x80800000;
   valaddr_reg:x12; val_offset:216*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 216*FLEN/8, x13, x9, x10)

inst_130:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x800001;
   valaddr_reg:x12; val_offset:218*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 218*FLEN/8, x13, x9, x10)

inst_131:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x80855555;
   valaddr_reg:x12; val_offset:220*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 220*FLEN/8, x13, x9, x10)

inst_132:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:222*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 222*FLEN/8, x13, x9, x10)

inst_133:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:224*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 224*FLEN/8, x13, x9, x10)

inst_134:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:226*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 226*FLEN/8, x13, x9, x10)

inst_135:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0xff800000;
   valaddr_reg:x12; val_offset:228*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 228*FLEN/8, x13, x9, x10)

inst_136:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:230*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 230*FLEN/8, x13, x9, x10)

inst_137:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:232*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 232*FLEN/8, x13, x9, x10)

inst_138:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:234*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 234*FLEN/8, x13, x9, x10)

inst_139:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:236*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 236*FLEN/8, x13, x9, x10)

inst_140:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:238*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 238*FLEN/8, x13, x9, x10)

inst_141:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:240*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 240*FLEN/8, x13, x9, x10)

inst_142:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:242*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 242*FLEN/8, x13, x9, x10)

inst_143:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7ffffe and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffe; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:244*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 244*FLEN/8, x13, x9, x10)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x0;
   valaddr_reg:x12; val_offset:246*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 246*FLEN/8, x13, x9, x10)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x80000000;
   valaddr_reg:x12; val_offset:248*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 248*FLEN/8, x13, x9, x10)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x1;
   valaddr_reg:x12; val_offset:250*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 250*FLEN/8, x13, x9, x10)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x80000001;
   valaddr_reg:x12; val_offset:252*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 252*FLEN/8, x13, x9, x10)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x2;
   valaddr_reg:x12; val_offset:254*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 254*FLEN/8, x13, x9, x10)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:256*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 256*FLEN/8, x13, x9, x10)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:258*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 258*FLEN/8, x13, x9, x10)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:260*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 260*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_1)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x800000;
   valaddr_reg:x12; val_offset:262*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 262*FLEN/8, x13, x9, x10)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x80800000;
   valaddr_reg:x12; val_offset:264*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 264*FLEN/8, x13, x9, x10)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x800001;
   valaddr_reg:x12; val_offset:266*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 266*FLEN/8, x13, x9, x10)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x80855555;
   valaddr_reg:x12; val_offset:268*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 268*FLEN/8, x13, x9, x10)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:270*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 270*FLEN/8, x13, x9, x10)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:272*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 272*FLEN/8, x13, x9, x10)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:274*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 274*FLEN/8, x13, x9, x10)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0xff800000;
   valaddr_reg:x12; val_offset:276*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 276*FLEN/8, x13, x9, x10)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:278*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 278*FLEN/8, x13, x9, x10)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:280*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 280*FLEN/8, x13, x9, x10)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:282*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 282*FLEN/8, x13, x9, x10)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:284*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 284*FLEN/8, x13, x9, x10)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:286*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 286*FLEN/8, x13, x9, x10)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:288*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 288*FLEN/8, x13, x9, x10)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:290*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 290*FLEN/8, x13, x9, x10)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:292*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 292*FLEN/8, x13, x9, x10)

inst_168:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x0;
   valaddr_reg:x12; val_offset:294*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 294*FLEN/8, x13, x9, x10)

inst_169:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x80000000;
   valaddr_reg:x12; val_offset:296*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 296*FLEN/8, x13, x9, x10)

inst_170:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x1;
   valaddr_reg:x12; val_offset:298*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 298*FLEN/8, x13, x9, x10)

inst_171:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x80000001;
   valaddr_reg:x12; val_offset:300*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 300*FLEN/8, x13, x9, x10)

inst_172:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x2;
   valaddr_reg:x12; val_offset:302*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 302*FLEN/8, x13, x9, x10)

inst_173:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:304*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 304*FLEN/8, x13, x9, x10)

inst_174:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:306*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 306*FLEN/8, x13, x9, x10)

inst_175:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:308*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 308*FLEN/8, x13, x9, x10)

inst_176:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x800000;
   valaddr_reg:x12; val_offset:310*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 310*FLEN/8, x13, x9, x10)

inst_177:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x80800000;
   valaddr_reg:x12; val_offset:312*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 312*FLEN/8, x13, x9, x10)

inst_178:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x800001;
   valaddr_reg:x12; val_offset:314*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 314*FLEN/8, x13, x9, x10)

inst_179:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x80855555;
   valaddr_reg:x12; val_offset:316*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 316*FLEN/8, x13, x9, x10)

inst_180:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:318*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 318*FLEN/8, x13, x9, x10)

inst_181:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:320*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 320*FLEN/8, x13, x9, x10)

inst_182:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:322*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 322*FLEN/8, x13, x9, x10)

inst_183:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0xff800000;
   valaddr_reg:x12; val_offset:324*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 324*FLEN/8, x13, x9, x10)

inst_184:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:326*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 326*FLEN/8, x13, x9, x10)

inst_185:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:328*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 328*FLEN/8, x13, x9, x10)

inst_186:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:330*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 330*FLEN/8, x13, x9, x10)

inst_187:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:332*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 332*FLEN/8, x13, x9, x10)

inst_188:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:334*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 334*FLEN/8, x13, x9, x10)

inst_189:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:336*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 336*FLEN/8, x13, x9, x10)

inst_190:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:338*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 338*FLEN/8, x13, x9, x10)

inst_191:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x807fffff; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:340*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 340*FLEN/8, x13, x9, x10)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x0;
   valaddr_reg:x12; val_offset:342*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 342*FLEN/8, x13, x9, x10)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:344*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 344*FLEN/8, x13, x9, x10)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1;
   valaddr_reg:x12; val_offset:346*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 346*FLEN/8, x13, x9, x10)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:348*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 348*FLEN/8, x13, x9, x10)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x2;
   valaddr_reg:x12; val_offset:350*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 350*FLEN/8, x13, x9, x10)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:352*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 352*FLEN/8, x13, x9, x10)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:354*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 354*FLEN/8, x13, x9, x10)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:356*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 356*FLEN/8, x13, x9, x10)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x800000;
   valaddr_reg:x12; val_offset:358*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 358*FLEN/8, x13, x9, x10)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:360*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 360*FLEN/8, x13, x9, x10)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x800001;
   valaddr_reg:x12; val_offset:362*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 362*FLEN/8, x13, x9, x10)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:364*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 364*FLEN/8, x13, x9, x10)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:366*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 366*FLEN/8, x13, x9, x10)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:368*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 368*FLEN/8, x13, x9, x10)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:370*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 370*FLEN/8, x13, x9, x10)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:372*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 372*FLEN/8, x13, x9, x10)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:374*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 374*FLEN/8, x13, x9, x10)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:376*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 376*FLEN/8, x13, x9, x10)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:378*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 378*FLEN/8, x13, x9, x10)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:380*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 380*FLEN/8, x13, x9, x10)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:382*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 382*FLEN/8, x13, x9, x10)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:384*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 384*FLEN/8, x13, x9, x10)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:386*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 386*FLEN/8, x13, x9, x10)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:388*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 388*FLEN/8, x13, x9, x10)

inst_216:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x0;
   valaddr_reg:x12; val_offset:390*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 390*FLEN/8, x13, x9, x10)

inst_217:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:392*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 392*FLEN/8, x13, x9, x10)

inst_218:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x1;
   valaddr_reg:x12; val_offset:394*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 394*FLEN/8, x13, x9, x10)

inst_219:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:396*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 396*FLEN/8, x13, x9, x10)

inst_220:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x2;
   valaddr_reg:x12; val_offset:398*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 398*FLEN/8, x13, x9, x10)

inst_221:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:400*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 400*FLEN/8, x13, x9, x10)

inst_222:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:402*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 402*FLEN/8, x13, x9, x10)

inst_223:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:404*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 404*FLEN/8, x13, x9, x10)

inst_224:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x800000;
   valaddr_reg:x12; val_offset:406*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 406*FLEN/8, x13, x9, x10)

inst_225:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:408*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 408*FLEN/8, x13, x9, x10)

inst_226:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x800001;
   valaddr_reg:x12; val_offset:410*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 410*FLEN/8, x13, x9, x10)

inst_227:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:412*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 412*FLEN/8, x13, x9, x10)

inst_228:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:414*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 414*FLEN/8, x13, x9, x10)

inst_229:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:416*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 416*FLEN/8, x13, x9, x10)

inst_230:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:418*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 418*FLEN/8, x13, x9, x10)

inst_231:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:420*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 420*FLEN/8, x13, x9, x10)

inst_232:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:422*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 422*FLEN/8, x13, x9, x10)

inst_233:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:424*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 424*FLEN/8, x13, x9, x10)

inst_234:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:426*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 426*FLEN/8, x13, x9, x10)

inst_235:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:428*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 428*FLEN/8, x13, x9, x10)

inst_236:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:430*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 430*FLEN/8, x13, x9, x10)

inst_237:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:432*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 432*FLEN/8, x13, x9, x10)

inst_238:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:434*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 434*FLEN/8, x13, x9, x10)

inst_239:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80800000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:436*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 436*FLEN/8, x13, x9, x10)

inst_240:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x0;
   valaddr_reg:x12; val_offset:438*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 438*FLEN/8, x13, x9, x10)

inst_241:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x80000000;
   valaddr_reg:x12; val_offset:440*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 440*FLEN/8, x13, x9, x10)

inst_242:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x1;
   valaddr_reg:x12; val_offset:442*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 442*FLEN/8, x13, x9, x10)

inst_243:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x80000001;
   valaddr_reg:x12; val_offset:444*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 444*FLEN/8, x13, x9, x10)

inst_244:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x2;
   valaddr_reg:x12; val_offset:446*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 446*FLEN/8, x13, x9, x10)

inst_245:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:448*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 448*FLEN/8, x13, x9, x10)

inst_246:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:450*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 450*FLEN/8, x13, x9, x10)

inst_247:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:452*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 452*FLEN/8, x13, x9, x10)

inst_248:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x800000;
   valaddr_reg:x12; val_offset:454*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 454*FLEN/8, x13, x9, x10)

inst_249:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x80800000;
   valaddr_reg:x12; val_offset:456*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 456*FLEN/8, x13, x9, x10)

inst_250:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x800001;
   valaddr_reg:x12; val_offset:458*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 458*FLEN/8, x13, x9, x10)

inst_251:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x80855555;
   valaddr_reg:x12; val_offset:460*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 460*FLEN/8, x13, x9, x10)

inst_252:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:462*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 462*FLEN/8, x13, x9, x10)

inst_253:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:464*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 464*FLEN/8, x13, x9, x10)

inst_254:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:466*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 466*FLEN/8, x13, x9, x10)

inst_255:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0xff800000;
   valaddr_reg:x12; val_offset:468*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 468*FLEN/8, x13, x9, x10)

inst_256:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:470*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 470*FLEN/8, x13, x9, x10)

inst_257:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:472*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 472*FLEN/8, x13, x9, x10)

inst_258:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:474*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 474*FLEN/8, x13, x9, x10)

inst_259:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:476*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 476*FLEN/8, x13, x9, x10)

inst_260:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:478*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 478*FLEN/8, x13, x9, x10)

inst_261:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:480*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 480*FLEN/8, x13, x9, x10)

inst_262:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:482*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 482*FLEN/8, x13, x9, x10)

inst_263:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x800001; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:484*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 484*FLEN/8, x13, x9, x10)

inst_264:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x0;
   valaddr_reg:x12; val_offset:486*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 486*FLEN/8, x13, x9, x10)

inst_265:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x80000000;
   valaddr_reg:x12; val_offset:488*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 488*FLEN/8, x13, x9, x10)

inst_266:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x1;
   valaddr_reg:x12; val_offset:490*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 490*FLEN/8, x13, x9, x10)

inst_267:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x80000001;
   valaddr_reg:x12; val_offset:492*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 492*FLEN/8, x13, x9, x10)

inst_268:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x2;
   valaddr_reg:x12; val_offset:494*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 494*FLEN/8, x13, x9, x10)

inst_269:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:496*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 496*FLEN/8, x13, x9, x10)

inst_270:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:498*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 498*FLEN/8, x13, x9, x10)

inst_271:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:500*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 500*FLEN/8, x13, x9, x10)

inst_272:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x800000;
   valaddr_reg:x12; val_offset:502*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 502*FLEN/8, x13, x9, x10)

inst_273:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x80800000;
   valaddr_reg:x12; val_offset:504*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 504*FLEN/8, x13, x9, x10)

inst_274:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x800001;
   valaddr_reg:x12; val_offset:506*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 506*FLEN/8, x13, x9, x10)

inst_275:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x80855555;
   valaddr_reg:x12; val_offset:508*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 508*FLEN/8, x13, x9, x10)

inst_276:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:510*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 510*FLEN/8, x13, x9, x10)

inst_277:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:512*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 512*FLEN/8, x13, x9, x10)

inst_278:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:514*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 514*FLEN/8, x13, x9, x10)

inst_279:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0xff800000;
   valaddr_reg:x12; val_offset:516*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 516*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_2)

inst_280:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:518*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 518*FLEN/8, x13, x9, x10)

inst_281:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:520*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 520*FLEN/8, x13, x9, x10)

inst_282:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:522*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 522*FLEN/8, x13, x9, x10)

inst_283:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:524*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 524*FLEN/8, x13, x9, x10)

inst_284:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:526*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 526*FLEN/8, x13, x9, x10)

inst_285:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:528*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 528*FLEN/8, x13, x9, x10)

inst_286:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:530*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 530*FLEN/8, x13, x9, x10)

inst_287:
// fs1 == 1 and fe1 == 0x01 and fm1 == 0x055555 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80855555; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:532*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 532*FLEN/8, x13, x9, x10)

inst_288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x0;
   valaddr_reg:x12; val_offset:534*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 534*FLEN/8, x13, x9, x10)

inst_289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x80000000;
   valaddr_reg:x12; val_offset:536*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 536*FLEN/8, x13, x9, x10)

inst_290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x1;
   valaddr_reg:x12; val_offset:538*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 538*FLEN/8, x13, x9, x10)

inst_291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x80000001;
   valaddr_reg:x12; val_offset:540*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 540*FLEN/8, x13, x9, x10)

inst_292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x2;
   valaddr_reg:x12; val_offset:542*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 542*FLEN/8, x13, x9, x10)

inst_293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:544*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 544*FLEN/8, x13, x9, x10)

inst_294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:546*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 546*FLEN/8, x13, x9, x10)

inst_295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:548*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 548*FLEN/8, x13, x9, x10)

inst_296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x800000;
   valaddr_reg:x12; val_offset:550*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 550*FLEN/8, x13, x9, x10)

inst_297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x80800000;
   valaddr_reg:x12; val_offset:552*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 552*FLEN/8, x13, x9, x10)

inst_298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x800001;
   valaddr_reg:x12; val_offset:554*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 554*FLEN/8, x13, x9, x10)

inst_299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x80855555;
   valaddr_reg:x12; val_offset:556*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 556*FLEN/8, x13, x9, x10)

inst_300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:558*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 558*FLEN/8, x13, x9, x10)

inst_301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:560*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 560*FLEN/8, x13, x9, x10)

inst_302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:562*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 562*FLEN/8, x13, x9, x10)

inst_303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0xff800000;
   valaddr_reg:x12; val_offset:564*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 564*FLEN/8, x13, x9, x10)

inst_304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:566*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 566*FLEN/8, x13, x9, x10)

inst_305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:568*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 568*FLEN/8, x13, x9, x10)

inst_306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:570*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 570*FLEN/8, x13, x9, x10)

inst_307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:572*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 572*FLEN/8, x13, x9, x10)

inst_308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:574*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 574*FLEN/8, x13, x9, x10)

inst_309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:576*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 576*FLEN/8, x13, x9, x10)

inst_310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:578*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 578*FLEN/8, x13, x9, x10)

inst_311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f7fffff; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:580*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 580*FLEN/8, x13, x9, x10)

inst_312:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x0;
   valaddr_reg:x12; val_offset:582*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 582*FLEN/8, x13, x9, x10)

inst_313:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x80000000;
   valaddr_reg:x12; val_offset:584*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 584*FLEN/8, x13, x9, x10)

inst_314:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x1;
   valaddr_reg:x12; val_offset:586*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 586*FLEN/8, x13, x9, x10)

inst_315:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x80000001;
   valaddr_reg:x12; val_offset:588*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 588*FLEN/8, x13, x9, x10)

inst_316:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x2;
   valaddr_reg:x12; val_offset:590*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 590*FLEN/8, x13, x9, x10)

inst_317:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:592*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 592*FLEN/8, x13, x9, x10)

inst_318:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:594*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 594*FLEN/8, x13, x9, x10)

inst_319:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:596*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 596*FLEN/8, x13, x9, x10)

inst_320:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x800000;
   valaddr_reg:x12; val_offset:598*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 598*FLEN/8, x13, x9, x10)

inst_321:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x80800000;
   valaddr_reg:x12; val_offset:600*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 600*FLEN/8, x13, x9, x10)

inst_322:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x800001;
   valaddr_reg:x12; val_offset:602*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 602*FLEN/8, x13, x9, x10)

inst_323:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x80855555;
   valaddr_reg:x12; val_offset:604*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 604*FLEN/8, x13, x9, x10)

inst_324:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:606*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 606*FLEN/8, x13, x9, x10)

inst_325:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:608*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 608*FLEN/8, x13, x9, x10)

inst_326:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:610*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 610*FLEN/8, x13, x9, x10)

inst_327:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0xff800000;
   valaddr_reg:x12; val_offset:612*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 612*FLEN/8, x13, x9, x10)

inst_328:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:614*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 614*FLEN/8, x13, x9, x10)

inst_329:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:616*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 616*FLEN/8, x13, x9, x10)

inst_330:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:618*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 618*FLEN/8, x13, x9, x10)

inst_331:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:620*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 620*FLEN/8, x13, x9, x10)

inst_332:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:622*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 622*FLEN/8, x13, x9, x10)

inst_333:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:624*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 624*FLEN/8, x13, x9, x10)

inst_334:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:626*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 626*FLEN/8, x13, x9, x10)

inst_335:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x7fffff and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:628*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 628*FLEN/8, x13, x9, x10)

inst_336:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x0;
   valaddr_reg:x12; val_offset:630*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 630*FLEN/8, x13, x9, x10)

inst_337:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:632*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 632*FLEN/8, x13, x9, x10)

inst_338:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x1;
   valaddr_reg:x12; val_offset:634*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 634*FLEN/8, x13, x9, x10)

inst_339:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:636*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 636*FLEN/8, x13, x9, x10)

inst_340:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x2;
   valaddr_reg:x12; val_offset:638*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 638*FLEN/8, x13, x9, x10)

inst_341:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:640*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 640*FLEN/8, x13, x9, x10)

inst_342:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:642*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 642*FLEN/8, x13, x9, x10)

inst_343:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:644*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 644*FLEN/8, x13, x9, x10)

inst_344:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x800000;
   valaddr_reg:x12; val_offset:646*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 646*FLEN/8, x13, x9, x10)

inst_345:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:648*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 648*FLEN/8, x13, x9, x10)

inst_346:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x800001;
   valaddr_reg:x12; val_offset:650*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 650*FLEN/8, x13, x9, x10)

inst_347:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:652*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 652*FLEN/8, x13, x9, x10)

inst_348:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:654*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 654*FLEN/8, x13, x9, x10)

inst_349:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:656*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 656*FLEN/8, x13, x9, x10)

inst_350:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:658*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 658*FLEN/8, x13, x9, x10)

inst_351:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:660*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 660*FLEN/8, x13, x9, x10)

inst_352:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:662*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 662*FLEN/8, x13, x9, x10)

inst_353:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:664*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 664*FLEN/8, x13, x9, x10)

inst_354:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:666*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 666*FLEN/8, x13, x9, x10)

inst_355:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:668*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 668*FLEN/8, x13, x9, x10)

inst_356:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:670*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 670*FLEN/8, x13, x9, x10)

inst_357:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:672*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 672*FLEN/8, x13, x9, x10)

inst_358:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:674*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 674*FLEN/8, x13, x9, x10)

inst_359:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:676*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 676*FLEN/8, x13, x9, x10)

inst_360:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x0;
   valaddr_reg:x12; val_offset:678*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 678*FLEN/8, x13, x9, x10)

inst_361:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:680*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 680*FLEN/8, x13, x9, x10)

inst_362:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x1;
   valaddr_reg:x12; val_offset:682*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 682*FLEN/8, x13, x9, x10)

inst_363:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:684*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 684*FLEN/8, x13, x9, x10)

inst_364:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x2;
   valaddr_reg:x12; val_offset:686*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 686*FLEN/8, x13, x9, x10)

inst_365:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:688*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 688*FLEN/8, x13, x9, x10)

inst_366:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:690*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 690*FLEN/8, x13, x9, x10)

inst_367:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:692*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 692*FLEN/8, x13, x9, x10)

inst_368:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x800000;
   valaddr_reg:x12; val_offset:694*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 694*FLEN/8, x13, x9, x10)

inst_369:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:696*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 696*FLEN/8, x13, x9, x10)

inst_370:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x800001;
   valaddr_reg:x12; val_offset:698*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 698*FLEN/8, x13, x9, x10)

inst_371:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:700*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 700*FLEN/8, x13, x9, x10)

inst_372:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:702*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 702*FLEN/8, x13, x9, x10)

inst_373:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:704*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 704*FLEN/8, x13, x9, x10)

inst_374:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:706*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 706*FLEN/8, x13, x9, x10)

inst_375:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:708*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 708*FLEN/8, x13, x9, x10)

inst_376:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:710*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 710*FLEN/8, x13, x9, x10)

inst_377:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:712*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 712*FLEN/8, x13, x9, x10)

inst_378:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:714*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 714*FLEN/8, x13, x9, x10)

inst_379:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:716*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 716*FLEN/8, x13, x9, x10)

inst_380:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:718*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 718*FLEN/8, x13, x9, x10)

inst_381:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:720*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 720*FLEN/8, x13, x9, x10)

inst_382:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:722*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 722*FLEN/8, x13, x9, x10)

inst_383:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xff800000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:724*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 724*FLEN/8, x13, x9, x10)

inst_384:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x0;
   valaddr_reg:x12; val_offset:726*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 726*FLEN/8, x13, x9, x10)

inst_385:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:728*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 728*FLEN/8, x13, x9, x10)

inst_386:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x1;
   valaddr_reg:x12; val_offset:730*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 730*FLEN/8, x13, x9, x10)

inst_387:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:732*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 732*FLEN/8, x13, x9, x10)

inst_388:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x2;
   valaddr_reg:x12; val_offset:734*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 734*FLEN/8, x13, x9, x10)

inst_389:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:736*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 736*FLEN/8, x13, x9, x10)

inst_390:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:738*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 738*FLEN/8, x13, x9, x10)

inst_391:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:740*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 740*FLEN/8, x13, x9, x10)

inst_392:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x800000;
   valaddr_reg:x12; val_offset:742*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 742*FLEN/8, x13, x9, x10)

inst_393:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:744*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 744*FLEN/8, x13, x9, x10)

inst_394:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x800001;
   valaddr_reg:x12; val_offset:746*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 746*FLEN/8, x13, x9, x10)

inst_395:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:748*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 748*FLEN/8, x13, x9, x10)

inst_396:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:750*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 750*FLEN/8, x13, x9, x10)

inst_397:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:752*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 752*FLEN/8, x13, x9, x10)

inst_398:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:754*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 754*FLEN/8, x13, x9, x10)

inst_399:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:756*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 756*FLEN/8, x13, x9, x10)

inst_400:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:758*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 758*FLEN/8, x13, x9, x10)

inst_401:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:760*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 760*FLEN/8, x13, x9, x10)

inst_402:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:762*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 762*FLEN/8, x13, x9, x10)

inst_403:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:764*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 764*FLEN/8, x13, x9, x10)

inst_404:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:766*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 766*FLEN/8, x13, x9, x10)

inst_405:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:768*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 768*FLEN/8, x13, x9, x10)

inst_406:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:770*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 770*FLEN/8, x13, x9, x10)

inst_407:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:772*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 772*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_3)

inst_408:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x0;
   valaddr_reg:x12; val_offset:774*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 774*FLEN/8, x13, x9, x10)

inst_409:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:776*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 776*FLEN/8, x13, x9, x10)

inst_410:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x1;
   valaddr_reg:x12; val_offset:778*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 778*FLEN/8, x13, x9, x10)

inst_411:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:780*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 780*FLEN/8, x13, x9, x10)

inst_412:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x2;
   valaddr_reg:x12; val_offset:782*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 782*FLEN/8, x13, x9, x10)

inst_413:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:784*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 784*FLEN/8, x13, x9, x10)

inst_414:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:786*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 786*FLEN/8, x13, x9, x10)

inst_415:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:788*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 788*FLEN/8, x13, x9, x10)

inst_416:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x800000;
   valaddr_reg:x12; val_offset:790*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 790*FLEN/8, x13, x9, x10)

inst_417:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:792*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 792*FLEN/8, x13, x9, x10)

inst_418:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x800001;
   valaddr_reg:x12; val_offset:794*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 794*FLEN/8, x13, x9, x10)

inst_419:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:796*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 796*FLEN/8, x13, x9, x10)

inst_420:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:798*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 798*FLEN/8, x13, x9, x10)

inst_421:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:800*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 800*FLEN/8, x13, x9, x10)

inst_422:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:802*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 802*FLEN/8, x13, x9, x10)

inst_423:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:804*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 804*FLEN/8, x13, x9, x10)

inst_424:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:806*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 806*FLEN/8, x13, x9, x10)

inst_425:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:808*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 808*FLEN/8, x13, x9, x10)

inst_426:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:810*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 810*FLEN/8, x13, x9, x10)

inst_427:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:812*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 812*FLEN/8, x13, x9, x10)

inst_428:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:814*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 814*FLEN/8, x13, x9, x10)

inst_429:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:816*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 816*FLEN/8, x13, x9, x10)

inst_430:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:818*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 818*FLEN/8, x13, x9, x10)

inst_431:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x400000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc00000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:820*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 820*FLEN/8, x13, x9, x10)

inst_432:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x0;
   valaddr_reg:x12; val_offset:822*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 822*FLEN/8, x13, x9, x10)

inst_433:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x80000000;
   valaddr_reg:x12; val_offset:824*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 824*FLEN/8, x13, x9, x10)

inst_434:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x1;
   valaddr_reg:x12; val_offset:826*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 826*FLEN/8, x13, x9, x10)

inst_435:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x80000001;
   valaddr_reg:x12; val_offset:828*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 828*FLEN/8, x13, x9, x10)

inst_436:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x2;
   valaddr_reg:x12; val_offset:830*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 830*FLEN/8, x13, x9, x10)

inst_437:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:832*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 832*FLEN/8, x13, x9, x10)

inst_438:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:834*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 834*FLEN/8, x13, x9, x10)

inst_439:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:836*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 836*FLEN/8, x13, x9, x10)

inst_440:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x800000;
   valaddr_reg:x12; val_offset:838*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 838*FLEN/8, x13, x9, x10)

inst_441:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x80800000;
   valaddr_reg:x12; val_offset:840*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 840*FLEN/8, x13, x9, x10)

inst_442:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x800001;
   valaddr_reg:x12; val_offset:842*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 842*FLEN/8, x13, x9, x10)

inst_443:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x80855555;
   valaddr_reg:x12; val_offset:844*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 844*FLEN/8, x13, x9, x10)

inst_444:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:846*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 846*FLEN/8, x13, x9, x10)

inst_445:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:848*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 848*FLEN/8, x13, x9, x10)

inst_446:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:850*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 850*FLEN/8, x13, x9, x10)

inst_447:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0xff800000;
   valaddr_reg:x12; val_offset:852*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 852*FLEN/8, x13, x9, x10)

inst_448:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:854*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 854*FLEN/8, x13, x9, x10)

inst_449:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:856*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 856*FLEN/8, x13, x9, x10)

inst_450:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:858*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 858*FLEN/8, x13, x9, x10)

inst_451:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:860*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 860*FLEN/8, x13, x9, x10)

inst_452:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:862*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 862*FLEN/8, x13, x9, x10)

inst_453:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:864*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 864*FLEN/8, x13, x9, x10)

inst_454:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:866*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 866*FLEN/8, x13, x9, x10)

inst_455:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00001; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:868*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 868*FLEN/8, x13, x9, x10)

inst_456:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x0;
   valaddr_reg:x12; val_offset:870*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 870*FLEN/8, x13, x9, x10)

inst_457:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x80000000;
   valaddr_reg:x12; val_offset:872*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 872*FLEN/8, x13, x9, x10)

inst_458:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x1;
   valaddr_reg:x12; val_offset:874*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 874*FLEN/8, x13, x9, x10)

inst_459:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x80000001;
   valaddr_reg:x12; val_offset:876*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 876*FLEN/8, x13, x9, x10)

inst_460:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x2;
   valaddr_reg:x12; val_offset:878*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 878*FLEN/8, x13, x9, x10)

inst_461:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:880*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 880*FLEN/8, x13, x9, x10)

inst_462:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:882*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 882*FLEN/8, x13, x9, x10)

inst_463:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:884*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 884*FLEN/8, x13, x9, x10)

inst_464:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x800000;
   valaddr_reg:x12; val_offset:886*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 886*FLEN/8, x13, x9, x10)

inst_465:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x80800000;
   valaddr_reg:x12; val_offset:888*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 888*FLEN/8, x13, x9, x10)

inst_466:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x800001;
   valaddr_reg:x12; val_offset:890*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 890*FLEN/8, x13, x9, x10)

inst_467:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x80855555;
   valaddr_reg:x12; val_offset:892*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 892*FLEN/8, x13, x9, x10)

inst_468:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:894*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 894*FLEN/8, x13, x9, x10)

inst_469:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:896*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 896*FLEN/8, x13, x9, x10)

inst_470:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:898*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 898*FLEN/8, x13, x9, x10)

inst_471:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0xff800000;
   valaddr_reg:x12; val_offset:900*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 900*FLEN/8, x13, x9, x10)

inst_472:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:902*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 902*FLEN/8, x13, x9, x10)

inst_473:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:904*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 904*FLEN/8, x13, x9, x10)

inst_474:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:906*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 906*FLEN/8, x13, x9, x10)

inst_475:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:908*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 908*FLEN/8, x13, x9, x10)

inst_476:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:910*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 910*FLEN/8, x13, x9, x10)

inst_477:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:912*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 912*FLEN/8, x13, x9, x10)

inst_478:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:914*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 914*FLEN/8, x13, x9, x10)

inst_479:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffc55555; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:916*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 916*FLEN/8, x13, x9, x10)

inst_480:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x0;
   valaddr_reg:x12; val_offset:918*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 918*FLEN/8, x13, x9, x10)

inst_481:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x80000000;
   valaddr_reg:x12; val_offset:920*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 920*FLEN/8, x13, x9, x10)

inst_482:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x1;
   valaddr_reg:x12; val_offset:922*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 922*FLEN/8, x13, x9, x10)

inst_483:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x80000001;
   valaddr_reg:x12; val_offset:924*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 924*FLEN/8, x13, x9, x10)

inst_484:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x2;
   valaddr_reg:x12; val_offset:926*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 926*FLEN/8, x13, x9, x10)

inst_485:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:928*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 928*FLEN/8, x13, x9, x10)

inst_486:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:930*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 930*FLEN/8, x13, x9, x10)

inst_487:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:932*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 932*FLEN/8, x13, x9, x10)

inst_488:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x800000;
   valaddr_reg:x12; val_offset:934*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 934*FLEN/8, x13, x9, x10)

inst_489:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x80800000;
   valaddr_reg:x12; val_offset:936*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 936*FLEN/8, x13, x9, x10)

inst_490:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x800001;
   valaddr_reg:x12; val_offset:938*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 938*FLEN/8, x13, x9, x10)

inst_491:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x80855555;
   valaddr_reg:x12; val_offset:940*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 940*FLEN/8, x13, x9, x10)

inst_492:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:942*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 942*FLEN/8, x13, x9, x10)

inst_493:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:944*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 944*FLEN/8, x13, x9, x10)

inst_494:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:946*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 946*FLEN/8, x13, x9, x10)

inst_495:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0xff800000;
   valaddr_reg:x12; val_offset:948*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 948*FLEN/8, x13, x9, x10)

inst_496:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:950*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 950*FLEN/8, x13, x9, x10)

inst_497:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:952*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 952*FLEN/8, x13, x9, x10)

inst_498:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:954*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 954*FLEN/8, x13, x9, x10)

inst_499:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:956*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 956*FLEN/8, x13, x9, x10)

inst_500:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:958*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 958*FLEN/8, x13, x9, x10)

inst_501:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:960*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 960*FLEN/8, x13, x9, x10)

inst_502:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:962*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 962*FLEN/8, x13, x9, x10)

inst_503:
// fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f800001; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:964*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 964*FLEN/8, x13, x9, x10)

inst_504:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x0;
   valaddr_reg:x12; val_offset:966*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 966*FLEN/8, x13, x9, x10)

inst_505:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x80000000;
   valaddr_reg:x12; val_offset:968*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 968*FLEN/8, x13, x9, x10)

inst_506:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x1;
   valaddr_reg:x12; val_offset:970*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 970*FLEN/8, x13, x9, x10)

inst_507:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x80000001;
   valaddr_reg:x12; val_offset:972*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 972*FLEN/8, x13, x9, x10)

inst_508:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x2;
   valaddr_reg:x12; val_offset:974*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 974*FLEN/8, x13, x9, x10)

inst_509:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:976*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 976*FLEN/8, x13, x9, x10)

inst_510:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:978*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 978*FLEN/8, x13, x9, x10)

inst_511:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:980*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 980*FLEN/8, x13, x9, x10)

inst_512:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x800000;
   valaddr_reg:x12; val_offset:982*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 982*FLEN/8, x13, x9, x10)

inst_513:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x80800000;
   valaddr_reg:x12; val_offset:984*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 984*FLEN/8, x13, x9, x10)

inst_514:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x800001;
   valaddr_reg:x12; val_offset:986*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 986*FLEN/8, x13, x9, x10)

inst_515:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x80855555;
   valaddr_reg:x12; val_offset:988*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 988*FLEN/8, x13, x9, x10)

inst_516:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:990*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 990*FLEN/8, x13, x9, x10)

inst_517:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:992*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 992*FLEN/8, x13, x9, x10)

inst_518:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:994*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 994*FLEN/8, x13, x9, x10)

inst_519:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0xff800000;
   valaddr_reg:x12; val_offset:996*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 996*FLEN/8, x13, x9, x10)

inst_520:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:998*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 998*FLEN/8, x13, x9, x10)

inst_521:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:1000*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1000*FLEN/8, x13, x9, x10)

inst_522:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:1002*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1002*FLEN/8, x13, x9, x10)

inst_523:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:1004*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1004*FLEN/8, x13, x9, x10)

inst_524:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:1006*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1006*FLEN/8, x13, x9, x10)

inst_525:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:1008*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1008*FLEN/8, x13, x9, x10)

inst_526:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:1010*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1010*FLEN/8, x13, x9, x10)

inst_527:
// fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xffaaaaaa; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:1012*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1012*FLEN/8, x13, x9, x10)

inst_528:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x0;
   valaddr_reg:x12; val_offset:1014*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1014*FLEN/8, x13, x9, x10)

inst_529:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:1016*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1016*FLEN/8, x13, x9, x10)

inst_530:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x1;
   valaddr_reg:x12; val_offset:1018*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1018*FLEN/8, x13, x9, x10)

inst_531:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:1020*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1020*FLEN/8, x13, x9, x10)

inst_532:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x2;
   valaddr_reg:x12; val_offset:1022*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1022*FLEN/8, x13, x9, x10)

inst_533:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:1024*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1024*FLEN/8, x13, x9, x10)

inst_534:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:1026*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1026*FLEN/8, x13, x9, x10)

inst_535:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:1028*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1028*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_4)

inst_536:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x800000;
   valaddr_reg:x12; val_offset:1030*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1030*FLEN/8, x13, x9, x10)

inst_537:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:1032*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1032*FLEN/8, x13, x9, x10)

inst_538:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x800001;
   valaddr_reg:x12; val_offset:1034*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1034*FLEN/8, x13, x9, x10)

inst_539:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:1036*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1036*FLEN/8, x13, x9, x10)

inst_540:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:1038*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1038*FLEN/8, x13, x9, x10)

inst_541:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:1040*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1040*FLEN/8, x13, x9, x10)

inst_542:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:1042*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1042*FLEN/8, x13, x9, x10)

inst_543:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:1044*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1044*FLEN/8, x13, x9, x10)

inst_544:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:1046*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1046*FLEN/8, x13, x9, x10)

inst_545:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:1048*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1048*FLEN/8, x13, x9, x10)

inst_546:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:1050*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1050*FLEN/8, x13, x9, x10)

inst_547:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:1052*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1052*FLEN/8, x13, x9, x10)

inst_548:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:1054*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1054*FLEN/8, x13, x9, x10)

inst_549:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:1056*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1056*FLEN/8, x13, x9, x10)

inst_550:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:1058*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1058*FLEN/8, x13, x9, x10)

inst_551:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:1060*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1060*FLEN/8, x13, x9, x10)

inst_552:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x0;
   valaddr_reg:x12; val_offset:1062*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1062*FLEN/8, x13, x9, x10)

inst_553:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x80000000;
   valaddr_reg:x12; val_offset:1064*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1064*FLEN/8, x13, x9, x10)

inst_554:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x1;
   valaddr_reg:x12; val_offset:1066*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1066*FLEN/8, x13, x9, x10)

inst_555:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:1068*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1068*FLEN/8, x13, x9, x10)

inst_556:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x2;
   valaddr_reg:x12; val_offset:1070*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1070*FLEN/8, x13, x9, x10)

inst_557:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:1072*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1072*FLEN/8, x13, x9, x10)

inst_558:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:1074*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1074*FLEN/8, x13, x9, x10)

inst_559:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:1076*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1076*FLEN/8, x13, x9, x10)

inst_560:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x800000;
   valaddr_reg:x12; val_offset:1078*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1078*FLEN/8, x13, x9, x10)

inst_561:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x80800000;
   valaddr_reg:x12; val_offset:1080*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1080*FLEN/8, x13, x9, x10)

inst_562:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x800001;
   valaddr_reg:x12; val_offset:1082*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1082*FLEN/8, x13, x9, x10)

inst_563:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x055555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x80855555;
   valaddr_reg:x12; val_offset:1084*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1084*FLEN/8, x13, x9, x10)

inst_564:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x7f7fffff;
   valaddr_reg:x12; val_offset:1086*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1086*FLEN/8, x13, x9, x10)

inst_565:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0xff7fffff;
   valaddr_reg:x12; val_offset:1088*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1088*FLEN/8, x13, x9, x10)

inst_566:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:1090*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1090*FLEN/8, x13, x9, x10)

inst_567:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0xff800000;
   valaddr_reg:x12; val_offset:1092*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1092*FLEN/8, x13, x9, x10)

inst_568:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x7fc00000;
   valaddr_reg:x12; val_offset:1094*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1094*FLEN/8, x13, x9, x10)

inst_569:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x400000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0xffc00000;
   valaddr_reg:x12; val_offset:1096*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1096*FLEN/8, x13, x9, x10)

inst_570:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x400001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x7fc00001;
   valaddr_reg:x12; val_offset:1098*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1098*FLEN/8, x13, x9, x10)

inst_571:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x455555 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0xffc55555;
   valaddr_reg:x12; val_offset:1100*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1100*FLEN/8, x13, x9, x10)

inst_572:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x7f800001;
   valaddr_reg:x12; val_offset:1102*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1102*FLEN/8, x13, x9, x10)

inst_573:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xff and fm2 == 0x2aaaaa and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0xffaaaaaa;
   valaddr_reg:x12; val_offset:1104*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1104*FLEN/8, x13, x9, x10)

inst_574:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0x3f800000;
   valaddr_reg:x12; val_offset:1106*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1106*FLEN/8, x13, x9, x10)

inst_575:
// fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0xbf800000; op2val:0xbf800000;
   valaddr_reg:x12; val_offset:1108*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1108*FLEN/8, x13, x9, x10)

inst_576:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000000;
   valaddr_reg:x12; val_offset:1110*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1110*FLEN/8, x13, x9, x10)

inst_577:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0 and rs1_sgn_prefix == 0x00000000 and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000001;
   valaddr_reg:x12; val_offset:1112*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1112*FLEN/8, x13, x9, x10)

inst_578:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x807ffffe;
   valaddr_reg:x12; val_offset:1114*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1114*FLEN/8, x13, x9, x10)

inst_579:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0x00000000  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:1116*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1116*FLEN/8, x13, x9, x10)

inst_580:
// fs1 == 1 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0 and rs1_sgn_prefix == 0xffffffff and rs2_sgn_prefix == 0xffffffff  
/* opcode: fsgnj.s ; op1:x30; op2:x29; dest:x31; op1val:0x80000000; op2val:0x807fffff;
   valaddr_reg:x12; val_offset:1118*FLEN/8; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP_NRM(fsgnj.s, x31, x30, x29, 0, 0, x12, 1118*FLEN/8, x13, x9, x10)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8388607,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8388608,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8388609,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2139095039,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2139095040,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2143289344,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2143289345,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2139095041,64,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2156221781,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4286578688,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289344,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4290772992,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2143289345,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4291122517,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2139095041,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(4289374890,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_4:
    .fill 90*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
