
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Tue Mar  7 04:53:31 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anusha/report/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/anusha/report/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64H/rv64h_fcvt.l.h.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fcvt.l.h instruction of the RISC-V RV64F_Zicsr_Zfh extension for the fcvt.l.h_b27 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IF_Zicsr_Zfh")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*Zfh.*);def TEST_CASE_1=True;",fcvt.l.h_b27)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1==f30, rd==f31,fs1 == 0 and fe1 == 0x1f and fm1 == 0x001 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f30; dest:f31; op1val:0x7c01; valaddr_reg:x3;
val_offset:0*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f31, f30, dyn, 0, 0, x3, 0*8, x4, x1, x2,FLREG)

inst_1:// rs1==f31, rd==f30,fs1 == 1 and fe1 == 0x1f and fm1 == 0x001 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f31; dest:f30; op1val:0xfc01; valaddr_reg:x3;
val_offset:1*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f30, f31, dyn, 0, 0, x3, 1*8, x4, x1, x2,FLREG)

inst_2:// rs1==f28, rd==f29,fs1 == 0 and fe1 == 0x1f and fm1 == 0x155 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f28; dest:f29; op1val:0x7d55; valaddr_reg:x3;
val_offset:2*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f29, f28, dyn, 0, 0, x3, 2*8, x4, x1, x2,FLREG)

inst_3:// rs1==f29, rd==f28,fs1 == 1 and fe1 == 0x1f and fm1 == 0x155 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f29; dest:f28; op1val:0xfd55; valaddr_reg:x3;
val_offset:3*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f28, f29, dyn, 0, 0, x3, 3*8, x4, x1, x2,FLREG)

inst_4:// rs1==f26, rd==f27,fs1 == 0 and fe1 == 0x1f and fm1 == 0x201 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f26; dest:f27; op1val:0x7e01; valaddr_reg:x3;
val_offset:4*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f27, f26, dyn, 0, 0, x3, 4*8, x4, x1, x2,FLREG)

inst_5:// rs1==f27, rd==f26,fs1 == 1 and fe1 == 0x1f and fm1 == 0x201 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f27; dest:f26; op1val:0xfe01; valaddr_reg:x3;
val_offset:5*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f26, f27, dyn, 0, 0, x3, 5*8, x4, x1, x2,FLREG)

inst_6:// rs1==f24, rd==f25,fs1 == 0 and fe1 == 0x1f and fm1 == 0x255 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f24; dest:f25; op1val:0x7e55; valaddr_reg:x3;
val_offset:6*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f25, f24, dyn, 0, 0, x3, 6*8, x4, x1, x2,FLREG)

inst_7:// rs1==f25, rd==f24,fs1 == 1 and fe1 == 0x1f and fm1 == 0x255 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.l.h ; op1:f25; dest:f24; op1val:0xfe55; valaddr_reg:x3;
val_offset:7*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f24, f25, dyn, 0, 0, x3, 7*8, x4, x1, x2,FLREG)

inst_8:// rs1==f22, rd==f23,
/* opcode: fcvt.l.h ; op1:f22; dest:f23; op1val:0x0; valaddr_reg:x3;
val_offset:8*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f23, f22, dyn, 0, 0, x3, 8*8, x4, x1, x2,FLREG)

inst_9:// rs1==f23, rd==f22,
/* opcode: fcvt.l.h ; op1:f23; dest:f22; op1val:0x0; valaddr_reg:x3;
val_offset:9*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f22, f23, dyn, 0, 0, x3, 9*8, x4, x1, x2,FLREG)

inst_10:// rs1==f20, rd==f21,
/* opcode: fcvt.l.h ; op1:f20; dest:f21; op1val:0x0; valaddr_reg:x3;
val_offset:10*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f21, f20, dyn, 0, 0, x3, 10*8, x4, x1, x2,FLREG)

inst_11:// rs1==f21, rd==f20,
/* opcode: fcvt.l.h ; op1:f21; dest:f20; op1val:0x0; valaddr_reg:x3;
val_offset:11*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f20, f21, dyn, 0, 0, x3, 11*8, x4, x1, x2,FLREG)

inst_12:// rs1==f18, rd==f19,
/* opcode: fcvt.l.h ; op1:f18; dest:f19; op1val:0x0; valaddr_reg:x3;
val_offset:12*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f19, f18, dyn, 0, 0, x3, 12*8, x4, x1, x2,FLREG)

inst_13:// rs1==f19, rd==f18,
/* opcode: fcvt.l.h ; op1:f19; dest:f18; op1val:0x0; valaddr_reg:x3;
val_offset:13*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f18, f19, dyn, 0, 0, x3, 13*8, x4, x1, x2,FLREG)

inst_14:// rs1==f16, rd==f17,
/* opcode: fcvt.l.h ; op1:f16; dest:f17; op1val:0x0; valaddr_reg:x3;
val_offset:14*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f17, f16, dyn, 0, 0, x3, 14*8, x4, x1, x2,FLREG)

inst_15:// rs1==f17, rd==f16,
/* opcode: fcvt.l.h ; op1:f17; dest:f16; op1val:0x0; valaddr_reg:x3;
val_offset:15*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f16, f17, dyn, 0, 0, x3, 15*8, x4, x1, x2,FLREG)

inst_16:// rs1==f14, rd==f15,
/* opcode: fcvt.l.h ; op1:f14; dest:f15; op1val:0x0; valaddr_reg:x3;
val_offset:16*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f15, f14, dyn, 0, 0, x3, 16*8, x4, x1, x2,FLREG)

inst_17:// rs1==f15, rd==f14,
/* opcode: fcvt.l.h ; op1:f15; dest:f14; op1val:0x0; valaddr_reg:x3;
val_offset:17*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f14, f15, dyn, 0, 0, x3, 17*8, x4, x1, x2,FLREG)

inst_18:// rs1==f12, rd==f13,
/* opcode: fcvt.l.h ; op1:f12; dest:f13; op1val:0x0; valaddr_reg:x3;
val_offset:18*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f13, f12, dyn, 0, 0, x3, 18*8, x4, x1, x2,FLREG)

inst_19:// rs1==f13, rd==f12,
/* opcode: fcvt.l.h ; op1:f13; dest:f12; op1val:0x0; valaddr_reg:x3;
val_offset:19*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f12, f13, dyn, 0, 0, x3, 19*8, x4, x1, x2,FLREG)

inst_20:// rs1==f10, rd==f11,
/* opcode: fcvt.l.h ; op1:f10; dest:f11; op1val:0x0; valaddr_reg:x3;
val_offset:20*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f11, f10, dyn, 0, 0, x3, 20*8, x4, x1, x2,FLREG)

inst_21:// rs1==f11, rd==f10,
/* opcode: fcvt.l.h ; op1:f11; dest:f10; op1val:0x0; valaddr_reg:x3;
val_offset:21*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f10, f11, dyn, 0, 0, x3, 21*8, x4, x1, x2,FLREG)

inst_22:// rs1==f8, rd==f9,
/* opcode: fcvt.l.h ; op1:f8; dest:f9; op1val:0x0; valaddr_reg:x3;
val_offset:22*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f9, f8, dyn, 0, 0, x3, 22*8, x4, x1, x2,FLREG)

inst_23:// rs1==f9, rd==f8,
/* opcode: fcvt.l.h ; op1:f9; dest:f8; op1val:0x0; valaddr_reg:x3;
val_offset:23*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f8, f9, dyn, 0, 0, x3, 23*8, x4, x1, x2,FLREG)

inst_24:// rs1==f6, rd==f7,
/* opcode: fcvt.l.h ; op1:f6; dest:f7; op1val:0x0; valaddr_reg:x3;
val_offset:24*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f7, f6, dyn, 0, 0, x3, 24*8, x4, x1, x2,FLREG)

inst_25:// rs1==f7, rd==f6,
/* opcode: fcvt.l.h ; op1:f7; dest:f6; op1val:0x0; valaddr_reg:x3;
val_offset:25*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f6, f7, dyn, 0, 0, x3, 25*8, x4, x1, x2,FLREG)

inst_26:// rs1==f4, rd==f5,
/* opcode: fcvt.l.h ; op1:f4; dest:f5; op1val:0x0; valaddr_reg:x3;
val_offset:26*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f5, f4, dyn, 0, 0, x3, 26*8, x4, x1, x2,FLREG)

inst_27:// rs1==f5, rd==f4,
/* opcode: fcvt.l.h ; op1:f5; dest:f4; op1val:0x0; valaddr_reg:x3;
val_offset:27*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f4, f5, dyn, 0, 0, x3, 27*8, x4, x1, x2,FLREG)

inst_28:// rs1==f2, rd==f3,
/* opcode: fcvt.l.h ; op1:f2; dest:f3; op1val:0x0; valaddr_reg:x3;
val_offset:28*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f3, f2, dyn, 0, 0, x3, 28*8, x4, x1, x2,FLREG)

inst_29:// rs1==f3, rd==f2,
/* opcode: fcvt.l.h ; op1:f3; dest:f2; op1val:0x0; valaddr_reg:x3;
val_offset:29*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f2, f3, dyn, 0, 0, x3, 29*8, x4, x1, x2,FLREG)

inst_30:// rs1==f0, rd==f1,
/* opcode: fcvt.l.h ; op1:f0; dest:f1; op1val:0x0; valaddr_reg:x3;
val_offset:30*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f1, f0, dyn, 0, 0, x3, 30*8, x4, x1, x2,FLREG)

inst_31:// rs1==f1, rd==f0,
/* opcode: fcvt.l.h ; op1:f1; dest:f0; op1val:0x0; valaddr_reg:x3;
val_offset:31*8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.l.h, f0, f1, dyn, 0, 0, x3, 31*8, x4, x1, x2,FLREG)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(31745,16,FLEN)
NAN_BOXED(64513,16,FLEN)
NAN_BOXED(32085,16,FLEN)
NAN_BOXED(64853,16,FLEN)
NAN_BOXED(32257,16,FLEN)
NAN_BOXED(65025,16,FLEN)
NAN_BOXED(32341,16,FLEN)
NAN_BOXED(65109,16,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 64*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
