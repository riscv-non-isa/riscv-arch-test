
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:29 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV64D/fcvt.d.lu.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fcvt.d.lu instruction of the RISC-V RV64FD_Zicsr extension for the fcvt.d.lu_b25 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*RV64.*I.*D.*);def TEST_CASE_1=True;",fcvt.d.lu_b25)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x10,test_dataset_0)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1==x8, rd==f17,rs1_val == 0 and  fcsr == 0 and rm_val == 7  
/* opcode: fcvt.d.lu ; op1:x8; dest:f17; op1val:0x0; valaddr_reg:x10;
val_offset:0*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f17, x8, dyn, 0, 0, x10, 0*8, x20, x2, x5,ld)

inst_1:// rs1==x6, rd==f6,rs1_val == 1 and  fcsr == 0 and rm_val == 7  
/* opcode: fcvt.d.lu ; op1:x6; dest:f6; op1val:0x1; valaddr_reg:x10;
val_offset:1*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f6, x6, dyn, 0, 0, x10, 1*8, x20, x2, x5,ld)

inst_2:// rs1==x19, rd==f16,rs1_val == 10540517427298422784 and  fcsr == 0 and rm_val == 7  
/* opcode: fcvt.d.lu ; op1:x19; dest:f16; op1val:0x924770c10aefd000; valaddr_reg:x10;
val_offset:2*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f16, x19, dyn, 0, 0, x10, 2*8, x20, x2, x5,ld)

inst_3:// rs1==x1, rd==f7,rs1_val == 18446744073709551615 and  fcsr == 0 and rm_val == 7  
/* opcode: fcvt.d.lu ; op1:x1; dest:f7; op1val:0xffffffffffffffff; valaddr_reg:x10;
val_offset:3*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f7, x1, dyn, 0, 0, x10, 3*8, x20, x2, x5,ld)

inst_4:// rs1==x15, rd==f25,
/* opcode: fcvt.d.lu ; op1:x15; dest:f25; op1val:0x0; valaddr_reg:x10;
val_offset:4*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f25, x15, dyn, 0, 0, x10, 4*8, x20, x2, x5,ld)

inst_5:// rs1==x16, rd==f29,
/* opcode: fcvt.d.lu ; op1:x16; dest:f29; op1val:0x0; valaddr_reg:x10;
val_offset:5*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f29, x16, dyn, 0, 0, x10, 5*8, x20, x2, x5,ld)

inst_6:// rs1==x23, rd==f31,
/* opcode: fcvt.d.lu ; op1:x23; dest:f31; op1val:0x0; valaddr_reg:x10;
val_offset:6*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f31, x23, dyn, 0, 0, x10, 6*8, x20, x2, x5,ld)

inst_7:// rs1==x29, rd==f21,
/* opcode: fcvt.d.lu ; op1:x29; dest:f21; op1val:0x0; valaddr_reg:x10;
val_offset:7*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f21, x29, dyn, 0, 0, x10, 7*8, x20, x2, x5,ld)

inst_8:// rs1==x9, rd==f27,
/* opcode: fcvt.d.lu ; op1:x9; dest:f27; op1val:0x0; valaddr_reg:x10;
val_offset:8*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f27, x9, dyn, 0, 0, x10, 8*8, x20, x2, x5,ld)

inst_9:// rs1==x27, rd==f10,
/* opcode: fcvt.d.lu ; op1:x27; dest:f10; op1val:0x0; valaddr_reg:x10;
val_offset:9*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f10, x27, dyn, 0, 0, x10, 9*8, x20, x2, x5,ld)

inst_10:// rs1==x0, rd==f18,
/* opcode: fcvt.d.lu ; op1:x0; dest:f18; op1val:0x0; valaddr_reg:x10;
val_offset:10*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f18, x0, dyn, 0, 0, x10, 10*8, x20, x2, x5,ld)

inst_11:// rs1==x4, rd==f26,
/* opcode: fcvt.d.lu ; op1:x4; dest:f26; op1val:0x0; valaddr_reg:x10;
val_offset:11*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f26, x4, dyn, 0, 0, x10, 11*8, x20, x2, x5,ld)

inst_12:// rs1==x18, rd==f3,
/* opcode: fcvt.d.lu ; op1:x18; dest:f3; op1val:0x0; valaddr_reg:x10;
val_offset:12*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f3, x18, dyn, 0, 0, x10, 12*8, x20, x2, x5,ld)

inst_13:// rs1==x12, rd==f13,
/* opcode: fcvt.d.lu ; op1:x12; dest:f13; op1val:0x0; valaddr_reg:x10;
val_offset:13*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f13, x12, dyn, 0, 0, x10, 13*8, x20, x2, x5,ld)

inst_14:// rs1==x13, rd==f2,
/* opcode: fcvt.d.lu ; op1:x13; dest:f2; op1val:0x0; valaddr_reg:x10;
val_offset:14*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f2, x13, dyn, 0, 0, x10, 14*8, x20, x2, x5,ld)

inst_15:// rs1==x21, rd==f19,
/* opcode: fcvt.d.lu ; op1:x21; dest:f19; op1val:0x0; valaddr_reg:x10;
val_offset:15*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f19, x21, dyn, 0, 0, x10, 15*8, x20, x2, x5,ld)

inst_16:// rs1==x24, rd==f5,
/* opcode: fcvt.d.lu ; op1:x24; dest:f5; op1val:0x0; valaddr_reg:x10;
val_offset:16*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f5, x24, dyn, 0, 0, x10, 16*8, x20, x2, x5,ld)

inst_17:// rs1==x14, rd==f9,
/* opcode: fcvt.d.lu ; op1:x14; dest:f9; op1val:0x0; valaddr_reg:x10;
val_offset:17*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f9, x14, dyn, 0, 0, x10, 17*8, x20, x2, x5,ld)

inst_18:// rs1==x17, rd==f11,
/* opcode: fcvt.d.lu ; op1:x17; dest:f11; op1val:0x0; valaddr_reg:x10;
val_offset:18*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f11, x17, dyn, 0, 0, x10, 18*8, x20, x2, x5,ld)

inst_19:// rs1==x11, rd==f24,
/* opcode: fcvt.d.lu ; op1:x11; dest:f24; op1val:0x0; valaddr_reg:x10;
val_offset:19*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f24, x11, dyn, 0, 0, x10, 19*8, x20, x2, x5,ld)

inst_20:// rs1==x22, rd==f1,
/* opcode: fcvt.d.lu ; op1:x22; dest:f1; op1val:0x0; valaddr_reg:x10;
val_offset:20*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f1, x22, dyn, 0, 0, x10, 20*8, x20, x2, x5,ld)

inst_21:// rs1==x3, rd==f28,
/* opcode: fcvt.d.lu ; op1:x3; dest:f28; op1val:0x0; valaddr_reg:x10;
val_offset:21*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f28, x3, dyn, 0, 0, x10, 21*8, x20, x2, x5,ld)

inst_22:// rs1==x7, rd==f14,
/* opcode: fcvt.d.lu ; op1:x7; dest:f14; op1val:0x0; valaddr_reg:x10;
val_offset:22*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f14, x7, dyn, 0, 0, x10, 22*8, x20, x2, x5,ld)

inst_23:// rs1==x28, rd==f12,
/* opcode: fcvt.d.lu ; op1:x28; dest:f12; op1val:0x0; valaddr_reg:x10;
val_offset:23*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f12, x28, dyn, 0, 0, x10, 23*8, x20, x2, x5,ld)

inst_24:// rs1==x31, rd==f4,
/* opcode: fcvt.d.lu ; op1:x31; dest:f4; op1val:0x0; valaddr_reg:x10;
val_offset:24*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f4, x31, dyn, 0, 0, x10, 24*8, x20, x2, x5,ld)
RVTEST_VALBASEUPD(x4,test_dataset_1)

inst_25:// rs1==x25, rd==f22,
/* opcode: fcvt.d.lu ; op1:x25; dest:f22; op1val:0x0; valaddr_reg:x4;
val_offset:0*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f22, x25, dyn, 0, 0, x4, 0*8, x6, x2, x5,ld)

inst_26:// rs1==x26, rd==f15,
/* opcode: fcvt.d.lu ; op1:x26; dest:f15; op1val:0x0; valaddr_reg:x4;
val_offset:1*8; rmval:dyn; correctval:0; testreg:x5;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f15, x26, dyn, 0, 0, x4, 1*8, x6, x2, x5,ld)

inst_27:// rs1==x30, rd==f8,
/* opcode: fcvt.d.lu ; op1:x30; dest:f8; op1val:0x0; valaddr_reg:x4;
val_offset:2*8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f8, x30, dyn, 0, 0, x4, 2*8, x6, x2, x3,ld)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:// rs1==x5, rd==f23,
/* opcode: fcvt.d.lu ; op1:x5; dest:f23; op1val:0x0; valaddr_reg:x4;
val_offset:3*8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f23, x5, dyn, 0, 0, x4, 3*8, x6, x1, x3,ld)

inst_29:// rs1==x2, rd==f0,
/* opcode: fcvt.d.lu ; op1:x2; dest:f0; op1val:0x0; valaddr_reg:x4;
val_offset:4*8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f0, x2, dyn, 0, 0, x4, 4*8, x6, x1, x3,ld)

inst_30:// rs1==x10, rd==f20,
/* opcode: fcvt.d.lu ; op1:x10; dest:f20; op1val:0x0; valaddr_reg:x4;
val_offset:5*8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f20, x10, dyn, 0, 0, x4, 5*8, x6, x1, x3,ld)

inst_31:// rs1==x20, rd==f30,
/* opcode: fcvt.d.lu ; op1:x20; dest:f30; op1val:0x0; valaddr_reg:x4;
val_offset:6*8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f30, x20, dyn, 0, 0, x4, 6*8, x6, x1, x3,ld)

inst_32:// 
/* opcode: fcvt.d.lu ; op1:x31; dest:f31; op1val:0x0; valaddr_reg:x4;
val_offset:7*8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val: 0*/
TEST_FPIO_OP(fcvt.d.lu, f31, x31, dyn, 0, 0, x4, 7*8, x6, x1, x3,ld)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
.dword 0;
.dword 1;
.dword 10540517427298422784;
.dword 18446744073709551615;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
test_dataset_1:
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
.dword 0;
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x2_1:
    .fill 56*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_0:
    .fill 10*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
