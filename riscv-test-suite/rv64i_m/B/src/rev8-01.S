
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sun Jan 14 18:32:27 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv64i_b.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rev8 instruction of the RISC-V RV64Zbb,RV64Zbkb,RV64Zk,RV64Zkn,RV64Zks,RV64B extension for the rev8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZbb,RV64IZbkb,RV64IZk,RV64IZkn,RV64IZks,RV64IB")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*B.*);def TEST_CASE_1=True;",rev8)

RVTEST_CASE(1,"//check ISA:=regex(.*I.*Zbb.*);def TEST_CASE_1=True;",rev8)

RVTEST_CASE(2,"//check ISA:=regex(.*I.*Zbkb.*);def TEST_CASE_1=True;",rev8)

RVTEST_CASE(3,"//check ISA:=regex(.*I.*Zk.*);def TEST_CASE_1=True;",rev8)

RVTEST_CASE(4,"//check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",rev8)

RVTEST_CASE(5,"//check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",rev8)

RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1 == rd, rs1==x27, rd==x27, rs1_val == 0x102040801020408, 
// opcode: rev8 ; op1:x27; dest:x27; op1val:0x102040801020408;
LI(x27,0x102040801020408)
rev8 x27, x27
RVTEST_SIGUPD(x2,x27,0*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x27, 0x0000000000000000)

inst_1:// rs1 != rd, rs1==x29, rd==x11, rs1_val == 0x204080102040801, 
// opcode: rev8 ; op1:x29; dest:x11; op1val:0x204080102040801;
LI(x29,0x204080102040801)
rev8 x11, x29
RVTEST_SIGUPD(x2,x11,1*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x11, 0x0000000000000000)

inst_2:// rs1==x3, rd==x15, rs1_val == 0x408010204080102, 
// opcode: rev8 ; op1:x3; dest:x15; op1val:0x408010204080102;
LI(x3,0x408010204080102)
rev8 x15, x3
RVTEST_SIGUPD(x2,x15,2*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x15, 0x0000000000000000)

inst_3:// rs1==x25, rd==x0, rs1_val == 0x801020408010204, 
// opcode: rev8 ; op1:x25; dest:x0; op1val:0x801020408010204;
LI(x25,0x801020408010204)
rev8 x0, x25
RVTEST_SIGUPD(x2,x0,3*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x0, 0x0000000000000000)

inst_4:// rs1==x1, rd==x8, rs1_val==6148914691236517205, 
// opcode: rev8 ; op1:x1; dest:x8; op1val:0x5555555555555555;
LI(x1,0x5555555555555555)
rev8 x8, x1
RVTEST_SIGUPD(x2,x8,4*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x8, 0x0000000000000000)

inst_5:// rs1==x12, rd==x23, rs1_val==12297829382473034410, 
// opcode: rev8 ; op1:x12; dest:x23; op1val:0xaaaaaaaaaaaaaaaa;
LI(x12,0xaaaaaaaaaaaaaaaa)
rev8 x23, x12
RVTEST_SIGUPD(x2,x23,5*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x23, 0x0000000000000000)

inst_6:// rs1==x16, rd==x14, rs1_val==3689348814741910323, 
// opcode: rev8 ; op1:x16; dest:x14; op1val:0x3333333333333333;
LI(x16,0x3333333333333333)
rev8 x14, x16
RVTEST_SIGUPD(x2,x14,6*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x14, 0x0000000000000000)

inst_7:// rs1==x6, rd==x17, rs1_val==14757395258967641292, 
// opcode: rev8 ; op1:x6; dest:x17; op1val:0xcccccccccccccccc;
LI(x6,0xcccccccccccccccc)
rev8 x17, x6
RVTEST_SIGUPD(x2,x17,7*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x17, 0x0000000000000000)

inst_8:// rs1==x28, rd==x30, rs1_val == 0x797D76DF 
// opcode: rev8 ; op1:x28; dest:x30; op1val:0x797d76df;
LI(x28,0x797d76df)
rev8 x30, x28
RVTEST_SIGUPD(x2,x30,8*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x30, 0x0000000000000000)

inst_9:// rs1==x17, rd==x28, rs1_val == 0x89B9B4D6 
// opcode: rev8 ; op1:x17; dest:x28; op1val:0x89b9b4d6;
LI(x17,0x89b9b4d6)
rev8 x28, x17
RVTEST_SIGUPD(x2,x28,9*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x28, 0x0000000000000000)

inst_10:// rs1==x14, rd==x29, rs1_val == 0xA14078B4 
// opcode: rev8 ; op1:x14; dest:x29; op1val:0xa14078b4;
LI(x14,0xa14078b4)
rev8 x29, x14
RVTEST_SIGUPD(x2,x29,10*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x29, 0x0000000000000000)

inst_11:// rs1==x24, rd==x12, rs1_val == 0x3BA8EA68 
// opcode: rev8 ; op1:x24; dest:x12; op1val:0x3ba8ea68;
LI(x24,0x3ba8ea68)
rev8 x12, x24
RVTEST_SIGUPD(x2,x12,11*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x12, 0x0000000000000000)

inst_12:// rs1==x20, rd==x31, rs1_val == 0xA99E07B0 
// opcode: rev8 ; op1:x20; dest:x31; op1val:0xa99e07b0;
LI(x20,0xa99e07b0)
rev8 x31, x20
RVTEST_SIGUPD(x2,x31,12*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x31, 0x0000000000000000)

inst_13:// rs1==x10, rd==x21, rs1_val == 0x31711BA0 
// opcode: rev8 ; op1:x10; dest:x21; op1val:0x31711ba0;
LI(x10,0x31711ba0)
rev8 x21, x10
RVTEST_SIGUPD(x2,x21,13*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x21, 0x0000000000000000)

inst_14:// rs1==x22, rd==x7, rs1_val == 0x205D39C0 
// opcode: rev8 ; op1:x22; dest:x7; op1val:0x205d39c0;
LI(x22,0x205d39c0)
rev8 x7, x22
RVTEST_SIGUPD(x2,x7,14*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x7, 0x0000000000000000)

inst_15:// rs1==x21, rd==x3, rs1_val == 0xD99D0080 
// opcode: rev8 ; op1:x21; dest:x3; op1val:0xd99d0080;
LI(x21,0xd99d0080)
rev8 x3, x21
RVTEST_SIGUPD(x2,x3,15*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x3, 0x0000000000000000)

inst_16:// rs1==x11, rd==x5, rs1_val == 0xC7BFF300 
// opcode: rev8 ; op1:x11; dest:x5; op1val:0xc7bff300;
LI(x11,0xc7bff300)
rev8 x5, x11
RVTEST_SIGUPD(x2,x5,16*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x5, 0x0000000000000000)

inst_17:// rs1==x7, rd==x18, rs1_val == 0x4544FA00 
// opcode: rev8 ; op1:x7; dest:x18; op1val:0x4544fa00;
LI(x7,0x4544fa00)
rev8 x18, x7
RVTEST_SIGUPD(x2,x18,17*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x18, 0x0000000000000000)

inst_18:// rs1==x8, rd==x4, rs1_val == 0xBFA44C00 
// opcode: rev8 ; op1:x8; dest:x4; op1val:0xbfa44c00;
LI(x8,0xbfa44c00)
rev8 x4, x8
RVTEST_SIGUPD(x2,x4,18*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x9, x4, 0x0000000000000000)

inst_19:// rs1==x26, rd==x1, rs1_val == 0x3D4F1800 
// opcode: rev8 ; op1:x26; dest:x1; op1val:0x3d4f1800;
LI(x26,0x3d4f1800)
rev8 x1, x26
RVTEST_SIGUPD(x2,x1,19*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x1, 0x0000000000000000)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_20:// rs1==x23, rd==x13, rs1_val == 0x804DD000 
// opcode: rev8 ; op1:x23; dest:x13; op1val:0x804dd000;
LI(x23,0x804dd000)
rev8 x13, x23
RVTEST_SIGUPD(x1,x13,0*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x13, 0x0000000000000000)

inst_21:// rs1==x31, rd==x26, rs1_val == 0xCDF1A000 
// opcode: rev8 ; op1:x31; dest:x26; op1val:0xcdf1a000;
LI(x31,0xcdf1a000)
rev8 x26, x31
RVTEST_SIGUPD(x1,x26,1*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x26, 0x0000000000000000)

inst_22:// rs1==x5, rd==x6, rs1_val == 0xBE164000 
// opcode: rev8 ; op1:x5; dest:x6; op1val:0xbe164000;
LI(x5,0xbe164000)
rev8 x6, x5
RVTEST_SIGUPD(x1,x6,2*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x6, 0x0000000000000000)

inst_23:// rs1==x30, rd==x19, rs1_val == 0x6EB38000 
// opcode: rev8 ; op1:x30; dest:x19; op1val:0x6eb38000;
LI(x30,0x6eb38000)
rev8 x19, x30
RVTEST_SIGUPD(x1,x19,3*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x0000000000000000)

inst_24:// rs1==x9, rd==x10, rs1_val == 0xAE1D0000 
// opcode: rev8 ; op1:x9; dest:x10; op1val:0xae1d0000;
LI(x9,0xae1d0000)
rev8 x10, x9
RVTEST_SIGUPD(x1,x10,4*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x10, 0x0000000000000000)

inst_25:// rs1==x2, rd==x16, rs1_val == 0x5E3A0000 
// opcode: rev8 ; op1:x2; dest:x16; op1val:0x5e3a0000;
LI(x2,0x5e3a0000)
rev8 x16, x2
RVTEST_SIGUPD(x1,x16,5*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x0000000000000000)

inst_26:// rs1==x18, rd==x20, rs1_val == 0x5ACC0000 
// opcode: rev8 ; op1:x18; dest:x20; op1val:0x5acc0000;
LI(x18,0x5acc0000)
rev8 x20, x18
RVTEST_SIGUPD(x1,x20,6*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x0000000000000000)

inst_27:// rs1==x4, rd==x9, rs1_val == 0x35880000 
// opcode: rev8 ; op1:x4; dest:x9; op1val:0x35880000;
LI(x4,0x35880000)
rev8 x9, x4
RVTEST_SIGUPD(x1,x9,7*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x9, 0x0000000000000000)

inst_28:// rs1==x13, rd==x22, rs1_val == 0xB0700000 
// opcode: rev8 ; op1:x13; dest:x22; op1val:0xb0700000;
LI(x13,0xb0700000)
rev8 x22, x13
RVTEST_SIGUPD(x1,x22,8*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x22, 0x0000000000000000)

inst_29:// rs1==x0, rd==x2, rs1_val == 0x99200000 
// opcode: rev8 ; op1:x0; dest:x2; op1val:0x0;
LI(x0,0x0)
rev8 x2, x0
RVTEST_SIGUPD(x1,x2,9*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x2, 0x0000000000000000)

inst_30:// rs1==x15, rd==x24, rs1_val == 0xAEC00000 
// opcode: rev8 ; op1:x15; dest:x24; op1val:0xaec00000;
LI(x15,0xaec00000)
rev8 x24, x15
RVTEST_SIGUPD(x1,x24,10*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x24, 0x0000000000000000)

inst_31:// rs1==x19, rd==x25, rs1_val == 0xF1800000 
// opcode: rev8 ; op1:x19; dest:x25; op1val:0xf1800000;
LI(x19,0xf1800000)
rev8 x25, x19
RVTEST_SIGUPD(x1,x25,11*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x25, 0x0000000000000000)

inst_32:// rs1_val == 0x43000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x43000000;
LI(x30,0x43000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,12*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_33:// rs1_val == 0xAE000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xae000000;
LI(x30,0xae000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,13*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_34:// rs1_val == 0x2C000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2c000000;
LI(x30,0x2c000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,14*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_35:// rs1_val == 0xC8000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xc8000000;
LI(x30,0xc8000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,15*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_36:// rs1_val == 0x90000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x90000000;
LI(x30,0x90000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,16*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_37:// rs1_val == 0xA0000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xa0000000;
LI(x30,0xa0000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,17*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_38:// rs1_val == 0x40000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x40000000;
LI(x30,0x40000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,18*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_39:// rs1_val == 0x80000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x80000000;
LI(x30,0x80000000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,19*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_40:// rs1_val == 0x00000000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x0;
LI(x30,0x0)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,20*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_41:// rs1_val == 0xFFFFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffffff;
LI(x30,0xffffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,21*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_42:// rs1_val == 0x7FFFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x7fffffff;
LI(x30,0x7fffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,22*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_43:// rs1_val == 0xBFFFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xbfffffff;
LI(x30,0xbfffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,23*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_44:// rs1_val == 0xDFFFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xdfffffff;
LI(x30,0xdfffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,24*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_45:// rs1_val == 0xAFFFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xafffffff;
LI(x30,0xafffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,25*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_46:// rs1_val == 0xC7FFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xc7ffffff;
LI(x30,0xc7ffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,26*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_47:// rs1_val == 0xDBFFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xdbffffff;
LI(x30,0xdbffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,27*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_48:// rs1_val == 0xE1FFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xe1ffffff;
LI(x30,0xe1ffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,28*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_49:// rs1_val == 0x2EFFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2effffff;
LI(x30,0x2effffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,29*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_50:// rs1_val == 0xA67FFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xa67fffff;
LI(x30,0xa67fffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,30*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_51:// rs1_val == 0x3B3FFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x3b3fffff;
LI(x30,0x3b3fffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,31*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_52:// rs1_val == 0xAA9FFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xaa9fffff;
LI(x30,0xaa9fffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,32*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_53:// rs1_val == 0x25AFFFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x25afffff;
LI(x30,0x25afffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,33*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_54:// rs1_val == 0xDE87FFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xde87ffff;
LI(x30,0xde87ffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,34*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_55:// rs1_val == 0x39A3FFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x39a3ffff;
LI(x30,0x39a3ffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,35*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_56:// rs1_val == 0xA415FFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xa415ffff;
LI(x30,0xa415ffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,36*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_57:// rs1_val == 0xBBE8FFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xbbe8ffff;
LI(x30,0xbbe8ffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,37*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_58:// rs1_val == 0x2FF77FFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2ff77fff;
LI(x30,0x2ff77fff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,38*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_59:// rs1_val == 0x2155BFFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2155bfff;
LI(x30,0x2155bfff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,39*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_60:// rs1_val == 0x12219FFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x12219fff;
LI(x30,0x12219fff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,40*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_61:// rs1_val == 0x88042FFF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x88042fff;
LI(x30,0x88042fff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,41*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_62:// rs1_val == 0xD885B7FF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xd885b7ff;
LI(x30,0xd885b7ff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,42*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_63:// rs1_val == 0x36C2A3FF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x36c2a3ff;
LI(x30,0x36c2a3ff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,43*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_64:// rs1_val == 0xBEA425FF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xbea425ff;
LI(x30,0xbea425ff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,44*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_65:// rs1_val == 0x4B6EA0FF 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x4b6ea0ff;
LI(x30,0x4b6ea0ff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,45*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_66:// rs1_val == 0x07AC5F7F 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x7ac5f7f;
LI(x30,0x7ac5f7f)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,46*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_67:// rs1_val == 0x6E7C0C3F 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x6e7c0c3f;
LI(x30,0x6e7c0c3f)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,47*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_68:// rs1_val == 0x2054FA9F 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2054fa9f;
LI(x30,0x2054fa9f)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,48*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_69:// rs1_val == 0xD670A82F 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xd670a82f;
LI(x30,0xd670a82f)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,49*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_70:// rs1_val == 0xAF2529C7 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xaf2529c7;
LI(x30,0xaf2529c7)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,50*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_71:// rs1_val == 0x9BC03E23 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x9bc03e23;
LI(x30,0x9bc03e23)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,51*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_72:// rs1_val == 0xFF7D5EC1 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xff7d5ec1;
LI(x30,0xff7d5ec1)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,52*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_73:// rs1_val == 0x03B1D74C 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x3b1d74c;
LI(x30,0x3b1d74c)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,53*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_74:// rs1_val == 0x00000001 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x1;
LI(x30,0x1)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,54*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_75:// rs1_val == 0x00000002 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2;
LI(x30,0x2)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,55*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_76:// rs1_val == 0x00000004 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x4;
LI(x30,0x4)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,56*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_77:// rs1_val == 0x0000000E 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xe;
LI(x30,0xe)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,57*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_78:// rs1_val == 0x00000016 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x16;
LI(x30,0x16)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,58*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_79:// rs1_val == 0x00000022 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x22;
LI(x30,0x22)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,59*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_80:// rs1_val == 0x00000077 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x77;
LI(x30,0x77)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,60*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_81:// rs1_val == 0x000000BE 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xbe;
LI(x30,0xbe)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,61*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_82:// rs1_val == 0x00000151 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x151;
LI(x30,0x151)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,62*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_83:// rs1_val == 0x00000233 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x233;
LI(x30,0x233)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,63*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_84:// rs1_val == 0x0000077A 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x77a;
LI(x30,0x77a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,64*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_85:// rs1_val == 0x00000E79 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xe79;
LI(x30,0xe79)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,65*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_86:// rs1_val == 0x0000192A 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x192a;
LI(x30,0x192a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,66*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_87:// rs1_val == 0x000031C3 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x31c3;
LI(x30,0x31c3)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,67*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_88:// rs1_val == 0x00005E87 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x5e87;
LI(x30,0x5e87)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,68*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_89:// rs1_val == 0x0000FE7A 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfe7a;
LI(x30,0xfe7a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,69*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_90:// rs1_val == 0x000167EE 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x167ee;
LI(x30,0x167ee)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,70*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_91:// rs1_val == 0x00028854 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x28854;
LI(x30,0x28854)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,71*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_92:// rs1_val == 0x00051426 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x51426;
LI(x30,0x51426)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,72*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_93:// rs1_val == 0x00087994 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x87994;
LI(x30,0x87994)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,73*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_94:// rs1_val == 0x0013EDC7 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x13edc7;
LI(x30,0x13edc7)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,74*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_95:// rs1_val == 0x002BB482 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2bb482;
LI(x30,0x2bb482)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,75*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_96:// rs1_val == 0x004CAF9D 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x4caf9d;
LI(x30,0x4caf9d)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,76*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_97:// rs1_val == 0x00B62F26 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xb62f26;
LI(x30,0xb62f26)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,77*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_98:// rs1_val == 0x01E7D160 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x1e7d160;
LI(x30,0x1e7d160)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,78*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_99:// rs1_val == 0x0344DD40 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x344dd40;
LI(x30,0x344dd40)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,79*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_100:// rs1_val == 0x07EFF9C1 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x7eff9c1;
LI(x30,0x7eff9c1)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,80*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_101:// rs1_val == 0x09852F28 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x9852f28;
LI(x30,0x9852f28)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,81*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_102:// rs1_val == 0x126B7F63 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x126b7f63;
LI(x30,0x126b7f63)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,82*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_103:// rs1_val == 0x2AB8AB68 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x2ab8ab68;
LI(x30,0x2ab8ab68)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,83*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_104:// rs1_val == 0x586E86CC 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x586e86cc;
LI(x30,0x586e86cc)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,84*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_105:// rs1_val == 0xFB710735 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfb710735;
LI(x30,0xfb710735)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,85*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_106:// rs1_val == 0xFFFFFFFE 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffffffe;
LI(x30,0xfffffffe)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,86*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_107:// rs1_val == 0xFFFFFFFD 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffffffd;
LI(x30,0xfffffffd)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,87*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_108:// rs1_val == 0xFFFFFFF9 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffffff9;
LI(x30,0xfffffff9)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,88*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_109:// rs1_val == 0xFFFFFFF1 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffffff1;
LI(x30,0xfffffff1)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,89*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_110:// rs1_val == 0xFFFFFFE8 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffffe8;
LI(x30,0xffffffe8)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,90*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_111:// rs1_val == 0xFFFFFFC1 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffffc1;
LI(x30,0xffffffc1)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,91*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_112:// rs1_val == 0xFFFFFF88 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffff88;
LI(x30,0xffffff88)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,92*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_113:// rs1_val == 0xFFFFFF5A 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffff5a;
LI(x30,0xffffff5a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,93*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_114:// rs1_val == 0xFFFFFE3B 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffffe3b;
LI(x30,0xfffffe3b)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,94*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_115:// rs1_val == 0xFFFFFC78 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffffc78;
LI(x30,0xfffffc78)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,95*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_116:// rs1_val == 0xFFFFF806 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffff806;
LI(x30,0xfffff806)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,96*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_117:// rs1_val == 0xFFFFF1C6 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffff1c6;
LI(x30,0xfffff1c6)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,97*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_118:// rs1_val == 0xFFFFE684 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffe684;
LI(x30,0xffffe684)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,98*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_119:// rs1_val == 0xFFFFCDF0 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffcdf0;
LI(x30,0xffffcdf0)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,99*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_120:// rs1_val == 0xFFFFAC3A 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffac3a;
LI(x30,0xffffac3a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,100*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_121:// rs1_val == 0xFFFF1658 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffff1658;
LI(x30,0xffff1658)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,101*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_122:// rs1_val == 0xFFFE3FBA 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffe3fba;
LI(x30,0xfffe3fba)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,102*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_123:// rs1_val == 0xFFFCEB44 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffceb44;
LI(x30,0xfffceb44)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,103*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_124:// rs1_val == 0xFFFA9778 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfffa9778;
LI(x30,0xfffa9778)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,104*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_125:// rs1_val == 0xFFF7C831 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfff7c831;
LI(x30,0xfff7c831)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,105*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_126:// rs1_val == 0xFFE06F87 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffe06f87;
LI(x30,0xffe06f87)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,106*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_127:// rs1_val == 0xFFCBCF13 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffcbcf13;
LI(x30,0xffcbcf13)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,107*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_128:// rs1_val == 0xFF9C25E7 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xff9c25e7;
LI(x30,0xff9c25e7)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,108*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_129:// rs1_val == 0xFF1E5BF0 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xff1e5bf0;
LI(x30,0xff1e5bf0)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,109*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_130:// rs1_val == 0xFE74E45F 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfe74e45f;
LI(x30,0xfe74e45f)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,110*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_131:// rs1_val == 0xFD680C1D 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfd680c1d;
LI(x30,0xfd680c1d)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,111*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_132:// rs1_val == 0xFB9F15C5 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xfb9f15c5;
LI(x30,0xfb9f15c5)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,112*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_133:// rs1_val == 0xF4338384 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xf4338384;
LI(x30,0xf4338384)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,113*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_134:// rs1_val == 0xE38123E6 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xe38123e6;
LI(x30,0xe38123e6)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,114*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_135:// rs1_val == 0xDA6AB32A 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xda6ab32a;
LI(x30,0xda6ab32a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,115*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_136:// rs1_val == 0x9AE6A229 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x9ae6a229;
LI(x30,0x9ae6a229)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,116*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_137:// rs1_val == 0x61B0EE0A 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x61b0ee0a;
LI(x30,0x61b0ee0a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,117*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_138:// rs1_val==7378697629483820646, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x6666666666666666;
LI(x30,0x6666666666666666)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,118*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_139:// rs1_val==11068046444225730969, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x9999999999999999;
LI(x30,0x9999999999999999)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,119*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_140:// rs1_val==6148914691236517204, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x5555555555555554;
LI(x30,0x5555555555555554)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,120*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_141:// rs1_val==12297829382473034409, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;
LI(x30,0xaaaaaaaaaaaaaaa9)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,121*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_142:// rs1_val==3689348814741910322, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x3333333333333332;
LI(x30,0x3333333333333332)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,122*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_143:// rs1_val==14757395258967641291, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xcccccccccccccccb;
LI(x30,0xcccccccccccccccb)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,123*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_144:// rs1_val==7378697629483820645, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x6666666666666665;
LI(x30,0x6666666666666665)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,124*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_145:// rs1_val==11068046444225730968, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x9999999999999998;
LI(x30,0x9999999999999998)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,125*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_146:// rs1_val==6148914691236517206, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x5555555555555556;
LI(x30,0x5555555555555556)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,126*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_147:// rs1_val==12297829382473034411, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaab;
LI(x30,0xaaaaaaaaaaaaaaab)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,127*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_148:// rs1_val==3689348814741910324, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x3333333333333334;
LI(x30,0x3333333333333334)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,128*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_149:// rs1_val==14757395258967641293, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xcccccccccccccccd;
LI(x30,0xcccccccccccccccd)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,129*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_150:// rs1_val==7378697629483820647, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x6666666666666667;
LI(x30,0x6666666666666667)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,130*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_151:// rs1_val==18446744073709551615, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0xffffffffffffffff;
LI(x30,0xffffffffffffffff)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,131*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_152:// rs1_val==11068046444225730970, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x999999999999999a;
LI(x30,0x999999999999999a)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,132*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_153:// rs1_val == 0x801020408010204, 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x801020408010204;
LI(x30,0x801020408010204)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,133*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)

inst_154:// rs1_val == 0x99200000 
// opcode: rev8 ; op1:x30; dest:x31; op1val:0x99200000;
LI(x30,0x99200000)
rev8 x31, x30
RVTEST_SIGUPD(x1,x31,134*XLEN/8)
RVMODEL_IO_ASSERT_GPR_EQ(x3, x31, 0x0000000000000000)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 20*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 135*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
