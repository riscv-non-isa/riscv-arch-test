
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sun Jan 14 18:32:27 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv64i_b.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli.uw instruction of the RISC-V RV64Zba,RV64B extension for the slli.uw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZba,RV64IB")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*RV64.*I.*B.*);def TEST_CASE_1=True;",slli.uw)

RVTEST_CASE(1,"//check ISA:=regex(.*RV64.*I.*Zba.*);def TEST_CASE_1=True;",slli.uw)

RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd, rs1==x4, rd==x4, imm_val == 21, rs1_val==14757395258967641291
// opcode: slli.uw ; op1:x4; dest:x4; op1val:0xcccccccccccccccb;  immval:0x15
TEST_IMM_OP( slli.uw, x4, x4, -0x66a00000, 0xcccccccccccccccb, 0x15, x11, 0*XLEN/8, x19)

inst_1:
// rs1 != rd, rs1==x16, rd==x8, imm_val == 10, rs1_val == 16777216
// opcode: slli.uw ; op1:x16; dest:x8; op1val:0x1000000;  immval:0xa
TEST_IMM_OP( slli.uw, x8, x16, 0x0, 0x1000000, 0xa, x11, 1*XLEN/8, x19)

inst_2:
// rs1==x10, rd==x28, rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: slli.uw ; op1:x10; dest:x28; op1val:0x5555555555555555;  immval:0x3
TEST_IMM_OP( slli.uw, x28, x10, -0x55555558, 0x5555555555555555, 0x3, x11, 2*XLEN/8, x19)

inst_3:
// rs1==x2, rd==x18, rs1_val == 12297829382473034410, rs1_val==12297829382473034410
// opcode: slli.uw ; op1:x2; dest:x18; op1val:0xaaaaaaaaaaaaaaaa;  immval:0x7
TEST_IMM_OP( slli.uw, x18, x2, 0x55555500, 0xaaaaaaaaaaaaaaaa, 0x7, x11, 3*XLEN/8, x19)

inst_4:
// rs1==x14, rd==x29, rs1_val == 18446744073709551614, imm_val == 4
// opcode: slli.uw ; op1:x14; dest:x29; op1val:0xfffffffffffffffe;  immval:0x4
TEST_IMM_OP( slli.uw, x29, x14, -0x20, 0xfffffffffffffffe, 0x4, x11, 4*XLEN/8, x19)

inst_5:
// rs1==x22, rd==x21, rs1_val == 18446744073709551613, imm_val == 2
// opcode: slli.uw ; op1:x22; dest:x21; op1val:0xfffffffffffffffd;  immval:0x2
TEST_IMM_OP( slli.uw, x21, x22, -0xc, 0xfffffffffffffffd, 0x2, x11, 5*XLEN/8, x19)

inst_6:
// rs1==x7, rd==x12, rs1_val == 18446744073709551611, 
// opcode: slli.uw ; op1:x7; dest:x12; op1val:0xfffffffffffffffb;  immval:0xd
TEST_IMM_OP( slli.uw, x12, x7, -0xa000, 0xfffffffffffffffb, 0xd, x11, 6*XLEN/8, x19)

inst_7:
// rs1==x24, rd==x15, rs1_val == 18446744073709551607, 
// opcode: slli.uw ; op1:x24; dest:x15; op1val:0xfffffffffffffff7;  immval:0xe
TEST_IMM_OP( slli.uw, x15, x24, -0x24000, 0xfffffffffffffff7, 0xe, x11, 7*XLEN/8, x19)

inst_8:
// rs1==x29, rd==x22, rs1_val == 18446744073709551599, 
// opcode: slli.uw ; op1:x29; dest:x22; op1val:0xffffffffffffffef;  immval:0x6
TEST_IMM_OP( slli.uw, x22, x29, -0x440, 0xffffffffffffffef, 0x6, x11, 8*XLEN/8, x19)

inst_9:
// rs1==x3, rd==x16, rs1_val == 18446744073709551583, imm_val == 30
// opcode: slli.uw ; op1:x3; dest:x16; op1val:0xffffffffffffffdf;  immval:0x1e
TEST_IMM_OP( slli.uw, x16, x3, -0x40000000, 0xffffffffffffffdf, 0x1e, x11, 9*XLEN/8, x19)

inst_10:
// rs1==x12, rd==x0, rs1_val == 18446744073709551551, 
// opcode: slli.uw ; op1:x12; dest:x0; op1val:0xffffffffffffffbf;  immval:0xc
TEST_IMM_OP( slli.uw, x0, x12, 0, 0xffffffffffffffbf, 0xc, x11, 10*XLEN/8, x19)

inst_11:
// rs1==x27, rd==x9, rs1_val == 18446744073709551487, 
// opcode: slli.uw ; op1:x27; dest:x9; op1val:0xffffffffffffff7f;  immval:0x5
TEST_IMM_OP( slli.uw, x9, x27, -0x1020, 0xffffffffffffff7f, 0x5, x11, 11*XLEN/8, x19)

inst_12:
// rs1==x8, rd==x31, rs1_val == 18446744073709551359, imm_val == 27
// opcode: slli.uw ; op1:x8; dest:x31; op1val:0xfffffffffffffeff;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x8, -0x8000000, 0xfffffffffffffeff, 0x1b, x11, 12*XLEN/8, x19)

inst_13:
// rs1==x23, rd==x25, rs1_val == 18446744073709551103, imm_val == 16
// opcode: slli.uw ; op1:x23; dest:x25; op1val:0xfffffffffffffdff;  immval:0x10
TEST_IMM_OP( slli.uw, x25, x23, -0x2010000, 0xfffffffffffffdff, 0x10, x11, 13*XLEN/8, x19)

inst_14:
// rs1==x15, rd==x3, rs1_val == 18446744073709550591, 
// opcode: slli.uw ; op1:x15; dest:x3; op1val:0xfffffffffffffbff;  immval:0xa
TEST_IMM_OP( slli.uw, x3, x15, -0x100400, 0xfffffffffffffbff, 0xa, x11, 14*XLEN/8, x19)

inst_15:
// rs1==x17, rd==x2, rs1_val == 18446744073709549567, imm_val == 15
// opcode: slli.uw ; op1:x17; dest:x2; op1val:0xfffffffffffff7ff;  immval:0xf
TEST_IMM_OP( slli.uw, x2, x17, -0x4008000, 0xfffffffffffff7ff, 0xf, x11, 15*XLEN/8, x19)

inst_16:
// rs1==x6, rd==x13, rs1_val == 18446744073709547519, 
// opcode: slli.uw ; op1:x6; dest:x13; op1val:0xffffffffffffefff;  immval:0x7
TEST_IMM_OP( slli.uw, x13, x6, -0x80080, 0xffffffffffffefff, 0x7, x11, 16*XLEN/8, x19)

inst_17:
// rs1==x5, rd==x1, rs1_val == 18446744073709543423, 
// opcode: slli.uw ; op1:x5; dest:x1; op1val:0xffffffffffffdfff;  immval:0x4
TEST_IMM_OP( slli.uw, x1, x5, -0x20010, 0xffffffffffffdfff, 0x4, x11, 17*XLEN/8, x19)

inst_18:
// rs1==x18, rd==x17, rs1_val == 18446744073709535231, 
// opcode: slli.uw ; op1:x18; dest:x17; op1val:0xffffffffffffbfff;  immval:0xd
TEST_IMM_OP( slli.uw, x17, x18, -0x8002000, 0xffffffffffffbfff, 0xd, x11, 18*XLEN/8, x3)

inst_19:
// rs1==x26, rd==x23, rs1_val == 18446744073709518847, 
// opcode: slli.uw ; op1:x26; dest:x23; op1val:0xffffffffffff7fff;  immval:0xf
TEST_IMM_OP( slli.uw, x23, x26, -0x40008000, 0xffffffffffff7fff, 0xf, x11, 19*XLEN/8, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_20:
// rs1==x28, rd==x5, rs1_val == 18446744073709486079, 
// opcode: slli.uw ; op1:x28; dest:x5; op1val:0xfffffffffffeffff;  immval:0x12
TEST_IMM_OP( slli.uw, x5, x28, -0x40000, 0xfffffffffffeffff, 0x12, x2, 0*XLEN/8, x3)

inst_21:
// rs1==x21, rd==x26, rs1_val == 18446744073709420543, 
// opcode: slli.uw ; op1:x21; dest:x26; op1val:0xfffffffffffdffff;  immval:0x15
TEST_IMM_OP( slli.uw, x26, x21, -0x200000, 0xfffffffffffdffff, 0x15, x2, 1*XLEN/8, x3)

inst_22:
// rs1==x19, rd==x20, rs1_val == 18446744073709289471, 
// opcode: slli.uw ; op1:x19; dest:x20; op1val:0xfffffffffffbffff;  immval:0x15
TEST_IMM_OP( slli.uw, x20, x19, -0x200000, 0xfffffffffffbffff, 0x15, x2, 2*XLEN/8, x3)

inst_23:
// rs1==x20, rd==x14, rs1_val == 18446744073709027327, 
// opcode: slli.uw ; op1:x20; dest:x14; op1val:0xfffffffffff7ffff;  immval:0x11
TEST_IMM_OP( slli.uw, x14, x20, -0x20000, 0xfffffffffff7ffff, 0x11, x2, 3*XLEN/8, x3)

inst_24:
// rs1==x0, rd==x30, rs1_val == 18446744073708503039, 
// opcode: slli.uw ; op1:x0; dest:x30; op1val:0x0;  immval:0xa
TEST_IMM_OP( slli.uw, x30, x0, 0x0, 0x0, 0xa, x2, 4*XLEN/8, x3)

inst_25:
// rs1==x31, rd==x19, rs1_val == 18446744073707454463, 
// opcode: slli.uw ; op1:x31; dest:x19; op1val:0xffffffffffdfffff;  immval:0x15
TEST_IMM_OP( slli.uw, x19, x31, -0x200000, 0xffffffffffdfffff, 0x15, x2, 5*XLEN/8, x3)

inst_26:
// rs1==x25, rd==x27, rs1_val == 18446744073705357311, 
// opcode: slli.uw ; op1:x25; dest:x27; op1val:0xffffffffffbfffff;  immval:0xd
TEST_IMM_OP( slli.uw, x27, x25, -0x2000, 0xffffffffffbfffff, 0xd, x2, 6*XLEN/8, x3)

inst_27:
// rs1==x1, rd==x7, rs1_val == 18446744073701163007, 
// opcode: slli.uw ; op1:x1; dest:x7; op1val:0xffffffffff7fffff;  immval:0x11
TEST_IMM_OP( slli.uw, x7, x1, -0x20000, 0xffffffffff7fffff, 0x11, x2, 7*XLEN/8, x3)

inst_28:
// rs1==x11, rd==x6, rs1_val == 18446744073692774399, 
// opcode: slli.uw ; op1:x11; dest:x6; op1val:0xfffffffffeffffff;  immval:0x6
TEST_IMM_OP( slli.uw, x6, x11, -0x40000040, 0xfffffffffeffffff, 0x6, x2, 8*XLEN/8, x3)

inst_29:
// rs1==x9, rd==x10, rs1_val == 18446744073675997183, imm_val == 29
// opcode: slli.uw ; op1:x9; dest:x10; op1val:0xfffffffffdffffff;  immval:0x1d
TEST_IMM_OP( slli.uw, x10, x9, -0x20000000, 0xfffffffffdffffff, 0x1d, x2, 9*XLEN/8, x3)

inst_30:
// rs1==x13, rd==x11, rs1_val == 18446744073642442751, 
// opcode: slli.uw ; op1:x13; dest:x11; op1val:0xfffffffffbffffff;  immval:0xb
TEST_IMM_OP( slli.uw, x11, x13, -0x800, 0xfffffffffbffffff, 0xb, x2, 10*XLEN/8, x3)

inst_31:
// rs1==x30, rd==x24, rs1_val == 18446744073575333887, 
// opcode: slli.uw ; op1:x30; dest:x24; op1val:0xfffffffff7ffffff;  immval:0x6
TEST_IMM_OP( slli.uw, x24, x30, -0x40, 0xfffffffff7ffffff, 0x6, x2, 11*XLEN/8, x3)

inst_32:
// rs1_val == 18446744073441116159, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffefffffff;  immval:0x12
TEST_IMM_OP( slli.uw, x31, x30, -0x40000, 0xffffffffefffffff, 0x12, x2, 12*XLEN/8, x3)

inst_33:
// rs1_val == 18446744073172680703, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffdfffffff;  immval:0x13
TEST_IMM_OP( slli.uw, x31, x30, -0x80000, 0xffffffffdfffffff, 0x13, x2, 13*XLEN/8, x3)

inst_34:
// rs1_val == 18446744072635809791, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffbfffffff;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, -0x200000, 0xffffffffbfffffff, 0x15, x2, 14*XLEN/8, x3)

inst_35:
// rs1_val == 18446744071562067967, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffff7fffffff;  immval:0x3
TEST_IMM_OP( slli.uw, x31, x30, -0x8, 0xffffffff7fffffff, 0x3, x2, 15*XLEN/8, x3)

inst_36:
// rs1_val == 18446744069414584319, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffeffffffff;  immval:0x5
TEST_IMM_OP( slli.uw, x31, x30, -0x20, 0xfffffffeffffffff, 0x5, x2, 16*XLEN/8, x3)

inst_37:
// rs1_val == 18446744065119617023, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffdffffffff;  immval:0x9
TEST_IMM_OP( slli.uw, x31, x30, -0x200, 0xfffffffdffffffff, 0x9, x2, 17*XLEN/8, x3)

inst_38:
// rs1_val == 18446744056529682431, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffbffffffff;  immval:0xc
TEST_IMM_OP( slli.uw, x31, x30, -0x1000, 0xfffffffbffffffff, 0xc, x2, 18*XLEN/8, x3)

inst_39:
// rs1_val == 18446744039349813247, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffff7ffffffff;  immval:0xd
TEST_IMM_OP( slli.uw, x31, x30, -0x2000, 0xfffffff7ffffffff, 0xd, x2, 19*XLEN/8, x3)

inst_40:
// rs1_val == 18446744004990074879, imm_val == 23
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffefffffffff;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, -0x800000, 0xffffffefffffffff, 0x17, x2, 20*XLEN/8, x3)

inst_41:
// rs1_val == 18446743936270598143, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffdfffffffff;  immval:0xf
TEST_IMM_OP( slli.uw, x31, x30, -0x8000, 0xffffffdfffffffff, 0xf, x2, 21*XLEN/8, x3)

inst_42:
// rs1_val == 18446743798831644671, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffbfffffffff;  immval:0x13
TEST_IMM_OP( slli.uw, x31, x30, -0x80000, 0xffffffbfffffffff, 0x13, x2, 22*XLEN/8, x3)

inst_43:
// rs1_val == 18446743523953737727, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffff7fffffffff;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x30, -0x8000000, 0xffffff7fffffffff, 0x1b, x2, 23*XLEN/8, x3)

inst_44:
// rs1_val == 18446742974197923839, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffeffffffffff;  immval:0xe
TEST_IMM_OP( slli.uw, x31, x30, -0x4000, 0xfffffeffffffffff, 0xe, x2, 24*XLEN/8, x3)

inst_45:
// rs1_val == 18446741874686296063, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffdffffffffff;  immval:0x6
TEST_IMM_OP( slli.uw, x31, x30, -0x40, 0xfffffdffffffffff, 0x6, x2, 25*XLEN/8, x3)

inst_46:
// rs1_val == 18446739675663040511, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffbffffffffff;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, -0x4, 0xfffffbffffffffff, 0x2, x2, 26*XLEN/8, x3)

inst_47:
// rs1_val == 18446735277616529407, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffff7ffffffffff;  immval:0x4
TEST_IMM_OP( slli.uw, x31, x30, -0x10, 0xfffff7ffffffffff, 0x4, x2, 27*XLEN/8, x3)

inst_48:
// rs1_val == 18446726481523507199, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffefffffffffff;  immval:0xc
TEST_IMM_OP( slli.uw, x31, x30, -0x1000, 0xffffefffffffffff, 0xc, x2, 28*XLEN/8, x3)

inst_49:
// rs1_val == 18446708889337462783, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffdfffffffffff;  immval:0x1d
TEST_IMM_OP( slli.uw, x31, x30, -0x20000000, 0xffffdfffffffffff, 0x1d, x2, 29*XLEN/8, x3)

inst_50:
// rs1_val == 18446673704965373951, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffbfffffffffff;  immval:0xb
TEST_IMM_OP( slli.uw, x31, x30, -0x800, 0xffffbfffffffffff, 0xb, x2, 30*XLEN/8, x3)

inst_51:
// rs1_val == 18446603336221196287, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffff7fffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffff7fffffffffff, 0x1f, x2, 31*XLEN/8, x3)

inst_52:
// rs1_val == 18446462598732840959, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffeffffffffffff;  immval:0x10
TEST_IMM_OP( slli.uw, x31, x30, -0x10000, 0xfffeffffffffffff, 0x10, x2, 32*XLEN/8, x3)

inst_53:
// rs1_val == 18446181123756130303, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffdffffffffffff;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x30, -0x8000000, 0xfffdffffffffffff, 0x1b, x2, 33*XLEN/8, x3)

inst_54:
// rs1_val == 18445618173802708991, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffbffffffffffff;  immval:0xb
TEST_IMM_OP( slli.uw, x31, x30, -0x800, 0xfffbffffffffffff, 0xb, x2, 34*XLEN/8, x3)

inst_55:
// rs1_val == 18444492273895866367, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfff7ffffffffffff;  immval:0xc
TEST_IMM_OP( slli.uw, x31, x30, -0x1000, 0xfff7ffffffffffff, 0xc, x2, 35*XLEN/8, x3)

inst_56:
// rs1_val == 18442240474082181119, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffefffffffffffff;  immval:0x11
TEST_IMM_OP( slli.uw, x31, x30, -0x20000, 0xffefffffffffffff, 0x11, x2, 36*XLEN/8, x3)

inst_57:
// rs1_val == 18437736874454810623, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffdfffffffffffff;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, -0x200000, 0xffdfffffffffffff, 0x15, x2, 37*XLEN/8, x3)

inst_58:
// rs1_val == 18428729675200069631, imm_val == 1
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffbfffffffffffff;  immval:0x1
TEST_IMM_OP( slli.uw, x31, x30, -0x2, 0xffbfffffffffffff, 0x1, x2, 38*XLEN/8, x3)

inst_59:
// rs1_val == 18410715276690587647, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xff7fffffffffffff;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, -0x800000, 0xff7fffffffffffff, 0x17, x2, 39*XLEN/8, x3)

inst_60:
// rs1_val == 18374686479671623679, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfeffffffffffffff;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, -0x40000000, 0xfeffffffffffffff, 0x1e, x2, 40*XLEN/8, x3)

inst_61:
// rs1_val == 18302628885633695743, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfdffffffffffffff;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x30, -0x8000000, 0xfdffffffffffffff, 0x1b, x2, 41*XLEN/8, x3)

inst_62:
// rs1_val == 18158513697557839871, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfbffffffffffffff;  immval:0x4
TEST_IMM_OP( slli.uw, x31, x30, -0x10, 0xfbffffffffffffff, 0x4, x2, 42*XLEN/8, x3)

inst_63:
// rs1_val == 17870283321406128127, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xf7ffffffffffffff;  immval:0x12
TEST_IMM_OP( slli.uw, x31, x30, -0x40000, 0xf7ffffffffffffff, 0x12, x2, 43*XLEN/8, x3)

inst_64:
// rs1_val == 17293822569102704639, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xefffffffffffffff;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, -0x200000, 0xefffffffffffffff, 0x15, x2, 44*XLEN/8, x3)

inst_65:
// rs1_val == 16140901064495857663, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xdfffffffffffffff;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x30, -0x8000000, 0xdfffffffffffffff, 0x1b, x2, 45*XLEN/8, x3)

inst_66:
// rs1_val == 13835058055282163711, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xbfffffffffffffff;  immval:0xd
TEST_IMM_OP( slli.uw, x31, x30, -0x2000, 0xbfffffffffffffff, 0xd, x2, 46*XLEN/8, x3)

inst_67:
// rs1_val == 9223372036854775807, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x7fffffffffffffff;  immval:0xd
TEST_IMM_OP( slli.uw, x31, x30, -0x2000, 0x7fffffffffffffff, 0xd, x2, 47*XLEN/8, x3)

inst_68:
// rs1_val == 1, rs1_val==1
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1;  immval:0x6
TEST_IMM_OP( slli.uw, x31, x30, 0x40, 0x1, 0x6, x2, 48*XLEN/8, x3)

inst_69:
// rs1_val == 2, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, 0x8, 0x2, 0x2, x2, 49*XLEN/8, x3)

inst_70:
// rs1_val == 4, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4;  immval:0x1
TEST_IMM_OP( slli.uw, x31, x30, 0x8, 0x4, 0x1, x2, 50*XLEN/8, x3)

inst_71:
// rs1_val == 8, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8;  immval:0x0
TEST_IMM_OP( slli.uw, x31, x30, 0x8, 0x8, 0x0, x2, 51*XLEN/8, x3)

inst_72:
// rs1_val == 16, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10;  immval:0x10
TEST_IMM_OP( slli.uw, x31, x30, 0x100000, 0x10, 0x10, x2, 52*XLEN/8, x3)

inst_73:
// rs1_val == 32, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20;  immval:0xa
TEST_IMM_OP( slli.uw, x31, x30, 0x8000, 0x20, 0xa, x2, 53*XLEN/8, x3)

inst_74:
// rs1_val == 64, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, 0x20000000, 0x40, 0x17, x2, 54*XLEN/8, x3)

inst_75:
// rs1_val == 128, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80, 0x1e, x2, 55*XLEN/8, x3)

inst_76:
// rs1_val == 256, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100;  immval:0xa
TEST_IMM_OP( slli.uw, x31, x30, 0x40000, 0x100, 0xa, x2, 56*XLEN/8, x3)

inst_77:
// rs1_val == 512, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200;  immval:0xf
TEST_IMM_OP( slli.uw, x31, x30, 0x1000000, 0x200, 0xf, x2, 57*XLEN/8, x3)

inst_78:
// rs1_val == 1024, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400;  immval:0x4
TEST_IMM_OP( slli.uw, x31, x30, 0x4000, 0x400, 0x4, x2, 58*XLEN/8, x3)

inst_79:
// rs1_val == 2048, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800, 0x1b, x2, 59*XLEN/8, x3)

inst_80:
// rs1_val == 4096, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000;  immval:0xe
TEST_IMM_OP( slli.uw, x31, x30, 0x4000000, 0x1000, 0xe, x2, 60*XLEN/8, x3)

inst_81:
// rs1_val == 8192, imm_val == 8
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000;  immval:0x8
TEST_IMM_OP( slli.uw, x31, x30, 0x200000, 0x2000, 0x8, x2, 61*XLEN/8, x3)

inst_82:
// rs1_val == 16384, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000;  immval:0x1
TEST_IMM_OP( slli.uw, x31, x30, 0x8000, 0x4000, 0x1, x2, 62*XLEN/8, x3)

inst_83:
// rs1_val == 32768, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000;  immval:0x7
TEST_IMM_OP( slli.uw, x31, x30, 0x400000, 0x8000, 0x7, x2, 63*XLEN/8, x3)

inst_84:
// rs1_val == 65536, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000;  immval:0x1
TEST_IMM_OP( slli.uw, x31, x30, 0x20000, 0x10000, 0x1, x2, 64*XLEN/8, x3)

inst_85:
// rs1_val == 9007199254740992, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000000000000;  immval:0xa
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000000000000, 0xa, x2, 65*XLEN/8, x3)

inst_86:
// rs1_val == 18014398509481984, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000000000000;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40000000000000, 0x1e, x2, 66*XLEN/8, x3)

inst_87:
// rs1_val == 36028797018963968, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000000000000;  immval:0xc
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000000000000, 0xc, x2, 67*XLEN/8, x3)

inst_88:
// rs1_val == 72057594037927936, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000000000000;  immval:0x0
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100000000000000, 0x0, x2, 68*XLEN/8, x3)

inst_89:
// rs1_val == 144115188075855872, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000000000000;  immval:0xb
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200000000000000, 0xb, x2, 69*XLEN/8, x3)

inst_90:
// rs1_val == 288230376151711744, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000000000000;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000000000000, 0x2, x2, 70*XLEN/8, x3)

inst_91:
// rs1_val == 576460752303423488, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000000000000;  immval:0x7
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000000000000, 0x7, x2, 71*XLEN/8, x3)

inst_92:
// rs1_val == 1152921504606846976, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000000000000000;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000000000000000, 0x15, x2, 72*XLEN/8, x3)

inst_93:
// rs1_val == 2305843009213693952, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000000000000;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000000000000, 0x15, x2, 73*XLEN/8, x3)

inst_94:
// rs1_val == 4611686018427387904, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000000000000;  immval:0x11
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000000000000, 0x11, x2, 74*XLEN/8, x3)

inst_95:
// rs1_val == 9223372036854775808, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000000000000;  immval:0x0
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000000000000, 0x0, x2, 75*XLEN/8, x3)

inst_96:
// rs1_val==3689348814741910323, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x3333333333333333;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, -0x40000000, 0x3333333333333333, 0x1e, x2, 76*XLEN/8, x3)

inst_97:
// rs1_val==14757395258967641292, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xcccccccccccccccc;  immval:0x8
TEST_IMM_OP( slli.uw, x31, x30, -0x33333400, 0xcccccccccccccccc, 0x8, x2, 77*XLEN/8, x3)

inst_98:
// rs1_val==7378697629483820646, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x6666666666666666;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x6666666666666666, 0x1e, x2, 78*XLEN/8, x3)

inst_99:
// rs1_val==11068046444225730969, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x9999999999999999;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, 0x66666664, 0x9999999999999999, 0x2, x2, 79*XLEN/8, x3)

inst_100:
// rs1_val==6148914691236517204, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x5555555555555554;  immval:0x7
TEST_IMM_OP( slli.uw, x31, x30, -0x55555600, 0x5555555555555554, 0x7, x2, 80*XLEN/8, x3)

inst_101:
// rs1_val==12297829382473034409, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  immval:0x6
TEST_IMM_OP( slli.uw, x31, x30, -0x555555c0, 0xaaaaaaaaaaaaaaa9, 0x6, x2, 81*XLEN/8, x3)

inst_102:
// rs1_val==3689348814741910322, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x3333333333333332;  immval:0x3
TEST_IMM_OP( slli.uw, x31, x30, -0x66666670, 0x3333333333333332, 0x3, x2, 82*XLEN/8, x3)

inst_103:
// rs1_val==7378697629483820645, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x6666666666666665;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, -0x6666666c, 0x6666666666666665, 0x2, x2, 83*XLEN/8, x3)

inst_104:
// rs1_val==11068046444225730968, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x9999999999999998;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, -0x34000000, 0x9999999999999998, 0x17, x2, 84*XLEN/8, x3)

inst_105:
// rs1_val==6148914691236517206, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x5555555555555556;  immval:0x5
TEST_IMM_OP( slli.uw, x31, x30, -0x55555540, 0x5555555555555556, 0x5, x2, 85*XLEN/8, x3)

inst_106:
// rs1_val==12297829382473034411, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x30, 0x58000000, 0xaaaaaaaaaaaaaaab, 0x1b, x2, 86*XLEN/8, x3)

inst_107:
// rs1_val==3689348814741910324, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x3333333333333334;  immval:0x3
TEST_IMM_OP( slli.uw, x31, x30, -0x66666660, 0x3333333333333334, 0x3, x2, 87*XLEN/8, x3)

inst_108:
// rs1_val==14757395258967641293, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xcccccccccccccccd;  immval:0x8
TEST_IMM_OP( slli.uw, x31, x30, -0x33333300, 0xcccccccccccccccd, 0x8, x2, 88*XLEN/8, x3)

inst_109:
// rs1_val==7378697629483820647, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x6666666666666667;  immval:0x9
TEST_IMM_OP( slli.uw, x31, x30, -0x33333200, 0x6666666666666667, 0x9, x2, 89*XLEN/8, x3)

inst_110:
// rs1_val==11068046444225730970, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x999999999999999a;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, -0x33000000, 0x999999999999999a, 0x17, x2, 90*XLEN/8, x3)

inst_111:
// rs1_val==0, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x0;  immval:0x6
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x0, 0x6, x2, 91*XLEN/8, x3)

inst_112:
// rs1_val==18446744073709551615, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x5
TEST_IMM_OP( slli.uw, x31, x30, -0x20, 0xffffffffffffffff, 0x5, x2, 92*XLEN/8, x3)

inst_113:
// rs1_val == 131072, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000, 0x17, x2, 93*XLEN/8, x3)

inst_114:
// rs1_val == 262144, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000;  immval:0xd
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x40000, 0xd, x2, 94*XLEN/8, x3)

inst_115:
// rs1_val == 524288, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000;  immval:0x12
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000, 0x12, x2, 95*XLEN/8, x3)

inst_116:
// rs1_val == 1048576, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000;  immval:0x9
TEST_IMM_OP( slli.uw, x31, x30, 0x20000000, 0x100000, 0x9, x2, 96*XLEN/8, x3)

inst_117:
// rs1_val == 2097152, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, 0x800000, 0x200000, 0x2, x2, 97*XLEN/8, x3)

inst_118:
// rs1_val == 4194304, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000;  immval:0xb
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000, 0xb, x2, 98*XLEN/8, x3)

inst_119:
// rs1_val == 8388608, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000;  immval:0x12
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000, 0x12, x2, 99*XLEN/8, x3)

inst_120:
// rs1_val == 33554432, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000;  immval:0x11
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000, 0x11, x2, 100*XLEN/8, x3)

inst_121:
// rs1_val == 67108864, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000;  immval:0xd
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000, 0xd, x2, 101*XLEN/8, x3)

inst_122:
// rs1_val == 134217728, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000;  immval:0x7
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000, 0x7, x2, 102*XLEN/8, x3)

inst_123:
// rs1_val == 268435456, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000000;  immval:0x10
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10000000, 0x10, x2, 103*XLEN/8, x3)

inst_124:
// rs1_val == 536870912, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000000;  immval:0x13
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000000, 0x13, x2, 104*XLEN/8, x3)

inst_125:
// rs1_val == 1073741824, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000000;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40000000, 0x2, x2, 105*XLEN/8, x3)

inst_126:
// rs1_val == 2147483648, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000000;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000000, 0x1e, x2, 106*XLEN/8, x3)

inst_127:
// rs1_val == 4294967296, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000000;  immval:0x9
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100000000, 0x9, x2, 107*XLEN/8, x3)

inst_128:
// rs1_val == 8589934592, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000000;  immval:0x5
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200000000, 0x5, x2, 108*XLEN/8, x3)

inst_129:
// rs1_val == 17179869184, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000000;  immval:0x3
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000000, 0x3, x2, 109*XLEN/8, x3)

inst_130:
// rs1_val == 34359738368, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000000;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000000, 0x2, x2, 110*XLEN/8, x3)

inst_131:
// rs1_val == 68719476736, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000000000;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000000000, 0x1e, x2, 111*XLEN/8, x3)

inst_132:
// rs1_val == 137438953472, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000000;  immval:0x11
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000000, 0x11, x2, 112*XLEN/8, x3)

inst_133:
// rs1_val == 274877906944, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000000;  immval:0x1
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000000, 0x1, x2, 113*XLEN/8, x3)

inst_134:
// rs1_val == 549755813888, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000000;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000000, 0x1e, x2, 114*XLEN/8, x3)

inst_135:
// rs1_val == 1099511627776, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000000000;  immval:0x8
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10000000000, 0x8, x2, 115*XLEN/8, x3)

inst_136:
// rs1_val == 2199023255552, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000000000;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000000000, 0x15, x2, 116*XLEN/8, x3)

inst_137:
// rs1_val == 4398046511104, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40000000000, 0x1f, x2, 117*XLEN/8, x3)

inst_138:
// rs1_val == 8796093022208, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000000000;  immval:0xd
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000000000, 0xd, x2, 118*XLEN/8, x3)

inst_139:
// rs1_val == 17592186044416, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000000000;  immval:0x8
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100000000000, 0x8, x2, 119*XLEN/8, x3)

inst_140:
// rs1_val == 35184372088832, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000000000;  immval:0xe
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200000000000, 0xe, x2, 120*XLEN/8, x3)

inst_141:
// rs1_val == 70368744177664, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000000000;  immval:0x10
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000000000, 0x10, x2, 121*XLEN/8, x3)

inst_142:
// rs1_val == 140737488355328, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000000000;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000000000, 0x15, x2, 122*XLEN/8, x3)

inst_143:
// rs1_val == 281474976710656, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000000000000;  immval:0x8
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000000000000, 0x8, x2, 123*XLEN/8, x3)

inst_144:
// rs1_val == 562949953421312, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000000000;  immval:0x1d
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000000000, 0x1d, x2, 124*XLEN/8, x3)

inst_145:
// rs1_val == 1125899906842624, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000000000;  immval:0xb
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000000000, 0xb, x2, 125*XLEN/8, x3)

inst_146:
// rs1_val == 2251799813685248, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000000000;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000000000, 0x17, x2, 126*XLEN/8, x3)

inst_147:
// rs1_val == 4503599627370496, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000000000000;  immval:0xc
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10000000000000, 0xc, x2, 127*XLEN/8, x3)

inst_148:
// rs1_val == 18446744073709551551, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffbf;  immval:0xc
TEST_IMM_OP( slli.uw, x31, x30, -0x41000, 0xffffffffffffffbf, 0xc, x2, 128*XLEN/8, x3)

inst_149:
// rs1_val == 18446744073708503039, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffefffff;  immval:0xa
TEST_IMM_OP( slli.uw, x31, x30, -0x40000400, 0xffffffffffefffff, 0xa, x2, 129*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x11_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x11_1:
    .fill 20*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 130*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
