
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sun Jan 14 18:32:27 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv64i_b.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the minu instruction of the RISC-V RV64Zbb,RV64B extension for the minu covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZbb,RV64IB")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*B.*);def TEST_CASE_1=True;",minu)

RVTEST_CASE(1,"//check ISA:=regex(.*I.*Zbb.*);def TEST_CASE_1=True;",minu)

RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x14, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 8, rs1_val > 0 and rs2_val > 0, rs2_val == 281474976710656
// opcode: minu ; op1:x16; op2:x16; dest:x14; op1val:0x8;  op2val:0x8
TEST_RR_OP(minu, x14, x16, x16, 0x0000000000000000, 0x8, 0x8, x3, 0*XLEN/8, x1)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x9, rd==x15, rs1_val == (2**(xlen)-1), rs2_val == 18446744073675997183
// opcode: minu ; op1:x27; op2:x9; dest:x15; op1val:0xffffffffffffffff;  op2val:0xfffffffffdffffff
TEST_RR_OP(minu, x15, x27, x9, 0x0000000000000000, 0xffffffffffffffff, 0xfffffffffdffffff, x3, 1*XLEN/8, x1)

inst_2:// rs2 == rd != rs1, rs1==x21, rs2==x7, rd==x7, rs1_val == 0, rs2_val == 288230376151711744
// opcode: minu ; op1:x21; op2:x7; dest:x7; op1val:0x0;  op2val:0x400000000000000
TEST_RR_OP(minu, x7, x21, x7, 0x0000000000000000, 0x0, 0x400000000000000, x3, 2*XLEN/8, x1)

inst_3:// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_val == 1, rs2_val == 8796093022208
// opcode: minu ; op1:x12; op2:x12; dest:x12; op1val:0x1;  op2val:0x1
TEST_RR_OP(minu, x12, x12, x12, 0x0000000000000000, 0x1, 0x1, x3, 3*XLEN/8, x1)

inst_4:// rs1 == rd != rs2, rs1==x11, rs2==x14, rd==x11, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, 
// opcode: minu ; op1:x11; op2:x14; dest:x11; op1val:0x7;  op2val:0x7
TEST_RR_OP(minu, x11, x11, x14, 0x0000000000000000, 0x7, 0x7, x3, 4*XLEN/8, x1)

inst_5:// rs1==x10, rs2==x21, rd==x13, rs2_val == (2**(xlen)-1), 
// opcode: minu ; op1:x10; op2:x21; dest:x13; op1val:0xa;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x13, x10, x21, 0x0000000000000000, 0xa, 0xffffffffffffffff, x3, 5*XLEN/8, x1)

inst_6:// rs1==x29, rs2==x10, rd==x31, rs2_val == 18446744073709551614, rs1_val == 12297829382473034410
// opcode: minu ; op1:x29; op2:x10; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xfffffffffffffffe
TEST_RR_OP(minu, x31, x29, x10, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xfffffffffffffffe, x3, 6*XLEN/8, x1)

inst_7:// rs1==x19, rs2==x5, rd==x29, rs2_val == 18446744073709551613, rs1_val == 18446744073709551611
// opcode: minu ; op1:x19; op2:x5; dest:x29; op1val:0xfffffffffffffffb;  op2val:0xfffffffffffffffd
TEST_RR_OP(minu, x29, x19, x5, 0x0000000000000000, 0xfffffffffffffffb, 0xfffffffffffffffd, x3, 7*XLEN/8, x1)

inst_8:// rs1==x15, rs2==x11, rd==x30, rs2_val == 18446744073709551611, rs1_val == 9223372036854775807
// opcode: minu ; op1:x15; op2:x11; dest:x30; op1val:0x7fffffffffffffff;  op2val:0xfffffffffffffffb
TEST_RR_OP(minu, x30, x15, x11, 0x0000000000000000, 0x7fffffffffffffff, 0xfffffffffffffffb, x3, 8*XLEN/8, x1)

inst_9:// rs1==x30, rs2==x20, rd==x2, rs2_val == 18446744073709551607, rs1_val == 9223372036854775808
// opcode: minu ; op1:x30; op2:x20; dest:x2; op1val:0x8000000000000000;  op2val:0xfffffffffffffff7
TEST_RR_OP(minu, x2, x30, x20, 0x0000000000000000, 0x8000000000000000, 0xfffffffffffffff7, x3, 9*XLEN/8, x1)

inst_10:// rs1==x17, rs2==x22, rd==x9, rs2_val == 18446744073709551599, rs1_val == 18446744073709547519
// opcode: minu ; op1:x17; op2:x22; dest:x9; op1val:0xffffffffffffefff;  op2val:0xffffffffffffffef
TEST_RR_OP(minu, x9, x17, x22, 0x0000000000000000, 0xffffffffffffefff, 0xffffffffffffffef, x3, 10*XLEN/8, x1)

inst_11:// rs1==x6, rs2==x15, rd==x8, rs2_val == 18446744073709551583, rs1_val == 35184372088832
// opcode: minu ; op1:x6; op2:x15; dest:x8; op1val:0x200000000000;  op2val:0xffffffffffffffdf
TEST_RR_OP(minu, x8, x6, x15, 0x0000000000000000, 0x200000000000, 0xffffffffffffffdf, x3, 11*XLEN/8, x1)

inst_12:// rs1==x24, rs2==x26, rd==x19, rs2_val == 18446744073709551551, rs1_val == 18410715276690587647
// opcode: minu ; op1:x24; op2:x26; dest:x19; op1val:0xff7fffffffffffff;  op2val:0xffffffffffffffbf
TEST_RR_OP(minu, x19, x24, x26, 0x0000000000000000, 0xff7fffffffffffff, 0xffffffffffffffbf, x3, 12*XLEN/8, x1)

inst_13:// rs1==x7, rs2==x18, rd==x10, rs2_val == 18446744073709551487, 
// opcode: minu ; op1:x7; op2:x18; dest:x10; op1val:0xc;  op2val:0xffffffffffffff7f
TEST_RR_OP(minu, x10, x7, x18, 0x0000000000000000, 0xc, 0xffffffffffffff7f, x3, 13*XLEN/8, x1)

inst_14:// rs1==x14, rs2==x17, rd==x1, rs2_val == 18446744073709551359, rs1_val == 64
// opcode: minu ; op1:x14; op2:x17; dest:x1; op1val:0x40;  op2val:0xfffffffffffffeff
TEST_RR_OP(minu, x1, x14, x17, 0x0000000000000000, 0x40, 0xfffffffffffffeff, x3, 14*XLEN/8, x9)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_15:// rs1==x1, rs2==x30, rd==x17, rs2_val == 18446744073709551103, 
// opcode: minu ; op1:x1; op2:x30; dest:x17; op1val:0x200000000000;  op2val:0xfffffffffffffdff
TEST_RR_OP(minu, x17, x1, x30, 0x0000000000000000, 0x200000000000, 0xfffffffffffffdff, x7, 0*XLEN/8, x9)

inst_16:// rs1==x25, rs2==x31, rd==x24, rs2_val == 18446744073709550591, rs1_val == 18446744073709551607
// opcode: minu ; op1:x25; op2:x31; dest:x24; op1val:0xfffffffffffffff7;  op2val:0xfffffffffffffbff
TEST_RR_OP(minu, x24, x25, x31, 0x0000000000000000, 0xfffffffffffffff7, 0xfffffffffffffbff, x7, 1*XLEN/8, x9)

inst_17:// rs1==x2, rs2==x6, rd==x27, rs2_val == 18446744073709549567, 
// opcode: minu ; op1:x2; op2:x6; dest:x27; op1val:0x12;  op2val:0xfffffffffffff7ff
TEST_RR_OP(minu, x27, x2, x6, 0x0000000000000000, 0x12, 0xfffffffffffff7ff, x7, 2*XLEN/8, x9)

inst_18:// rs1==x18, rs2==x27, rd==x0, rs2_val == 18446744073709547519, rs1_val == 16
// opcode: minu ; op1:x18; op2:x27; dest:x0; op1val:0x10;  op2val:0xffffffffffffefff
TEST_RR_OP(minu, x0, x18, x27, 0x0000000000000000, 0x10, 0xffffffffffffefff, x7, 3*XLEN/8, x9)

inst_19:// rs1==x28, rs2==x23, rd==x21, rs2_val == 18446744073709543423, rs1_val == 268435456
// opcode: minu ; op1:x28; op2:x23; dest:x21; op1val:0x10000000;  op2val:0xffffffffffffdfff
TEST_RR_OP(minu, x21, x28, x23, 0x0000000000000000, 0x10000000, 0xffffffffffffdfff, x7, 4*XLEN/8, x9)

inst_20:// rs1==x13, rs2==x28, rd==x20, rs2_val == 18446744073709535231, rs1_val == 18446744073172680703
// opcode: minu ; op1:x13; op2:x28; dest:x20; op1val:0xffffffffdfffffff;  op2val:0xffffffffffffbfff
TEST_RR_OP(minu, x20, x13, x28, 0x0000000000000000, 0xffffffffdfffffff, 0xffffffffffffbfff, x7, 5*XLEN/8, x9)

inst_21:// rs1==x0, rs2==x19, rd==x6, rs2_val == 18446744073709518847, rs1_val == 281474976710656
// opcode: minu ; op1:x0; op2:x19; dest:x6; op1val:0x0;  op2val:0xffffffffffff7fff
TEST_RR_OP(minu, x6, x0, x19, 0x0000000000000000, 0x0, 0xffffffffffff7fff, x7, 6*XLEN/8, x9)

inst_22:// rs1==x8, rs2==x24, rd==x28, rs2_val == 18446744073709486079, rs1_val == 2
// opcode: minu ; op1:x8; op2:x24; dest:x28; op1val:0x2;  op2val:0xfffffffffffeffff
TEST_RR_OP(minu, x28, x8, x24, 0x0000000000000000, 0x2, 0xfffffffffffeffff, x7, 7*XLEN/8, x9)

inst_23:// rs1==x4, rs2==x8, rd==x25, rs2_val == 18446744073709420543, rs1_val == 8192
// opcode: minu ; op1:x4; op2:x8; dest:x25; op1val:0x2000;  op2val:0xfffffffffffdffff
TEST_RR_OP(minu, x25, x4, x8, 0x0000000000000000, 0x2000, 0xfffffffffffdffff, x7, 8*XLEN/8, x9)

inst_24:// rs1==x31, rs2==x29, rd==x18, rs2_val == 18446744073709289471, rs1_val == 18446744073709543423
// opcode: minu ; op1:x31; op2:x29; dest:x18; op1val:0xffffffffffffdfff;  op2val:0xfffffffffffbffff
TEST_RR_OP(minu, x18, x31, x29, 0x0000000000000000, 0xffffffffffffdfff, 0xfffffffffffbffff, x7, 9*XLEN/8, x9)

inst_25:// rs1==x5, rs2==x4, rd==x26, rs2_val == 18446744073709027327, rs1_val == 18446744073709551103
// opcode: minu ; op1:x5; op2:x4; dest:x26; op1val:0xfffffffffffffdff;  op2val:0xfffffffffff7ffff
TEST_RR_OP(minu, x26, x5, x4, 0x0000000000000000, 0xfffffffffffffdff, 0xfffffffffff7ffff, x7, 10*XLEN/8, x9)

inst_26:// rs1==x22, rs2==x3, rd==x23, rs2_val == 18446744073708503039, rs1_val == 18446744039349813247
// opcode: minu ; op1:x22; op2:x3; dest:x23; op1val:0xfffffff7ffffffff;  op2val:0xffffffffffefffff
TEST_RR_OP(minu, x23, x22, x3, 0x0000000000000000, 0xfffffff7ffffffff, 0xffffffffffefffff, x7, 11*XLEN/8, x9)

inst_27:// rs1==x20, rs2==x1, rd==x4, rs2_val == 18446744073707454463, 
// opcode: minu ; op1:x20; op2:x1; dest:x4; op1val:0x200000000000;  op2val:0xffffffffffdfffff
TEST_RR_OP(minu, x4, x20, x1, 0x0000000000000000, 0x200000000000, 0xffffffffffdfffff, x7, 12*XLEN/8, x9)

inst_28:// rs1==x26, rs2==x0, rd==x16, rs2_val == 18446744073705357311, rs1_val == 2097152
// opcode: minu ; op1:x26; op2:x0; dest:x16; op1val:0x200000;  op2val:0x0
TEST_RR_OP(minu, x16, x26, x0, 0x0000000000000000, 0x200000, 0x0, x7, 13*XLEN/8, x9)

inst_29:// rs1==x23, rs2==x2, rd==x22, rs2_val == 18446744073701163007, rs1_val == 18442240474082181119
// opcode: minu ; op1:x23; op2:x2; dest:x22; op1val:0xffefffffffffffff;  op2val:0xffffffffff7fffff
TEST_RR_OP(minu, x22, x23, x2, 0x0000000000000000, 0xffefffffffffffff, 0xffffffffff7fffff, x7, 14*XLEN/8, x1)

inst_30:// rs1==x3, rs2==x25, rd==x5, rs2_val == 18446744073692774399, 
// opcode: minu ; op1:x3; op2:x25; dest:x5; op1val:0x5;  op2val:0xfffffffffeffffff
TEST_RR_OP(minu, x5, x3, x25, 0x0000000000000000, 0x5, 0xfffffffffeffffff, x7, 15*XLEN/8, x1)

inst_31:// rs1==x9, rs2==x13, rd==x3, rs2_val == 18446744073642442751, rs1_val == 18446744073709551614
// opcode: minu ; op1:x9; op2:x13; dest:x3; op1val:0xfffffffffffffffe;  op2val:0xfffffffffbffffff
TEST_RR_OP(minu, x3, x9, x13, 0x0000000000000000, 0xfffffffffffffffe, 0xfffffffffbffffff, x7, 16*XLEN/8, x1)

inst_32:// rs2_val == 18446744073575333887, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xfffffffff7ffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6, 0xfffffffff7ffffff, x7, 17*XLEN/8, x1)

inst_33:// rs2_val == 18446744073441116159, rs1_val == 549755813888
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000;  op2val:0xffffffffefffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x8000000000, 0xffffffffefffffff, x7, 18*XLEN/8, x1)

inst_34:// rs2_val == 18446744073172680703, rs1_val == 18374686479671623679
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffff;  op2val:0xffffffffdfffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffff, 0xffffffffdfffffff, x7, 19*XLEN/8, x1)

inst_35:// rs2_val == 18446744072635809791, rs1_val == 18446744073709551599
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffef;  op2val:0xffffffffbfffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffef, 0xffffffffbfffffff, x7, 20*XLEN/8, x1)

inst_36:// rs2_val == 18446744071562067967, rs1_val == 18437736874454810623
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffff;  op2val:0xffffffff7fffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffff, 0xffffffff7fffffff, x7, 21*XLEN/8, x1)

inst_37:// rs2_val == 18446744069414584319, rs1_val == 8589934592
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x200000000;  op2val:0xfffffffeffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x200000000, 0xfffffffeffffffff, x7, 22*XLEN/8, x1)

inst_38:// rs2_val == 18446744065119617023, rs1_val == 18446744073709518847
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff7fff;  op2val:0xfffffffdffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffff7fff, 0xfffffffdffffffff, x7, 23*XLEN/8, x1)

inst_39:// rs2_val == 18446744056529682431, rs1_val == 18446744073709551583
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffdf;  op2val:0xfffffffbffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffdf, 0xfffffffbffffffff, x7, 24*XLEN/8, x1)

inst_40:// rs2_val == 18446744039349813247, rs1_val == 6148914691236517205
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xfffffff7ffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xfffffff7ffffffff, x7, 25*XLEN/8, x1)

inst_41:// rs2_val == 18446744004990074879, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xffffffefffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xffffffefffffffff, x7, 26*XLEN/8, x1)

inst_42:// rs2_val == 18446743936270598143, rs1_val == 576460752303423488
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0xffffffdfffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0xffffffdfffffffff, x7, 27*XLEN/8, x1)

inst_43:// rs2_val == 18446743798831644671, rs1_val == 17592186044416
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000;  op2val:0xffffffbfffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x100000000000, 0xffffffbfffffffff, x7, 28*XLEN/8, x1)

inst_44:// rs2_val == 18446743523953737727, rs1_val == 32
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0xffffff7fffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x20, 0xffffff7fffffffff, x7, 29*XLEN/8, x1)

inst_45:// rs2_val == 18446742974197923839, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xfffffeffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xfffffeffffffffff, x7, 30*XLEN/8, x1)

inst_46:// rs2_val == 18446741874686296063, rs1_val == 18446741874686296063
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0xfffffdffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffff, 0xfffffdffffffffff, x7, 31*XLEN/8, x1)

inst_47:// rs2_val == 18446739675663040511, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffdff;  op2val:0xfffffbffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffdff, 0xfffffbffffffffff, x7, 32*XLEN/8, x1)

inst_48:// rs2_val == 18446735277616529407, rs1_val == 18446744073709551551
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf;  op2val:0xfffff7ffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffbf, 0xfffff7ffffffffff, x7, 33*XLEN/8, x1)

inst_49:// rs2_val == 18446726481523507199, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xffffefffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xffffefffffffffff, x7, 34*XLEN/8, x1)

inst_50:// rs2_val == 18446708889337462783, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffdfffffff;  op2val:0xffffdfffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffdfffffff, 0xffffdfffffffffff, x7, 35*XLEN/8, x1)

inst_51:// rs2_val == 18446673704965373951, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xa;  op2val:0xffffbfffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xa, 0xffffbfffffffffff, x7, 36*XLEN/8, x1)

inst_52:// rs2_val == 18446603336221196287, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0xffff7fffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffff, 0xffff7fffffffffff, x7, 37*XLEN/8, x1)

inst_53:// rs2_val == 18446462598732840959, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000;  op2val:0xfffeffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1000000000000, 0xfffeffffffffffff, x7, 38*XLEN/8, x1)

inst_54:// rs2_val == 18446181123756130303, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x200000000;  op2val:0xfffdffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x200000000, 0xfffdffffffffffff, x7, 39*XLEN/8, x1)

inst_55:// rs2_val == 18445618173802708991, rs1_val == 18446743523953737727
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffff;  op2val:0xfffbffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffff, 0xfffbffffffffffff, x7, 40*XLEN/8, x1)

inst_56:// rs2_val == 18444492273895866367, rs1_val == 18446744073709420543
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffdffff;  op2val:0xfff7ffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffdffff, 0xfff7ffffffffffff, x7, 41*XLEN/8, x1)

inst_57:// rs2_val == 18442240474082181119, rs1_val == 4194304
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xffefffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x400000, 0xffefffffffffffff, x7, 42*XLEN/8, x1)

inst_58:// rs2_val == 18437736874454810623, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xe;  op2val:0xffdfffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xe, 0xffdfffffffffffff, x7, 43*XLEN/8, x1)

inst_59:// rs2_val == 18428729675200069631, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0xffbfffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x10, 0xffbfffffffffffff, x7, 44*XLEN/8, x1)

inst_60:// rs2_val == 18410715276690587647, rs1_val == 140737488355328
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000;  op2val:0xff7fffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x800000000000, 0xff7fffffffffffff, x7, 45*XLEN/8, x1)

inst_61:// rs2_val == 18374686479671623679, rs1_val == 18446603336221196287
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffff;  op2val:0xfeffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffff, 0xfeffffffffffffff, x7, 46*XLEN/8, x1)

inst_62:// rs2_val == 18302628885633695743, rs1_val == 1048576
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xfdffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x100000, 0xfdffffffffffffff, x7, 47*XLEN/8, x1)

inst_63:// rs2_val == 18158513697557839871, rs1_val == 1024
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0xfbffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x400, 0xfbffffffffffffff, x7, 48*XLEN/8, x1)

inst_64:// rs2_val == 17870283321406128127, rs1_val == 9007199254740992
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000;  op2val:0xf7ffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x20000000000000, 0xf7ffffffffffffff, x7, 49*XLEN/8, x1)

inst_65:// rs2_val == 17293822569102704639, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000;  op2val:0xefffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x8000000000, 0xefffffffffffffff, x7, 50*XLEN/8, x1)

inst_66:// rs2_val == 16140901064495857663, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000;  op2val:0xdfffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x20000000000000, 0xdfffffffffffffff, x7, 51*XLEN/8, x1)

inst_67:// rs2_val == 13835058055282163711, rs1_val == 18446744073709289471
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffbffff;  op2val:0xbfffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffbffff, 0xbfffffffffffffff, x7, 52*XLEN/8, x1)

inst_68:// rs2_val == 9223372036854775807, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffef;  op2val:0x7fffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffef, 0x7fffffffffffffff, x7, 53*XLEN/8, x1)

inst_69:// rs1_val == 18446744073709551613, rs2_val == 2147483648
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffd;  op2val:0x80000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffd, 0x80000000, x7, 54*XLEN/8, x1)

inst_70:// rs1_val == 18446744073709551487, rs2_val == 1024
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0x400
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff7f, 0x400, x7, 55*XLEN/8, x1)

inst_71:// rs1_val == 18446744073709551359, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffeff;  op2val:0xfffffffffeffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffeff, 0xfffffffffeffffff, x7, 56*XLEN/8, x1)

inst_72:// rs1_val == 18446744073709550591, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xaaaaaaaaaaaaaaab, x7, 57*XLEN/8, x1)

inst_73:// rs1_val == 18446744073709549567, rs2_val == 6148914691236517205
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffff7ff;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffff7ff, 0x5555555555555555, x7, 58*XLEN/8, x1)

inst_74:// rs1_val == 18446744073709535231, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffbfff;  op2val:0xfffffffffffffbff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffbfff, 0xfffffffffffffbff, x7, 59*XLEN/8, x1)

inst_75:// rs1_val == 18446744073709486079, rs2_val == 549755813888
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0x8000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0x8000000000, x7, 60*XLEN/8, x1)

inst_76:// rs1_val == 18446744073709027327, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff7ffff;  op2val:0xfffffffffffeffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffff7ffff, 0xfffffffffffeffff, x7, 61*XLEN/8, x1)

inst_77:// rs1_val == 18446744073708503039, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffefffff;  op2val:0xffffffffff7fffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffefffff, 0xffffffffff7fffff, x7, 62*XLEN/8, x1)

inst_78:// rs1_val == 18446744073707454463, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffdfffff;  op2val:0xb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffdfffff, 0xb, x7, 63*XLEN/8, x1)

inst_79:// rs1_val == 18446744073705357311, rs2_val == 131072
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff;  op2val:0x20000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffbfffff, 0x20000, x7, 64*XLEN/8, x1)

inst_80:// rs1_val == 18446744073701163007, rs2_val == 4194304
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7fffff;  op2val:0x400000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffff7fffff, 0x400000, x7, 65*XLEN/8, x1)

inst_81:// rs1_val == 18446744073692774399, rs2_val == 536870912
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffeffffff;  op2val:0x20000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffeffffff, 0x20000000, x7, 66*XLEN/8, x1)

inst_82:// rs1_val == 18446744073675997183, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffdffffff;  op2val:0xffffffffff7fffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffdffffff, 0xffffffffff7fffff, x7, 67*XLEN/8, x1)

inst_83:// rs1_val == 18446744073642442751, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffbffffff;  op2val:0xffffffefffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffbffffff, 0xffffffefffffffff, x7, 68*XLEN/8, x1)

inst_84:// rs1_val == 18446744073575333887, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:0xfffffffffffdffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffff7ffffff, 0xfffffffffffdffff, x7, 69*XLEN/8, x1)

inst_85:// rs1_val == 18446744073441116159, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffefffffff;  op2val:0xf
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffefffffff, 0xf, x7, 70*XLEN/8, x1)

inst_86:// rs1_val == 18446744072635809791, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffbfffffff;  op2val:0xffff7fffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffbfffffff, 0xffff7fffffffffff, x7, 71*XLEN/8, x1)

inst_87:// rs1_val == 18446744071562067967, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0xfffdffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, 0xfffdffffffffffff, x7, 72*XLEN/8, x1)

inst_88:// rs1_val == 18446744069414584319, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0xfffffffffeffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, 0xfffffffffeffffff, x7, 73*XLEN/8, x1)

inst_89:// rs1_val == 18446744065119617023, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffff;  op2val:0xfffffffdffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffffff, 0xfffffffdffffffff, x7, 74*XLEN/8, x1)

inst_90:// rs1_val == 18446744056529682431, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0xfdffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffff, 0xfdffffffffffffff, x7, 75*XLEN/8, x1)

inst_91:// rs1_val == 18446744004990074879, rs2_val == 68719476736
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffff;  op2val:0x1000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffff, 0x1000000000, x7, 76*XLEN/8, x1)

inst_92:// rs1_val == 18446743936270598143, rs2_val == 0
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffff;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffff, 0x0, x7, 77*XLEN/8, x1)

inst_93:// rs1_val == 18446743798831644671, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffffff;  op2val:0x5
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffff, 0x5, x7, 78*XLEN/8, x1)

inst_94:// rs1_val == 18446742974197923839, rs2_val == 2305843009213693952
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffff;  op2val:0x2000000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffff, 0x2000000000000000, x7, 79*XLEN/8, x1)

inst_95:// rs1_val == 18446739675663040511, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffff;  op2val:0xfffffffdffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffff, 0xfffffffdffffffff, x7, 80*XLEN/8, x1)

inst_96:// rs1_val == 18446735277616529407, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffff;  op2val:0xfffffffbffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffff, 0xfffffffbffffffff, x7, 81*XLEN/8, x1)

inst_97:// rs1_val == 18446726481523507199, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0xfff7ffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, 0xfff7ffffffffffff, x7, 82*XLEN/8, x1)

inst_98:// rs1_val == 18446708889337462783, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0xfff7ffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffff, 0xfff7ffffffffffff, x7, 83*XLEN/8, x1)

inst_99:// rs1_val == 18446673704965373951, rs2_val == 33554432
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0x2000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffff, 0x2000000, x7, 84*XLEN/8, x1)

inst_100:// rs1_val == 18446462598732840959, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffff;  op2val:0x20000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffff, 0x20000, x7, 85*XLEN/8, x1)

inst_101:// rs1_val == 18446181123756130303, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffff;  op2val:0xfffffffeffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffff, 0xfffffffeffffffff, x7, 86*XLEN/8, x1)

inst_102:// rs1_val == 18445618173802708991, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff;  op2val:0x8000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffff, 0x8000000000, x7, 87*XLEN/8, x1)

inst_103:// rs1_val == 18444492273895866367, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff;  op2val:0xfbffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffff, 0xfbffffffffffffff, x7, 88*XLEN/8, x1)

inst_104:// rs1_val == 18428729675200069631, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffff;  op2val:0xffffffffefffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffff, 0xffffffffefffffff, x7, 89*XLEN/8, x1)

inst_105:// rs1_val == 18302628885633695743, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffff;  op2val:0xffffffffffbfffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffff, 0xffffffffffbfffff, x7, 90*XLEN/8, x1)

inst_106:// rs1_val == 18158513697557839871, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffff;  op2val:0x11
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffff, 0x11, x7, 91*XLEN/8, x1)

inst_107:// rs1_val == 17870283321406128127, rs2_val == 32768
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0x8000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffff, 0x8000, x7, 92*XLEN/8, x1)

inst_108:// rs1_val == 17293822569102704639, rs2_val == 17179869184
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffff;  op2val:0x400000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffff, 0x400000000, x7, 93*XLEN/8, x1)

inst_109:// rs1_val == 16140901064495857663, rs2_val == 144115188075855872
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0x200000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0x200000000000000, x7, 94*XLEN/8, x1)

inst_110:// rs1_val == 13835058055282163711, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0x3333333333333332, x7, 95*XLEN/8, x1)

inst_111:// rs2_val == 1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffff, 0x1, x7, 96*XLEN/8, x1)

inst_112:// rs2_val == 2, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffe;  op2val:0x2
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffe, 0x2, x7, 97*XLEN/8, x1)

inst_113:// rs2_val == 4, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0x4
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x40, 0x4, x7, 98*XLEN/8, x1)

inst_114:// rs2_val == 8, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffff7ff;  op2val:0x8
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffffffff7ff, 0x8, x7, 99*XLEN/8, x1)

inst_115:// rs2_val == 16, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0x10
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x200000, 0x10, x7, 100*XLEN/8, x1)

inst_116:// rs2_val == 32, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x20
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x20, x7, 101*XLEN/8, x1)

inst_117:// rs2_val == 64, rs1_val == 512
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0x40
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x200, 0x40, x7, 102*XLEN/8, x1)

inst_118:// rs2_val == 128, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0x80
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, 0x80, x7, 103*XLEN/8, x1)

inst_119:// rs2_val == 256, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0x100
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x40, 0x100, x7, 104*XLEN/8, x1)

inst_120:// rs2_val == 512, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0x200
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffff, 0x200, x7, 105*XLEN/8, x1)

inst_121:// rs2_val == 2048, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0x800
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x40, 0x800, x7, 106*XLEN/8, x1)

inst_122:// rs2_val == 4096, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffff;  op2val:0x1000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffff, 0x1000, x7, 107*XLEN/8, x1)

inst_123:// rs2_val == 8192, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x12;  op2val:0x2000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x12, 0x2000, x7, 108*XLEN/8, x1)

inst_124:// rs2_val == 16384, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0x4000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, 0x4000, x7, 109*XLEN/8, x1)

inst_125:// rs2_val == 65536, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x10000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x10000, x7, 110*XLEN/8, x1)

inst_126:// rs2_val == 262144, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffefff;  op2val:0x40000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffefff, 0x40000, x7, 111*XLEN/8, x1)

inst_127:// rs2_val == 524288, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0x80000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x2000, 0x80000, x7, 112*XLEN/8, x1)

inst_128:// rs2_val == 1048576, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x100000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x100000, x7, 113*XLEN/8, x1)

inst_129:// rs2_val == 2097152, rs1_val == 65536
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:0x200000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x10000, 0x200000, x7, 114*XLEN/8, x1)

inst_130:// rs2_val == 8388608, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffbfff;  op2val:0x800000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffbfff, 0x800000, x7, 115*XLEN/8, x1)

inst_131:// rs2_val == 16777216, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0x1000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x10, 0x1000000, x7, 116*XLEN/8, x1)

inst_132:// rs2_val == 67108864, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x4000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x4000000, x7, 117*XLEN/8, x1)

inst_133:// rs2_val == 134217728, rs1_val == 4398046511104
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000;  op2val:0x8000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x40000000000, 0x8000000, x7, 118*XLEN/8, x1)

inst_134:// rs2_val == 268435456, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000;  op2val:0x10000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x100000000000, 0x10000000, x7, 119*XLEN/8, x1)

inst_135:// rs2_val == 1073741824, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x40000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x40000000, x7, 120*XLEN/8, x1)

inst_136:// rs2_val == 4294967296, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0x100000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, 0x100000000, x7, 121*XLEN/8, x1)

inst_137:// rs2_val == 8589934592, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0x200000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffff, 0x200000000, x7, 122*XLEN/8, x1)

inst_138:// rs2_val == 34359738368, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xe;  op2val:0x800000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xe, 0x800000000, x7, 123*XLEN/8, x1)

inst_139:// rs2_val == 137438953472, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000;  op2val:0x2000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x20000000000000, 0x2000000000, x7, 124*XLEN/8, x1)

inst_140:// rs2_val == 274877906944, rs1_val == 2147483648
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0x4000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x80000000, 0x4000000000, x7, 125*XLEN/8, x1)

inst_141:// rs2_val == 1099511627776, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x13;  op2val:0x10000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x13, 0x10000000000, x7, 126*XLEN/8, x1)

inst_142:// rs2_val == 2199023255552, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffff;  op2val:0x20000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffff, 0x20000000000, x7, 127*XLEN/8, x1)

inst_143:// rs2_val == 4398046511104, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0x40000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, 0x40000000000, x7, 128*XLEN/8, x1)

inst_144:// rs2_val == 17592186044416, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x100000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3, 0x100000000000, x7, 129*XLEN/8, x1)

inst_145:// rs2_val == 35184372088832, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x200000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x200000000000, x7, 130*XLEN/8, x1)

inst_146:// rs2_val == 70368744177664, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0x400000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffff, 0x400000000000, x7, 131*XLEN/8, x1)

inst_147:// rs2_val == 140737488355328, rs1_val == 128
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0x800000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x80, 0x800000000000, x7, 132*XLEN/8, x1)

inst_148:// rs2_val == 562949953421312, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x2000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3, 0x2000000000000, x7, 133*XLEN/8, x1)

inst_149:// rs2_val == 1125899906842624, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffff;  op2val:0x4000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffff, 0x4000000000000, x7, 134*XLEN/8, x1)

inst_150:// rs2_val == 2251799813685248, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffbfffffff;  op2val:0x8000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffbfffffff, 0x8000000000000, x7, 135*XLEN/8, x1)

inst_151:// rs2_val == 4503599627370496, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x10000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x10000000000000, x7, 136*XLEN/8, x1)

inst_152:// rs2_val == 9007199254740992, rs1_val == 16384
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x20000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x4000, 0x20000000000000, x7, 137*XLEN/8, x1)

inst_153:// rs2_val == 18014398509481984, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0x40000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0x40000000000000, x7, 138*XLEN/8, x1)

inst_154:// rs2_val == 36028797018963968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xe;  op2val:0x80000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xe, 0x80000000000000, x7, 139*XLEN/8, x1)

inst_155:// rs2_val == 72057594037927936, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff;  op2val:0x100000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffff, 0x100000000000000, x7, 140*XLEN/8, x1)

inst_156:// rs2_val == 576460752303423488, rs1_val == 2199023255552
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000;  op2val:0x800000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x20000000000, 0x800000000000000, x7, 141*XLEN/8, x1)

inst_157:// rs2_val == 1152921504606846976, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x13;  op2val:0x1000000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x13, 0x1000000000000000, x7, 142*XLEN/8, x1)

inst_158:// rs2_val == 4611686018427387904, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0x4000000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0x4000000000000000, x7, 143*XLEN/8, x1)

inst_159:// rs2_val == 9223372036854775808, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffff;  op2val:0x8000000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffff, 0x8000000000000000, x7, 144*XLEN/8, x1)

inst_160:// rs1_val==6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x5555555555555555, x7, 145*XLEN/8, x1)

inst_161:// rs1_val == 4, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x13
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x4, 0x13, x7, 146*XLEN/8, x1)

inst_162:// rs1_val == 256, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0xfffffffff7ffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x100, 0xfffffffff7ffffff, x7, 147*XLEN/8, x1)

inst_163:// rs1_val == 2048, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x800, 0x5555555555555555, x7, 148*XLEN/8, x1)

inst_164:// rs1_val == 4096, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0x2000000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1000, 0x2000000000000000, x7, 149*XLEN/8, x1)

inst_165:// rs1_val == 32768, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0xfffffffffffbffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x8000, 0xfffffffffffbffff, x7, 150*XLEN/8, x1)

inst_166:// rs1_val == 131072, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0xfffffffffffffffb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x20000, 0xfffffffffffffffb, x7, 151*XLEN/8, x1)

inst_167:// rs1_val == 262144, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x40000, 0x5555555555555555, x7, 152*XLEN/8, x1)

inst_168:// rs1_val == 524288, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0xfffffffffffdffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x80000, 0xfffffffffffdffff, x7, 153*XLEN/8, x1)

inst_169:// rs1_val == 8388608, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xffbfffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x800000, 0xffbfffffffffffff, x7, 154*XLEN/8, x1)

inst_170:// rs1_val == 16777216, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xfffffffffffffffe
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1000000, 0xfffffffffffffffe, x7, 155*XLEN/8, x1)

inst_171:// rs1_val == 33554432, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x6
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x2000000, 0x6, x7, 156*XLEN/8, x1)

inst_172:// rs1_val == 67108864, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xffffffefffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x4000000, 0xffffffefffffffff, x7, 157*XLEN/8, x1)

inst_173:// rs1_val == 134217728, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xffffffffffffefff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x8000000, 0xffffffffffffefff, x7, 158*XLEN/8, x1)

inst_174:// rs1_val == 536870912, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0x6
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x20000000, 0x6, x7, 159*XLEN/8, x1)

inst_175:// rs1_val == 1073741824, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x100000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x40000000, 0x100000, x7, 160*XLEN/8, x1)

inst_176:// rs1_val == 4294967296, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x100000000, 0xcccccccccccccccb, x7, 161*XLEN/8, x1)

inst_177:// rs1_val == 17179869184, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x400000000;  op2val:0xfffffffffdffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x400000000, 0xfffffffffdffffff, x7, 162*XLEN/8, x1)

inst_178:// rs1_val == 34359738368, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x800000000;  op2val:0x400000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x800000000, 0x400000000, x7, 163*XLEN/8, x1)

inst_179:// rs1_val == 68719476736, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000;  op2val:0x7fffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1000000000, 0x7fffffffffffffff, x7, 164*XLEN/8, x1)

inst_180:// rs1_val == 137438953472, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000;  op2val:0x800
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x2000000000, 0x800, x7, 165*XLEN/8, x1)

inst_181:// rs1_val == 274877906944, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000;  op2val:0xffffffffff7fffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x4000000000, 0xffffffffff7fffff, x7, 166*XLEN/8, x1)

inst_182:// rs1_val == 1099511627776, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000;  op2val:0x10000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x10000000000, 0x10000000000, x7, 167*XLEN/8, x1)

inst_183:// rs1_val == 8796093022208, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000;  op2val:0xfeffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x80000000000, 0xfeffffffffffffff, x7, 168*XLEN/8, x1)

inst_184:// rs1_val == 70368744177664, rs2_val == 12297829382473034410
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x400000000000, 0xaaaaaaaaaaaaaaaa, x7, 169*XLEN/8, x1)

inst_185:// rs1_val == 562949953421312, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000;  op2val:0xfeffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x2000000000000, 0xfeffffffffffffff, x7, 170*XLEN/8, x1)

inst_186:// rs1_val == 1125899906842624, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000;  op2val:0xfffffff7ffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x4000000000000, 0xfffffff7ffffffff, x7, 171*XLEN/8, x1)

inst_187:// rs1_val == 2251799813685248, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000;  op2val:0xffffffffffffffef
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x8000000000000, 0xffffffffffffffef, x7, 172*XLEN/8, x1)

inst_188:// rs1_val == 4503599627370496, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000000;  op2val:0xe
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x10000000000000, 0xe, x7, 173*XLEN/8, x1)

inst_189:// rs1_val == 18014398509481984, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000;  op2val:0x8000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x40000000000000, 0x8000000, x7, 174*XLEN/8, x1)

inst_190:// rs1_val == 36028797018963968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000;  op2val:0x20000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x80000000000000, 0x20000, x7, 175*XLEN/8, x1)

inst_191:// rs1_val == 72057594037927936, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000;  op2val:0x100000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x100000000000000, 0x100000000000000, x7, 176*XLEN/8, x1)

inst_192:// rs1_val == 144115188075855872, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000;  op2val:0xfffffffffffffff7
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x200000000000000, 0xfffffffffffffff7, x7, 177*XLEN/8, x1)

inst_193:// rs1_val == 288230376151711744, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000000;  op2val:0x8000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x400000000000000, 0x8000000, x7, 178*XLEN/8, x1)

inst_194:// rs1_val == 1152921504606846976, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:0xffff7fffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, 0xffff7fffffffffff, x7, 179*XLEN/8, x1)

inst_195:// rs1_val == 2305843009213693952, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:0x1000000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0x1000000000000000, x7, 180*XLEN/8, x1)

inst_196:// rs1_val == 4611686018427387904, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x20000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x20000000000, x7, 181*XLEN/8, x1)

inst_197:// rs1_val==6148914691236517205 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa, x7, 182*XLEN/8, x1)

inst_198:// rs1_val==6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x3333333333333333, x7, 183*XLEN/8, x1)

inst_199:// rs1_val==6148914691236517205 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xcccccccccccccccc, x7, 184*XLEN/8, x1)

inst_200:// rs1_val==6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x6666666666666666, x7, 185*XLEN/8, x1)

inst_201:// rs1_val==6148914691236517205 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x9999999999999999, x7, 186*XLEN/8, x1)

inst_202:// rs1_val==6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x5555555555555554, x7, 187*XLEN/8, x1)

inst_203:// rs1_val==6148914691236517205 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xaaaaaaaaaaaaaaa9, x7, 188*XLEN/8, x1)

inst_204:// rs1_val==6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x3333333333333332, x7, 189*XLEN/8, x1)

inst_205:// rs1_val==6148914691236517205 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xcccccccccccccccb, x7, 190*XLEN/8, x1)

inst_206:// rs1_val==6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x6666666666666665, x7, 191*XLEN/8, x1)

inst_207:// rs1_val==6148914691236517205 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x9999999999999998, x7, 192*XLEN/8, x1)

inst_208:// rs1_val==6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x5555555555555556, x7, 193*XLEN/8, x1)

inst_209:// rs1_val==6148914691236517205 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xaaaaaaaaaaaaaaab, x7, 194*XLEN/8, x1)

inst_210:// rs1_val==6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x3333333333333334, x7, 195*XLEN/8, x1)

inst_211:// rs1_val==6148914691236517205 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xcccccccccccccccd, x7, 196*XLEN/8, x1)

inst_212:// rs1_val==6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x6666666666666667, x7, 197*XLEN/8, x1)

inst_213:// rs1_val==6148914691236517205 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x999999999999999a, x7, 198*XLEN/8, x1)

inst_214:// rs1_val==6148914691236517205 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x0, x7, 199*XLEN/8, x1)

inst_215:// rs1_val==6148914691236517205 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x1, x7, 200*XLEN/8, x1)

inst_216:// rs1_val==6148914691236517205 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xffffffffffffffff, x7, 201*XLEN/8, x1)

inst_217:// rs1_val==12297829382473034410 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x5555555555555555, x7, 202*XLEN/8, x1)

inst_218:// rs1_val==12297829382473034410 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaaa, x7, 203*XLEN/8, x1)

inst_219:// rs1_val==12297829382473034410 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x3333333333333333, x7, 204*XLEN/8, x1)

inst_220:// rs1_val==12297829382473034410 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xcccccccccccccccc, x7, 205*XLEN/8, x1)

inst_221:// rs1_val==12297829382473034410 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x6666666666666666, x7, 206*XLEN/8, x1)

inst_222:// rs1_val==12297829382473034410 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x9999999999999999, x7, 207*XLEN/8, x1)

inst_223:// rs1_val==12297829382473034410 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x5555555555555554, x7, 208*XLEN/8, x1)

inst_224:// rs1_val==12297829382473034410 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaa9, x7, 209*XLEN/8, x1)

inst_225:// rs1_val==12297829382473034410 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x3333333333333332, x7, 210*XLEN/8, x1)

inst_226:// rs1_val==12297829382473034410 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xcccccccccccccccb, x7, 211*XLEN/8, x1)

inst_227:// rs1_val==12297829382473034410 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x6666666666666665, x7, 212*XLEN/8, x1)

inst_228:// rs1_val==12297829382473034410 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x9999999999999998, x7, 213*XLEN/8, x1)

inst_229:// rs1_val==12297829382473034410 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x5555555555555556, x7, 214*XLEN/8, x1)

inst_230:// rs1_val==12297829382473034410 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaab, x7, 215*XLEN/8, x1)

inst_231:// rs1_val==12297829382473034410 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x3333333333333334, x7, 216*XLEN/8, x1)

inst_232:// rs1_val==12297829382473034410 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xcccccccccccccccd, x7, 217*XLEN/8, x1)

inst_233:// rs1_val==12297829382473034410 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x6666666666666667, x7, 218*XLEN/8, x1)

inst_234:// rs1_val==12297829382473034410 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x999999999999999a, x7, 219*XLEN/8, x1)

inst_235:// rs1_val==12297829382473034410 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x0, x7, 220*XLEN/8, x1)

inst_236:// rs1_val==12297829382473034410 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x1, x7, 221*XLEN/8, x1)

inst_237:// rs1_val==12297829382473034410 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xffffffffffffffff, x7, 222*XLEN/8, x1)

inst_238:// rs1_val==3689348814741910323 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x5555555555555555, x7, 223*XLEN/8, x1)

inst_239:// rs1_val==3689348814741910323 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0xaaaaaaaaaaaaaaaa, x7, 224*XLEN/8, x1)

inst_240:// rs1_val==3689348814741910323 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x3333333333333333, x7, 225*XLEN/8, x1)

inst_241:// rs1_val==3689348814741910323 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0xcccccccccccccccc, x7, 226*XLEN/8, x1)

inst_242:// rs1_val==3689348814741910323 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x6666666666666666, x7, 227*XLEN/8, x1)

inst_243:// rs1_val==3689348814741910323 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x9999999999999999, x7, 228*XLEN/8, x1)

inst_244:// rs1_val==3689348814741910323 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x5555555555555554, x7, 229*XLEN/8, x1)

inst_245:// rs1_val==3689348814741910323 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0xaaaaaaaaaaaaaaa9, x7, 230*XLEN/8, x1)

inst_246:// rs1_val==3689348814741910323 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x3333333333333332, x7, 231*XLEN/8, x1)

inst_247:// rs1_val==3689348814741910323 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0xcccccccccccccccb, x7, 232*XLEN/8, x1)

inst_248:// rs1_val==3689348814741910323 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x6666666666666665, x7, 233*XLEN/8, x1)

inst_249:// rs1_val==3689348814741910323 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x9999999999999998, x7, 234*XLEN/8, x1)

inst_250:// rs1_val==3689348814741910323 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x5555555555555556, x7, 235*XLEN/8, x1)

inst_251:// rs1_val==3689348814741910323 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0xaaaaaaaaaaaaaaab, x7, 236*XLEN/8, x1)

inst_252:// rs1_val==3689348814741910323 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x3333333333333334, x7, 237*XLEN/8, x1)

inst_253:// rs1_val==3689348814741910323 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0xcccccccccccccccd, x7, 238*XLEN/8, x1)

inst_254:// rs1_val==3689348814741910323 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x6666666666666667, x7, 239*XLEN/8, x1)

inst_255:// rs1_val==3689348814741910323 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x999999999999999a, x7, 240*XLEN/8, x1)

inst_256:// rs1_val==3689348814741910323 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x0, x7, 241*XLEN/8, x1)

inst_257:// rs1_val==3689348814741910323 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x1, x7, 242*XLEN/8, x1)

inst_258:// rs1_val==3689348814741910323 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0xffffffffffffffff, x7, 243*XLEN/8, x1)

inst_259:// rs1_val==14757395258967641292 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x5555555555555555, x7, 244*XLEN/8, x1)

inst_260:// rs1_val==14757395258967641292 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0xaaaaaaaaaaaaaaaa, x7, 245*XLEN/8, x1)

inst_261:// rs1_val==14757395258967641292 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x3333333333333333, x7, 246*XLEN/8, x1)

inst_262:// rs1_val==14757395258967641292 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0xcccccccccccccccc, x7, 247*XLEN/8, x1)

inst_263:// rs1_val==14757395258967641292 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x6666666666666666, x7, 248*XLEN/8, x1)

inst_264:// rs1_val==14757395258967641292 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x9999999999999999, x7, 249*XLEN/8, x1)

inst_265:// rs1_val==14757395258967641292 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x5555555555555554, x7, 250*XLEN/8, x1)

inst_266:// rs1_val==14757395258967641292 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0xaaaaaaaaaaaaaaa9, x7, 251*XLEN/8, x1)

inst_267:// rs1_val==14757395258967641292 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x3333333333333332, x7, 252*XLEN/8, x1)

inst_268:// rs1_val==14757395258967641292 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0xcccccccccccccccb, x7, 253*XLEN/8, x1)

inst_269:// rs1_val==14757395258967641292 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x6666666666666665, x7, 254*XLEN/8, x1)

inst_270:// rs1_val==14757395258967641292 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x9999999999999998, x7, 255*XLEN/8, x1)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_271:// rs1_val==14757395258967641292 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x5555555555555556, x7, 0*XLEN/8, x1)

inst_272:// rs1_val==14757395258967641292 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0xaaaaaaaaaaaaaaab, x7, 1*XLEN/8, x1)

inst_273:// rs1_val==14757395258967641292 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x3333333333333334, x7, 2*XLEN/8, x1)

inst_274:// rs1_val==14757395258967641292 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0xcccccccccccccccd, x7, 3*XLEN/8, x1)

inst_275:// rs1_val==14757395258967641292 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x6666666666666667, x7, 4*XLEN/8, x1)

inst_276:// rs1_val==14757395258967641292 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x999999999999999a, x7, 5*XLEN/8, x1)

inst_277:// rs1_val==14757395258967641292 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x0, x7, 6*XLEN/8, x1)

inst_278:// rs1_val==14757395258967641292 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0x1, x7, 7*XLEN/8, x1)

inst_279:// rs1_val==14757395258967641292 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccc;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccc, 0xffffffffffffffff, x7, 8*XLEN/8, x1)

inst_280:// rs1_val==7378697629483820646 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x5555555555555555, x7, 9*XLEN/8, x1)

inst_281:// rs1_val==7378697629483820646 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0xaaaaaaaaaaaaaaaa, x7, 10*XLEN/8, x1)

inst_282:// rs1_val==7378697629483820646 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x3333333333333333, x7, 11*XLEN/8, x1)

inst_283:// rs1_val==7378697629483820646 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0xcccccccccccccccc, x7, 12*XLEN/8, x1)

inst_284:// rs1_val==7378697629483820646 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x6666666666666666, x7, 13*XLEN/8, x1)

inst_285:// rs1_val==7378697629483820646 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x9999999999999999, x7, 14*XLEN/8, x1)

inst_286:// rs1_val==7378697629483820646 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x5555555555555554, x7, 15*XLEN/8, x1)

inst_287:// rs1_val==7378697629483820646 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0xaaaaaaaaaaaaaaa9, x7, 16*XLEN/8, x1)

inst_288:// rs1_val==7378697629483820646 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x3333333333333332, x7, 17*XLEN/8, x1)

inst_289:// rs1_val==7378697629483820646 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0xcccccccccccccccb, x7, 18*XLEN/8, x1)

inst_290:// rs1_val==7378697629483820646 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x6666666666666665, x7, 19*XLEN/8, x1)

inst_291:// rs1_val==7378697629483820646 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x9999999999999998, x7, 20*XLEN/8, x1)

inst_292:// rs1_val==7378697629483820646 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x5555555555555556, x7, 21*XLEN/8, x1)

inst_293:// rs1_val==7378697629483820646 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0xaaaaaaaaaaaaaaab, x7, 22*XLEN/8, x1)

inst_294:// rs1_val==7378697629483820646 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x3333333333333334, x7, 23*XLEN/8, x1)

inst_295:// rs1_val==7378697629483820646 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0xcccccccccccccccd, x7, 24*XLEN/8, x1)

inst_296:// rs1_val==7378697629483820646 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x6666666666666667, x7, 25*XLEN/8, x1)

inst_297:// rs1_val==7378697629483820646 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x999999999999999a, x7, 26*XLEN/8, x1)

inst_298:// rs1_val==7378697629483820646 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x0, x7, 27*XLEN/8, x1)

inst_299:// rs1_val==7378697629483820646 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x1, x7, 28*XLEN/8, x1)

inst_300:// rs1_val==7378697629483820646 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0xffffffffffffffff, x7, 29*XLEN/8, x1)

inst_301:// rs1_val==11068046444225730969 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x5555555555555555, x7, 30*XLEN/8, x1)

inst_302:// rs1_val==11068046444225730969 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0xaaaaaaaaaaaaaaaa, x7, 31*XLEN/8, x1)

inst_303:// rs1_val==11068046444225730969 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x3333333333333333, x7, 32*XLEN/8, x1)

inst_304:// rs1_val==11068046444225730969 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0xcccccccccccccccc, x7, 33*XLEN/8, x1)

inst_305:// rs1_val==11068046444225730969 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x6666666666666666, x7, 34*XLEN/8, x1)

inst_306:// rs1_val==11068046444225730969 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x9999999999999999, x7, 35*XLEN/8, x1)

inst_307:// rs1_val==11068046444225730969 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x5555555555555554, x7, 36*XLEN/8, x1)

inst_308:// rs1_val==11068046444225730969 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0xaaaaaaaaaaaaaaa9, x7, 37*XLEN/8, x1)

inst_309:// rs1_val==11068046444225730969 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x3333333333333332, x7, 38*XLEN/8, x1)

inst_310:// rs1_val==11068046444225730969 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0xcccccccccccccccb, x7, 39*XLEN/8, x1)

inst_311:// rs1_val==11068046444225730969 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x6666666666666665, x7, 40*XLEN/8, x1)

inst_312:// rs1_val==11068046444225730969 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x9999999999999998, x7, 41*XLEN/8, x1)

inst_313:// rs1_val==11068046444225730969 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x5555555555555556, x7, 42*XLEN/8, x1)

inst_314:// rs1_val==11068046444225730969 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0xaaaaaaaaaaaaaaab, x7, 43*XLEN/8, x1)

inst_315:// rs1_val==11068046444225730969 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x3333333333333334, x7, 44*XLEN/8, x1)

inst_316:// rs1_val==11068046444225730969 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0xcccccccccccccccd, x7, 45*XLEN/8, x1)

inst_317:// rs1_val==11068046444225730969 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x6666666666666667, x7, 46*XLEN/8, x1)

inst_318:// rs1_val==11068046444225730969 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x999999999999999a, x7, 47*XLEN/8, x1)

inst_319:// rs1_val==11068046444225730969 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x0, x7, 48*XLEN/8, x1)

inst_320:// rs1_val==11068046444225730969 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0x1, x7, 49*XLEN/8, x1)

inst_321:// rs1_val==11068046444225730969 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999999;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999999, 0xffffffffffffffff, x7, 50*XLEN/8, x1)

inst_322:// rs1_val==6148914691236517204 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x5555555555555555, x7, 51*XLEN/8, x1)

inst_323:// rs1_val==6148914691236517204 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0xaaaaaaaaaaaaaaaa, x7, 52*XLEN/8, x1)

inst_324:// rs1_val==6148914691236517204 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x3333333333333333, x7, 53*XLEN/8, x1)

inst_325:// rs1_val==6148914691236517204 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0xcccccccccccccccc, x7, 54*XLEN/8, x1)

inst_326:// rs1_val==6148914691236517204 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x6666666666666666, x7, 55*XLEN/8, x1)

inst_327:// rs1_val==6148914691236517204 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x9999999999999999, x7, 56*XLEN/8, x1)

inst_328:// rs1_val==6148914691236517204 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x5555555555555554, x7, 57*XLEN/8, x1)

inst_329:// rs1_val==6148914691236517204 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0xaaaaaaaaaaaaaaa9, x7, 58*XLEN/8, x1)

inst_330:// rs1_val==6148914691236517204 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x3333333333333332, x7, 59*XLEN/8, x1)

inst_331:// rs1_val==6148914691236517204 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0xcccccccccccccccb, x7, 60*XLEN/8, x1)

inst_332:// rs1_val==6148914691236517204 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x6666666666666665, x7, 61*XLEN/8, x1)

inst_333:// rs1_val==6148914691236517204 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x9999999999999998, x7, 62*XLEN/8, x1)

inst_334:// rs1_val==6148914691236517204 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x5555555555555556, x7, 63*XLEN/8, x1)

inst_335:// rs1_val==6148914691236517204 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0xaaaaaaaaaaaaaaab, x7, 64*XLEN/8, x1)

inst_336:// rs1_val==6148914691236517204 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x3333333333333334, x7, 65*XLEN/8, x1)

inst_337:// rs1_val==6148914691236517204 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0xcccccccccccccccd, x7, 66*XLEN/8, x1)

inst_338:// rs1_val==6148914691236517204 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x6666666666666667, x7, 67*XLEN/8, x1)

inst_339:// rs1_val==6148914691236517204 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x999999999999999a, x7, 68*XLEN/8, x1)

inst_340:// rs1_val==6148914691236517204 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x0, x7, 69*XLEN/8, x1)

inst_341:// rs1_val==6148914691236517204 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x1, x7, 70*XLEN/8, x1)

inst_342:// rs1_val==6148914691236517204 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0xffffffffffffffff, x7, 71*XLEN/8, x1)

inst_343:// rs1_val==12297829382473034409 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x5555555555555555, x7, 72*XLEN/8, x1)

inst_344:// rs1_val==12297829382473034409 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaaa, x7, 73*XLEN/8, x1)

inst_345:// rs1_val==12297829382473034409 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x3333333333333333, x7, 74*XLEN/8, x1)

inst_346:// rs1_val==12297829382473034409 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0xcccccccccccccccc, x7, 75*XLEN/8, x1)

inst_347:// rs1_val==12297829382473034409 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x6666666666666666, x7, 76*XLEN/8, x1)

inst_348:// rs1_val==12297829382473034409 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x9999999999999999, x7, 77*XLEN/8, x1)

inst_349:// rs1_val==12297829382473034409 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x5555555555555554, x7, 78*XLEN/8, x1)

inst_350:// rs1_val==12297829382473034409 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaa9, x7, 79*XLEN/8, x1)

inst_351:// rs1_val==12297829382473034409 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x3333333333333332, x7, 80*XLEN/8, x1)

inst_352:// rs1_val==12297829382473034409 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0xcccccccccccccccb, x7, 81*XLEN/8, x1)

inst_353:// rs1_val==12297829382473034409 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x6666666666666665, x7, 82*XLEN/8, x1)

inst_354:// rs1_val==12297829382473034409 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x9999999999999998, x7, 83*XLEN/8, x1)

inst_355:// rs1_val==12297829382473034409 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x5555555555555556, x7, 84*XLEN/8, x1)

inst_356:// rs1_val==12297829382473034409 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaab, x7, 85*XLEN/8, x1)

inst_357:// rs1_val==12297829382473034409 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x3333333333333334, x7, 86*XLEN/8, x1)

inst_358:// rs1_val==12297829382473034409 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0xcccccccccccccccd, x7, 87*XLEN/8, x1)

inst_359:// rs1_val==12297829382473034409 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x6666666666666667, x7, 88*XLEN/8, x1)

inst_360:// rs1_val==12297829382473034409 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x999999999999999a, x7, 89*XLEN/8, x1)

inst_361:// rs1_val==12297829382473034409 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x0, x7, 90*XLEN/8, x1)

inst_362:// rs1_val==12297829382473034409 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0x1, x7, 91*XLEN/8, x1)

inst_363:// rs1_val==12297829382473034409 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaa9, 0xffffffffffffffff, x7, 92*XLEN/8, x1)

inst_364:// rs1_val==3689348814741910322 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x5555555555555555, x7, 93*XLEN/8, x1)

inst_365:// rs1_val==3689348814741910322 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0xaaaaaaaaaaaaaaaa, x7, 94*XLEN/8, x1)

inst_366:// rs1_val==3689348814741910322 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x3333333333333333, x7, 95*XLEN/8, x1)

inst_367:// rs1_val==3689348814741910322 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0xcccccccccccccccc, x7, 96*XLEN/8, x1)

inst_368:// rs1_val==3689348814741910322 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x6666666666666666, x7, 97*XLEN/8, x1)

inst_369:// rs1_val==3689348814741910322 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x9999999999999999, x7, 98*XLEN/8, x1)

inst_370:// rs1_val==3689348814741910322 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x5555555555555554, x7, 99*XLEN/8, x1)

inst_371:// rs1_val==3689348814741910322 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0xaaaaaaaaaaaaaaa9, x7, 100*XLEN/8, x1)

inst_372:// rs1_val==3689348814741910322 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x3333333333333332, x7, 101*XLEN/8, x1)

inst_373:// rs1_val==3689348814741910322 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0xcccccccccccccccb, x7, 102*XLEN/8, x1)

inst_374:// rs1_val==3689348814741910322 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x6666666666666665, x7, 103*XLEN/8, x1)

inst_375:// rs1_val==3689348814741910322 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x9999999999999998, x7, 104*XLEN/8, x1)

inst_376:// rs1_val==3689348814741910322 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x5555555555555556, x7, 105*XLEN/8, x1)

inst_377:// rs1_val==3689348814741910322 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0xaaaaaaaaaaaaaaab, x7, 106*XLEN/8, x1)

inst_378:// rs1_val==3689348814741910322 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x3333333333333334, x7, 107*XLEN/8, x1)

inst_379:// rs1_val==3689348814741910322 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0xcccccccccccccccd, x7, 108*XLEN/8, x1)

inst_380:// rs1_val==3689348814741910322 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x6666666666666667, x7, 109*XLEN/8, x1)

inst_381:// rs1_val==3689348814741910322 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x999999999999999a, x7, 110*XLEN/8, x1)

inst_382:// rs1_val==11068046444225730968 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x1, x7, 111*XLEN/8, x1)

inst_383:// rs1_val==11068046444225730968 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0xffffffffffffffff, x7, 112*XLEN/8, x1)

inst_384:// rs1_val==6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x5555555555555555, x7, 113*XLEN/8, x1)

inst_385:// rs1_val==6148914691236517206 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0xaaaaaaaaaaaaaaaa, x7, 114*XLEN/8, x1)

inst_386:// rs1_val==6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x3333333333333333, x7, 115*XLEN/8, x1)

inst_387:// rs1_val==6148914691236517206 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0xcccccccccccccccc, x7, 116*XLEN/8, x1)

inst_388:// rs1_val==6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x6666666666666666, x7, 117*XLEN/8, x1)

inst_389:// rs1_val==6148914691236517206 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x9999999999999999, x7, 118*XLEN/8, x1)

inst_390:// rs1_val==6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x5555555555555554, x7, 119*XLEN/8, x1)

inst_391:// rs1_val==6148914691236517206 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0xaaaaaaaaaaaaaaa9, x7, 120*XLEN/8, x1)

inst_392:// rs1_val==6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x3333333333333332, x7, 121*XLEN/8, x1)

inst_393:// rs1_val==6148914691236517206 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0xcccccccccccccccb, x7, 122*XLEN/8, x1)

inst_394:// rs1_val==6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x6666666666666665, x7, 123*XLEN/8, x1)

inst_395:// rs1_val==6148914691236517206 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x9999999999999998, x7, 124*XLEN/8, x1)

inst_396:// rs1_val==6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x5555555555555556, x7, 125*XLEN/8, x1)

inst_397:// rs1_val==6148914691236517206 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0xaaaaaaaaaaaaaaab, x7, 126*XLEN/8, x1)

inst_398:// rs1_val==6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x3333333333333334, x7, 127*XLEN/8, x1)

inst_399:// rs1_val==6148914691236517206 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0xcccccccccccccccd, x7, 128*XLEN/8, x1)

inst_400:// rs1_val==6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x6666666666666667, x7, 129*XLEN/8, x1)

inst_401:// rs1_val==6148914691236517206 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x999999999999999a, x7, 130*XLEN/8, x1)

inst_402:// rs1_val==6148914691236517206 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x0, x7, 131*XLEN/8, x1)

inst_403:// rs1_val==6148914691236517206 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x1, x7, 132*XLEN/8, x1)

inst_404:// rs1_val==6148914691236517206 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0xffffffffffffffff, x7, 133*XLEN/8, x1)

inst_405:// rs1_val==12297829382473034411 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x5555555555555555, x7, 134*XLEN/8, x1)

inst_406:// rs1_val==12297829382473034411 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0xaaaaaaaaaaaaaaaa, x7, 135*XLEN/8, x1)

inst_407:// rs1_val==12297829382473034411 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x3333333333333333, x7, 136*XLEN/8, x1)

inst_408:// rs1_val==12297829382473034411 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0xcccccccccccccccc, x7, 137*XLEN/8, x1)

inst_409:// rs1_val==12297829382473034411 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x6666666666666666, x7, 138*XLEN/8, x1)

inst_410:// rs1_val==12297829382473034411 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x9999999999999999, x7, 139*XLEN/8, x1)

inst_411:// rs1_val==12297829382473034411 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x5555555555555554, x7, 140*XLEN/8, x1)

inst_412:// rs1_val==12297829382473034411 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0xaaaaaaaaaaaaaaa9, x7, 141*XLEN/8, x1)

inst_413:// rs1_val==12297829382473034411 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x3333333333333332, x7, 142*XLEN/8, x1)

inst_414:// rs1_val==12297829382473034411 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0xcccccccccccccccb, x7, 143*XLEN/8, x1)

inst_415:// rs1_val==12297829382473034411 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x6666666666666665, x7, 144*XLEN/8, x1)

inst_416:// rs1_val==12297829382473034411 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x9999999999999998, x7, 145*XLEN/8, x1)

inst_417:// rs1_val==12297829382473034411 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x5555555555555556, x7, 146*XLEN/8, x1)

inst_418:// rs1_val==12297829382473034411 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0xaaaaaaaaaaaaaaab, x7, 147*XLEN/8, x1)

inst_419:// rs1_val==12297829382473034411 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x3333333333333334, x7, 148*XLEN/8, x1)

inst_420:// rs1_val==12297829382473034411 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0xcccccccccccccccd, x7, 149*XLEN/8, x1)

inst_421:// rs1_val==12297829382473034411 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x6666666666666667, x7, 150*XLEN/8, x1)

inst_422:// rs1_val==12297829382473034411 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x999999999999999a, x7, 151*XLEN/8, x1)

inst_423:// rs1_val==12297829382473034411 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x0, x7, 152*XLEN/8, x1)

inst_424:// rs1_val==12297829382473034411 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0x1, x7, 153*XLEN/8, x1)

inst_425:// rs1_val==12297829382473034411 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaab, 0xffffffffffffffff, x7, 154*XLEN/8, x1)

inst_426:// rs1_val==3689348814741910324 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x5555555555555555, x7, 155*XLEN/8, x1)

inst_427:// rs1_val==3689348814741910324 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0xaaaaaaaaaaaaaaaa, x7, 156*XLEN/8, x1)

inst_428:// rs1_val==3689348814741910324 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x3333333333333333, x7, 157*XLEN/8, x1)

inst_429:// rs1_val==3689348814741910324 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0xcccccccccccccccc, x7, 158*XLEN/8, x1)

inst_430:// rs1_val==3689348814741910324 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x6666666666666666, x7, 159*XLEN/8, x1)

inst_431:// rs1_val==3689348814741910324 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x9999999999999999, x7, 160*XLEN/8, x1)

inst_432:// rs1_val==3689348814741910324 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x5555555555555554, x7, 161*XLEN/8, x1)

inst_433:// rs1_val==3689348814741910324 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0xaaaaaaaaaaaaaaa9, x7, 162*XLEN/8, x1)

inst_434:// rs1_val==3689348814741910324 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x3333333333333332, x7, 163*XLEN/8, x1)

inst_435:// rs1_val==3689348814741910324 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0xcccccccccccccccb, x7, 164*XLEN/8, x1)

inst_436:// rs1_val==3689348814741910324 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x6666666666666665, x7, 165*XLEN/8, x1)

inst_437:// rs1_val==3689348814741910324 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x9999999999999998, x7, 166*XLEN/8, x1)

inst_438:// rs1_val==3689348814741910324 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x5555555555555556, x7, 167*XLEN/8, x1)

inst_439:// rs1_val==3689348814741910324 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0xaaaaaaaaaaaaaaab, x7, 168*XLEN/8, x1)

inst_440:// rs1_val==3689348814741910324 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x3333333333333334, x7, 169*XLEN/8, x1)

inst_441:// rs1_val==3689348814741910324 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0xcccccccccccccccd, x7, 170*XLEN/8, x1)

inst_442:// rs1_val==3689348814741910324 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x6666666666666667, x7, 171*XLEN/8, x1)

inst_443:// rs1_val==3689348814741910324 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x999999999999999a, x7, 172*XLEN/8, x1)

inst_444:// rs1_val==3689348814741910324 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x0, x7, 173*XLEN/8, x1)

inst_445:// rs1_val==3689348814741910324 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x1, x7, 174*XLEN/8, x1)

inst_446:// rs1_val==3689348814741910324 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0xffffffffffffffff, x7, 175*XLEN/8, x1)

inst_447:// rs1_val==14757395258967641293 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x5555555555555555, x7, 176*XLEN/8, x1)

inst_448:// rs1_val==14757395258967641293 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0xaaaaaaaaaaaaaaaa, x7, 177*XLEN/8, x1)

inst_449:// rs1_val==14757395258967641293 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x3333333333333333, x7, 178*XLEN/8, x1)

inst_450:// rs1_val==14757395258967641293 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0xcccccccccccccccc, x7, 179*XLEN/8, x1)

inst_451:// rs1_val==14757395258967641293 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x6666666666666666, x7, 180*XLEN/8, x1)

inst_452:// rs1_val==14757395258967641293 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x9999999999999999, x7, 181*XLEN/8, x1)

inst_453:// rs1_val==14757395258967641293 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x5555555555555554, x7, 182*XLEN/8, x1)

inst_454:// rs1_val==14757395258967641293 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0xaaaaaaaaaaaaaaa9, x7, 183*XLEN/8, x1)

inst_455:// rs1_val==14757395258967641293 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x3333333333333332, x7, 184*XLEN/8, x1)

inst_456:// rs1_val==14757395258967641293 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0xcccccccccccccccb, x7, 185*XLEN/8, x1)

inst_457:// rs1_val==14757395258967641293 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x6666666666666665, x7, 186*XLEN/8, x1)

inst_458:// rs1_val==14757395258967641293 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x9999999999999998, x7, 187*XLEN/8, x1)

inst_459:// rs1_val==14757395258967641293 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x5555555555555556, x7, 188*XLEN/8, x1)

inst_460:// rs1_val==14757395258967641293 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0xaaaaaaaaaaaaaaab, x7, 189*XLEN/8, x1)

inst_461:// rs1_val==14757395258967641293 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x3333333333333334, x7, 190*XLEN/8, x1)

inst_462:// rs1_val==14757395258967641293 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0xcccccccccccccccd, x7, 191*XLEN/8, x1)

inst_463:// rs1_val==14757395258967641293 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x6666666666666667, x7, 192*XLEN/8, x1)

inst_464:// rs1_val==14757395258967641293 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x999999999999999a, x7, 193*XLEN/8, x1)

inst_465:// rs1_val==14757395258967641293 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x0, x7, 194*XLEN/8, x1)

inst_466:// rs1_val==14757395258967641293 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0x1, x7, 195*XLEN/8, x1)

inst_467:// rs1_val==14757395258967641293 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccd;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccd, 0xffffffffffffffff, x7, 196*XLEN/8, x1)

inst_468:// rs1_val==7378697629483820647 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x5555555555555555, x7, 197*XLEN/8, x1)

inst_469:// rs1_val==7378697629483820647 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0xaaaaaaaaaaaaaaaa, x7, 198*XLEN/8, x1)

inst_470:// rs1_val==7378697629483820647 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x3333333333333333, x7, 199*XLEN/8, x1)

inst_471:// rs1_val==7378697629483820647 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0xcccccccccccccccc, x7, 200*XLEN/8, x1)

inst_472:// rs1_val==7378697629483820647 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x6666666666666666, x7, 201*XLEN/8, x1)

inst_473:// rs1_val==7378697629483820647 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x9999999999999999, x7, 202*XLEN/8, x1)

inst_474:// rs1_val==7378697629483820647 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x5555555555555554, x7, 203*XLEN/8, x1)

inst_475:// rs1_val==7378697629483820647 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0xaaaaaaaaaaaaaaa9, x7, 204*XLEN/8, x1)

inst_476:// rs1_val==7378697629483820647 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x3333333333333332, x7, 205*XLEN/8, x1)

inst_477:// rs1_val==7378697629483820647 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0xcccccccccccccccb, x7, 206*XLEN/8, x1)

inst_478:// rs1_val==7378697629483820647 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x6666666666666665, x7, 207*XLEN/8, x1)

inst_479:// rs1_val==7378697629483820647 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x9999999999999998, x7, 208*XLEN/8, x1)

inst_480:// rs1_val==7378697629483820647 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x5555555555555556, x7, 209*XLEN/8, x1)

inst_481:// rs1_val==7378697629483820647 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0xaaaaaaaaaaaaaaab, x7, 210*XLEN/8, x1)

inst_482:// rs1_val==7378697629483820647 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x3333333333333334, x7, 211*XLEN/8, x1)

inst_483:// rs1_val==7378697629483820647 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0xcccccccccccccccd, x7, 212*XLEN/8, x1)

inst_484:// rs1_val==7378697629483820647 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x6666666666666667, x7, 213*XLEN/8, x1)

inst_485:// rs1_val==7378697629483820647 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x999999999999999a, x7, 214*XLEN/8, x1)

inst_486:// rs1_val==7378697629483820647 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x0, x7, 215*XLEN/8, x1)

inst_487:// rs1_val==7378697629483820647 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x1, x7, 216*XLEN/8, x1)

inst_488:// rs1_val==7378697629483820647 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0xffffffffffffffff, x7, 217*XLEN/8, x1)

inst_489:// rs1_val==11068046444225730970 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x5555555555555555, x7, 218*XLEN/8, x1)

inst_490:// rs1_val==11068046444225730970 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xaaaaaaaaaaaaaaaa, x7, 219*XLEN/8, x1)

inst_491:// rs1_val==11068046444225730970 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x3333333333333333, x7, 220*XLEN/8, x1)

inst_492:// rs1_val==11068046444225730970 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xcccccccccccccccc, x7, 221*XLEN/8, x1)

inst_493:// rs1_val==11068046444225730970 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x6666666666666666, x7, 222*XLEN/8, x1)

inst_494:// rs1_val==11068046444225730970 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x9999999999999999, x7, 223*XLEN/8, x1)

inst_495:// rs1_val==11068046444225730970 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x5555555555555554, x7, 224*XLEN/8, x1)

inst_496:// rs1_val==11068046444225730970 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xaaaaaaaaaaaaaaa9, x7, 225*XLEN/8, x1)

inst_497:// rs1_val==11068046444225730970 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x3333333333333332, x7, 226*XLEN/8, x1)

inst_498:// rs1_val==11068046444225730970 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xcccccccccccccccb, x7, 227*XLEN/8, x1)

inst_499:// rs1_val==11068046444225730970 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x6666666666666665, x7, 228*XLEN/8, x1)

inst_500:// rs1_val==11068046444225730970 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x9999999999999998, x7, 229*XLEN/8, x1)

inst_501:// rs1_val==11068046444225730970 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x5555555555555556, x7, 230*XLEN/8, x1)

inst_502:// rs1_val==11068046444225730970 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xaaaaaaaaaaaaaaab, x7, 231*XLEN/8, x1)

inst_503:// rs1_val==11068046444225730970 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x3333333333333334, x7, 232*XLEN/8, x1)

inst_504:// rs1_val==11068046444225730970 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xcccccccccccccccd, x7, 233*XLEN/8, x1)

inst_505:// rs1_val==11068046444225730970 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x6666666666666667, x7, 234*XLEN/8, x1)

inst_506:// rs1_val==11068046444225730970 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x999999999999999a, x7, 235*XLEN/8, x1)

inst_507:// rs1_val==11068046444225730970 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x0, x7, 236*XLEN/8, x1)

inst_508:// rs1_val==11068046444225730970 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0x1, x7, 237*XLEN/8, x1)

inst_509:// rs1_val==11068046444225730970 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x999999999999999a;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x999999999999999a, 0xffffffffffffffff, x7, 238*XLEN/8, x1)

inst_510:// rs1_val==0 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x5555555555555555, x7, 239*XLEN/8, x1)

inst_511:// rs1_val==0 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0xaaaaaaaaaaaaaaaa, x7, 240*XLEN/8, x1)

inst_512:// rs1_val==0 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x3333333333333333, x7, 241*XLEN/8, x1)

inst_513:// rs1_val==0 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0xcccccccccccccccc, x7, 242*XLEN/8, x1)

inst_514:// rs1_val==0 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x6666666666666666, x7, 243*XLEN/8, x1)

inst_515:// rs1_val==0 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x9999999999999999, x7, 244*XLEN/8, x1)

inst_516:// rs1_val==0 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x5555555555555554, x7, 245*XLEN/8, x1)

inst_517:// rs1_val==0 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0xaaaaaaaaaaaaaaa9, x7, 246*XLEN/8, x1)

inst_518:// rs1_val==0 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x3333333333333332, x7, 247*XLEN/8, x1)

inst_519:// rs1_val==0 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0xcccccccccccccccb, x7, 248*XLEN/8, x1)

inst_520:// rs1_val==0 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x6666666666666665, x7, 249*XLEN/8, x1)

inst_521:// rs1_val==0 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x9999999999999998, x7, 250*XLEN/8, x1)

inst_522:// rs1_val==0 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x5555555555555556, x7, 251*XLEN/8, x1)

inst_523:// rs1_val==0 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0xaaaaaaaaaaaaaaab, x7, 252*XLEN/8, x1)

inst_524:// rs1_val==0 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x3333333333333334, x7, 253*XLEN/8, x1)

inst_525:// rs1_val==0 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0xcccccccccccccccd, x7, 254*XLEN/8, x1)

inst_526:// rs1_val==0 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x6666666666666667, x7, 255*XLEN/8, x1)
RVTEST_SIGBASE(x7,signature_x7_2)

inst_527:// rs1_val==0 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x999999999999999a, x7, 0*XLEN/8, x1)

inst_528:// rs1_val==0 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x0, x7, 1*XLEN/8, x1)

inst_529:// rs1_val==0 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0x1, x7, 2*XLEN/8, x1)

inst_530:// rs1_val==0 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x0, 0xffffffffffffffff, x7, 3*XLEN/8, x1)

inst_531:// rs1_val==1 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x5555555555555555, x7, 4*XLEN/8, x1)

inst_532:// rs1_val==1 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0xaaaaaaaaaaaaaaaa, x7, 5*XLEN/8, x1)

inst_533:// rs1_val==1 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x3333333333333333, x7, 6*XLEN/8, x1)

inst_534:// rs1_val==1 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0xcccccccccccccccc, x7, 7*XLEN/8, x1)

inst_535:// rs1_val==1 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x6666666666666666, x7, 8*XLEN/8, x1)

inst_536:// rs1_val==1 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x9999999999999999, x7, 9*XLEN/8, x1)

inst_537:// rs1_val==1 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x5555555555555554, x7, 10*XLEN/8, x1)

inst_538:// rs1_val==1 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0xaaaaaaaaaaaaaaa9, x7, 11*XLEN/8, x1)

inst_539:// rs1_val==1 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x3333333333333332, x7, 12*XLEN/8, x1)

inst_540:// rs1_val==1 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0xcccccccccccccccb, x7, 13*XLEN/8, x1)

inst_541:// rs1_val==1 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x6666666666666665, x7, 14*XLEN/8, x1)

inst_542:// rs1_val==1 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x9999999999999998, x7, 15*XLEN/8, x1)

inst_543:// rs1_val==1 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x5555555555555556, x7, 16*XLEN/8, x1)

inst_544:// rs1_val==1 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0xaaaaaaaaaaaaaaab, x7, 17*XLEN/8, x1)

inst_545:// rs1_val==1 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x3333333333333334, x7, 18*XLEN/8, x1)

inst_546:// rs1_val==1 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0xcccccccccccccccd, x7, 19*XLEN/8, x1)

inst_547:// rs1_val==1 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x6666666666666667, x7, 20*XLEN/8, x1)

inst_548:// rs1_val==1 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x999999999999999a, x7, 21*XLEN/8, x1)

inst_549:// rs1_val==1 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x0, x7, 22*XLEN/8, x1)

inst_550:// rs1_val==1 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x1, x7, 23*XLEN/8, x1)

inst_551:// rs1_val==1 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0xffffffffffffffff, x7, 24*XLEN/8, x1)

inst_552:// rs1_val==18446744073709551615 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x5555555555555555, x7, 25*XLEN/8, x1)

inst_553:// rs1_val==18446744073709551615 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xaaaaaaaaaaaaaaaa, x7, 26*XLEN/8, x1)

inst_554:// rs1_val==18446744073709551615 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x3333333333333333, x7, 27*XLEN/8, x1)

inst_555:// rs1_val==18446744073709551615 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xcccccccccccccccc, x7, 28*XLEN/8, x1)

inst_556:// rs1_val==18446744073709551615 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x6666666666666666, x7, 29*XLEN/8, x1)

inst_557:// rs1_val==18446744073709551615 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x9999999999999999, x7, 30*XLEN/8, x1)

inst_558:// rs1_val==18446744073709551615 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x5555555555555554, x7, 31*XLEN/8, x1)

inst_559:// rs1_val==18446744073709551615 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xaaaaaaaaaaaaaaa9, x7, 32*XLEN/8, x1)

inst_560:// rs1_val==18446744073709551615 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x3333333333333332, x7, 33*XLEN/8, x1)

inst_561:// rs1_val==18446744073709551615 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xcccccccccccccccb, x7, 34*XLEN/8, x1)

inst_562:// rs1_val==18446744073709551615 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x6666666666666665, x7, 35*XLEN/8, x1)

inst_563:// rs1_val==18446744073709551615 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x9999999999999998, x7, 36*XLEN/8, x1)

inst_564:// rs1_val==18446744073709551615 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x5555555555555556, x7, 37*XLEN/8, x1)

inst_565:// rs1_val==18446744073709551615 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xaaaaaaaaaaaaaaab, x7, 38*XLEN/8, x1)

inst_566:// rs1_val==18446744073709551615 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x3333333333333334, x7, 39*XLEN/8, x1)

inst_567:// rs1_val==18446744073709551615 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xcccccccccccccccd, x7, 40*XLEN/8, x1)

inst_568:// rs1_val==18446744073709551615 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x6666666666666667, x7, 41*XLEN/8, x1)

inst_569:// rs1_val==18446744073709551615 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x999999999999999a, x7, 42*XLEN/8, x1)

inst_570:// rs1_val==18446744073709551615 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x0, x7, 43*XLEN/8, x1)

inst_571:// rs1_val==18446744073709551615 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x1, x7, 44*XLEN/8, x1)

inst_572:// rs1_val==18446744073709551615 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xffffffffffffffff, x7, 45*XLEN/8, x1)

inst_573:// rs1_val==3689348814741910322 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x0, x7, 46*XLEN/8, x1)

inst_574:// rs1_val==3689348814741910322 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x1, x7, 47*XLEN/8, x1)

inst_575:// rs1_val==3689348814741910322 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0xffffffffffffffff, x7, 48*XLEN/8, x1)

inst_576:// rs1_val==14757395258967641291 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x5555555555555555, x7, 49*XLEN/8, x1)

inst_577:// rs1_val==14757395258967641291 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0xaaaaaaaaaaaaaaaa, x7, 50*XLEN/8, x1)

inst_578:// rs1_val==14757395258967641291 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x3333333333333333, x7, 51*XLEN/8, x1)

inst_579:// rs1_val==14757395258967641291 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0xcccccccccccccccc, x7, 52*XLEN/8, x1)

inst_580:// rs1_val==14757395258967641291 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x6666666666666666, x7, 53*XLEN/8, x1)

inst_581:// rs1_val==14757395258967641291 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x9999999999999999, x7, 54*XLEN/8, x1)

inst_582:// rs1_val==14757395258967641291 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x5555555555555554, x7, 55*XLEN/8, x1)

inst_583:// rs1_val==14757395258967641291 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0xaaaaaaaaaaaaaaa9, x7, 56*XLEN/8, x1)

inst_584:// rs1_val==14757395258967641291 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x3333333333333332, x7, 57*XLEN/8, x1)

inst_585:// rs1_val==14757395258967641291 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0xcccccccccccccccb, x7, 58*XLEN/8, x1)

inst_586:// rs1_val==14757395258967641291 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x6666666666666665, x7, 59*XLEN/8, x1)

inst_587:// rs1_val==14757395258967641291 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x9999999999999998, x7, 60*XLEN/8, x1)

inst_588:// rs1_val==14757395258967641291 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x5555555555555556, x7, 61*XLEN/8, x1)

inst_589:// rs1_val==14757395258967641291 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0xaaaaaaaaaaaaaaab, x7, 62*XLEN/8, x1)

inst_590:// rs1_val==14757395258967641291 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x3333333333333334, x7, 63*XLEN/8, x1)

inst_591:// rs1_val==14757395258967641291 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0xcccccccccccccccd, x7, 64*XLEN/8, x1)

inst_592:// rs1_val==14757395258967641291 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x6666666666666667, x7, 65*XLEN/8, x1)

inst_593:// rs1_val==14757395258967641291 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x999999999999999a, x7, 66*XLEN/8, x1)

inst_594:// rs1_val==14757395258967641291 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x0, x7, 67*XLEN/8, x1)

inst_595:// rs1_val==14757395258967641291 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0x1, x7, 68*XLEN/8, x1)

inst_596:// rs1_val==14757395258967641291 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0xcccccccccccccccb;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0xcccccccccccccccb, 0xffffffffffffffff, x7, 69*XLEN/8, x1)

inst_597:// rs1_val==7378697629483820645 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x5555555555555555, x7, 70*XLEN/8, x1)

inst_598:// rs1_val==7378697629483820645 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0xaaaaaaaaaaaaaaaa, x7, 71*XLEN/8, x1)

inst_599:// rs1_val==7378697629483820645 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x3333333333333333, x7, 72*XLEN/8, x1)

inst_600:// rs1_val==7378697629483820645 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0xcccccccccccccccc, x7, 73*XLEN/8, x1)

inst_601:// rs1_val==7378697629483820645 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x6666666666666666, x7, 74*XLEN/8, x1)

inst_602:// rs1_val==7378697629483820645 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x9999999999999999, x7, 75*XLEN/8, x1)

inst_603:// rs1_val==7378697629483820645 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x5555555555555554, x7, 76*XLEN/8, x1)

inst_604:// rs1_val==7378697629483820645 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0xaaaaaaaaaaaaaaa9, x7, 77*XLEN/8, x1)

inst_605:// rs1_val==7378697629483820645 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x3333333333333332, x7, 78*XLEN/8, x1)

inst_606:// rs1_val==7378697629483820645 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0xcccccccccccccccb, x7, 79*XLEN/8, x1)

inst_607:// rs1_val==7378697629483820645 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x6666666666666665, x7, 80*XLEN/8, x1)

inst_608:// rs1_val==7378697629483820645 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x9999999999999998, x7, 81*XLEN/8, x1)

inst_609:// rs1_val==7378697629483820645 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x5555555555555556, x7, 82*XLEN/8, x1)

inst_610:// rs1_val==7378697629483820645 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0xaaaaaaaaaaaaaaab, x7, 83*XLEN/8, x1)

inst_611:// rs1_val==7378697629483820645 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x3333333333333334, x7, 84*XLEN/8, x1)

inst_612:// rs1_val==7378697629483820645 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0xcccccccccccccccd, x7, 85*XLEN/8, x1)

inst_613:// rs1_val==7378697629483820645 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x6666666666666667, x7, 86*XLEN/8, x1)

inst_614:// rs1_val==7378697629483820645 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x999999999999999a, x7, 87*XLEN/8, x1)

inst_615:// rs1_val==7378697629483820645 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x0, x7, 88*XLEN/8, x1)

inst_616:// rs1_val==7378697629483820645 and rs2_val==1, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x1
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x1, x7, 89*XLEN/8, x1)

inst_617:// rs1_val==7378697629483820645 and rs2_val==18446744073709551615, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xffffffffffffffff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0xffffffffffffffff, x7, 90*XLEN/8, x1)

inst_618:// rs1_val==11068046444225730968 and rs2_val==6148914691236517205, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x5555555555555555
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x5555555555555555, x7, 91*XLEN/8, x1)

inst_619:// rs1_val==11068046444225730968 and rs2_val==12297829382473034410, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0xaaaaaaaaaaaaaaaa, x7, 92*XLEN/8, x1)

inst_620:// rs1_val==11068046444225730968 and rs2_val==3689348814741910323, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x3333333333333333
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x3333333333333333, x7, 93*XLEN/8, x1)

inst_621:// rs1_val==11068046444225730968 and rs2_val==14757395258967641292, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0xcccccccccccccccc
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0xcccccccccccccccc, x7, 94*XLEN/8, x1)

inst_622:// rs1_val==11068046444225730968 and rs2_val==7378697629483820646, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x6666666666666666
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x6666666666666666, x7, 95*XLEN/8, x1)

inst_623:// rs1_val==11068046444225730968 and rs2_val==11068046444225730969, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x9999999999999999
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x9999999999999999, x7, 96*XLEN/8, x1)

inst_624:// rs1_val==11068046444225730968 and rs2_val==6148914691236517204, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x5555555555555554
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x5555555555555554, x7, 97*XLEN/8, x1)

inst_625:// rs1_val==11068046444225730968 and rs2_val==12297829382473034409, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0xaaaaaaaaaaaaaaa9, x7, 98*XLEN/8, x1)

inst_626:// rs1_val==11068046444225730968 and rs2_val==3689348814741910322, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x3333333333333332
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x3333333333333332, x7, 99*XLEN/8, x1)

inst_627:// rs1_val==11068046444225730968 and rs2_val==14757395258967641291, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0xcccccccccccccccb
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0xcccccccccccccccb, x7, 100*XLEN/8, x1)

inst_628:// rs1_val==11068046444225730968 and rs2_val==7378697629483820645, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x6666666666666665
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x6666666666666665, x7, 101*XLEN/8, x1)

inst_629:// rs1_val==11068046444225730968 and rs2_val==11068046444225730968, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x9999999999999998
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x9999999999999998, x7, 102*XLEN/8, x1)

inst_630:// rs1_val==11068046444225730968 and rs2_val==6148914691236517206, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x5555555555555556
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x5555555555555556, x7, 103*XLEN/8, x1)

inst_631:// rs1_val==11068046444225730968 and rs2_val==12297829382473034411, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0xaaaaaaaaaaaaaaab, x7, 104*XLEN/8, x1)

inst_632:// rs1_val==11068046444225730968 and rs2_val==3689348814741910324, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x3333333333333334
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x3333333333333334, x7, 105*XLEN/8, x1)

inst_633:// rs1_val==11068046444225730968 and rs2_val==14757395258967641293, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0xcccccccccccccccd
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0xcccccccccccccccd, x7, 106*XLEN/8, x1)

inst_634:// rs1_val==11068046444225730968 and rs2_val==7378697629483820647, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x6666666666666667
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x6666666666666667, x7, 107*XLEN/8, x1)

inst_635:// rs1_val==11068046444225730968 and rs2_val==11068046444225730970, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x999999999999999a
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x999999999999999a, x7, 108*XLEN/8, x1)

inst_636:// rs1_val==11068046444225730968 and rs2_val==0, 
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x9999999999999998;  op2val:0x0
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x9999999999999998, 0x0, x7, 109*XLEN/8, x1)

inst_637:// rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 8, rs1_val > 0 and rs2_val > 0, rs2_val == 281474976710656
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0x1000000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x8, 0x1000000000000, x7, 110*XLEN/8, x1)

inst_638:// rs1_val == 1, rs2_val == 8796093022208
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x80000000000
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1, 0x80000000000, x7, 111*XLEN/8, x1)

inst_639:// rs2_val == 18446744073709518847, rs1_val == 281474976710656
// opcode: minu ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000;  op2val:0xffffffffffff7fff
TEST_RR_OP(minu, x31, x30, x29, 0x0000000000000000, 0x1000000000000, 0xffffffffffff7fff, x7, 112*XLEN/8, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x3_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x7_0:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x7_2:
    .fill 113*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
