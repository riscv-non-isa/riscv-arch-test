
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sun Jan 14 18:32:27 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv64i_b.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clmulh instruction of the RISC-V RV64Zbc,RV64Zbkc,RV64Zk,RV64Zkn,RV64Zks extension for the clmulh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZbc,RV64IZbkc,RV64IZk,RV64IZkn,RV64IZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zbc.*);def TEST_CASE_1=True;",clmulh)

RVTEST_CASE(1,"//check ISA:=regex(.*I.*Zbkc.*);def TEST_CASE_1=True;",clmulh)

RVTEST_CASE(2,"//check ISA:=regex(.*I.*Zk.*);def TEST_CASE_1=True;",clmulh)

RVTEST_CASE(3,"//check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",clmulh)

RVTEST_CASE(4,"//check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",clmulh)

RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x22, rs1_val==0 and rs2_val==0, 
// opcode: clmulh ; op1:x12; op2:x12; dest:x22; op1val:0x0;  op2val:0x0
TEST_RR_OP(clmulh, x22, x12, x12, 0x0000000000000000, 0x0, 0x0, x4, 0*XLEN/8, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x7, rd==x28, rs1_val==0 and rs2_val==0x1000, rs2_val == 4096
// opcode: clmulh ; op1:x2; op2:x7; dest:x28; op1val:0x0;  op2val:0x1000
TEST_RR_OP(clmulh, x28, x2, x7, 0x0000000000000000, 0x0, 0x1000, x4, 1*XLEN/8, x11)

inst_2:
// rs2 == rd != rs1, rs1==x6, rs2==x23, rd==x23, rs1_val==0 and rs2_val==1, rs2_val == 1
// opcode: clmulh ; op1:x6; op2:x23; dest:x23; op1val:0x0;  op2val:0x1
TEST_RR_OP(clmulh, x23, x6, x23, 0x0000000000000000, 0x0, 0x1, x4, 2*XLEN/8, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_val==1 and rs2_val==0, rs1_val == 1
// opcode: clmulh ; op1:x13; op2:x13; dest:x13; op1val:0x1;  op2val:0x1
TEST_RR_OP(clmulh, x13, x13, x13, 0x0000000000000000, 0x1, 0x1, x4, 3*XLEN/8, x11)

inst_4:
// rs1 == rd != rs2, rs1==x25, rs2==x21, rd==x25, rs1_val==1 and rs2_val==0x1000, 
// opcode: clmulh ; op1:x25; op2:x21; dest:x25; op1val:0x1;  op2val:0x1000
TEST_RR_OP(clmulh, x25, x25, x21, 0x0000000000000000, 0x1, 0x1000, x4, 4*XLEN/8, x11)

inst_5:
// rs1==x0, rs2==x17, rd==x26, rs1_val==1 and rs2_val==1, 
// opcode: clmulh ; op1:x0; op2:x17; dest:x26; op1val:0x0;  op2val:0x1
TEST_RR_OP(clmulh, x26, x0, x17, 0x0000000000000000, 0x0, 0x1, x4, 5*XLEN/8, x11)

inst_6:
// rs1==x9, rs2==x16, rd==x31, rs1_val == 6148914691236517205, rs2_val == 18446744073675997183
// opcode: clmulh ; op1:x9; op2:x16; dest:x31; op1val:0x5555555555555555;  op2val:0xfffffffffdffffff
TEST_RR_OP(clmulh, x31, x9, x16, 0x0000000000000000, 0x5555555555555555, 0xfffffffffdffffff, x4, 6*XLEN/8, x11)

inst_7:
// rs1==x23, rs2==x24, rd==x27, rs2_val == 18446744073709551614, rs1_val == 8589934592
// opcode: clmulh ; op1:x23; op2:x24; dest:x27; op1val:0x200000000;  op2val:0xfffffffffffffffe
TEST_RR_OP(clmulh, x27, x23, x24, 0x0000000000000000, 0x200000000, 0xfffffffffffffffe, x4, 7*XLEN/8, x11)

inst_8:
// rs1==x30, rs2==x1, rd==x7, rs2_val == 18446744073709551613, rs1_val == 9007199254740992
// opcode: clmulh ; op1:x30; op2:x1; dest:x7; op1val:0x20000000000000;  op2val:0xfffffffffffffffd
TEST_RR_OP(clmulh, x7, x30, x1, 0x0000000000000000, 0x20000000000000, 0xfffffffffffffffd, x4, 8*XLEN/8, x11)

inst_9:
// rs1==x26, rs2==x29, rd==x5, rs2_val == 18446744073709551611, 
// opcode: clmulh ; op1:x26; op2:x29; dest:x5; op1val:-0x81;  op2val:0xfffffffffffffffb
TEST_RR_OP(clmulh, x5, x26, x29, 0x0000000000000000, -0x81, 0xfffffffffffffffb, x4, 9*XLEN/8, x11)

inst_10:
// rs1==x8, rs2==x3, rd==x24, rs2_val == 18446744073709551607, rs1_val == 1024
// opcode: clmulh ; op1:x8; op2:x3; dest:x24; op1val:0x400;  op2val:0xfffffffffffffff7
TEST_RR_OP(clmulh, x24, x8, x3, 0x0000000000000000, 0x400, 0xfffffffffffffff7, x4, 10*XLEN/8, x11)

inst_11:
// rs1==x10, rs2==x28, rd==x18, rs2_val == 18446744073709551599, 
// opcode: clmulh ; op1:x10; op2:x28; dest:x18; op1val:-0x80000000000001;  op2val:0xffffffffffffffef
TEST_RR_OP(clmulh, x18, x10, x28, 0x0000000000000000, -0x80000000000001, 0xffffffffffffffef, x4, 11*XLEN/8, x11)

inst_12:
// rs1==x3, rs2==x27, rd==x30, rs2_val == 18446744073709551583, 
// opcode: clmulh ; op1:x3; op2:x27; dest:x30; op1val:0x20000000000000;  op2val:0xffffffffffffffdf
TEST_RR_OP(clmulh, x30, x3, x27, 0x0000000000000000, 0x20000000000000, 0xffffffffffffffdf, x4, 12*XLEN/8, x5)

inst_13:
// rs1==x15, rs2==x0, rd==x12, rs2_val == 18446744073709551551, rs1_val == 18446743523953737727
// opcode: clmulh ; op1:x15; op2:x0; dest:x12; op1val:0xffffff7fffffffff;  op2val:0x0
TEST_RR_OP(clmulh, x12, x15, x0, 0x0000000000000000, 0xffffff7fffffffff, 0x0, x4, 13*XLEN/8, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_14:
// rs1==x4, rs2==x2, rd==x8, rs2_val == 18446744073709551487, 
// opcode: clmulh ; op1:x4; op2:x2; dest:x8; op1val:-0x5555555555555556;  op2val:0xffffffffffffff7f
TEST_RR_OP(clmulh, x8, x4, x2, 0x0000000000000000, -0x5555555555555556, 0xffffffffffffff7f, x3, 0*XLEN/8, x5)

inst_15:
// rs1==x20, rs2==x15, rd==x9, rs2_val == 18446744073709551359, 
// opcode: clmulh ; op1:x20; op2:x15; dest:x9; op1val:0x5;  op2val:0xfffffffffffffeff
TEST_RR_OP(clmulh, x9, x20, x15, 0x0000000000000000, 0x5, 0xfffffffffffffeff, x3, 1*XLEN/8, x5)

inst_16:
// rs1==x14, rs2==x26, rd==x1, rs2_val == 18446744073709551103, 
// opcode: clmulh ; op1:x14; op2:x26; dest:x1; op1val:0x9;  op2val:0xfffffffffffffdff
TEST_RR_OP(clmulh, x1, x14, x26, 0x0000000000000000, 0x9, 0xfffffffffffffdff, x3, 2*XLEN/8, x5)

inst_17:
// rs1==x17, rs2==x20, rd==x6, rs2_val == 18446744073709550591, rs1_val == 274877906944
// opcode: clmulh ; op1:x17; op2:x20; dest:x6; op1val:0x4000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulh, x6, x17, x20, 0x0000000000000000, 0x4000000000, 0xfffffffffffffbff, x3, 3*XLEN/8, x5)

inst_18:
// rs1==x24, rs2==x25, rd==x0, rs2_val == 18446744073709549567, rs1_val == 32768
// opcode: clmulh ; op1:x24; op2:x25; dest:x0; op1val:0x8000;  op2val:0xfffffffffffff7ff
TEST_RR_OP(clmulh, x0, x24, x25, 0x0000000000000000, 0x8000, 0xfffffffffffff7ff, x3, 4*XLEN/8, x5)

inst_19:
// rs1==x19, rs2==x18, rd==x4, rs2_val == 18446744073709547519, 
// opcode: clmulh ; op1:x19; op2:x18; dest:x4; op1val:0x5555555555555555;  op2val:0xffffffffffffefff
TEST_RR_OP(clmulh, x4, x19, x18, 0x0000000000000000, 0x5555555555555555, 0xffffffffffffefff, x3, 5*XLEN/8, x5)

inst_20:
// rs1==x1, rs2==x6, rd==x16, rs2_val == 18446744073709543423, rs1_val == 18446744073709535231
// opcode: clmulh ; op1:x1; op2:x6; dest:x16; op1val:0xffffffffffffbfff;  op2val:0xffffffffffffdfff
TEST_RR_OP(clmulh, x16, x1, x6, 0x0000000000000000, 0xffffffffffffbfff, 0xffffffffffffdfff, x3, 6*XLEN/8, x5)

inst_21:
// rs1==x31, rs2==x10, rd==x29, rs2_val == 18446744073709535231, 
// opcode: clmulh ; op1:x31; op2:x10; dest:x29; op1val:-0x800000000000001;  op2val:0xffffffffffffbfff
TEST_RR_OP(clmulh, x29, x31, x10, 0x0000000000000000, -0x800000000000001, 0xffffffffffffbfff, x3, 7*XLEN/8, x5)

inst_22:
// rs1==x22, rs2==x19, rd==x21, rs2_val == 18446744073709518847, rs1_val == 524288
// opcode: clmulh ; op1:x22; op2:x19; dest:x21; op1val:0x80000;  op2val:0xffffffffffff7fff
TEST_RR_OP(clmulh, x21, x22, x19, 0x0000000000000000, 0x80000, 0xffffffffffff7fff, x3, 8*XLEN/8, x5)

inst_23:
// rs1==x28, rs2==x9, rd==x11, rs2_val == 18446744073709486079, rs1_val == 288230376151711744
// opcode: clmulh ; op1:x28; op2:x9; dest:x11; op1val:0x400000000000000;  op2val:0xfffffffffffeffff
TEST_RR_OP(clmulh, x11, x28, x9, 0x0000000000000000, 0x400000000000000, 0xfffffffffffeffff, x3, 9*XLEN/8, x5)

inst_24:
// rs1==x18, rs2==x30, rd==x14, rs2_val == 18446744073709420543, rs1_val == 70368744177664
// opcode: clmulh ; op1:x18; op2:x30; dest:x14; op1val:0x400000000000;  op2val:0xfffffffffffdffff
TEST_RR_OP(clmulh, x14, x18, x30, 0x0000000000000000, 0x400000000000, 0xfffffffffffdffff, x3, 10*XLEN/8, x6)

inst_25:
// rs1==x27, rs2==x8, rd==x17, rs2_val == 18446744073709289471, rs1_val == 16140901064495857663
// opcode: clmulh ; op1:x27; op2:x8; dest:x17; op1val:0xdfffffffffffffff;  op2val:0xfffffffffffbffff
TEST_RR_OP(clmulh, x17, x27, x8, 0x0000000000000000, 0xdfffffffffffffff, 0xfffffffffffbffff, x3, 11*XLEN/8, x6)

inst_26:
// rs1==x11, rs2==x22, rd==x10, rs2_val == 18446744073709027327, rs1_val == 18446739675663040511
// opcode: clmulh ; op1:x11; op2:x22; dest:x10; op1val:0xfffffbffffffffff;  op2val:0xfffffffffff7ffff
TEST_RR_OP(clmulh, x10, x11, x22, 0x0000000000000000, 0xfffffbffffffffff, 0xfffffffffff7ffff, x3, 12*XLEN/8, x6)

inst_27:
// rs1==x5, rs2==x11, rd==x2, rs2_val == 18446744073708503039, 
// opcode: clmulh ; op1:x5; op2:x11; dest:x2; op1val:-0x1000000001;  op2val:0xffffffffffefffff
TEST_RR_OP(clmulh, x2, x5, x11, 0x0000000000000000, -0x1000000001, 0xffffffffffefffff, x3, 13*XLEN/8, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x16, rs2==x5, rd==x20, rs2_val == 18446744073707454463, 
// opcode: clmulh ; op1:x16; op2:x5; dest:x20; op1val:-0x6;  op2val:0xffffffffffdfffff
TEST_RR_OP(clmulh, x20, x16, x5, 0x0000000000000000, -0x6, 0xffffffffffdfffff, x1, 0*XLEN/8, x6)

inst_29:
// rs1==x7, rs2==x31, rd==x15, rs2_val == 18446744073705357311, rs1_val == 18446744072635809791
// opcode: clmulh ; op1:x7; op2:x31; dest:x15; op1val:0xffffffffbfffffff;  op2val:0xffffffffffbfffff
TEST_RR_OP(clmulh, x15, x7, x31, 0x0000000000000000, 0xffffffffbfffffff, 0xffffffffffbfffff, x1, 1*XLEN/8, x6)

inst_30:
// rs1==x21, rs2==x14, rd==x19, rs2_val == 18446744073701163007, rs1_val == 13835058055282163711
// opcode: clmulh ; op1:x21; op2:x14; dest:x19; op1val:0xbfffffffffffffff;  op2val:0xffffffffff7fffff
TEST_RR_OP(clmulh, x19, x21, x14, 0x0000000000000000, 0xbfffffffffffffff, 0xffffffffff7fffff, x1, 2*XLEN/8, x6)

inst_31:
// rs1==x29, rs2==x4, rd==x3, rs2_val == 18446744073692774399, rs1_val == 18446744073709550591
// opcode: clmulh ; op1:x29; op2:x4; dest:x3; op1val:0xfffffffffffffbff;  op2val:0xfffffffffeffffff
TEST_RR_OP(clmulh, x3, x29, x4, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffeffffff, x1, 3*XLEN/8, x6)

inst_32:
// rs2_val == 18446744073642442751, rs1_val == 268435456
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xfffffffffbffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x10000000, 0xfffffffffbffffff, x1, 4*XLEN/8, x6)

inst_33:
// rs2_val == 18446744073575333887, rs1_val == 18446744073709518847
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff7fff;  op2val:0xfffffffff7ffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffff7fff, 0xfffffffff7ffffff, x1, 5*XLEN/8, x6)

inst_34:
// rs2_val == 18446744073441116159, rs1_val == 18446744039349813247
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffff;  op2val:0xffffffffefffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffff, 0xffffffffefffffff, x1, 6*XLEN/8, x6)

inst_35:
// rs2_val == 18446744073172680703, rs1_val == 16
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0xffffffffdfffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x10, 0xffffffffdfffffff, x1, 7*XLEN/8, x6)

inst_36:
// rs2_val == 18446744072635809791, rs1_val == 1099511627776
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000;  op2val:0xffffffffbfffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x10000000000, 0xffffffffbfffffff, x1, 8*XLEN/8, x6)

inst_37:
// rs2_val == 18446744071562067967, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x400000000000001;  op2val:0xffffffff7fffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x400000000000001, 0xffffffff7fffffff, x1, 9*XLEN/8, x6)

inst_38:
// rs2_val == 18446744069414584319, rs1_val == 256
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0xfffffffeffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x100, 0xfffffffeffffffff, x1, 10*XLEN/8, x6)

inst_39:
// rs2_val == 18446744065119617023, rs1_val == 562949953421312
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000;  op2val:0xfffffffdffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x2000000000000, 0xfffffffdffffffff, x1, 11*XLEN/8, x6)

inst_40:
// rs2_val == 18446744056529682431, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x7;  op2val:0xfffffffbffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x7, 0xfffffffbffffffff, x1, 12*XLEN/8, x6)

inst_41:
// rs2_val == 18446744039349813247, rs1_val == 4096
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0xfffffff7ffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1000, 0xfffffff7ffffffff, x1, 13*XLEN/8, x6)

inst_42:
// rs2_val == 18446744004990074879, rs1_val == 2199023255552
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000;  op2val:0xffffffefffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x20000000000, 0xffffffefffffffff, x1, 14*XLEN/8, x6)

inst_43:
// rs2_val == 18446743936270598143, rs1_val == 18446743936270598143
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffff;  op2val:0xffffffdfffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffff, 0xffffffdfffffffff, x1, 15*XLEN/8, x6)

inst_44:
// rs2_val == 18446743798831644671, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000;  op2val:0xffffffbfffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000000, 0xffffffbfffffffff, x1, 16*XLEN/8, x6)

inst_45:
// rs2_val == 18446743523953737727, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x2000000001;  op2val:0xffffff7fffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x2000000001, 0xffffff7fffffffff, x1, 17*XLEN/8, x6)

inst_46:
// rs2_val == 18446742974197923839, rs1_val == 18374686479671623679
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffff;  op2val:0xfffffeffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffff, 0xfffffeffffffffff, x1, 18*XLEN/8, x6)

inst_47:
// rs2_val == 18446741874686296063, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xfffffdffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x0, 0xfffffdffffffffff, x1, 19*XLEN/8, x6)

inst_48:
// rs2_val == 18446739675663040511, rs1_val == 140737488355328
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000;  op2val:0xfffffbffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800000000000, 0xfffffbffffffffff, x1, 20*XLEN/8, x6)

inst_49:
// rs2_val == 18446735277616529407, rs1_val == 1152921504606846976
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:0xfffff7ffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, 0xfffff7ffffffffff, x1, 21*XLEN/8, x6)

inst_50:
// rs2_val == 18446726481523507199, rs1_val == 8388608
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xffffefffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800000, 0xffffefffffffffff, x1, 22*XLEN/8, x6)

inst_51:
// rs2_val == 18446708889337462783, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x4;  op2val:0xffffdfffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x4, 0xffffdfffffffffff, x1, 23*XLEN/8, x6)

inst_52:
// rs2_val == 18446673704965373951, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:0xffffbfffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, 0xffffbfffffffffff, x1, 24*XLEN/8, x6)

inst_53:
// rs2_val == 18446603336221196287, rs1_val == 2048
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0xffff7fffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800, 0xffff7fffffffffff, x1, 25*XLEN/8, x6)

inst_54:
// rs2_val == 18446462598732840959, rs1_val == 67108864
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xfffeffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000, 0xfffeffffffffffff, x1, 26*XLEN/8, x6)

inst_55:
// rs2_val == 18446181123756130303, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xfffdffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xfffdffffffffffff, x1, 27*XLEN/8, x6)

inst_56:
// rs2_val == 18445618173802708991, rs1_val == 8192
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0xfffbffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x2000, 0xfffbffffffffffff, x1, 28*XLEN/8, x6)

inst_57:
// rs2_val == 18444492273895866367, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x1000000000001;  op2val:0xfff7ffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x1000000000001, 0xfff7ffffffffffff, x1, 29*XLEN/8, x6)

inst_58:
// rs2_val == 18442240474082181119, rs1_val == 34359738368
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800000000;  op2val:0xffefffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800000000, 0xffefffffffffffff, x1, 30*XLEN/8, x6)

inst_59:
// rs2_val == 18437736874454810623, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000;  op2val:0xffdfffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800000000000, 0xffdfffffffffffff, x1, 31*XLEN/8, x6)

inst_60:
// rs2_val == 18428729675200069631, rs1_val == 18446462598732840959
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffff;  op2val:0xffbfffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffff, 0xffbfffffffffffff, x1, 32*XLEN/8, x6)

inst_61:
// rs2_val == 18410715276690587647, rs1_val == 18446603336221196287
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffff;  op2val:0xff7fffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffff, 0xff7fffffffffffff, x1, 33*XLEN/8, x6)

inst_62:
// rs2_val == 18374686479671623679, rs1_val == 576460752303423488
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0xfeffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0xfeffffffffffffff, x1, 34*XLEN/8, x6)

inst_63:
// rs2_val == 18302628885633695743, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x200000000001;  op2val:0xfdffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x200000000001, 0xfdffffffffffffff, x1, 35*XLEN/8, x6)

inst_64:
// rs2_val == 18158513697557839871, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffff;  op2val:0xfbffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffff, 0xfbffffffffffffff, x1, 36*XLEN/8, x6)

inst_65:
// rs2_val == 17870283321406128127, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0xf7ffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1000, 0xf7ffffffffffffff, x1, 37*XLEN/8, x6)

inst_66:
// rs2_val == 17293822569102704639, rs1_val == 4194304
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xefffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x400000, 0xefffffffffffffff, x1, 38*XLEN/8, x6)

inst_67:
// rs2_val == 16140901064495857663, rs1_val == 12297829382473034410
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xdfffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xdfffffffffffffff, x1, 39*XLEN/8, x6)

inst_68:
// rs2_val == 13835058055282163711, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xbfffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xbfffffffffffffff, x1, 40*XLEN/8, x6)

inst_69:
// rs2_val == 9223372036854775807, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x80001;  op2val:0x7fffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x80001, 0x7fffffffffffffff, x1, 41*XLEN/8, x6)

inst_70:
// rs1_val == 18446744073709551614, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffe;  op2val:-0x20001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffe, -0x20001, x1, 42*XLEN/8, x6)

inst_71:
// rs1_val == 18446744073709551613, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffd;  op2val:0xffffffff7fffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffd, 0xffffffff7fffffff, x1, 43*XLEN/8, x6)

inst_72:
// rs1_val == 18446744073709551611, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:-0x200000000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffb, -0x200000000000001, x1, 44*XLEN/8, x6)

inst_73:
// rs1_val == 18446744073709551607, rs2_val == 2199023255552
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff7;  op2val:0x20000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff7, 0x20000000000, x1, 45*XLEN/8, x6)

inst_74:
// rs1_val == 18446744073709551599, rs2_val == 17592186044416
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffef;  op2val:0x100000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffef, 0x100000000000, x1, 46*XLEN/8, x6)

inst_75:
// rs1_val == 18446744073709551583, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffdf;  op2val:0xfffffffffffeffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffdf, 0xfffffffffffeffff, x1, 47*XLEN/8, x6)

inst_76:
// rs1_val == 18446744073709551551, rs2_val == 576460752303423488
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf;  op2val:0x800000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffbf, 0x800000000000000, x1, 48*XLEN/8, x6)

inst_77:
// rs1_val == 18446744073709551487, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0xfffffffffffffeff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff7f, 0xfffffffffffffeff, x1, 49*XLEN/8, x6)

inst_78:
// rs1_val == 18446744073709551359, rs2_val == 144115188075855872
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffeff;  op2val:0x200000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffeff, 0x200000000000000, x1, 50*XLEN/8, x6)

inst_79:
// rs1_val == 18446744073709551103, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffdff;  op2val:-0x2000000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffdff, -0x2000000000001, x1, 51*XLEN/8, x6)

inst_80:
// rs1_val == 18446744073709549567, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffff7ff;  op2val:0xffffffffff7fffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffff7ff, 0xffffffffff7fffff, x1, 52*XLEN/8, x6)

inst_81:
// rs1_val == 18446744073709547519, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffefff;  op2val:0xfffffffffffffeff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffffefff, 0xfffffffffffffeff, x1, 53*XLEN/8, x6)

inst_82:
// rs1_val == 18446744073709543423, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffdfff;  op2val:-0x20000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffffdfff, -0x20000000001, x1, 54*XLEN/8, x6)

inst_83:
// rs1_val == 18446744073709486079, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:-0x20000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, -0x20000000001, x1, 55*XLEN/8, x6)

inst_84:
// rs1_val == 18446744073709420543, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffdffff;  op2val:0xffffffffffffff7f
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffdffff, 0xffffffffffffff7f, x1, 56*XLEN/8, x6)

inst_85:
// rs1_val == 18446744073709289471, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffbffff;  op2val:-0x400000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffbffff, -0x400000000001, x1, 57*XLEN/8, x6)

inst_86:
// rs1_val == 18446744073709027327, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff7ffff;  op2val:0x100000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffff7ffff, 0x100000000000, x1, 58*XLEN/8, x6)

inst_87:
// rs1_val == 18446744073708503039, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffefffff;  op2val:-0x4
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffefffff, -0x4, x1, 59*XLEN/8, x6)

inst_88:
// rs1_val == 18446744073707454463, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffdfffff;  op2val:-0x2000000000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffdfffff, -0x2000000000000001, x1, 60*XLEN/8, x6)

inst_89:
// rs1_val == 18446744073705357311, rs2_val == 1073741824
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff;  op2val:0x40000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffffbfffff, 0x40000000, x1, 61*XLEN/8, x6)

inst_90:
// rs1_val == 18446744073701163007, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7fffff;  op2val:-0x1000000000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffff7fffff, -0x1000000000000001, x1, 62*XLEN/8, x6)

inst_91:
// rs1_val == 18446744073692774399, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffeffffff;  op2val:0xffffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffeffffff, 0xffffffffffffffff, x1, 63*XLEN/8, x6)

inst_92:
// rs1_val == 18446744073675997183, rs2_val == 65536
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffdffffff;  op2val:0x10000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffdffffff, 0x10000, x1, 64*XLEN/8, x6)

inst_93:
// rs1_val == 18446744073642442751, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffbffffff;  op2val:0xffffffdfffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffbffffff, 0xffffffdfffffffff, x1, 65*XLEN/8, x6)

inst_94:
// rs1_val == 18446744073575333887, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:-0x8000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffff7ffffff, -0x8000000000000000, x1, 66*XLEN/8, x6)

inst_95:
// rs1_val == 18446744073441116159, rs2_val == 4194304
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffefffffff;  op2val:0x400000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffefffffff, 0x400000, x1, 67*XLEN/8, x6)

inst_96:
// rs1_val == 18446744073172680703, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffdfffffff;  op2val:-0x401
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffdfffffff, -0x401, x1, 68*XLEN/8, x6)

inst_97:
// rs1_val == 18446744071562067967, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:-0x9
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, -0x9, x1, 69*XLEN/8, x6)

inst_98:
// rs1_val == 18446744069414584319, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:-0x80001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, -0x80001, x1, 70*XLEN/8, x6)

inst_99:
// rs1_val == 18446744065119617023, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffff;  op2val:-0x200000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffffff, -0x200000001, x1, 71*XLEN/8, x6)

inst_100:
// rs1_val == 18446744056529682431, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0x10000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffff, 0x10000, x1, 72*XLEN/8, x6)

inst_101:
// rs1_val == 18446744004990074879, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffff;  op2val:-0x4000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffff, -0x4000000000000000, x1, 73*XLEN/8, x6)

inst_102:
// rs1_val == 18446743798831644671, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffffff;  op2val:-0x40001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffff, -0x40001, x1, 74*XLEN/8, x6)

inst_103:
// rs1_val == 18446742974197923839, rs2_val == 288230376151711744
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffff;  op2val:0x400000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffff, 0x400000000000000, x1, 75*XLEN/8, x6)

inst_104:
// rs1_val == 18446741874686296063, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0xffffffefffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffff, 0xffffffefffffffff, x1, 76*XLEN/8, x6)

inst_105:
// rs1_val == 18446735277616529407, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffff;  op2val:0xffffffdfffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffff, 0xffffffdfffffffff, x1, 77*XLEN/8, x6)

inst_106:
// rs1_val == 18446726481523507199, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:-0x40001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, -0x40001, x1, 78*XLEN/8, x6)

inst_107:
// rs1_val == 18446708889337462783, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0xf
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffff, 0xf, x1, 79*XLEN/8, x6)

inst_108:
// rs1_val == 18446673704965373951, rs2_val == 8796093022208
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0x80000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffff, 0x80000000000, x1, 80*XLEN/8, x6)

inst_109:
// rs1_val == 144115188075855872, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000;  op2val:-0x9
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x200000000000000, -0x9, x1, 81*XLEN/8, x6)

inst_110:
// rs1_val == 2305843009213693952, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:0x400000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0x400000, x1, 82*XLEN/8, x6)

inst_111:
// rs1_val == 4611686018427387904, rs2_val == 549755813888
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x8000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x8000000000, x1, 83*XLEN/8, x6)

inst_112:
// rs1_val == 9223372036854775808, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000;  op2val:0x5
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x8000000000000000, 0x5, x1, 84*XLEN/8, x6)

inst_113:
// rs1_val == 0x75a3adb3254a9493 and rs2_val == 0xc5521660f3a3c571 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x75a3adb3254a9493;  op2val:0xc5521660f3a3c571
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x75a3adb3254a9493, 0xc5521660f3a3c571, x1, 85*XLEN/8, x6)

inst_114:
// rs1_val == 0x436f40f274b8de87 and rs2_val == 0x3459294ef273b44c 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x436f40f274b8de87;  op2val:0x3459294ef273b44c
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x436f40f274b8de87, 0x3459294ef273b44c, x1, 86*XLEN/8, x6)

inst_115:
// rs1_val == 0xfcc1b543c49cd65b and rs2_val == 0x2daf9ac7f5faf207 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfcc1b543c49cd65b;  op2val:0x2daf9ac7f5faf207
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfcc1b543c49cd65b, 0x2daf9ac7f5faf207, x1, 87*XLEN/8, x6)

inst_116:
// rs1_val == 0xe4921bf73047c198 and rs2_val == 0xa0569d765ebc64cb 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xe4921bf73047c198;  op2val:0xa0569d765ebc64cb
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xe4921bf73047c198, 0xa0569d765ebc64cb, x1, 88*XLEN/8, x6)

inst_117:
// rs1_val == 0xd5b9fe5cf69bdcf3 and rs2_val == 0xf4c30307672f666d 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xd5b9fe5cf69bdcf3;  op2val:0xf4c30307672f666d
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xd5b9fe5cf69bdcf3, 0xf4c30307672f666d, x1, 89*XLEN/8, x6)

inst_118:
// rs1_val == 0xd169a3f8cad5e297 and rs2_val == 0x1fc493caa371db42 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xd169a3f8cad5e297;  op2val:0x1fc493caa371db42
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xd169a3f8cad5e297, 0x1fc493caa371db42, x1, 90*XLEN/8, x6)

inst_119:
// rs1_val == 0x9a4e9ef10171f4df and rs2_val == 0x299c3bcf90efb625 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x9a4e9ef10171f4df;  op2val:0x299c3bcf90efb625
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x9a4e9ef10171f4df, 0x299c3bcf90efb625, x1, 91*XLEN/8, x6)

inst_120:
// rs1_val == 0xd75739f82ac177c6 and rs2_val == 0xaa6bb2bde9ed477d 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xd75739f82ac177c6;  op2val:0xaa6bb2bde9ed477d
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xd75739f82ac177c6, 0xaa6bb2bde9ed477d, x1, 92*XLEN/8, x6)

inst_121:
// rs1_val == 0x9bedfe390d6ddd9d and rs2_val == 0xd05668ae0fdb82bc 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x9bedfe390d6ddd9d;  op2val:0xd05668ae0fdb82bc
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x9bedfe390d6ddd9d, 0xd05668ae0fdb82bc, x1, 93*XLEN/8, x6)

inst_122:
// rs1_val == 0x40a5ff526f38a9c7 and rs2_val == 0xb6f9706fb4f741aa 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x40a5ff526f38a9c7;  op2val:0xb6f9706fb4f741aa
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x40a5ff526f38a9c7, 0xb6f9706fb4f741aa, x1, 94*XLEN/8, x6)

inst_123:
// rs1_val == 0x4113ee60952acffe and rs2_val == 0x53a66ed1dc80d916 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4113ee60952acffe;  op2val:0x53a66ed1dc80d916
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4113ee60952acffe, 0x53a66ed1dc80d916, x1, 95*XLEN/8, x6)

inst_124:
// rs1_val == 0xc0fe15dd0df9564b and rs2_val == 0xb22bbf7eb4c858fb 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xc0fe15dd0df9564b;  op2val:0xb22bbf7eb4c858fb
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xc0fe15dd0df9564b, 0xb22bbf7eb4c858fb, x1, 96*XLEN/8, x6)

inst_125:
// rs1_val == 0xe2eaf4a09869be8c and rs2_val == 0x5b730cad91766f62 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xe2eaf4a09869be8c;  op2val:0x5b730cad91766f62
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xe2eaf4a09869be8c, 0x5b730cad91766f62, x1, 97*XLEN/8, x6)

inst_126:
// rs1_val == 0x79bb7c341d3110bc and rs2_val == 0x8678f5e3d272e229 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x79bb7c341d3110bc;  op2val:0x8678f5e3d272e229
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x79bb7c341d3110bc, 0x8678f5e3d272e229, x1, 98*XLEN/8, x6)

inst_127:
// rs1_val == 0x987daa20b858e304 and rs2_val == 0x1aa1beebefb902cb 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x987daa20b858e304;  op2val:0x1aa1beebefb902cb
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x987daa20b858e304, 0x1aa1beebefb902cb, x1, 99*XLEN/8, x6)

inst_128:
// rs1_val == 0xb694de26ad9e5431 and rs2_val == 0x293f9f6071fad878 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xb694de26ad9e5431;  op2val:0x293f9f6071fad878
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xb694de26ad9e5431, 0x293f9f6071fad878, x1, 100*XLEN/8, x6)

inst_129:
// rs1_val == 0xef1d54db32b81f27 and rs2_val == 0x1826a804284fe16c 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xef1d54db32b81f27;  op2val:0x1826a804284fe16c
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xef1d54db32b81f27, 0x1826a804284fe16c, x1, 101*XLEN/8, x6)

inst_130:
// rs1_val == 0x1f7d946f17168ab3 and rs2_val == 0x66eae3d9bbb4f560 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1f7d946f17168ab3;  op2val:0x66eae3d9bbb4f560
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1f7d946f17168ab3, 0x66eae3d9bbb4f560, x1, 102*XLEN/8, x6)

inst_131:
// rs1_val == 0x6d23c0488a6019c1 and rs2_val == 0x860bdaad7447a088 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x6d23c0488a6019c1;  op2val:0x860bdaad7447a088
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x6d23c0488a6019c1, 0x860bdaad7447a088, x1, 103*XLEN/8, x6)

inst_132:
// rs1_val == 0x6af29145404fd8ed and rs2_val == 0x990e75eafff569c2 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x6af29145404fd8ed;  op2val:0x990e75eafff569c2
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x6af29145404fd8ed, 0x990e75eafff569c2, x1, 104*XLEN/8, x6)

inst_133:
// rs2_val == 6148914691236517205, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:0x5555555555555555
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffb, 0x5555555555555555, x1, 105*XLEN/8, x6)

inst_134:
// rs2_val == 12297829382473034410, rs1_val == 18445618173802708991
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffff, 0xaaaaaaaaaaaaaaaa, x1, 106*XLEN/8, x6)

inst_135:
// rs1_val == 18446181123756130303, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffff;  op2val:-0x4000000000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffff, -0x4000000000000001, x1, 107*XLEN/8, x6)

inst_136:
// rs1_val == 18444492273895866367, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff;  op2val:0x7fffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffff, 0x7fffffffffffffff, x1, 108*XLEN/8, x6)

inst_137:
// rs1_val == 18442240474082181119, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffff;  op2val:-0x1000000000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffff, -0x1000000000000001, x1, 109*XLEN/8, x6)

inst_138:
// rs1_val == 18437736874454810623, rs2_val == 35184372088832
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffff;  op2val:0x200000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffff, 0x200000000000, x1, 110*XLEN/8, x6)

inst_139:
// rs1_val == 18428729675200069631, rs2_val == 36028797018963968
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffff;  op2val:0x80000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffff, 0x80000000000000, x1, 111*XLEN/8, x6)

inst_140:
// rs1_val == 18410715276690587647, rs2_val == 274877906944
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffff;  op2val:0x4000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffff, 0x4000000000, x1, 112*XLEN/8, x6)

inst_141:
// rs1_val == 18302628885633695743, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffff;  op2val:0xffffffff7fffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffff, 0xffffffff7fffffff, x1, 113*XLEN/8, x6)

inst_142:
// rs1_val == 18158513697557839871, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffff;  op2val:-0x100000000000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffff, -0x100000000000001, x1, 114*XLEN/8, x6)

inst_143:
// rs1_val == 17870283321406128127, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0xffffffffffffff7f
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffff, 0xffffffffffffff7f, x1, 115*XLEN/8, x6)

inst_144:
// rs1_val == 17293822569102704639, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffff;  op2val:0xfffdffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffff, 0xfffdffffffffffff, x1, 116*XLEN/8, x6)

inst_145:
// rs1_val == 9223372036854775807, rs2_val == 128
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0x80
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0x80, x1, 117*XLEN/8, x6)

inst_146:
// rs2_val == 2, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x2
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x2, x1, 118*XLEN/8, x6)

inst_147:
// rs2_val == 4, rs1_val == 549755813888
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000;  op2val:0x4
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x8000000000, 0x4, x1, 119*XLEN/8, x6)

inst_148:
// rs2_val == 8, rs1_val == 35184372088832
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000;  op2val:0x8
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x200000000000, 0x8, x1, 120*XLEN/8, x6)

inst_149:
// rs2_val == 16, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x10000000000001;  op2val:0x10
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x10000000000001, 0x10, x1, 121*XLEN/8, x6)

inst_150:
// rs2_val == 32, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x100000000001;  op2val:0x20
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x100000000001, 0x20, x1, 122*XLEN/8, x6)

inst_151:
// rs2_val == 64, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffefffffff;  op2val:0x40
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffffefffffff, 0x40, x1, 123*XLEN/8, x6)

inst_152:
// rs2_val == 256, rs1_val == 16384
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x100
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000, 0x100, x1, 124*XLEN/8, x6)

inst_153:
// rs2_val == 512, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0x200
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0x200, x1, 125*XLEN/8, x6)

inst_154:
// rs2_val == 1024, rs1_val == 137438953472
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000;  op2val:0x400
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x2000000000, 0x400, x1, 126*XLEN/8, x6)

inst_155:
// rs2_val == 2048, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x20000000000001;  op2val:0x800
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x20000000000001, 0x800, x1, 127*XLEN/8, x6)

inst_156:
// rs2_val == 8192, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x2000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x2000, x1, 128*XLEN/8, x6)

inst_157:
// rs2_val == 16384, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000;  op2val:0x4000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000000, 0x4000, x1, 129*XLEN/8, x6)

inst_158:
// rs2_val == 32768, rs1_val == 36028797018963968
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000;  op2val:0x8000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x80000000000000, 0x8000, x1, 130*XLEN/8, x6)

inst_159:
// rs2_val == 131072, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x8000000000000000;  op2val:0x20000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x8000000000000000, 0x20000, x1, 131*XLEN/8, x6)

inst_160:
// rs2_val == 262144, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0x40000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, 0x40000, x1, 132*XLEN/8, x6)

inst_161:
// rs2_val == 524288, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x80000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x0, 0x80000, x1, 133*XLEN/8, x6)

inst_162:
// rs2_val == 1048576, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x11;  op2val:0x100000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x11, 0x100000, x1, 134*XLEN/8, x6)

inst_163:
// rs2_val == 2097152, rs1_val == 536870912
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0x200000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x20000000, 0x200000, x1, 135*XLEN/8, x6)

inst_164:
// rs2_val == 8388608, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xf;  op2val:0x800000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xf, 0x800000, x1, 136*XLEN/8, x6)

inst_165:
// rs2_val == 16777216, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x400000000001;  op2val:0x1000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x400000000001, 0x1000000, x1, 137*XLEN/8, x6)

inst_166:
// rs2_val == 33554432, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x2000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x0, 0x2000000, x1, 138*XLEN/8, x6)

inst_167:
// rs2_val == 67108864, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0x4000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x400, 0x4000000, x1, 139*XLEN/8, x6)

inst_168:
// rs2_val == 134217728, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0x8000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0x8000000, x1, 140*XLEN/8, x6)

inst_169:
// rs2_val == 268435456, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0x10000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, 0x10000000, x1, 141*XLEN/8, x6)

inst_170:
// rs2_val == 536870912, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x200001;  op2val:0x20000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x200001, 0x20000000, x1, 142*XLEN/8, x6)

inst_171:
// rs2_val == 2147483648, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0xa;  op2val:0x80000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0xa, 0x80000000, x1, 143*XLEN/8, x6)

inst_172:
// rs2_val == 4294967296, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffff;  op2val:0x100000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffff, 0x100000000, x1, 144*XLEN/8, x6)

inst_173:
// rs2_val == 8589934592, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x80001;  op2val:0x200000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x80001, 0x200000000, x1, 145*XLEN/8, x6)

inst_174:
// rs2_val == 17179869184, rs1_val == 64
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0x400000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x40, 0x400000000, x1, 146*XLEN/8, x6)

inst_175:
// rs2_val == 34359738368, rs1_val == 8796093022208
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000;  op2val:0x800000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x80000000000, 0x800000000, x1, 147*XLEN/8, x6)

inst_176:
// rs2_val == 68719476736, rs1_val == 131072
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0x1000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x20000, 0x1000000000, x1, 148*XLEN/8, x6)

inst_177:
// rs2_val == 137438953472, rs1_val == 1125899906842624
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000;  op2val:0x2000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000000000, 0x2000000000, x1, 149*XLEN/8, x6)

inst_178:
// rs2_val == 1099511627776, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x10000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x10000000000, x1, 150*XLEN/8, x6)

inst_179:
// rs2_val == 4398046511104, rs1_val == 33554432
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x40000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x2000000, 0x40000000000, x1, 151*XLEN/8, x6)

inst_180:
// rs2_val == 70368744177664, rs1_val == 4
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x400000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4, 0x400000000000, x1, 152*XLEN/8, x6)

inst_181:
// rs2_val == 140737488355328, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0x800000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0x800000000000, x1, 153*XLEN/8, x6)

inst_182:
// rs2_val == 281474976710656, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xb;  op2val:0x1000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xb, 0x1000000000000, x1, 154*XLEN/8, x6)

inst_183:
// rs2_val == 562949953421312, rs1_val == 18014398509481984
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000;  op2val:0x2000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x40000000000000, 0x2000000000000, x1, 155*XLEN/8, x6)

inst_184:
// rs2_val == 1125899906842624, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:-0x2001;  op2val:0x4000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, -0x2001, 0x4000000000000, x1, 156*XLEN/8, x6)

inst_185:
// rs2_val == 1152921504606846976, rs1_val == 17592186044416
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000;  op2val:0x1000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x100000000000, 0x1000000000000000, x1, 157*XLEN/8, x6)

inst_186:
// rs2_val == 72057594037927936, rs1_val == 281474976710656
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000;  op2val:0x100000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1000000000000, 0x100000000000000, x1, 158*XLEN/8, x6)

inst_187:
// rs2_val == 2305843009213693952, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0x2000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffff, 0x2000000000000000, x1, 159*XLEN/8, x6)

inst_188:
// rs2_val == 4611686018427387904, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffdffffff;  op2val:0x4000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffffdffffff, 0x4000000000000000, x1, 160*XLEN/8, x6)

inst_189:
// rs2_val == 9223372036854775808, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0x8000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, 0x8000000000000000, x1, 161*XLEN/8, x6)

inst_190:
// rs1_val == 2, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xffdfffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x2, 0xffdfffffffffffff, x1, 162*XLEN/8, x6)

inst_191:
// rs1_val == 8, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0x80000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x8, 0x80000000, x1, 163*XLEN/8, x6)

inst_192:
// rs1_val == 32, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0x1000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x20, 0x1000000, x1, 164*XLEN/8, x6)

inst_193:
// rs1_val == 128, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0x400000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x80, 0x400000, x1, 165*XLEN/8, x6)

inst_194:
// rs1_val == 512, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0xfeffffffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x200, 0xfeffffffffffffff, x1, 166*XLEN/8, x6)

inst_195:
// rs1_val == 65536, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:-0x20001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x10000, -0x20001, x1, 167*XLEN/8, x6)

inst_196:
// rs1_val == 262144, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0xffffffffffdfffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x40000, 0xffffffffffdfffff, x1, 168*XLEN/8, x6)

inst_197:
// rs1_val == 1048576, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0x20000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x100000, 0x20000000, x1, 169*XLEN/8, x6)

inst_198:
// rs1_val == 2097152, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0x800000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x200000, 0x800000000, x1, 170*XLEN/8, x6)

inst_199:
// rs1_val == 134217728, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xffffffdfffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x8000000, 0xffffffdfffffffff, x1, 171*XLEN/8, x6)

inst_200:
// rs1_val == 16777216, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0x1000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1000000, 0x1000000000000000, x1, 172*XLEN/8, x6)

inst_201:
// rs1_val == 1073741824, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x8000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x40000000, 0x8000000000000000, x1, 173*XLEN/8, x6)

inst_202:
// rs1_val == 2147483648, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0x4000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x80000000, 0x4000000000, x1, 174*XLEN/8, x6)

inst_203:
// rs1_val == 4294967296, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x2000000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x100000000, 0x2000000000000000, x1, 175*XLEN/8, x6)

inst_204:
// rs2_val == 2251799813685248, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0x8000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffff, 0x8000000000000, x1, 176*XLEN/8, x6)

inst_205:
// rs1_val == 17179869184, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x400000000;  op2val:-0x8000001
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x400000000, -0x8000001, x1, 177*XLEN/8, x6)

inst_206:
// rs1_val == 68719476736, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000;  op2val:0x200000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1000000000, 0x200000000000, x1, 178*XLEN/8, x6)

inst_207:
// rs1_val == 4398046511104, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000;  op2val:0xffffffbfffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x40000000000, 0xffffffbfffffffff, x1, 179*XLEN/8, x6)

inst_208:
// rs1_val == 4503599627370496, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000000;  op2val:0xfffffffffffffdff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x10000000000000, 0xfffffffffffffdff, x1, 180*XLEN/8, x6)

inst_209:
// rs1_val == 2251799813685248, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000;  op2val:0x8000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x8000000000000, 0x8000000000000, x1, 181*XLEN/8, x6)

inst_210:
// rs2_val == 4503599627370496, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0x10000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x4000000, 0x10000000000000, x1, 182*XLEN/8, x6)

inst_211:
// rs2_val == 9007199254740992, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000;  op2val:0x20000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x80000000000000, 0x20000000000000, x1, 183*XLEN/8, x6)

inst_212:
// rs2_val == 18014398509481984, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000;  op2val:0x40000000000000
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x80000000000000, 0x40000000000000, x1, 184*XLEN/8, x6)

inst_213:
// rs1_val == 72057594037927936, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000;  op2val:0xfffffdffffffffff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x100000000000000, 0xfffffdffffffffff, x1, 185*XLEN/8, x6)

inst_214:
// rs1_val==0 and rs2_val==0, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x0, 0x0, x1, 186*XLEN/8, x6)

inst_215:
// rs1_val==1 and rs2_val==0, rs1_val == 1
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1, 0x0, x1, 187*XLEN/8, x6)

inst_216:
// rs1_val==1 and rs2_val==1, 
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x1, 0x1, x1, 188*XLEN/8, x6)

inst_217:
// rs2_val == 18446744073709551551, rs1_val == 18446743523953737727
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffff;  op2val:0xffffffffffffffbf
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffff, 0xffffffffffffffbf, x1, 189*XLEN/8, x6)

inst_218:
// rs2_val == 18446744073709549567, rs1_val == 32768
// opcode: clmulh ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0xfffffffffffff7ff
TEST_RR_OP(clmulh, x31, x30, x29, 0x0000000000000000, 0x8000, 0xfffffffffffff7ff, x1, 190*XLEN/8, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x4_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x4_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x3_0:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 191*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
