
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sun Jan 14 18:32:27 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv64i_b.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rolw instruction of the RISC-V RV64Zbb,RV64Zbkb,RV64Zk,RV64Zkn,RV64Zks,RV64B extension for the rolw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZbb,RV64IZbkb,RV64IZk,RV64IZkn,RV64IZks,RV64IB")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*RV64.*I.*B.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(1,"//check ISA:=regex(.*RV64.*I.*Zbb.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(2,"//check ISA:=regex(.*RV64.*I.*Zbkb.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(3,"//check ISA:=regex(.*RV64.*I.*Zk.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(4,"//check ISA:=regex(.*RV64.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(5,"//check ISA:=regex(.*RV64.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x14, rs1_val == 0xFFFFFFFFFFFFFFFF and rs2_val == 0x34C2DA8003CC0F27 
// opcode: rolw ; op1:x3; op2:x3; dest:x14; op1val:0xffffffffffffffff;  op2val:0xffffffffffffffff
TEST_RR_OP(rolw, x14, x3, x3, 0x0000000000000000, 0xffffffffffffffff, 0xffffffffffffffff, x7, 0*XLEN/8, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x14, rd==x9, rs1_val == 0xFFFFFFFFFFFFFFFE and rs2_val == 0x2904CDEFCF84B683 
// opcode: rolw ; op1:x31; op2:x14; dest:x9; op1val:0xfffffffffffffffe;  op2val:0x2904cdefcf84b683
TEST_RR_OP(rolw, x9, x31, x14, 0x0000000000000000, 0xfffffffffffffffe, 0x2904cdefcf84b683, x7, 1*XLEN/8, x11)

inst_2:
// rs2 == rd != rs1, rs1==x26, rs2==x24, rd==x24, rs1_val == 0xFFFFFFFFFFFFFFFC and rs2_val == 0x137A977753E8EB43 
// opcode: rolw ; op1:x26; op2:x24; dest:x24; op1val:0xfffffffffffffffc;  op2val:0x137a977753e8eb43
TEST_RR_OP(rolw, x24, x26, x24, 0x0000000000000000, 0xfffffffffffffffc, 0x137a977753e8eb43, x7, 2*XLEN/8, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_val == 0xFFFFFFFFFFFFFFFB and rs2_val == 0xFF1E5BEFBEDC25E6 
// opcode: rolw ; op1:x1; op2:x1; dest:x1; op1val:0xfffffffffffffffb;  op2val:0xfffffffffffffffb
TEST_RR_OP(rolw, x1, x1, x1, 0x0000000000000000, 0xfffffffffffffffb, 0xfffffffffffffffb, x7, 3*XLEN/8, x11)

inst_4:
// rs1 == rd != rs2, rs1==x2, rs2==x31, rd==x2, rs1_val == 0xFFFFFFFFFFFFFFF5 and rs2_val == 0x61B0EE095AE6A228 
// opcode: rolw ; op1:x2; op2:x31; dest:x2; op1val:0xfffffffffffffff5;  op2val:0x61b0ee095ae6a228
TEST_RR_OP(rolw, x2, x2, x31, 0x0000000000000000, 0xfffffffffffffff5, 0x61b0ee095ae6a228, x7, 4*XLEN/8, x11)

inst_5:
// rs1==x8, rs2==x21, rd==x30, rs1_val == 0xFFFFFFFFFFFFFFE0 and rs2_val == 0x432779EEACCA7F0D 
// opcode: rolw ; op1:x8; op2:x21; dest:x30; op1val:0xffffffffffffffe0;  op2val:0x432779eeacca7f0d
TEST_RR_OP(rolw, x30, x8, x21, 0x0000000000000000, 0xffffffffffffffe0, 0x432779eeacca7f0d, x7, 5*XLEN/8, x11)

inst_6:
// rs1==x21, rs2==x20, rd==x12, rs1_val == 0xFFFFFFFFFFFFFFCD and rs2_val == 0xA96EC2B34D984BFF 
// opcode: rolw ; op1:x21; op2:x20; dest:x12; op1val:0xffffffffffffffcd;  op2val:0xa96ec2b34d984bff
TEST_RR_OP(rolw, x12, x21, x20, 0x0000000000000000, 0xffffffffffffffcd, 0xa96ec2b34d984bff, x7, 6*XLEN/8, x11)

inst_7:
// rs1==x17, rs2==x27, rd==x0, rs1_val == 0x44DCDA6A797D76DF and rs2_val == 0x248174E5598B88DB 
// opcode: rolw ; op1:x17; op2:x27; dest:x0; op1val:0x44dcda6a797d76df;  op2val:0x248174e5598b88db
TEST_RR_OP(rolw, x0, x17, x27, 0x0000000000000000, 0x44dcda6a797d76df, 0x248174e5598b88db, x7, 7*XLEN/8, x11)

inst_8:
// rs1==x13, rs2==x29, rd==x16, rs1_val == 0xFE4544F6058F7FE6 and rs2_val == 0x7B87A9E25FEFE911 
// opcode: rolw ; op1:x13; op2:x29; dest:x16; op1val:0xfe4544f6058f7fe6;  op2val:0x7b87a9e25fefe911
TEST_RR_OP(rolw, x16, x13, x29, 0x0000000000000000, 0xfe4544f6058f7fe6, 0x7b87a9e25fefe911, x7, 8*XLEN/8, x11)

inst_9:
// rs1==x5, rs2==x15, rd==x10, rs1_val == 0x3DCBE16292D9BE34 and rs2_val == 0xFA60DBD625329041 
// opcode: rolw ; op1:x5; op2:x15; dest:x10; op1val:0x3dcbe16292d9be34;  op2val:0xfa60dbd625329041
TEST_RR_OP(rolw, x10, x5, x15, 0x0000000000000000, 0x3dcbe16292d9be34, 0xfa60dbd625329041, x7, 9*XLEN/8, x11)

inst_10:
// rs1==x15, rs2==x18, rd==x5, rs1_val == 0x4C52CFC2F0F54BC8 and rs2_val == 0xE7EDD86756F547AB 
// opcode: rolw ; op1:x15; op2:x18; dest:x5; op1val:0x4c52cfc2f0f54bc8;  op2val:0xe7edd86756f547ab
TEST_RR_OP(rolw, x5, x15, x18, 0x0000000000000000, 0x4c52cfc2f0f54bc8, 0xe7edd86756f547ab, x7, 10*XLEN/8, x11)

inst_11:
// rs1==x9, rs2==x4, rd==x6, rs1_val == 0x382CC710F0F1C6B0 and rs2_val == 0x331B2FB3D19E3224 
// opcode: rolw ; op1:x9; op2:x4; dest:x6; op1val:0x382cc710f0f1c6b0;  op2val:0x331b2fb3d19e3224
TEST_RR_OP(rolw, x6, x9, x4, 0x0000000000000000, 0x382cc710f0f1c6b0, 0x331b2fb3d19e3224, x7, 11*XLEN/8, x11)

inst_12:
// rs1==x0, rs2==x2, rd==x23, rs1_val == 0xFB7523B06EC13320 and rs2_val == 0x8248F803A97BCC25 
// opcode: rolw ; op1:x0; op2:x2; dest:x23; op1val:0x0;  op2val:0x8248f803a97bcc25
TEST_RR_OP(rolw, x23, x0, x2, 0x0000000000000000, 0x0, 0x8248f803a97bcc25, x7, 12*XLEN/8, x11)

inst_13:
// rs1==x10, rs2==x30, rd==x3, rs1_val == 0x532E2CC5D2955440 and rs2_val == 0xF8A885186C5744BC 
// opcode: rolw ; op1:x10; op2:x30; dest:x3; op1val:0x532e2cc5d2955440;  op2val:0xf8a885186c5744bc
TEST_RR_OP(rolw, x3, x10, x30, 0x0000000000000000, 0x532e2cc5d2955440, 0xf8a885186c5744bc, x7, 13*XLEN/8, x2)

inst_14:
// rs1==x12, rs2==x19, rd==x28, rs1_val == 0x01555A450E079180 and rs2_val == 0x8A88C0676273ED06 
// opcode: rolw ; op1:x12; op2:x19; dest:x28; op1val:0x1555a450e079180;  op2val:0x8a88c0676273ed06
TEST_RR_OP(rolw, x28, x12, x19, 0x0000000000000000, 0x1555a450e079180, 0x8a88c0676273ed06, x7, 14*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x27, rs2==x13, rd==x26, rs1_val == 0xF09825A406BF0D00 and rs2_val == 0xF7AB62A81529755D 
// opcode: rolw ; op1:x27; op2:x13; dest:x26; op1val:0xf09825a406bf0d00;  op2val:0xf7ab62a81529755d
TEST_RR_OP(rolw, x26, x27, x13, 0x0000000000000000, 0xf09825a406bf0d00, 0xf7ab62a81529755d, x1, 0*XLEN/8, x2)

inst_16:
// rs1==x28, rs2==x7, rd==x29, rs1_val == 0x19B3BFF3DE167A00 and rs2_val == 0x42F5D75EA9E16E27 
// opcode: rolw ; op1:x28; op2:x7; dest:x29; op1val:0x19b3bff3de167a00;  op2val:0x42f5d75ea9e16e27
TEST_RR_OP(rolw, x29, x28, x7, 0x0000000000000000, 0x19b3bff3de167a00, 0x42f5d75ea9e16e27, x1, 1*XLEN/8, x2)

inst_17:
// rs1==x29, rs2==x23, rd==x21, rs1_val == 0xD7F893C3AC86AC00 and rs2_val == 0xB0AB577ADDBAD0B1 
// opcode: rolw ; op1:x29; op2:x23; dest:x21; op1val:0xd7f893c3ac86ac00;  op2val:0xb0ab577addbad0b1
TEST_RR_OP(rolw, x21, x29, x23, 0x0000000000000000, 0xd7f893c3ac86ac00, 0xb0ab577addbad0b1, x1, 2*XLEN/8, x2)

inst_18:
// rs1==x30, rs2==x9, rd==x13, rs1_val == 0xAE39ED63E301E800 and rs2_val == 0x409BD3051D241ED6 
// opcode: rolw ; op1:x30; op2:x9; dest:x13; op1val:0xae39ed63e301e800;  op2val:0x409bd3051d241ed6
TEST_RR_OP(rolw, x13, x30, x9, 0x0000000000000000, 0xae39ed63e301e800, 0x409bd3051d241ed6, x1, 3*XLEN/8, x2)

inst_19:
// rs1==x16, rs2==x10, rd==x22, rs1_val == 0x2B20055D1CE93000 and rs2_val == 0x073465B82DEDB6A7 
// opcode: rolw ; op1:x16; op2:x10; dest:x22; op1val:0x2b20055d1ce93000;  op2val:0x73465b82dedb6a7
TEST_RR_OP(rolw, x22, x16, x10, 0x0000000000000000, 0x2b20055d1ce93000, 0x73465b82dedb6a7, x1, 4*XLEN/8, x2)

inst_20:
// rs1==x7, rs2==x25, rd==x31, rs1_val == 0x9C9D5A527952A000 and rs2_val == 0x0B21BBBA6D5FCD18 
// opcode: rolw ; op1:x7; op2:x25; dest:x31; op1val:0x9c9d5a527952a000;  op2val:0xb21bbba6d5fcd18
TEST_RR_OP(rolw, x31, x7, x25, 0x0000000000000000, 0x9c9d5a527952a000, 0xb21bbba6d5fcd18, x1, 5*XLEN/8, x2)

inst_21:
// rs1==x23, rs2==x5, rd==x4, rs1_val == 0x1D2ACD14F9C74000 and rs2_val == 0x387BE8B88CCAEC71 
// opcode: rolw ; op1:x23; op2:x5; dest:x4; op1val:0x1d2acd14f9c74000;  op2val:0x387be8b88ccaec71
TEST_RR_OP(rolw, x4, x23, x5, 0x0000000000000000, 0x1d2acd14f9c74000, 0x387be8b88ccaec71, x1, 6*XLEN/8, x2)

inst_22:
// rs1==x22, rs2==x12, rd==x20, rs1_val == 0x1AE589FB47F98000 and rs2_val == 0x096EBEC44616E73D 
// opcode: rolw ; op1:x22; op2:x12; dest:x20; op1val:0x1ae589fb47f98000;  op2val:0x96ebec44616e73d
TEST_RR_OP(rolw, x20, x22, x12, 0x0000000000000000, 0x1ae589fb47f98000, 0x96ebec44616e73d, x1, 7*XLEN/8, x2)

inst_23:
// rs1==x14, rs2==x28, rd==x17, rs1_val == 0x925C46CBD3570000 and rs2_val == 0x5E4945ED75923260 
// opcode: rolw ; op1:x14; op2:x28; dest:x17; op1val:0x925c46cbd3570000;  op2val:0x5e4945ed75923260
TEST_RR_OP(rolw, x17, x14, x28, 0x0000000000000000, 0x925c46cbd3570000, 0x5e4945ed75923260, x1, 8*XLEN/8, x2)

inst_24:
// rs1==x24, rs2==x11, rd==x19, rs1_val == 0xA544ADE7DDE60000 and rs2_val == 0xDB04A838F57083EF 
// opcode: rolw ; op1:x24; op2:x11; dest:x19; op1val:0xa544ade7dde60000;  op2val:0xdb04a838f57083ef
TEST_RR_OP(rolw, x19, x24, x11, 0x0000000000000000, 0xa544ade7dde60000, 0xdb04a838f57083ef, x1, 9*XLEN/8, x2)

inst_25:
// rs1==x6, rs2==x0, rd==x15, rs1_val == 0x51B0F5AB96FC0000 and rs2_val == 0x2AE568BAFD1032E8 
// opcode: rolw ; op1:x6; op2:x0; dest:x15; op1val:0x51b0f5ab96fc0000;  op2val:0x0
TEST_RR_OP(rolw, x15, x6, x0, 0x0000000000000000, 0x51b0f5ab96fc0000, 0x0, x1, 10*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26:
// rs1==x25, rs2==x26, rd==x11, rs1_val == 0xED4764DD0CC80000 and rs2_val == 0x2E9115B65D3BBCE0 
// opcode: rolw ; op1:x25; op2:x26; dest:x11; op1val:0xed4764dd0cc80000;  op2val:0x2e9115b65d3bbce0
TEST_RR_OP(rolw, x11, x25, x26, 0x0000000000000000, 0xed4764dd0cc80000, 0x2e9115b65d3bbce0, x1, 0*XLEN/8, x2)

inst_27:
// rs1==x4, rs2==x22, rd==x27, rs1_val == 0x42DC43547B700000 and rs2_val == 0xF29C583101B56748 
// opcode: rolw ; op1:x4; op2:x22; dest:x27; op1val:0x42dc43547b700000;  op2val:0xf29c583101b56748
TEST_RR_OP(rolw, x27, x4, x22, 0x0000000000000000, 0x42dc43547b700000, 0xf29c583101b56748, x1, 1*XLEN/8, x2)

inst_28:
// rs1==x20, rs2==x8, rd==x7, rs1_val == 0xE9FD4B63C2200000 and rs2_val == 0x577F8847CD26CE1C 
// opcode: rolw ; op1:x20; op2:x8; dest:x7; op1val:0xe9fd4b63c2200000;  op2val:0x577f8847cd26ce1c
TEST_RR_OP(rolw, x7, x20, x8, 0x0000000000000000, 0xe9fd4b63c2200000, 0x577f8847cd26ce1c, x1, 2*XLEN/8, x2)

inst_29:
// rs1==x11, rs2==x16, rd==x18, rs1_val == 0xFBCF76282C400000 and rs2_val == 0x805C2F63023590F7 
// opcode: rolw ; op1:x11; op2:x16; dest:x18; op1val:0xfbcf76282c400000;  op2val:0x805c2f63023590f7
TEST_RR_OP(rolw, x18, x11, x16, 0x0000000000000000, 0xfbcf76282c400000, 0x805c2f63023590f7, x1, 3*XLEN/8, x2)

inst_30:
// rs1==x19, rs2==x17, rd==x8, rs1_val == 0x179FAFE7FB800000 and rs2_val == 0xFBDB4DE81DB6027C 
// opcode: rolw ; op1:x19; op2:x17; dest:x8; op1val:0x179fafe7fb800000;  op2val:0xfbdb4de81db6027c
TEST_RR_OP(rolw, x8, x19, x17, 0x0000000000000000, 0x179fafe7fb800000, 0xfbdb4de81db6027c, x1, 4*XLEN/8, x2)

inst_31:
// rs1==x18, rs2==x6, rd==x25, rs1_val == 0xB1FF9D608B000000 and rs2_val == 0x27A1689480EBE557 
// opcode: rolw ; op1:x18; op2:x6; dest:x25; op1val:0xb1ff9d608b000000;  op2val:0x27a1689480ebe557
TEST_RR_OP(rolw, x25, x18, x6, 0x0000000000000000, 0xb1ff9d608b000000, 0x27a1689480ebe557, x1, 5*XLEN/8, x2)

inst_32:
// rs1_val == 0x01DAE23576000000 and rs2_val == 0x80904B4C86F90255 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1dae23576000000;  op2val:0x80904b4c86f90255
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1dae23576000000, 0x80904b4c86f90255, x1, 6*XLEN/8, x2)

inst_33:
// rs1_val == 0xADF58064EC000000 and rs2_val == 0x29828207BD230058 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xadf58064ec000000;  op2val:0x29828207bd230058
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xadf58064ec000000, 0x29828207bd230058, x1, 7*XLEN/8, x2)

inst_34:
// rs1_val == 0x9254A04D98000000 and rs2_val == 0x0BC66A8ADF880B11 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9254a04d98000000;  op2val:0xbc66a8adf880b11
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9254a04d98000000, 0xbc66a8adf880b11, x1, 8*XLEN/8, x2)

inst_35:
// rs1_val == 0xF547AF48F0000000 and rs2_val == 0x855EFA7448F71CB0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf547af48f0000000;  op2val:0x855efa7448f71cb0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf547af48f0000000, 0x855efa7448f71cb0, x1, 9*XLEN/8, x2)

inst_36:
// rs1_val == 0x60E99D0E60000000 and rs2_val == 0xB1B0D8FE00F1F68E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x60e99d0e60000000;  op2val:0xb1b0d8fe00f1f68e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x60e99d0e60000000, 0xb1b0d8fe00f1f68e, x1, 10*XLEN/8, x2)

inst_37:
// rs1_val == 0x486E4B47C0000000 and rs2_val == 0x440D8382E2ED8971 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x486e4b47c0000000;  op2val:0x440d8382e2ed8971
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x486e4b47c0000000, 0x440d8382e2ed8971, x1, 11*XLEN/8, x2)

inst_38:
// rs1_val == 0x11B6621F80000000 and rs2_val == 0x6F6E71B73344CBB0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x11b6621f80000000;  op2val:0x6f6e71b73344cbb0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x11b6621f80000000, 0x6f6e71b73344cbb0, x1, 12*XLEN/8, x2)

inst_39:
// rs1_val == 0xFABF0A7B00000000 and rs2_val == 0x6AEB7DBD0A095049 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfabf0a7b00000000;  op2val:0x6aeb7dbd0a095049
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfabf0a7b00000000, 0x6aeb7dbd0a095049, x1, 13*XLEN/8, x2)

inst_40:
// rs1_val == 0x2D47691A00000000 and rs2_val == 0xFAE216DC58F45328 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2d47691a00000000;  op2val:0xfae216dc58f45328
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2d47691a00000000, 0xfae216dc58f45328, x1, 14*XLEN/8, x2)

inst_41:
// rs1_val == 0x8D60807C00000000 and rs2_val == 0x903636CF6291F0E2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8d60807c00000000;  op2val:0x903636cf6291f0e2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8d60807c00000000, 0x903636cf6291f0e2, x1, 15*XLEN/8, x2)

inst_42:
// rs1_val == 0x230B9F8800000000 and rs2_val == 0xCC381E1007E8BF65 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x230b9f8800000000;  op2val:0xcc381e1007e8bf65
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x230b9f8800000000, 0xcc381e1007e8bf65, x1, 16*XLEN/8, x2)

inst_43:
// rs1_val == 0x5C106A3000000000 and rs2_val == 0xCADB5BEC61250888 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5c106a3000000000;  op2val:0xcadb5bec61250888
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5c106a3000000000, 0xcadb5bec61250888, x1, 17*XLEN/8, x2)

inst_44:
// rs1_val == 0xBAA4F32000000000 and rs2_val == 0x4FE6A6F6305E3F80 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbaa4f32000000000;  op2val:0x4fe6a6f6305e3f80
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbaa4f32000000000, 0x4fe6a6f6305e3f80, x1, 18*XLEN/8, x2)

inst_45:
// rs1_val == 0xC70A28C000000000 and rs2_val == 0x94A7A5EA64E77961 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc70a28c000000000;  op2val:0x94a7a5ea64e77961
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc70a28c000000000, 0x94a7a5ea64e77961, x1, 19*XLEN/8, x2)

inst_46:
// rs1_val == 0x2E84D28000000000 and rs2_val == 0x52D700AC5B130474 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2e84d28000000000;  op2val:0x52d700ac5b130474
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2e84d28000000000, 0x52d700ac5b130474, x1, 20*XLEN/8, x2)

inst_47:
// rs1_val == 0x6E90570000000000 and rs2_val == 0xAFC08ACE244D9206 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e90570000000000;  op2val:0xafc08ace244d9206
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e90570000000000, 0xafc08ace244d9206, x1, 21*XLEN/8, x2)

inst_48:
// rs1_val == 0x01D61E0000000000 and rs2_val == 0xB21E137C4F832EC8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d61e0000000000;  op2val:0xb21e137c4f832ec8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d61e0000000000, 0xb21e137c4f832ec8, x1, 22*XLEN/8, x2)

inst_49:
// rs1_val == 0xDBA9040000000000 and rs2_val == 0x5D98418D6F9F34B2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdba9040000000000;  op2val:0x5d98418d6f9f34b2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdba9040000000000, 0x5d98418d6f9f34b2, x1, 23*XLEN/8, x2)

inst_50:
// rs1_val == 0xE87AF80000000000 and rs2_val == 0x9F7C62BB7CE1F4B3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe87af80000000000;  op2val:0x9f7c62bb7ce1f4b3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe87af80000000000, 0x9f7c62bb7ce1f4b3, x1, 24*XLEN/8, x2)

inst_51:
// rs1_val == 0x1408B00000000000 and rs2_val == 0x74FB05DC575D258E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1408b00000000000;  op2val:0x74fb05dc575d258e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1408b00000000000, 0x74fb05dc575d258e, x1, 25*XLEN/8, x2)

inst_52:
// rs1_val == 0x1370A00000000000 and rs2_val == 0xF19C9FDA18CCD7F7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1370a00000000000;  op2val:0xf19c9fda18ccd7f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1370a00000000000, 0xf19c9fda18ccd7f7, x1, 26*XLEN/8, x2)

inst_53:
// rs1_val == 0x8E8A400000000000 and rs2_val == 0x5DD1EE295C3D56E7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8e8a400000000000;  op2val:0x5dd1ee295c3d56e7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8e8a400000000000, 0x5dd1ee295c3d56e7, x1, 27*XLEN/8, x2)

inst_54:
// rs1_val == 0xFD42800000000000 and rs2_val == 0x6EB5568BB03FF489 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfd42800000000000;  op2val:0x6eb5568bb03ff489
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfd42800000000000, 0x6eb5568bb03ff489, x1, 28*XLEN/8, x2)

inst_55:
// rs1_val == 0xCD55000000000000 and rs2_val == 0xB2B64C4BE716713F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcd55000000000000;  op2val:0xb2b64c4be716713f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcd55000000000000, 0xb2b64c4be716713f, x1, 29*XLEN/8, x2)

inst_56:
// rs1_val == 0x0932000000000000 and rs2_val == 0x75CDCD803FF7E48D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x932000000000000;  op2val:0x75cdcd803ff7e48d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x932000000000000, 0x75cdcd803ff7e48d, x1, 30*XLEN/8, x2)

inst_57:
// rs1_val == 0x3544000000000000 and rs2_val == 0xA9CC49B7709E60F1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3544000000000000;  op2val:0xa9cc49b7709e60f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3544000000000000, 0xa9cc49b7709e60f1, x1, 31*XLEN/8, x2)

inst_58:
// rs1_val == 0x4738000000000000 and rs2_val == 0x045ABE77BB75156A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4738000000000000;  op2val:0x45abe77bb75156a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4738000000000000, 0x45abe77bb75156a, x1, 32*XLEN/8, x2)

inst_59:
// rs1_val == 0x56B0000000000000 and rs2_val == 0x2B9C75B64EA4788D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x56b0000000000000;  op2val:0x2b9c75b64ea4788d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x56b0000000000000, 0x2b9c75b64ea4788d, x1, 33*XLEN/8, x2)

inst_60:
// rs1_val == 0x56E0000000000000 and rs2_val == 0x8B57454ACD07888B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x56e0000000000000;  op2val:0x8b57454acd07888b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x56e0000000000000, 0x8b57454acd07888b, x1, 34*XLEN/8, x2)

inst_61:
// rs1_val == 0x46C0000000000000 and rs2_val == 0x491F1B5A5D62953F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x46c0000000000000;  op2val:0x491f1b5a5d62953f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x46c0000000000000, 0x491f1b5a5d62953f, x1, 35*XLEN/8, x2)

inst_62:
// rs1_val == 0x6580000000000000 and rs2_val == 0x48659245994A555F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6580000000000000;  op2val:0x48659245994a555f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6580000000000000, 0x48659245994a555f, x1, 36*XLEN/8, x2)

inst_63:
// rs1_val == 0x7700000000000000 and rs2_val == 0x25F013BA522AE822 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7700000000000000;  op2val:0x25f013ba522ae822
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7700000000000000, 0x25f013ba522ae822, x1, 37*XLEN/8, x2)

inst_64:
// rs1_val == 0x4200000000000000 and rs2_val == 0x699492C960E011EB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4200000000000000;  op2val:0x699492c960e011eb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4200000000000000, 0x699492c960e011eb, x1, 38*XLEN/8, x2)

inst_65:
// rs1_val == 0xFC00000000000000 and rs2_val == 0x56FFE58D4360FEC9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfc00000000000000;  op2val:0x56ffe58d4360fec9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfc00000000000000, 0x56ffe58d4360fec9, x1, 39*XLEN/8, x2)

inst_66:
// rs1_val == 0x5800000000000000 and rs2_val == 0xD5F381D63480C0AD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5800000000000000;  op2val:0xd5f381d63480c0ad
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5800000000000000, 0xd5f381d63480c0ad, x1, 40*XLEN/8, x2)

inst_67:
// rs1_val == 0xD000000000000000 and rs2_val == 0xB725F591D236CDED 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd000000000000000;  op2val:0xb725f591d236cded
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd000000000000000, 0xb725f591d236cded, x1, 41*XLEN/8, x2)

inst_68:
// rs1_val == 0x2000000000000000 and rs2_val == 0x0AE5DE174EF43B6F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:0xae5de174ef43b6f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0xae5de174ef43b6f, x1, 42*XLEN/8, x2)

inst_69:
// rs1_val == 0x4000000000000000 and rs2_val == 0x29CB52AF3206B471 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x29cb52af3206b471
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x29cb52af3206b471, x1, 43*XLEN/8, x2)

inst_70:
// rs1_val == 0x8000000000000000 and rs2_val == 0xED4ECED74BED2975 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000;  op2val:0xed4eced74bed2975
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8000000000000000, 0xed4eced74bed2975, x1, 44*XLEN/8, x2)

inst_71:
// rs1_val == 0x0000000000000000 and rs2_val == 0x1A323609E92A6130 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1a323609e92a6130
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x0, 0x1a323609e92a6130, x1, 45*XLEN/8, x2)

inst_72:
// rs2_val == 0x7F8C74B1AF5BC16D and rs1_val == 0x33439FC489476E6E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x33439fc489476e6e;  op2val:0x7f8c74b1af5bc16d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x33439fc489476e6e, 0x7f8c74b1af5bc16d, x1, 46*XLEN/8, x2)

inst_73:
// rs2_val == 0x0E1DB424323E7F5E and rs1_val == 0xA6C873830196F0C0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa6c873830196f0c0;  op2val:0xe1db424323e7f5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa6c873830196f0c0, 0xe1db424323e7f5e, x1, 47*XLEN/8, x2)

inst_74:
// rs2_val == 0x922EC2BF33ECD4FC and rs1_val == 0x77A061BA4B1D37E9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x77a061ba4b1d37e9;  op2val:0x922ec2bf33ecd4fc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x77a061ba4b1d37e9, 0x922ec2bf33ecd4fc, x1, 48*XLEN/8, x2)

inst_75:
// rs2_val == 0xB914351D12915378 and rs1_val == 0xDA53E66763735E07 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xda53e66763735e07;  op2val:0xb914351d12915378
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xda53e66763735e07, 0xb914351d12915378, x1, 49*XLEN/8, x2)

inst_76:
// rs2_val == 0x443A809E48B4BE70 and rs1_val == 0xCBD297D6AEB522FC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcbd297d6aeb522fc;  op2val:0x443a809e48b4be70
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcbd297d6aeb522fc, 0x443a809e48b4be70, x1, 50*XLEN/8, x2)

inst_77:
// rs2_val == 0xFCD876518F8264E0 and rs1_val == 0x9B90F7CAF66FA51D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9b90f7caf66fa51d;  op2val:0xfcd876518f8264e0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9b90f7caf66fa51d, 0xfcd876518f8264e0, x1, 51*XLEN/8, x2)

inst_78:
// rs2_val == 0x985875B03F6A4D40 and rs1_val == 0xEAB762A9D6CBF3AE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xeab762a9d6cbf3ae;  op2val:0x985875b03f6a4d40
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xeab762a9d6cbf3ae, 0x985875b03f6a4d40, x1, 52*XLEN/8, x2)

inst_79:
// rs2_val == 0xFC44172C98DFBD80 and rs1_val == 0x1BAF44CF3B50C99D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1baf44cf3b50c99d;  op2val:0xfc44172c98dfbd80
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1baf44cf3b50c99d, 0xfc44172c98dfbd80, x1, 53*XLEN/8, x2)

inst_80:
// rs2_val == 0x4C41441591107F00 and rs1_val == 0xD63EF4DE0E724556 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd63ef4de0e724556;  op2val:0x4c41441591107f00
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd63ef4de0e724556, 0x4c41441591107f00, x1, 54*XLEN/8, x2)

inst_81:
// rs2_val == 0xC19961DDB6C00600 and rs1_val == 0x97DB1001072F6AC9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x97db1001072f6ac9;  op2val:0xc19961ddb6c00600
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x97db1001072f6ac9, 0xc19961ddb6c00600, x1, 55*XLEN/8, x2)

inst_82:
// rs2_val == 0x610EA25929454400 and rs1_val == 0xD497855D8B082833 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd497855d8b082833;  op2val:0x610ea25929454400
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd497855d8b082833, 0x610ea25929454400, x1, 56*XLEN/8, x2)

inst_83:
// rs2_val == 0x0B66A6669D416800 and rs1_val == 0x5CBAF664FCD220D7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5cbaf664fcd220d7;  op2val:0xb66a6669d416800
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5cbaf664fcd220d7, 0xb66a6669d416800, x1, 57*XLEN/8, x2)

inst_84:
// rs2_val == 0x955964C554C37000 and rs1_val == 0xAB4A4D5C22FEB755 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xab4a4d5c22feb755;  op2val:0x955964c554c37000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xab4a4d5c22feb755, 0x955964c554c37000, x1, 58*XLEN/8, x2)

inst_85:
// rs2_val == 0xD3262066BA452000 and rs1_val == 0x1F8B62C23A810BD9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1f8b62c23a810bd9;  op2val:0xd3262066ba452000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1f8b62c23a810bd9, 0xd3262066ba452000, x1, 59*XLEN/8, x2)

inst_86:
// rs2_val == 0xAD881BE63AAF4000 and rs1_val == 0xD367D9F15710B7AE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd367d9f15710b7ae;  op2val:0xad881be63aaf4000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd367d9f15710b7ae, 0xad881be63aaf4000, x1, 60*XLEN/8, x2)

inst_87:
// rs2_val == 0x448E60EF28288000 and rs1_val == 0x9812A13456F646E8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9812a13456f646e8;  op2val:0x448e60ef28288000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9812a13456f646e8, 0x448e60ef28288000, x1, 61*XLEN/8, x2)

inst_88:
// rs2_val == 0x415DC3E7526B0000 and rs1_val == 0x57B0D4C17C2890B1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x57b0d4c17c2890b1;  op2val:0x415dc3e7526b0000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x57b0d4c17c2890b1, 0x415dc3e7526b0000, x1, 62*XLEN/8, x2)

inst_89:
// rs2_val == 0x200DC7628C620000 and rs1_val == 0x1078E5395C962250 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1078e5395c962250;  op2val:0x200dc7628c620000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1078e5395c962250, 0x200dc7628c620000, x1, 63*XLEN/8, x2)

inst_90:
// rs2_val == 0x924D5D8CDB8C0000 and rs1_val == 0xF3C9FBEDAA8DC392 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf3c9fbedaa8dc392;  op2val:0x924d5d8cdb8c0000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf3c9fbedaa8dc392, 0x924d5d8cdb8c0000, x1, 64*XLEN/8, x2)

inst_91:
// rs2_val == 0x707DF5A4A8F80000 and rs1_val == 0x57E9F6C2408B97CD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x57e9f6c2408b97cd;  op2val:0x707df5a4a8f80000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x57e9f6c2408b97cd, 0x707df5a4a8f80000, x1, 65*XLEN/8, x2)

inst_92:
// rs2_val == 0xAF8FDA6198900000 and rs1_val == 0x7E107814A1C1C528 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7e107814a1c1c528;  op2val:0xaf8fda6198900000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7e107814a1c1c528, 0xaf8fda6198900000, x1, 66*XLEN/8, x2)

inst_93:
// rs2_val == 0x7FAB9B0810A00000 and rs1_val == 0x46B7549D93C22130 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x46b7549d93c22130;  op2val:0x7fab9b0810a00000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x46b7549d93c22130, 0x7fab9b0810a00000, x1, 67*XLEN/8, x2)

inst_94:
// rs2_val == 0xEC557C3C4D400000 and rs1_val == 0xEA894C29FF6036ED 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xea894c29ff6036ed;  op2val:0xec557c3c4d400000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xea894c29ff6036ed, 0xec557c3c4d400000, x1, 68*XLEN/8, x2)

inst_95:
// rs2_val == 0x4978C51702800000 and rs1_val == 0x75BD36C79929DFEB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x75bd36c79929dfeb;  op2val:0x4978c51702800000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x75bd36c79929dfeb, 0x4978c51702800000, x1, 69*XLEN/8, x2)

inst_96:
// rs2_val == 0xD12C4A6DFD000000 and rs1_val == 0xE3AC03436656B0E2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe3ac03436656b0e2;  op2val:0xd12c4a6dfd000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe3ac03436656b0e2, 0xd12c4a6dfd000000, x1, 70*XLEN/8, x2)

inst_97:
// rs2_val == 0xFFE1759C3A000000 and rs1_val == 0x4BFF93C124507198 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4bff93c124507198;  op2val:0xffe1759c3a000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4bff93c124507198, 0xffe1759c3a000000, x1, 71*XLEN/8, x2)

inst_98:
// rs2_val == 0xB9545B9124000000 and rs1_val == 0xA46EE1F1A8552F4B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa46ee1f1a8552f4b;  op2val:0xb9545b9124000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa46ee1f1a8552f4b, 0xb9545b9124000000, x1, 72*XLEN/8, x2)

inst_99:
// rs2_val == 0x1857BC0AE8000000 and rs1_val == 0xFD5324A47C496066 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfd5324a47c496066;  op2val:0x1857bc0ae8000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfd5324a47c496066, 0x1857bc0ae8000000, x1, 73*XLEN/8, x2)

inst_100:
// rs2_val == 0x1AC7983C70000000 and rs1_val == 0xCB0ACB582BEDCFC5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcb0acb582bedcfc5;  op2val:0x1ac7983c70000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcb0acb582bedcfc5, 0x1ac7983c70000000, x1, 74*XLEN/8, x2)

inst_101:
// rs2_val == 0x87503D9D20000000 and rs1_val == 0x300D9B713BB3E347 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x300d9b713bb3e347;  op2val:0x87503d9d20000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x300d9b713bb3e347, 0x87503d9d20000000, x1, 75*XLEN/8, x2)

inst_102:
// rs2_val == 0x51885E99C0000000 and rs1_val == 0xA31E74CF1F3C1AD7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa31e74cf1f3c1ad7;  op2val:0x51885e99c0000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa31e74cf1f3c1ad7, 0x51885e99c0000000, x1, 76*XLEN/8, x2)

inst_103:
// rs2_val == 0xCB7CDDA380000000 and rs1_val == 0x755CD0BF4F63879F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x755cd0bf4f63879f;  op2val:0xcb7cdda380000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x755cd0bf4f63879f, 0xcb7cdda380000000, x1, 77*XLEN/8, x2)

inst_104:
// rs2_val == 0xEFE091E300000000 and rs1_val == 0x70FD0C20644918A7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x70fd0c20644918a7;  op2val:0xefe091e300000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x70fd0c20644918a7, 0xefe091e300000000, x1, 78*XLEN/8, x2)

inst_105:
// rs2_val == 0xC706E0C200000000 and rs1_val == 0x324C464BC06209FB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x324c464bc06209fb;  op2val:0xc706e0c200000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x324c464bc06209fb, 0xc706e0c200000000, x1, 79*XLEN/8, x2)

inst_106:
// rs2_val == 0x5C67C8FC00000000 and rs1_val == 0xB9FBD369C8CDF63E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb9fbd369c8cdf63e;  op2val:0x5c67c8fc00000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb9fbd369c8cdf63e, 0x5c67c8fc00000000, x1, 80*XLEN/8, x2)

inst_107:
// rs2_val == 0x0333990800000000 and rs1_val == 0xB6DE8BCFD96429C9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb6de8bcfd96429c9;  op2val:0x333990800000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb6de8bcfd96429c9, 0x333990800000000, x1, 81*XLEN/8, x2)

inst_108:
// rs2_val == 0xAF36F11000000000 and rs1_val == 0x22FED7DB4E7B7359 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x22fed7db4e7b7359;  op2val:0xaf36f11000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x22fed7db4e7b7359, 0xaf36f11000000000, x1, 82*XLEN/8, x2)

inst_109:
// rs2_val == 0x60C9F22000000000 and rs1_val == 0xCA355A09AB72F99F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xca355a09ab72f99f;  op2val:0x60c9f22000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xca355a09ab72f99f, 0x60c9f22000000000, x1, 83*XLEN/8, x2)

inst_110:
// rs2_val == 0xFA56AA4000000000 and rs1_val == 0x8533DC75D6308385 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8533dc75d6308385;  op2val:0xfa56aa4000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8533dc75d6308385, 0xfa56aa4000000000, x1, 84*XLEN/8, x2)

inst_111:
// rs2_val == 0xE077678000000000 and rs1_val == 0x4256F18F2DE4EB20 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4256f18f2de4eb20;  op2val:0xe077678000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4256f18f2de4eb20, 0xe077678000000000, x1, 85*XLEN/8, x2)

inst_112:
// rs2_val == 0xEFE7490000000000 and rs1_val == 0x2466B4600D42EA01 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2466b4600d42ea01;  op2val:0xefe7490000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2466b4600d42ea01, 0xefe7490000000000, x1, 86*XLEN/8, x2)

inst_113:
// rs2_val == 0xF37B4E0000000000 and rs1_val == 0x4EAB740B87F996D6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4eab740b87f996d6;  op2val:0xf37b4e0000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4eab740b87f996d6, 0xf37b4e0000000000, x1, 87*XLEN/8, x2)

inst_114:
// rs2_val == 0x4D64CC0000000000 and rs1_val == 0xEED7C61C17D8A217 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xeed7c61c17d8a217;  op2val:0x4d64cc0000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xeed7c61c17d8a217, 0x4d64cc0000000000, x1, 88*XLEN/8, x2)

inst_115:
// rs2_val == 0x3AF3780000000000 and rs1_val == 0xE8DEC4B7875E9BF5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe8dec4b7875e9bf5;  op2val:0x3af3780000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe8dec4b7875e9bf5, 0x3af3780000000000, x1, 89*XLEN/8, x2)

inst_116:
// rs2_val == 0xA3DEF00000000000 and rs1_val == 0xD2039372874434D3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd2039372874434d3;  op2val:0xa3def00000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd2039372874434d3, 0xa3def00000000000, x1, 90*XLEN/8, x2)

inst_117:
// rs2_val == 0xA742A00000000000 and rs1_val == 0xE91EDE432037E34E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe91ede432037e34e;  op2val:0xa742a00000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe91ede432037e34e, 0xa742a00000000000, x1, 91*XLEN/8, x2)

inst_118:
// rs2_val == 0x3DA8400000000000 and rs1_val == 0x42BEA7753D32D01E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x42bea7753d32d01e;  op2val:0x3da8400000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x42bea7753d32d01e, 0x3da8400000000000, x1, 92*XLEN/8, x2)

inst_119:
// rs2_val == 0x3B0B800000000000 and rs1_val == 0x718E177DE812DD49 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x718e177de812dd49;  op2val:0x3b0b800000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x718e177de812dd49, 0x3b0b800000000000, x1, 93*XLEN/8, x2)

inst_120:
// rs2_val == 0x118F000000000000 and rs1_val == 0xA4E23852D8BCA4DF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa4e23852d8bca4df;  op2val:0x118f000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa4e23852d8bca4df, 0x118f000000000000, x1, 94*XLEN/8, x2)

inst_121:
// rs2_val == 0xCFB6000000000000 and rs1_val == 0xFDB7038B058160E6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfdb7038b058160e6;  op2val:0xcfb6000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfdb7038b058160e6, 0xcfb6000000000000, x1, 95*XLEN/8, x2)

inst_122:
// rs2_val == 0xEB24000000000000 and rs1_val == 0x666FAFE7D7704260 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x666fafe7d7704260;  op2val:0xeb24000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x666fafe7d7704260, 0xeb24000000000000, x1, 96*XLEN/8, x2)

inst_123:
// rs2_val == 0xCD28000000000000 and rs1_val == 0x8CB7ED4FC1F36FAE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8cb7ed4fc1f36fae;  op2val:0xcd28000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8cb7ed4fc1f36fae, 0xcd28000000000000, x1, 97*XLEN/8, x2)

inst_124:
// rs2_val == 0x5C50000000000000 and rs1_val == 0x811D9484D8D8DD47 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x811d9484d8d8dd47;  op2val:0x5c50000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x811d9484d8d8dd47, 0x5c50000000000000, x1, 98*XLEN/8, x2)

inst_125:
// rs2_val == 0x20A0000000000000 and rs1_val == 0x063BF2DA242D8CEF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x63bf2da242d8cef;  op2val:0x20a0000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x63bf2da242d8cef, 0x20a0000000000000, x1, 99*XLEN/8, x2)

inst_126:
// rs2_val == 0x1940000000000000 and rs1_val == 0xFD8BF41246E4ABD8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfd8bf41246e4abd8;  op2val:0x1940000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfd8bf41246e4abd8, 0x1940000000000000, x1, 100*XLEN/8, x2)

inst_127:
// rs2_val == 0xCC80000000000000 and rs1_val == 0xBF28804A83E2BA3A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbf28804a83e2ba3a;  op2val:0xcc80000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbf28804a83e2ba3a, 0xcc80000000000000, x1, 101*XLEN/8, x2)

inst_128:
// rs2_val == 0x6900000000000000 and rs1_val == 0xDE81BCAD0B815EF0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xde81bcad0b815ef0;  op2val:0x6900000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xde81bcad0b815ef0, 0x6900000000000000, x1, 102*XLEN/8, x2)

inst_129:
// rs2_val == 0x8200000000000000 and rs1_val == 0xB1410CBA5D003E38 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb1410cba5d003e38;  op2val:0x8200000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb1410cba5d003e38, 0x8200000000000000, x1, 103*XLEN/8, x2)

inst_130:
// rs2_val == 0x4C00000000000000 and rs1_val == 0x2405B307CEC7313A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2405b307cec7313a;  op2val:0x4c00000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2405b307cec7313a, 0x4c00000000000000, x1, 104*XLEN/8, x2)

inst_131:
// rs2_val == 0x3800000000000000 and rs1_val == 0x8862749480E4D23B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8862749480e4d23b;  op2val:0x3800000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8862749480e4d23b, 0x3800000000000000, x1, 105*XLEN/8, x2)

inst_132:
// rs2_val == 0x3000000000000000 and rs1_val == 0xD50BD94A392E6FA3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd50bd94a392e6fa3;  op2val:0x3000000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd50bd94a392e6fa3, 0x3000000000000000, x1, 106*XLEN/8, x2)

inst_133:
// rs2_val == 0xA000000000000000 and rs1_val == 0x485246BF2502307F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x485246bf2502307f;  op2val:0xa000000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x485246bf2502307f, 0xa000000000000000, x1, 107*XLEN/8, x2)

inst_134:
// rs2_val == 0x4000000000000000 and rs1_val == 0xD2EEEB1C2AF42D39 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd2eeeb1c2af42d39;  op2val:0x4000000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd2eeeb1c2af42d39, 0x4000000000000000, x1, 108*XLEN/8, x2)

inst_135:
// rs2_val == 0x8000000000000000 and rs1_val == 0x6F061D6DC38671B6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6f061d6dc38671b6;  op2val:0x8000000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6f061d6dc38671b6, 0x8000000000000000, x1, 109*XLEN/8, x2)

inst_136:
// rs2_val == 0x0000000000000000 and rs1_val == 0x5BA2C7DD5AE10604 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5ba2c7dd5ae10604;  op2val:0x0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5ba2c7dd5ae10604, 0x0, x1, 110*XLEN/8, x2)

inst_137:
// rs1_val == 0xFFFFFFFFFFFFFFFF and rs2_val == 0xA6EA1C0D2F8B9E9D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xa6ea1c0d2f8b9e9d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xa6ea1c0d2f8b9e9d, x1, 111*XLEN/8, x2)

inst_138:
// rs1_val == 0x7FFFFFFFFFFFFFFF and rs2_val == 0x2FF7C0FCBBE8F88D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0x2ff7c0fcbbe8f88d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0x2ff7c0fcbbe8f88d, x1, 112*XLEN/8, x2)

inst_139:
// rs1_val == 0xBFFFFFFFFFFFFFFF and rs2_val == 0x07AC5FED4B6EA010 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0x7ac5fed4b6ea010
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0x7ac5fed4b6ea010, x1, 113*XLEN/8, x2)

inst_140:
// rs1_val == 0xDFFFFFFFFFFFFFFF and rs2_val == 0xFE339ECA03B1D74B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0xfe339eca03b1d74b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0xfe339eca03b1d74b, x1, 114*XLEN/8, x2)

inst_141:
// rs1_val == 0x2FFFFFFFFFFFFFFF and rs2_val == 0xD38CADCD432FF218 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2fffffffffffffff;  op2val:0xd38cadcd432ff218
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2fffffffffffffff, 0xd38cadcd432ff218, x1, 115*XLEN/8, x2)

inst_142:
// rs1_val == 0x67FFFFFFFFFFFFFF and rs2_val == 0x41B79D35E08409F0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x67ffffffffffffff;  op2val:0x41b79d35e08409f0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x67ffffffffffffff, 0x41b79d35e08409f0, x1, 116*XLEN/8, x2)

inst_143:
// rs1_val == 0x3BFFFFFFFFFFFFFF and rs2_val == 0xABB4DA1C6DF8CCF6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3bffffffffffffff;  op2val:0xabb4da1c6df8ccf6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3bffffffffffffff, 0xabb4da1c6df8ccf6, x1, 117*XLEN/8, x2)

inst_144:
// rs1_val == 0x6DFFFFFFFFFFFFFF and rs2_val == 0xFCB627AFBF97E520 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6dffffffffffffff;  op2val:0xfcb627afbf97e520
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6dffffffffffffff, 0xfcb627afbf97e520, x1, 118*XLEN/8, x2)

inst_145:
// rs1_val == 0xACFFFFFFFFFFFFFF and rs2_val == 0x4B1634E12D37DE81 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xacffffffffffffff;  op2val:0x4b1634e12d37de81
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xacffffffffffffff, 0x4b1634e12d37de81, x1, 119*XLEN/8, x2)

inst_146:
// rs1_val == 0x857FFFFFFFFFFFFF and rs2_val == 0x40D90A1E5B331999 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x857fffffffffffff;  op2val:0x40d90a1e5b331999
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x857fffffffffffff, 0x40d90a1e5b331999, x1, 120*XLEN/8, x2)

inst_147:
// rs1_val == 0x433FFFFFFFFFFFFF and rs2_val == 0x47B7097B9B01F7CC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x433fffffffffffff;  op2val:0x47b7097b9b01f7cc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x433fffffffffffff, 0x47b7097b9b01f7cc, x1, 121*XLEN/8, x2)

inst_148:
// rs1_val == 0x215FFFFFFFFFFFFF and rs2_val == 0x90BB34803C464110 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x215fffffffffffff;  op2val:0x90bb34803c464110
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x215fffffffffffff, 0x90bb34803c464110, x1, 122*XLEN/8, x2)

inst_149:
// rs1_val == 0x31CFFFFFFFFFFFFF and rs2_val == 0x5DCF019DB3988B52 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x31cfffffffffffff;  op2val:0x5dcf019db3988b52
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x31cfffffffffffff, 0x5dcf019db3988b52, x1, 123*XLEN/8, x2)

inst_150:
// rs1_val == 0x6E27FFFFFFFFFFFF and rs2_val == 0x63C2A48F76B1FD3D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e27ffffffffffff;  op2val:0x63c2a48f76b1fd3d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e27ffffffffffff, 0x63c2a48f76b1fd3d, x1, 124*XLEN/8, x2)

inst_151:
// rs1_val == 0x6C9BFFFFFFFFFFFF and rs2_val == 0xDE14BFF2EED7A24A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6c9bffffffffffff;  op2val:0xde14bff2eed7a24a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6c9bffffffffffff, 0xde14bff2eed7a24a, x1, 125*XLEN/8, x2)

inst_152:
// rs1_val == 0x2449FFFFFFFFFFFF and rs2_val == 0x59C05BB9CD9CB03A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2449ffffffffffff;  op2val:0x59c05bb9cd9cb03a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2449ffffffffffff, 0x59c05bb9cd9cb03a, x1, 126*XLEN/8, x2)

inst_153:
// rs1_val == 0xDA88FFFFFFFFFFFF and rs2_val == 0xA827F5A3B76D454D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xda88ffffffffffff;  op2val:0xa827f5a3b76d454d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xda88ffffffffffff, 0xa827f5a3b76d454d, x1, 127*XLEN/8, x2)

inst_154:
// rs1_val == 0xF8A77FFFFFFFFFFF and rs2_val == 0x9A7EF9E4B432D4F7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf8a77fffffffffff;  op2val:0x9a7ef9e4b432d4f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf8a77fffffffffff, 0x9a7ef9e4b432d4f7, x1, 128*XLEN/8, x2)

inst_155:
// rs1_val == 0x7F103FFFFFFFFFFF and rs2_val == 0x09E4D1F4975A8550 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7f103fffffffffff;  op2val:0x9e4d1f4975a8550
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7f103fffffffffff, 0x9e4d1f4975a8550, x1, 129*XLEN/8, x2)

inst_156:
// rs1_val == 0xBA4A1FFFFFFFFFFF and rs2_val == 0x5761A86691E42ACB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xba4a1fffffffffff;  op2val:0x5761a86691e42acb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xba4a1fffffffffff, 0x5761a86691e42acb, x1, 130*XLEN/8, x2)

inst_157:
// rs1_val == 0x31602FFFFFFFFFFF and rs2_val == 0x2AD6072539BE2172 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x31602fffffffffff;  op2val:0x2ad6072539be2172
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x31602fffffffffff, 0x2ad6072539be2172, x1, 131*XLEN/8, x2)

inst_158:
// rs1_val == 0xA4BE27FFFFFFFFFF and rs2_val == 0xB1F5D8538B16BB0D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa4be27ffffffffff;  op2val:0xb1f5d8538b16bb0d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa4be27ffffffffff, 0xb1f5d8538b16bb0d, x1, 132*XLEN/8, x2)

inst_159:
// rs1_val == 0x708903FFFFFFFFFF and rs2_val == 0x86CE51BD17B8B123 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x708903ffffffffff;  op2val:0x86ce51bd17b8b123
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x708903ffffffffff, 0x86ce51bd17b8b123, x1, 133*XLEN/8, x2)

inst_160:
// rs1_val == 0xFF7745FFFFFFFFFF and rs2_val == 0x1F1BAF6A4F829B65 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xff7745ffffffffff;  op2val:0x1f1baf6a4f829b65
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xff7745ffffffffff, 0x1f1baf6a4f829b65, x1, 134*XLEN/8, x2)

inst_161:
// rs1_val == 0xE81FDCFFFFFFFFFF and rs2_val == 0x85A300E0784ABEBB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe81fdcffffffffff;  op2val:0x85a300e0784abebb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe81fdcffffffffff, 0x85a300e0784abebb, x1, 135*XLEN/8, x2)

inst_162:
// rs1_val == 0xD5A2037FFFFFFFFF and rs2_val == 0x01769A3C092936E8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd5a2037fffffffff;  op2val:0x1769a3c092936e8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd5a2037fffffffff, 0x1769a3c092936e8, x1, 136*XLEN/8, x2)

inst_163:
// rs1_val == 0x27B23DBFFFFFFFFF and rs2_val == 0xE91014A0B6D75E84 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x27b23dbfffffffff;  op2val:0xe91014a0b6d75e84
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x27b23dbfffffffff, 0xe91014a0b6d75e84, x1, 137*XLEN/8, x2)

inst_164:
// rs1_val == 0x25784F5FFFFFFFFF and rs2_val == 0xD95FD86AD2FE2E7E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x25784f5fffffffff;  op2val:0xd95fd86ad2fe2e7e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x25784f5fffffffff, 0xd95fd86ad2fe2e7e, x1, 138*XLEN/8, x2)

inst_165:
// rs1_val == 0x6CC30F6FFFFFFFFF and rs2_val == 0x3C5B3EEE9687F28F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6cc30f6fffffffff;  op2val:0x3c5b3eee9687f28f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6cc30f6fffffffff, 0x3c5b3eee9687f28f, x1, 139*XLEN/8, x2)

inst_166:
// rs1_val == 0x3E87B427FFFFFFFF and rs2_val == 0x499006C897933E6C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3e87b427ffffffff;  op2val:0x499006c897933e6c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3e87b427ffffffff, 0x499006c897933e6c, x1, 140*XLEN/8, x2)

inst_167:
// rs1_val == 0xA4053173FFFFFFFF and rs2_val == 0x6CE859BB59CF4BB2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa4053173ffffffff;  op2val:0x6ce859bb59cf4bb2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa4053173ffffffff, 0x6ce859bb59cf4bb2, x1, 141*XLEN/8, x2)

inst_168:
// rs1_val == 0x65CB60BDFFFFFFFF and rs2_val == 0x1635B51A75EE935F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x65cb60bdffffffff;  op2val:0x1635b51a75ee935f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x65cb60bdffffffff, 0x1635b51a75ee935f, x1, 142*XLEN/8, x2)

inst_169:
// rs1_val == 0x0BACFC76FFFFFFFF and rs2_val == 0xEBDA5A4F998D1525 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbacfc76ffffffff;  op2val:0xebda5a4f998d1525
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbacfc76ffffffff, 0xebda5a4f998d1525, x1, 143*XLEN/8, x2)

inst_170:
// rs1_val == 0xC61B1FBF7FFFFFFF and rs2_val == 0x30BFF1924E6EE408 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc61b1fbf7fffffff;  op2val:0x30bff1924e6ee408
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc61b1fbf7fffffff, 0x30bff1924e6ee408, x1, 144*XLEN/8, x2)

inst_171:
// rs1_val == 0xFDD2CB403FFFFFFF and rs2_val == 0x63C2504C8DFC2307 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfdd2cb403fffffff;  op2val:0x63c2504c8dfc2307
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfdd2cb403fffffff, 0x63c2504c8dfc2307, x1, 145*XLEN/8, x2)

inst_172:
// rs1_val == 0x4A18738A1FFFFFFF and rs2_val == 0x1CA7BD1F0D770F3C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4a18738a1fffffff;  op2val:0x1ca7bd1f0d770f3c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4a18738a1fffffff, 0x1ca7bd1f0d770f3c, x1, 146*XLEN/8, x2)

inst_173:
// rs1_val == 0x280088DBCFFFFFFF and rs2_val == 0x4ED6242837E0DE00 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x280088dbcfffffff;  op2val:0x4ed6242837e0de00
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x280088dbcfffffff, 0x4ed6242837e0de00, x1, 147*XLEN/8, x2)

inst_174:
// rs1_val == 0x636A75E397FFFFFF and rs2_val == 0x088B3E9E4A7A5C05 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x636a75e397ffffff;  op2val:0x88b3e9e4a7a5c05
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x636a75e397ffffff, 0x88b3e9e4a7a5c05, x1, 148*XLEN/8, x2)

inst_175:
// rs1_val == 0x19835A0D23FFFFFF and rs2_val == 0x7DABB7005C6C32A5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x19835a0d23ffffff;  op2val:0x7dabb7005c6c32a5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x19835a0d23ffffff, 0x7dabb7005c6c32a5, x1, 149*XLEN/8, x2)

inst_176:
// rs1_val == 0xE05E8C5F95FFFFFF and rs2_val == 0xFD670591955235A4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe05e8c5f95ffffff;  op2val:0xfd670591955235a4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe05e8c5f95ffffff, 0xfd670591955235a4, x1, 150*XLEN/8, x2)

inst_177:
// rs1_val == 0x59DDE3310AFFFFFF and rs2_val == 0x4BA4996688F931F4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x59dde3310affffff;  op2val:0x4ba4996688f931f4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x59dde3310affffff, 0x4ba4996688f931f4, x1, 151*XLEN/8, x2)

inst_178:
// rs1_val == 0xCDBD527DF77FFFFF and rs2_val == 0x529D62B60C96A183 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcdbd527df77fffff;  op2val:0x529d62b60c96a183
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcdbd527df77fffff, 0x529d62b60c96a183, x1, 152*XLEN/8, x2)

inst_179:
// rs1_val == 0xE31F9713E4BFFFFF and rs2_val == 0xBD5A3C088B9F8591 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe31f9713e4bfffff;  op2val:0xbd5a3c088b9f8591
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe31f9713e4bfffff, 0xbd5a3c088b9f8591, x1, 153*XLEN/8, x2)

inst_180:
// rs1_val == 0x0143AC65E6DFFFFF and rs2_val == 0xAE7C7AE4DE38D7E2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x143ac65e6dfffff;  op2val:0xae7c7ae4de38d7e2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x143ac65e6dfffff, 0xae7c7ae4de38d7e2, x1, 154*XLEN/8, x2)

inst_181:
// rs1_val == 0x7A9AC0A716EFFFFF and rs2_val == 0x5F249E4DEE8F948A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7a9ac0a716efffff;  op2val:0x5f249e4dee8f948a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7a9ac0a716efffff, 0x5f249e4dee8f948a, x1, 155*XLEN/8, x2)

inst_182:
// rs1_val == 0x4399EC2A5857FFFF and rs2_val == 0xD24F0724CD41CAD2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4399ec2a5857ffff;  op2val:0xd24f0724cd41cad2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4399ec2a5857ffff, 0xd24f0724cd41cad2, x1, 156*XLEN/8, x2)

inst_183:
// rs1_val == 0xB7E7669E0C03FFFF and rs2_val == 0x9EDFCC1B64A14081 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb7e7669e0c03ffff;  op2val:0x9edfcc1b64a14081
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb7e7669e0c03ffff, 0x9edfcc1b64a14081, x1, 157*XLEN/8, x2)

inst_184:
// rs1_val == 0x8C0F5CBFD6F1FFFF and rs2_val == 0x0D4C58ABE5C7946A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8c0f5cbfd6f1ffff;  op2val:0xd4c58abe5c7946a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8c0f5cbfd6f1ffff, 0xd4c58abe5c7946a, x1, 158*XLEN/8, x2)

inst_185:
// rs1_val == 0x231D058C9D02FFFF and rs2_val == 0x4CACE19165844C17 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x231d058c9d02ffff;  op2val:0x4cace19165844c17
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x231d058c9d02ffff, 0x4cace19165844c17, x1, 159*XLEN/8, x2)

inst_186:
// rs1_val == 0x8BA43677F63C7FFF and rs2_val == 0x42C1BE6C4C4006C3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8ba43677f63c7fff;  op2val:0x42c1be6c4c4006c3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8ba43677f63c7fff, 0x42c1be6c4c4006c3, x1, 160*XLEN/8, x2)

inst_187:
// rs1_val == 0x0D5574B45F67BFFF and rs2_val == 0x07C8ADBBEE84A991 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd5574b45f67bfff;  op2val:0x7c8adbbee84a991
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd5574b45f67bfff, 0x7c8adbbee84a991, x1, 161*XLEN/8, x2)

inst_188:
// rs1_val == 0x03FD3B8CBA185FFF and rs2_val == 0xDDC89919457288A2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3fd3b8cba185fff;  op2val:0xddc89919457288a2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3fd3b8cba185fff, 0xddc89919457288a2, x1, 162*XLEN/8, x2)

inst_189:
// rs1_val == 0x5569DAB7FFE78FFF and rs2_val == 0xA09C74E3CF1EC7BA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5569dab7ffe78fff;  op2val:0xa09c74e3cf1ec7ba
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5569dab7ffe78fff, 0xa09c74e3cf1ec7ba, x1, 163*XLEN/8, x2)

inst_190:
// rs1_val == 0x9F440F98291917FF and rs2_val == 0xB36964F8B74D1614 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9f440f98291917ff;  op2val:0xb36964f8b74d1614
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9f440f98291917ff, 0xb36964f8b74d1614, x1, 164*XLEN/8, x2)

inst_191:
// rs1_val == 0xC312E040EB1873FF and rs2_val == 0x1C0290060A710087 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc312e040eb1873ff;  op2val:0x1c0290060a710087
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc312e040eb1873ff, 0x1c0290060a710087, x1, 165*XLEN/8, x2)

inst_192:
// rs1_val == 0x67DFCA774EF73DFF and rs2_val == 0x633F9E36FF03170E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x67dfca774ef73dff;  op2val:0x633f9e36ff03170e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x67dfca774ef73dff, 0x633f9e36ff03170e, x1, 166*XLEN/8, x2)

inst_193:
// rs1_val == 0x448BFE1163DD2CFF and rs2_val == 0xC8EA69A8269E1925 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x448bfe1163dd2cff;  op2val:0xc8ea69a8269e1925
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x448bfe1163dd2cff, 0xc8ea69a8269e1925, x1, 167*XLEN/8, x2)

inst_194:
// rs1_val == 0x4D0957FB733F597F and rs2_val == 0x86BDDB7C00F0A572 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4d0957fb733f597f;  op2val:0x86bddb7c00f0a572
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4d0957fb733f597f, 0x86bddb7c00f0a572, x1, 168*XLEN/8, x2)

inst_195:
// rs1_val == 0x424F6311883EAD3F and rs2_val == 0x54FAD64046B88C5E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x424f6311883ead3f;  op2val:0x54fad64046b88c5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x424f6311883ead3f, 0x54fad64046b88c5e, x1, 169*XLEN/8, x2)

inst_196:
// rs1_val == 0xFE0022C2EFEFFC5F and rs2_val == 0xDA80DDEFF3D107A2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfe0022c2efeffc5f;  op2val:0xda80ddeff3d107a2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfe0022c2efeffc5f, 0xda80ddeff3d107a2, x1, 170*XLEN/8, x2)

inst_197:
// rs1_val == 0x2815A9156A8877CF and rs2_val == 0x7BEA8A85CD09E875 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2815a9156a8877cf;  op2val:0x7bea8a85cd09e875
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2815a9156a8877cf, 0x7bea8a85cd09e875, x1, 171*XLEN/8, x2)

inst_198:
// rs1_val == 0x27B2BDDA42EE9AA7 and rs2_val == 0x8964663CF541AB61 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x27b2bdda42ee9aa7;  op2val:0x8964663cf541ab61
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x27b2bdda42ee9aa7, 0x8964663cf541ab61, x1, 172*XLEN/8, x2)

inst_199:
// rs1_val == 0xC42A14B631A3CF7B and rs2_val == 0xB6CF3DE46025666D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc42a14b631a3cf7b;  op2val:0xb6cf3de46025666d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc42a14b631a3cf7b, 0xb6cf3de46025666d, x1, 173*XLEN/8, x2)

inst_200:
// rs1_val == 0x30D2EC9FD4D686CD and rs2_val == 0x2DC04D358033ADA7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x30d2ec9fd4d686cd;  op2val:0x2dc04d358033ada7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x30d2ec9fd4d686cd, 0x2dc04d358033ada7, x1, 174*XLEN/8, x2)

inst_201:
// rs1_val == 0x0168EF241A5632E0 and rs2_val == 0x220746CC96C03042 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x168ef241a5632e0;  op2val:0x220746cc96c03042
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x168ef241a5632e0, 0x220746cc96c03042, x1, 175*XLEN/8, x2)

inst_202:
// rs2_val == 0xFFFFFFFFFFFFFFFF and rs1_val == 0x6DAE4547B0F94BB3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6dae4547b0f94bb3;  op2val:0xffffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6dae4547b0f94bb3, 0xffffffffffffffff, x1, 176*XLEN/8, x2)

inst_203:
// rs2_val == 0x7FFFFFFFFFFFFFFF and rs1_val == 0x24B6B671AE5FDCBB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x24b6b671ae5fdcbb;  op2val:0x7fffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x24b6b671ae5fdcbb, 0x7fffffffffffffff, x1, 177*XLEN/8, x2)

inst_204:
// rs2_val == 0xBFFFFFFFFFFFFFFF and rs1_val == 0xA67CE511275BBF80 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa67ce511275bbf80;  op2val:0xbfffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa67ce511275bbf80, 0xbfffffffffffffff, x1, 178*XLEN/8, x2)

inst_205:
// rs2_val == 0x9FFFFFFFFFFFFFFF and rs1_val == 0x39C88EC041E5A5DE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x39c88ec041e5a5de;  op2val:0x9fffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x39c88ec041e5a5de, 0x9fffffffffffffff, x1, 179*XLEN/8, x2)

inst_206:
// rs2_val == 0x8FFFFFFFFFFFFFFF and rs1_val == 0x3E610134180C5DB5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3e610134180c5db5;  op2val:0x8fffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3e610134180c5db5, 0x8fffffffffffffff, x1, 180*XLEN/8, x2)

inst_207:
// rs2_val == 0x87FFFFFFFFFFFFFF and rs1_val == 0x9241B7ED0274846B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9241b7ed0274846b;  op2val:0x87ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9241b7ed0274846b, 0x87ffffffffffffff, x1, 181*XLEN/8, x2)

inst_208:
// rs2_val == 0xC3FFFFFFFFFFFFFF and rs1_val == 0x9BAE401E386EF954 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9bae401e386ef954;  op2val:0xc3ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9bae401e386ef954, 0xc3ffffffffffffff, x1, 182*XLEN/8, x2)

inst_209:
// rs2_val == 0xB1FFFFFFFFFFFFFF and rs1_val == 0x6D5C2871FE183D04 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6d5c2871fe183d04;  op2val:0xb1ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6d5c2871fe183d04, 0xb1ffffffffffffff, x1, 183*XLEN/8, x2)

inst_210:
// rs2_val == 0x82FFFFFFFFFFFFFF and rs1_val == 0x0341EA23BD94509C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x341ea23bd94509c;  op2val:0x82ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x341ea23bd94509c, 0x82ffffffffffffff, x1, 184*XLEN/8, x2)

inst_211:
// rs2_val == 0xEA7FFFFFFFFFFFFF and rs1_val == 0xEE8EB1B125FB16B4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xee8eb1b125fb16b4;  op2val:0xea7fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xee8eb1b125fb16b4, 0xea7fffffffffffff, x1, 185*XLEN/8, x2)

inst_212:
// rs2_val == 0x5A3FFFFFFFFFFFFF and rs1_val == 0xB888D0205843990B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb888d0205843990b;  op2val:0x5a3fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb888d0205843990b, 0x5a3fffffffffffff, x1, 186*XLEN/8, x2)

inst_213:
// rs2_val == 0x489FFFFFFFFFFFFF and rs1_val == 0x17C5DA8E9738BFB9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x17c5da8e9738bfb9;  op2val:0x489fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x17c5da8e9738bfb9, 0x489fffffffffffff, x1, 187*XLEN/8, x2)

inst_214:
// rs2_val == 0x222FFFFFFFFFFFFF and rs1_val == 0xB9E861C820176DBE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb9e861c820176dbe;  op2val:0x222fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb9e861c820176dbe, 0x222fffffffffffff, x1, 188*XLEN/8, x2)

inst_215:
// rs2_val == 0x1AB7FFFFFFFFFFFF and rs1_val == 0xE057776C76427709 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe057776c76427709;  op2val:0x1ab7ffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe057776c76427709, 0x1ab7ffffffffffff, x1, 189*XLEN/8, x2)

inst_216:
// rs2_val == 0x93FBFFFFFFFFFFFF and rs1_val == 0x9230A15AD0917142 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9230a15ad0917142;  op2val:0x93fbffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9230a15ad0917142, 0x93fbffffffffffff, x1, 190*XLEN/8, x2)

inst_217:
// rs2_val == 0x9269FFFFFFFFFFFF and rs1_val == 0x69F35DA38364A709 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x69f35da38364a709;  op2val:0x9269ffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x69f35da38364a709, 0x9269ffffffffffff, x1, 191*XLEN/8, x2)

inst_218:
// rs2_val == 0xDBEEFFFFFFFFFFFF and rs1_val == 0x5697EBD547CD73ED 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5697ebd547cd73ed;  op2val:0xdbeeffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5697ebd547cd73ed, 0xdbeeffffffffffff, x1, 192*XLEN/8, x2)

inst_219:
// rs2_val == 0x1FE47FFFFFFFFFFF and rs1_val == 0xC407E2A913E5CF6B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc407e2a913e5cf6b;  op2val:0x1fe47fffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc407e2a913e5cf6b, 0x1fe47fffffffffff, x1, 193*XLEN/8, x2)

inst_220:
// rs2_val == 0x6A0F3FFFFFFFFFFF and rs1_val == 0x729D8FD2B68C8FCE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x729d8fd2b68c8fce;  op2val:0x6a0f3fffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x729d8fd2b68c8fce, 0x6a0f3fffffffffff, x1, 194*XLEN/8, x2)

inst_221:
// rs2_val == 0x7B40DFFFFFFFFFFF and rs1_val == 0x1475D76C0F99D8BC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1475d76c0f99d8bc;  op2val:0x7b40dfffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1475d76c0f99d8bc, 0x7b40dfffffffffff, x1, 195*XLEN/8, x2)

inst_222:
// rs2_val == 0x00D36FFFFFFFFFFF and rs1_val == 0x884A2AF82552FBF9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x884a2af82552fbf9;  op2val:0xd36fffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x884a2af82552fbf9, 0xd36fffffffffff, x1, 196*XLEN/8, x2)

inst_223:
// rs2_val == 0x4CC607FFFFFFFFFF and rs1_val == 0x4B6AE0AB8FBFF9BA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4b6ae0ab8fbff9ba;  op2val:0x4cc607ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4b6ae0ab8fbff9ba, 0x4cc607ffffffffff, x1, 197*XLEN/8, x2)

inst_224:
// rs2_val == 0xA10263FFFFFFFFFF and rs1_val == 0xE05474E1F96EAFFA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe05474e1f96eaffa;  op2val:0xa10263ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe05474e1f96eaffa, 0xa10263ffffffffff, x1, 198*XLEN/8, x2)

inst_225:
// rs2_val == 0x1CE551FFFFFFFFFF and rs1_val == 0x8DF80A8D112154CC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8df80a8d112154cc;  op2val:0x1ce551ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8df80a8d112154cc, 0x1ce551ffffffffff, x1, 199*XLEN/8, x2)

inst_226:
// rs2_val == 0x365EE0FFFFFFFFFF and rs1_val == 0x0C9DC3EC2F6AA770 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc9dc3ec2f6aa770;  op2val:0x365ee0ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc9dc3ec2f6aa770, 0x365ee0ffffffffff, x1, 200*XLEN/8, x2)

inst_227:
// rs2_val == 0x6FFD7D7FFFFFFFFF and rs1_val == 0xCC11F70E14A7DD83 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcc11f70e14a7dd83;  op2val:0x6ffd7d7fffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcc11f70e14a7dd83, 0x6ffd7d7fffffffff, x1, 201*XLEN/8, x2)

inst_228:
// rs2_val == 0x83653EBFFFFFFFFF and rs1_val == 0x1C8073CF27B012A3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1c8073cf27b012a3;  op2val:0x83653ebfffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1c8073cf27b012a3, 0x83653ebfffffffff, x1, 202*XLEN/8, x2)

inst_229:
// rs2_val == 0x9EF4CE9FFFFFFFFF and rs1_val == 0x2C9AAA4CBFFB6C5C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2c9aaa4cbffb6c5c;  op2val:0x9ef4ce9fffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2c9aaa4cbffb6c5c, 0x9ef4ce9fffffffff, x1, 203*XLEN/8, x2)

inst_230:
// rs2_val == 0xC680322FFFFFFFFF and rs1_val == 0x4E0AA5616D2DB9E3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4e0aa5616d2db9e3;  op2val:0xc680322fffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4e0aa5616d2db9e3, 0xc680322fffffffff, x1, 204*XLEN/8, x2)

inst_231:
// rs2_val == 0x3EA485F7FFFFFFFF and rs1_val == 0xE820BA0F6AEDE476 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe820ba0f6aede476;  op2val:0x3ea485f7ffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe820ba0f6aede476, 0x3ea485f7ffffffff, x1, 205*XLEN/8, x2)

inst_232:
// rs2_val == 0xBE4349E3FFFFFFFF and rs1_val == 0x36370FCCB733640C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x36370fccb733640c;  op2val:0xbe4349e3ffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x36370fccb733640c, 0xbe4349e3ffffffff, x1, 206*XLEN/8, x2)

inst_233:
// rs2_val == 0xA6E915BDFFFFFFFF and rs1_val == 0x292268C615A03321 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x292268c615a03321;  op2val:0xa6e915bdffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x292268c615a03321, 0xa6e915bdffffffff, x1, 207*XLEN/8, x2)

inst_234:
// rs2_val == 0x1E903AD2FFFFFFFF and rs1_val == 0xC0A83D81F7192179 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc0a83d81f7192179;  op2val:0x1e903ad2ffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc0a83d81f7192179, 0x1e903ad2ffffffff, x1, 208*XLEN/8, x2)

inst_235:
// rs2_val == 0xCEE6C9487FFFFFFF and rs1_val == 0x19A55FA94E2E7447 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x19a55fa94e2e7447;  op2val:0xcee6c9487fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x19a55fa94e2e7447, 0xcee6c9487fffffff, x1, 209*XLEN/8, x2)

inst_236:
// rs2_val == 0x710733FE3FFFFFFF and rs1_val == 0x1AB5FFE4994902CA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1ab5ffe4994902ca;  op2val:0x710733fe3fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1ab5ffe4994902ca, 0x710733fe3fffffff, x1, 210*XLEN/8, x2)

inst_237:
// rs2_val == 0xE52FB0819FFFFFFF and rs1_val == 0x8B89800093547E48 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8b89800093547e48;  op2val:0xe52fb0819fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8b89800093547e48, 0xe52fb0819fffffff, x1, 211*XLEN/8, x2)

inst_238:
// rs2_val == 0xB5BB3B242FFFFFFF and rs1_val == 0x3BBC81CE7A44C8AD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3bbc81ce7a44c8ad;  op2val:0xb5bb3b242fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3bbc81ce7a44c8ad, 0xb5bb3b242fffffff, x1, 212*XLEN/8, x2)

inst_239:
// rs2_val == 0xD756C0F057FFFFFF and rs1_val == 0x1FF934CB5D1139A4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1ff934cb5d1139a4;  op2val:0xd756c0f057ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1ff934cb5d1139a4, 0xd756c0f057ffffff, x1, 213*XLEN/8, x2)

inst_240:
// rs2_val == 0xE30AA425B3FFFFFF and rs1_val == 0xD183808ADB0BBA39 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd183808adb0bba39;  op2val:0xe30aa425b3ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd183808adb0bba39, 0xe30aa425b3ffffff, x1, 214*XLEN/8, x2)

inst_241:
// rs2_val == 0x03EB3F6C71FFFFFF and rs1_val == 0xEB9A53986BE07552 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xeb9a53986be07552;  op2val:0x3eb3f6c71ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xeb9a53986be07552, 0x3eb3f6c71ffffff, x1, 215*XLEN/8, x2)

inst_242:
// rs2_val == 0x004FB0B2B4FFFFFF and rs1_val == 0x853ED27FA1D02D4D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x853ed27fa1d02d4d;  op2val:0x4fb0b2b4ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x853ed27fa1d02d4d, 0x4fb0b2b4ffffff, x1, 216*XLEN/8, x2)

inst_243:
// rs2_val == 0x590C01C43E7FFFFF and rs1_val == 0x04EF06236FB0F1C0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4ef06236fb0f1c0;  op2val:0x590c01c43e7fffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4ef06236fb0f1c0, 0x590c01c43e7fffff, x1, 217*XLEN/8, x2)

inst_244:
// rs2_val == 0x5415A0435CBFFFFF and rs1_val == 0x1B607A8D3161B010 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1b607a8d3161b010;  op2val:0x5415a0435cbfffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1b607a8d3161b010, 0x5415a0435cbfffff, x1, 218*XLEN/8, x2)

inst_245:
// rs2_val == 0x28F20E42BDDFFFFF and rs1_val == 0xF17DC31D6D64E7AD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf17dc31d6d64e7ad;  op2val:0x28f20e42bddfffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf17dc31d6d64e7ad, 0x28f20e42bddfffff, x1, 219*XLEN/8, x2)

inst_246:
// rs2_val == 0xF4F31A2BCC6FFFFF and rs1_val == 0x7DE7F4261F893D02 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7de7f4261f893d02;  op2val:0xf4f31a2bcc6fffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7de7f4261f893d02, 0xf4f31a2bcc6fffff, x1, 220*XLEN/8, x2)

inst_247:
// rs2_val == 0x355695E68D37FFFF and rs1_val == 0x6673663C6DD54CB4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6673663c6dd54cb4;  op2val:0x355695e68d37ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6673663c6dd54cb4, 0x355695e68d37ffff, x1, 221*XLEN/8, x2)

inst_248:
// rs2_val == 0x8E2B5C7E1493FFFF and rs1_val == 0x66A4E1F83E0AD875 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x66a4e1f83e0ad875;  op2val:0x8e2b5c7e1493ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x66a4e1f83e0ad875, 0x8e2b5c7e1493ffff, x1, 222*XLEN/8, x2)

inst_249:
// rs2_val == 0xF4EE2270D581FFFF and rs1_val == 0xC8738F370C99C902 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc8738f370c99c902;  op2val:0xf4ee2270d581ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc8738f370c99c902, 0xf4ee2270d581ffff, x1, 223*XLEN/8, x2)

inst_250:
// rs2_val == 0x1A5B9CCD70C2FFFF and rs1_val == 0xB8F66A4F832CBAFF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb8f66a4f832cbaff;  op2val:0x1a5b9ccd70c2ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb8f66a4f832cbaff, 0x1a5b9ccd70c2ffff, x1, 224*XLEN/8, x2)

inst_251:
// rs2_val == 0x249808D0BE5F7FFF and rs1_val == 0x06E1DD67303CA1D0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e1dd67303ca1d0;  op2val:0x249808d0be5f7fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e1dd67303ca1d0, 0x249808d0be5f7fff, x1, 225*XLEN/8, x2)

inst_252:
// rs2_val == 0x6F3B6FA6F8DD3FFF and rs1_val == 0x7FB1AC680B72BB91 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7fb1ac680b72bb91;  op2val:0x6f3b6fa6f8dd3fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7fb1ac680b72bb91, 0x6f3b6fa6f8dd3fff, x1, 226*XLEN/8, x2)

inst_253:
// rs2_val == 0x6CB1BE29E6371FFF and rs1_val == 0xC6592AAD0AE95557 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc6592aad0ae95557;  op2val:0x6cb1be29e6371fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc6592aad0ae95557, 0x6cb1be29e6371fff, x1, 227*XLEN/8, x2)

inst_254:
// rs2_val == 0xBD7A505430D04FFF and rs1_val == 0x757E5228E88130BA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x757e5228e88130ba;  op2val:0xbd7a505430d04fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x757e5228e88130ba, 0xbd7a505430d04fff, x1, 228*XLEN/8, x2)

inst_255:
// rs2_val == 0x9DA9065DD92F97FF and rs1_val == 0x64AD8CD4914AAD80 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x64ad8cd4914aad80;  op2val:0x9da9065dd92f97ff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x64ad8cd4914aad80, 0x9da9065dd92f97ff, x1, 229*XLEN/8, x2)

inst_256:
// rs2_val == 0x67212B9D64092BFF and rs1_val == 0x6C456BFCE10E43D4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6c456bfce10e43d4;  op2val:0x67212b9d64092bff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6c456bfce10e43d4, 0x67212b9d64092bff, x1, 230*XLEN/8, x2)

inst_257:
// rs2_val == 0x097CEAE809FC3DFF and rs1_val == 0x0440EA57B2FE4FC2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x440ea57b2fe4fc2;  op2val:0x97ceae809fc3dff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x440ea57b2fe4fc2, 0x97ceae809fc3dff, x1, 231*XLEN/8, x2)

inst_258:
// rs2_val == 0xB95BF2E9865292FF and rs1_val == 0x9CA99ACFAF698A52 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9ca99acfaf698a52;  op2val:0xb95bf2e9865292ff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9ca99acfaf698a52, 0xb95bf2e9865292ff, x1, 232*XLEN/8, x2)

inst_259:
// rs2_val == 0xEA7BD40266EEF97F and rs1_val == 0x81294A71DFE4C7A5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x81294a71dfe4c7a5;  op2val:0xea7bd40266eef97f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x81294a71dfe4c7a5, 0xea7bd40266eef97f, x1, 233*XLEN/8, x2)

inst_260:
// rs2_val == 0xF5858BCCDD9329BF and rs1_val == 0x1606F8CC740E023D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1606f8cc740e023d;  op2val:0xf5858bccdd9329bf
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1606f8cc740e023d, 0xf5858bccdd9329bf, x1, 234*XLEN/8, x2)

inst_261:
// rs2_val == 0x7D572379F81A1E9F and rs1_val == 0xA0FA6A24963AB5D7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa0fa6a24963ab5d7;  op2val:0x7d572379f81a1e9f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa0fa6a24963ab5d7, 0x7d572379f81a1e9f, x1, 235*XLEN/8, x2)

inst_262:
// rs2_val == 0xEF900FB814D5348F and rs1_val == 0x0368A58382283AEE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x368a58382283aee;  op2val:0xef900fb814d5348f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x368a58382283aee, 0xef900fb814d5348f, x1, 236*XLEN/8, x2)

inst_263:
// rs2_val == 0xCC31D1DCB5FF09A7 and rs1_val == 0xA3A304857D3AED38 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa3a304857d3aed38;  op2val:0xcc31d1dcb5ff09a7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa3a304857d3aed38, 0xcc31d1dcb5ff09a7, x1, 237*XLEN/8, x2)

inst_264:
// rs2_val == 0xB93AC7EE3D56AC8B and rs1_val == 0x070202441D19DF81 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x70202441d19df81;  op2val:0xb93ac7ee3d56ac8b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x70202441d19df81, 0xb93ac7ee3d56ac8b, x1, 238*XLEN/8, x2)

inst_265:
// rs2_val == 0xEF6855EDB3AA58E5 and rs1_val == 0xDEDBF20A8F64B9BC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdedbf20a8f64b9bc;  op2val:0xef6855edb3aa58e5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdedbf20a8f64b9bc, 0xef6855edb3aa58e5, x1, 239*XLEN/8, x2)

inst_266:
// rs2_val == 0x7AF0702B7727BD62 and rs1_val == 0x33BFB0E80AAB4E37 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x33bfb0e80aab4e37;  op2val:0x7af0702b7727bd62
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x33bfb0e80aab4e37, 0x7af0702b7727bd62, x1, 240*XLEN/8, x2)

inst_267:
// rs1_val == 0x0000000000000000 and rs2_val == 0x7734D7C1C7FDE805 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x7734d7c1c7fde805
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x0, 0x7734d7c1c7fde805, x1, 241*XLEN/8, x2)

inst_268:
// rs1_val == 0x0000000000000001 and rs2_val == 0x309D6B79965EDA32 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x309d6b79965eda32
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1, 0x309d6b79965eda32, x1, 242*XLEN/8, x2)

inst_269:
// rs1_val == 0x0000000000000002 and rs2_val == 0x2FA91425CB008853 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x2fa91425cb008853
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2, 0x2fa91425cb008853, x1, 243*XLEN/8, x2)

inst_270:
// rs1_val == 0x0000000000000007 and rs2_val == 0xA66B0D389D95847E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7;  op2val:0xa66b0d389d95847e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7, 0xa66b0d389d95847e, x1, 244*XLEN/8, x2)

inst_271:
// rs1_val == 0x000000000000000F and rs2_val == 0x8743FEB6D4EA65D0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf;  op2val:0x8743feb6d4ea65d0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf, 0x8743feb6d4ea65d0, x1, 245*XLEN/8, x2)

inst_272:
// rs1_val == 0x0000000000000014 and rs2_val == 0xE12B2B8F30B17D0B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x14;  op2val:0xe12b2b8f30b17d0b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x14, 0xe12b2b8f30b17d0b, x1, 246*XLEN/8, x2)

inst_273:
// rs1_val == 0x0000000000000026 and rs2_val == 0x76C468AEC7321CC0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x26;  op2val:0x76c468aec7321cc0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x26, 0x76c468aec7321cc0, x1, 247*XLEN/8, x2)

inst_274:
// rs1_val == 0x0000000000000079 and rs2_val == 0xA3EA284D3BD03346 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x79;  op2val:0xa3ea284d3bd03346
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x79, 0xa3ea284d3bd03346, x1, 248*XLEN/8, x2)

inst_275:
// rs1_val == 0x00000000000000AA and rs2_val == 0x15C1D2DFA9964AEF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaa;  op2val:0x15c1d2dfa9964aef
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaa, 0x15c1d2dfa9964aef, x1, 249*XLEN/8, x2)

inst_276:
// rs1_val == 0x0000000000000191 and rs2_val == 0xB53302FC154CD2AA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x191;  op2val:0xb53302fc154cd2aa
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x191, 0xb53302fc154cd2aa, x1, 250*XLEN/8, x2)

inst_277:
// rs1_val == 0x00000000000003FD and rs2_val == 0x834C687A3ACB6266 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3fd;  op2val:0x834c687a3acb6266
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3fd, 0x834c687a3acb6266, x1, 251*XLEN/8, x2)

inst_278:
// rs1_val == 0x000000000000065B and rs2_val == 0xC42B7170902A174F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x65b;  op2val:0xc42b7170902a174f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x65b, 0xc42b7170902a174f, x1, 252*XLEN/8, x2)

inst_279:
// rs1_val == 0x0000000000000A12 and rs2_val == 0x4A789CB3D8B9B45C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa12;  op2val:0x4a789cb3d8b9b45c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa12, 0x4a789cb3d8b9b45c, x1, 253*XLEN/8, x2)

inst_280:
// rs1_val == 0x0000000000001AAB and rs2_val == 0x36A80BDF0023B682 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1aab;  op2val:0x36a80bdf0023b682
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1aab, 0x36a80bdf0023b682, x1, 254*XLEN/8, x2)

inst_281:
// rs1_val == 0x0000000000002242 and rs2_val == 0x785116080D650372 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2242;  op2val:0x785116080d650372
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2242, 0x785116080d650372, x1, 255*XLEN/8, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_282:
// rs1_val == 0x0000000000004DAA and rs2_val == 0x6B77730F65BD9ACB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4daa;  op2val:0x6b77730f65bd9acb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4daa, 0x6b77730f65bd9acb, x1, 0*XLEN/8, x2)

inst_283:
// rs1_val == 0x000000000000B80F and rs2_val == 0x563E9BED45100358 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb80f;  op2val:0x563e9bed45100358
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb80f, 0x563e9bed45100358, x1, 1*XLEN/8, x2)

inst_284:
// rs1_val == 0x0000000000016F3F and rs2_val == 0xF6CDB2F803E0D681 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x16f3f;  op2val:0xf6cdb2f803e0d681
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x16f3f, 0xf6cdb2f803e0d681, x1, 2*XLEN/8, x2)

inst_285:
// rs1_val == 0x000000000002F165 and rs2_val == 0x2274EA181E34B3F1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2f165;  op2val:0x2274ea181e34b3f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2f165, 0x2274ea181e34b3f1, x1, 3*XLEN/8, x2)

inst_286:
// rs1_val == 0x00000000000700AF and rs2_val == 0x0F552C9402CDF2AF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x700af;  op2val:0xf552c9402cdf2af
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x700af, 0xf552c9402cdf2af, x1, 4*XLEN/8, x2)

inst_287:
// rs1_val == 0x0000000000099A1F and rs2_val == 0x21870F0BC4FF64DE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x99a1f;  op2val:0x21870f0bc4ff64de
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x99a1f, 0x21870f0bc4ff64de, x1, 5*XLEN/8, x2)

inst_288:
// rs1_val == 0x00000000001A83B3 and rs2_val == 0x65151C401DD377BF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1a83b3;  op2val:0x65151c401dd377bf
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1a83b3, 0x65151c401dd377bf, x1, 6*XLEN/8, x2)

inst_289:
// rs1_val == 0x000000000034106A and rs2_val == 0x050684BFE286852C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x34106a;  op2val:0x50684bfe286852c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x34106a, 0x50684bfe286852c, x1, 7*XLEN/8, x2)

inst_290:
// rs1_val == 0x0000000000736008 and rs2_val == 0x93B3A3D9A44F576A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x736008;  op2val:0x93b3a3d9a44f576a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x736008, 0x93b3a3d9a44f576a, x1, 8*XLEN/8, x2)

inst_291:
// rs1_val == 0x0000000000C793F6 and rs2_val == 0x36971E1B2577C1EC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc793f6;  op2val:0x36971e1b2577c1ec
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc793f6, 0x36971e1b2577c1ec, x1, 9*XLEN/8, x2)

inst_292:
// rs1_val == 0x00000000011E7A61 and rs2_val == 0x9C3ECB54C5CEFDD8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x11e7a61;  op2val:0x9c3ecb54c5cefdd8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x11e7a61, 0x9c3ecb54c5cefdd8, x1, 10*XLEN/8, x2)

inst_293:
// rs1_val == 0x00000000028DD9F4 and rs2_val == 0x12CA3F7062DC08D6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x28dd9f4;  op2val:0x12ca3f7062dc08d6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x28dd9f4, 0x12ca3f7062dc08d6, x1, 11*XLEN/8, x2)

inst_294:
// rs1_val == 0x000000000711EB58 and rs2_val == 0xA2F7647A952E1B8B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x711eb58;  op2val:0xa2f7647a952e1b8b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x711eb58, 0xa2f7647a952e1b8b, x1, 12*XLEN/8, x2)

inst_295:
// rs1_val == 0x000000000BF8670E and rs2_val == 0xB9B338EB3FDF2348 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbf8670e;  op2val:0xb9b338eb3fdf2348
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbf8670e, 0xb9b338eb3fdf2348, x1, 13*XLEN/8, x2)

inst_296:
// rs1_val == 0x000000001891DD3D and rs2_val == 0xE1D7300F6361B9F8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1891dd3d;  op2val:0xe1d7300f6361b9f8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1891dd3d, 0xe1d7300f6361b9f8, x1, 14*XLEN/8, x2)

inst_297:
// rs1_val == 0x000000003A8137EA and rs2_val == 0x0C2282666BE49EE7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3a8137ea;  op2val:0xc2282666be49ee7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3a8137ea, 0xc2282666be49ee7, x1, 15*XLEN/8, x2)

inst_298:
// rs1_val == 0x000000005BEA8594 and rs2_val == 0xF6724BA08329C05B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5bea8594;  op2val:0xf6724ba08329c05b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5bea8594, 0xf6724ba08329c05b, x1, 16*XLEN/8, x2)

inst_299:
// rs1_val == 0x00000000BD0840FC and rs2_val == 0x64409DDBB45F51C3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbd0840fc;  op2val:0x64409ddbb45f51c3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbd0840fc, 0x64409ddbb45f51c3, x1, 17*XLEN/8, x2)

inst_300:
// rs1_val == 0x000000016BBA8D22 and rs2_val == 0x98B20411E7A28CBD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x16bba8d22;  op2val:0x98b20411e7a28cbd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x16bba8d22, 0x98b20411e7a28cbd, x1, 18*XLEN/8, x2)

inst_301:
// rs1_val == 0x000000024B1E943F and rs2_val == 0x119B4FE5FA285A0D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x24b1e943f;  op2val:0x119b4fe5fa285a0d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x24b1e943f, 0x119b4fe5fa285a0d, x1, 19*XLEN/8, x2)

inst_302:
// rs1_val == 0x000000063A782EBC and rs2_val == 0x9D42F6709DA9B14D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x63a782ebc;  op2val:0x9d42f6709da9b14d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x63a782ebc, 0x9d42f6709da9b14d, x1, 20*XLEN/8, x2)

inst_303:
// rs1_val == 0x0000000E47BC7549 and rs2_val == 0xEA3A0683EAD81DCD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe47bc7549;  op2val:0xea3a0683ead81dcd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe47bc7549, 0xea3a0683ead81dcd, x1, 21*XLEN/8, x2)

inst_304:
// rs1_val == 0x00000015BFBD7D15 and rs2_val == 0x44E9E4A511B41900 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x15bfbd7d15;  op2val:0x44e9e4a511b41900
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x15bfbd7d15, 0x44e9e4a511b41900, x1, 22*XLEN/8, x2)

inst_305:
// rs1_val == 0x000000287219C1DB and rs2_val == 0x0BEDDB070F7A0443 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x287219c1db;  op2val:0xbeddb070f7a0443
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x287219c1db, 0xbeddb070f7a0443, x1, 23*XLEN/8, x2)

inst_306:
// rs1_val == 0x0000004A482EA761 and rs2_val == 0x1799E72821AF214A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4a482ea761;  op2val:0x1799e72821af214a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4a482ea761, 0x1799e72821af214a, x1, 24*XLEN/8, x2)

inst_307:
// rs1_val == 0x000000AA236EBA20 and rs2_val == 0xFB019DF47349DBC4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaa236eba20;  op2val:0xfb019df47349dbc4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaa236eba20, 0xfb019df47349dbc4, x1, 25*XLEN/8, x2)

inst_308:
// rs1_val == 0x0000012BA82CB2CE and rs2_val == 0xEC7038C908FB09A0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x12ba82cb2ce;  op2val:0xec7038c908fb09a0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x12ba82cb2ce, 0xec7038c908fb09a0, x1, 26*XLEN/8, x2)

inst_309:
// rs1_val == 0x000002FA798C06FF and rs2_val == 0xB372C56B5B8349CE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2fa798c06ff;  op2val:0xb372c56b5b8349ce
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2fa798c06ff, 0xb372c56b5b8349ce, x1, 27*XLEN/8, x2)

inst_310:
// rs1_val == 0x000006E3F6782942 and rs2_val == 0x7B73CCF813284C79 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e3f6782942;  op2val:0x7b73ccf813284c79
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e3f6782942, 0x7b73ccf813284c79, x1, 28*XLEN/8, x2)

inst_311:
// rs1_val == 0x00000C1FBB01EA76 and rs2_val == 0x13446DF8128AE84A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc1fbb01ea76;  op2val:0x13446df8128ae84a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc1fbb01ea76, 0x13446df8128ae84a, x1, 29*XLEN/8, x2)

inst_312:
// rs1_val == 0x00001FA08BCCE7CE and rs2_val == 0xEA3D9BE7F6A00758 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1fa08bcce7ce;  op2val:0xea3d9be7f6a00758
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1fa08bcce7ce, 0xea3d9be7f6a00758, x1, 30*XLEN/8, x2)

inst_313:
// rs1_val == 0x0000239D5A11CCA6 and rs2_val == 0xDD0C8B9407BFC096 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x239d5a11cca6;  op2val:0xdd0c8b9407bfc096
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x239d5a11cca6, 0xdd0c8b9407bfc096, x1, 31*XLEN/8, x2)

inst_314:
// rs1_val == 0x0000676692A38329 and rs2_val == 0xA98A372E9FFD6A18 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x676692a38329;  op2val:0xa98a372e9ffd6a18
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x676692a38329, 0xa98a372e9ffd6a18, x1, 32*XLEN/8, x2)

inst_315:
// rs1_val == 0x0000F1B26111B4B6 and rs2_val == 0x9BDEB398032FBCE3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf1b26111b4b6;  op2val:0x9bdeb398032fbce3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf1b26111b4b6, 0x9bdeb398032fbce3, x1, 33*XLEN/8, x2)

inst_316:
// rs1_val == 0x0001BC4414881EDD and rs2_val == 0xE13A099641D812CD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1bc4414881edd;  op2val:0xe13a099641d812cd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1bc4414881edd, 0xe13a099641d812cd, x1, 34*XLEN/8, x2)

inst_317:
// rs1_val == 0x0002B3DBBA6BC77D and rs2_val == 0x94B953EDB1B43D07 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2b3dbba6bc77d;  op2val:0x94b953edb1b43d07
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2b3dbba6bc77d, 0x94b953edb1b43d07, x1, 35*XLEN/8, x2)

inst_318:
// rs1_val == 0x0006690070C61509 and rs2_val == 0x8A8F7AEFD69F6B16 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6690070c61509;  op2val:0x8a8f7aefd69f6b16
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6690070c61509, 0x8a8f7aefd69f6b16, x1, 36*XLEN/8, x2)

inst_319:
// rs1_val == 0x000DC63D84C955F2 and rs2_val == 0x07A04E6483B852D7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdc63d84c955f2;  op2val:0x7a04e6483b852d7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdc63d84c955f2, 0x7a04e6483b852d7, x1, 37*XLEN/8, x2)

inst_320:
// rs1_val == 0x00159ECB99EDD4D2 and rs2_val == 0x05B4D7567B1FFC6A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x159ecb99edd4d2;  op2val:0x5b4d7567b1ffc6a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x159ecb99edd4d2, 0x5b4d7567b1ffc6a, x1, 38*XLEN/8, x2)

inst_321:
// rs1_val == 0x00260FDDF517E383 and rs2_val == 0x5E320F4A02E50777 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x260fddf517e383;  op2val:0x5e320f4a02e50777
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x260fddf517e383, 0x5e320f4a02e50777, x1, 39*XLEN/8, x2)

inst_322:
// rs1_val == 0x005A629624AA1735 and rs2_val == 0x53B3B0FF3DD1E044 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5a629624aa1735;  op2val:0x53b3b0ff3dd1e044
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5a629624aa1735, 0x53b3b0ff3dd1e044, x1, 40*XLEN/8, x2)

inst_323:
// rs1_val == 0x00A746A4AA785C62 and rs2_val == 0xA2592B9D32D1464E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa746a4aa785c62;  op2val:0xa2592b9d32d1464e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa746a4aa785c62, 0xa2592b9d32d1464e, x1, 41*XLEN/8, x2)

inst_324:
// rs1_val == 0x01554174CDC02ECE and rs2_val == 0xEA0A668AC12F694D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1554174cdc02ece;  op2val:0xea0a668ac12f694d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1554174cdc02ece, 0xea0a668ac12f694d, x1, 42*XLEN/8, x2)

inst_325:
// rs1_val == 0x02D51BFFE1594DC5 and rs2_val == 0x51054839EBB9C596 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2d51bffe1594dc5;  op2val:0x51054839ebb9c596
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2d51bffe1594dc5, 0x51054839ebb9c596, x1, 43*XLEN/8, x2)

inst_326:
// rs1_val == 0x06720C5422DC73AC and rs2_val == 0xD945BBF3E5498256 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6720c5422dc73ac;  op2val:0xd945bbf3e5498256
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6720c5422dc73ac, 0xd945bbf3e5498256, x1, 44*XLEN/8, x2)

inst_327:
// rs1_val == 0x086B6A04B6125E0D and rs2_val == 0xFAF8DFCDF33335B6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x86b6a04b6125e0d;  op2val:0xfaf8dfcdf33335b6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x86b6a04b6125e0d, 0xfaf8dfcdf33335b6, x1, 45*XLEN/8, x2)

inst_328:
// rs1_val == 0x1B4C0859D26542EF and rs2_val == 0x735DC3271CE262D6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1b4c0859d26542ef;  op2val:0x735dc3271ce262d6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1b4c0859d26542ef, 0x735dc3271ce262d6, x1, 46*XLEN/8, x2)

inst_329:
// rs1_val == 0x2CFCC3964671120E and rs2_val == 0xD4B59C0536CDF8A1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2cfcc3964671120e;  op2val:0xd4b59c0536cdf8a1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2cfcc3964671120e, 0xd4b59c0536cdf8a1, x1, 47*XLEN/8, x2)

inst_330:
// rs1_val == 0x6030130961EEAC38 and rs2_val == 0x520235BC73D58E1C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6030130961eeac38;  op2val:0x520235bc73d58e1c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6030130961eeac38, 0x520235bc73d58e1c, x1, 48*XLEN/8, x2)

inst_331:
// rs1_val == 0x880F73BBD42779F6 and rs2_val == 0x9211A8D847F439F3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x880f73bbd42779f6;  op2val:0x9211a8d847f439f3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x880f73bbd42779f6, 0x9211a8d847f439f3, x1, 49*XLEN/8, x2)

inst_332:
// rs2_val == 0x0000000000000000 and rs1_val == 0x9064DBD9CAA0A141 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9064dbd9caa0a141;  op2val:0x0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9064dbd9caa0a141, 0x0, x1, 50*XLEN/8, x2)

inst_333:
// rs2_val == 0x0000000000000001 and rs1_val == 0x746FE5B967BA7848 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x746fe5b967ba7848;  op2val:0x1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x746fe5b967ba7848, 0x1, x1, 51*XLEN/8, x2)

inst_334:
// rs2_val == 0x0000000000000003 and rs1_val == 0x44339C10D4652689 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x44339c10d4652689;  op2val:0x3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x44339c10d4652689, 0x3, x1, 52*XLEN/8, x2)

inst_335:
// rs2_val == 0x0000000000000004 and rs1_val == 0x1D849E2BA111F5FB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d849e2ba111f5fb;  op2val:0x4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d849e2ba111f5fb, 0x4, x1, 53*XLEN/8, x2)

inst_336:
// rs2_val == 0x000000000000000D and rs1_val == 0xAF3AEAA313F5BC90 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaf3aeaa313f5bc90;  op2val:0xd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaf3aeaa313f5bc90, 0xd, x1, 54*XLEN/8, x2)

inst_337:
// rs2_val == 0x000000000000001E and rs1_val == 0x418BFBB079A2ED17 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x418bfbb079a2ed17;  op2val:0x1e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x418bfbb079a2ed17, 0x1e, x1, 55*XLEN/8, x2)

inst_338:
// rs2_val == 0x0000000000000032 and rs1_val == 0x0942C3FBB6D3E879 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x942c3fbb6d3e879;  op2val:0x32
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x942c3fbb6d3e879, 0x32, x1, 56*XLEN/8, x2)

inst_339:
// rs2_val == 0x0000000000000042 and rs1_val == 0x28C0D4AEC196C5C2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x28c0d4aec196c5c2;  op2val:0x42
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x28c0d4aec196c5c2, 0x42, x1, 57*XLEN/8, x2)

inst_340:
// rs2_val == 0x00000000000000AD and rs1_val == 0xE7FF25B9B3257DDA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe7ff25b9b3257dda;  op2val:0xad
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe7ff25b9b3257dda, 0xad, x1, 58*XLEN/8, x2)

inst_341:
// rs2_val == 0x000000000000014D and rs1_val == 0x2141C6D163522556 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2141c6d163522556;  op2val:0x14d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2141c6d163522556, 0x14d, x1, 59*XLEN/8, x2)

inst_342:
// rs2_val == 0x0000000000000216 and rs1_val == 0x57D53E43F1BAE498 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x57d53e43f1bae498;  op2val:0x216
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x57d53e43f1bae498, 0x216, x1, 60*XLEN/8, x2)

inst_343:
// rs2_val == 0x0000000000000456 and rs1_val == 0x3473F51FFB7A3B3B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3473f51ffb7a3b3b;  op2val:0x456
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3473f51ffb7a3b3b, 0x456, x1, 61*XLEN/8, x2)

inst_344:
// rs2_val == 0x0000000000000E5E and rs1_val == 0xB7B8B1A0EC9A5DC8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb7b8b1a0ec9a5dc8;  op2val:0xe5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb7b8b1a0ec9a5dc8, 0xe5e, x1, 62*XLEN/8, x2)

inst_345:
// rs2_val == 0x0000000000001AD8 and rs1_val == 0xFA342B15167CD62E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfa342b15167cd62e;  op2val:0x1ad8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfa342b15167cd62e, 0x1ad8, x1, 63*XLEN/8, x2)

inst_346:
// rs2_val == 0x0000000000003CDC and rs1_val == 0xEEA93B6FCA71067B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xeea93b6fca71067b;  op2val:0x3cdc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xeea93b6fca71067b, 0x3cdc, x1, 64*XLEN/8, x2)

inst_347:
// rs2_val == 0x0000000000004632 and rs1_val == 0xDB14A009B7E06D03 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdb14a009b7e06d03;  op2val:0x4632
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdb14a009b7e06d03, 0x4632, x1, 65*XLEN/8, x2)

inst_348:
// rs2_val == 0x000000000000C1F1 and rs1_val == 0x0981ABB61530959B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x981abb61530959b;  op2val:0xc1f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x981abb61530959b, 0xc1f1, x1, 66*XLEN/8, x2)

inst_349:
// rs2_val == 0x000000000001DB50 and rs1_val == 0xC4AAF35A6BE1FCDE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc4aaf35a6be1fcde;  op2val:0x1db50
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc4aaf35a6be1fcde, 0x1db50, x1, 67*XLEN/8, x2)

inst_350:
// rs2_val == 0x0000000000035BC3 and rs1_val == 0x106607DCDE17B009 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x106607dcde17b009;  op2val:0x35bc3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x106607dcde17b009, 0x35bc3, x1, 68*XLEN/8, x2)

inst_351:
// rs2_val == 0x0000000000079DD3 and rs1_val == 0x887AAE6A2C42EEAC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x887aae6a2c42eeac;  op2val:0x79dd3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x887aae6a2c42eeac, 0x79dd3, x1, 69*XLEN/8, x2)

inst_352:
// rs2_val == 0x00000000000BEEC1 and rs1_val == 0x23F7D227EA7F7301 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x23f7d227ea7f7301;  op2val:0xbeec1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x23f7d227ea7f7301, 0xbeec1, x1, 70*XLEN/8, x2)

inst_353:
// rs2_val == 0x00000000001F99DE and rs1_val == 0xB06670AAF2FBC7F9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb06670aaf2fbc7f9;  op2val:0x1f99de
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb06670aaf2fbc7f9, 0x1f99de, x1, 71*XLEN/8, x2)

inst_354:
// rs2_val == 0x000000000021BF99 and rs1_val == 0xA38D0F398FC0819E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa38d0f398fc0819e;  op2val:0x21bf99
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa38d0f398fc0819e, 0x21bf99, x1, 72*XLEN/8, x2)

inst_355:
// rs2_val == 0x00000000005516A9 and rs1_val == 0x3372969F7F65D54D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3372969f7f65d54d;  op2val:0x5516a9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3372969f7f65d54d, 0x5516a9, x1, 73*XLEN/8, x2)

inst_356:
// rs2_val == 0x0000000000B0FBCE and rs1_val == 0x7DB4D3B51F36DDF8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7db4d3b51f36ddf8;  op2val:0xb0fbce
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7db4d3b51f36ddf8, 0xb0fbce, x1, 74*XLEN/8, x2)

inst_357:
// rs2_val == 0x0000000001E48237 and rs1_val == 0x44EB31E46776FD34 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x44eb31e46776fd34;  op2val:0x1e48237
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x44eb31e46776fd34, 0x1e48237, x1, 75*XLEN/8, x2)

inst_358:
// rs2_val == 0x0000000003211CB3 and rs1_val == 0x56F552452080F2AC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x56f552452080f2ac;  op2val:0x3211cb3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x56f552452080f2ac, 0x3211cb3, x1, 76*XLEN/8, x2)

inst_359:
// rs2_val == 0x0000000006A1096C and rs1_val == 0x866534CD79FE0C5F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x866534cd79fe0c5f;  op2val:0x6a1096c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x866534cd79fe0c5f, 0x6a1096c, x1, 77*XLEN/8, x2)

inst_360:
// rs2_val == 0x000000000BCE1A9C and rs1_val == 0x9E2E5BE56B66EC95 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9e2e5be56b66ec95;  op2val:0xbce1a9c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9e2e5be56b66ec95, 0xbce1a9c, x1, 78*XLEN/8, x2)

inst_361:
// rs2_val == 0x000000001CDE8A08 and rs1_val == 0x05D54CB2FA2F0AFD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5d54cb2fa2f0afd;  op2val:0x1cde8a08
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5d54cb2fa2f0afd, 0x1cde8a08, x1, 79*XLEN/8, x2)

inst_362:
// rs2_val == 0x0000000031B0F86A and rs1_val == 0x1AD9C6D87FB2D83B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1ad9c6d87fb2d83b;  op2val:0x31b0f86a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1ad9c6d87fb2d83b, 0x31b0f86a, x1, 80*XLEN/8, x2)

inst_363:
// rs2_val == 0x000000007B1BDA5E and rs1_val == 0x6FD08D91E0F48D2F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6fd08d91e0f48d2f;  op2val:0x7b1bda5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6fd08d91e0f48d2f, 0x7b1bda5e, x1, 81*XLEN/8, x2)

inst_364:
// rs2_val == 0x00000000E0303F46 and rs1_val == 0xA372959988B48922 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa372959988b48922;  op2val:0xe0303f46
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa372959988b48922, 0xe0303f46, x1, 82*XLEN/8, x2)

inst_365:
// rs2_val == 0x0000000187951CB6 and rs1_val == 0xDB54E659962E5835 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdb54e659962e5835;  op2val:0x187951cb6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdb54e659962e5835, 0x187951cb6, x1, 83*XLEN/8, x2)

inst_366:
// rs2_val == 0x000000023B8F801D and rs1_val == 0xE715DFE558FC0A18 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe715dfe558fc0a18;  op2val:0x23b8f801d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe715dfe558fc0a18, 0x23b8f801d, x1, 84*XLEN/8, x2)

inst_367:
// rs2_val == 0x0000000650DD1AF1 and rs1_val == 0x426E6DDF1690A1F7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x426e6ddf1690a1f7;  op2val:0x650dd1af1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x426e6ddf1690a1f7, 0x650dd1af1, x1, 85*XLEN/8, x2)

inst_368:
// rs2_val == 0x0000000818D6084E and rs1_val == 0xF0F1D8DBD508FF34 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf0f1d8dbd508ff34;  op2val:0x818d6084e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf0f1d8dbd508ff34, 0x818d6084e, x1, 86*XLEN/8, x2)

inst_369:
// rs2_val == 0x000000118B142F97 and rs1_val == 0x2041C033B47053DE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2041c033b47053de;  op2val:0x118b142f97
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2041c033b47053de, 0x118b142f97, x1, 87*XLEN/8, x2)

inst_370:
// rs2_val == 0x0000002D671C82FC and rs1_val == 0xCC81F272AF6A3E68 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcc81f272af6a3e68;  op2val:0x2d671c82fc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcc81f272af6a3e68, 0x2d671c82fc, x1, 88*XLEN/8, x2)

inst_371:
// rs2_val == 0x0000007518972E45 and rs1_val == 0xAEB0A94C91E4F834 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaeb0a94c91e4f834;  op2val:0x7518972e45
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaeb0a94c91e4f834, 0x7518972e45, x1, 89*XLEN/8, x2)

inst_372:
// rs2_val == 0x000000A4E94FBD21 and rs1_val == 0x5C7FB02DF7E7A342 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5c7fb02df7e7a342;  op2val:0xa4e94fbd21
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5c7fb02df7e7a342, 0xa4e94fbd21, x1, 90*XLEN/8, x2)

inst_373:
// rs2_val == 0x00000112B467FB8B and rs1_val == 0xC21668AAA2792E75 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc21668aaa2792e75;  op2val:0x112b467fb8b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc21668aaa2792e75, 0x112b467fb8b, x1, 91*XLEN/8, x2)

inst_374:
// rs2_val == 0x0000021380B68BE6 and rs1_val == 0xD53C269BAF88E590 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd53c269baf88e590;  op2val:0x21380b68be6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd53c269baf88e590, 0x21380b68be6, x1, 92*XLEN/8, x2)

inst_375:
// rs2_val == 0x0000044ECD872AB5 and rs1_val == 0x1B2E2CD77B692CDA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1b2e2cd77b692cda;  op2val:0x44ecd872ab5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1b2e2cd77b692cda, 0x44ecd872ab5, x1, 93*XLEN/8, x2)

inst_376:
// rs2_val == 0x00000F99099565A3 and rs1_val == 0x9199165CE7B4B57E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9199165ce7b4b57e;  op2val:0xf99099565a3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9199165ce7b4b57e, 0xf99099565a3, x1, 94*XLEN/8, x2)

inst_377:
// rs2_val == 0x00001BF925849DE3 and rs1_val == 0x1D6D2A932F3DC554 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d6d2a932f3dc554;  op2val:0x1bf925849de3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d6d2a932f3dc554, 0x1bf925849de3, x1, 95*XLEN/8, x2)

inst_378:
// rs2_val == 0x000028A12C2869B7 and rs1_val == 0xFD8464202874799A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfd8464202874799a;  op2val:0x28a12c2869b7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfd8464202874799a, 0x28a12c2869b7, x1, 96*XLEN/8, x2)

inst_379:
// rs2_val == 0x000067A5ED48D09E and rs1_val == 0x946C61BC186211CB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x946c61bc186211cb;  op2val:0x67a5ed48d09e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x946c61bc186211cb, 0x67a5ed48d09e, x1, 97*XLEN/8, x2)

inst_380:
// rs2_val == 0x0000AC0B226B5502 and rs1_val == 0x764A44B4AE53C374 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x764a44b4ae53c374;  op2val:0xac0b226b5502
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x764a44b4ae53c374, 0xac0b226b5502, x1, 98*XLEN/8, x2)

inst_381:
// rs2_val == 0x00013EF0C3C4B8A1 and rs1_val == 0x6410FF8753AAF3B7 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6410ff8753aaf3b7;  op2val:0x13ef0c3c4b8a1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6410ff8753aaf3b7, 0x13ef0c3c4b8a1, x1, 99*XLEN/8, x2)

inst_382:
// rs2_val == 0x0003DB776D2B6540 and rs1_val == 0x6E19CE135AC51CC8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e19ce135ac51cc8;  op2val:0x3db776d2b6540
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e19ce135ac51cc8, 0x3db776d2b6540, x1, 100*XLEN/8, x2)

inst_383:
// rs2_val == 0x0007044699D68912 and rs1_val == 0xD8219C9D0A76F50A 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd8219c9d0a76f50a;  op2val:0x7044699d68912
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd8219c9d0a76f50a, 0x7044699d68912, x1, 101*XLEN/8, x2)

inst_384:
// rs2_val == 0x000FCB682E67A854 and rs1_val == 0x9AD8E8B131F3C57C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9ad8e8b131f3c57c;  op2val:0xfcb682e67a854
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9ad8e8b131f3c57c, 0xfcb682e67a854, x1, 102*XLEN/8, x2)

inst_385:
// rs2_val == 0x00172F2A1844EBD2 and rs1_val == 0x03F26964CAD764C4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3f26964cad764c4;  op2val:0x172f2a1844ebd2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3f26964cad764c4, 0x172f2a1844ebd2, x1, 103*XLEN/8, x2)

inst_386:
// rs2_val == 0x0037193EE4A7C5BA and rs1_val == 0xF088BED0A11F7657 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf088bed0a11f7657;  op2val:0x37193ee4a7c5ba
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf088bed0a11f7657, 0x37193ee4a7c5ba, x1, 104*XLEN/8, x2)

inst_387:
// rs2_val == 0x007FB91691D6CEDD and rs1_val == 0x421D9B0AC32C4DA8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x421d9b0ac32c4da8;  op2val:0x7fb91691d6cedd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x421d9b0ac32c4da8, 0x7fb91691d6cedd, x1, 105*XLEN/8, x2)

inst_388:
// rs2_val == 0x00C42276E94AE4A8 and rs1_val == 0xC3E60E906E803472 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc3e60e906e803472;  op2val:0xc42276e94ae4a8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc3e60e906e803472, 0xc42276e94ae4a8, x1, 106*XLEN/8, x2)

inst_389:
// rs2_val == 0x01F2BAE567DEF006 and rs1_val == 0x2F5031F8B8FE90A6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2f5031f8b8fe90a6;  op2val:0x1f2bae567def006
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2f5031f8b8fe90a6, 0x1f2bae567def006, x1, 107*XLEN/8, x2)

inst_390:
// rs2_val == 0x037ADFD3CC1E0438 and rs1_val == 0x7805EC944D3B8462 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7805ec944d3b8462;  op2val:0x37adfd3cc1e0438
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7805ec944d3b8462, 0x37adfd3cc1e0438, x1, 108*XLEN/8, x2)

inst_391:
// rs2_val == 0x07571FE602B653E5 and rs1_val == 0x9FBFCB0AE717A666 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9fbfcb0ae717a666;  op2val:0x7571fe602b653e5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9fbfcb0ae717a666, 0x7571fe602b653e5, x1, 109*XLEN/8, x2)

inst_392:
// rs2_val == 0x0DE1B9523B6B6093 and rs1_val == 0x567B159A4C8281A2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x567b159a4c8281a2;  op2val:0xde1b9523b6b6093
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x567b159a4c8281a2, 0xde1b9523b6b6093, x1, 110*XLEN/8, x2)

inst_393:
// rs2_val == 0x17F8388BA8E61CB6 and rs1_val == 0xB3852A64369580FF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb3852a64369580ff;  op2val:0x17f8388ba8e61cb6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb3852a64369580ff, 0x17f8388ba8e61cb6, x1, 111*XLEN/8, x2)

inst_394:
// rs2_val == 0x2537437FC3015FA0 and rs1_val == 0x932D823FFAE6F67D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x932d823ffae6f67d;  op2val:0x2537437fc3015fa0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x932d823ffae6f67d, 0x2537437fc3015fa0, x1, 112*XLEN/8, x2)

inst_395:
// rs2_val == 0x5D8A9EA91D617A4D and rs1_val == 0xBD21A9561BA9A6B5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbd21a9561ba9a6b5;  op2val:0x5d8a9ea91d617a4d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbd21a9561ba9a6b5, 0x5d8a9ea91d617a4d, x1, 113*XLEN/8, x2)

inst_396:
// rs2_val == 0xF192D0D741B2BB9A and rs1_val == 0x8138093C66CC59EE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8138093c66cc59ee;  op2val:0xf192d0d741b2bb9a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8138093c66cc59ee, 0xf192d0d741b2bb9a, x1, 114*XLEN/8, x2)

inst_397:
// rs1_val == 0xFFFFFFFFFFFFFF8B and rs2_val == 0xF829D29F3D4806C2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff8b;  op2val:0xf829d29f3d4806c2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff8b, 0xf829d29f3d4806c2, x1, 115*XLEN/8, x2)

inst_398:
// rs1_val == 0xFFFFFFFFFFFFFF11 and rs2_val == 0x953B00B00B54AA22 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff11;  op2val:0x953b00b00b54aa22
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff11, 0x953b00b00b54aa22, x1, 116*XLEN/8, x2)

inst_399:
// rs1_val == 0xFFFFFFFFFFFFFEE4 and rs2_val == 0x894DEAB44D88450F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffee4;  op2val:0x894deab44d88450f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffee4, 0x894deab44d88450f, x1, 117*XLEN/8, x2)

inst_400:
// rs1_val == 0xFFFFFFFFFFFFFD7F and rs2_val == 0x735C076B8C8A18B2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffd7f;  op2val:0x735c076b8c8a18b2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffd7f, 0x735c076b8c8a18b2, x1, 118*XLEN/8, x2)

inst_401:
// rs1_val == 0xFFFFFFFFFFFFFADF and rs2_val == 0x95A4D257A7298C66 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffadf;  op2val:0x95a4d257a7298c66
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffadf, 0x95a4d257a7298c66, x1, 119*XLEN/8, x2)

inst_402:
// rs1_val == 0xFFFFFFFFFFFFF576 and rs2_val == 0xD798C9CF280B11FD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffff576;  op2val:0xd798c9cf280b11fd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffff576, 0xd798c9cf280b11fd, x1, 120*XLEN/8, x2)

inst_403:
// rs1_val == 0xFFFFFFFFFFFFEDB9 and rs2_val == 0x0973E89C3D061437 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffedb9;  op2val:0x973e89c3d061437
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffedb9, 0x973e89c3d061437, x1, 121*XLEN/8, x2)

inst_404:
// rs1_val == 0xFFFFFFFFFFFFC823 and rs2_val == 0x14B91C79DAE98554 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffc823;  op2val:0x14b91c79dae98554
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffc823, 0x14b91c79dae98554, x1, 122*XLEN/8, x2)

inst_405:
// rs1_val == 0xFFFFFFFFFFFF8647 and rs2_val == 0x265039F699EF1857 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff8647;  op2val:0x265039f699ef1857
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffff8647, 0x265039f699ef1857, x1, 123*XLEN/8, x2)

inst_406:
// rs1_val == 0xFFFFFFFFFFFF5EA2 and rs2_val == 0x18BB28E9C5EC6148 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff5ea2;  op2val:0x18bb28e9c5ec6148
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffff5ea2, 0x18bb28e9c5ec6148, x1, 124*XLEN/8, x2)

inst_407:
// rs1_val == 0xFFFFFFFFFFFED06B and rs2_val == 0x7213516D6A013380 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffed06b;  op2val:0x7213516d6a013380
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffed06b, 0x7213516d6a013380, x1, 125*XLEN/8, x2)

inst_408:
// rs1_val == 0xFFFFFFFFFFFC39A2 and rs2_val == 0xDD68F2012DAF94C1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffc39a2;  op2val:0xdd68f2012daf94c1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffc39a2, 0xdd68f2012daf94c1, x1, 126*XLEN/8, x2)

inst_409:
// rs1_val == 0xFFFFFFFFFFFBE2C6 and rs2_val == 0xC70AFC922C9F7296 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffbe2c6;  op2val:0xc70afc922c9f7296
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffbe2c6, 0xc70afc922c9f7296, x1, 127*XLEN/8, x2)

inst_410:
// rs1_val == 0xFFFFFFFFFFF20599 and rs2_val == 0x53FBFF6C58FA6E1C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff20599;  op2val:0x53fbff6c58fa6e1c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffff20599, 0x53fbff6c58fa6e1c, x1, 128*XLEN/8, x2)

inst_411:
// rs1_val == 0xFFFFFFFFFFE22746 and rs2_val == 0xB66B32848B7B5378 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffe22746;  op2val:0xb66b32848b7b5378
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffe22746, 0xb66b32848b7b5378, x1, 129*XLEN/8, x2)

inst_412:
// rs1_val == 0xFFFFFFFFFFC77CDC and rs2_val == 0x3E1C852151C5B8B2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffc77cdc;  op2val:0x3e1c852151c5b8b2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffc77cdc, 0x3e1c852151c5b8b2, x1, 130*XLEN/8, x2)

inst_413:
// rs1_val == 0xFFFFFFFFFF832E3F and rs2_val == 0x9535971C67A07B54 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff832e3f;  op2val:0x9535971c67a07b54
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffff832e3f, 0x9535971c67a07b54, x1, 131*XLEN/8, x2)

inst_414:
// rs1_val == 0xFFFFFFFFFF7D8180 and rs2_val == 0x8525E8A8458DA5EF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7d8180;  op2val:0x8525e8a8458da5ef
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffff7d8180, 0x8525e8a8458da5ef, x1, 132*XLEN/8, x2)

inst_415:
// rs1_val == 0xFFFFFFFFFE238B6B and rs2_val == 0x2A933AD31011EEB4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffe238b6b;  op2val:0x2a933ad31011eeb4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffe238b6b, 0x2a933ad31011eeb4, x1, 133*XLEN/8, x2)

inst_416:
// rs1_val == 0xFFFFFFFFFC9E9033 and rs2_val == 0x66B072B9E5E290BE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffc9e9033;  op2val:0x66b072b9e5e290be
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffc9e9033, 0x66b072b9e5e290be, x1, 134*XLEN/8, x2)

inst_417:
// rs1_val == 0xFFFFFFFFFBA1A6CB and rs2_val == 0x8F0846A22A71A2AD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffba1a6cb;  op2val:0x8f0846a22a71a2ad
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffba1a6cb, 0x8f0846a22a71a2ad, x1, 135*XLEN/8, x2)

inst_418:
// rs1_val == 0xFFFFFFFFF14135A5 and rs2_val == 0xDF3C45B4090A96C9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff14135a5;  op2val:0xdf3c45b4090a96c9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffff14135a5, 0xdf3c45b4090a96c9, x1, 136*XLEN/8, x2)

inst_419:
// rs1_val == 0xFFFFFFFFE046AB61 and rs2_val == 0x0CF25923109FF475 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffe046ab61;  op2val:0xcf25923109ff475
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffe046ab61, 0xcf25923109ff475, x1, 137*XLEN/8, x2)

inst_420:
// rs1_val == 0xFFFFFFFFD7BE0830 and rs2_val == 0x9BB4752D1BD775C5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffd7be0830;  op2val:0x9bb4752d1bd775c5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffd7be0830, 0x9bb4752d1bd775c5, x1, 138*XLEN/8, x2)

inst_421:
// rs1_val == 0xFFFFFFFF955D1CE8 and rs2_val == 0x7C2C966DCCADB61F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff955d1ce8;  op2val:0x7c2c966dccadb61f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffff955d1ce8, 0x7c2c966dccadb61f, x1, 139*XLEN/8, x2)

inst_422:
// rs1_val == 0xFFFFFFFF75697302 and rs2_val == 0x72745307EC325EEC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff75697302;  op2val:0x72745307ec325eec
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffff75697302, 0x72745307ec325eec, x1, 140*XLEN/8, x2)

inst_423:
// rs1_val == 0xFFFFFFFEB9E93D53 and rs2_val == 0x6C5E1578754F9B96 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeb9e93d53;  op2val:0x6c5e1578754f9b96
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffeb9e93d53, 0x6c5e1578754f9b96, x1, 141*XLEN/8, x2)

inst_424:
// rs1_val == 0xFFFFFFFDA6478A56 and rs2_val == 0x85FCD601E8D7A714 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffda6478a56;  op2val:0x85fcd601e8d7a714
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffda6478a56, 0x85fcd601e8d7a714, x1, 142*XLEN/8, x2)

inst_425:
// rs1_val == 0xFFFFFFFBBD59213F and rs2_val == 0x9E7E1FC352B42EFF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbbd59213f;  op2val:0x9e7e1fc352b42eff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffbbd59213f, 0x9e7e1fc352b42eff, x1, 143*XLEN/8, x2)

inst_426:
// rs1_val == 0xFFFFFFF1AFE08A14 and rs2_val == 0xF65CF3F31DCACF74 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff1afe08a14;  op2val:0xf65cf3f31dcacf74
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffff1afe08a14, 0xf65cf3f31dcacf74, x1, 144*XLEN/8, x2)

inst_427:
// rs1_val == 0xFFFFFFE96F738905 and rs2_val == 0xE380A1764A104E66 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffe96f738905;  op2val:0xe380a1764a104e66
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffe96f738905, 0xe380a1764a104e66, x1, 145*XLEN/8, x2)

inst_428:
// rs1_val == 0xFFFFFFC50BD61D6D and rs2_val == 0xF65E7737FBD2570D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffc50bd61d6d;  op2val:0xf65e7737fbd2570d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffc50bd61d6d, 0xf65e7737fbd2570d, x1, 146*XLEN/8, x2)

inst_429:
// rs1_val == 0xFFFFFFA4FB37BEC9 and rs2_val == 0x242A809B7A3209FE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffa4fb37bec9;  op2val:0x242a809b7a3209fe
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffa4fb37bec9, 0x242a809b7a3209fe, x1, 147*XLEN/8, x2)

inst_430:
// rs1_val == 0xFFFFFF3F985A9EF1 and rs2_val == 0xC96EFDC4EB6992D5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff3f985a9ef1;  op2val:0xc96efdc4eb6992d5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffff3f985a9ef1, 0xc96efdc4eb6992d5, x1, 148*XLEN/8, x2)

inst_431:
// rs1_val == 0xFFFFFE96FC6113A4 and rs2_val == 0x6D3F408B31D4FF08 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffe96fc6113a4;  op2val:0x6d3f408b31d4ff08
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffe96fc6113a4, 0x6d3f408b31d4ff08, x1, 149*XLEN/8, x2)

inst_432:
// rs1_val == 0xFFFFFC47FC7C6D0B and rs2_val == 0xFFEC35FEAF334E15 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffc47fc7c6d0b;  op2val:0xffec35feaf334e15
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffc47fc7c6d0b, 0xffec35feaf334e15, x1, 150*XLEN/8, x2)

inst_433:
// rs1_val == 0xFFFFF9E2E3356CC4 and rs2_val == 0xB8F4169F85BF95C0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff9e2e3356cc4;  op2val:0xb8f4169f85bf95c0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffff9e2e3356cc4, 0xb8f4169f85bf95c0, x1, 151*XLEN/8, x2)

inst_434:
// rs1_val == 0xFFFFF59572976012 and rs2_val == 0x8E368CE0BE5265F3 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff59572976012;  op2val:0x8e368ce0be5265f3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffff59572976012, 0x8e368ce0be5265f3, x1, 152*XLEN/8, x2)

inst_435:
// rs1_val == 0xFFFFE41C44115B05 and rs2_val == 0xA08B84F3C86342C2 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffe41c44115b05;  op2val:0xa08b84f3c86342c2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffe41c44115b05, 0xa08b84f3c86342c2, x1, 153*XLEN/8, x2)

inst_436:
// rs1_val == 0xFFFFC75235A7EFC1 and rs2_val == 0x3322358CA6FABA7B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffc75235a7efc1;  op2val:0x3322358ca6faba7b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffc75235a7efc1, 0x3322358ca6faba7b, x1, 154*XLEN/8, x2)

inst_437:
// rs1_val == 0xFFFFAE62C5B3E01C and rs2_val == 0x5916D2810E24D9CC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffae62c5b3e01c;  op2val:0x5916d2810e24d9cc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffae62c5b3e01c, 0x5916d2810e24d9cc, x1, 155*XLEN/8, x2)

inst_438:
// rs1_val == 0xFFFF2DD55C37849B and rs2_val == 0xC26801926C967B0E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffff2dd55c37849b;  op2val:0xc26801926c967b0e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffff2dd55c37849b, 0xc26801926c967b0e, x1, 156*XLEN/8, x2)

inst_439:
// rs1_val == 0xFFFEB3BEA0FBC248 and rs2_val == 0x81AA70AC4B43AD85 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeb3bea0fbc248;  op2val:0x81aa70ac4b43ad85
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffeb3bea0fbc248, 0x81aa70ac4b43ad85, x1, 157*XLEN/8, x2)

inst_440:
// rs1_val == 0xFFFD116081ED75E8 and rs2_val == 0x67913217437CBC41 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffd116081ed75e8;  op2val:0x67913217437cbc41
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffd116081ed75e8, 0x67913217437cbc41, x1, 158*XLEN/8, x2)

inst_441:
// rs1_val == 0xFFFA3D4FA3B633AC and rs2_val == 0xB9FEF1D65956B39D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffa3d4fa3b633ac;  op2val:0xb9fef1d65956b39d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffa3d4fa3b633ac, 0xb9fef1d65956b39d, x1, 159*XLEN/8, x2)

inst_442:
// rs1_val == 0xFFF6F2FC7B8B7233 and rs2_val == 0xDA70525A725F3A8F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfff6f2fc7b8b7233;  op2val:0xda70525a725f3a8f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfff6f2fc7b8b7233, 0xda70525a725f3a8f, x1, 160*XLEN/8, x2)

inst_443:
// rs1_val == 0xFFEB78CC9651EE66 and rs2_val == 0xFE0A9C6C9A592829 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffeb78cc9651ee66;  op2val:0xfe0a9c6c9a592829
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffeb78cc9651ee66, 0xfe0a9c6c9a592829, x1, 161*XLEN/8, x2)

inst_444:
// rs1_val == 0xFFD1F3AAB87CE2A6 and rs2_val == 0xD6220B4FBBC9DF37 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffd1f3aab87ce2a6;  op2val:0xd6220b4fbbc9df37
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffd1f3aab87ce2a6, 0xd6220b4fbbc9df37, x1, 162*XLEN/8, x2)

inst_445:
// rs1_val == 0xFFBE66B1042D678A and rs2_val == 0xA6C5E21453E1E6BC 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffbe66b1042d678a;  op2val:0xa6c5e21453e1e6bc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffbe66b1042d678a, 0xa6c5e21453e1e6bc, x1, 163*XLEN/8, x2)

inst_446:
// rs1_val == 0xFF0D9D6012E91176 and rs2_val == 0x9C3D087C65835BDF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xff0d9d6012e91176;  op2val:0x9c3d087c65835bdf
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xff0d9d6012e91176, 0x9c3d087c65835bdf, x1, 164*XLEN/8, x2)

inst_447:
// rs1_val == 0xFE11D383484641F6 and rs2_val == 0x3DA82C982FB5A758 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfe11d383484641f6;  op2val:0x3da82c982fb5a758
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfe11d383484641f6, 0x3da82c982fb5a758, x1, 165*XLEN/8, x2)

inst_448:
// rs1_val == 0xFC6F9F6B4EC6F18C and rs2_val == 0x0DA64FCFEF8C60C0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfc6f9f6b4ec6f18c;  op2val:0xda64fcfef8c60c0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfc6f9f6b4ec6f18c, 0xda64fcfef8c60c0, x1, 166*XLEN/8, x2)

inst_449:
// rs1_val == 0xFAB2993A91ED6C94 and rs2_val == 0xF37E27A312EA67E4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfab2993a91ed6c94;  op2val:0xf37e27a312ea67e4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfab2993a91ed6c94, 0xf37e27a312ea67e4, x1, 167*XLEN/8, x2)

inst_450:
// rs1_val == 0xF1CCAECF31150919 and rs2_val == 0xFBDF8F979267ACB5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf1ccaecf31150919;  op2val:0xfbdf8f979267acb5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf1ccaecf31150919, 0xfbdf8f979267acb5, x1, 168*XLEN/8, x2)

inst_451:
// rs1_val == 0xE9907C4BEA37DC21 and rs2_val == 0x647981B7041BBAAB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe9907c4bea37dc21;  op2val:0x647981b7041bbaab
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe9907c4bea37dc21, 0x647981b7041bbaab, x1, 169*XLEN/8, x2)

inst_452:
// rs1_val == 0xD9157BEE56DF45DE and rs2_val == 0x93017690E356529C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd9157bee56df45de;  op2val:0x93017690e356529c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd9157bee56df45de, 0x93017690e356529c, x1, 170*XLEN/8, x2)

inst_453:
// rs1_val == 0xAEC1527485D77C9B and rs2_val == 0xDEC85B0D53A27EE1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaec1527485d77c9b;  op2val:0xdec85b0d53a27ee1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaec1527485d77c9b, 0xdec85b0d53a27ee1, x1, 171*XLEN/8, x2)

inst_454:
// rs1_val == 0x313971C0A85AB567 and rs2_val == 0x0CD5D8E29408AD7D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x313971c0a85ab567;  op2val:0xcd5d8e29408ad7d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x313971c0a85ab567, 0xcd5d8e29408ad7d, x1, 172*XLEN/8, x2)

inst_455:
// rs2_val == 0xFFFFFFFFFFFFFFFF and rs1_val == 0xEF677106DC17AE6E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xef677106dc17ae6e;  op2val:0xffffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xef677106dc17ae6e, 0xffffffffffffffff, x1, 173*XLEN/8, x2)

inst_456:
// rs2_val == 0xFFFFFFFFFFFFFFFE and rs1_val == 0xDD4EC4D8CA11073D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdd4ec4d8ca11073d;  op2val:0xfffffffffffffffe
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdd4ec4d8ca11073d, 0xfffffffffffffffe, x1, 174*XLEN/8, x2)

inst_457:
// rs2_val == 0xFFFFFFFFFFFFFFFC and rs1_val == 0x1694BD33596F5F89 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1694bd33596f5f89;  op2val:0xfffffffffffffffc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1694bd33596f5f89, 0xfffffffffffffffc, x1, 175*XLEN/8, x2)

inst_458:
// rs2_val == 0xFFFFFFFFFFFFFFFB and rs1_val == 0x5902A9DBE1832AB6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5902a9dbe1832ab6;  op2val:0xfffffffffffffffb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5902a9dbe1832ab6, 0xfffffffffffffffb, x1, 176*XLEN/8, x2)

inst_459:
// rs2_val == 0xFFFFFFFFFFFFFFF4 and rs1_val == 0x9C1F741F7886E3EB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9c1f741f7886e3eb;  op2val:0xfffffffffffffff4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9c1f741f7886e3eb, 0xfffffffffffffff4, x1, 177*XLEN/8, x2)

inst_460:
// rs2_val == 0xFFFFFFFFFFFFFFEF and rs1_val == 0x9AAACD63FC6C3192 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9aaacd63fc6c3192;  op2val:0xffffffffffffffef
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9aaacd63fc6c3192, 0xffffffffffffffef, x1, 178*XLEN/8, x2)

inst_461:
// rs2_val == 0xFFFFFFFFFFFFFFD6 and rs1_val == 0x755961A98347DDF5 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x755961a98347ddf5;  op2val:0xffffffffffffffd6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x755961a98347ddf5, 0xffffffffffffffd6, x1, 179*XLEN/8, x2)

inst_462:
// rs2_val == 0xFFFFFFFFFFFFFFB1 and rs1_val == 0xA422AF666ED26006 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa422af666ed26006;  op2val:0xffffffffffffffb1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa422af666ed26006, 0xffffffffffffffb1, x1, 180*XLEN/8, x2)

inst_463:
// rs2_val == 0xFFFFFFFFFFFFFF3F and rs1_val == 0xE6A4D5CACB293EBD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe6a4d5cacb293ebd;  op2val:0xffffffffffffff3f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe6a4d5cacb293ebd, 0xffffffffffffff3f, x1, 181*XLEN/8, x2)

inst_464:
// rs2_val == 0xFFFFFFFFFFFFFEC3 and rs1_val == 0x2A5DC0A00D453CDF 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2a5dc0a00d453cdf;  op2val:0xfffffffffffffec3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2a5dc0a00d453cdf, 0xfffffffffffffec3, x1, 182*XLEN/8, x2)

inst_465:
// rs2_val == 0xFFFFFFFFFFFFFDC4 and rs1_val == 0x0AF2EE97D9ADF5D6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaf2ee97d9adf5d6;  op2val:0xfffffffffffffdc4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaf2ee97d9adf5d6, 0xfffffffffffffdc4, x1, 183*XLEN/8, x2)

inst_466:
// rs2_val == 0xFFFFFFFFFFFFFB86 and rs1_val == 0x13E6D9036DC3CCEE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x13e6d9036dc3ccee;  op2val:0xfffffffffffffb86
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x13e6d9036dc3ccee, 0xfffffffffffffb86, x1, 184*XLEN/8, x2)

inst_467:
// rs2_val == 0xFFFFFFFFFFFFF4E3 and rs1_val == 0x29ADE05F7DDDCC72 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x29ade05f7dddcc72;  op2val:0xfffffffffffff4e3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x29ade05f7dddcc72, 0xfffffffffffff4e3, x1, 185*XLEN/8, x2)

inst_468:
// rs2_val == 0xFFFFFFFFFFFFE1E2 and rs1_val == 0xF69B0AE6C099BC4C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf69b0ae6c099bc4c;  op2val:0xffffffffffffe1e2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf69b0ae6c099bc4c, 0xffffffffffffe1e2, x1, 186*XLEN/8, x2)

inst_469:
// rs2_val == 0xFFFFFFFFFFFFDD0F and rs1_val == 0xE0F003E954084572 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe0f003e954084572;  op2val:0xffffffffffffdd0f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe0f003e954084572, 0xffffffffffffdd0f, x1, 187*XLEN/8, x2)

inst_470:
// rs2_val == 0xFFFFFFFFFFFFB0B3 and rs1_val == 0x6BAEEA37B4C8839B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6baeea37b4c8839b;  op2val:0xffffffffffffb0b3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6baeea37b4c8839b, 0xffffffffffffb0b3, x1, 188*XLEN/8, x2)

inst_471:
// rs2_val == 0xFFFFFFFFFFFF4877 and rs1_val == 0xB264D045E3D4DD27 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb264d045e3d4dd27;  op2val:0xffffffffffff4877
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb264d045e3d4dd27, 0xffffffffffff4877, x1, 189*XLEN/8, x2)

inst_472:
// rs2_val == 0xFFFFFFFFFFFE5770 and rs1_val == 0x3C2C0E921E4E0FAD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3c2c0e921e4e0fad;  op2val:0xfffffffffffe5770
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3c2c0e921e4e0fad, 0xfffffffffffe5770, x1, 190*XLEN/8, x2)

inst_473:
// rs2_val == 0xFFFFFFFFFFFCE9A5 and rs1_val == 0xE4367CCAD9716F2C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe4367ccad9716f2c;  op2val:0xfffffffffffce9a5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe4367ccad9716f2c, 0xfffffffffffce9a5, x1, 191*XLEN/8, x2)

inst_474:
// rs2_val == 0xFFFFFFFFFFF81475 and rs1_val == 0x9B9AAAD179A6551F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9b9aaad179a6551f;  op2val:0xfffffffffff81475
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9b9aaad179a6551f, 0xfffffffffff81475, x1, 192*XLEN/8, x2)

inst_475:
// rs2_val == 0xFFFFFFFFFFF3AE62 and rs1_val == 0xAA467BBE0320DF72 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaa467bbe0320df72;  op2val:0xfffffffffff3ae62
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaa467bbe0320df72, 0xfffffffffff3ae62, x1, 193*XLEN/8, x2)

inst_476:
// rs2_val == 0xFFFFFFFFFFEF1D76 and rs1_val == 0xB183406662EBF954 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb183406662ebf954;  op2val:0xffffffffffef1d76
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb183406662ebf954, 0xffffffffffef1d76, x1, 194*XLEN/8, x2)

inst_477:
// rs2_val == 0xFFFFFFFFFFCE1BBC and rs1_val == 0xC313BC1FA311D81E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc313bc1fa311d81e;  op2val:0xffffffffffce1bbc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc313bc1fa311d81e, 0xffffffffffce1bbc, x1, 195*XLEN/8, x2)

inst_478:
// rs2_val == 0xFFFFFFFFFF87984F and rs1_val == 0x498DB88F37C4C6B9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x498db88f37c4c6b9;  op2val:0xffffffffff87984f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x498db88f37c4c6b9, 0xffffffffff87984f, x1, 196*XLEN/8, x2)

inst_479:
// rs2_val == 0xFFFFFFFFFF5BA80C and rs1_val == 0x132A717606AEC150 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x132a717606aec150;  op2val:0xffffffffff5ba80c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x132a717606aec150, 0xffffffffff5ba80c, x1, 197*XLEN/8, x2)

inst_480:
// rs2_val == 0xFFFFFFFFFEAC3217 and rs1_val == 0x5BC1C3660C20B9EE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5bc1c3660c20b9ee;  op2val:0xfffffffffeac3217
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5bc1c3660c20b9ee, 0xfffffffffeac3217, x1, 198*XLEN/8, x2)

inst_481:
// rs2_val == 0xFFFFFFFFFC15B0F7 and rs1_val == 0xC988A7CCFC9A02B1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc988a7ccfc9a02b1;  op2val:0xfffffffffc15b0f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc988a7ccfc9a02b1, 0xfffffffffc15b0f7, x1, 199*XLEN/8, x2)

inst_482:
// rs2_val == 0xFFFFFFFFF8D3E5F5 and rs1_val == 0x339863C4D216EEA8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x339863c4d216eea8;  op2val:0xfffffffff8d3e5f5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x339863c4d216eea8, 0xfffffffff8d3e5f5, x1, 200*XLEN/8, x2)

inst_483:
// rs2_val == 0xFFFFFFFFF7FCC18C and rs1_val == 0x9875BAD195A6BEA9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9875bad195a6bea9;  op2val:0xfffffffff7fcc18c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9875bad195a6bea9, 0xfffffffff7fcc18c, x1, 201*XLEN/8, x2)

inst_484:
// rs2_val == 0xFFFFFFFFEFADEA82 and rs1_val == 0x07F5E51DC2CC1D38 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7f5e51dc2cc1d38;  op2val:0xffffffffefadea82
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7f5e51dc2cc1d38, 0xffffffffefadea82, x1, 202*XLEN/8, x2)

inst_485:
// rs2_val == 0xFFFFFFFFC165F0F1 and rs1_val == 0xD6AC851F07155A89 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd6ac851f07155a89;  op2val:0xffffffffc165f0f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd6ac851f07155a89, 0xffffffffc165f0f1, x1, 203*XLEN/8, x2)

inst_486:
// rs2_val == 0xFFFFFFFFAF8957F9 and rs1_val == 0xFAA97965C478EF2D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfaa97965c478ef2d;  op2val:0xffffffffaf8957f9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfaa97965c478ef2d, 0xffffffffaf8957f9, x1, 204*XLEN/8, x2)

inst_487:
// rs2_val == 0xFFFFFFFF1FE84EBD and rs1_val == 0x1141B67F62A12347 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1141b67f62a12347;  op2val:0xffffffff1fe84ebd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1141b67f62a12347, 0xffffffff1fe84ebd, x1, 205*XLEN/8, x2)

inst_488:
// rs2_val == 0xFFFFFFFEA97CBF85 and rs1_val == 0xA9632E3DBD0070AE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa9632e3dbd0070ae;  op2val:0xfffffffea97cbf85
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa9632e3dbd0070ae, 0xfffffffea97cbf85, x1, 206*XLEN/8, x2)

inst_489:
// rs2_val == 0xFFFFFFFC9FC745D1 and rs1_val == 0x94038F336056F5E8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x94038f336056f5e8;  op2val:0xfffffffc9fc745d1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x94038f336056f5e8, 0xfffffffc9fc745d1, x1, 207*XLEN/8, x2)

inst_490:
// rs2_val == 0xFFFFFFFA748CA591 and rs1_val == 0x08D6920B2F8D1335 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8d6920b2f8d1335;  op2val:0xfffffffa748ca591
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8d6920b2f8d1335, 0xfffffffa748ca591, x1, 208*XLEN/8, x2)

inst_491:
// rs2_val == 0xFFFFFFF3A0A1C6F0 and rs1_val == 0x239853F9120FF957 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x239853f9120ff957;  op2val:0xfffffff3a0a1c6f0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x239853f9120ff957, 0xfffffff3a0a1c6f0, x1, 209*XLEN/8, x2)

inst_492:
// rs2_val == 0xFFFFFFEE40D0E5E8 and rs1_val == 0x75F32B5017550D1C 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x75f32b5017550d1c;  op2val:0xffffffee40d0e5e8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x75f32b5017550d1c, 0xffffffee40d0e5e8, x1, 210*XLEN/8, x2)

inst_493:
// rs2_val == 0xFFFFFFDF2752AA64 and rs1_val == 0x897D9FC51AC24829 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x897d9fc51ac24829;  op2val:0xffffffdf2752aa64
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x897d9fc51ac24829, 0xffffffdf2752aa64, x1, 211*XLEN/8, x2)

inst_494:
// rs2_val == 0xFFFFFF8D49AAE370 and rs1_val == 0xCE80F7B19E49C4A1 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xce80f7b19e49c4a1;  op2val:0xffffff8d49aae370
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xce80f7b19e49c4a1, 0xffffff8d49aae370, x1, 212*XLEN/8, x2)

inst_495:
// rs2_val == 0xFFFFFF0FCF4C7D09 and rs1_val == 0xB68A272A255C09E0 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb68a272a255c09e0;  op2val:0xffffff0fcf4c7d09
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb68a272a255c09e0, 0xffffff0fcf4c7d09, x1, 213*XLEN/8, x2)

inst_496:
// rs2_val == 0xFFFFFE5BA2465D2A and rs1_val == 0x891B827336015D9B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x891b827336015d9b;  op2val:0xfffffe5ba2465d2a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x891b827336015d9b, 0xfffffe5ba2465d2a, x1, 214*XLEN/8, x2)

inst_497:
// rs2_val == 0xFFFFFCC036C35DC6 and rs1_val == 0x6B3D9C59D788D65B 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6b3d9c59d788d65b;  op2val:0xfffffcc036c35dc6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6b3d9c59d788d65b, 0xfffffcc036c35dc6, x1, 215*XLEN/8, x2)

inst_498:
// rs2_val == 0xFFFFF905DBC1F2B1 and rs1_val == 0x1D95CDB0B5C06C9D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d95cdb0b5c06c9d;  op2val:0xfffff905dbc1f2b1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d95cdb0b5c06c9d, 0xfffff905dbc1f2b1, x1, 216*XLEN/8, x2)

inst_499:
// rs2_val == 0xFFFFF54D4CAE8B6C and rs1_val == 0x76B4A3DDD9E0E7FE 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x76b4a3ddd9e0e7fe;  op2val:0xfffff54d4cae8b6c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x76b4a3ddd9e0e7fe, 0xfffff54d4cae8b6c, x1, 217*XLEN/8, x2)

inst_500:
// rs2_val == 0xFFFFEB07E778555D and rs1_val == 0x071C80A02407E26D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x71c80a02407e26d;  op2val:0xffffeb07e778555d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x71c80a02407e26d, 0xffffeb07e778555d, x1, 218*XLEN/8, x2)

inst_501:
// rs2_val == 0xFFFFC1B69BFA3293 and rs1_val == 0x2DD60261C5F0A710 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2dd60261c5f0a710;  op2val:0xffffc1b69bfa3293
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2dd60261c5f0a710, 0xffffc1b69bfa3293, x1, 219*XLEN/8, x2)

inst_502:
// rs2_val == 0xFFFFB7E981B4D2D8 and rs1_val == 0x279EE9737825D0F4 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x279ee9737825d0f4;  op2val:0xffffb7e981b4d2d8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x279ee9737825d0f4, 0xffffb7e981b4d2d8, x1, 220*XLEN/8, x2)

inst_503:
// rs2_val == 0xFFFF34A37D61CE76 and rs1_val == 0x2A9CC14F63ADCDBB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2a9cc14f63adcdbb;  op2val:0xffff34a37d61ce76
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2a9cc14f63adcdbb, 0xffff34a37d61ce76, x1, 221*XLEN/8, x2)

inst_504:
// rs2_val == 0xFFFEE5CEB3B2FA55 and rs1_val == 0x36334245FB566E3E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x36334245fb566e3e;  op2val:0xfffee5ceb3b2fa55
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x36334245fb566e3e, 0xfffee5ceb3b2fa55, x1, 222*XLEN/8, x2)

inst_505:
// rs2_val == 0xFFFCD94D8514F49D and rs1_val == 0x612FAF5E8E73758E 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x612faf5e8e73758e;  op2val:0xfffcd94d8514f49d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x612faf5e8e73758e, 0xfffcd94d8514f49d, x1, 223*XLEN/8, x2)

inst_506:
// rs2_val == 0xFFF8E49CE41BA01B and rs1_val == 0x513EE651F044106F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x513ee651f044106f;  op2val:0xfff8e49ce41ba01b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x513ee651f044106f, 0xfff8e49ce41ba01b, x1, 224*XLEN/8, x2)

inst_507:
// rs2_val == 0xFFF0FFC40E22C1E0 and rs1_val == 0xAC79FC270DA5F55F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xac79fc270da5f55f;  op2val:0xfff0ffc40e22c1e0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xac79fc270da5f55f, 0xfff0ffc40e22c1e0, x1, 225*XLEN/8, x2)

inst_508:
// rs2_val == 0xFFE25182F83106C9 and rs1_val == 0x0C64D280859B4C3F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc64d280859b4c3f;  op2val:0xffe25182f83106c9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc64d280859b4c3f, 0xffe25182f83106c9, x1, 226*XLEN/8, x2)

inst_509:
// rs2_val == 0xFFDB13919C23BDB8 and rs1_val == 0xC9763989EB74F8BB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc9763989eb74f8bb;  op2val:0xffdb13919c23bdb8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc9763989eb74f8bb, 0xffdb13919c23bdb8, x1, 227*XLEN/8, x2)

inst_510:
// rs2_val == 0xFFA80C91E9E678BB and rs1_val == 0x09322235B8B00CB6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9322235b8b00cb6;  op2val:0xffa80c91e9e678bb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9322235b8b00cb6, 0xffa80c91e9e678bb, x1, 228*XLEN/8, x2)

inst_511:
// rs2_val == 0xFF4F4D100880B668 and rs1_val == 0xEE412DA70282F24D 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xee412da70282f24d;  op2val:0xff4f4d100880b668
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xee412da70282f24d, 0xff4f4d100880b668, x1, 229*XLEN/8, x2)

inst_512:
// rs2_val == 0xFEB171E36F6DA856 and rs1_val == 0xEFB5B593B918B7FA 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xefb5b593b918b7fa;  op2val:0xfeb171e36f6da856
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xefb5b593b918b7fa, 0xfeb171e36f6da856, x1, 230*XLEN/8, x2)

inst_513:
// rs2_val == 0xFD5D359F1A5928F7 and rs1_val == 0x6D80FEEE74BC1570 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6d80feee74bc1570;  op2val:0xfd5d359f1a5928f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6d80feee74bc1570, 0xfd5d359f1a5928f7, x1, 231*XLEN/8, x2)

inst_514:
// rs2_val == 0xFBDE6F8E2D79E311 and rs1_val == 0xBEE2EE6EF38E735F 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbee2ee6ef38e735f;  op2val:0xfbde6f8e2d79e311
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbee2ee6ef38e735f, 0xfbde6f8e2d79e311, x1, 232*XLEN/8, x2)

inst_515:
// rs2_val == 0xF7FE676EB828FD34 and rs1_val == 0x61D4C262D69F32E6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x61d4c262d69f32e6;  op2val:0xf7fe676eb828fd34
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x61d4c262d69f32e6, 0xf7fe676eb828fd34, x1, 233*XLEN/8, x2)

inst_516:
// rs2_val == 0xE3FF5EC4DCF0C656 and rs1_val == 0xFCC1650F30D268BD 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfcc1650f30d268bd;  op2val:0xe3ff5ec4dcf0c656
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfcc1650f30d268bd, 0xe3ff5ec4dcf0c656, x1, 234*XLEN/8, x2)

inst_517:
// rs2_val == 0xDABFC6D78901096D and rs1_val == 0x74A8EAEC656224E9 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x74a8eaec656224e9;  op2val:0xdabfc6d78901096d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x74a8eaec656224e9, 0xdabfc6d78901096d, x1, 235*XLEN/8, x2)

inst_518:
// rs2_val == 0xB2DE7072DAB0001E and rs1_val == 0xF01528EC3591DB10 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf01528ec3591db10;  op2val:0xb2de7072dab0001e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf01528ec3591db10, 0xb2de7072dab0001e, x1, 236*XLEN/8, x2)

inst_519:
// rs2_val == 0x2DC86F6D7443F200 and rs1_val == 0x2BB9DAA6AA01E126 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2bb9daa6aa01e126;  op2val:0x2dc86f6d7443f200
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2bb9daa6aa01e126, 0x2dc86f6d7443f200, x1, 237*XLEN/8, x2)

inst_520:
// rs1_val == 0xFFFFFFFFFFFFFFFF and rs2_val == 0x34C2DA8003CC0F27 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x34c2da8003cc0f27
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0x34c2da8003cc0f27, x1, 238*XLEN/8, x2)

inst_521:
// rs1_val == 0xFFFFFFFFFFFFFFFB and rs2_val == 0xFF1E5BEFBEDC25E6 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:0xff1e5befbedc25e6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffb, 0xff1e5befbedc25e6, x1, 239*XLEN/8, x2)

inst_522:
// rs1_val == 0x44DCDA6A797D76DF and rs2_val == 0x248174E5598B88DB 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x44dcda6a797d76df;  op2val:0x248174e5598b88db
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x44dcda6a797d76df, 0x248174e5598b88db, x1, 240*XLEN/8, x2)

inst_523:
// rs1_val == 0xFB7523B06EC13320 and rs2_val == 0x8248F803A97BCC25 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfb7523b06ec13320;  op2val:0x8248f803a97bcc25
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfb7523b06ec13320, 0x8248f803a97bcc25, x1, 241*XLEN/8, x2)

inst_524:
// rs1_val == 0x51B0F5AB96FC0000 and rs2_val == 0x2AE568BAFD1032E8 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x51b0f5ab96fc0000;  op2val:0x2ae568bafd1032e8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x51b0f5ab96fc0000, 0x2ae568bafd1032e8, x1, 242*XLEN/8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 15*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 11*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 243*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
