
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",blt)
la x1,signature_x1_1
TEST_BRANCH_OP(blt, x2, x31, x30, 6148914691236517205, 6148914691236517205, 4, 1b, x1, 0)
TEST_BRANCH_OP(blt, x2, x30, x31, 6148914691236517205, -1, 4, 1b, x1, 8)
TEST_BRANCH_OP(blt, x2, x29, x28, -1, -1, 4, 1b, x1, 16)
TEST_BRANCH_OP(blt, x2, x28, x29, -1, 6148914691236517205, 4, 1b, x1, 24)
TEST_BRANCH_OP(blt, x2, x27, x26, -1, -1, 64, 3f, x1, 32)
TEST_BRANCH_OP(blt, x2, x26, x27, -1, -2, 64, 3f, x1, 40)
TEST_BRANCH_OP(blt, x2, x25, x24, -1, 6148914691236517205, 64, 3f, x1, 48)
TEST_BRANCH_OP(blt, x2, x24, x25, 1, -1, 4, 1b, x1, 56)
TEST_BRANCH_OP(blt, x2, x23, x22, 2, -1, 4, 1b, x1, 64)
TEST_BRANCH_OP(blt, x2, x22, x23, 4, -1, 4, 1b, x1, 72)
TEST_BRANCH_OP(blt, x2, x21, x20, 8, -1, 4, 1b, x1, 80)
TEST_BRANCH_OP(blt, x2, x20, x21, 16, -1, 4, 1b, x1, 88)
TEST_BRANCH_OP(blt, x2, x19, x18, 32, -1, 4, 1b, x1, 96)
TEST_BRANCH_OP(blt, x2, x18, x19, 64, -1, 4, 1b, x1, 104)
TEST_BRANCH_OP(blt, x2, x17, x16, 128, -1, 4, 1b, x1, 112)
TEST_BRANCH_OP(blt, x2, x16, x17, 256, -1, 4, 1b, x1, 120)
TEST_BRANCH_OP(blt, x2, x15, x14, 512, -1, 4, 1b, x1, 128)
TEST_BRANCH_OP(blt, x2, x14, x15, 1024, -1, 4, 1b, x1, 136)
TEST_BRANCH_OP(blt, x2, x13, x12, 2048, -1, 4, 1b, x1, 144)
TEST_BRANCH_OP(blt, x2, x12, x13, 4096, -1, 4, 1b, x1, 152)
TEST_BRANCH_OP(blt, x2, x11, x10, 8192, -1, 4, 1b, x1, 160)
TEST_BRANCH_OP(blt, x2, x10, x11, 16384, -1, 4, 1b, x1, 168)
TEST_BRANCH_OP(blt, x2, x9, x8, 32768, -1, 4, 1b, x1, 176)
TEST_BRANCH_OP(blt, x2, x8, x9, 65536, -1, 4, 1b, x1, 184)
TEST_BRANCH_OP(blt, x2, x7, x6, 131072, -1, 4, 1b, x1, 192)
TEST_BRANCH_OP(blt, x2, x6, x7, 262144, -1, 4, 1b, x1, 200)
TEST_BRANCH_OP(blt, x2, x5, x4, 524288, -1, 4, 1b, x1, 208)
la x6,signature_x6_0
TEST_BRANCH_OP(blt, x7, x4, x5, 1048576, -1, 4, 1b, x6, 0)
TEST_BRANCH_OP(blt, x7, x3, x2, 2097152, -1, 4, 1b, x6, 8)
TEST_BRANCH_OP(blt, x7, x2, x3, 4194304, -1, 4, 1b, x6, 16)
TEST_BRANCH_OP(blt, x7, x1, x0, 8388608, -1, 4, 1b, x6, 24)
TEST_BRANCH_OP(blt, x7, x0, x1, 16777216, -1, 4, 1b, x6, 32)
TEST_BRANCH_OP(blt, x7, x31, x31, 33554432, -1, 4, 1b, x6, 40)
TEST_BRANCH_OP(blt, x7, x10, x11, 67108864, -1, 4, 1b, x6, 48)
TEST_BRANCH_OP(blt, x7, x10, x11, 134217728, -1, 4, 1b, x6, 56)
TEST_BRANCH_OP(blt, x7, x10, x11, 268435456, -1, 4, 1b, x6, 64)
TEST_BRANCH_OP(blt, x7, x10, x11, 536870912, -1, 4, 1b, x6, 72)
TEST_BRANCH_OP(blt, x7, x10, x11, 1073741824, -1, 4, 1b, x6, 80)
TEST_BRANCH_OP(blt, x7, x10, x11, 2147483648, -1, 4, 1b, x6, 88)
TEST_BRANCH_OP(blt, x7, x10, x11, 4294967296, -1, 4, 1b, x6, 96)
TEST_BRANCH_OP(blt, x7, x10, x11, 8589934592, -1, 4, 1b, x6, 104)
TEST_BRANCH_OP(blt, x7, x10, x11, 17179869184, -1, 4, 1b, x6, 112)
TEST_BRANCH_OP(blt, x7, x10, x11, 34359738368, -1, 4, 1b, x6, 120)
TEST_BRANCH_OP(blt, x7, x10, x11, 68719476736, -1, 4, 1b, x6, 128)
TEST_BRANCH_OP(blt, x7, x10, x11, 137438953472, -1, 4, 1b, x6, 136)
TEST_BRANCH_OP(blt, x7, x10, x11, 274877906944, -1, 4, 1b, x6, 144)
TEST_BRANCH_OP(blt, x7, x10, x11, 549755813888, -1, 4, 1b, x6, 152)
TEST_BRANCH_OP(blt, x7, x10, x11, 1099511627776, -1, 4, 1b, x6, 160)
TEST_BRANCH_OP(blt, x7, x10, x11, 2199023255552, -1, 4, 1b, x6, 168)
TEST_BRANCH_OP(blt, x7, x10, x11, 4398046511104, -1, 4, 1b, x6, 176)
TEST_BRANCH_OP(blt, x7, x10, x11, 8796093022208, -1, 4, 1b, x6, 184)
TEST_BRANCH_OP(blt, x7, x10, x11, 17592186044416, -1, 4, 1b, x6, 192)
TEST_BRANCH_OP(blt, x7, x10, x11, 35184372088832, -1, 4, 1b, x6, 200)
TEST_BRANCH_OP(blt, x7, x10, x11, 70368744177664, -1, 4, 1b, x6, 208)
TEST_BRANCH_OP(blt, x7, x10, x11, 140737488355328, -1, 4, 1b, x6, 216)
TEST_BRANCH_OP(blt, x7, x10, x11, 281474976710656, -1, 4, 1b, x6, 224)
TEST_BRANCH_OP(blt, x7, x10, x11, 562949953421312, -1, 4, 1b, x6, 232)
TEST_BRANCH_OP(blt, x7, x10, x11, 1125899906842624, -1, 4, 1b, x6, 240)
TEST_BRANCH_OP(blt, x7, x10, x11, 2251799813685248, -1, 4, 1b, x6, 248)
TEST_BRANCH_OP(blt, x7, x10, x11, 4503599627370496, -1, 4, 1b, x6, 256)
TEST_BRANCH_OP(blt, x7, x10, x11, 9007199254740992, -1, 4, 1b, x6, 264)
TEST_BRANCH_OP(blt, x7, x10, x11, 18014398509481984, -1, 4, 1b, x6, 272)
TEST_BRANCH_OP(blt, x7, x10, x11, 36028797018963968, -1, 4, 1b, x6, 280)
TEST_BRANCH_OP(blt, x7, x10, x11, 72057594037927936, -1, 4, 1b, x6, 288)
TEST_BRANCH_OP(blt, x7, x10, x11, 144115188075855872, -1, 4, 1b, x6, 296)
TEST_BRANCH_OP(blt, x7, x10, x11, 288230376151711744, -1, 4, 1b, x6, 304)
TEST_BRANCH_OP(blt, x7, x10, x11, 576460752303423488, -1, 4, 1b, x6, 312)
TEST_BRANCH_OP(blt, x7, x10, x11, 1152921504606846976, -1, 4, 1b, x6, 320)
TEST_BRANCH_OP(blt, x7, x10, x11, 2305843009213693952, -1, 4, 1b, x6, 328)
TEST_BRANCH_OP(blt, x7, x10, x11, 4611686018427387904, -1, 4, 1b, x6, 336)
TEST_BRANCH_OP(blt, x7, x10, x11, -9223372036854775808, -1, 4, 1b, x6, 344)
TEST_BRANCH_OP(blt, x7, x10, x11, -2, -1, 4, 1b, x6, 352)
TEST_BRANCH_OP(blt, x7, x10, x11, -3, -1, 4, 1b, x6, 360)
TEST_BRANCH_OP(blt, x7, x10, x11, -5, -1, 4, 1b, x6, 368)
TEST_BRANCH_OP(blt, x7, x10, x11, -9, -1, 4, 1b, x6, 376)
TEST_BRANCH_OP(blt, x7, x10, x11, -17, -1, 4, 1b, x6, 384)
TEST_BRANCH_OP(blt, x7, x10, x11, -33, -1, 4, 1b, x6, 392)
TEST_BRANCH_OP(blt, x7, x10, x11, -65, -1, 4, 1b, x6, 400)
TEST_BRANCH_OP(blt, x7, x10, x11, -129, -1, 4, 1b, x6, 408)
TEST_BRANCH_OP(blt, x7, x10, x11, -257, -1, 4, 1b, x6, 416)
TEST_BRANCH_OP(blt, x7, x10, x11, -513, -1, 4, 1b, x6, 424)
TEST_BRANCH_OP(blt, x7, x10, x11, -1025, -1, 4, 1b, x6, 432)
TEST_BRANCH_OP(blt, x7, x10, x11, -2049, -1, 4, 1b, x6, 440)
TEST_BRANCH_OP(blt, x7, x10, x11, -4097, -1, 4, 1b, x6, 448)
TEST_BRANCH_OP(blt, x7, x10, x11, -8193, -1, 4, 1b, x6, 456)
TEST_BRANCH_OP(blt, x7, x10, x11, -16385, -1, 4, 1b, x6, 464)
TEST_BRANCH_OP(blt, x7, x10, x11, -32769, -1, 4, 1b, x6, 472)
TEST_BRANCH_OP(blt, x7, x10, x11, -65537, -1, 4, 1b, x6, 480)
TEST_BRANCH_OP(blt, x7, x10, x11, -131073, -1, 4, 1b, x6, 488)
TEST_BRANCH_OP(blt, x7, x10, x11, -262145, -1, 4, 1b, x6, 496)
TEST_BRANCH_OP(blt, x7, x10, x11, -524289, -1, 4, 1b, x6, 504)
TEST_BRANCH_OP(blt, x7, x10, x11, -1048577, -1, 4, 1b, x6, 512)
TEST_BRANCH_OP(blt, x7, x10, x11, -2097153, -1, 4, 1b, x6, 520)
TEST_BRANCH_OP(blt, x7, x10, x11, -4194305, -1, 4, 1b, x6, 528)
TEST_BRANCH_OP(blt, x7, x10, x11, -8388609, -1, 4, 1b, x6, 536)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -1, 4, 1b, x6, 544)
TEST_BRANCH_OP(blt, x7, x10, x11, -33554433, -1, 4, 1b, x6, 552)
TEST_BRANCH_OP(blt, x7, x10, x11, -67108865, -1, 4, 1b, x6, 560)
TEST_BRANCH_OP(blt, x7, x10, x11, -134217729, -1, 4, 1b, x6, 568)
TEST_BRANCH_OP(blt, x7, x10, x11, -268435457, -1, 4, 1b, x6, 576)
TEST_BRANCH_OP(blt, x7, x10, x11, -536870913, -1, 4, 1b, x6, 584)
TEST_BRANCH_OP(blt, x7, x10, x11, -1073741825, -1, 4, 1b, x6, 592)
TEST_BRANCH_OP(blt, x7, x10, x11, -2147483649, -1, 4, 1b, x6, 600)
TEST_BRANCH_OP(blt, x7, x10, x11, -4294967297, -1, 4, 1b, x6, 608)
TEST_BRANCH_OP(blt, x7, x10, x11, -8589934593, -1, 4, 1b, x6, 616)
TEST_BRANCH_OP(blt, x7, x10, x11, -17179869185, -1, 4, 1b, x6, 624)
TEST_BRANCH_OP(blt, x7, x10, x11, -34359738369, -1, 4, 1b, x6, 632)
TEST_BRANCH_OP(blt, x7, x10, x11, -68719476737, -1, 4, 1b, x6, 640)
TEST_BRANCH_OP(blt, x7, x10, x11, -137438953473, -1, 4, 1b, x6, 648)
TEST_BRANCH_OP(blt, x7, x10, x11, -274877906945, -1, 4, 1b, x6, 656)
TEST_BRANCH_OP(blt, x7, x10, x11, -549755813889, -1, 4, 1b, x6, 664)
TEST_BRANCH_OP(blt, x7, x10, x11, -1099511627777, -1, 4, 1b, x6, 672)
TEST_BRANCH_OP(blt, x7, x10, x11, -2199023255553, -1, 4, 1b, x6, 680)
TEST_BRANCH_OP(blt, x7, x10, x11, -4398046511105, -1, 4, 1b, x6, 688)
TEST_BRANCH_OP(blt, x7, x10, x11, -8796093022209, -1, 4, 1b, x6, 696)
TEST_BRANCH_OP(blt, x7, x10, x11, -17592186044417, -1, 4, 1b, x6, 704)
TEST_BRANCH_OP(blt, x7, x10, x11, -35184372088833, -1, 4, 1b, x6, 712)
TEST_BRANCH_OP(blt, x7, x10, x11, -70368744177665, -1, 4, 1b, x6, 720)
TEST_BRANCH_OP(blt, x7, x10, x11, -140737488355329, -1, 4, 1b, x6, 728)
TEST_BRANCH_OP(blt, x7, x10, x11, -281474976710657, -1, 4, 1b, x6, 736)
TEST_BRANCH_OP(blt, x7, x10, x11, -562949953421313, -1, 4, 1b, x6, 744)
TEST_BRANCH_OP(blt, x7, x10, x11, -1125899906842625, -1, 4, 1b, x6, 752)
TEST_BRANCH_OP(blt, x7, x10, x11, -2251799813685249, -1, 4, 1b, x6, 760)
TEST_BRANCH_OP(blt, x7, x10, x11, -4503599627370497, -1, 4, 1b, x6, 768)
TEST_BRANCH_OP(blt, x7, x10, x11, -9007199254740993, -1, 4, 1b, x6, 776)
TEST_BRANCH_OP(blt, x7, x10, x11, -18014398509481985, -1, 4, 1b, x6, 784)
TEST_BRANCH_OP(blt, x7, x10, x11, -36028797018963969, -1, 4, 1b, x6, 792)
TEST_BRANCH_OP(blt, x7, x10, x11, -72057594037927937, -1, 4, 1b, x6, 800)
TEST_BRANCH_OP(blt, x7, x10, x11, -144115188075855873, -1, 4, 1b, x6, 808)
TEST_BRANCH_OP(blt, x7, x10, x11, -288230376151711745, -1, 4, 1b, x6, 816)
TEST_BRANCH_OP(blt, x7, x10, x11, -576460752303423489, -1, 4, 1b, x6, 824)
TEST_BRANCH_OP(blt, x7, x10, x11, -1152921504606846977, -1, 4, 1b, x6, 832)
TEST_BRANCH_OP(blt, x7, x10, x11, -2305843009213693953, -1, 4, 1b, x6, 840)
TEST_BRANCH_OP(blt, x7, x10, x11, -4611686018427387905, -1, 4, 1b, x6, 848)
TEST_BRANCH_OP(blt, x7, x10, x11, 9223372036854775807, -1, 4, 1b, x6, 856)
TEST_BRANCH_OP(blt, x7, x10, x11, -6148914691236517206, -1, 4, 1b, x6, 864)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 1, 4, 1b, x6, 872)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -4503599627370497, 4, 1b, x6, 880)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -9007199254740993, 4, 1b, x6, 888)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -18014398509481985, 4, 1b, x6, 896)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -36028797018963969, 4, 1b, x6, 904)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -72057594037927937, 4, 1b, x6, 912)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -144115188075855873, 4, 1b, x6, 920)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -288230376151711745, 4, 1b, x6, 928)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -576460752303423489, 4, 1b, x6, 936)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -1152921504606846977, 4, 1b, x6, 944)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -2305843009213693953, 4, 1b, x6, 952)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -4611686018427387905, 4, 1b, x6, 960)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 9223372036854775807, 4, 1b, x6, 968)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -6148914691236517206, 4, 1b, x6, 976)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 2, 4, 1b, x6, 984)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 4, 4, 1b, x6, 992)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 8, 4, 1b, x6, 1000)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 16, 4, 1b, x6, 1008)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 32, 4, 1b, x6, 1016)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 64, 4, 1b, x6, 1024)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 128, 4, 1b, x6, 1032)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 256, 4, 1b, x6, 1040)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 512, 4, 1b, x6, 1048)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 1024, 4, 1b, x6, 1056)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 2048, 4, 1b, x6, 1064)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 4096, 4, 1b, x6, 1072)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 8192, 4, 1b, x6, 1080)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 16384, 4, 1b, x6, 1088)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 32768, 4, 1b, x6, 1096)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 65536, 4, 1b, x6, 1104)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 131072, 4, 1b, x6, 1112)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 262144, 4, 1b, x6, 1120)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 524288, 4, 1b, x6, 1128)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 1048576, 4, 1b, x6, 1136)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 2097152, 4, 1b, x6, 1144)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 4194304, 4, 1b, x6, 1152)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 8388608, 4, 1b, x6, 1160)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 16777216, 4, 1b, x6, 1168)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 33554432, 4, 1b, x6, 1176)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 67108864, 4, 1b, x6, 1184)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 134217728, 4, 1b, x6, 1192)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 268435456, 4, 1b, x6, 1200)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 536870912, 4, 1b, x6, 1208)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 1073741824, 4, 1b, x6, 1216)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 2147483648, 4, 1b, x6, 1224)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 4294967296, 4, 1b, x6, 1232)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 8589934592, 4, 1b, x6, 1240)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 17179869184, 4, 1b, x6, 1248)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 34359738368, 4, 1b, x6, 1256)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 68719476736, 4, 1b, x6, 1264)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 137438953472, 4, 1b, x6, 1272)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 274877906944, 4, 1b, x6, 1280)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 549755813888, 4, 1b, x6, 1288)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 1099511627776, 4, 1b, x6, 1296)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 2199023255552, 4, 1b, x6, 1304)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 4398046511104, 4, 1b, x6, 1312)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 8796093022208, 4, 1b, x6, 1320)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 17592186044416, 4, 1b, x6, 1328)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 35184372088832, 4, 1b, x6, 1336)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 70368744177664, 4, 1b, x6, 1344)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 140737488355328, 4, 1b, x6, 1352)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 281474976710656, 4, 1b, x6, 1360)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 562949953421312, 4, 1b, x6, 1368)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 1125899906842624, 4, 1b, x6, 1376)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 2251799813685248, 4, 1b, x6, 1384)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 4503599627370496, 4, 1b, x6, 1392)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 9007199254740992, 4, 1b, x6, 1400)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 18014398509481984, 4, 1b, x6, 1408)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 36028797018963968, 4, 1b, x6, 1416)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 72057594037927936, 4, 1b, x6, 1424)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 144115188075855872, 4, 1b, x6, 1432)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 288230376151711744, 4, 1b, x6, 1440)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 576460752303423488, 4, 1b, x6, 1448)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 1152921504606846976, 4, 1b, x6, 1456)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 2305843009213693952, 4, 1b, x6, 1464)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, 4611686018427387904, 4, 1b, x6, 1472)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -9223372036854775808, 4, 1b, x6, 1480)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -3, 4, 1b, x6, 1488)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -5, 4, 1b, x6, 1496)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -9, 4, 1b, x6, 1504)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -17, 4, 1b, x6, 1512)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -33, 4, 1b, x6, 1520)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -65, 4, 1b, x6, 1528)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -129, 4, 1b, x6, 1536)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -257, 4, 1b, x6, 1544)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -513, 4, 1b, x6, 1552)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -1025, 4, 1b, x6, 1560)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -2049, 4, 1b, x6, 1568)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -4097, 4, 1b, x6, 1576)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -8193, 4, 1b, x6, 1584)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -16385, 4, 1b, x6, 1592)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -32769, 4, 1b, x6, 1600)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -65537, 4, 1b, x6, 1608)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -131073, 4, 1b, x6, 1616)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -262145, 4, 1b, x6, 1624)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -524289, 4, 1b, x6, 1632)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -1048577, 4, 1b, x6, 1640)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -2097153, 4, 1b, x6, 1648)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -4194305, 4, 1b, x6, 1656)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -8388609, 4, 1b, x6, 1664)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -16777217, 4, 1b, x6, 1672)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -33554433, 4, 1b, x6, 1680)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -67108865, 4, 1b, x6, 1688)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -134217729, 4, 1b, x6, 1696)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -268435457, 4, 1b, x6, 1704)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -536870913, 4, 1b, x6, 1712)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -1073741825, 4, 1b, x6, 1720)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -2147483649, 4, 1b, x6, 1728)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -4294967297, 4, 1b, x6, 1736)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -8589934593, 4, 1b, x6, 1744)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -17179869185, 4, 1b, x6, 1752)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -34359738369, 4, 1b, x6, 1760)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -68719476737, 4, 1b, x6, 1768)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -137438953473, 4, 1b, x6, 1776)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -274877906945, 4, 1b, x6, 1784)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -549755813889, 4, 1b, x6, 1792)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -1099511627777, 4, 1b, x6, 1800)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -2199023255553, 4, 1b, x6, 1808)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -4398046511105, 4, 1b, x6, 1816)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -8796093022209, 4, 1b, x6, 1824)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -17592186044417, 4, 1b, x6, 1832)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -35184372088833, 4, 1b, x6, 1840)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -70368744177665, 4, 1b, x6, 1848)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -140737488355329, 4, 1b, x6, 1856)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -281474976710657, 4, 1b, x6, 1864)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -562949953421313, 4, 1b, x6, 1872)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -1125899906842625, 4, 1b, x6, 1880)
TEST_BRANCH_OP(blt, x7, x10, x11, -1, -2251799813685249, 4, 1b, x6, 1888)
TEST_BRANCH_OP(blt, x7, x10, x11, 8388608, -1, 4, 1b, x6, 1896)
TEST_BRANCH_OP(blt, x7, x10, x11, 16777216, -1, 4, 1b, x6, 1904)
TEST_BRANCH_OP(blt, x7, x10, x11, 33554432, -1, 4, 1b, x6, 1912)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 27*(XLEN/32),4,0xafacadee


signature_x6_0:
    .fill 240*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
