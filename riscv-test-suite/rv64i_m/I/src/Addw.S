
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",addw)
la x1,signature_x1_1
TEST_RR_OP(addw, x31, x30, x29, -9223372036854775809, -9223372036854775808, -1, x1, 0, x2)
TEST_RR_OP(addw, x30, x31, x28, -9223372036854775809, 0, -1, x1, 8, x2)
TEST_RR_OP(addw, x29, x28, x31, 9223372036854775806, 9223372036854775807, -1, x1, 16, x2)
TEST_RR_OP(addw, x28, x29, x30, 0, 1, -1, x1, 24, x2)
TEST_RR_OP(addw, x27, x26, x25, -9223372036854775809, -1, -9223372036854775808, x1, 32, x2)
TEST_RR_OP(addw, x26, x27, x24, -9223372036854775809, -1, 0, x1, 40, x2)
TEST_RR_OP(addw, x25, x24, x27, 9223372036854775806, -1, 9223372036854775807, x1, 48, x2)
TEST_RR_OP(addw, x24, x25, x26, 0, -1, 1, x1, 56, x2)
TEST_RR_OP(addw, x23, x22, x21, 3074457345618258602, 6148914691236517205, 6148914691236517205, x1, 64, x2)
TEST_RR_OP(addw, x22, x23, x20, 1, 2, -1, x1, 72, x2)
TEST_RR_OP(addw, x21, x20, x23, 3, 4, -1, x1, 80, x2)
TEST_RR_OP(addw, x20, x21, x22, 7, 8, -1, x1, 88, x2)
TEST_RR_OP(addw, x19, x18, x17, 15, 16, -1, x1, 96, x2)
TEST_RR_OP(addw, x18, x19, x16, 31, 32, -1, x1, 104, x2)
TEST_RR_OP(addw, x17, x16, x19, 63, 64, -1, x1, 112, x2)
TEST_RR_OP(addw, x16, x17, x18, 127, 128, -1, x1, 120, x2)
TEST_RR_OP(addw, x15, x14, x13, 255, 256, -1, x1, 128, x2)
TEST_RR_OP(addw, x14, x15, x12, 511, 512, -1, x1, 136, x2)
TEST_RR_OP(addw, x13, x12, x15, 1023, 1024, -1, x1, 144, x2)
TEST_RR_OP(addw, x12, x13, x14, 2047, 2048, -1, x1, 152, x2)
TEST_RR_OP(addw, x11, x10, x9, 4095, 4096, -1, x1, 160, x2)
TEST_RR_OP(addw, x10, x11, x8, 8191, 8192, -1, x1, 168, x2)
TEST_RR_OP(addw, x9, x8, x11, 16383, 16384, -1, x1, 176, x2)
TEST_RR_OP(addw, x8, x9, x10, 32767, 32768, -1, x1, 184, x2)
TEST_RR_OP(addw, x7, x6, x5, 65535, 65536, -1, x1, 192, x2)
TEST_RR_OP(addw, x6, x7, x4, 131071, 131072, -1, x1, 200, x9)
la x8,signature_x8_0
TEST_RR_OP(addw, x5, x4, x7, 262143, 262144, -1, x8, 0, x9)
TEST_RR_OP(addw, x4, x5, x6, 524287, 524288, -1, x8, 8, x9)
TEST_RR_OP(addw, x3, x2, x1, 1048575, 1048576, -1, x8, 16, x9)
TEST_RR_OP(addw, x2, x3, x0, 2097151, 2097152, -1, x8, 24, x9)
TEST_RR_OP(addw, x1, x0, x3, 4194303, 4194304, -1, x8, 32, x9)
TEST_RR_OP(addw, x0, x1, x2, 8388607, 8388608, -1, x8, 40, x9)
TEST_RR_OP(addw, x31, x30, x30, 16777215, 16777216, -1, x8, 48, x9)
TEST_RR_OP(addw, x31, x31, x30, 33554431, 33554432, -1, x8, 56, x9)
TEST_RR_OP(addw, x31, x30, x31, 67108863, 67108864, -1, x8, 64, x9)
TEST_RR_OP(addw, x31, x31, x31, 134217727, 134217728, -1, x8, 72, x9)
TEST_RR_OP(addw, x12, x10, x11, 268435455, 268435456, -1, x8, 80, x9)
TEST_RR_OP(addw, x12, x10, x11, 536870911, 536870912, -1, x8, 88, x9)
TEST_RR_OP(addw, x12, x10, x11, 1073741823, 1073741824, -1, x8, 96, x9)
TEST_RR_OP(addw, x12, x10, x11, 2147483647, 2147483648, -1, x8, 104, x9)
TEST_RR_OP(addw, x12, x10, x11, 4294967295, 4294967296, -1, x8, 112, x9)
TEST_RR_OP(addw, x12, x10, x11, 8589934591, 8589934592, -1, x8, 120, x9)
TEST_RR_OP(addw, x12, x10, x11, 17179869183, 17179869184, -1, x8, 128, x9)
TEST_RR_OP(addw, x12, x10, x11, 34359738367, 34359738368, -1, x8, 136, x9)
TEST_RR_OP(addw, x12, x10, x11, 68719476735, 68719476736, -1, x8, 144, x9)
TEST_RR_OP(addw, x12, x10, x11, 137438953471, 137438953472, -1, x8, 152, x9)
TEST_RR_OP(addw, x12, x10, x11, 274877906943, 274877906944, -1, x8, 160, x9)
TEST_RR_OP(addw, x12, x10, x11, 549755813887, 549755813888, -1, x8, 168, x9)
TEST_RR_OP(addw, x12, x10, x11, 1099511627775, 1099511627776, -1, x8, 176, x9)
TEST_RR_OP(addw, x12, x10, x11, 2199023255551, 2199023255552, -1, x8, 184, x9)
TEST_RR_OP(addw, x12, x10, x11, 4398046511103, 4398046511104, -1, x8, 192, x9)
TEST_RR_OP(addw, x12, x10, x11, 8796093022207, 8796093022208, -1, x8, 200, x9)
TEST_RR_OP(addw, x12, x10, x11, 17592186044415, 17592186044416, -1, x8, 208, x9)
TEST_RR_OP(addw, x12, x10, x11, 35184372088831, 35184372088832, -1, x8, 216, x9)
TEST_RR_OP(addw, x12, x10, x11, 70368744177663, 70368744177664, -1, x8, 224, x9)
TEST_RR_OP(addw, x12, x10, x11, 140737488355327, 140737488355328, -1, x8, 232, x9)
TEST_RR_OP(addw, x12, x10, x11, 281474976710655, 281474976710656, -1, x8, 240, x9)
TEST_RR_OP(addw, x12, x10, x11, 562949953421311, 562949953421312, -1, x8, 248, x9)
TEST_RR_OP(addw, x12, x10, x11, 1125899906842623, 1125899906842624, -1, x8, 256, x9)
TEST_RR_OP(addw, x12, x10, x11, 2251799813685247, 2251799813685248, -1, x8, 264, x9)
TEST_RR_OP(addw, x12, x10, x11, 4503599627370495, 4503599627370496, -1, x8, 272, x9)
TEST_RR_OP(addw, x12, x10, x11, 9007199254740991, 9007199254740992, -1, x8, 280, x9)
TEST_RR_OP(addw, x12, x10, x11, 18014398509481983, 18014398509481984, -1, x8, 288, x9)
TEST_RR_OP(addw, x12, x10, x11, 36028797018963967, 36028797018963968, -1, x8, 296, x9)
TEST_RR_OP(addw, x12, x10, x11, 72057594037927935, 72057594037927936, -1, x8, 304, x9)
TEST_RR_OP(addw, x12, x10, x11, 144115188075855871, 144115188075855872, -1, x8, 312, x9)
TEST_RR_OP(addw, x12, x10, x11, 288230376151711743, 288230376151711744, -1, x8, 320, x9)
TEST_RR_OP(addw, x12, x10, x11, 576460752303423487, 576460752303423488, -1, x8, 328, x9)
TEST_RR_OP(addw, x12, x10, x11, 1152921504606846975, 1152921504606846976, -1, x8, 336, x9)
TEST_RR_OP(addw, x12, x10, x11, 2305843009213693951, 2305843009213693952, -1, x8, 344, x9)
TEST_RR_OP(addw, x12, x10, x11, 4611686018427387903, 4611686018427387904, -1, x8, 352, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775811, -2, -1, x8, 360, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775812, -3, -1, x8, 368, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775814, -5, -1, x8, 376, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775818, -9, -1, x8, 384, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775826, -17, -1, x8, 392, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775842, -33, -1, x8, 400, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775874, -65, -1, x8, 408, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775938, -129, -1, x8, 416, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854776066, -257, -1, x8, 424, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854776322, -513, -1, x8, 432, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854776834, -1025, -1, x8, 440, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854777858, -2049, -1, x8, 448, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854779906, -4097, -1, x8, 456, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854784002, -8193, -1, x8, 464, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854792194, -16385, -1, x8, 472, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854808578, -32769, -1, x8, 480, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854841346, -65537, -1, x8, 488, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854906882, -131073, -1, x8, 496, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036855037954, -262145, -1, x8, 504, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036855300098, -524289, -1, x8, 512, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036855824386, -1048577, -1, x8, 520, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036856872962, -2097153, -1, x8, 528, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036858970114, -4194305, -1, x8, 536, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036863164418, -8388609, -1, x8, 544, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036871553026, -16777217, -1, x8, 552, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036888330242, -33554433, -1, x8, 560, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036921884674, -67108865, -1, x8, 568, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036988993538, -134217729, -1, x8, 576, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372037123211266, -268435457, -1, x8, 584, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372037391646722, -536870913, -1, x8, 592, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372037928517634, -1073741825, -1, x8, 600, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372039002259458, -2147483649, -1, x8, 608, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372041149743106, -4294967297, -1, x8, 616, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372045444710402, -8589934593, -1, x8, 624, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372054034644994, -17179869185, -1, x8, 632, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372071214514178, -34359738369, -1, x8, 640, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372105574252546, -68719476737, -1, x8, 648, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372174293729282, -137438953473, -1, x8, 656, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372311732682754, -274877906945, -1, x8, 664, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372586610589698, -549755813889, -1, x8, 672, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223373136366403586, -1099511627777, -1, x8, 680, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223374235878031362, -2199023255553, -1, x8, 688, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223376434901286914, -4398046511105, -1, x8, 696, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223380832947798018, -8796093022209, -1, x8, 704, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223389629040820226, -17592186044417, -1, x8, 712, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223407221226864642, -35184372088833, -1, x8, 720, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223442405598953474, -70368744177665, -1, x8, 728, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223512774343131138, -140737488355329, -1, x8, 736, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223653511831486466, -281474976710657, -1, x8, 744, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223934986808197122, -562949953421313, -1, x8, 752, x9)
TEST_RR_OP(addw, x12, x10, x11, -9224497936761618434, -1125899906842625, -1, x8, 760, x9)
TEST_RR_OP(addw, x12, x10, x11, -9225623836668461058, -2251799813685249, -1, x8, 768, x9)
TEST_RR_OP(addw, x12, x10, x11, -9227875636482146306, -4503599627370497, -1, x8, 776, x9)
TEST_RR_OP(addw, x12, x10, x11, -9232379236109516802, -9007199254740993, -1, x8, 784, x9)
TEST_RR_OP(addw, x12, x10, x11, -9241386435364257794, -18014398509481985, -1, x8, 792, x9)
TEST_RR_OP(addw, x12, x10, x11, -9259400833873739778, -36028797018963969, -1, x8, 800, x9)
TEST_RR_OP(addw, x12, x10, x11, -9295429630892703746, -72057594037927937, -1, x8, 808, x9)
TEST_RR_OP(addw, x12, x10, x11, -9367487224930631682, -144115188075855873, -1, x8, 816, x9)
TEST_RR_OP(addw, x12, x10, x11, -9511602413006487554, -288230376151711745, -1, x8, 824, x9)
TEST_RR_OP(addw, x12, x10, x11, -9799832789158199298, -576460752303423489, -1, x8, 832, x9)
TEST_RR_OP(addw, x12, x10, x11, -10376293541461622786, -1152921504606846977, -1, x8, 840, x9)
TEST_RR_OP(addw, x12, x10, x11, -11529215046068469762, -2305843009213693953, -1, x8, 848, x9)
TEST_RR_OP(addw, x12, x10, x11, -13835058055282163714, -4611686018427387905, -1, x8, 856, x9)
TEST_RR_OP(addw, x12, x10, x11, -9224497936761618434, -1, -1125899906842625, x8, 864, x9)
TEST_RR_OP(addw, x12, x10, x11, -9225623836668461058, -1, -2251799813685249, x8, 872, x9)
TEST_RR_OP(addw, x12, x10, x11, -9227875636482146306, -1, -4503599627370497, x8, 880, x9)
TEST_RR_OP(addw, x12, x10, x11, -9232379236109516802, -1, -9007199254740993, x8, 888, x9)
TEST_RR_OP(addw, x12, x10, x11, -9241386435364257794, -1, -18014398509481985, x8, 896, x9)
TEST_RR_OP(addw, x12, x10, x11, -9259400833873739778, -1, -36028797018963969, x8, 904, x9)
TEST_RR_OP(addw, x12, x10, x11, -9295429630892703746, -1, -72057594037927937, x8, 912, x9)
TEST_RR_OP(addw, x12, x10, x11, -9367487224930631682, -1, -144115188075855873, x8, 920, x9)
TEST_RR_OP(addw, x12, x10, x11, -9511602413006487554, -1, -288230376151711745, x8, 928, x9)
TEST_RR_OP(addw, x12, x10, x11, -9799832789158199298, -1, -576460752303423489, x8, 936, x9)
TEST_RR_OP(addw, x12, x10, x11, -10376293541461622786, -1, -1152921504606846977, x8, 944, x9)
TEST_RR_OP(addw, x12, x10, x11, -11529215046068469762, -1, -2305843009213693953, x8, 952, x9)
TEST_RR_OP(addw, x12, x10, x11, -13835058055282163714, -1, -4611686018427387905, x8, 960, x9)
TEST_RR_OP(addw, x12, x10, x11, -15372286728091293015, -1, -6148914691236517206, x8, 968, x9)
TEST_RR_OP(addw, x12, x10, x11, -15372286728091293015, -6148914691236517206, -1, x8, 976, x9)
TEST_RR_OP(addw, x12, x10, x11, 1, -1, 2, x8, 984, x9)
TEST_RR_OP(addw, x12, x10, x11, 3, -1, 4, x8, 992, x9)
TEST_RR_OP(addw, x12, x10, x11, 7, -1, 8, x8, 1000, x9)
TEST_RR_OP(addw, x12, x10, x11, 15, -1, 16, x8, 1008, x9)
TEST_RR_OP(addw, x12, x10, x11, 31, -1, 32, x8, 1016, x9)
TEST_RR_OP(addw, x12, x10, x11, 63, -1, 64, x8, 1024, x9)
TEST_RR_OP(addw, x12, x10, x11, 127, -1, 128, x8, 1032, x9)
TEST_RR_OP(addw, x12, x10, x11, 255, -1, 256, x8, 1040, x9)
TEST_RR_OP(addw, x12, x10, x11, 511, -1, 512, x8, 1048, x9)
TEST_RR_OP(addw, x12, x10, x11, 1023, -1, 1024, x8, 1056, x9)
TEST_RR_OP(addw, x12, x10, x11, 2047, -1, 2048, x8, 1064, x9)
TEST_RR_OP(addw, x12, x10, x11, 4095, -1, 4096, x8, 1072, x9)
TEST_RR_OP(addw, x12, x10, x11, 8191, -1, 8192, x8, 1080, x9)
TEST_RR_OP(addw, x12, x10, x11, 16383, -1, 16384, x8, 1088, x9)
TEST_RR_OP(addw, x12, x10, x11, 32767, -1, 32768, x8, 1096, x9)
TEST_RR_OP(addw, x12, x10, x11, 65535, -1, 65536, x8, 1104, x9)
TEST_RR_OP(addw, x12, x10, x11, 131071, -1, 131072, x8, 1112, x9)
TEST_RR_OP(addw, x12, x10, x11, 262143, -1, 262144, x8, 1120, x9)
TEST_RR_OP(addw, x12, x10, x11, 524287, -1, 524288, x8, 1128, x9)
TEST_RR_OP(addw, x12, x10, x11, 1048575, -1, 1048576, x8, 1136, x9)
TEST_RR_OP(addw, x12, x10, x11, 2097151, -1, 2097152, x8, 1144, x9)
TEST_RR_OP(addw, x12, x10, x11, 4194303, -1, 4194304, x8, 1152, x9)
TEST_RR_OP(addw, x12, x10, x11, 8388607, -1, 8388608, x8, 1160, x9)
TEST_RR_OP(addw, x12, x10, x11, 16777215, -1, 16777216, x8, 1168, x9)
TEST_RR_OP(addw, x12, x10, x11, 33554431, -1, 33554432, x8, 1176, x9)
TEST_RR_OP(addw, x12, x10, x11, 67108863, -1, 67108864, x8, 1184, x9)
TEST_RR_OP(addw, x12, x10, x11, 134217727, -1, 134217728, x8, 1192, x9)
TEST_RR_OP(addw, x12, x10, x11, 268435455, -1, 268435456, x8, 1200, x9)
TEST_RR_OP(addw, x12, x10, x11, 536870911, -1, 536870912, x8, 1208, x9)
TEST_RR_OP(addw, x12, x10, x11, 1073741823, -1, 1073741824, x8, 1216, x9)
TEST_RR_OP(addw, x12, x10, x11, 2147483647, -1, 2147483648, x8, 1224, x9)
TEST_RR_OP(addw, x12, x10, x11, 4294967295, -1, 4294967296, x8, 1232, x9)
TEST_RR_OP(addw, x12, x10, x11, 8589934591, -1, 8589934592, x8, 1240, x9)
TEST_RR_OP(addw, x12, x10, x11, 17179869183, -1, 17179869184, x8, 1248, x9)
TEST_RR_OP(addw, x12, x10, x11, 34359738367, -1, 34359738368, x8, 1256, x9)
TEST_RR_OP(addw, x12, x10, x11, 68719476735, -1, 68719476736, x8, 1264, x9)
TEST_RR_OP(addw, x12, x10, x11, 137438953471, -1, 137438953472, x8, 1272, x9)
TEST_RR_OP(addw, x12, x10, x11, 274877906943, -1, 274877906944, x8, 1280, x9)
TEST_RR_OP(addw, x12, x10, x11, 549755813887, -1, 549755813888, x8, 1288, x9)
TEST_RR_OP(addw, x12, x10, x11, 1099511627775, -1, 1099511627776, x8, 1296, x9)
TEST_RR_OP(addw, x12, x10, x11, 2199023255551, -1, 2199023255552, x8, 1304, x9)
TEST_RR_OP(addw, x12, x10, x11, 4398046511103, -1, 4398046511104, x8, 1312, x9)
TEST_RR_OP(addw, x12, x10, x11, 8796093022207, -1, 8796093022208, x8, 1320, x9)
TEST_RR_OP(addw, x12, x10, x11, 17592186044415, -1, 17592186044416, x8, 1328, x9)
TEST_RR_OP(addw, x12, x10, x11, 35184372088831, -1, 35184372088832, x8, 1336, x9)
TEST_RR_OP(addw, x12, x10, x11, 70368744177663, -1, 70368744177664, x8, 1344, x9)
TEST_RR_OP(addw, x12, x10, x11, 140737488355327, -1, 140737488355328, x8, 1352, x9)
TEST_RR_OP(addw, x12, x10, x11, 281474976710655, -1, 281474976710656, x8, 1360, x9)
TEST_RR_OP(addw, x12, x10, x11, 562949953421311, -1, 562949953421312, x8, 1368, x9)
TEST_RR_OP(addw, x12, x10, x11, 1125899906842623, -1, 1125899906842624, x8, 1376, x9)
TEST_RR_OP(addw, x12, x10, x11, 2251799813685247, -1, 2251799813685248, x8, 1384, x9)
TEST_RR_OP(addw, x12, x10, x11, 4503599627370495, -1, 4503599627370496, x8, 1392, x9)
TEST_RR_OP(addw, x12, x10, x11, 9007199254740991, -1, 9007199254740992, x8, 1400, x9)
TEST_RR_OP(addw, x12, x10, x11, 18014398509481983, -1, 18014398509481984, x8, 1408, x9)
TEST_RR_OP(addw, x12, x10, x11, 36028797018963967, -1, 36028797018963968, x8, 1416, x9)
TEST_RR_OP(addw, x12, x10, x11, 72057594037927935, -1, 72057594037927936, x8, 1424, x9)
TEST_RR_OP(addw, x12, x10, x11, 144115188075855871, -1, 144115188075855872, x8, 1432, x9)
TEST_RR_OP(addw, x12, x10, x11, 288230376151711743, -1, 288230376151711744, x8, 1440, x9)
TEST_RR_OP(addw, x12, x10, x11, 576460752303423487, -1, 576460752303423488, x8, 1448, x9)
TEST_RR_OP(addw, x12, x10, x11, 1152921504606846975, -1, 1152921504606846976, x8, 1456, x9)
TEST_RR_OP(addw, x12, x10, x11, 2305843009213693951, -1, 2305843009213693952, x8, 1464, x9)
TEST_RR_OP(addw, x12, x10, x11, 4611686018427387903, -1, 4611686018427387904, x8, 1472, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775811, -1, -2, x8, 1480, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775812, -1, -3, x8, 1488, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775814, -1, -5, x8, 1496, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775818, -1, -9, x8, 1504, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775826, -1, -17, x8, 1512, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775842, -1, -33, x8, 1520, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775874, -1, -65, x8, 1528, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854775938, -1, -129, x8, 1536, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854776066, -1, -257, x8, 1544, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854776322, -1, -513, x8, 1552, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854776834, -1, -1025, x8, 1560, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854777858, -1, -2049, x8, 1568, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854779906, -1, -4097, x8, 1576, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854784002, -1, -8193, x8, 1584, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854792194, -1, -16385, x8, 1592, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854808578, -1, -32769, x8, 1600, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854841346, -1, -65537, x8, 1608, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036854906882, -1, -131073, x8, 1616, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036855037954, -1, -262145, x8, 1624, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036855300098, -1, -524289, x8, 1632, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036855824386, -1, -1048577, x8, 1640, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036856872962, -1, -2097153, x8, 1648, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036858970114, -1, -4194305, x8, 1656, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036863164418, -1, -8388609, x8, 1664, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036871553026, -1, -16777217, x8, 1672, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036888330242, -1, -33554433, x8, 1680, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036921884674, -1, -67108865, x8, 1688, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372036988993538, -1, -134217729, x8, 1696, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372037123211266, -1, -268435457, x8, 1704, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372037391646722, -1, -536870913, x8, 1712, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372037928517634, -1, -1073741825, x8, 1720, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372039002259458, -1, -2147483649, x8, 1728, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372041149743106, -1, -4294967297, x8, 1736, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372045444710402, -1, -8589934593, x8, 1744, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372054034644994, -1, -17179869185, x8, 1752, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372071214514178, -1, -34359738369, x8, 1760, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372105574252546, -1, -68719476737, x8, 1768, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372174293729282, -1, -137438953473, x8, 1776, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372311732682754, -1, -274877906945, x8, 1784, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223372586610589698, -1, -549755813889, x8, 1792, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223373136366403586, -1, -1099511627777, x8, 1800, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223374235878031362, -1, -2199023255553, x8, 1808, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223376434901286914, -1, -4398046511105, x8, 1816, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223380832947798018, -1, -8796093022209, x8, 1824, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223389629040820226, -1, -17592186044417, x8, 1832, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223407221226864642, -1, -35184372088833, x8, 1840, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223442405598953474, -1, -70368744177665, x8, 1848, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223512774343131138, -1, -140737488355329, x8, 1856, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223653511831486466, -1, -281474976710657, x8, 1864, x9)
TEST_RR_OP(addw, x12, x10, x11, -9223934986808197122, -1, -562949953421313, x8, 1872, x9)
TEST_RR_OP(addw, x12, x10, x11, 2097151, 2097152, -1, x8, 1880, x9)
TEST_RR_OP(addw, x12, x10, x11, 4194303, 4194304, -1, x8, 1888, x9)
TEST_RR_OP(addw, x12, x10, x11, 8388607, 8388608, -1, x8, 1896, x9)
TEST_RR_OP(addw, x12, x10, x11, 16777215, 16777216, -1, x8, 1904, x9)
TEST_RR_OP(addw, x12, x10, x11, 33554431, 33554432, -1, x8, 1912, x9)
TEST_RR_OP(addw, x12, x10, x11, 67108863, 67108864, -1, x8, 1920, x9)
TEST_RR_OP(addw, x12, x10, x11, 134217727, 134217728, -1, x8, 1928, x9)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 26*(XLEN/32),4,0xafacadee


signature_x8_0:
    .fill 242*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
