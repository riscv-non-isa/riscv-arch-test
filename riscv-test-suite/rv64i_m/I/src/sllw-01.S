
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sllw instruction of the RISC-V i extension for the sllw covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64i")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",sllw)

RVTEST_SIGBASE( x7,signature_x7_1)

inst_0:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x14, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs2_val == 21, rs1_val == -4611686018427387905
// opcode: sllw ; op1:x17; op2:x17; dest:x14; op1val:-4611686018427387905;  op2val:21
TEST_RR_OP(sllw, x14, x17, x17, 0xffffffffffe00000, -4611686018427387905, 21, x7, 0, x8)

inst_1:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen
// opcode: sllw ; op1:x11; op2:x11; dest:x11; op1val:7;  op2val:7
TEST_RR_OP(sllw, x11, x11, x11, 0x380, 7, 7, x7, 8, x8)

inst_2:
// rs1 == rd != rs2, rs1==x4, rs2==x0, rd==x4, rs1_val < 0 and rs2_val == 0, rs1_val == -4398046511105
// opcode: sllw ; op1:x4; op2:x0; dest:x4; op1val:-4398046511105;  op2val:0
TEST_RR_OP(sllw, x4, x4, x0, 0xfffffbffffffffff, -4398046511105, 0, x7, 16, x8)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x20, rd==x22, rs1_val > 0 and rs2_val == 0, rs1_val == 2199023255552
// opcode: sllw ; op1:x26; op2:x20; dest:x22; op1val:2199023255552;  op2val:0
TEST_RR_OP(sllw, x22, x26, x20, 0x20000000000, 2199023255552, 0, x7, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x15, rd==x15, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -9223372036854775808, rs2_val == 27
// opcode: sllw ; op1:x5; op2:x15; dest:x15; op1val:-9223372036854775808;  op2val:27
TEST_RR_OP(sllw, x15, x5, x15, 0x0, -9223372036854775808, 27, x7, 32, x8)

inst_5:
// rs1==x10, rs2==x29, rd==x20, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs2_val == 23, rs1_val==0
// opcode: sllw ; op1:x10; op2:x29; dest:x20; op1val:0;  op2val:23
TEST_RR_OP(sllw, x20, x10, x29, 0x0, 0, 23, x7, 40, x8)

inst_6:
// rs1==x23, rs2==x16, rd==x28, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 9223372036854775807, rs2_val == 30
// opcode: sllw ; op1:x23; op2:x16; dest:x28; op1val:9223372036854775807;  op2val:30
TEST_RR_OP(sllw, x28, x23, x16, 0xffffffffc0000000, 9223372036854775807, 30, x7, 48, x8)

inst_7:
// rs1==x13, rs2==x3, rd==x19, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1, rs2_val == 10
// opcode: sllw ; op1:x13; op2:x3; dest:x19; op1val:1;  op2val:10
TEST_RR_OP(sllw, x19, x13, x3, 0x400, 1, 10, x7, 56, x8)

inst_8:
// rs1==x2, rs2==x22, rd==x31, rs1_val == 2, rs1_val==2
// opcode: sllw ; op1:x2; op2:x22; dest:x31; op1val:2;  op2val:23
TEST_RR_OP(sllw, x31, x2, x22, 0x1000000, 2, 23, x7, 64, x8)

inst_9:
// rs1==x24, rs2==x27, rd==x0, rs1_val == 4, rs2_val == 2, rs1_val==4
// opcode: sllw ; op1:x24; op2:x27; dest:x0; op1val:4;  op2val:2
TEST_RR_OP(sllw, x0, x24, x27, 0x10, 4, 2, x7, 72, x8)

inst_10:
// rs1==x18, rs2==x19, rd==x9, rs1_val == 8, 
// opcode: sllw ; op1:x18; op2:x19; dest:x9; op1val:8;  op2val:6
TEST_RR_OP(sllw, x9, x18, x19, 0x200, 8, 6, x7, 80, x8)

inst_11:
// rs1==x0, rs2==x21, rd==x18, rs1_val == 16, 
// opcode: sllw ; op1:x0; op2:x21; dest:x18; op1val:16;  op2val:2
TEST_RR_OP(sllw, x18, x0, x21, 0x40, 16, 2, x7, 88, x8)

inst_12:
// rs1==x30, rs2==x26, rd==x6, rs1_val == 32, 
// opcode: sllw ; op1:x30; op2:x26; dest:x6; op1val:32;  op2val:6
TEST_RR_OP(sllw, x6, x30, x26, 0x800, 32, 6, x7, 96, x8)

inst_13:
// rs1==x22, rs2==x14, rd==x5, rs1_val == 64, rs2_val == 29
// opcode: sllw ; op1:x22; op2:x14; dest:x5; op1val:64;  op2val:29
TEST_RR_OP(sllw, x5, x22, x14, 0x800000000, 64, 29, x7, 104, x8)

inst_14:
// rs1==x14, rs2==x23, rd==x3, rs1_val == 128, 
// opcode: sllw ; op1:x14; op2:x23; dest:x3; op1val:128;  op2val:19
TEST_RR_OP(sllw, x3, x14, x23, 0x4000000, 128, 19, x7, 112, x8)

inst_15:
// rs1==x15, rs2==x9, rd==x16, rs1_val == 256, 
// opcode: sllw ; op1:x15; op2:x9; dest:x16; op1val:256;  op2val:5
TEST_RR_OP(sllw, x16, x15, x9, 0x2000, 256, 5, x7, 120, x8)

inst_16:
// rs1==x3, rs2==x1, rd==x21, rs1_val == 512, rs2_val == 4
// opcode: sllw ; op1:x3; op2:x1; dest:x21; op1val:512;  op2val:4
TEST_RR_OP(sllw, x21, x3, x1, 0x2000, 512, 4, x7, 128, x8)

inst_17:
// rs1==x28, rs2==x13, rd==x23, rs1_val == 1024, 
// opcode: sllw ; op1:x28; op2:x13; dest:x23; op1val:1024;  op2val:13
TEST_RR_OP(sllw, x23, x28, x13, 0x800000, 1024, 13, x7, 136, x14)

inst_18:
// rs1==x19, rs2==x10, rd==x30, rs1_val == 2048, 
// opcode: sllw ; op1:x19; op2:x10; dest:x30; op1val:2048;  op2val:17
TEST_RR_OP(sllw, x30, x19, x10, 0x10000000, 2048, 17, x7, 144, x14)

inst_19:
// rs1==x31, rs2==x30, rd==x24, rs1_val == 4096, rs2_val == 16
// opcode: sllw ; op1:x31; op2:x30; dest:x24; op1val:4096;  op2val:16
TEST_RR_OP(sllw, x24, x31, x30, 0x10000000, 4096, 16, x7, 152, x14)

inst_20:
// rs1==x29, rs2==x8, rd==x26, rs1_val == 8192, 
// opcode: sllw ; op1:x29; op2:x8; dest:x26; op1val:8192;  op2val:11
TEST_RR_OP(sllw, x26, x29, x8, 0x1000000, 8192, 11, x7, 160, x14)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_21:
// rs1==x9, rs2==x6, rd==x8, rs1_val == 16384, 
// opcode: sllw ; op1:x9; op2:x6; dest:x8; op1val:16384;  op2val:2
TEST_RR_OP(sllw, x8, x9, x6, 0x10000, 16384, 2, x3, 0, x14)

inst_22:
// rs1==x21, rs2==x2, rd==x17, rs1_val == 32768, 
// opcode: sllw ; op1:x21; op2:x2; dest:x17; op1val:32768;  op2val:14
TEST_RR_OP(sllw, x17, x21, x2, 0x20000000, 32768, 14, x3, 8, x14)

inst_23:
// rs1==x7, rs2==x24, rd==x29, rs1_val == 65536, 
// opcode: sllw ; op1:x7; op2:x24; dest:x29; op1val:65536;  op2val:11
TEST_RR_OP(sllw, x29, x7, x24, 0x8000000, 65536, 11, x3, 16, x14)

inst_24:
// rs1==x6, rs2==x5, rd==x7, rs1_val == 131072, rs2_val == 15
// opcode: sllw ; op1:x6; op2:x5; dest:x7; op1val:131072;  op2val:15
TEST_RR_OP(sllw, x7, x6, x5, 0x100000000, 131072, 15, x3, 24, x14)

inst_25:
// rs1==x20, rs2==x25, rd==x27, rs1_val == 262144, 
// opcode: sllw ; op1:x20; op2:x25; dest:x27; op1val:262144;  op2val:7
TEST_RR_OP(sllw, x27, x20, x25, 0x2000000, 262144, 7, x3, 32, x14)

inst_26:
// rs1==x12, rs2==x28, rd==x13, rs1_val == 524288, 
// opcode: sllw ; op1:x12; op2:x28; dest:x13; op1val:524288;  op2val:14
TEST_RR_OP(sllw, x13, x12, x28, 0x200000000, 524288, 14, x3, 40, x14)

inst_27:
// rs1==x25, rs2==x7, rd==x2, rs1_val == 1048576, 
// opcode: sllw ; op1:x25; op2:x7; dest:x2; op1val:1048576;  op2val:13
TEST_RR_OP(sllw, x2, x25, x7, 0x200000000, 1048576, 13, x3, 48, x14)

inst_28:
// rs1==x1, rs2==x12, rd==x25, rs1_val == 2097152, 
// opcode: sllw ; op1:x1; op2:x12; dest:x25; op1val:2097152;  op2val:13
TEST_RR_OP(sllw, x25, x1, x12, 0x400000000, 2097152, 13, x3, 56, x14)

inst_29:
// rs1==x8, rs2==x18, rd==x1, rs1_val == 4194304, 
// opcode: sllw ; op1:x8; op2:x18; dest:x1; op1val:4194304;  op2val:14
TEST_RR_OP(sllw, x1, x8, x18, 0x1000000000, 4194304, 14, x3, 64, x14)

inst_30:
// rs1==x16, rs2==x31, rd==x10, rs1_val == 8388608, 
// opcode: sllw ; op1:x16; op2:x31; dest:x10; op1val:8388608;  op2val:12
TEST_RR_OP(sllw, x10, x16, x31, 0x800000000, 8388608, 12, x3, 72, x14)

inst_31:
// rs1==x27, rs2==x4, rd==x12, rs1_val == 16777216, 
// opcode: sllw ; op1:x27; op2:x4; dest:x12; op1val:16777216;  op2val:15
TEST_RR_OP(sllw, x12, x27, x4, 0x8000000000, 16777216, 15, x3, 80, x14)

inst_32:
// rs1_val == 33554432, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:18
TEST_RR_OP(sllw, x12, x10, x11, 0x80000000000, 33554432, 18, x3, 88, x14)

inst_33:
// rs1_val == 67108864, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:21
TEST_RR_OP(sllw, x12, x10, x11, 0x800000000000, 67108864, 21, x3, 96, x1)

inst_34:
// rs1_val == 134217728, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0x100000000000, 134217728, 17, x3, 104, x1)

inst_35:
// rs1_val == 268435456, rs2_val == 8
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0x1000000000, 268435456, 8, x3, 112, x1)

inst_36:
// rs1_val == 536870912, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:11
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000000, 536870912, 11, x3, 120, x1)

inst_37:
// rs1_val == 1073741824, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:14
TEST_RR_OP(sllw, x12, x10, x11, 0x100000000000, 1073741824, 14, x3, 128, x1)

inst_38:
// rs1_val == 2147483648, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:31
TEST_RR_OP(sllw, x12, x10, x11, 0x4000000000000000, 2147483648, 31, x3, 136, x1)

inst_39:
// rs1_val == 4294967296, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000000, 4294967296, 8, x3, 144, x1)

inst_40:
// rs1_val == 8589934592, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:6
TEST_RR_OP(sllw, x12, x10, x11, 0x8000000000, 8589934592, 6, x3, 152, x1)

inst_41:
// rs1_val == 17179869184, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:6
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000000, 17179869184, 6, x3, 160, x1)

inst_42:
// rs1_val == 34359738368, rs2_val == 1
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:1
TEST_RR_OP(sllw, x12, x10, x11, 0x1000000000, 34359738368, 1, x3, 168, x1)

inst_43:
// rs1_val == 68719476736, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:7
TEST_RR_OP(sllw, x12, x10, x11, 0x80000000000, 68719476736, 7, x3, 176, x1)

inst_44:
// rs1_val == 137438953472, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:11
TEST_RR_OP(sllw, x12, x10, x11, 0x1000000000000, 137438953472, 11, x3, 184, x1)

inst_45:
// rs1_val == 274877906944, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0x80000000000000, 274877906944, 17, x3, 192, x1)

inst_46:
// rs1_val == 549755813888, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0x100000000000000, 549755813888, 17, x3, 200, x1)

inst_47:
// rs1_val == 1099511627776, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 1099511627776, 30, x3, 208, x1)

inst_48:
// rs1_val == 4398046511104, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:13
TEST_RR_OP(sllw, x12, x10, x11, 0x80000000000000, 4398046511104, 13, x3, 216, x1)

inst_49:
// rs1_val == 8796093022208, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:0
TEST_RR_OP(sllw, x12, x10, x11, 0x80000000000, 8796093022208, 0, x3, 224, x1)

inst_50:
// rs1_val == 17592186044416, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:27
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 17592186044416, 27, x3, 232, x1)

inst_51:
// rs1_val == 35184372088832, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:21
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 35184372088832, 21, x3, 240, x1)

inst_52:
// rs1_val == 70368744177664, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0x40000000000000, 70368744177664, 8, x3, 248, x1)

inst_53:
// rs1_val == 140737488355328, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:2
TEST_RR_OP(sllw, x12, x10, x11, 0x2000000000000, 140737488355328, 2, x3, 256, x1)

inst_54:
// rs1_val == 281474976710656, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 281474976710656, 17, x3, 264, x1)

inst_55:
// rs1_val == 562949953421312, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:9
TEST_RR_OP(sllw, x12, x10, x11, 0x400000000000000, 562949953421312, 9, x3, 272, x1)

inst_56:
// rs1_val == 1125899906842624, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 1125899906842624, 19, x3, 280, x1)

inst_57:
// rs1_val == 2251799813685248, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0x800000000000000, 2251799813685248, 8, x3, 288, x1)

inst_58:
// rs1_val == 4503599627370496, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:0
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000000000, 4503599627370496, 0, x3, 296, x1)

inst_59:
// rs1_val == 9007199254740992, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:31
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 9007199254740992, 31, x3, 304, x1)

inst_60:
// rs1_val == 18014398509481984, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:27
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 18014398509481984, 27, x3, 312, x1)

inst_61:
// rs1_val == 36028797018963968, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 36028797018963968, 19, x3, 320, x1)

inst_62:
// rs1_val == 72057594037927936, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 72057594037927936, 30, x3, 328, x1)

inst_63:
// rs1_val == 144115188075855872, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 144115188075855872, 12, x3, 336, x1)

inst_64:
// rs1_val == 288230376151711744, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:5
TEST_RR_OP(sllw, x12, x10, x11, 0x8000000000000000, 288230376151711744, 5, x3, 344, x1)

inst_65:
// rs1_val == 576460752303423488, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:3
TEST_RR_OP(sllw, x12, x10, x11, 0x4000000000000000, 576460752303423488, 3, x3, 352, x1)

inst_66:
// rs1_val == 1152921504606846976, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 1152921504606846976, 12, x3, 360, x1)

inst_67:
// rs1_val == 2305843009213693952, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:5
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 2305843009213693952, 5, x3, 368, x1)

inst_68:
// rs1_val == 4611686018427387904, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:1
TEST_RR_OP(sllw, x12, x10, x11, 0x8000000000000000, 4611686018427387904, 1, x3, 376, x1)

inst_69:
// rs1_val == -2, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:11
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffff000, -2, 11, x3, 384, x1)

inst_70:
// rs1_val == -3, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:14
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffff4000, -3, 14, x3, 392, x1)

inst_71:
// rs1_val == -5, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:14
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffec000, -5, 14, x3, 400, x1)

inst_72:
// rs1_val == -9, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffdc0000000, -9, 30, x3, 408, x1)

inst_73:
// rs1_val == -17, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffbc0000000, -17, 30, x3, 416, x1)

inst_74:
// rs1_val == -33, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:27
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffef8000000, -33, 27, x3, 424, x1)

inst_75:
// rs1_val == -65, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:2
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffffefc, -65, 2, x3, 432, x1)

inst_76:
// rs1_val == -129, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:13
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffefe000, -129, 13, x3, 440, x1)

inst_77:
// rs1_val == -257, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:6
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffbfc0, -257, 6, x3, 448, x1)

inst_78:
// rs1_val == -513, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:23
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffeff800000, -513, 23, x3, 456, x1)

inst_79:
// rs1_val == -1025, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:2
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffeffc, -1025, 2, x3, 464, x1)

inst_80:
// rs1_val == -2049, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:0
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffff7ff, -2049, 0, x3, 472, x1)

inst_81:
// rs1_val == -4097, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:3
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffff7ff8, -4097, 3, x3, 480, x1)

inst_82:
// rs1_val == -8193, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:7
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffefff80, -8193, 7, x3, 488, x1)

inst_83:
// rs1_val == -16385, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:27
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffdfff8000000, -16385, 27, x3, 496, x1)

inst_84:
// rs1_val == -32769, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:5
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffefffe0, -32769, 5, x3, 504, x1)

inst_85:
// rs1_val == -65537, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0xffffbfffc0000000, -65537, 30, x3, 512, x1)

inst_86:
// rs1_val == -131073, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:14
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffff7fffc000, -131073, 14, x3, 520, x1)

inst_87:
// rs1_val == -262145, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffff7fffe0000, -262145, 17, x3, 528, x1)

inst_88:
// rs1_val == -36028797018963969, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffc0000000, -36028797018963969, 30, x3, 536, x1)

inst_89:
// rs1_val == -72057594037927937, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:23
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffff800000, -72057594037927937, 23, x3, 544, x1)

inst_90:
// rs1_val == -144115188075855873, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:27
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffff8000000, -144115188075855873, 27, x3, 552, x1)

inst_91:
// rs1_val == -288230376151711745, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:14
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffc000, -288230376151711745, 14, x3, 560, x1)

inst_92:
// rs1_val == -576460752303423489, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:5
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffffe0, -576460752303423489, 5, x3, 568, x1)

inst_93:
// rs1_val == -1152921504606846977, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:9
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffffe00, -1152921504606846977, 9, x3, 576, x1)

inst_94:
// rs1_val == -2305843009213693953, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:23
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffff800000, -2305843009213693953, 23, x3, 584, x1)

inst_95:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555555555540, 6148914691236517205, 6, x3, 592, x1)

inst_96:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:13
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555555554000, -6148914691236517206, 13, x3, 600, x1)

inst_97:
// rs1_val==3, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:14
TEST_RR_OP(sllw, x12, x10, x11, 0xc000, 3, 14, x3, 608, x1)

inst_98:
// rs1_val==5, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:0
TEST_RR_OP(sllw, x12, x10, x11, 0x5, 5, 0, x3, 616, x1)

inst_99:
// rs1_val==3689348814741910323, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0x3333333333333300, 3689348814741910323, 8, x3, 624, x1)

inst_100:
// rs1_val==7378697629483820646, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:2
TEST_RR_OP(sllw, x12, x10, x11, 0x9999999999999998, 7378697629483820646, 2, x3, 632, x1)

inst_101:
// rs1_val==-3037000499, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:4
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffff4afb0ccd0, -3037000499, 4, x3, 640, x1)

inst_102:
// rs1_val==3037000499, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0x5a82799980000, 3037000499, 19, x3, 648, x1)

inst_103:
// rs1_val==6148914691236517204, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555555554000, 6148914691236517204, 12, x3, 656, x1)

inst_104:
// rs1_val==3689348814741910322, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:21
TEST_RR_OP(sllw, x12, x10, x11, 0x6666666666400000, 3689348814741910322, 21, x3, 664, x1)

inst_105:
// rs1_val==7378697629483820645, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6
TEST_RR_OP(sllw, x12, x10, x11, 0x9999999999999940, 7378697629483820645, 6, x3, 672, x1)

inst_106:
// rs1_val==3037000498, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:11
TEST_RR_OP(sllw, x12, x10, x11, 0x5a827999000, 3037000498, 11, x3, 680, x1)

inst_107:
// rs1_val==6148914691236517206, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:9
TEST_RR_OP(sllw, x12, x10, x11, 0xaaaaaaaaaaaaac00, 6148914691236517206, 9, x3, 688, x1)

inst_108:
// rs1_val==-6148914691236517205, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:15
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555555558000, -6148914691236517205, 15, x3, 696, x1)

inst_109:
// rs1_val==6, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0x180000000, 6, 30, x3, 704, x1)

inst_110:
// rs1_val==3689348814741910324, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0x9999999999a00000, 3689348814741910324, 19, x3, 712, x1)

inst_111:
// rs1_val==7378697629483820647, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:30
TEST_RR_OP(sllw, x12, x10, x11, 0x99999999c0000000, 7378697629483820647, 30, x3, 720, x1)

inst_112:
// rs1_val==-3037000498, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:1
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffe95f6199c, -3037000498, 1, x3, 728, x1)

inst_113:
// rs1_val==3037000500, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:5
TEST_RR_OP(sllw, x12, x10, x11, 0x16a09e6680, 3037000500, 5, x3, 736, x1)

inst_114:
// rs1_val == -524289, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffff7ffff00, -524289, 8, x3, 744, x1)

inst_115:
// rs1_val == -1048577, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffefffff000, -1048577, 12, x3, 752, x1)

inst_116:
// rs1_val == -2097153, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffdfffff00, -2097153, 8, x3, 760, x1)

inst_117:
// rs1_val == -4194305, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:11
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffdfffff800, -4194305, 11, x3, 768, x1)

inst_118:
// rs1_val == -8388609, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:31
TEST_RR_OP(sllw, x12, x10, x11, 0xffbfffff80000000, -8388609, 31, x3, 776, x1)

inst_119:
// rs1_val == -16777217, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:0
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffeffffff, -16777217, 0, x3, 784, x1)

inst_120:
// rs1_val == -33554433, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffbfffffe0000, -33554433, 17, x3, 792, x1)

inst_121:
// rs1_val == -67108865, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:1
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffff7fffffe, -67108865, 1, x3, 800, x1)

inst_122:
// rs1_val == -134217729, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:8
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffff7ffffff00, -134217729, 8, x3, 808, x1)

inst_123:
// rs1_val == -268435457, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:15
TEST_RR_OP(sllw, x12, x10, x11, 0xfffff7ffffff8000, -268435457, 15, x3, 816, x1)

inst_124:
// rs1_val == -536870913, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0xffffbffffffe0000, -536870913, 17, x3, 824, x1)

inst_125:
// rs1_val == -1073741825, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:0
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffbfffffff, -1073741825, 0, x3, 832, x1)

inst_126:
// rs1_val == -2147483649, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:13
TEST_RR_OP(sllw, x12, x10, x11, 0xffffefffffffe000, -2147483649, 13, x3, 840, x1)

inst_127:
// rs1_val == -4294967297, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:23
TEST_RR_OP(sllw, x12, x10, x11, 0xff7fffffff800000, -4294967297, 23, x3, 848, x1)

inst_128:
// rs1_val == -8589934593, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:18
TEST_RR_OP(sllw, x12, x10, x11, 0xfff7fffffffc0000, -8589934593, 18, x3, 856, x1)

inst_129:
// rs1_val == -17179869185, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:29
TEST_RR_OP(sllw, x12, x10, x11, 0x7fffffffe0000000, -17179869185, 29, x3, 864, x1)

inst_130:
// rs1_val == -34359738369, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:13
TEST_RR_OP(sllw, x12, x10, x11, 0xfffeffffffffe000, -34359738369, 13, x3, 872, x1)

inst_131:
// rs1_val == -68719476737, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:10
TEST_RR_OP(sllw, x12, x10, x11, 0xffffbffffffffc00, -68719476737, 10, x3, 880, x1)

inst_132:
// rs1_val == -137438953473, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:4
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffdfffffffff0, -137438953473, 4, x3, 888, x1)

inst_133:
// rs1_val == -274877906945, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:18
TEST_RR_OP(sllw, x12, x10, x11, 0xfefffffffffc0000, -274877906945, 18, x3, 896, x1)

inst_134:
// rs1_val == -549755813889, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0xfbfffffffff80000, -549755813889, 19, x3, 904, x1)

inst_135:
// rs1_val == -1099511627777, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0xffeffffffffff000, -1099511627777, 12, x3, 912, x1)

inst_136:
// rs1_val == -2199023255553, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:6
TEST_RR_OP(sllw, x12, x10, x11, 0xffff7fffffffffc0, -2199023255553, 6, x3, 920, x1)

inst_137:
// rs1_val == -8796093022209, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0xff7ffffffffff000, -8796093022209, 12, x3, 928, x1)

inst_138:
// rs1_val == -17592186044417, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:15
TEST_RR_OP(sllw, x12, x10, x11, 0xf7ffffffffff8000, -17592186044417, 15, x3, 936, x1)

inst_139:
// rs1_val == -35184372088833, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffff80000, -35184372088833, 19, x3, 944, x1)

inst_140:
// rs1_val == -70368744177665, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:3
TEST_RR_OP(sllw, x12, x10, x11, 0xfffdfffffffffff8, -70368744177665, 3, x3, 952, x1)

inst_141:
// rs1_val == -140737488355329, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffff80000, -140737488355329, 19, x3, 960, x1)

inst_142:
// rs1_val == -281474976710657, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:14
TEST_RR_OP(sllw, x12, x10, x11, 0xbfffffffffffc000, -281474976710657, 14, x3, 968, x1)

inst_143:
// rs1_val == -562949953421313, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0xdffffffffffff000, -562949953421313, 12, x3, 976, x1)

inst_144:
// rs1_val == -1125899906842625, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:19
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffff80000, -1125899906842625, 19, x3, 984, x1)

inst_145:
// rs1_val == -2251799813685249, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:5
TEST_RR_OP(sllw, x12, x10, x11, 0xfeffffffffffffe0, -2251799813685249, 5, x3, 992, x1)

inst_146:
// rs1_val == -4503599627370497, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:27
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffff8000000, -4503599627370497, 27, x3, 1000, x1)

inst_147:
// rs1_val == -9007199254740993, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:12
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffff000, -9007199254740993, 12, x3, 1008, x1)

inst_148:
// rs1_val == -18014398509481985, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:17
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffe0000, -18014398509481985, 17, x3, 1016, x1)

inst_149:
// rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs2_val == 21, rs1_val == -4611686018427387905
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:21
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffe00000, -4611686018427387905, 21, x3, 1024, x1)

inst_150:
// rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:7
TEST_RR_OP(sllw, x12, x10, x11, 0x380, 7, 7, x3, 1032, x1)

inst_151:
// rs1_val < 0 and rs2_val == 0, rs1_val == -4398046511105
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:0
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffbffffffffff, -4398046511105, 0, x3, 1040, x1)

inst_152:
// rs1_val == 4, rs2_val == 2, rs1_val==4
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:2
TEST_RR_OP(sllw, x12, x10, x11, 0x10, 4, 2, x3, 1048, x1)

inst_153:
// rs1_val == 16, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:2
TEST_RR_OP(sllw, x12, x10, x11, 0x40, 16, 2, x3, 1056, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 133*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
