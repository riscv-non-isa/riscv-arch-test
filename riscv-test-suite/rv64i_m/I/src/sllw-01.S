
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:23:49 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sllw instruction of the RISC-V i extension for the sllw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64i")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",sllw)

RVTEST_SIGBASE( x12,signature_x12_1)

inst_0:
// rs2 == rd != rs1, rs1==x31, rs2==x27, rd==x27, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == -33
// opcode: sllw ; op1:x31; op2:x27; dest:x27; op1val:-0x21;  op2val:0x9
TEST_RR_OP(sllw, x27, x31, x27, 0xffffffffffffbe00, -0x21, 0x9, x12, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x0, rd==x10, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 128, rs2_val == 2
// opcode: sllw ; op1:x18; op2:x0; dest:x10; op1val:0x80;  op2val:0x2
TEST_RR_OP(sllw, x10, x18, x0, 0x200, 0x80, 0x2, x12, 8, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x14, rs1_val < 0 and rs2_val == 0, rs1_val == -2147483649
// opcode: sllw ; op1:x5; op2:x5; dest:x14; op1val:-0x80000001;  op2val:0x0
TEST_RR_OP(sllw, x14, x5, x5, 0xffffffff7fffffff, -0x80000001, 0x0, x12, 16, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_val > 0 and rs2_val == 0, rs1_val == 72057594037927936
// opcode: sllw ; op1:x2; op2:x2; dest:x2; op1val:0x100000000000000;  op2val:0x0
TEST_RR_OP(sllw, x2, x2, x2, 0x100000000000000, 0x100000000000000, 0x0, x12, 24, x15)

inst_4:
// rs1 == rd != rs2, rs1==x6, rs2==x24, rd==x6, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, rs2_val == 8, rs1_val == 8
// opcode: sllw ; op1:x6; op2:x24; dest:x6; op1val:0x8;  op2val:0x8
TEST_RR_OP(sllw, x6, x6, x24, 0x800, 0x8, 0x8, x12, 32, x15)

inst_5:
// rs1==x24, rs2==x13, rd==x19, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -9223372036854775808, rs2_val == 23
// opcode: sllw ; op1:x24; op2:x13; dest:x19; op1val:-0x8000000000000000;  op2val:0x17
TEST_RR_OP(sllw, x19, x24, x13, 0x0, -0x8000000000000000, 0x17, x12, 40, x15)

inst_6:
// rs1==x11, rs2==x7, rd==x25, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs2_val == 21, rs1_val==0
// opcode: sllw ; op1:x11; op2:x7; dest:x25; op1val:0x0;  op2val:0x15
TEST_RR_OP(sllw, x25, x11, x7, 0x0, 0x0, 0x15, x12, 48, x15)

inst_7:
// rs1==x28, rs2==x6, rd==x16, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 9223372036854775807, rs2_val == 10
// opcode: sllw ; op1:x28; op2:x6; dest:x16; op1val:0x7fffffffffffffff;  op2val:0xa
TEST_RR_OP(sllw, x16, x28, x6, 0xfffffffffffffc00, 0x7fffffffffffffff, 0xa, x12, 56, x15)

inst_8:
// rs1==x7, rs2==x20, rd==x28, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1
// opcode: sllw ; op1:x7; op2:x20; dest:x28; op1val:0x1;  op2val:0x13
TEST_RR_OP(sllw, x28, x7, x20, 0x80000, 0x1, 0x13, x12, 64, x15)

inst_9:
// rs1==x21, rs2==x23, rd==x1, rs1_val == 2, rs1_val==2
// opcode: sllw ; op1:x21; op2:x23; dest:x1; op1val:0x2;  op2val:0x13
TEST_RR_OP(sllw, x1, x21, x23, 0x100000, 0x2, 0x13, x12, 72, x15)

inst_10:
// rs1==x26, rs2==x8, rd==x24, rs1_val == 4, rs1_val==4
// opcode: sllw ; op1:x26; op2:x8; dest:x24; op1val:0x4;  op2val:0xe
TEST_RR_OP(sllw, x24, x26, x8, 0x10000, 0x4, 0xe, x12, 80, x15)

inst_11:
// rs1==x25, rs2==x1, rd==x22, rs1_val == 16, 
// opcode: sllw ; op1:x25; op2:x1; dest:x22; op1val:0x10;  op2val:0x11
TEST_RR_OP(sllw, x22, x25, x1, 0x200000, 0x10, 0x11, x12, 88, x15)

inst_12:
// rs1==x29, rs2==x18, rd==x21, rs1_val == 32, 
// opcode: sllw ; op1:x29; op2:x18; dest:x21; op1val:0x20;  op2val:0xd
TEST_RR_OP(sllw, x21, x29, x18, 0x40000, 0x20, 0xd, x12, 96, x15)

inst_13:
// rs1==x4, rs2==x22, rd==x7, rs1_val == 64, 
// opcode: sllw ; op1:x4; op2:x22; dest:x7; op1val:0x40;  op2val:0x13
TEST_RR_OP(sllw, x7, x4, x22, 0x2000000, 0x40, 0x13, x12, 104, x15)

inst_14:
// rs1==x9, rs2==x4, rd==x29, rs1_val == 256, 
// opcode: sllw ; op1:x9; op2:x4; dest:x29; op1val:0x100;  op2val:0x1f
TEST_RR_OP(sllw, x29, x9, x4, 0x8000000000, 0x100, 0x1f, x12, 112, x15)

inst_15:
// rs1==x14, rs2==x16, rd==x31, rs1_val == 512, 
// opcode: sllw ; op1:x14; op2:x16; dest:x31; op1val:0x200;  op2val:0x1f
TEST_RR_OP(sllw, x31, x14, x16, 0x10000000000, 0x200, 0x1f, x12, 120, x15)

inst_16:
// rs1==x23, rs2==x28, rd==x11, rs1_val == 1024, 
// opcode: sllw ; op1:x23; op2:x28; dest:x11; op1val:0x400;  op2val:0x8
TEST_RR_OP(sllw, x11, x23, x28, 0x40000, 0x400, 0x8, x12, 128, x15)

inst_17:
// rs1==x16, rs2==x10, rd==x3, rs1_val == 2048, 
// opcode: sllw ; op1:x16; op2:x10; dest:x3; op1val:0x800;  op2val:0x13
TEST_RR_OP(sllw, x3, x16, x10, 0x40000000, 0x800, 0x13, x12, 136, x15)

inst_18:
// rs1==x19, rs2==x29, rd==x15, rs1_val == 4096, 
// opcode: sllw ; op1:x19; op2:x29; dest:x15; op1val:0x1000;  op2val:0x7
TEST_RR_OP(sllw, x15, x19, x29, 0x80000, 0x1000, 0x7, x12, 144, x6)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_19:
// rs1==x8, rs2==x14, rd==x26, rs1_val == 8192, 
// opcode: sllw ; op1:x8; op2:x14; dest:x26; op1val:0x2000;  op2val:0x9
TEST_RR_OP(sllw, x26, x8, x14, 0x400000, 0x2000, 0x9, x2, 0, x6)

inst_20:
// rs1==x3, rs2==x21, rd==x20, rs1_val == 16384, 
// opcode: sllw ; op1:x3; op2:x21; dest:x20; op1val:0x4000;  op2val:0x0
TEST_RR_OP(sllw, x20, x3, x21, 0x4000, 0x4000, 0x0, x2, 8, x6)

inst_21:
// rs1==x1, rs2==x25, rd==x9, rs1_val == 32768, 
// opcode: sllw ; op1:x1; op2:x25; dest:x9; op1val:0x8000;  op2val:0xd
TEST_RR_OP(sllw, x9, x1, x25, 0x10000000, 0x8000, 0xd, x2, 16, x6)

inst_22:
// rs1==x22, rs2==x15, rd==x17, rs1_val == 65536, 
// opcode: sllw ; op1:x22; op2:x15; dest:x17; op1val:0x10000;  op2val:0x15
TEST_RR_OP(sllw, x17, x22, x15, 0x2000000000, 0x10000, 0x15, x2, 24, x6)

inst_23:
// rs1==x10, rs2==x9, rd==x0, rs1_val == 131072, 
// opcode: sllw ; op1:x10; op2:x9; dest:x0; op1val:0x20000;  op2val:0xb
TEST_RR_OP(sllw, x0, x10, x9, 0x10000000, 0x20000, 0xb, x2, 32, x6)

inst_24:
// rs1==x0, rs2==x3, rd==x18, rs1_val == 262144, 
// opcode: sllw ; op1:x0; op2:x3; dest:x18; op1val:0x40000;  op2val:0x13
TEST_RR_OP(sllw, x18, x0, x3, 0x2000000000, 0x40000, 0x13, x2, 40, x6)

inst_25:
// rs1==x15, rs2==x26, rd==x12, rs1_val == 524288, 
// opcode: sllw ; op1:x15; op2:x26; dest:x12; op1val:0x80000;  op2val:0xe
TEST_RR_OP(sllw, x12, x15, x26, 0x200000000, 0x80000, 0xe, x2, 48, x6)

inst_26:
// rs1==x20, rs2==x30, rd==x23, rs1_val == 1048576, rs2_val == 1
// opcode: sllw ; op1:x20; op2:x30; dest:x23; op1val:0x100000;  op2val:0x1
TEST_RR_OP(sllw, x23, x20, x30, 0x200000, 0x100000, 0x1, x2, 56, x6)

inst_27:
// rs1==x27, rs2==x19, rd==x4, rs1_val == 2097152, 
// opcode: sllw ; op1:x27; op2:x19; dest:x4; op1val:0x200000;  op2val:0x7
TEST_RR_OP(sllw, x4, x27, x19, 0x10000000, 0x200000, 0x7, x2, 64, x6)

inst_28:
// rs1==x13, rs2==x17, rd==x5, rs1_val == 4194304, 
// opcode: sllw ; op1:x13; op2:x17; dest:x5; op1val:0x400000;  op2val:0x2
TEST_RR_OP(sllw, x5, x13, x17, 0x1000000, 0x400000, 0x2, x2, 72, x6)

inst_29:
// rs1==x17, rs2==x11, rd==x8, rs1_val == 8388608, 
// opcode: sllw ; op1:x17; op2:x11; dest:x8; op1val:0x800000;  op2val:0xa
TEST_RR_OP(sllw, x8, x17, x11, 0x200000000, 0x800000, 0xa, x2, 80, x6)

inst_30:
// rs1==x30, rs2==x12, rd==x13, rs1_val == 16777216, 
// opcode: sllw ; op1:x30; op2:x12; dest:x13; op1val:0x1000000;  op2val:0x0
TEST_RR_OP(sllw, x13, x30, x12, 0x1000000, 0x1000000, 0x0, x2, 88, x6)

inst_31:
// rs1==x12, rs2==x31, rd==x30, rs1_val == 33554432, 
// opcode: sllw ; op1:x12; op2:x31; dest:x30; op1val:0x2000000;  op2val:0x9
TEST_RR_OP(sllw, x30, x12, x31, 0x400000000, 0x2000000, 0x9, x2, 96, x6)

inst_32:
// rs1_val == 67108864, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0x12
TEST_RR_OP(sllw, x12, x10, x11, 0x100000000000, 0x4000000, 0x12, x2, 104, x6)

inst_33:
// rs1_val == 134217728, rs2_val == 27
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0x1b
TEST_RR_OP(sllw, x12, x10, x11, 0x40000000000000, 0x8000000, 0x1b, x2, 112, x6)

inst_34:
// rs1_val == 268435456, rs2_val == 29
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x1d
TEST_RR_OP(sllw, x12, x10, x11, 0x200000000000000, 0x10000000, 0x1d, x2, 120, x6)

inst_35:
// rs1_val == 536870912, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x15
TEST_RR_OP(sllw, x12, x10, x11, 0x4000000000000, 0x20000000, 0x15, x2, 128, x6)

inst_36:
// rs1_val == 1073741824, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:0x1d
TEST_RR_OP(sllw, x12, x10, x11, 0x800000000000000, 0x40000000, 0x1d, x2, 136, x6)

inst_37:
// rs1_val == 2147483648, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:0x1d
TEST_RR_OP(sllw, x12, x10, x11, 0x1000000000000000, 0x80000000, 0x1d, x2, 144, x6)

inst_38:
// rs1_val == 4294967296, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x100000000;  op2val:0x15
TEST_RR_OP(sllw, x12, x10, x11, 0x20000000000000, 0x100000000, 0x15, x2, 152, x6)

inst_39:
// rs1_val == 8589934592, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x200000000;  op2val:0x11
TEST_RR_OP(sllw, x12, x10, x11, 0x4000000000000, 0x200000000, 0x11, x2, 160, x6)

inst_40:
// rs1_val == 17179869184, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x400000000;  op2val:0x6
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000000, 0x400000000, 0x6, x2, 168, x6)

inst_41:
// rs1_val == 34359738368, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x800000000;  op2val:0x13
TEST_RR_OP(sllw, x12, x10, x11, 0x40000000000000, 0x800000000, 0x13, x2, 176, x6)

inst_42:
// rs1_val == 68719476736, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x1000000000;  op2val:0x1
TEST_RR_OP(sllw, x12, x10, x11, 0x2000000000, 0x1000000000, 0x1, x2, 184, x6)

inst_43:
// rs1_val == 137438953472, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x2000000000;  op2val:0x3
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000000, 0x2000000000, 0x3, x2, 192, x6)

inst_44:
// rs1_val == 274877906944, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x4000000000;  op2val:0xe
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000000000, 0x4000000000, 0xe, x2, 200, x6)

inst_45:
// rs1_val == 549755813888, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x8000000000;  op2val:0xa
TEST_RR_OP(sllw, x12, x10, x11, 0x2000000000000, 0x8000000000, 0xa, x2, 208, x6)

inst_46:
// rs1_val == 1099511627776, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x10000000000;  op2val:0x1
TEST_RR_OP(sllw, x12, x10, x11, 0x20000000000, 0x10000000000, 0x1, x2, 216, x6)

inst_47:
// rs1_val == 2199023255552, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x20000000000;  op2val:0x8
TEST_RR_OP(sllw, x12, x10, x11, 0x2000000000000, 0x20000000000, 0x8, x2, 224, x6)

inst_48:
// rs1_val == 4398046511104, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x40000000000;  op2val:0x8
TEST_RR_OP(sllw, x12, x10, x11, 0x4000000000000, 0x40000000000, 0x8, x2, 232, x6)

inst_49:
// rs1_val == 8796093022208, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x80000000000;  op2val:0x6
TEST_RR_OP(sllw, x12, x10, x11, 0x2000000000000, 0x80000000000, 0x6, x2, 240, x6)

inst_50:
// rs1_val == 17592186044416, rs2_val == 30
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x100000000000;  op2val:0x1e
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x100000000000, 0x1e, x2, 248, x6)

inst_51:
// rs1_val == 35184372088832, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x200000000000;  op2val:0x8
TEST_RR_OP(sllw, x12, x10, x11, 0x20000000000000, 0x200000000000, 0x8, x2, 256, x6)

inst_52:
// rs1_val == 70368744177664, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x400000000000;  op2val:0x8
TEST_RR_OP(sllw, x12, x10, x11, 0x40000000000000, 0x400000000000, 0x8, x2, 264, x6)

inst_53:
// rs1_val == 140737488355328, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x800000000000;  op2val:0x1e
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x800000000000, 0x1e, x2, 272, x6)

inst_54:
// rs1_val == 281474976710656, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x1000000000000;  op2val:0xe
TEST_RR_OP(sllw, x12, x10, x11, 0x4000000000000000, 0x1000000000000, 0xe, x2, 280, x6)

inst_55:
// rs1_val == 562949953421312, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x2000000000000;  op2val:0x0
TEST_RR_OP(sllw, x12, x10, x11, 0x2000000000000, 0x2000000000000, 0x0, x2, 288, x6)

inst_56:
// rs1_val == 1125899906842624, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x4000000000000;  op2val:0x11
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x4000000000000, 0x11, x2, 296, x6)

inst_57:
// rs1_val == 2251799813685248, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x8000000000000;  op2val:0x1d
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x8000000000000, 0x1d, x2, 304, x6)

inst_58:
// rs1_val == 4503599627370496, rs2_val == 4
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x10000000000000;  op2val:0x4
TEST_RR_OP(sllw, x12, x10, x11, 0x100000000000000, 0x10000000000000, 0x4, x2, 312, x6)

inst_59:
// rs1_val == 9007199254740992, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x20000000000000;  op2val:0x2
TEST_RR_OP(sllw, x12, x10, x11, 0x80000000000000, 0x20000000000000, 0x2, x2, 320, x6)

inst_60:
// rs1_val == 18014398509481984, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x40000000000000;  op2val:0x9
TEST_RR_OP(sllw, x12, x10, x11, 0x8000000000000000, 0x40000000000000, 0x9, x2, 328, x6)

inst_61:
// rs1_val == 36028797018963968, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x80000000000000;  op2val:0xe
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x80000000000000, 0xe, x2, 336, x6)

inst_62:
// rs1_val == 144115188075855872, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x200000000000000;  op2val:0x1f
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x200000000000000, 0x1f, x2, 344, x6)

inst_63:
// rs1_val == 288230376151711744, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x400000000000000;  op2val:0xc
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x400000000000000, 0xc, x2, 352, x6)

inst_64:
// rs1_val == 576460752303423488, rs2_val == 16
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x800000000000000;  op2val:0x10
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x800000000000000, 0x10, x2, 360, x6)

inst_65:
// rs1_val == 1152921504606846976, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x1000000000000000;  op2val:0x5
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x1000000000000000, 0x5, x2, 368, x6)

inst_66:
// rs1_val == 2305843009213693952, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x2000000000000000;  op2val:0x2
TEST_RR_OP(sllw, x12, x10, x11, 0x8000000000000000, 0x2000000000000000, 0x2, x2, 376, x6)

inst_67:
// rs1_val == 4611686018427387904, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x4000000000000000;  op2val:0x9
TEST_RR_OP(sllw, x12, x10, x11, 0x0, 0x4000000000000000, 0x9, x2, 384, x6)

inst_68:
// rs1_val == -2, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x2;  op2val:0x8
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffffe00, -0x2, 0x8, x2, 392, x6)

inst_69:
// rs1_val == -3, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x3;  op2val:0x2
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffffff4, -0x3, 0x2, x2, 400, x6)

inst_70:
// rs1_val == -5, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x9
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffff600, -0x5, 0x9, x2, 408, x6)

inst_71:
// rs1_val == -9, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x9;  op2val:0x4
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffff70, -0x9, 0x4, x2, 416, x6)

inst_72:
// rs1_val == -17, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:0xb
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffff7800, -0x11, 0xb, x2, 424, x6)

inst_73:
// rs1_val == -65, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x41;  op2val:0x7
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffdf80, -0x41, 0x7, x2, 432, x6)

inst_74:
// rs1_val == -129, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x81;  op2val:0xc
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffff7f000, -0x81, 0xc, x2, 440, x6)

inst_75:
// rs1_val == -257, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x101;  op2val:0x1
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffffdfe, -0x101, 0x1, x2, 448, x6)

inst_76:
// rs1_val == -513, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:0x13
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffeff80000, -0x201, 0x13, x2, 456, x6)

inst_77:
// rs1_val == -1025, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x401;  op2val:0x0
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffffbff, -0x401, 0x0, x2, 464, x6)

inst_78:
// rs1_val == -2049, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x801;  op2val:0x13
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffbff80000, -0x801, 0x13, x2, 472, x6)

inst_79:
// rs1_val == -4097, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x1001;  op2val:0x7
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffff7ff80, -0x1001, 0x7, x2, 480, x6)

inst_80:
// rs1_val == -8193, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:0xc
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffdfff000, -0x2001, 0xc, x2, 488, x6)

inst_81:
// rs1_val == -16385, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x4001;  op2val:0xd
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffff7ffe000, -0x4001, 0xd, x2, 496, x6)

inst_82:
// rs1_val == -32769, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x8001;  op2val:0x1d
TEST_RR_OP(sllw, x12, x10, x11, 0xffffefffe0000000, -0x8001, 0x1d, x2, 504, x6)

inst_83:
// rs1_val == -65537, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x10001;  op2val:0x5
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffdfffe0, -0x10001, 0x5, x2, 512, x6)

inst_84:
// rs1_val == -131073, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x20001;  op2val:0x1b
TEST_RR_OP(sllw, x12, x10, x11, 0xffffeffff8000000, -0x20001, 0x1b, x2, 520, x6)

inst_85:
// rs1_val == -262145, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:0xb
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffdffff800, -0x40001, 0xb, x2, 528, x6)

inst_86:
// rs1_val == -524289, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x80001;  op2val:0xc
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffff7ffff000, -0x80001, 0xc, x2, 536, x6)

inst_87:
// rs1_val == -1048577, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x100001;  op2val:0xc
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffefffff000, -0x100001, 0xc, x2, 544, x6)

inst_88:
// rs1_val == -36028797018963969, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000000001;  op2val:0xd
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffe000, -0x80000000000001, 0xd, x2, 552, x6)

inst_89:
// rs1_val == -72057594037927937, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x100000000000001;  op2val:0xc
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffff000, -0x100000000000001, 0xc, x2, 560, x6)

inst_90:
// rs1_val == -144115188075855873, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x200000000000001;  op2val:0xe
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffc000, -0x200000000000001, 0xe, x2, 568, x6)

inst_91:
// rs1_val == -288230376151711745, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x400000000000001;  op2val:0x6
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffffc0, -0x400000000000001, 0x6, x2, 576, x6)

inst_92:
// rs1_val == -576460752303423489, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x800000000000001;  op2val:0xb
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffff800, -0x800000000000001, 0xb, x2, 584, x6)

inst_93:
// rs1_val == -1152921504606846977, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x1000000000000001;  op2val:0x4
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffffff0, -0x1000000000000001, 0x4, x2, 592, x6)

inst_94:
// rs1_val == -2305843009213693953, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x2000000000000001;  op2val:0xd
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffffffe000, -0x2000000000000001, 0xd, x2, 600, x6)

inst_95:
// rs1_val == -4611686018427387905, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x4000000000000001;  op2val:0x1e
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffc0000000, -0x4000000000000001, 0x1e, x2, 608, x6)

inst_96:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x3
TEST_RR_OP(sllw, x12, x10, x11, 0xaaaaaaaaaaaaaaa8, 0x5555555555555555, 0x3, x2, 616, x6)

inst_97:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x15
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555555400000, -0x5555555555555556, 0x15, x2, 624, x6)

inst_98:
// rs1_val==3, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x7
TEST_RR_OP(sllw, x12, x10, x11, 0x180, 0x3, 0x7, x2, 632, x6)

inst_99:
// rs1_val==5, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x2
TEST_RR_OP(sllw, x12, x10, x11, 0x14, 0x5, 0x2, x2, 640, x6)

inst_100:
// rs1_val==3689348814741910323, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x5
TEST_RR_OP(sllw, x12, x10, x11, 0x6666666666666660, 0x3333333333333333, 0x5, x2, 648, x6)

inst_101:
// rs1_val==7378697629483820646, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0xe
TEST_RR_OP(sllw, x12, x10, x11, 0x9999999999998000, 0x6666666666666666, 0xe, x2, 656, x6)

inst_102:
// rs1_val==-3037000499, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x1d
TEST_RR_OP(sllw, x12, x10, x11, 0xe95f6199a0000000, -0xb504f333, 0x1d, x2, 664, x6)

inst_103:
// rs1_val==3037000499, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0xd
TEST_RR_OP(sllw, x12, x10, x11, 0x16a09e666000, 0xb504f333, 0xd, x2, 672, x6)

inst_104:
// rs1_val==6148914691236517204, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x8
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555555555400, 0x5555555555555554, 0x8, x2, 680, x6)

inst_105:
// rs1_val==3689348814741910322, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x2
TEST_RR_OP(sllw, x12, x10, x11, 0xccccccccccccccc8, 0x3333333333333332, 0x2, x2, 688, x6)

inst_106:
// rs1_val==7378697629483820645, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x6
TEST_RR_OP(sllw, x12, x10, x11, 0x9999999999999940, 0x6666666666666665, 0x6, x2, 696, x6)

inst_107:
// rs1_val==3037000498, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0xa
TEST_RR_OP(sllw, x12, x10, x11, 0x2d413ccc800, 0xb504f332, 0xa, x2, 704, x6)

inst_108:
// rs1_val==6148914691236517206, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x1e
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555580000000, 0x5555555555555556, 0x1e, x2, 712, x6)

inst_109:
// rs1_val==-6148914691236517205, rs2_val == 15
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0xf
TEST_RR_OP(sllw, x12, x10, x11, 0x5555555555558000, -0x5555555555555555, 0xf, x2, 720, x6)

inst_110:
// rs1_val==6, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6
TEST_RR_OP(sllw, x12, x10, x11, 0x180, 0x6, 0x6, x2, 728, x6)

inst_111:
// rs1_val==3689348814741910324, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0xf
TEST_RR_OP(sllw, x12, x10, x11, 0x99999999999a0000, 0x3333333333333334, 0xf, x2, 736, x6)

inst_112:
// rs1_val==7378697629483820647, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x1
TEST_RR_OP(sllw, x12, x10, x11, 0xccccccccccccccce, 0x6666666666666667, 0x1, x2, 744, x6)

inst_113:
// rs1_val==-3037000498, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x13
TEST_RR_OP(sllw, x12, x10, x11, 0xfffa57d866700000, -0xb504f332, 0x13, x2, 752, x6)

inst_114:
// rs1_val==3037000500, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x1
TEST_RR_OP(sllw, x12, x10, x11, 0x16a09e668, 0xb504f334, 0x1, x2, 760, x6)

inst_115:
// rs1_val == -2097153, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x200001;  op2val:0x17
TEST_RR_OP(sllw, x12, x10, x11, 0xffffefffff800000, -0x200001, 0x17, x2, 768, x6)

inst_116:
// rs1_val == -4194305, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x400001;  op2val:0x17
TEST_RR_OP(sllw, x12, x10, x11, 0xffffdfffff800000, -0x400001, 0x17, x2, 776, x6)

inst_117:
// rs1_val == -8388609, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x800001;  op2val:0x1d
TEST_RR_OP(sllw, x12, x10, x11, 0xffefffffe0000000, -0x800001, 0x1d, x2, 784, x6)

inst_118:
// rs1_val == -16777217, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:0x5
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffdfffffe0, -0x1000001, 0x5, x2, 792, x6)

inst_119:
// rs1_val == -33554433, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x2000001;  op2val:0xb
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffeffffff800, -0x2000001, 0xb, x2, 800, x6)

inst_120:
// rs1_val == -67108865, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:0x10
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffbffffff0000, -0x4000001, 0x10, x2, 808, x6)

inst_121:
// rs1_val == -134217729, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x8000001;  op2val:0x2
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffdffffffc, -0x8000001, 0x2, x2, 816, x6)

inst_122:
// rs1_val == -268435457, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:0x7
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffff7ffffff80, -0x10000001, 0x7, x2, 824, x6)

inst_123:
// rs1_val == -536870913, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x20000001;  op2val:0x8
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffdfffffff00, -0x20000001, 0x8, x2, 832, x6)

inst_124:
// rs1_val == -1073741825, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x40000001;  op2val:0xf
TEST_RR_OP(sllw, x12, x10, x11, 0xffffdfffffff8000, -0x40000001, 0xf, x2, 840, x6)

inst_125:
// rs1_val == -4294967297, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x100000001;  op2val:0xe
TEST_RR_OP(sllw, x12, x10, x11, 0xffffbfffffffc000, -0x100000001, 0xe, x2, 848, x6)

inst_126:
// rs1_val == -8589934593, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x200000001;  op2val:0x10
TEST_RR_OP(sllw, x12, x10, x11, 0xfffdffffffff0000, -0x200000001, 0x10, x2, 856, x6)

inst_127:
// rs1_val == -17179869185, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x400000001;  op2val:0xf
TEST_RR_OP(sllw, x12, x10, x11, 0xfffdffffffff8000, -0x400000001, 0xf, x2, 864, x6)

inst_128:
// rs1_val == -34359738369, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x800000001;  op2val:0x7
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffbffffffff80, -0x800000001, 0x7, x2, 872, x6)

inst_129:
// rs1_val == -68719476737, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x1000000001;  op2val:0xf
TEST_RR_OP(sllw, x12, x10, x11, 0xfff7ffffffff8000, -0x1000000001, 0xf, x2, 880, x6)

inst_130:
// rs1_val == -137438953473, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x2000000001;  op2val:0x0
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffdfffffffff, -0x2000000001, 0x0, x2, 888, x6)

inst_131:
// rs1_val == -274877906945, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x4000000001;  op2val:0x3
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffdfffffffff8, -0x4000000001, 0x3, x2, 896, x6)

inst_132:
// rs1_val == -549755813889, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x8000000001;  op2val:0x6
TEST_RR_OP(sllw, x12, x10, x11, 0xffffdfffffffffc0, -0x8000000001, 0x6, x2, 904, x6)

inst_133:
// rs1_val == -1099511627777, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x10000000001;  op2val:0x15
TEST_RR_OP(sllw, x12, x10, x11, 0xdfffffffffe00000, -0x10000000001, 0x15, x2, 912, x6)

inst_134:
// rs1_val == -2199023255553, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x20000000001;  op2val:0x9
TEST_RR_OP(sllw, x12, x10, x11, 0xfffbfffffffffe00, -0x20000000001, 0x9, x2, 920, x6)

inst_135:
// rs1_val == -4398046511105, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x40000000001;  op2val:0x11
TEST_RR_OP(sllw, x12, x10, x11, 0xf7fffffffffe0000, -0x40000000001, 0x11, x2, 928, x6)

inst_136:
// rs1_val == -8796093022209, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000001;  op2val:0x17
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffff800000, -0x80000000001, 0x17, x2, 936, x6)

inst_137:
// rs1_val == -17592186044417, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x100000000001;  op2val:0xa
TEST_RR_OP(sllw, x12, x10, x11, 0xffbffffffffffc00, -0x100000000001, 0xa, x2, 944, x6)

inst_138:
// rs1_val == -35184372088833, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x200000000001;  op2val:0x7
TEST_RR_OP(sllw, x12, x10, x11, 0xffefffffffffff80, -0x200000000001, 0x7, x2, 952, x6)

inst_139:
// rs1_val == -70368744177665, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x400000000001;  op2val:0x11
TEST_RR_OP(sllw, x12, x10, x11, 0x7ffffffffffe0000, -0x400000000001, 0x11, x2, 960, x6)

inst_140:
// rs1_val == -140737488355329, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x800000000001;  op2val:0xe
TEST_RR_OP(sllw, x12, x10, x11, 0xdfffffffffffc000, -0x800000000001, 0xe, x2, 968, x6)

inst_141:
// rs1_val == -281474976710657, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x1000000000001;  op2val:0xd
TEST_RR_OP(sllw, x12, x10, x11, 0xdfffffffffffe000, -0x1000000000001, 0xd, x2, 976, x6)

inst_142:
// rs1_val == -562949953421313, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x2000000000001;  op2val:0xa
TEST_RR_OP(sllw, x12, x10, x11, 0xf7fffffffffffc00, -0x2000000000001, 0xa, x2, 984, x6)

inst_143:
// rs1_val == -1125899906842625, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x4000000000001;  op2val:0x17
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffff800000, -0x4000000000001, 0x17, x2, 992, x6)

inst_144:
// rs1_val == -2251799813685249, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x8000000000001;  op2val:0x11
TEST_RR_OP(sllw, x12, x10, x11, 0xfffffffffffe0000, -0x8000000000001, 0x11, x2, 1000, x6)

inst_145:
// rs1_val == -4503599627370497, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x10000000000001;  op2val:0x1e
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffffc0000000, -0x10000000000001, 0x1e, x2, 1008, x6)

inst_146:
// rs1_val == -9007199254740993, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x20000000000001;  op2val:0x3
TEST_RR_OP(sllw, x12, x10, x11, 0xfefffffffffffff8, -0x20000000000001, 0x3, x2, 1016, x6)

inst_147:
// rs1_val == -18014398509481985, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x40000000000001;  op2val:0x9
TEST_RR_OP(sllw, x12, x10, x11, 0x7ffffffffffffe00, -0x40000000000001, 0x9, x2, 1024, x6)

inst_148:
// rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 128, rs2_val == 2
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:0x2
TEST_RR_OP(sllw, x12, x10, x11, 0x200, 0x80, 0x2, x2, 1032, x6)

inst_149:
// rs1_val < 0 and rs2_val == 0, rs1_val == -2147483649
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:-0x80000001;  op2val:0x0
TEST_RR_OP(sllw, x12, x10, x11, 0xffffffff7fffffff, -0x80000001, 0x0, x2, 1040, x6)

inst_150:
// rs1_val > 0 and rs2_val == 0, rs1_val == 72057594037927936
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x100000000000000;  op2val:0x0
TEST_RR_OP(sllw, x12, x10, x11, 0x100000000000000, 0x100000000000000, 0x0, x2, 1048, x6)

inst_151:
// rs1_val == 131072, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:0xb
TEST_RR_OP(sllw, x12, x10, x11, 0x10000000, 0x20000, 0xb, x2, 1056, x6)

inst_152:
// rs1_val == 262144, 
// opcode: sllw ; op1:x10; op2:x11; dest:x12; op1val:0x40000;  op2val:0x13
TEST_RR_OP(sllw, x12, x10, x11, 0x2000000000, 0x40000, 0x13, x2, 1064, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 134*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
