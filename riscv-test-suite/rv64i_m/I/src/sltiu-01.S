 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sltiu instruction of the RISC-V I extension for the sltiu covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltiu)

RVTEST_SIGBASE( x5,signature_x5_1)

inst_0:
// rs1 == rd, rs1==x22, rd==x22, rs1_val == imm_val and rs1_val > 0 and imm_val > 0, rs1_val == 2048, imm_val == 2048
// opcode: sltiu ; op1:x22; dest:x22; op1val:2048;  immval:2048
TEST_IMM_OP( sltiu, x22, x22, 0x0, 2048, 2048, x5, 0, x13)

inst_1:
// rs1 != rd, rs1==x3, rd==x11, rs1_val != imm_val and rs1_val > 0 and imm_val > 0, rs1_val == 18446735277616529407
// opcode: sltiu ; op1:x3; dest:x11; op1val:18446735277616529407;  immval:11
TEST_IMM_OP( sltiu, x11, x3, 0x0, 18446735277616529407, 11, x5, 8, x13)

inst_2:
// rs1==x17, rd==x19, rs1_val == 0, imm_val == 1024
// opcode: sltiu ; op1:x17; dest:x19; op1val:0;  immval:1024
TEST_IMM_OP( sltiu, x19, x17, 0x1, 0, 1024, x5, 16, x13)

inst_3:
// rs1==x11, rd==x6, rs1_val == (2**(xlen)-1), imm_val == 4087
// opcode: sltiu ; op1:x11; dest:x6; op1val:18446744073709551615;  immval:4087
TEST_IMM_OP( sltiu, x6, x11, 0x0, 18446744073709551615, 4087, x5, 24, x13)

inst_4:
// rs1==x10, rd==x18, rs1_val == 1, imm_val == 64
// opcode: sltiu ; op1:x10; dest:x18; op1val:1;  immval:64
TEST_IMM_OP( sltiu, x18, x10, 0x1, 1, 64, x5, 32, x13)

inst_5:
// rs1==x30, rd==x20, imm_val == 0, rs1_val == 18444492273895866367
// opcode: sltiu ; op1:x30; dest:x20; op1val:18444492273895866367;  immval:0
TEST_IMM_OP( sltiu, x20, x30, 0x0, 18444492273895866367, 0, x5, 40, x13)

inst_6:
// rs1==x28, rd==x4, imm_val == (2**(12)-1), rs1_val == 68719476736
// opcode: sltiu ; op1:x28; dest:x4; op1val:68719476736;  immval:4095
TEST_IMM_OP( sltiu, x4, x28, 0x0, 68719476736, 4095, x5, 48, x13)

inst_7:
// rs1==x14, rd==x29, imm_val == 1, rs1_val == 18446603336221196287
// opcode: sltiu ; op1:x14; dest:x29; op1val:18446603336221196287;  immval:1
TEST_IMM_OP( sltiu, x29, x14, 0x0, 18446603336221196287, 1, x5, 56, x13)

inst_8:
// rs1==x29, rd==x10, rs1_val == 2, 
// opcode: sltiu ; op1:x29; dest:x10; op1val:2;  immval:18
TEST_IMM_OP( sltiu, x10, x29, 0x1, 2, 18, x5, 64, x13)

inst_9:
// rs1==x7, rd==x24, rs1_val == 4, 
// opcode: sltiu ; op1:x7; dest:x24; op1val:4;  immval:64
TEST_IMM_OP( sltiu, x24, x7, 0x1, 4, 64, x5, 72, x13)

inst_10:
// rs1==x26, rd==x0, rs1_val == 8, 
// opcode: sltiu ; op1:x26; dest:x0; op1val:8;  immval:14
TEST_IMM_OP( sltiu, x0, x26, 0x1, 8, 14, x5, 80, x13)

inst_11:
// rs1==x31, rd==x7, rs1_val == 16, 
// opcode: sltiu ; op1:x31; dest:x7; op1val:16;  immval:1024
TEST_IMM_OP( sltiu, x7, x31, 0x1, 16, 1024, x5, 88, x13)

inst_12:
// rs1==x23, rd==x31, rs1_val == 32, 
// opcode: sltiu ; op1:x23; dest:x31; op1val:32;  immval:10
TEST_IMM_OP( sltiu, x31, x23, 0x0, 32, 10, x5, 96, x13)

inst_13:
// rs1==x19, rd==x14, rs1_val == 64, 
// opcode: sltiu ; op1:x19; dest:x14; op1val:64;  immval:12
TEST_IMM_OP( sltiu, x14, x19, 0x0, 64, 12, x5, 104, x13)

inst_14:
// rs1==x20, rd==x12, rs1_val == 128, 
// opcode: sltiu ; op1:x20; dest:x12; op1val:128;  immval:18
TEST_IMM_OP( sltiu, x12, x20, 0x0, 128, 18, x5, 112, x13)

inst_15:
// rs1==x16, rd==x9, rs1_val == 256, 
// opcode: sltiu ; op1:x16; dest:x9; op1val:256;  immval:18
TEST_IMM_OP( sltiu, x9, x16, 0x0, 256, 18, x5, 120, x13)

inst_16:
// rs1==x25, rd==x3, rs1_val == 512, imm_val == 4094
// opcode: sltiu ; op1:x25; dest:x3; op1val:512;  immval:4094
TEST_IMM_OP( sltiu, x3, x25, 0x1, 512, 4094, x5, 128, x13)

inst_17:
// rs1==x12, rd==x8, rs1_val == 1024, imm_val == 8
// opcode: sltiu ; op1:x12; dest:x8; op1val:1024;  immval:8
TEST_IMM_OP( sltiu, x8, x12, 0x0, 1024, 8, x5, 136, x13)

inst_18:
// rs1==x1, rd==x28, rs1_val == 4096, imm_val == 4
// opcode: sltiu ; op1:x1; dest:x28; op1val:4096;  immval:4
TEST_IMM_OP( sltiu, x28, x1, 0x0, 4096, 4, x5, 144, x13)

inst_19:
// rs1==x21, rd==x2, rs1_val == 8192, 
// opcode: sltiu ; op1:x21; dest:x2; op1val:8192;  immval:4087
TEST_IMM_OP( sltiu, x2, x21, 0x0, 8192, 4087, x5, 152, x13)

inst_20:
// rs1==x6, rd==x27, rs1_val == 16384, imm_val == 4031
// opcode: sltiu ; op1:x6; dest:x27; op1val:16384;  immval:4031
TEST_IMM_OP( sltiu, x27, x6, 0x0, 16384, 4031, x5, 160, x7)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_21:
// rs1==x8, rd==x23, rs1_val == 32768, imm_val == 3583
// opcode: sltiu ; op1:x8; dest:x23; op1val:32768;  immval:3583
TEST_IMM_OP( sltiu, x23, x8, 0x0, 32768, 3583, x3, 0, x7)

inst_22:
// rs1==x27, rd==x25, rs1_val == 65536, imm_val == 16
// opcode: sltiu ; op1:x27; dest:x25; op1val:65536;  immval:16
TEST_IMM_OP( sltiu, x25, x27, 0x0, 65536, 16, x3, 8, x7)

inst_23:
// rs1==x4, rd==x21, rs1_val == 131072, imm_val == 512
// opcode: sltiu ; op1:x4; dest:x21; op1val:131072;  immval:512
TEST_IMM_OP( sltiu, x21, x4, 0x0, 131072, 512, x3, 16, x7)

inst_24:
// rs1==x9, rd==x30, rs1_val == 262144, imm_val == 128
// opcode: sltiu ; op1:x9; dest:x30; op1val:262144;  immval:128
TEST_IMM_OP( sltiu, x30, x9, 0x0, 262144, 128, x3, 24, x7)

inst_25:
// rs1==x13, rd==x5, rs1_val == 524288, 
// opcode: sltiu ; op1:x13; dest:x5; op1val:524288;  immval:4087
TEST_IMM_OP( sltiu, x5, x13, 0x0, 524288, 4087, x3, 32, x7)

inst_26:
// rs1==x0, rd==x13, rs1_val == 1048576, 
// opcode: sltiu ; op1:x0; dest:x13; op1val:1048576;  immval:1024
TEST_IMM_OP( sltiu, x13, x0, 0x0, 1048576, 1024, x3, 40, x7)

inst_27:
// rs1==x2, rd==x16, rs1_val == 2097152, 
// opcode: sltiu ; op1:x2; dest:x16; op1val:2097152;  immval:6
TEST_IMM_OP( sltiu, x16, x2, 0x0, 2097152, 6, x3, 48, x7)

inst_28:
// rs1==x5, rd==x17, rs1_val == 4194304, 
// opcode: sltiu ; op1:x5; dest:x17; op1val:4194304;  immval:8
TEST_IMM_OP( sltiu, x17, x5, 0x0, 4194304, 8, x3, 56, x7)

inst_29:
// rs1==x24, rd==x15, rs1_val == 8388608, 
// opcode: sltiu ; op1:x24; dest:x15; op1val:8388608;  immval:14
TEST_IMM_OP( sltiu, x15, x24, 0x0, 8388608, 14, x3, 64, x7)

inst_30:
// rs1==x15, rd==x26, rs1_val == 16777216, 
// opcode: sltiu ; op1:x15; dest:x26; op1val:16777216;  immval:15
TEST_IMM_OP( sltiu, x26, x15, 0x0, 16777216, 15, x3, 72, x7)

inst_31:
// rs1==x18, rd==x1, rs1_val == 33554432, 
// opcode: sltiu ; op1:x18; dest:x1; op1val:33554432;  immval:512
TEST_IMM_OP( sltiu, x1, x18, 0x0, 33554432, 512, x3, 80, x7)

inst_32:
// rs1_val == 67108864, imm_val == 2
// opcode: sltiu ; op1:x10; dest:x11; op1val:67108864;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 67108864, 2, x3, 88, x7)

inst_33:
// rs1_val == 134217728, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:134217728;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 134217728, 4087, x3, 96, x7)

inst_34:
// rs1_val == 268435456, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:268435456;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 268435456, 64, x3, 104, x7)

inst_35:
// rs1_val == 536870912, imm_val == 1365
// opcode: sltiu ; op1:x10; dest:x11; op1val:536870912;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 536870912, 1365, x3, 112, x7)

inst_36:
// rs1_val == 1073741824, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1073741824;  immval:512
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1073741824, 512, x3, 120, x7)

inst_37:
// rs1_val == 2147483648, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2147483648;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2147483648, 19, x3, 128, x7)

inst_38:
// rs1_val == 4294967296, imm_val == 4091
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 4091, x3, 136, x7)

inst_39:
// rs1_val == 8589934592, imm_val == 3967
// opcode: sltiu ; op1:x10; dest:x11; op1val:8589934592;  immval:3967
TEST_IMM_OP( sltiu, x11, x10, 0x0, 8589934592, 3967, x3, 144, x7)

inst_40:
// rs1_val == 17179869184, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:17179869184;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 17179869184, 12, x3, 152, x7)

inst_41:
// rs1_val == 34359738368, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:34359738368;  immval:4031
TEST_IMM_OP( sltiu, x11, x10, 0x0, 34359738368, 4031, x3, 160, x7)

inst_42:
// rs1_val == 137438953472, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:137438953472;  immval:7
TEST_IMM_OP( sltiu, x11, x10, 0x0, 137438953472, 7, x3, 168, x7)

inst_43:
// rs1_val == 274877906944, imm_val == 2730
// opcode: sltiu ; op1:x10; dest:x11; op1val:274877906944;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 274877906944, 2730, x3, 176, x7)

inst_44:
// rs1_val == 549755813888, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:549755813888;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 549755813888, 4091, x3, 184, x7)

inst_45:
// rs1_val == 1099511627776, imm_val == 4063
// opcode: sltiu ; op1:x10; dest:x11; op1val:1099511627776;  immval:4063
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1099511627776, 4063, x3, 192, x7)

inst_46:
// rs1_val == 2199023255552, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2199023255552;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2199023255552, 16, x3, 200, x7)

inst_47:
// rs1_val == 4398046511104, imm_val == 4079
// opcode: sltiu ; op1:x10; dest:x11; op1val:4398046511104;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4398046511104, 4079, x3, 208, x7)

inst_48:
// rs1_val == 8796093022208, imm_val == 2047
// opcode: sltiu ; op1:x10; dest:x11; op1val:8796093022208;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 8796093022208, 2047, x3, 216, x7)

inst_49:
// rs1_val == 17592186044416, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:17592186044416;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 17592186044416, 16, x3, 224, x7)

inst_50:
// rs1_val == 35184372088832, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:35184372088832;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 35184372088832, 4087, x3, 232, x7)

inst_51:
// rs1_val == 70368744177664, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:70368744177664;  immval:14
TEST_IMM_OP( sltiu, x11, x10, 0x0, 70368744177664, 14, x3, 240, x7)

inst_52:
// rs1_val == 140737488355328, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:140737488355328;  immval:4031
TEST_IMM_OP( sltiu, x11, x10, 0x0, 140737488355328, 4031, x3, 248, x7)

inst_53:
// rs1_val == 281474976710656, imm_val == 32
// opcode: sltiu ; op1:x10; dest:x11; op1val:281474976710656;  immval:32
TEST_IMM_OP( sltiu, x11, x10, 0x0, 281474976710656, 32, x3, 256, x7)

inst_54:
// rs1_val == 562949953421312, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:562949953421312;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 562949953421312, 12, x3, 264, x7)

inst_55:
// rs1_val == 1125899906842624, imm_val == 3071
// opcode: sltiu ; op1:x10; dest:x11; op1val:1125899906842624;  immval:3071
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1125899906842624, 3071, x3, 272, x7)

inst_56:
// rs1_val == 2251799813685248, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2251799813685248;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2251799813685248, 4091, x3, 280, x7)

inst_57:
// rs1_val == 4503599627370496, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4503599627370496;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4503599627370496, 6, x3, 288, x7)

inst_58:
// rs1_val == 9007199254740992, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:9007199254740992;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 9007199254740992, 12, x3, 296, x7)

inst_59:
// rs1_val == 18014398509481984, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18014398509481984;  immval:4094
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18014398509481984, 4094, x3, 304, x7)

inst_60:
// rs1_val == 36028797018963968, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:36028797018963968;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 36028797018963968, 8, x3, 312, x7)

inst_61:
// rs1_val == 72057594037927936, imm_val == 256
// opcode: sltiu ; op1:x10; dest:x11; op1val:72057594037927936;  immval:256
TEST_IMM_OP( sltiu, x11, x10, 0x0, 72057594037927936, 256, x3, 320, x7)

inst_62:
// rs1_val == 144115188075855872, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:144115188075855872;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 144115188075855872, 2730, x3, 328, x7)

inst_63:
// rs1_val == 288230376151711744, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:288230376151711744;  immval:3071
TEST_IMM_OP( sltiu, x11, x10, 0x0, 288230376151711744, 3071, x3, 336, x7)

inst_64:
// rs1_val == 576460752303423488, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:576460752303423488;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 576460752303423488, 1, x3, 344, x7)

inst_65:
// rs1_val == 1152921504606846976, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1152921504606846976, 5, x3, 352, x7)

inst_66:
// rs1_val == 2305843009213693952, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2305843009213693952, 64, x3, 360, x7)

inst_67:
// rs1_val == 4611686018427387904, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4611686018427387904, 19, x3, 368, x7)

inst_68:
// rs1_val == 9223372036854775808, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:9223372036854775808;  immval:128
TEST_IMM_OP( sltiu, x11, x10, 0x0, 9223372036854775808, 128, x3, 376, x7)

inst_69:
// rs1_val == 18446744073709551614, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551614;  immval:15
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551614, 15, x3, 384, x7)

inst_70:
// rs1_val == 18446744073709551613, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551613;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551613, 12, x3, 392, x7)

inst_71:
// rs1_val == 18302628885633695743, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18302628885633695743;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18302628885633695743, 3, x3, 400, x7)

inst_72:
// rs1_val == 18158513697557839871, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18158513697557839871;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18158513697557839871, 19, x3, 408, x7)

inst_73:
// rs1_val == 17870283321406128127, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:17870283321406128127;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 17870283321406128127, 2, x3, 416, x7)

inst_74:
// rs1_val == 17293822569102704639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:17293822569102704639;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 17293822569102704639, 3, x3, 424, x7)

inst_75:
// rs1_val == 16140901064495857663, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:16140901064495857663;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 16140901064495857663, 8, x3, 432, x7)

inst_76:
// rs1_val == 13835058055282163711, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:13835058055282163711;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 13835058055282163711, 8, x3, 440, x7)

inst_77:
// rs1_val == 9223372036854775807, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:9223372036854775807;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 9223372036854775807, 5, x3, 448, x7)

inst_78:
// rs1_val == 6148914691236517205, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:32
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 32, x3, 456, x7)

inst_79:
// rs1_val == 12297829382473034410, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:13
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 13, x3, 464, x7)

inst_80:
// imm_val == 4093, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:67108864;  immval:4093
TEST_IMM_OP( sltiu, x11, x10, 0x0, 67108864, 4093, x3, 472, x7)

inst_81:
// imm_val == 3839, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:16;  immval:3839
TEST_IMM_OP( sltiu, x11, x10, 0x1, 16, 3839, x3, 480, x7)

inst_82:
// rs1_val == 18446744073709551611, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551611;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551611, 5, x3, 488, x7)

inst_83:
// rs1_val == 18446744073709551607, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551607;  immval:3967
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551607, 3967, x3, 496, x7)

inst_84:
// rs1_val == 18446744073709551599, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551599;  immval:11
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551599, 11, x3, 504, x7)

inst_85:
// rs1_val == 18446744073709551583, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551583;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551583, 1, x3, 512, x7)

inst_86:
// rs1_val == 18446744073709551551, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551551;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551551, 8, x3, 520, x7)

inst_87:
// rs1_val == 18446744073709551487, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551487;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551487, 4091, x3, 528, x7)

inst_88:
// rs1_val == 18446744073709551359, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551359;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551359, 5, x3, 536, x7)

inst_89:
// rs1_val == 18446744073709551103, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551103;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551103, 19, x3, 544, x7)

inst_90:
// rs1_val == 18446744073709550591, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709550591;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709550591, 17, x3, 552, x7)

inst_91:
// rs1_val == 18446744073709549567, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709549567;  immval:4063
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709549567, 4063, x3, 560, x7)

inst_92:
// rs1_val == 18446744073709547519, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709547519;  immval:256
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709547519, 256, x3, 568, x7)

inst_93:
// rs1_val == 18446744073709543423, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709543423;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709543423, 4079, x3, 576, x7)

inst_94:
// rs1_val == 18446744073709535231, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709535231;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709535231, 0, x3, 584, x7)

inst_95:
// rs1_val == 18446744073709518847, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709518847;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709518847, 4, x3, 592, x7)

inst_96:
// rs1_val == 18446744073709486079, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709486079;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709486079, 17, x3, 600, x7)

inst_97:
// rs1_val == 18446744073709420543, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709420543;  immval:3583
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709420543, 3583, x3, 608, x7)

inst_98:
// rs1_val == 18446744073709289471, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709289471;  immval:15
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709289471, 15, x3, 616, x7)

inst_99:
// rs1_val == 18446744073709027327, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709027327;  immval:11
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709027327, 11, x3, 624, x7)

inst_100:
// rs1_val == 18446744073708503039, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073708503039;  immval:7
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073708503039, 7, x3, 632, x7)

inst_101:
// rs1_val == 18446744073707454463, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073707454463;  immval:15
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073707454463, 15, x3, 640, x7)

inst_102:
// rs1_val == 18446744073705357311, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073705357311;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073705357311, 19, x3, 648, x7)

inst_103:
// rs1_val == 18446744073701163007, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073701163007;  immval:1024
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073701163007, 1024, x3, 656, x7)

inst_104:
// rs1_val == 18446744073692774399, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073692774399;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073692774399, 9, x3, 664, x7)

inst_105:
// rs1_val == 18446744073675997183, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073675997183;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073675997183, 4091, x3, 672, x7)

inst_106:
// rs1_val == 18446744073642442751, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073642442751;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073642442751, 4087, x3, 680, x7)

inst_107:
// rs1_val == 18446744073575333887, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073575333887;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073575333887, 4087, x3, 688, x7)

inst_108:
// rs1_val == 18446744073441116159, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073441116159;  immval:32
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073441116159, 32, x3, 696, x7)

inst_109:
// rs1_val == 18446744073172680703, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073172680703;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073172680703, 12, x3, 704, x7)

inst_110:
// rs1_val == 18446744072635809791, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744072635809791;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744072635809791, 3, x3, 712, x7)

inst_111:
// rs1_val == 18446744071562067967, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744071562067967;  immval:1024
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744071562067967, 1024, x3, 720, x7)

inst_112:
// rs1_val == 18446744069414584319, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744069414584319;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744069414584319, 0, x3, 728, x7)

inst_113:
// rs1_val == 18446744065119617023, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744065119617023;  immval:7
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744065119617023, 7, x3, 736, x7)

inst_114:
// rs1_val == 18446744056529682431, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744056529682431;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744056529682431, 17, x3, 744, x7)

inst_115:
// rs1_val == 18446744039349813247, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744039349813247;  immval:3583
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744039349813247, 3583, x3, 752, x7)

inst_116:
// rs1_val == 18446744004990074879, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744004990074879;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744004990074879, 1365, x3, 760, x7)

inst_117:
// rs1_val == 18446743936270598143, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446743936270598143;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446743936270598143, 4079, x3, 768, x7)

inst_118:
// rs1_val == 18446743798831644671, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446743798831644671;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446743798831644671, 4079, x3, 776, x7)

inst_119:
// rs1_val == 18446743523953737727, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446743523953737727;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446743523953737727, 1, x3, 784, x7)

inst_120:
// rs1_val == 18446742974197923839, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446742974197923839;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446742974197923839, 4, x3, 792, x7)

inst_121:
// rs1_val == 18446741874686296063, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446741874686296063;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446741874686296063, 9, x3, 800, x7)

inst_122:
// rs1_val == 18446739675663040511, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446739675663040511;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446739675663040511, 5, x3, 808, x7)

inst_123:
// rs1_val == 18446726481523507199, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446726481523507199;  immval:32
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446726481523507199, 32, x3, 816, x7)

inst_124:
// rs1_val == 18446708889337462783, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446708889337462783;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446708889337462783, 16, x3, 824, x7)

inst_125:
// rs1_val == 18446673704965373951, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446673704965373951;  immval:4094
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446673704965373951, 4094, x3, 832, x7)

inst_126:
// rs1_val == 18446462598732840959, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446462598732840959;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446462598732840959, 16, x3, 840, x7)

inst_127:
// rs1_val == 18446181123756130303, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446181123756130303;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446181123756130303, 4, x3, 848, x7)

inst_128:
// rs1_val == 18445618173802708991, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18445618173802708991;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18445618173802708991, 4079, x3, 856, x7)

inst_129:
// rs1_val == 18442240474082181119, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18442240474082181119;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18442240474082181119, 0, x3, 864, x7)

inst_130:
// rs1_val == 18437736874454810623, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18437736874454810623;  immval:10
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18437736874454810623, 10, x3, 872, x7)

inst_131:
// rs1_val == 18428729675200069631, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18428729675200069631;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18428729675200069631, 9, x3, 880, x7)

inst_132:
// rs1_val == 18410715276690587647, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18410715276690587647;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18410715276690587647, 19, x3, 888, x7)

inst_133:
// rs1_val == 18374686479671623679, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18374686479671623679;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18374686479671623679, 9, x3, 896, x7)

inst_134:
// rs1_val == 8, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:8;  immval:14
TEST_IMM_OP( sltiu, x11, x10, 0x1, 8, 14, x3, 904, x7)

inst_135:
// rs1_val == 1048576, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1048576;  immval:1024
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1048576, 1024, x3, 912, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 115*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
