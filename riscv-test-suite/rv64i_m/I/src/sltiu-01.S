
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sltiu instruction of the RISC-V I extension for the sltiu covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltiu)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs1 == rd, rs1==x16, rd==x16, imm_val == 0, rs1_val == (2**(xlen)-1)
// opcode: sltiu ; op1:x16; dest:x16; op1val:18446744073709551615;  immval:0
TEST_IMM_OP( sltiu, x16, x16, 0x0, 18446744073709551615, 0, x10, 0, x11)

inst_1:
// rs1 != rd, rs1==x31, rd==x4, imm_val == (2**(12)-1), rs1_val == 18446744073172680703, rs1_val != imm_val and rs1_val > 0 and imm_val > 0
// opcode: sltiu ; op1:x31; dest:x4; op1val:18446744073172680703;  immval:4095
TEST_IMM_OP( sltiu, x4, x31, 0x0, 18446744073172680703, 4095, x10, 8, x11)

inst_2:
// rs1==x24, rd==x6, imm_val == 1, rs1_val == 288230376151711744
// opcode: sltiu ; op1:x24; dest:x6; op1val:288230376151711744;  immval:1
TEST_IMM_OP( sltiu, x6, x24, 0x0, 288230376151711744, 1, x10, 16, x11)

inst_3:
// rs1==x7, rd==x24, rs1_val == 0, imm_val == 4091
// opcode: sltiu ; op1:x7; dest:x24; op1val:0;  immval:4091
TEST_IMM_OP( sltiu, x24, x7, 0x1, 0, 4091, x10, 24, x11)

inst_4:
// rs1==x18, rd==x19, rs1_val == 1, rs1_val==1 and imm_val==1, rs1_val == imm_val and rs1_val > 0 and imm_val > 0
// opcode: sltiu ; op1:x18; dest:x19; op1val:1;  immval:1
TEST_IMM_OP( sltiu, x19, x18, 0x0, 1, 1, x10, 32, x11)

inst_5:
// rs1==x4, rd==x1, imm_val == 2, rs1_val == 17870283321406128127
// opcode: sltiu ; op1:x4; dest:x1; op1val:17870283321406128127;  immval:2
TEST_IMM_OP( sltiu, x1, x4, 0x0, 17870283321406128127, 2, x10, 40, x11)

inst_6:
// rs1==x14, rd==x27, imm_val == 4, rs1_val == 18446742974197923839
// opcode: sltiu ; op1:x14; dest:x27; op1val:18446742974197923839;  immval:4
TEST_IMM_OP( sltiu, x27, x14, 0x0, 18446742974197923839, 4, x10, 48, x11)

inst_7:
// rs1==x8, rd==x12, imm_val == 8, 
// opcode: sltiu ; op1:x8; dest:x12; op1val:3689348814741910324;  immval:8
TEST_IMM_OP( sltiu, x12, x8, 0x0, 3689348814741910324, 8, x10, 56, x11)

inst_8:
// rs1==x13, rd==x30, imm_val == 16, rs1_val == 18446744073642442751
// opcode: sltiu ; op1:x13; dest:x30; op1val:18446744073642442751;  immval:16
TEST_IMM_OP( sltiu, x30, x13, 0x0, 18446744073642442751, 16, x10, 64, x11)

inst_9:
// rs1==x21, rd==x14, imm_val == 32, 
// opcode: sltiu ; op1:x21; dest:x14; op1val:0;  immval:32
TEST_IMM_OP( sltiu, x14, x21, 0x1, 0, 32, x10, 72, x11)

inst_10:
// rs1==x12, rd==x31, imm_val == 64, rs1_val == 34359738368
// opcode: sltiu ; op1:x12; dest:x31; op1val:34359738368;  immval:64
TEST_IMM_OP( sltiu, x31, x12, 0x0, 34359738368, 64, x10, 80, x11)

inst_11:
// rs1==x1, rd==x2, imm_val == 128, 
// opcode: sltiu ; op1:x1; dest:x2; op1val:5;  immval:128
TEST_IMM_OP( sltiu, x2, x1, 0x1, 5, 128, x10, 88, x11)

inst_12:
// rs1==x2, rd==x23, imm_val == 256, 
// opcode: sltiu ; op1:x2; dest:x23; op1val:6;  immval:256
TEST_IMM_OP( sltiu, x23, x2, 0x1, 6, 256, x10, 96, x11)

inst_13:
// rs1==x28, rd==x5, imm_val == 512, rs1_val == 18446744073692774399
// opcode: sltiu ; op1:x28; dest:x5; op1val:18446744073692774399;  immval:512
TEST_IMM_OP( sltiu, x5, x28, 0x0, 18446744073692774399, 512, x10, 104, x11)

inst_14:
// rs1==x17, rd==x15, imm_val == 1024, rs1_val == 72057594037927936
// opcode: sltiu ; op1:x17; dest:x15; op1val:72057594037927936;  immval:1024
TEST_IMM_OP( sltiu, x15, x17, 0x0, 72057594037927936, 1024, x10, 112, x11)

inst_15:
// rs1==x26, rd==x25, imm_val == 2048, rs1_val == 2048
// opcode: sltiu ; op1:x26; dest:x25; op1val:2048;  immval:2048
TEST_IMM_OP( sltiu, x25, x26, 0x0, 2048, 2048, x10, 120, x11)

inst_16:
// rs1==x5, rd==x17, imm_val == 4094, 
// opcode: sltiu ; op1:x5; dest:x17; op1val:3037000499;  immval:4094
TEST_IMM_OP( sltiu, x17, x5, 0x0, 3037000499, 4094, x10, 128, x11)

inst_17:
// rs1==x6, rd==x9, imm_val == 4093, rs1_val == 18446744056529682431
// opcode: sltiu ; op1:x6; dest:x9; op1val:18446744056529682431;  immval:4093
TEST_IMM_OP( sltiu, x9, x6, 0x0, 18446744056529682431, 4093, x10, 136, x11)

inst_18:
// rs1==x23, rd==x13, imm_val == 4087, rs1_val == 18446744073709551583
// opcode: sltiu ; op1:x23; dest:x13; op1val:18446744073709551583;  immval:4087
TEST_IMM_OP( sltiu, x13, x23, 0x0, 18446744073709551583, 4087, x10, 144, x11)

inst_19:
// rs1==x27, rd==x0, imm_val == 4079, 
// opcode: sltiu ; op1:x27; dest:x0; op1val:18;  immval:4079
TEST_IMM_OP( sltiu, x0, x27, 0x1, 18, 4079, x10, 152, x11)

inst_20:
// rs1==x3, rd==x26, imm_val == 4063, rs1_val == 18446744073709551551
// opcode: sltiu ; op1:x3; dest:x26; op1val:18446744073709551551;  immval:4063
TEST_IMM_OP( sltiu, x26, x3, 0x0, 18446744073709551551, 4063, x10, 160, x11)

inst_21:
// rs1==x15, rd==x7, imm_val == 4031, 
// opcode: sltiu ; op1:x15; dest:x7; op1val:5;  immval:4031
TEST_IMM_OP( sltiu, x7, x15, 0x1, 5, 4031, x10, 168, x11)

inst_22:
// rs1==x22, rd==x18, imm_val == 3967, rs1_val == 18446744073709551359
// opcode: sltiu ; op1:x22; dest:x18; op1val:18446744073709551359;  immval:3967
TEST_IMM_OP( sltiu, x18, x22, 0x0, 18446744073709551359, 3967, x10, 176, x11)

inst_23:
// rs1==x19, rd==x3, imm_val == 3839, 
// opcode: sltiu ; op1:x19; dest:x3; op1val:0;  immval:3839
TEST_IMM_OP( sltiu, x3, x19, 0x1, 0, 3839, x10, 184, x2)

inst_24:
// rs1==x11, rd==x21, imm_val == 3583, rs1_val == 4294967296
// opcode: sltiu ; op1:x11; dest:x21; op1val:4294967296;  immval:3583
TEST_IMM_OP( sltiu, x21, x11, 0x0, 4294967296, 3583, x10, 192, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_25:
// rs1==x20, rd==x28, imm_val == 3071, rs1_val == 18446744073709289471
// opcode: sltiu ; op1:x20; dest:x28; op1val:18446744073709289471;  immval:3071
TEST_IMM_OP( sltiu, x28, x20, 0x0, 18446744073709289471, 3071, x1, 0, x2)

inst_26:
// rs1==x0, rd==x10, imm_val == 2047, 
// opcode: sltiu ; op1:x0; dest:x10; op1val:12297829382473034409;  immval:2047
TEST_IMM_OP( sltiu, x10, x0, 0x0, 12297829382473034409, 2047, x1, 8, x2)

inst_27:
// rs1==x25, rd==x29, imm_val == 1365, rs1_val == 18446744073708503039
// opcode: sltiu ; op1:x25; dest:x29; op1val:18446744073708503039;  immval:1365
TEST_IMM_OP( sltiu, x29, x25, 0x0, 18446744073708503039, 1365, x1, 16, x2)

inst_28:
// rs1==x9, rd==x20, imm_val == 2730, rs1_val == 2097152
// opcode: sltiu ; op1:x9; dest:x20; op1val:2097152;  immval:2730
TEST_IMM_OP( sltiu, x20, x9, 0x0, 2097152, 2730, x1, 24, x2)

inst_29:
// rs1==x30, rd==x8, rs1_val == 2, rs1_val==2 and imm_val==1637
// opcode: sltiu ; op1:x30; dest:x8; op1val:2;  immval:1637
TEST_IMM_OP( sltiu, x8, x30, 0x1, 2, 1637, x1, 32, x2)

inst_30:
// rs1==x29, rd==x22, rs1_val == 4, 
// opcode: sltiu ; op1:x29; dest:x22; op1val:4;  immval:17
TEST_IMM_OP( sltiu, x22, x29, 0x1, 4, 17, x1, 40, x2)

inst_31:
// rs1==x10, rd==x11, rs1_val == 8, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:8;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 8, 46, x1, 48, x2)

inst_32:
// rs1_val == 16, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:16;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 16, 45, x1, 56, x2)

inst_33:
// rs1_val == 32, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:32;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 32, 1365, x1, 64, x2)

inst_34:
// rs1_val == 64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:64;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 64, 64, x1, 72, x2)

inst_35:
// rs1_val == 128, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:128;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 128, 0, x1, 80, x2)

inst_36:
// rs1_val == 256, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:256;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 256, 46, x1, 88, x2)

inst_37:
// rs1_val == 512, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:512;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 512, 6, x1, 96, x2)

inst_38:
// rs1_val == 1024, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1024;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1024, 2729, x1, 104, x2)

inst_39:
// rs1_val == 4096, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4096;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4096, 64, x1, 112, x2)

inst_40:
// rs1_val == 8192, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:8192;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 8192, 819, x1, 120, x2)

inst_41:
// rs1_val == 16384, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:16384;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 16384, 19, x1, 128, x2)

inst_42:
// rs1_val == 32768, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:32768;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 32768, 1638, x1, 136, x2)

inst_43:
// rs1_val == 65536, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:65536;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 65536, 2, x1, 144, x2)

inst_44:
// rs1_val == 131072, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:131072;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 131072, 1637, x1, 152, x2)

inst_45:
// rs1_val == 262144, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:262144;  immval:11
TEST_IMM_OP( sltiu, x11, x10, 0x0, 262144, 11, x1, 160, x2)

inst_46:
// rs1_val == 524288, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:524288;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 524288, 1365, x1, 168, x2)

inst_47:
// rs1_val == 1048576, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1048576;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1048576, 2047, x1, 176, x2)

inst_48:
// rs1_val == 4194304, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4194304;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4194304, 4091, x1, 184, x2)

inst_49:
// rs1_val == 8388608, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:8388608;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 8388608, 4, x1, 192, x2)

inst_50:
// rs1_val == 16777216, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:16777216;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 16777216, 6, x1, 200, x2)

inst_51:
// rs1_val == 33554432, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:33554432;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 33554432, 9, x1, 208, x2)

inst_52:
// rs1_val == 67108864, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:67108864;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 67108864, 17, x1, 216, x2)

inst_53:
// rs1_val == 134217728, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:134217728;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 134217728, 1366, x1, 224, x2)

inst_54:
// rs1_val == 268435456, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:268435456;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 268435456, 819, x1, 232, x2)

inst_55:
// rs1_val == 536870912, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:536870912;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 536870912, 12, x1, 240, x2)

inst_56:
// rs1_val == 1073741824, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1073741824;  immval:13
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1073741824, 13, x1, 248, x2)

inst_57:
// rs1_val == 2147483648, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2147483648;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2147483648, 2730, x1, 256, x2)

inst_58:
// rs1_val == 8589934592, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:8589934592;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 8589934592, 2730, x1, 264, x2)

inst_59:
// rs1_val == 17179869184, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:17179869184;  immval:4093
TEST_IMM_OP( sltiu, x11, x10, 0x0, 17179869184, 4093, x1, 272, x2)

inst_60:
// rs1_val == 68719476736, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:68719476736;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 68719476736, 46, x1, 280, x2)

inst_61:
// rs1_val == 137438953472, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:137438953472;  immval:18
TEST_IMM_OP( sltiu, x11, x10, 0x0, 137438953472, 18, x1, 288, x2)

inst_62:
// rs1_val == 274877906944, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:274877906944;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 274877906944, 16, x1, 296, x2)

inst_63:
// rs1_val == 549755813888, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:549755813888;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 549755813888, 1366, x1, 304, x2)

inst_64:
// rs1_val == 1099511627776, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1099511627776;  immval:11
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1099511627776, 11, x1, 312, x2)

inst_65:
// rs1_val == 2199023255552, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2199023255552;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2199023255552, 5, x1, 320, x2)

inst_66:
// rs1_val == 4398046511104, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4398046511104;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4398046511104, 0, x1, 328, x2)

inst_67:
// rs1_val == 8796093022208, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:8796093022208;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 8796093022208, 0, x1, 336, x2)

inst_68:
// rs1_val == 17592186044416, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:17592186044416;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 17592186044416, 4091, x1, 344, x2)

inst_69:
// rs1_val == 35184372088832, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:35184372088832;  immval:2048
TEST_IMM_OP( sltiu, x11, x10, 0x0, 35184372088832, 2048, x1, 352, x2)

inst_70:
// rs1_val == 70368744177664, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:70368744177664;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 70368744177664, 45, x1, 360, x2)

inst_71:
// rs1_val == 140737488355328, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:140737488355328;  immval:14
TEST_IMM_OP( sltiu, x11, x10, 0x0, 140737488355328, 14, x1, 368, x2)

inst_72:
// rs1_val == 281474976710656, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:281474976710656;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 281474976710656, 5, x1, 376, x2)

inst_73:
// rs1_val == 562949953421312, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:562949953421312;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 562949953421312, 44, x1, 384, x2)

inst_74:
// rs1_val == 1125899906842624, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1125899906842624;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1125899906842624, 2047, x1, 392, x2)

inst_75:
// rs1_val == 2251799813685248, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2251799813685248;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2251799813685248, 4091, x1, 400, x2)

inst_76:
// rs1_val == 4503599627370496, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4503599627370496;  immval:14
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4503599627370496, 14, x1, 408, x2)

inst_77:
// rs1_val == 9007199254740992, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:9007199254740992;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 9007199254740992, 1637, x1, 416, x2)

inst_78:
// rs1_val == 18014398509481984, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18014398509481984;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18014398509481984, 64, x1, 424, x2)

inst_79:
// rs1_val == 36028797018963968, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:36028797018963968;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 36028797018963968, 1, x1, 432, x2)

inst_80:
// rs1_val == 144115188075855872, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:144115188075855872;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 144115188075855872, 2730, x1, 440, x2)

inst_81:
// rs1_val == 576460752303423488, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:576460752303423488;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 576460752303423488, 45, x1, 448, x2)

inst_82:
// rs1_val == 1152921504606846976, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:18
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1152921504606846976, 18, x1, 456, x2)

inst_83:
// rs1_val == 2305843009213693952, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:512
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2305843009213693952, 512, x1, 464, x2)

inst_84:
// rs1_val == 4611686018427387904, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:10
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4611686018427387904, 10, x1, 472, x2)

inst_85:
// rs1_val == 9223372036854775808, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:9223372036854775808;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 9223372036854775808, 4087, x1, 480, x2)

inst_86:
// rs1_val == 18446744073709551614, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551614;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551614, 4, x1, 488, x2)

inst_87:
// rs1_val == 18446744073709551613, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551613;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551613, 8, x1, 496, x2)

inst_88:
// rs1_val == 18446744073709551611, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551611;  immval:13
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551611, 13, x1, 504, x2)

inst_89:
// rs1_val == 18446744073709551607, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551607;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551607, 46, x1, 512, x2)

inst_90:
// rs1_val == 18446744073709551599, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551599;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551599, 9, x1, 520, x2)

inst_91:
// rs1_val == 18446744073709551487, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551487;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551487, 1637, x1, 528, x2)

inst_92:
// rs1_val == 18446744073709551103, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709551103;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709551103, 46, x1, 536, x2)

inst_93:
// rs1_val == 18446744073709550591, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709550591;  immval:2048
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709550591, 2048, x1, 544, x2)

inst_94:
// rs1_val == 18446744073709549567, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709549567;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709549567, 63, x1, 552, x2)

inst_95:
// rs1_val == 18446744073709547519, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709547519;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709547519, 17, x1, 560, x2)

inst_96:
// rs1_val == 18446744073709543423, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709543423;  immval:10
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709543423, 10, x1, 568, x2)

inst_97:
// rs1_val == 18446744073709535231, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709535231;  immval:256
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709535231, 256, x1, 576, x2)

inst_98:
// rs1_val == 18446744073709518847, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709518847;  immval:14
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709518847, 14, x1, 584, x2)

inst_99:
// rs1_val == 18446744073709486079, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709486079;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709486079, 64, x1, 592, x2)

inst_100:
// rs1_val == 18446744073709420543, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709420543;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709420543, 3, x1, 600, x2)

inst_101:
// rs1_val == 18446744073709027327, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073709027327;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073709027327, 2047, x1, 608, x2)

inst_102:
// rs1_val == 18446744073707454463, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073707454463;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073707454463, 2, x1, 616, x2)

inst_103:
// rs1_val == 18446744073705357311, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073705357311;  immval:4093
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073705357311, 4093, x1, 624, x2)

inst_104:
// rs1_val == 18446744073701163007, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073701163007;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073701163007, 1, x1, 632, x2)

inst_105:
// rs1_val == 18446744073675997183, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073675997183;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073675997183, 9, x1, 640, x2)

inst_106:
// rs1_val == 18446744073575333887, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073575333887;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073575333887, 6, x1, 648, x2)

inst_107:
// rs1_val == 18446744073441116159, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744073441116159;  immval:256
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744073441116159, 256, x1, 656, x2)

inst_108:
// rs1_val == 18446744072635809791, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744072635809791;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744072635809791, 1637, x1, 664, x2)

inst_109:
// rs1_val == 18446744071562067967, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744071562067967;  immval:18
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744071562067967, 18, x1, 672, x2)

inst_110:
// rs1_val == 18446744069414584319, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744069414584319;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744069414584319, 6, x1, 680, x2)

inst_111:
// rs1_val == 18446744065119617023, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744065119617023;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744065119617023, 1637, x1, 688, x2)

inst_112:
// rs1_val == 18446744039349813247, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744039349813247;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744039349813247, 64, x1, 696, x2)

inst_113:
// rs1_val == 18446744004990074879, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446744004990074879;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446744004990074879, 46, x1, 704, x2)

inst_114:
// rs1_val == 18446743936270598143, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446743936270598143;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446743936270598143, 46, x1, 712, x2)

inst_115:
// rs1_val == 18446743798831644671, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446743798831644671;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446743798831644671, 6, x1, 720, x2)

inst_116:
// rs1_val == 18446743523953737727, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446743523953737727;  immval:14
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446743523953737727, 14, x1, 728, x2)

inst_117:
// rs1_val == 18446741874686296063, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446741874686296063;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446741874686296063, 1365, x1, 736, x2)

inst_118:
// rs1_val == 18446739675663040511, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446739675663040511;  immval:7
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446739675663040511, 7, x1, 744, x2)

inst_119:
// rs1_val == 18446735277616529407, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446735277616529407;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446735277616529407, 62, x1, 752, x2)

inst_120:
// rs1_val == 18446726481523507199, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446726481523507199;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446726481523507199, 63, x1, 760, x2)

inst_121:
// rs1_val == 18446708889337462783, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446708889337462783;  immval:128
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446708889337462783, 128, x1, 768, x2)

inst_122:
// rs1_val == 18446673704965373951, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446673704965373951;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446673704965373951, 1, x1, 776, x2)

inst_123:
// rs1_val == 18446603336221196287, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446603336221196287;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446603336221196287, 1637, x1, 784, x2)

inst_124:
// rs1_val == 18446462598732840959, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446462598732840959;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446462598732840959, 6, x1, 792, x2)

inst_125:
// rs1_val == 18446181123756130303, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18446181123756130303;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18446181123756130303, 2047, x1, 800, x2)

inst_126:
// rs1_val == 18445618173802708991, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18445618173802708991;  immval:512
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18445618173802708991, 512, x1, 808, x2)

inst_127:
// rs1_val == 18444492273895866367, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18444492273895866367;  immval:1024
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18444492273895866367, 1024, x1, 816, x2)

inst_128:
// rs1_val == 18442240474082181119, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18442240474082181119;  immval:18
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18442240474082181119, 18, x1, 824, x2)

inst_129:
// rs1_val == 18437736874454810623, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18437736874454810623;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18437736874454810623, 4, x1, 832, x2)

inst_130:
// rs1_val == 18428729675200069631, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18428729675200069631;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18428729675200069631, 44, x1, 840, x2)

inst_131:
// rs1_val == 18410715276690587647, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18410715276690587647;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18410715276690587647, 3, x1, 848, x2)

inst_132:
// rs1_val == 18374686479671623679, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18374686479671623679;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18374686479671623679, 3, x1, 856, x2)

inst_133:
// rs1_val == 18302628885633695743, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18302628885633695743;  immval:512
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18302628885633695743, 512, x1, 864, x2)

inst_134:
// rs1_val == 18158513697557839871, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18158513697557839871;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 18158513697557839871, 5, x1, 872, x2)

inst_135:
// rs1_val == 17293822569102704639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:17293822569102704639;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 17293822569102704639, 1, x1, 880, x2)

inst_136:
// rs1_val == 16140901064495857663, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:16140901064495857663;  immval:4095
TEST_IMM_OP( sltiu, x11, x10, 0x0, 16140901064495857663, 4095, x1, 888, x2)

inst_137:
// rs1_val == 13835058055282163711, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:13835058055282163711;  immval:13
TEST_IMM_OP( sltiu, x11, x10, 0x0, 13835058055282163711, 13, x1, 896, x2)

inst_138:
// rs1_val == 9223372036854775807, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:9223372036854775807;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 9223372036854775807, 4087, x1, 904, x2)

inst_139:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205 and imm_val==5
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 5, x1, 912, x2)

inst_140:
// rs1_val == 12297829382473034410, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:13
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 13, x1, 920, x2)

inst_141:
// rs1_val==3 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3, 3, x1, 928, x2)

inst_142:
// rs1_val==3 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 1365, x1, 936, x2)

inst_143:
// rs1_val==3 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 2730, x1, 944, x2)

inst_144:
// rs1_val==3 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 5, x1, 952, x2)

inst_145:
// rs1_val==3 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 819, x1, 960, x2)

inst_146:
// rs1_val==3 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 1638, x1, 968, x2)

inst_147:
// rs1_val==3 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 45, x1, 976, x2)

inst_148:
// rs1_val==3 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3, 0, x1, 984, x2)

inst_149:
// rs1_val==3 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 63, x1, 992, x2)

inst_150:
// rs1_val==3 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3, 2, x1, 1000, x2)

inst_151:
// rs1_val==3 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 1364, x1, 1008, x2)

inst_152:
// rs1_val==3 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 2729, x1, 1016, x2)

inst_153:
// rs1_val==3 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 4, x1, 1024, x2)

inst_154:
// rs1_val==3 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 818, x1, 1032, x2)

inst_155:
// rs1_val==3 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 1637, x1, 1040, x2)

inst_156:
// rs1_val==3 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 44, x1, 1048, x2)

inst_157:
// rs1_val==3 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 62, x1, 1056, x2)

inst_158:
// rs1_val==3 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 1366, x1, 1064, x2)

inst_159:
// rs1_val==3 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 2731, x1, 1072, x2)

inst_160:
// rs1_val==3 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 6, x1, 1080, x2)

inst_161:
// rs1_val==3 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 820, x1, 1088, x2)

inst_162:
// rs1_val==3 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 1639, x1, 1096, x2)

inst_163:
// rs1_val==3 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 46, x1, 1104, x2)

inst_164:
// rs1_val==3 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3, 1, x1, 1112, x2)

inst_165:
// rs1_val==3 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x1, 3, 64, x1, 1120, x2)

inst_166:
// rs1_val==6148914691236517205 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 3, x1, 1128, x2)

inst_167:
// rs1_val==6148914691236517205 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 1365, x1, 1136, x2)

inst_168:
// rs1_val==6148914691236517205 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 2730, x1, 1144, x2)

inst_169:
// rs1_val==6148914691236517205 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 819, x1, 1152, x2)

inst_170:
// rs1_val==6148914691236517205 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 1638, x1, 1160, x2)

inst_171:
// rs1_val==6148914691236517205 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 45, x1, 1168, x2)

inst_172:
// rs1_val==6148914691236517205 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 0, x1, 1176, x2)

inst_173:
// rs1_val==6148914691236517205 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 63, x1, 1184, x2)

inst_174:
// rs1_val==6148914691236517205 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 2, x1, 1192, x2)

inst_175:
// rs1_val==6148914691236517205 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 1364, x1, 1200, x2)

inst_176:
// rs1_val==6148914691236517205 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 2729, x1, 1208, x2)

inst_177:
// rs1_val==6148914691236517205 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 4, x1, 1216, x2)

inst_178:
// rs1_val==6148914691236517205 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 818, x1, 1224, x2)

inst_179:
// rs1_val==6148914691236517205 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 1637, x1, 1232, x2)

inst_180:
// rs1_val==6148914691236517205 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 44, x1, 1240, x2)

inst_181:
// rs1_val==6148914691236517205 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 62, x1, 1248, x2)

inst_182:
// rs1_val==6148914691236517205 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 1366, x1, 1256, x2)

inst_183:
// rs1_val==6148914691236517205 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 2731, x1, 1264, x2)

inst_184:
// rs1_val==6148914691236517205 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 6, x1, 1272, x2)

inst_185:
// rs1_val==6148914691236517205 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 820, x1, 1280, x2)

inst_186:
// rs1_val==6148914691236517205 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 1639, x1, 1288, x2)

inst_187:
// rs1_val==6148914691236517205 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 46, x1, 1296, x2)

inst_188:
// rs1_val==6148914691236517205 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 1, x1, 1304, x2)

inst_189:
// rs1_val==6148914691236517205 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517205, 64, x1, 1312, x2)

inst_190:
// rs1_val==12297829382473034410 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 3, x1, 1320, x2)

inst_191:
// rs1_val==12297829382473034410 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 1365, x1, 1328, x2)

inst_192:
// rs1_val==12297829382473034410 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 2730, x1, 1336, x2)

inst_193:
// rs1_val==12297829382473034410 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 5, x1, 1344, x2)

inst_194:
// rs1_val==12297829382473034410 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 819, x1, 1352, x2)

inst_195:
// rs1_val==12297829382473034410 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 1638, x1, 1360, x2)

inst_196:
// rs1_val==12297829382473034410 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 45, x1, 1368, x2)

inst_197:
// rs1_val==12297829382473034410 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 0, x1, 1376, x2)

inst_198:
// rs1_val==12297829382473034410 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 63, x1, 1384, x2)

inst_199:
// rs1_val==12297829382473034410 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 2, x1, 1392, x2)

inst_200:
// rs1_val==12297829382473034410 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 1364, x1, 1400, x2)

inst_201:
// rs1_val==12297829382473034410 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 2729, x1, 1408, x2)

inst_202:
// rs1_val==12297829382473034410 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 4, x1, 1416, x2)

inst_203:
// rs1_val==12297829382473034410 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 818, x1, 1424, x2)

inst_204:
// rs1_val==12297829382473034410 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 1637, x1, 1432, x2)

inst_205:
// rs1_val==12297829382473034410 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 44, x1, 1440, x2)

inst_206:
// rs1_val==12297829382473034410 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 62, x1, 1448, x2)

inst_207:
// rs1_val==12297829382473034410 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 1366, x1, 1456, x2)

inst_208:
// rs1_val==12297829382473034410 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 2731, x1, 1464, x2)

inst_209:
// rs1_val==12297829382473034410 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 6, x1, 1472, x2)

inst_210:
// rs1_val==12297829382473034410 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 820, x1, 1480, x2)

inst_211:
// rs1_val==12297829382473034410 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 1639, x1, 1488, x2)

inst_212:
// rs1_val==12297829382473034410 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 46, x1, 1496, x2)

inst_213:
// rs1_val==12297829382473034410 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 1, x1, 1504, x2)

inst_214:
// rs1_val==12297829382473034410 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034410;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034410, 64, x1, 1512, x2)

inst_215:
// rs1_val==5 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 5, 3, x1, 1520, x2)

inst_216:
// rs1_val==5 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 1365, x1, 1528, x2)

inst_217:
// rs1_val==5 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 2730, x1, 1536, x2)

inst_218:
// rs1_val==5 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 5, 5, x1, 1544, x2)

inst_219:
// rs1_val==5 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 819, x1, 1552, x2)

inst_220:
// rs1_val==5 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 1638, x1, 1560, x2)

inst_221:
// rs1_val==5 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 45, x1, 1568, x2)

inst_222:
// rs1_val==5 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 5, 0, x1, 1576, x2)

inst_223:
// rs1_val==5 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 63, x1, 1584, x2)

inst_224:
// rs1_val==5 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 5, 2, x1, 1592, x2)

inst_225:
// rs1_val==5 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 1364, x1, 1600, x2)

inst_226:
// rs1_val==5 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 2729, x1, 1608, x2)

inst_227:
// rs1_val==5 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 5, 4, x1, 1616, x2)

inst_228:
// rs1_val==5 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 818, x1, 1624, x2)

inst_229:
// rs1_val==5 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 1637, x1, 1632, x2)

inst_230:
// rs1_val==5 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 44, x1, 1640, x2)

inst_231:
// rs1_val==5 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 62, x1, 1648, x2)

inst_232:
// rs1_val==5 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 1366, x1, 1656, x2)

inst_233:
// rs1_val==5 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 2731, x1, 1664, x2)

inst_234:
// rs1_val==5 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 6, x1, 1672, x2)

inst_235:
// rs1_val==5 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 820, x1, 1680, x2)

inst_236:
// rs1_val==5 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 1639, x1, 1688, x2)

inst_237:
// rs1_val==5 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 46, x1, 1696, x2)

inst_238:
// rs1_val==5 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 5, 1, x1, 1704, x2)

inst_239:
// rs1_val==5 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:5;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x1, 5, 64, x1, 1712, x2)

inst_240:
// rs1_val==3689348814741910323 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 3, x1, 1720, x2)

inst_241:
// rs1_val==3689348814741910323 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 1365, x1, 1728, x2)

inst_242:
// rs1_val==3689348814741910323 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 2730, x1, 1736, x2)

inst_243:
// rs1_val==3689348814741910323 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 5, x1, 1744, x2)

inst_244:
// rs1_val==3689348814741910323 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 819, x1, 1752, x2)

inst_245:
// rs1_val==3689348814741910323 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 1638, x1, 1760, x2)

inst_246:
// rs1_val==3689348814741910323 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 45, x1, 1768, x2)

inst_247:
// rs1_val==3689348814741910323 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 0, x1, 1776, x2)

inst_248:
// rs1_val==3689348814741910323 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 63, x1, 1784, x2)

inst_249:
// rs1_val==3689348814741910323 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 2, x1, 1792, x2)

inst_250:
// rs1_val==3689348814741910323 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 1364, x1, 1800, x2)

inst_251:
// rs1_val==3689348814741910323 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 2729, x1, 1808, x2)

inst_252:
// rs1_val==3689348814741910323 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 4, x1, 1816, x2)

inst_253:
// rs1_val==3689348814741910323 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 818, x1, 1824, x2)

inst_254:
// rs1_val==3689348814741910323 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 1637, x1, 1832, x2)

inst_255:
// rs1_val==3689348814741910323 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 44, x1, 1840, x2)

inst_256:
// rs1_val==3689348814741910323 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 62, x1, 1848, x2)

inst_257:
// rs1_val==3689348814741910323 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 1366, x1, 1856, x2)

inst_258:
// rs1_val==3689348814741910323 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 2731, x1, 1864, x2)

inst_259:
// rs1_val==3689348814741910323 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 6, x1, 1872, x2)

inst_260:
// rs1_val==3689348814741910323 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 820, x1, 1880, x2)

inst_261:
// rs1_val==3689348814741910323 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 1639, x1, 1888, x2)

inst_262:
// rs1_val==3689348814741910323 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 46, x1, 1896, x2)

inst_263:
// rs1_val==3689348814741910323 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 1, x1, 1904, x2)

inst_264:
// rs1_val==3689348814741910323 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910323, 64, x1, 1912, x2)

inst_265:
// rs1_val==7378697629483820646 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 3, x1, 1920, x2)

inst_266:
// rs1_val==7378697629483820646 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 1365, x1, 1928, x2)

inst_267:
// rs1_val==7378697629483820646 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 2730, x1, 1936, x2)

inst_268:
// rs1_val==7378697629483820646 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 5, x1, 1944, x2)

inst_269:
// rs1_val==7378697629483820646 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 819, x1, 1952, x2)

inst_270:
// rs1_val==7378697629483820646 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 1638, x1, 1960, x2)

inst_271:
// rs1_val==7378697629483820646 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 45, x1, 1968, x2)

inst_272:
// rs1_val==7378697629483820646 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 0, x1, 1976, x2)

inst_273:
// rs1_val==7378697629483820646 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 63, x1, 1984, x2)

inst_274:
// rs1_val==7378697629483820646 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 2, x1, 1992, x2)

inst_275:
// rs1_val==7378697629483820646 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 1364, x1, 2000, x2)

inst_276:
// rs1_val==7378697629483820646 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 2729, x1, 2008, x2)

inst_277:
// rs1_val==7378697629483820646 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 4, x1, 2016, x2)

inst_278:
// rs1_val==7378697629483820646 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 818, x1, 2024, x2)

inst_279:
// rs1_val==7378697629483820646 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 1637, x1, 2032, x2)

inst_280:
// rs1_val==7378697629483820646 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 44, x1, 2040, x2)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_281:
// rs1_val==7378697629483820646 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 62, x1, 0, x2)

inst_282:
// rs1_val==7378697629483820646 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 1366, x1, 8, x2)

inst_283:
// rs1_val==7378697629483820646 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 2731, x1, 16, x2)

inst_284:
// rs1_val==7378697629483820646 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 6, x1, 24, x2)

inst_285:
// rs1_val==7378697629483820646 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 820, x1, 32, x2)

inst_286:
// rs1_val==7378697629483820646 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 1639, x1, 40, x2)

inst_287:
// rs1_val==7378697629483820646 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 46, x1, 48, x2)

inst_288:
// rs1_val==7378697629483820646 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 1, x1, 56, x2)

inst_289:
// rs1_val==7378697629483820646 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820646, 64, x1, 64, x2)

inst_290:
// rs1_val==3037000499 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 3, x1, 72, x2)

inst_291:
// rs1_val==3037000499 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 1365, x1, 80, x2)

inst_292:
// rs1_val==3037000499 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 2730, x1, 88, x2)

inst_293:
// rs1_val==3037000499 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 5, x1, 96, x2)

inst_294:
// rs1_val==3037000499 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 819, x1, 104, x2)

inst_295:
// rs1_val==3037000499 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 1638, x1, 112, x2)

inst_296:
// rs1_val==3037000499 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 45, x1, 120, x2)

inst_297:
// rs1_val==3037000499 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 0, x1, 128, x2)

inst_298:
// rs1_val==3037000499 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 63, x1, 136, x2)

inst_299:
// rs1_val==3037000499 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 2, x1, 144, x2)

inst_300:
// rs1_val==3037000499 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 1364, x1, 152, x2)

inst_301:
// rs1_val==3037000499 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 2729, x1, 160, x2)

inst_302:
// rs1_val==3037000499 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 4, x1, 168, x2)

inst_303:
// rs1_val==3037000499 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 818, x1, 176, x2)

inst_304:
// rs1_val==3037000499 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 1637, x1, 184, x2)

inst_305:
// rs1_val==3037000499 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 44, x1, 192, x2)

inst_306:
// rs1_val==3037000499 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 62, x1, 200, x2)

inst_307:
// rs1_val==3037000499 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 1366, x1, 208, x2)

inst_308:
// rs1_val==3037000499 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 2731, x1, 216, x2)

inst_309:
// rs1_val==3037000499 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 6, x1, 224, x2)

inst_310:
// rs1_val==3037000499 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 820, x1, 232, x2)

inst_311:
// rs1_val==3037000499 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 1639, x1, 240, x2)

inst_312:
// rs1_val==3037000499 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 46, x1, 248, x2)

inst_313:
// rs1_val==3037000499 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 1, x1, 256, x2)

inst_314:
// rs1_val==3037000499 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000499;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000499, 64, x1, 264, x2)

inst_315:
// rs1_val==0 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 3, x1, 272, x2)

inst_316:
// rs1_val==0 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 1365, x1, 280, x2)

inst_317:
// rs1_val==0 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 2730, x1, 288, x2)

inst_318:
// rs1_val==0 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 5, x1, 296, x2)

inst_319:
// rs1_val==0 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 819, x1, 304, x2)

inst_320:
// rs1_val==0 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 1638, x1, 312, x2)

inst_321:
// rs1_val==0 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 45, x1, 320, x2)

inst_322:
// rs1_val==0 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0, 0, x1, 328, x2)

inst_323:
// rs1_val==0 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 63, x1, 336, x2)

inst_324:
// rs1_val==0 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 2, x1, 344, x2)

inst_325:
// rs1_val==0 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 1364, x1, 352, x2)

inst_326:
// rs1_val==0 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 2729, x1, 360, x2)

inst_327:
// rs1_val==0 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 4, x1, 368, x2)

inst_328:
// rs1_val==0 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 818, x1, 376, x2)

inst_329:
// rs1_val==0 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 1637, x1, 384, x2)

inst_330:
// rs1_val==0 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 44, x1, 392, x2)

inst_331:
// rs1_val==0 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 62, x1, 400, x2)

inst_332:
// rs1_val==0 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 1366, x1, 408, x2)

inst_333:
// rs1_val==0 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 2731, x1, 416, x2)

inst_334:
// rs1_val==0 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 6, x1, 424, x2)

inst_335:
// rs1_val==0 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 820, x1, 432, x2)

inst_336:
// rs1_val==0 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 1639, x1, 440, x2)

inst_337:
// rs1_val==0 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 46, x1, 448, x2)

inst_338:
// rs1_val==0 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 1, x1, 456, x2)

inst_339:
// rs1_val==0 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0, 64, x1, 464, x2)

inst_340:
// rs1_val==4294967296 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 3, x1, 472, x2)

inst_341:
// rs1_val==4294967296 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 1365, x1, 480, x2)

inst_342:
// rs1_val==4294967296 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 2730, x1, 488, x2)

inst_343:
// rs1_val==4294967296 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 5, x1, 496, x2)

inst_344:
// rs1_val==4294967296 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 819, x1, 504, x2)

inst_345:
// rs1_val==4294967296 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 1638, x1, 512, x2)

inst_346:
// rs1_val==4294967296 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 45, x1, 520, x2)

inst_347:
// rs1_val==4294967296 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 0, x1, 528, x2)

inst_348:
// rs1_val==4294967296 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 63, x1, 536, x2)

inst_349:
// rs1_val==4294967296 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 2, x1, 544, x2)

inst_350:
// rs1_val==4294967296 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 1364, x1, 552, x2)

inst_351:
// rs1_val==4294967296 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 2729, x1, 560, x2)

inst_352:
// rs1_val==4294967296 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 4, x1, 568, x2)

inst_353:
// rs1_val==4294967296 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 818, x1, 576, x2)

inst_354:
// rs1_val==4294967296 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 1637, x1, 584, x2)

inst_355:
// rs1_val==4294967296 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 44, x1, 592, x2)

inst_356:
// rs1_val==4294967296 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 62, x1, 600, x2)

inst_357:
// rs1_val==4294967296 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 1366, x1, 608, x2)

inst_358:
// rs1_val==4294967296 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 2731, x1, 616, x2)

inst_359:
// rs1_val==4294967296 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 6, x1, 624, x2)

inst_360:
// rs1_val==4294967296 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 820, x1, 632, x2)

inst_361:
// rs1_val==4294967296 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 1639, x1, 640, x2)

inst_362:
// rs1_val==4294967296 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 46, x1, 648, x2)

inst_363:
// rs1_val==4294967296 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 1, x1, 656, x2)

inst_364:
// rs1_val==4294967296 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967296;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967296, 64, x1, 664, x2)

inst_365:
// rs1_val==2 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 3, x1, 672, x2)

inst_366:
// rs1_val==2 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 1365, x1, 680, x2)

inst_367:
// rs1_val==2 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 2730, x1, 688, x2)

inst_368:
// rs1_val==2 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 5, x1, 696, x2)

inst_369:
// rs1_val==2 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 819, x1, 704, x2)

inst_370:
// rs1_val==2 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 1638, x1, 712, x2)

inst_371:
// rs1_val==2 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 45, x1, 720, x2)

inst_372:
// rs1_val==2 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2, 0, x1, 728, x2)

inst_373:
// rs1_val==2 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 63, x1, 736, x2)

inst_374:
// rs1_val==2 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2, 2, x1, 744, x2)

inst_375:
// rs1_val==2 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 1364, x1, 752, x2)

inst_376:
// rs1_val==2 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 2729, x1, 760, x2)

inst_377:
// rs1_val==2 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 4, x1, 768, x2)

inst_378:
// rs1_val==2 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 818, x1, 776, x2)

inst_379:
// rs1_val==2 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 44, x1, 784, x2)

inst_380:
// rs1_val==2 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 62, x1, 792, x2)

inst_381:
// rs1_val==2 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 1366, x1, 800, x2)

inst_382:
// rs1_val==2 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 2731, x1, 808, x2)

inst_383:
// rs1_val==2 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 6, x1, 816, x2)

inst_384:
// rs1_val==2 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 820, x1, 824, x2)

inst_385:
// rs1_val==2 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 1639, x1, 832, x2)

inst_386:
// rs1_val==2 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 46, x1, 840, x2)

inst_387:
// rs1_val==2 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2, 1, x1, 848, x2)

inst_388:
// rs1_val==2 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x1, 2, 64, x1, 856, x2)

inst_389:
// rs1_val==6148914691236517204 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 3, x1, 864, x2)

inst_390:
// rs1_val==6148914691236517204 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 1365, x1, 872, x2)

inst_391:
// rs1_val==6148914691236517204 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 2730, x1, 880, x2)

inst_392:
// rs1_val==6148914691236517204 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 5, x1, 888, x2)

inst_393:
// rs1_val==6148914691236517204 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 819, x1, 896, x2)

inst_394:
// rs1_val==6148914691236517204 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 1638, x1, 904, x2)

inst_395:
// rs1_val==6148914691236517204 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 45, x1, 912, x2)

inst_396:
// rs1_val==6148914691236517204 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 0, x1, 920, x2)

inst_397:
// rs1_val==6148914691236517204 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 63, x1, 928, x2)

inst_398:
// rs1_val==6148914691236517204 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 2, x1, 936, x2)

inst_399:
// rs1_val==6148914691236517204 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 1364, x1, 944, x2)

inst_400:
// rs1_val==6148914691236517204 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 2729, x1, 952, x2)

inst_401:
// rs1_val==6148914691236517204 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 4, x1, 960, x2)

inst_402:
// rs1_val==6148914691236517204 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 818, x1, 968, x2)

inst_403:
// rs1_val==6148914691236517204 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 1637, x1, 976, x2)

inst_404:
// rs1_val==6148914691236517204 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 44, x1, 984, x2)

inst_405:
// rs1_val==6148914691236517204 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 62, x1, 992, x2)

inst_406:
// rs1_val==6148914691236517204 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 1366, x1, 1000, x2)

inst_407:
// rs1_val==6148914691236517204 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 2731, x1, 1008, x2)

inst_408:
// rs1_val==6148914691236517204 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 6, x1, 1016, x2)

inst_409:
// rs1_val==6148914691236517204 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 820, x1, 1024, x2)

inst_410:
// rs1_val==6148914691236517204 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 1639, x1, 1032, x2)

inst_411:
// rs1_val==6148914691236517204 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 46, x1, 1040, x2)

inst_412:
// rs1_val==6148914691236517204 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 1, x1, 1048, x2)

inst_413:
// rs1_val==6148914691236517204 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517204, 64, x1, 1056, x2)

inst_414:
// rs1_val==12297829382473034409 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 3, x1, 1064, x2)

inst_415:
// rs1_val==12297829382473034409 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 1365, x1, 1072, x2)

inst_416:
// rs1_val==12297829382473034409 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 2730, x1, 1080, x2)

inst_417:
// rs1_val==12297829382473034409 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 5, x1, 1088, x2)

inst_418:
// rs1_val==12297829382473034409 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 819, x1, 1096, x2)

inst_419:
// rs1_val==12297829382473034409 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 1638, x1, 1104, x2)

inst_420:
// rs1_val==12297829382473034409 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 45, x1, 1112, x2)

inst_421:
// rs1_val==12297829382473034409 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 0, x1, 1120, x2)

inst_422:
// rs1_val==12297829382473034409 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 63, x1, 1128, x2)

inst_423:
// rs1_val==12297829382473034409 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 2, x1, 1136, x2)

inst_424:
// rs1_val==12297829382473034409 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 1364, x1, 1144, x2)

inst_425:
// rs1_val==12297829382473034409 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 2729, x1, 1152, x2)

inst_426:
// rs1_val==12297829382473034409 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 4, x1, 1160, x2)

inst_427:
// rs1_val==12297829382473034409 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 818, x1, 1168, x2)

inst_428:
// rs1_val==12297829382473034409 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 1637, x1, 1176, x2)

inst_429:
// rs1_val==12297829382473034409 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 44, x1, 1184, x2)

inst_430:
// rs1_val==12297829382473034409 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 62, x1, 1192, x2)

inst_431:
// rs1_val==12297829382473034409 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 1366, x1, 1200, x2)

inst_432:
// rs1_val==12297829382473034409 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 2731, x1, 1208, x2)

inst_433:
// rs1_val==12297829382473034409 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 6, x1, 1216, x2)

inst_434:
// rs1_val==12297829382473034409 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 820, x1, 1224, x2)

inst_435:
// rs1_val==12297829382473034409 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 1639, x1, 1232, x2)

inst_436:
// rs1_val==12297829382473034409 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 46, x1, 1240, x2)

inst_437:
// rs1_val==12297829382473034409 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 1, x1, 1248, x2)

inst_438:
// rs1_val==12297829382473034409 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034409;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034409, 64, x1, 1256, x2)

inst_439:
// rs1_val==4 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4, 3, x1, 1264, x2)

inst_440:
// rs1_val==4 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 1365, x1, 1272, x2)

inst_441:
// rs1_val==4 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 2730, x1, 1280, x2)

inst_442:
// rs1_val==4 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 5, x1, 1288, x2)

inst_443:
// rs1_val==4 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 819, x1, 1296, x2)

inst_444:
// rs1_val==4 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 1638, x1, 1304, x2)

inst_445:
// rs1_val==4 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 45, x1, 1312, x2)

inst_446:
// rs1_val==4 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4, 0, x1, 1320, x2)

inst_447:
// rs1_val==4 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 63, x1, 1328, x2)

inst_448:
// rs1_val==4 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4, 2, x1, 1336, x2)

inst_449:
// rs1_val==4 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 1364, x1, 1344, x2)

inst_450:
// rs1_val==4 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 2729, x1, 1352, x2)

inst_451:
// rs1_val==4 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4, 4, x1, 1360, x2)

inst_452:
// rs1_val==4 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 818, x1, 1368, x2)

inst_453:
// rs1_val==4 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 1637, x1, 1376, x2)

inst_454:
// rs1_val==4 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 44, x1, 1384, x2)

inst_455:
// rs1_val==4 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 62, x1, 1392, x2)

inst_456:
// rs1_val==4 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 1366, x1, 1400, x2)

inst_457:
// rs1_val==4 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 2731, x1, 1408, x2)

inst_458:
// rs1_val==4 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 6, x1, 1416, x2)

inst_459:
// rs1_val==4 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 820, x1, 1424, x2)

inst_460:
// rs1_val==4 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 1639, x1, 1432, x2)

inst_461:
// rs1_val==4 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 46, x1, 1440, x2)

inst_462:
// rs1_val==4 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4, 1, x1, 1448, x2)

inst_463:
// rs1_val==4 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x1, 4, 64, x1, 1456, x2)

inst_464:
// rs1_val==3689348814741910322 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 3, x1, 1464, x2)

inst_465:
// rs1_val==3689348814741910322 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 1365, x1, 1472, x2)

inst_466:
// rs1_val==3689348814741910322 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 2730, x1, 1480, x2)

inst_467:
// rs1_val==3689348814741910322 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 5, x1, 1488, x2)

inst_468:
// rs1_val==3689348814741910322 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 819, x1, 1496, x2)

inst_469:
// rs1_val==3689348814741910322 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 1638, x1, 1504, x2)

inst_470:
// rs1_val==3689348814741910322 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 45, x1, 1512, x2)

inst_471:
// rs1_val==3689348814741910322 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 0, x1, 1520, x2)

inst_472:
// rs1_val==3689348814741910322 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 63, x1, 1528, x2)

inst_473:
// rs1_val==3689348814741910322 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 2, x1, 1536, x2)

inst_474:
// rs1_val==3689348814741910322 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 1364, x1, 1544, x2)

inst_475:
// rs1_val==3689348814741910322 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 2729, x1, 1552, x2)

inst_476:
// rs1_val==3689348814741910322 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 4, x1, 1560, x2)

inst_477:
// rs1_val==3689348814741910322 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 818, x1, 1568, x2)

inst_478:
// rs1_val==3689348814741910322 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 1637, x1, 1576, x2)

inst_479:
// rs1_val==3689348814741910322 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 44, x1, 1584, x2)

inst_480:
// rs1_val==3689348814741910322 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 62, x1, 1592, x2)

inst_481:
// rs1_val==3689348814741910322 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 1366, x1, 1600, x2)

inst_482:
// rs1_val==3689348814741910322 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 2731, x1, 1608, x2)

inst_483:
// rs1_val==3689348814741910322 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 6, x1, 1616, x2)

inst_484:
// rs1_val==3689348814741910322 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 820, x1, 1624, x2)

inst_485:
// rs1_val==3689348814741910322 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 1639, x1, 1632, x2)

inst_486:
// rs1_val==3689348814741910322 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 46, x1, 1640, x2)

inst_487:
// rs1_val==3689348814741910322 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 1, x1, 1648, x2)

inst_488:
// rs1_val==3689348814741910322 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910322, 64, x1, 1656, x2)

inst_489:
// rs1_val==7378697629483820645 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 3, x1, 1664, x2)

inst_490:
// rs1_val==7378697629483820645 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 1365, x1, 1672, x2)

inst_491:
// rs1_val==7378697629483820645 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 2730, x1, 1680, x2)

inst_492:
// rs1_val==7378697629483820645 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 5, x1, 1688, x2)

inst_493:
// rs1_val==7378697629483820645 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 819, x1, 1696, x2)

inst_494:
// rs1_val==7378697629483820645 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 1638, x1, 1704, x2)

inst_495:
// rs1_val==7378697629483820645 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 45, x1, 1712, x2)

inst_496:
// rs1_val==7378697629483820645 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 0, x1, 1720, x2)

inst_497:
// rs1_val==7378697629483820645 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 63, x1, 1728, x2)

inst_498:
// rs1_val==7378697629483820645 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 2, x1, 1736, x2)

inst_499:
// rs1_val==7378697629483820645 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 1364, x1, 1744, x2)

inst_500:
// rs1_val==7378697629483820645 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 2729, x1, 1752, x2)

inst_501:
// rs1_val==7378697629483820645 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 4, x1, 1760, x2)

inst_502:
// rs1_val==7378697629483820645 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 818, x1, 1768, x2)

inst_503:
// rs1_val==7378697629483820645 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 1637, x1, 1776, x2)

inst_504:
// rs1_val==7378697629483820645 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 44, x1, 1784, x2)

inst_505:
// rs1_val==7378697629483820645 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 62, x1, 1792, x2)

inst_506:
// rs1_val==7378697629483820645 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 1366, x1, 1800, x2)

inst_507:
// rs1_val==7378697629483820645 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 2731, x1, 1808, x2)

inst_508:
// rs1_val==7378697629483820645 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 6, x1, 1816, x2)

inst_509:
// rs1_val==7378697629483820645 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 820, x1, 1824, x2)

inst_510:
// rs1_val==7378697629483820645 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 1639, x1, 1832, x2)

inst_511:
// rs1_val==7378697629483820645 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 46, x1, 1840, x2)

inst_512:
// rs1_val==7378697629483820645 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 1, x1, 1848, x2)

inst_513:
// rs1_val==7378697629483820645 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820645, 64, x1, 1856, x2)

inst_514:
// rs1_val==3037000498 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 3, x1, 1864, x2)

inst_515:
// rs1_val==3037000498 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 1365, x1, 1872, x2)

inst_516:
// rs1_val==3037000498 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 2730, x1, 1880, x2)

inst_517:
// rs1_val==3037000498 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 5, x1, 1888, x2)

inst_518:
// rs1_val==3037000498 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 819, x1, 1896, x2)

inst_519:
// rs1_val==3037000498 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 1638, x1, 1904, x2)

inst_520:
// rs1_val==3037000498 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 45, x1, 1912, x2)

inst_521:
// rs1_val==3037000498 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 0, x1, 1920, x2)

inst_522:
// rs1_val==3037000498 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 63, x1, 1928, x2)

inst_523:
// rs1_val==3037000498 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 2, x1, 1936, x2)

inst_524:
// rs1_val==3037000498 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 1364, x1, 1944, x2)

inst_525:
// rs1_val==3037000498 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 2729, x1, 1952, x2)

inst_526:
// rs1_val==3037000498 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 4, x1, 1960, x2)

inst_527:
// rs1_val==3037000498 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 818, x1, 1968, x2)

inst_528:
// rs1_val==3037000498 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 1637, x1, 1976, x2)

inst_529:
// rs1_val==3037000498 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 44, x1, 1984, x2)

inst_530:
// rs1_val==3037000498 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 62, x1, 1992, x2)

inst_531:
// rs1_val==3037000498 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 1366, x1, 2000, x2)

inst_532:
// rs1_val==3037000498 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 2731, x1, 2008, x2)

inst_533:
// rs1_val==3037000498 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 6, x1, 2016, x2)

inst_534:
// rs1_val==3037000498 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 820, x1, 2024, x2)

inst_535:
// rs1_val==3037000498 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 1639, x1, 2032, x2)

inst_536:
// rs1_val==3037000498 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 46, x1, 2040, x2)
RVTEST_SIGBASE( x1,signature_x1_2)

inst_537:
// rs1_val==3037000498 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 1, x1, 0, x2)

inst_538:
// rs1_val==3037000498 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000498;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000498, 64, x1, 8, x2)

inst_539:
// rs1_val==4294967295 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 3, x1, 16, x2)

inst_540:
// rs1_val==4294967295 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 1365, x1, 24, x2)

inst_541:
// rs1_val==4294967295 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 2730, x1, 32, x2)

inst_542:
// rs1_val==4294967295 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 5, x1, 40, x2)

inst_543:
// rs1_val==4294967295 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 819, x1, 48, x2)

inst_544:
// rs1_val==4294967295 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 1638, x1, 56, x2)

inst_545:
// rs1_val==4294967295 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 45, x1, 64, x2)

inst_546:
// rs1_val==4294967295 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 0, x1, 72, x2)

inst_547:
// rs1_val==4294967295 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 63, x1, 80, x2)

inst_548:
// rs1_val==4294967295 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 2, x1, 88, x2)

inst_549:
// rs1_val==4294967295 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 1364, x1, 96, x2)

inst_550:
// rs1_val==4294967295 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 2729, x1, 104, x2)

inst_551:
// rs1_val==4294967295 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 4, x1, 112, x2)

inst_552:
// rs1_val==4294967295 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 818, x1, 120, x2)

inst_553:
// rs1_val==4294967295 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 1637, x1, 128, x2)

inst_554:
// rs1_val==4294967295 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 44, x1, 136, x2)

inst_555:
// rs1_val==4294967295 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 62, x1, 144, x2)

inst_556:
// rs1_val==4294967295 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 1366, x1, 152, x2)

inst_557:
// rs1_val==4294967295 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 2731, x1, 160, x2)

inst_558:
// rs1_val==4294967295 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 6, x1, 168, x2)

inst_559:
// rs1_val==4294967295 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 820, x1, 176, x2)

inst_560:
// rs1_val==4294967295 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 1639, x1, 184, x2)

inst_561:
// rs1_val==4294967295 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 46, x1, 192, x2)

inst_562:
// rs1_val==4294967295 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 1, x1, 200, x2)

inst_563:
// rs1_val==4294967295 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967295;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967295, 64, x1, 208, x2)

inst_564:
// rs1_val==6148914691236517206 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 3, x1, 216, x2)

inst_565:
// rs1_val==6148914691236517206 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 1365, x1, 224, x2)

inst_566:
// rs1_val==6148914691236517206 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 2730, x1, 232, x2)

inst_567:
// rs1_val==6148914691236517206 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 5, x1, 240, x2)

inst_568:
// rs1_val==6148914691236517206 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 819, x1, 248, x2)

inst_569:
// rs1_val==6148914691236517206 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 1638, x1, 256, x2)

inst_570:
// rs1_val==6148914691236517206 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 45, x1, 264, x2)

inst_571:
// rs1_val==6148914691236517206 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 0, x1, 272, x2)

inst_572:
// rs1_val==6148914691236517206 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 63, x1, 280, x2)

inst_573:
// rs1_val==6148914691236517206 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 2, x1, 288, x2)

inst_574:
// rs1_val==6148914691236517206 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 1364, x1, 296, x2)

inst_575:
// rs1_val==6148914691236517206 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 2729, x1, 304, x2)

inst_576:
// rs1_val==6148914691236517206 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 4, x1, 312, x2)

inst_577:
// rs1_val==6148914691236517206 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 818, x1, 320, x2)

inst_578:
// rs1_val==6148914691236517206 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 1637, x1, 328, x2)

inst_579:
// rs1_val==6148914691236517206 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 44, x1, 336, x2)

inst_580:
// rs1_val==6148914691236517206 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 62, x1, 344, x2)

inst_581:
// rs1_val==6148914691236517206 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 1366, x1, 352, x2)

inst_582:
// rs1_val==6148914691236517206 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 2731, x1, 360, x2)

inst_583:
// rs1_val==6148914691236517206 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 6, x1, 368, x2)

inst_584:
// rs1_val==6148914691236517206 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 820, x1, 376, x2)

inst_585:
// rs1_val==6148914691236517206 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 1639, x1, 384, x2)

inst_586:
// rs1_val==6148914691236517206 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 46, x1, 392, x2)

inst_587:
// rs1_val==6148914691236517206 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 1, x1, 400, x2)

inst_588:
// rs1_val==6148914691236517206 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6148914691236517206, 64, x1, 408, x2)

inst_589:
// rs1_val==12297829382473034411 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 3, x1, 416, x2)

inst_590:
// rs1_val==12297829382473034411 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 1365, x1, 424, x2)

inst_591:
// rs1_val==12297829382473034411 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 2730, x1, 432, x2)

inst_592:
// rs1_val==12297829382473034411 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 5, x1, 440, x2)

inst_593:
// rs1_val==12297829382473034411 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 819, x1, 448, x2)

inst_594:
// rs1_val==12297829382473034411 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 1638, x1, 456, x2)

inst_595:
// rs1_val==12297829382473034411 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 45, x1, 464, x2)

inst_596:
// rs1_val==12297829382473034411 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 0, x1, 472, x2)

inst_597:
// rs1_val==12297829382473034411 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 63, x1, 480, x2)

inst_598:
// rs1_val==12297829382473034411 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 2, x1, 488, x2)

inst_599:
// rs1_val==12297829382473034411 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 1364, x1, 496, x2)

inst_600:
// rs1_val==12297829382473034411 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 2729, x1, 504, x2)

inst_601:
// rs1_val==12297829382473034411 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 4, x1, 512, x2)

inst_602:
// rs1_val==12297829382473034411 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 818, x1, 520, x2)

inst_603:
// rs1_val==12297829382473034411 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 1637, x1, 528, x2)

inst_604:
// rs1_val==12297829382473034411 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 44, x1, 536, x2)

inst_605:
// rs1_val==12297829382473034411 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 62, x1, 544, x2)

inst_606:
// rs1_val==12297829382473034411 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 1366, x1, 552, x2)

inst_607:
// rs1_val==12297829382473034411 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 2731, x1, 560, x2)

inst_608:
// rs1_val==12297829382473034411 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 6, x1, 568, x2)

inst_609:
// rs1_val==12297829382473034411 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 820, x1, 576, x2)

inst_610:
// rs1_val==12297829382473034411 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 1639, x1, 584, x2)

inst_611:
// rs1_val==12297829382473034411 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 46, x1, 592, x2)

inst_612:
// rs1_val==12297829382473034411 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 1, x1, 600, x2)

inst_613:
// rs1_val==12297829382473034411 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:12297829382473034411;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 12297829382473034411, 64, x1, 608, x2)

inst_614:
// rs1_val==6 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6, 3, x1, 616, x2)

inst_615:
// rs1_val==6 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 1365, x1, 624, x2)

inst_616:
// rs1_val==6 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 2730, x1, 632, x2)

inst_617:
// rs1_val==6 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6, 5, x1, 640, x2)

inst_618:
// rs1_val==6 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 819, x1, 648, x2)

inst_619:
// rs1_val==6 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 1638, x1, 656, x2)

inst_620:
// rs1_val==6 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 45, x1, 664, x2)

inst_621:
// rs1_val==6 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6, 0, x1, 672, x2)

inst_622:
// rs1_val==6 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 63, x1, 680, x2)

inst_623:
// rs1_val==6 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6, 2, x1, 688, x2)

inst_624:
// rs1_val==6 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 1364, x1, 696, x2)

inst_625:
// rs1_val==6 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 2729, x1, 704, x2)

inst_626:
// rs1_val==6 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6, 4, x1, 712, x2)

inst_627:
// rs1_val==6 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 818, x1, 720, x2)

inst_628:
// rs1_val==6 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 1637, x1, 728, x2)

inst_629:
// rs1_val==6 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 44, x1, 736, x2)

inst_630:
// rs1_val==6 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 62, x1, 744, x2)

inst_631:
// rs1_val==6 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 1366, x1, 752, x2)

inst_632:
// rs1_val==6 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 2731, x1, 760, x2)

inst_633:
// rs1_val==6 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6, 6, x1, 768, x2)

inst_634:
// rs1_val==6 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 820, x1, 776, x2)

inst_635:
// rs1_val==6 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 1639, x1, 784, x2)

inst_636:
// rs1_val==4294967297 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 45, x1, 792, x2)

inst_637:
// rs1_val==4294967297 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 0, x1, 800, x2)

inst_638:
// rs1_val==4294967297 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 63, x1, 808, x2)

inst_639:
// rs1_val==4294967297 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 2, x1, 816, x2)

inst_640:
// rs1_val==4294967297 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 1364, x1, 824, x2)

inst_641:
// rs1_val==4294967297 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 2729, x1, 832, x2)

inst_642:
// rs1_val==4294967297 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 4, x1, 840, x2)

inst_643:
// rs1_val==4294967297 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 818, x1, 848, x2)

inst_644:
// rs1_val==4294967297 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 1637, x1, 856, x2)

inst_645:
// rs1_val==4294967297 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 44, x1, 864, x2)

inst_646:
// rs1_val==4294967297 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 62, x1, 872, x2)

inst_647:
// rs1_val==4294967297 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 1366, x1, 880, x2)

inst_648:
// rs1_val==4294967297 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 2731, x1, 888, x2)

inst_649:
// rs1_val==4294967297 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 6, x1, 896, x2)

inst_650:
// rs1_val==4294967297 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 820, x1, 904, x2)

inst_651:
// rs1_val==4294967297 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 1639, x1, 912, x2)

inst_652:
// rs1_val==4294967297 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 46, x1, 920, x2)

inst_653:
// rs1_val==4294967297 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 1, x1, 928, x2)

inst_654:
// rs1_val==4294967297 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 64, x1, 936, x2)

inst_655:
// rs1_val==6 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 46, x1, 944, x2)

inst_656:
// rs1_val==6 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 6, 1, x1, 952, x2)

inst_657:
// rs1_val==6 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:6;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x1, 6, 64, x1, 960, x2)

inst_658:
// rs1_val==3689348814741910324 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 3, x1, 968, x2)

inst_659:
// rs1_val==3689348814741910324 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 1365, x1, 976, x2)

inst_660:
// rs1_val==3689348814741910324 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 2730, x1, 984, x2)

inst_661:
// rs1_val==3689348814741910324 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 5, x1, 992, x2)

inst_662:
// rs1_val==3689348814741910324 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 819, x1, 1000, x2)

inst_663:
// rs1_val==3689348814741910324 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 1638, x1, 1008, x2)

inst_664:
// rs1_val==3689348814741910324 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 45, x1, 1016, x2)

inst_665:
// rs1_val==3689348814741910324 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 0, x1, 1024, x2)

inst_666:
// rs1_val==3689348814741910324 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 63, x1, 1032, x2)

inst_667:
// rs1_val==3689348814741910324 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 2, x1, 1040, x2)

inst_668:
// rs1_val==3689348814741910324 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 1364, x1, 1048, x2)

inst_669:
// rs1_val==3689348814741910324 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 2729, x1, 1056, x2)

inst_670:
// rs1_val==3689348814741910324 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 4, x1, 1064, x2)

inst_671:
// rs1_val==3689348814741910324 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 818, x1, 1072, x2)

inst_672:
// rs1_val==3689348814741910324 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 1637, x1, 1080, x2)

inst_673:
// rs1_val==3689348814741910324 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 44, x1, 1088, x2)

inst_674:
// rs1_val==3689348814741910324 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 62, x1, 1096, x2)

inst_675:
// rs1_val==3689348814741910324 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 1366, x1, 1104, x2)

inst_676:
// rs1_val==3689348814741910324 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 2731, x1, 1112, x2)

inst_677:
// rs1_val==3689348814741910324 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 6, x1, 1120, x2)

inst_678:
// rs1_val==3689348814741910324 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 820, x1, 1128, x2)

inst_679:
// rs1_val==3689348814741910324 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 1639, x1, 1136, x2)

inst_680:
// rs1_val==3689348814741910324 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 46, x1, 1144, x2)

inst_681:
// rs1_val==3689348814741910324 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 1, x1, 1152, x2)

inst_682:
// rs1_val==3689348814741910324 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3689348814741910324, 64, x1, 1160, x2)

inst_683:
// rs1_val==7378697629483820647 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 3, x1, 1168, x2)

inst_684:
// rs1_val==7378697629483820647 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 1365, x1, 1176, x2)

inst_685:
// rs1_val==7378697629483820647 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 2730, x1, 1184, x2)

inst_686:
// rs1_val==7378697629483820647 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 5, x1, 1192, x2)

inst_687:
// rs1_val==7378697629483820647 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 819, x1, 1200, x2)

inst_688:
// rs1_val==7378697629483820647 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 1638, x1, 1208, x2)

inst_689:
// rs1_val==7378697629483820647 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 45, x1, 1216, x2)

inst_690:
// rs1_val==7378697629483820647 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 0, x1, 1224, x2)

inst_691:
// rs1_val==7378697629483820647 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 63, x1, 1232, x2)

inst_692:
// rs1_val==7378697629483820647 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 2, x1, 1240, x2)

inst_693:
// rs1_val==7378697629483820647 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 1364, x1, 1248, x2)

inst_694:
// rs1_val==7378697629483820647 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 2729, x1, 1256, x2)

inst_695:
// rs1_val==7378697629483820647 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 4, x1, 1264, x2)

inst_696:
// rs1_val==7378697629483820647 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 818, x1, 1272, x2)

inst_697:
// rs1_val==7378697629483820647 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 1637, x1, 1280, x2)

inst_698:
// rs1_val==7378697629483820647 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 44, x1, 1288, x2)

inst_699:
// rs1_val==7378697629483820647 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 62, x1, 1296, x2)

inst_700:
// rs1_val==7378697629483820647 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 1366, x1, 1304, x2)

inst_701:
// rs1_val==7378697629483820647 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 2731, x1, 1312, x2)

inst_702:
// rs1_val==7378697629483820647 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 6, x1, 1320, x2)

inst_703:
// rs1_val==7378697629483820647 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 820, x1, 1328, x2)

inst_704:
// rs1_val==7378697629483820647 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 1639, x1, 1336, x2)

inst_705:
// rs1_val==7378697629483820647 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 46, x1, 1344, x2)

inst_706:
// rs1_val==7378697629483820647 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 1, x1, 1352, x2)

inst_707:
// rs1_val==7378697629483820647 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 7378697629483820647, 64, x1, 1360, x2)

inst_708:
// rs1_val==3037000500 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 3, x1, 1368, x2)

inst_709:
// rs1_val==3037000500 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 1365, x1, 1376, x2)

inst_710:
// rs1_val==3037000500 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 2730, x1, 1384, x2)

inst_711:
// rs1_val==3037000500 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 5, x1, 1392, x2)

inst_712:
// rs1_val==3037000500 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 819, x1, 1400, x2)

inst_713:
// rs1_val==3037000500 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 1638, x1, 1408, x2)

inst_714:
// rs1_val==3037000500 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 45, x1, 1416, x2)

inst_715:
// rs1_val==3037000500 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 0, x1, 1424, x2)

inst_716:
// rs1_val==3037000500 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 63, x1, 1432, x2)

inst_717:
// rs1_val==3037000500 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 2, x1, 1440, x2)

inst_718:
// rs1_val==3037000500 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 1364, x1, 1448, x2)

inst_719:
// rs1_val==3037000500 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 2729, x1, 1456, x2)

inst_720:
// rs1_val==3037000500 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 4, x1, 1464, x2)

inst_721:
// rs1_val==3037000500 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 818, x1, 1472, x2)

inst_722:
// rs1_val==3037000500 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 1637, x1, 1480, x2)

inst_723:
// rs1_val==3037000500 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 44, x1, 1488, x2)

inst_724:
// rs1_val==3037000500 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 62, x1, 1496, x2)

inst_725:
// rs1_val==3037000500 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 1366, x1, 1504, x2)

inst_726:
// rs1_val==3037000500 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 2731, x1, 1512, x2)

inst_727:
// rs1_val==3037000500 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 6, x1, 1520, x2)

inst_728:
// rs1_val==3037000500 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 820, x1, 1528, x2)

inst_729:
// rs1_val==3037000500 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 1639, x1, 1536, x2)

inst_730:
// rs1_val==3037000500 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 46, x1, 1544, x2)

inst_731:
// rs1_val==3037000500 and imm_val==1, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 1, x1, 1552, x2)

inst_732:
// rs1_val==3037000500 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3037000500;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3037000500, 64, x1, 1560, x2)

inst_733:
// rs1_val==1 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 3, x1, 1568, x2)

inst_734:
// rs1_val==1 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 1365, x1, 1576, x2)

inst_735:
// rs1_val==1 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 2730, x1, 1584, x2)

inst_736:
// rs1_val==1 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 5, x1, 1592, x2)

inst_737:
// rs1_val==1 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 819, x1, 1600, x2)

inst_738:
// rs1_val==1 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 1638, x1, 1608, x2)

inst_739:
// rs1_val==1 and imm_val==45, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:45
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 45, x1, 1616, x2)

inst_740:
// rs1_val==1 and imm_val==0, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:0
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1, 0, x1, 1624, x2)

inst_741:
// rs1_val==1 and imm_val==63, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:63
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 63, x1, 1632, x2)

inst_742:
// rs1_val==1 and imm_val==2, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 2, x1, 1640, x2)

inst_743:
// rs1_val==1 and imm_val==1364, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:1364
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 1364, x1, 1648, x2)

inst_744:
// rs1_val==1 and imm_val==2729, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:2729
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 2729, x1, 1656, x2)

inst_745:
// rs1_val==1 and imm_val==4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 4, x1, 1664, x2)

inst_746:
// rs1_val==1 and imm_val==818, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:818
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 818, x1, 1672, x2)

inst_747:
// rs1_val==1 and imm_val==1637, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:1637
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 1637, x1, 1680, x2)

inst_748:
// rs1_val==1 and imm_val==44, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:44
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 44, x1, 1688, x2)

inst_749:
// rs1_val==1 and imm_val==62, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:62
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 62, x1, 1696, x2)

inst_750:
// rs1_val==1 and imm_val==1366, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:1366
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 1366, x1, 1704, x2)

inst_751:
// rs1_val==1 and imm_val==2731, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:2731
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 2731, x1, 1712, x2)

inst_752:
// rs1_val==1 and imm_val==6, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 6, x1, 1720, x2)

inst_753:
// rs1_val==1 and imm_val==820, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:820
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 820, x1, 1728, x2)

inst_754:
// rs1_val==1 and imm_val==1639, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:1639
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 1639, x1, 1736, x2)

inst_755:
// rs1_val==1 and imm_val==46, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:46
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 46, x1, 1744, x2)

inst_756:
// rs1_val==1 and imm_val==64, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1, 64, x1, 1752, x2)

inst_757:
// rs1_val==4294967297 and imm_val==3, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 3, x1, 1760, x2)

inst_758:
// rs1_val==4294967297 and imm_val==1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 1365, x1, 1768, x2)

inst_759:
// rs1_val==4294967297 and imm_val==2730, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 2730, x1, 1776, x2)

inst_760:
// rs1_val==4294967297 and imm_val==5, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 5, x1, 1784, x2)

inst_761:
// rs1_val==4294967297 and imm_val==819, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:819
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 819, x1, 1792, x2)

inst_762:
// rs1_val==4294967297 and imm_val==1638, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967297;  immval:1638
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967297, 1638, x1, 1800, x2)

inst_763:
// imm_val == 4079, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:18;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x1, 18, 4079, x1, 1808, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 227*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
