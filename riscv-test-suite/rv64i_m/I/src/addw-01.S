 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the addw instruction of the RISC-V I extension for the addw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",addw)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x21, rd==x25, rs1_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs2_val == -2097153, rs1_val == -9223372036854775808, rs1_val != rs2_val
// opcode: addw ; op1:x29; op2:x21; dest:x25; op1val:-9223372036854775808;  op2val:-2097153
TEST_RR_OP(addw, x25, x29, x21, 0xffdfffff, -9223372036854775808, -2097153, x10, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x2, rs1_val == 0, rs2_val == -8796093022209
// opcode: addw ; op1:x13; op2:x13; dest:x2; op1val:0;  op2val:-8796093022209
TEST_RR_OP(addw, x2, x13, x13, 0xffffffff, 0, -8796093022209, x10, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x8, rs2==x2, rd==x8, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 9223372036854775807, rs2_val == 562949953421312
// opcode: addw ; op1:x8; op2:x2; dest:x8; op1val:9223372036854775807;  op2val:562949953421312
TEST_RR_OP(addw, x8, x8, x2, 0xffffffff, 9223372036854775807, 562949953421312, x10, 16, x9)

inst_3:
// rs2 == rd != rs1, rs1==x14, rs2==x15, rd==x15, rs1_val == 1, rs2_val == -288230376151711745, rs1_val > 0 and rs2_val < 0
// opcode: addw ; op1:x14; op2:x15; dest:x15; op1val:1;  op2val:-288230376151711745
TEST_RR_OP(addw, x15, x14, x15, 0x100000000, 1, -288230376151711745, x10, 24, x9)

inst_4:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, rs1_val == -1025
// opcode: addw ; op1:x11; op2:x11; dest:x11; op1val:-1025;  op2val:-9223372036854775808
TEST_RR_OP(addw, x11, x11, x11, 0xfffffbff, -1025, -9223372036854775808, x10, 32, x9)

inst_5:
// rs1==x23, rs2==x5, rd==x31, rs2_val == 0, rs1_val == -65
// opcode: addw ; op1:x23; op2:x5; dest:x31; op1val:-65;  op2val:0
TEST_RR_OP(addw, x31, x23, x5, 0xffffffbf, -65, 0, x10, 40, x9)

inst_6:
// rs1==x4, rs2==x29, rd==x12, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode: addw ; op1:x4; op2:x29; dest:x12; op1val:9;  op2val:9223372036854775807
TEST_RR_OP(addw, x12, x4, x29, 0x100000008, 9, 9223372036854775807, x10, 48, x9)

inst_7:
// rs1==x15, rs2==x28, rd==x24, rs2_val == 1, rs1_val < 0 and rs2_val > 0, rs1_val == -262145
// opcode: addw ; op1:x15; op2:x28; dest:x24; op1val:-262145;  op2val:1
TEST_RR_OP(addw, x24, x15, x28, 0xfffc0000, -262145, 1, x10, 56, x9)

inst_8:
// rs1==x16, rs2==x19, rd==x1, rs1_val == rs2_val, rs1_val == 144115188075855872, rs2_val == 144115188075855872
// opcode: addw ; op1:x16; op2:x19; dest:x1; op1val:144115188075855872;  op2val:144115188075855872
TEST_RR_OP(addw, x1, x16, x19, 0x0, 144115188075855872, 144115188075855872, x10, 64, x9)

inst_9:
// rs1==x12, rs2==x20, rd==x21, rs1_val == 2, 
// opcode: addw ; op1:x12; op2:x20; dest:x21; op1val:2;  op2val:5
TEST_RR_OP(addw, x21, x12, x20, 0x7, 2, 5, x10, 72, x9)

inst_10:
// rs1==x27, rs2==x30, rd==x26, rs1_val == 4, rs2_val == -4294967297
// opcode: addw ; op1:x27; op2:x30; dest:x26; op1val:4;  op2val:-4294967297
TEST_RR_OP(addw, x26, x27, x30, 0x100000003, 4, -4294967297, x10, 80, x9)

inst_11:
// rs1==x18, rs2==x25, rd==x28, rs1_val == 8, rs2_val == -129
// opcode: addw ; op1:x18; op2:x25; dest:x28; op1val:8;  op2val:-129
TEST_RR_OP(addw, x28, x18, x25, 0xffffff87, 8, -129, x10, 88, x9)

inst_12:
// rs1==x19, rs2==x31, rd==x5, rs1_val == 16, rs2_val == -2251799813685249
// opcode: addw ; op1:x19; op2:x31; dest:x5; op1val:16;  op2val:-2251799813685249
TEST_RR_OP(addw, x5, x19, x31, 0x10000000f, 16, -2251799813685249, x10, 96, x9)

inst_13:
// rs1==x25, rs2==x23, rd==x7, rs1_val == 32, rs2_val == 35184372088832
// opcode: addw ; op1:x25; op2:x23; dest:x7; op1val:32;  op2val:35184372088832
TEST_RR_OP(addw, x7, x25, x23, 0x20, 32, 35184372088832, x10, 104, x9)

inst_14:
// rs1==x31, rs2==x6, rd==x29, rs1_val == 64, rs2_val == 140737488355328
// opcode: addw ; op1:x31; op2:x6; dest:x29; op1val:64;  op2val:140737488355328
TEST_RR_OP(addw, x29, x31, x6, 0x40, 64, 140737488355328, x10, 112, x9)

inst_15:
// rs1==x3, rs2==x12, rd==x13, rs1_val == 128, 
// opcode: addw ; op1:x3; op2:x12; dest:x13; op1val:128;  op2val:9
TEST_RR_OP(addw, x13, x3, x12, 0x89, 128, 9, x10, 120, x9)

inst_16:
// rs1==x22, rs2==x16, rd==x9, rs1_val == 256, rs2_val == 137438953472
// opcode: addw ; op1:x22; op2:x16; dest:x9; op1val:256;  op2val:137438953472
TEST_RR_OP(addw, x9, x22, x16, 0x100, 256, 137438953472, x10, 128, x15)
RVTEST_SIGBASE( x13,signature_x13_0)

inst_17:
// rs1==x6, rs2==x26, rd==x27, rs1_val == 512, 
// opcode: addw ; op1:x6; op2:x26; dest:x27; op1val:512;  op2val:-1
TEST_RR_OP(addw, x27, x6, x26, 0x1000001ff, 512, -1, x13, 0, x15)

inst_18:
// rs1==x28, rs2==x7, rd==x17, rs1_val == 1024, rs2_val == 4503599627370496
// opcode: addw ; op1:x28; op2:x7; dest:x17; op1val:1024;  op2val:4503599627370496
TEST_RR_OP(addw, x17, x28, x7, 0x400, 1024, 4503599627370496, x13, 8, x15)

inst_19:
// rs1==x17, rs2==x9, rd==x6, rs1_val == 2048, 
// opcode: addw ; op1:x17; op2:x9; dest:x6; op1val:2048;  op2val:-8
TEST_RR_OP(addw, x6, x17, x9, 0x1000007f8, 2048, -8, x13, 16, x15)

inst_20:
// rs1==x1, rs2==x10, rd==x18, rs1_val == 4096, rs2_val == 68719476736
// opcode: addw ; op1:x1; op2:x10; dest:x18; op1val:4096;  op2val:68719476736
TEST_RR_OP(addw, x18, x1, x10, 0x1000, 4096, 68719476736, x13, 24, x15)

inst_21:
// rs1==x24, rs2==x27, rd==x0, rs1_val == 8192, rs2_val == -513
// opcode: addw ; op1:x24; op2:x27; dest:x0; op1val:8192;  op2val:-513
TEST_RR_OP(addw, x0, x24, x27, 0x100001dff, 8192, -513, x13, 32, x15)

inst_22:
// rs1==x20, rs2==x3, rd==x14, rs1_val == 16384, 
// opcode: addw ; op1:x20; op2:x3; dest:x14; op1val:16384;  op2val:3
TEST_RR_OP(addw, x14, x20, x3, 0x4003, 16384, 3, x13, 40, x15)

inst_23:
// rs1==x26, rs2==x1, rd==x10, rs1_val == 32768, rs2_val == -35184372088833
// opcode: addw ; op1:x26; op2:x1; dest:x10; op1val:32768;  op2val:-35184372088833
TEST_RR_OP(addw, x10, x26, x1, 0x100007fff, 32768, -35184372088833, x13, 48, x15)

inst_24:
// rs1==x2, rs2==x18, rd==x30, rs1_val == 65536, rs2_val == 1099511627776
// opcode: addw ; op1:x2; op2:x18; dest:x30; op1val:65536;  op2val:1099511627776
TEST_RR_OP(addw, x30, x2, x18, 0x10000, 65536, 1099511627776, x13, 56, x15)

inst_25:
// rs1==x9, rs2==x4, rd==x23, rs1_val == 131072, rs2_val == -5
// opcode: addw ; op1:x9; op2:x4; dest:x23; op1val:131072;  op2val:-5
TEST_RR_OP(addw, x23, x9, x4, 0x10001fffb, 131072, -5, x13, 64, x15)

inst_26:
// rs1==x0, rs2==x17, rd==x4, rs1_val == 262144, rs2_val == -576460752303423489
// opcode: addw ; op1:x0; op2:x17; dest:x4; op1val:262144;  op2val:-576460752303423489
TEST_RR_OP(addw, x4, x0, x17, 0x10003ffff, 262144, -576460752303423489, x13, 72, x15)

inst_27:
// rs1==x21, rs2==x22, rd==x20, rs1_val == 524288, 
// opcode: addw ; op1:x21; op2:x22; dest:x20; op1val:524288;  op2val:-7
TEST_RR_OP(addw, x20, x21, x22, 0x10007fff9, 524288, -7, x13, 80, x15)

inst_28:
// rs1==x7, rs2==x0, rd==x3, rs1_val == 1048576, 
// opcode: addw ; op1:x7; op2:x0; dest:x3; op1val:1048576;  op2val:-9223372036854775808
TEST_RR_OP(addw, x3, x7, x0, 0x100000, 1048576, -9223372036854775808, x13, 88, x15)

inst_29:
// rs1==x10, rs2==x8, rd==x16, rs1_val == 2097152, rs2_val == 34359738368
// opcode: addw ; op1:x10; op2:x8; dest:x16; op1val:2097152;  op2val:34359738368
TEST_RR_OP(addw, x16, x10, x8, 0x200000, 2097152, 34359738368, x13, 96, x15)

inst_30:
// rs1==x30, rs2==x24, rd==x22, rs1_val == 4194304, rs2_val == 4
// opcode: addw ; op1:x30; op2:x24; dest:x22; op1val:4194304;  op2val:4
TEST_RR_OP(addw, x22, x30, x24, 0x400004, 4194304, 4, x13, 104, x15)

inst_31:
// rs1==x5, rs2==x14, rd==x19, rs1_val == 8388608, rs2_val == 549755813888
// opcode: addw ; op1:x5; op2:x14; dest:x19; op1val:8388608;  op2val:549755813888
TEST_RR_OP(addw, x19, x5, x14, 0x800000, 8388608, 549755813888, x13, 112, x15)

inst_32:
// rs1_val == 16777216, rs2_val == -268435457
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:-268435457
TEST_RR_OP(addw, x12, x10, x11, 0xf0ffffff, 16777216, -268435457, x13, 120, x15)

inst_33:
// rs1_val == 33554432, rs2_val == 32768
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:32768
TEST_RR_OP(addw, x12, x10, x11, 0x2008000, 33554432, 32768, x13, 128, x15)

inst_34:
// rs1_val == 67108864, rs2_val == 2305843009213693952
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:2305843009213693952
TEST_RR_OP(addw, x12, x10, x11, 0x4000000, 67108864, 2305843009213693952, x13, 136, x15)

inst_35:
// rs1_val == 134217728, rs2_val == 65536
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:65536
TEST_RR_OP(addw, x12, x10, x11, 0x8010000, 134217728, 65536, x13, 144, x15)

inst_36:
// rs1_val == 268435456, rs2_val == 128
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:128
TEST_RR_OP(addw, x12, x10, x11, 0x10000080, 268435456, 128, x13, 152, x15)

inst_37:
// rs1_val == 536870912, rs2_val == -4503599627370497
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:-4503599627370497
TEST_RR_OP(addw, x12, x10, x11, 0x11fffffff, 536870912, -4503599627370497, x13, 160, x15)

inst_38:
// rs1_val == 1073741824, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-35184372088833
TEST_RR_OP(addw, x12, x10, x11, 0x13fffffff, 1073741824, -35184372088833, x13, 168, x15)

inst_39:
// rs1_val == 2147483648, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:-129
TEST_RR_OP(addw, x12, x10, x11, 0x17fffff7f, 2147483648, -129, x13, 176, x15)

inst_40:
// rs1_val == 4294967296, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:9
TEST_RR_OP(addw, x12, x10, x11, 0x9, 4294967296, 9, x13, 184, x15)

inst_41:
// rs1_val == 8589934592, rs2_val == -18014398509481985
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:-18014398509481985
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 8589934592, -18014398509481985, x13, 192, x15)

inst_42:
// rs1_val == 17179869184, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:7
TEST_RR_OP(addw, x12, x10, x11, 0x7, 17179869184, 7, x13, 200, x15)

inst_43:
// rs1_val == 34359738368, rs2_val == 262144
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:262144
TEST_RR_OP(addw, x12, x10, x11, 0x40000, 34359738368, 262144, x13, 208, x15)

inst_44:
// rs1_val == 68719476736, rs2_val == -3
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:-3
TEST_RR_OP(addw, x12, x10, x11, 0xfffffffd, 68719476736, -3, x13, 216, x15)

inst_45:
// rs1_val == 137438953472, rs2_val == -2049
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:-2049
TEST_RR_OP(addw, x12, x10, x11, 0xfffff7ff, 137438953472, -2049, x13, 224, x15)

inst_46:
// rs1_val == 274877906944, rs2_val == -65
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:-65
TEST_RR_OP(addw, x12, x10, x11, 0xffffffbf, 274877906944, -65, x13, 232, x15)

inst_47:
// rs1_val == 549755813888, rs2_val == 9007199254740992
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:9007199254740992
TEST_RR_OP(addw, x12, x10, x11, 0x0, 549755813888, 9007199254740992, x13, 240, x15)

inst_48:
// rs1_val == 1099511627776, rs2_val == 281474976710656
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:281474976710656
TEST_RR_OP(addw, x12, x10, x11, 0x0, 1099511627776, 281474976710656, x13, 248, x15)

inst_49:
// rs1_val == 2199023255552, rs2_val == -134217729
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:-134217729
TEST_RR_OP(addw, x12, x10, x11, 0xf7ffffff, 2199023255552, -134217729, x13, 256, x15)

inst_50:
// rs1_val == 4398046511104, rs2_val == -65537
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-65537
TEST_RR_OP(addw, x12, x10, x11, 0xfffeffff, 4398046511104, -65537, x13, 264, x15)

inst_51:
// rs1_val == 8796093022208, rs2_val == -262145
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:-262145
TEST_RR_OP(addw, x12, x10, x11, 0xfffbffff, 8796093022208, -262145, x13, 272, x15)

inst_52:
// rs1_val == 17592186044416, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:68719476736
TEST_RR_OP(addw, x12, x10, x11, 0x0, 17592186044416, 68719476736, x13, 280, x15)

inst_53:
// rs1_val == 35184372088832, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:4503599627370496
TEST_RR_OP(addw, x12, x10, x11, 0x0, 35184372088832, 4503599627370496, x13, 288, x15)

inst_54:
// rs1_val == 70368744177664, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:68719476736
TEST_RR_OP(addw, x12, x10, x11, 0x0, 70368744177664, 68719476736, x13, 296, x15)

inst_55:
// rs1_val == 140737488355328, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:68719476736
TEST_RR_OP(addw, x12, x10, x11, 0x0, 140737488355328, 68719476736, x13, 304, x15)

inst_56:
// rs1_val == 281474976710656, rs2_val == 2147483648
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:2147483648
TEST_RR_OP(addw, x12, x10, x11, 0x80000000, 281474976710656, 2147483648, x13, 312, x15)

inst_57:
// rs1_val == 562949953421312, rs2_val == 4194304
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:4194304
TEST_RR_OP(addw, x12, x10, x11, 0x400000, 562949953421312, 4194304, x13, 320, x15)

inst_58:
// rs1_val == 1125899906842624, rs2_val == 4096
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:4096
TEST_RR_OP(addw, x12, x10, x11, 0x1000, 1125899906842624, 4096, x13, 328, x15)

inst_59:
// rs1_val == 2251799813685248, rs2_val == -281474976710657
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:-281474976710657
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 2251799813685248, -281474976710657, x13, 336, x15)

inst_60:
// rs1_val == 4503599627370496, rs2_val == 72057594037927936
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:72057594037927936
TEST_RR_OP(addw, x12, x10, x11, 0x0, 4503599627370496, 72057594037927936, x13, 344, x15)

inst_61:
// rs1_val == 9007199254740992, rs2_val == 2
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:2
TEST_RR_OP(addw, x12, x10, x11, 0x2, 9007199254740992, 2, x13, 352, x15)

inst_62:
// rs1_val == 18014398509481984, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:3
TEST_RR_OP(addw, x12, x10, x11, 0x3, 18014398509481984, 3, x13, 360, x15)

inst_63:
// rs1_val == 36028797018963968, rs2_val == 18014398509481984
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:18014398509481984
TEST_RR_OP(addw, x12, x10, x11, 0x0, 36028797018963968, 18014398509481984, x13, 368, x15)

inst_64:
// rs1_val == 72057594037927936, rs2_val == -72057594037927937
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-72057594037927937
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 72057594037927936, -72057594037927937, x13, 376, x15)

inst_65:
// rs1_val == 288230376151711744, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-8796093022209
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 288230376151711744, -8796093022209, x13, 384, x15)

inst_66:
// rs1_val == 576460752303423488, rs2_val == 17592186044416
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:17592186044416
TEST_RR_OP(addw, x12, x10, x11, 0x0, 576460752303423488, 17592186044416, x13, 392, x15)

inst_67:
// rs1_val == 1152921504606846976, rs2_val == 36028797018963968
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:36028797018963968
TEST_RR_OP(addw, x12, x10, x11, 0x0, 1152921504606846976, 36028797018963968, x13, 400, x15)

inst_68:
// rs1_val == 2305843009213693952, rs2_val == -2305843009213693953
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-2305843009213693953
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 2305843009213693952, -2305843009213693953, x13, 408, x15)

inst_69:
// rs1_val == 4611686018427387904, rs2_val == -4611686018427387905
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:-4611686018427387905
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 4611686018427387904, -4611686018427387905, x13, 416, x15)

inst_70:
// rs1_val == -2, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-9223372036854775808
TEST_RR_OP(addw, x12, x10, x11, 0xfffffffe, -2, -9223372036854775808, x13, 424, x15)

inst_71:
// rs1_val == -3, rs2_val == -67108865
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-67108865
TEST_RR_OP(addw, x12, x10, x11, 0x1fbfffffc, -3, -67108865, x13, 432, x15)

inst_72:
// rs1_val == -5, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:9
TEST_RR_OP(addw, x12, x10, x11, 0x100000004, -5, 9, x13, 440, x15)

inst_73:
// rs1_val == -9, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-576460752303423489
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffff6, -9, -576460752303423489, x13, 448, x15)

inst_74:
// rs1_val == -17, rs2_val == 4294967296
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:4294967296
TEST_RR_OP(addw, x12, x10, x11, 0xffffffef, -17, 4294967296, x13, 456, x15)

inst_75:
// rs1_val == -33, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:-5
TEST_RR_OP(addw, x12, x10, x11, 0x1ffffffda, -33, -5, x13, 464, x15)

inst_76:
// rs1_val == -129, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:128
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -129, 128, x13, 472, x15)

inst_77:
// rs1_val == -257, rs2_val == -2199023255553
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:-2199023255553
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffefe, -257, -2199023255553, x13, 480, x15)

inst_78:
// rs1_val == -513, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-8796093022209
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffdfe, -513, -8796093022209, x13, 488, x15)

inst_79:
// rs1_val == -2049, rs2_val == -4194305
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:-4194305
TEST_RR_OP(addw, x12, x10, x11, 0x1ffbff7fe, -2049, -4194305, x13, 496, x15)

inst_80:
// rs2_val == -1125899906842625, rs1_val == -134217729
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-1125899906842625
TEST_RR_OP(addw, x12, x10, x11, 0x1f7fffffe, -134217729, -1125899906842625, x13, 504, x15)

inst_81:
// rs2_val == -9007199254740993, rs1_val == -8388609
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:-9007199254740993
TEST_RR_OP(addw, x12, x10, x11, 0x1ff7ffffe, -8388609, -9007199254740993, x13, 512, x15)

inst_82:
// rs2_val == -36028797018963969, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:-36028797018963969
TEST_RR_OP(addw, x12, x10, x11, 0x1000001ff, 512, -36028797018963969, x13, 520, x15)

inst_83:
// rs2_val == -144115188075855873, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:-144115188075855873
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 9007199254740992, -144115188075855873, x13, 528, x15)

inst_84:
// rs2_val == -1152921504606846977, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:-1152921504606846977
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 35184372088832, -1152921504606846977, x13, 536, x15)

inst_85:
// rs2_val == 6148914691236517205, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:6148914691236517205
TEST_RR_OP(addw, x12, x10, x11, 0x5555555c, 7, 6148914691236517205, x13, 544, x15)

inst_86:
// rs2_val == -6148914691236517206, rs1_val == -274877906945
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:-6148914691236517206
TEST_RR_OP(addw, x12, x10, x11, 0x1aaaaaaa9, -274877906945, -6148914691236517206, x13, 552, x15)

inst_87:
// rs1_val == -4097, rs2_val == -562949953421313
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:-562949953421313
TEST_RR_OP(addw, x12, x10, x11, 0x1ffffeffe, -4097, -562949953421313, x13, 560, x15)

inst_88:
// rs1_val == -8193, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:5
TEST_RR_OP(addw, x12, x10, x11, 0xffffe004, -8193, 5, x13, 568, x15)

inst_89:
// rs1_val == -16385, rs2_val == 1048576
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:1048576
TEST_RR_OP(addw, x12, x10, x11, 0x1000fbfff, -16385, 1048576, x13, 576, x15)

inst_90:
// rs1_val == -32769, rs2_val == -536870913
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:-536870913
TEST_RR_OP(addw, x12, x10, x11, 0x1dfff7ffe, -32769, -536870913, x13, 584, x15)

inst_91:
// rs1_val == -65537, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:549755813888
TEST_RR_OP(addw, x12, x10, x11, 0xfffeffff, -65537, 549755813888, x13, 592, x15)

inst_92:
// rs1_val == -131073, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:-6
TEST_RR_OP(addw, x12, x10, x11, 0x1fffdfff9, -131073, -6, x13, 600, x15)

inst_93:
// rs1_val == -524289, rs2_val == -8193
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-8193
TEST_RR_OP(addw, x12, x10, x11, 0x1fff7dffe, -524289, -8193, x13, 608, x15)

inst_94:
// rs1_val == -1048577, rs2_val == 134217728
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:134217728
TEST_RR_OP(addw, x12, x10, x11, 0x107efffff, -1048577, 134217728, x13, 616, x15)

inst_95:
// rs1_val == -2097153, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-2049
TEST_RR_OP(addw, x12, x10, x11, 0x1ffdff7fe, -2097153, -2049, x13, 624, x15)

inst_96:
// rs1_val == -4194305, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:128
TEST_RR_OP(addw, x12, x10, x11, 0xffc0007f, -4194305, 128, x13, 632, x15)

inst_97:
// rs1_val == -16777217, rs2_val == 67108864
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:67108864
TEST_RR_OP(addw, x12, x10, x11, 0x102ffffff, -16777217, 67108864, x13, 640, x15)

inst_98:
// rs1_val == -33554433, rs2_val == -1099511627777
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-1099511627777
TEST_RR_OP(addw, x12, x10, x11, 0x1fdfffffe, -33554433, -1099511627777, x13, 648, x15)

inst_99:
// rs1_val == -67108865, rs2_val == -8388609
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-8388609
TEST_RR_OP(addw, x12, x10, x11, 0x1fb7ffffe, -67108865, -8388609, x13, 656, x15)

inst_100:
// rs1_val == -268435457, rs2_val == 8796093022208
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:8796093022208
TEST_RR_OP(addw, x12, x10, x11, 0xefffffff, -268435457, 8796093022208, x13, 664, x15)

inst_101:
// rs1_val == -536870913, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:-562949953421313
TEST_RR_OP(addw, x12, x10, x11, 0x1dffffffe, -536870913, -562949953421313, x13, 672, x15)

inst_102:
// rs1_val == -1073741825, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:6
TEST_RR_OP(addw, x12, x10, x11, 0xc0000005, -1073741825, 6, x13, 680, x15)

inst_103:
// rs1_val == -2147483649, rs2_val == -524289
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:-524289
TEST_RR_OP(addw, x12, x10, x11, 0x17ff7fffe, -2147483649, -524289, x13, 688, x15)

inst_104:
// rs1_val == -4294967297, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-2305843009213693953
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -4294967297, -2305843009213693953, x13, 696, x15)

inst_105:
// rs1_val == -8589934593, rs2_val == -8589934593
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-8589934593
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -8589934593, -8589934593, x13, 704, x15)

inst_106:
// rs1_val == -17179869185, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:68719476736
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -17179869185, 68719476736, x13, 712, x15)

inst_107:
// rs1_val == -34359738369, rs2_val == 2048
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:2048
TEST_RR_OP(addw, x12, x10, x11, 0x1000007ff, -34359738369, 2048, x13, 720, x15)

inst_108:
// rs1_val == -68719476737, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:1048576
TEST_RR_OP(addw, x12, x10, x11, 0x1000fffff, -68719476737, 1048576, x13, 728, x15)

inst_109:
// rs1_val == -137438953473, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:17592186044416
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -137438953473, 17592186044416, x13, 736, x15)

inst_110:
// rs1_val == -549755813889, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:140737488355328
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -549755813889, 140737488355328, x13, 744, x15)

inst_111:
// rs1_val == -1099511627777, rs2_val == -17592186044417
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:-17592186044417
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -1099511627777, -17592186044417, x13, 752, x15)

inst_112:
// rs1_val == -2199023255553, rs2_val == 2199023255552
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:2199023255552
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -2199023255553, 2199023255552, x13, 760, x15)

inst_113:
// rs1_val == -4398046511105, rs2_val == 1024
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:1024
TEST_RR_OP(addw, x12, x10, x11, 0x1000003ff, -4398046511105, 1024, x13, 768, x15)

inst_114:
// rs1_val == -8796093022209, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:134217728
TEST_RR_OP(addw, x12, x10, x11, 0x107ffffff, -8796093022209, 134217728, x13, 776, x15)

inst_115:
// rs1_val == -17592186044417, rs2_val == 524288
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:524288
TEST_RR_OP(addw, x12, x10, x11, 0x10007ffff, -17592186044417, 524288, x13, 784, x15)

inst_116:
// rs1_val == -35184372088833, rs2_val == -1073741825
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:-1073741825
TEST_RR_OP(addw, x12, x10, x11, 0x1bffffffe, -35184372088833, -1073741825, x13, 792, x15)

inst_117:
// rs1_val == -70368744177665, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:2305843009213693952
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -70368744177665, 2305843009213693952, x13, 800, x15)

inst_118:
// rs1_val == -140737488355329, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:-6148914691236517206
TEST_RR_OP(addw, x12, x10, x11, 0x1aaaaaaa9, -140737488355329, -6148914691236517206, x13, 808, x15)

inst_119:
// rs1_val == -281474976710657, rs2_val == 4611686018427387904
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:4611686018427387904
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -281474976710657, 4611686018427387904, x13, 816, x15)

inst_120:
// rs1_val == -562949953421313, rs2_val == -17179869185
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:-17179869185
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -562949953421313, -17179869185, x13, 824, x15)

inst_121:
// rs1_val == -1125899906842625, rs2_val == 512
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:512
TEST_RR_OP(addw, x12, x10, x11, 0x1000001ff, -1125899906842625, 512, x13, 832, x15)

inst_122:
// rs1_val == -2251799813685249, rs2_val == 16384
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:16384
TEST_RR_OP(addw, x12, x10, x11, 0x100003fff, -2251799813685249, 16384, x13, 840, x15)

inst_123:
// rs1_val == -4503599627370497, rs2_val == -274877906945
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:-274877906945
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -4503599627370497, -274877906945, x13, 848, x15)

inst_124:
// rs1_val == -9007199254740993, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:34359738368
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -9007199254740993, 34359738368, x13, 856, x15)

inst_125:
// rs1_val == -18014398509481985, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:9223372036854775807
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -18014398509481985, 9223372036854775807, x13, 864, x15)

inst_126:
// rs1_val == -36028797018963969, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:8796093022208
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -36028797018963969, 8796093022208, x13, 872, x15)

inst_127:
// rs1_val == -72057594037927937, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:-134217729
TEST_RR_OP(addw, x12, x10, x11, 0x1f7fffffe, -72057594037927937, -134217729, x13, 880, x15)

inst_128:
// rs1_val == -144115188075855873, rs2_val == -32769
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-32769
TEST_RR_OP(addw, x12, x10, x11, 0x1ffff7ffe, -144115188075855873, -32769, x13, 888, x15)

inst_129:
// rs1_val == -288230376151711745, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:-562949953421313
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -288230376151711745, -562949953421313, x13, 896, x15)

inst_130:
// rs1_val == -576460752303423489, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-5
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffa, -576460752303423489, -5, x13, 904, x15)

inst_131:
// rs1_val == -1152921504606846977, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-7
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffff8, -1152921504606846977, -7, x13, 912, x15)

inst_132:
// rs1_val == -2305843009213693953, rs2_val == 274877906944
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:274877906944
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -2305843009213693953, 274877906944, x13, 920, x15)

inst_133:
// rs1_val == -4611686018427387905, rs2_val == -16777217
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:-16777217
TEST_RR_OP(addw, x12, x10, x11, 0x1fefffffe, -4611686018427387905, -16777217, x13, 928, x15)

inst_134:
// rs1_val == 6148914691236517205, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:2147483648
TEST_RR_OP(addw, x12, x10, x11, 0xd5555555, 6148914691236517205, 2147483648, x13, 936, x15)

inst_135:
// rs1_val == -6148914691236517206, rs2_val == -34359738369
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-34359738369
TEST_RR_OP(addw, x12, x10, x11, 0x1aaaaaaa9, -6148914691236517206, -34359738369, x13, 944, x15)

inst_136:
// rs2_val == 8, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:128;  op2val:8
TEST_RR_OP(addw, x12, x10, x11, 0x88, 128, 8, x13, 952, x15)

inst_137:
// rs2_val == 16, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:16
TEST_RR_OP(addw, x12, x10, x11, 0x10000000f, -1125899906842625, 16, x13, 960, x15)

inst_138:
// rs2_val == 32, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:32
TEST_RR_OP(addw, x12, x10, x11, 0x20000020, 536870912, 32, x13, 968, x15)

inst_139:
// rs2_val == 64, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:64
TEST_RR_OP(addw, x12, x10, x11, 0x10000003f, -562949953421313, 64, x13, 976, x15)

inst_140:
// rs2_val == 256, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:256
TEST_RR_OP(addw, x12, x10, x11, 0x102, 2, 256, x13, 984, x15)

inst_141:
// rs2_val == 8192, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:8192
TEST_RR_OP(addw, x12, x10, x11, 0x2000, 17592186044416, 8192, x13, 992, x15)

inst_142:
// rs2_val == 131072, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:131072
TEST_RR_OP(addw, x12, x10, x11, 0x2020000, 33554432, 131072, x13, 1000, x15)

inst_143:
// rs2_val == 2097152, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:2097152
TEST_RR_OP(addw, x12, x10, x11, 0x200800, 2048, 2097152, x13, 1008, x15)

inst_144:
// rs2_val == 8388608, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:8388608
TEST_RR_OP(addw, x12, x10, x11, 0x800000, 4294967296, 8388608, x13, 1016, x15)

inst_145:
// rs2_val == 16777216, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:16777216
TEST_RR_OP(addw, x12, x10, x11, 0x100ffffff, -36028797018963969, 16777216, x13, 1024, x15)

inst_146:
// rs2_val == 1125899906842624, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-6;  op2val:1125899906842624
TEST_RR_OP(addw, x12, x10, x11, 0xfffffffa, -6, 1125899906842624, x13, 1032, x15)

inst_147:
// rs2_val == 2251799813685248, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:2251799813685248
TEST_RR_OP(addw, x12, x10, x11, 0xffffffbf, -65, 2251799813685248, x13, 1040, x15)

inst_148:
// rs2_val == 288230376151711744, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:288230376151711744
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -2305843009213693953, 288230376151711744, x13, 1048, x15)

inst_149:
// rs2_val == 576460752303423488, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:576460752303423488
TEST_RR_OP(addw, x12, x10, x11, 0xfeffffff, -16777217, 576460752303423488, x13, 1056, x15)

inst_150:
// rs2_val == 1152921504606846976, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:1152921504606846976
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, -288230376151711745, 1152921504606846976, x13, 1064, x15)

inst_151:
// rs2_val == -2, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:-2
TEST_RR_OP(addw, x12, x10, x11, 0xfffffffe, 34359738368, -2, x13, 1072, x15)

inst_152:
// rs2_val == -9, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:-9
TEST_RR_OP(addw, x12, x10, x11, 0xfffffff7, 137438953472, -9, x13, 1080, x15)

inst_153:
// rs2_val == -17, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:-17
TEST_RR_OP(addw, x12, x10, x11, 0x17fffffef, 2147483648, -17, x13, 1088, x15)

inst_154:
// rs2_val == -33, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-33
TEST_RR_OP(addw, x12, x10, x11, 0x1ffffffdd, -2, -33, x13, 1096, x15)

inst_155:
// rs2_val == -257, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:-257
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffefe, -70368744177665, -257, x13, 1104, x15)

inst_156:
// rs2_val == -1025, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:-1025
TEST_RR_OP(addw, x12, x10, x11, 0xfffffc1f, 32, -1025, x13, 1112, x15)

inst_157:
// rs2_val == -4097, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-4097
TEST_RR_OP(addw, x12, x10, x11, 0x1fffeeffe, -65537, -4097, x13, 1120, x15)

inst_158:
// rs2_val == -16385, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-16385
TEST_RR_OP(addw, x12, x10, x11, 0x1ffffbfee, -17, -16385, x13, 1128, x15)

inst_159:
// rs2_val == 4398046511104, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:4398046511104
TEST_RR_OP(addw, x12, x10, x11, 0xfffffffb, -5, 4398046511104, x13, 1136, x15)

inst_160:
// rs2_val == -131073, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-131073
TEST_RR_OP(addw, x12, x10, x11, 0x1fffdfffe, -4294967297, -131073, x13, 1144, x15)

inst_161:
// rs2_val == -1048577, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:-1048577
TEST_RR_OP(addw, x12, x10, x11, 0x17feffffe, -2147483649, -1048577, x13, 1152, x15)

inst_162:
// rs2_val == 33554432, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:33554432
TEST_RR_OP(addw, x12, x10, x11, 0x101ffffff, -17592186044417, 33554432, x13, 1160, x15)

inst_163:
// rs2_val == -33554433, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-33554433
TEST_RR_OP(addw, x12, x10, x11, 0x1fdfffffa, -5, -33554433, x13, 1168, x15)

inst_164:
// rs2_val == 268435456, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:268435456
TEST_RR_OP(addw, x12, x10, x11, 0x10000000, 68719476736, 268435456, x13, 1176, x15)

inst_165:
// rs2_val == 536870912, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:536870912
TEST_RR_OP(addw, x12, x10, x11, 0x20000000, 1125899906842624, 536870912, x13, 1184, x15)

inst_166:
// rs2_val == 1073741824, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:1073741824
TEST_RR_OP(addw, x12, x10, x11, 0x13fffffff, -18014398509481985, 1073741824, x13, 1192, x15)

inst_167:
// rs2_val == -2147483649, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-2147483649
TEST_RR_OP(addw, x12, x10, x11, 0x17ffffffe, -8589934593, -2147483649, x13, 1200, x15)

inst_168:
// rs2_val == 8589934592, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:8589934592
TEST_RR_OP(addw, x12, x10, x11, 0xfbffffff, -67108865, 8589934592, x13, 1208, x15)

inst_169:
// rs2_val == 17179869184, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-6;  op2val:17179869184
TEST_RR_OP(addw, x12, x10, x11, 0xfffffffa, -6, 17179869184, x13, 1216, x15)

inst_170:
// rs2_val == -68719476737, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:-68719476737
TEST_RR_OP(addw, x12, x10, x11, 0x10000001f, 32, -68719476737, x13, 1224, x15)

inst_171:
// rs2_val == 70368744177664, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:70368744177664
TEST_RR_OP(addw, x12, x10, x11, 0x800, 2048, 70368744177664, x13, 1232, x15)

inst_172:
// rs2_val == -137438953473, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:-137438953473
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 1099511627776, -137438953473, x13, 1240, x15)

inst_173:
// rs2_val == -4398046511105, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:-4398046511105
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 17592186044416, -4398046511105, x13, 1248, x15)

inst_174:
// rs2_val == -549755813889, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:256;  op2val:-549755813889
TEST_RR_OP(addw, x12, x10, x11, 0x1000000ff, 256, -549755813889, x13, 1256, x15)

inst_175:
// rs2_val == -70368744177665, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-6;  op2val:-70368744177665
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffff9, -6, -70368744177665, x13, 1264, x15)

inst_176:
// rs2_val == -140737488355329, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:-140737488355329
TEST_RR_OP(addw, x12, x10, x11, 0x1fffffffe, -34359738369, -140737488355329, x13, 1272, x15)

inst_177:
// rs1_val == 0, rs2_val == -8796093022209
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-8796093022209
TEST_RR_OP(addw, x12, x10, x11, 0xffffffff, 0, -8796093022209, x13, 1280, x15)

inst_178:
// rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, rs1_val == -1025
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:-9223372036854775808
TEST_RR_OP(addw, x12, x10, x11, 0xfffffbff, -1025, -9223372036854775808, x13, 1288, x15)

inst_179:
// rs1_val == 8192, rs2_val == -513
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:-513
TEST_RR_OP(addw, x12, x10, x11, 0x100001dff, 8192, -513, x13, 1296, x15)

inst_180:
// rs1_val == 262144, rs2_val == -576460752303423489
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:-576460752303423489
TEST_RR_OP(addw, x12, x10, x11, 0x10003ffff, 262144, -576460752303423489, x13, 1304, x15)

inst_181:
// rs1_val == 1048576, 
// opcode: addw ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:-9223372036854775808
TEST_RR_OP(addw, x12, x10, x11, 0x100000, 1048576, -9223372036854775808, x13, 1312, x15)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 165*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
