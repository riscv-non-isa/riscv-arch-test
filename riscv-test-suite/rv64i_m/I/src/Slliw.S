
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",slliw)
la x1,signature_x1_1
TEST_IMM_OP( slliw, x31, x30, -9223372039002259456, -1, 31, x1, 0, x2)
TEST_IMM_OP( slliw, x30, x31, 13204693743154017561353388032, 6148914691236517205, 31, x1, 8, x2)
TEST_IMM_OP( slliw, x29, x28, -9223372036854775809, -1, 0, x1, 16, x2)
TEST_IMM_OP( slliw, x28, x29, 6148914691236517205, 6148914691236517205, 0, x1, 24, x2)
TEST_IMM_OP( slliw, x27, x26, 1048576, 16, 16, x1, 32, x2)
TEST_IMM_OP( slliw, x26, x27, -19807040628566084398385987584, -9223372036854775808, 31, x1, 40, x2)
TEST_IMM_OP( slliw, x25, x24, 0, 0, 31, x1, 48, x2)
TEST_IMM_OP( slliw, x24, x25, 19807040619342712359383728128, 9223372036854775807, 31, x1, 56, x2)
TEST_IMM_OP( slliw, x23, x22, 2147483648, 1, 31, x1, 64, x2)
TEST_IMM_OP( slliw, x22, x23, -9223372036854775810, -1, 1, x1, 72, x2)
TEST_IMM_OP( slliw, x21, x20, -9223372036854775812, -1, 2, x1, 80, x2)
TEST_IMM_OP( slliw, x20, x21, -9223372036854775824, -1, 4, x1, 88, x2)
TEST_IMM_OP( slliw, x19, x18, -9223372036854776064, -1, 8, x1, 96, x2)
TEST_IMM_OP( slliw, x18, x19, -9223372037928517632, -1, 30, x1, 104, x2)
TEST_IMM_OP( slliw, x17, x16, -9223372037391646720, -1, 29, x1, 112, x2)
TEST_IMM_OP( slliw, x16, x17, -9223372036988993536, -1, 27, x1, 120, x2)
TEST_IMM_OP( slliw, x15, x14, -9223372036863164416, -1, 23, x1, 128, x2)
TEST_IMM_OP( slliw, x14, x15, -9223372036854808576, -1, 15, x1, 136, x2)
TEST_IMM_OP( slliw, x13, x12, -9223372036856872960, -1, 21, x1, 144, x2)
TEST_IMM_OP( slliw, x12, x13, -9223372036854776832, -1, 10, x1, 152, x2)
TEST_IMM_OP( slliw, x11, x10, 4294967296, 2, 31, x1, 160, x2)
TEST_IMM_OP( slliw, x10, x11, 8589934592, 4, 31, x1, 168, x2)
TEST_IMM_OP( slliw, x9, x8, 17179869184, 8, 31, x1, 176, x2)
TEST_IMM_OP( slliw, x8, x9, 68719476736, 32, 31, x1, 184, x2)
TEST_IMM_OP( slliw, x7, x6, 137438953472, 64, 31, x1, 192, x2)
TEST_IMM_OP( slliw, x6, x7, 274877906944, 128, 31, x1, 200, x2)
TEST_IMM_OP( slliw, x5, x4, 549755813888, 256, 31, x1, 208, x2)
la x6,signature_x6_0
TEST_IMM_OP( slliw, x4, x5, 1099511627776, 512, 31, x6, 0, x7)
TEST_IMM_OP( slliw, x3, x2, 2199023255552, 1024, 31, x6, 8, x7)
TEST_IMM_OP( slliw, x2, x3, 4398046511104, 2048, 31, x6, 16, x7)
TEST_IMM_OP( slliw, x1, x0, 8796093022208, 4096, 31, x6, 24, x7)
TEST_IMM_OP( slliw, x0, x1, 17592186044416, 8192, 31, x6, 32, x7)
TEST_IMM_OP( slliw, x31, x31, 35184372088832, 16384, 31, x6, 40, x7)
TEST_IMM_OP( slliw, x11, x10, 70368744177664, 32768, 31, x6, 48, x7)
TEST_IMM_OP( slliw, x11, x10, 140737488355328, 65536, 31, x6, 56, x7)
TEST_IMM_OP( slliw, x11, x10, 281474976710656, 131072, 31, x6, 64, x7)
TEST_IMM_OP( slliw, x11, x10, 562949953421312, 262144, 31, x6, 72, x7)
TEST_IMM_OP( slliw, x11, x10, 1125899906842624, 524288, 31, x6, 80, x7)
TEST_IMM_OP( slliw, x11, x10, 2251799813685248, 1048576, 31, x6, 88, x7)
TEST_IMM_OP( slliw, x11, x10, 4503599627370496, 2097152, 31, x6, 96, x7)
TEST_IMM_OP( slliw, x11, x10, 9007199254740992, 4194304, 31, x6, 104, x7)
TEST_IMM_OP( slliw, x11, x10, 18014398509481984, 8388608, 31, x6, 112, x7)
TEST_IMM_OP( slliw, x11, x10, 36028797018963968, 16777216, 31, x6, 120, x7)
TEST_IMM_OP( slliw, x11, x10, 72057594037927936, 33554432, 31, x6, 128, x7)
TEST_IMM_OP( slliw, x11, x10, 144115188075855872, 67108864, 31, x6, 136, x7)
TEST_IMM_OP( slliw, x11, x10, 288230376151711744, 134217728, 31, x6, 144, x7)
TEST_IMM_OP( slliw, x11, x10, 576460752303423488, 268435456, 31, x6, 152, x7)
TEST_IMM_OP( slliw, x11, x10, 1152921504606846976, 536870912, 31, x6, 160, x7)
TEST_IMM_OP( slliw, x11, x10, 2305843009213693952, 1073741824, 31, x6, 168, x7)
TEST_IMM_OP( slliw, x11, x10, 4611686018427387904, 2147483648, 31, x6, 176, x7)
TEST_IMM_OP( slliw, x11, x10, 0, 4294967296, 31, x6, 184, x7)
TEST_IMM_OP( slliw, x11, x10, 18446744073709551616, 8589934592, 31, x6, 192, x7)
TEST_IMM_OP( slliw, x11, x10, 36893488147419103232, 17179869184, 31, x6, 200, x7)
TEST_IMM_OP( slliw, x11, x10, 73786976294838206464, 34359738368, 31, x6, 208, x7)
TEST_IMM_OP( slliw, x11, x10, 147573952589676412928, 68719476736, 31, x6, 216, x7)
TEST_IMM_OP( slliw, x11, x10, 295147905179352825856, 137438953472, 31, x6, 224, x7)
TEST_IMM_OP( slliw, x11, x10, 590295810358705651712, 274877906944, 31, x6, 232, x7)
TEST_IMM_OP( slliw, x11, x10, 1180591620717411303424, 549755813888, 31, x6, 240, x7)
TEST_IMM_OP( slliw, x11, x10, 2361183241434822606848, 1099511627776, 31, x6, 248, x7)
TEST_IMM_OP( slliw, x11, x10, 4722366482869645213696, 2199023255552, 31, x6, 256, x7)
TEST_IMM_OP( slliw, x11, x10, 9444732965739290427392, 4398046511104, 31, x6, 264, x7)
TEST_IMM_OP( slliw, x11, x10, 18889465931478580854784, 8796093022208, 31, x6, 272, x7)
TEST_IMM_OP( slliw, x11, x10, 37778931862957161709568, 17592186044416, 31, x6, 280, x7)
TEST_IMM_OP( slliw, x11, x10, 75557863725914323419136, 35184372088832, 31, x6, 288, x7)
TEST_IMM_OP( slliw, x11, x10, 151115727451828646838272, 70368744177664, 31, x6, 296, x7)
TEST_IMM_OP( slliw, x11, x10, 302231454903657293676544, 140737488355328, 31, x6, 304, x7)
TEST_IMM_OP( slliw, x11, x10, 604462909807314587353088, 281474976710656, 31, x6, 312, x7)
TEST_IMM_OP( slliw, x11, x10, 1208925819614629174706176, 562949953421312, 31, x6, 320, x7)
TEST_IMM_OP( slliw, x11, x10, 2417851639229258349412352, 1125899906842624, 31, x6, 328, x7)
TEST_IMM_OP( slliw, x11, x10, 4835703278458516698824704, 2251799813685248, 31, x6, 336, x7)
TEST_IMM_OP( slliw, x11, x10, 9671406556917033397649408, 4503599627370496, 31, x6, 344, x7)
TEST_IMM_OP( slliw, x11, x10, 19342813113834066795298816, 9007199254740992, 31, x6, 352, x7)
TEST_IMM_OP( slliw, x11, x10, 38685626227668133590597632, 18014398509481984, 31, x6, 360, x7)
TEST_IMM_OP( slliw, x11, x10, 77371252455336267181195264, 36028797018963968, 31, x6, 368, x7)
TEST_IMM_OP( slliw, x11, x10, 154742504910672534362390528, 72057594037927936, 31, x6, 376, x7)
TEST_IMM_OP( slliw, x11, x10, 309485009821345068724781056, 144115188075855872, 31, x6, 384, x7)
TEST_IMM_OP( slliw, x11, x10, 618970019642690137449562112, 288230376151711744, 31, x6, 392, x7)
TEST_IMM_OP( slliw, x11, x10, 1237940039285380274899124224, 576460752303423488, 31, x6, 400, x7)
TEST_IMM_OP( slliw, x11, x10, 2475880078570760549798248448, 1152921504606846976, 31, x6, 408, x7)
TEST_IMM_OP( slliw, x11, x10, 4951760157141521099596496896, 2305843009213693952, 31, x6, 416, x7)
TEST_IMM_OP( slliw, x11, x10, 9903520314283042199192993792, 4611686018427387904, 31, x6, 424, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372041149743104, -2, 31, x6, 432, x7)
TEST_IMM_OP( slliw, x11, x10, -4731589854908647473152, -2199023255553, 31, x6, 440, x7)
TEST_IMM_OP( slliw, x11, x10, -9453956337778292686848, -4398046511105, 31, x6, 448, x7)
TEST_IMM_OP( slliw, x11, x10, -18898689303517583114240, -8796093022209, 31, x6, 456, x7)
TEST_IMM_OP( slliw, x11, x10, -37788155234996163969024, -17592186044417, 31, x6, 464, x7)
TEST_IMM_OP( slliw, x11, x10, -75567087097953325678592, -35184372088833, 31, x6, 472, x7)
TEST_IMM_OP( slliw, x11, x10, -151124950823867649097728, -70368744177665, 31, x6, 480, x7)
TEST_IMM_OP( slliw, x11, x10, -302240678275696295936000, -140737488355329, 31, x6, 488, x7)
TEST_IMM_OP( slliw, x11, x10, -604472133179353589612544, -281474976710657, 31, x6, 496, x7)
TEST_IMM_OP( slliw, x11, x10, -1208935042986668176965632, -562949953421313, 31, x6, 504, x7)
TEST_IMM_OP( slliw, x11, x10, -2417860862601297351671808, -1125899906842625, 31, x6, 512, x7)
TEST_IMM_OP( slliw, x11, x10, -4835712501830555701084160, -2251799813685249, 31, x6, 520, x7)
TEST_IMM_OP( slliw, x11, x10, -9671415780289072399908864, -4503599627370497, 31, x6, 528, x7)
TEST_IMM_OP( slliw, x11, x10, -19342822337206105797558272, -9007199254740993, 31, x6, 536, x7)
TEST_IMM_OP( slliw, x11, x10, -38685635451040172592857088, -18014398509481985, 31, x6, 544, x7)
TEST_IMM_OP( slliw, x11, x10, -77371261678708306183454720, -36028797018963969, 31, x6, 552, x7)
TEST_IMM_OP( slliw, x11, x10, -154742514134044573364649984, -72057594037927937, 31, x6, 560, x7)
TEST_IMM_OP( slliw, x11, x10, -309485019044717107727040512, -144115188075855873, 31, x6, 568, x7)
TEST_IMM_OP( slliw, x11, x10, -618970028866062176451821568, -288230376151711745, 31, x6, 576, x7)
TEST_IMM_OP( slliw, x11, x10, -1237940048508752313901383680, -576460752303423489, 31, x6, 584, x7)
TEST_IMM_OP( slliw, x11, x10, -2475880087794132588800507904, -1152921504606846977, 31, x6, 592, x7)
TEST_IMM_OP( slliw, x11, x10, -4951760166364893138598756352, -2305843009213693953, 31, x6, 600, x7)
TEST_IMM_OP( slliw, x11, x10, -9903520323506414238195253248, -4611686018427387905, 31, x6, 608, x7)
TEST_IMM_OP( slliw, x11, x10, -13204693752377389600355647488, -6148914691236517206, 31, x6, 616, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372043297226752, -3, 31, x6, 624, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372047592194048, -5, 31, x6, 632, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372056182128640, -9, 31, x6, 640, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372073361997824, -17, 31, x6, 648, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372107721736192, -33, 31, x6, 656, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372176441212928, -65, 31, x6, 664, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372313880166400, -129, 31, x6, 672, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372588758073344, -257, 31, x6, 680, x7)
TEST_IMM_OP( slliw, x11, x10, -9223373138513887232, -513, 31, x6, 688, x7)
TEST_IMM_OP( slliw, x11, x10, -9223374238025515008, -1025, 31, x6, 696, x7)
TEST_IMM_OP( slliw, x11, x10, -9223376437048770560, -2049, 31, x6, 704, x7)
TEST_IMM_OP( slliw, x11, x10, -9223380835095281664, -4097, 31, x6, 712, x7)
TEST_IMM_OP( slliw, x11, x10, -9223389631188303872, -8193, 31, x6, 720, x7)
TEST_IMM_OP( slliw, x11, x10, -9223407223374348288, -16385, 31, x6, 728, x7)
TEST_IMM_OP( slliw, x11, x10, -9223442407746437120, -32769, 31, x6, 736, x7)
TEST_IMM_OP( slliw, x11, x10, -9223512776490614784, -65537, 31, x6, 744, x7)
TEST_IMM_OP( slliw, x11, x10, -9223653513978970112, -131073, 31, x6, 752, x7)
TEST_IMM_OP( slliw, x11, x10, -9223934988955680768, -262145, 31, x6, 760, x7)
TEST_IMM_OP( slliw, x11, x10, -9224497938909102080, -524289, 31, x6, 768, x7)
TEST_IMM_OP( slliw, x11, x10, -9225623838815944704, -1048577, 31, x6, 776, x7)
TEST_IMM_OP( slliw, x11, x10, -9227875638629629952, -2097153, 31, x6, 784, x7)
TEST_IMM_OP( slliw, x11, x10, -9232379238257000448, -4194305, 31, x6, 792, x7)
TEST_IMM_OP( slliw, x11, x10, -9241386437511741440, -8388609, 31, x6, 800, x7)
TEST_IMM_OP( slliw, x11, x10, -9259400836021223424, -16777217, 31, x6, 808, x7)
TEST_IMM_OP( slliw, x11, x10, -9295429633040187392, -33554433, 31, x6, 816, x7)
TEST_IMM_OP( slliw, x11, x10, -9367487227078115328, -67108865, 31, x6, 824, x7)
TEST_IMM_OP( slliw, x11, x10, -9511602415153971200, -134217729, 31, x6, 832, x7)
TEST_IMM_OP( slliw, x11, x10, -9799832791305682944, -268435457, 31, x6, 840, x7)
TEST_IMM_OP( slliw, x11, x10, -10376293543609106432, -536870913, 31, x6, 848, x7)
TEST_IMM_OP( slliw, x11, x10, -11529215048215953408, -1073741825, 31, x6, 856, x7)
TEST_IMM_OP( slliw, x11, x10, -13835058057429647360, -2147483649, 31, x6, 864, x7)
TEST_IMM_OP( slliw, x11, x10, -9223372039002259456, -4294967297, 31, x6, 872, x7)
TEST_IMM_OP( slliw, x11, x10, -27670116112711811072, -8589934593, 31, x6, 880, x7)
TEST_IMM_OP( slliw, x11, x10, -46116860186421362688, -17179869185, 31, x6, 888, x7)
TEST_IMM_OP( slliw, x11, x10, -83010348333840465920, -34359738369, 31, x6, 896, x7)
TEST_IMM_OP( slliw, x11, x10, -156797324628678672384, -68719476737, 31, x6, 904, x7)
TEST_IMM_OP( slliw, x11, x10, -304371277218355085312, -137438953473, 31, x6, 912, x7)
TEST_IMM_OP( slliw, x11, x10, -599519182397707911168, -274877906945, 31, x6, 920, x7)
TEST_IMM_OP( slliw, x11, x10, -1189814992756413562880, -549755813889, 31, x6, 928, x7)
TEST_IMM_OP( slliw, x11, x10, -2370406613473824866304, -1099511627777, 31, x6, 936, x7)
TEST_IMM_OP( slliw, x11, x10, 8796093022208, 4096, 31, x6, 944, x7)
TEST_IMM_OP( slliw, x11, x10, 17592186044416, 8192, 31, x6, 952, x7)
TEST_IMM_OP( slliw, x11, x10, 35184372088832, 16384, 31, x6, 960, x7)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 27*(XLEN/32),4,0xafacadee


signature_x6_0:
    .fill 121*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
