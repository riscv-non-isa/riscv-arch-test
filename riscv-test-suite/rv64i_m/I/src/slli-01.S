
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:23:49 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli instruction of the RISC-V I extension for the slli covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",slli)

RVTEST_SIGBASE( x16,signature_x16_1)

inst_0:
// rs1 == rd, rs1==x1, rd==x1, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val == -35184372088833
// opcode: slli ; op1:x1; dest:x1; op1val:-0x200000000001;  immval:0x3
TEST_IMM_OP( slli, x1, x1, 0xfffefffffffffff8, -0x200000000001, 0x3, x16, 0, x15)

inst_1:
// rs1 != rd, rs1==x2, rd==x0, rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val == 4194304, imm_val == 2
// opcode: slli ; op1:x2; dest:x0; op1val:0x400000;  immval:0x2
TEST_IMM_OP( slli, x0, x2, 0x1000000, 0x400000, 0x2, x16, 8, x15)

inst_2:
// rs1==x22, rd==x19, rs1_val < 0 and imm_val == 0, rs1_val == -1152921504606846977
// opcode: slli ; op1:x22; dest:x19; op1val:-0x1000000000000001;  immval:0x0
TEST_IMM_OP( slli, x19, x22, 0xefffffffffffffff, -0x1000000000000001, 0x0, x16, 16, x15)

inst_3:
// rs1==x31, rd==x29, rs1_val > 0 and imm_val == 0, rs1_val == 140737488355328
// opcode: slli ; op1:x31; dest:x29; op1val:0x800000000000;  immval:0x0
TEST_IMM_OP( slli, x29, x31, 0x800000000000, 0x800000000000, 0x0, x16, 24, x15)

inst_4:
// rs1==x19, rd==x2, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -2251799813685249
// opcode: slli ; op1:x19; dest:x2; op1val:-0x8000000000001;  immval:0x3f
TEST_IMM_OP( slli, x2, x19, 0x8000000000000000, -0x8000000000001, 0x3f, x16, 32, x15)

inst_5:
// rs1==x11, rd==x24, rs1_val > 0 and imm_val == (xlen-1), rs1_val==5
// opcode: slli ; op1:x11; dest:x24; op1val:0x5;  immval:0x3f
TEST_IMM_OP( slli, x24, x11, 0x8000000000000000, 0x5, 0x3f, x16, 40, x15)

inst_6:
// rs1==x9, rd==x13, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, imm_val == 16, rs1_val == 16
// opcode: slli ; op1:x9; dest:x13; op1val:0x10;  immval:0x10
TEST_IMM_OP( slli, x13, x9, 0x100000, 0x10, 0x10, x16, 48, x15)

inst_7:
// rs1==x24, rd==x20, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -9223372036854775808
// opcode: slli ; op1:x24; dest:x20; op1val:-0x8000000000000000;  immval:0x10
TEST_IMM_OP( slli, x20, x24, 0x0, -0x8000000000000000, 0x10, x16, 56, x15)

inst_8:
// rs1==x17, rd==x28, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, rs1_val==0
// opcode: slli ; op1:x17; dest:x28; op1val:0x0;  immval:0x3
TEST_IMM_OP( slli, x28, x17, 0x0, 0x0, 0x3, x16, 64, x15)

inst_9:
// rs1==x13, rd==x30, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 9223372036854775807
// opcode: slli ; op1:x13; dest:x30; op1val:0x7fffffffffffffff;  immval:0xc
TEST_IMM_OP( slli, x30, x13, 0xfffffffffffff000, 0x7fffffffffffffff, 0xc, x16, 72, x15)

inst_10:
// rs1==x7, rd==x8, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, imm_val == 42, rs1_val == 1
// opcode: slli ; op1:x7; dest:x8; op1val:0x1;  immval:0x2a
TEST_IMM_OP( slli, x8, x7, 0x40000000000, 0x1, 0x2a, x16, 80, x15)

inst_11:
// rs1==x10, rd==x26, rs1_val == 2, rs1_val==2
// opcode: slli ; op1:x10; dest:x26; op1val:0x2;  immval:0xe
TEST_IMM_OP( slli, x26, x10, 0x8000, 0x2, 0xe, x16, 88, x15)

inst_12:
// rs1==x18, rd==x17, rs1_val == 4, rs1_val==4, imm_val == 59
// opcode: slli ; op1:x18; dest:x17; op1val:0x4;  immval:0x3b
TEST_IMM_OP( slli, x17, x18, 0x2000000000000000, 0x4, 0x3b, x16, 96, x15)

inst_13:
// rs1==x26, rd==x4, rs1_val == 8, 
// opcode: slli ; op1:x26; dest:x4; op1val:0x8;  immval:0x0
TEST_IMM_OP( slli, x4, x26, 0x8, 0x8, 0x0, x16, 104, x15)

inst_14:
// rs1==x27, rd==x14, rs1_val == 32, 
// opcode: slli ; op1:x27; dest:x14; op1val:0x20;  immval:0x13
TEST_IMM_OP( slli, x14, x27, 0x1000000, 0x20, 0x13, x16, 112, x15)

inst_15:
// rs1==x29, rd==x23, rs1_val == 64, 
// opcode: slli ; op1:x29; dest:x23; op1val:0x40;  immval:0x10
TEST_IMM_OP( slli, x23, x29, 0x400000, 0x40, 0x10, x16, 120, x15)

inst_16:
// rs1==x30, rd==x10, rs1_val == 128, 
// opcode: slli ; op1:x30; dest:x10; op1val:0x80;  immval:0xb
TEST_IMM_OP( slli, x10, x30, 0x40000, 0x80, 0xb, x16, 128, x15)

inst_17:
// rs1==x5, rd==x9, rs1_val == 256, 
// opcode: slli ; op1:x5; dest:x9; op1val:0x100;  immval:0x3b
TEST_IMM_OP( slli, x9, x5, 0x0, 0x100, 0x3b, x16, 136, x15)

inst_18:
// rs1==x8, rd==x6, rs1_val == 512, 
// opcode: slli ; op1:x8; dest:x6; op1val:0x200;  immval:0x3
TEST_IMM_OP( slli, x6, x8, 0x1000, 0x200, 0x3, x16, 144, x15)

inst_19:
// rs1==x12, rd==x22, rs1_val == 1024, 
// opcode: slli ; op1:x12; dest:x22; op1val:0x400;  immval:0x11
TEST_IMM_OP( slli, x22, x12, 0x8000000, 0x400, 0x11, x16, 152, x15)

inst_20:
// rs1==x3, rd==x7, rs1_val == 2048, 
// opcode: slli ; op1:x3; dest:x7; op1val:0x800;  immval:0x12
TEST_IMM_OP( slli, x7, x3, 0x20000000, 0x800, 0x12, x16, 160, x15)

inst_21:
// rs1==x14, rd==x15, rs1_val == 4096, imm_val == 31
// opcode: slli ; op1:x14; dest:x15; op1val:0x1000;  immval:0x1f
TEST_IMM_OP( slli, x15, x14, 0x80000000000, 0x1000, 0x1f, x16, 168, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_22:
// rs1==x25, rd==x16, rs1_val == 8192, 
// opcode: slli ; op1:x25; dest:x16; op1val:0x2000;  immval:0xa
TEST_IMM_OP( slli, x16, x25, 0x800000, 0x2000, 0xa, x1, 0, x2)

inst_23:
// rs1==x4, rd==x3, rs1_val == 16384, 
// opcode: slli ; op1:x4; dest:x3; op1val:0x4000;  immval:0x9
TEST_IMM_OP( slli, x3, x4, 0x800000, 0x4000, 0x9, x1, 8, x2)

inst_24:
// rs1==x0, rd==x27, rs1_val == 32768, 
// opcode: slli ; op1:x0; dest:x27; op1val:0x8000;  immval:0x6
TEST_IMM_OP( slli, x27, x0, 0x200000, 0x8000, 0x6, x1, 16, x2)

inst_25:
// rs1==x28, rd==x31, rs1_val == 65536, 
// opcode: slli ; op1:x28; dest:x31; op1val:0x10000;  immval:0xf
TEST_IMM_OP( slli, x31, x28, 0x80000000, 0x10000, 0xf, x1, 24, x2)

inst_26:
// rs1==x6, rd==x5, rs1_val == 131072, 
// opcode: slli ; op1:x6; dest:x5; op1val:0x20000;  immval:0x3
TEST_IMM_OP( slli, x5, x6, 0x100000, 0x20000, 0x3, x1, 32, x2)

inst_27:
// rs1==x21, rd==x25, rs1_val == 262144, 
// opcode: slli ; op1:x21; dest:x25; op1val:0x40000;  immval:0x3f
TEST_IMM_OP( slli, x25, x21, 0x0, 0x40000, 0x3f, x1, 40, x2)

inst_28:
// rs1==x16, rd==x12, rs1_val == 524288, 
// opcode: slli ; op1:x16; dest:x12; op1val:0x80000;  immval:0x7
TEST_IMM_OP( slli, x12, x16, 0x4000000, 0x80000, 0x7, x1, 48, x2)

inst_29:
// rs1==x15, rd==x18, rs1_val == 1048576, 
// opcode: slli ; op1:x15; dest:x18; op1val:0x100000;  immval:0xd
TEST_IMM_OP( slli, x18, x15, 0x200000000, 0x100000, 0xd, x1, 56, x2)

inst_30:
// rs1==x20, rd==x21, rs1_val == 2097152, 
// opcode: slli ; op1:x20; dest:x21; op1val:0x200000;  immval:0x3
TEST_IMM_OP( slli, x21, x20, 0x1000000, 0x200000, 0x3, x1, 64, x2)

inst_31:
// rs1==x23, rd==x11, rs1_val == 8388608, 
// opcode: slli ; op1:x23; dest:x11; op1val:0x800000;  immval:0xe
TEST_IMM_OP( slli, x11, x23, 0x2000000000, 0x800000, 0xe, x1, 72, x2)

inst_32:
// rs1_val == 16777216, imm_val == 1
// opcode: slli ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0x2000000, 0x1000000, 0x1, x1, 80, x2)

inst_33:
// rs1_val == 33554432, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x2000000;  immval:0xd
TEST_IMM_OP( slli, x11, x10, 0x4000000000, 0x2000000, 0xd, x1, 88, x2)

inst_34:
// rs1_val == 67108864, imm_val == 8
// opcode: slli ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x8
TEST_IMM_OP( slli, x11, x10, 0x400000000, 0x4000000, 0x8, x1, 96, x2)

inst_35:
// rs1_val == 134217728, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x8000000;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0x4000000000, 0x8000000, 0xb, x1, 104, x2)

inst_36:
// rs1_val == 268435456, imm_val == 32
// opcode: slli ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x20
TEST_IMM_OP( slli, x11, x10, 0x1000000000000000, 0x10000000, 0x20, x1, 112, x2)

inst_37:
// rs1_val == 536870912, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x20000000;  immval:0x1f
TEST_IMM_OP( slli, x11, x10, 0x1000000000000000, 0x20000000, 0x1f, x1, 120, x2)

inst_38:
// rs1_val == 1073741824, imm_val == 21
// opcode: slli ; op1:x10; dest:x11; op1val:0x40000000;  immval:0x15
TEST_IMM_OP( slli, x11, x10, 0x8000000000000, 0x40000000, 0x15, x1, 128, x2)

inst_39:
// rs1_val == 2147483648, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x80000000;  immval:0x3b
TEST_IMM_OP( slli, x11, x10, 0x0, 0x80000000, 0x3b, x1, 136, x2)

inst_40:
// rs1_val == 4294967296, imm_val == 55
// opcode: slli ; op1:x10; dest:x11; op1val:0x100000000;  immval:0x37
TEST_IMM_OP( slli, x11, x10, 0x0, 0x100000000, 0x37, x1, 144, x2)

inst_41:
// rs1_val == 8589934592, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x200000000;  immval:0x20
TEST_IMM_OP( slli, x11, x10, 0x0, 0x200000000, 0x20, x1, 152, x2)

inst_42:
// rs1_val == 17179869184, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x400000000;  immval:0x3b
TEST_IMM_OP( slli, x11, x10, 0x0, 0x400000000, 0x3b, x1, 160, x2)

inst_43:
// rs1_val == 34359738368, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x800000000;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0x2000000000, 0x800000000, 0x2, x1, 168, x2)

inst_44:
// rs1_val == 68719476736, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x1000000000;  immval:0x2a
TEST_IMM_OP( slli, x11, x10, 0x0, 0x1000000000, 0x2a, x1, 176, x2)

inst_45:
// rs1_val == 137438953472, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x2000000000;  immval:0x20
TEST_IMM_OP( slli, x11, x10, 0x0, 0x2000000000, 0x20, x1, 184, x2)

inst_46:
// rs1_val == 274877906944, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x4000000000;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0x20000000000000, 0x4000000000, 0xf, x1, 192, x2)

inst_47:
// rs1_val == 549755813888, imm_val == 4
// opcode: slli ; op1:x10; dest:x11; op1val:0x8000000000;  immval:0x4
TEST_IMM_OP( slli, x11, x10, 0x80000000000, 0x8000000000, 0x4, x1, 200, x2)

inst_48:
// rs1_val == 1099511627776, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x10000000000;  immval:0x9
TEST_IMM_OP( slli, x11, x10, 0x2000000000000, 0x10000000000, 0x9, x1, 208, x2)

inst_49:
// rs1_val == 2199023255552, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x20000000000;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0x400000000000000, 0x20000000000, 0x11, x1, 216, x2)

inst_50:
// rs1_val == 4398046511104, imm_val == 62
// opcode: slli ; op1:x10; dest:x11; op1val:0x40000000000;  immval:0x3e
TEST_IMM_OP( slli, x11, x10, 0x0, 0x40000000000, 0x3e, x1, 224, x2)

inst_51:
// rs1_val == 8796093022208, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x80000000000;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0x400000000000000, 0x80000000000, 0xf, x1, 232, x2)

inst_52:
// rs1_val == 17592186044416, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x100000000000;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0x400000000000000, 0x100000000000, 0xe, x1, 240, x2)

inst_53:
// rs1_val == 35184372088832, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x200000000000;  immval:0x15
TEST_IMM_OP( slli, x11, x10, 0x0, 0x200000000000, 0x15, x1, 248, x2)

inst_54:
// rs1_val == 70368744177664, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x400000000000;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0x8000000000000000, 0x400000000000, 0x11, x1, 256, x2)

inst_55:
// rs1_val == 281474976710656, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x1000000000000;  immval:0x15
TEST_IMM_OP( slli, x11, x10, 0x0, 0x1000000000000, 0x15, x1, 264, x2)

inst_56:
// rs1_val == 562949953421312, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x2000000000000;  immval:0x20
TEST_IMM_OP( slli, x11, x10, 0x0, 0x2000000000000, 0x20, x1, 272, x2)

inst_57:
// rs1_val == 1125899906842624, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x4000000000000;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0x10000000000000, 0x4000000000000, 0x2, x1, 280, x2)

inst_58:
// rs1_val == 2251799813685248, imm_val == 47
// opcode: slli ; op1:x10; dest:x11; op1val:0x8000000000000;  immval:0x2f
TEST_IMM_OP( slli, x11, x10, 0x0, 0x8000000000000, 0x2f, x1, 288, x2)

inst_59:
// rs1_val == 4503599627370496, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x10000000000000;  immval:0x20
TEST_IMM_OP( slli, x11, x10, 0x0, 0x10000000000000, 0x20, x1, 296, x2)

inst_60:
// rs1_val == 9007199254740992, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x20000000000000;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0x0, 0x20000000000000, 0xe, x1, 304, x2)

inst_61:
// rs1_val == 18014398509481984, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x40000000000000;  immval:0x20
TEST_IMM_OP( slli, x11, x10, 0x0, 0x40000000000000, 0x20, x1, 312, x2)

inst_62:
// rs1_val == 36028797018963968, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x80000000000000;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0x200000000000000, 0x80000000000000, 0x2, x1, 320, x2)

inst_63:
// rs1_val == 72057594037927936, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x100000000000000;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0x0, 0x100000000000000, 0x11, x1, 328, x2)

inst_64:
// rs1_val == 144115188075855872, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x200000000000000;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0x0, 0x200000000000000, 0x10, x1, 336, x2)

inst_65:
// rs1_val == 288230376151711744, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x400000000000000;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0x0, 0x400000000000000, 0xc, x1, 344, x2)

inst_66:
// rs1_val == 576460752303423488, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x800000000000000;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0x0, 0x800000000000000, 0xa, x1, 352, x2)

inst_67:
// rs1_val == 1152921504606846976, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x1000000000000000;  immval:0x3e
TEST_IMM_OP( slli, x11, x10, 0x0, 0x1000000000000000, 0x3e, x1, 360, x2)

inst_68:
// rs1_val == 2305843009213693952, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x2000000000000000;  immval:0x5
TEST_IMM_OP( slli, x11, x10, 0x0, 0x2000000000000000, 0x5, x1, 368, x2)

inst_69:
// rs1_val == 4611686018427387904, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x4000000000000000;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0x0, 0x4000000000000000, 0x11, x1, 376, x2)

inst_70:
// rs1_val == -2, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xfffffffffffffffc, -0x2, 0x1, x1, 384, x2)

inst_71:
// rs1_val == -3, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x3;  immval:0x15
TEST_IMM_OP( slli, x11, x10, 0xffffffffffa00000, -0x3, 0x15, x1, 392, x2)

inst_72:
// rs1_val == -5, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x5;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xfffffffffff60000, -0x5, 0x11, x1, 400, x2)

inst_73:
// rs1_val == -9, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x9;  immval:0x0
TEST_IMM_OP( slli, x11, x10, 0xfffffffffffffff7, -0x9, 0x0, x1, 408, x2)

inst_74:
// rs1_val == -17, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x11;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xffffffffffffbc00, -0x11, 0xa, x1, 416, x2)

inst_75:
// rs1_val == -33, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x21;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xffffffffffff7c00, -0x21, 0xa, x1, 424, x2)

inst_76:
// rs1_val == -65, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x41;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xfffffffffffefc00, -0x41, 0xa, x1, 432, x2)

inst_77:
// rs1_val == -129, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x81;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xfffffffffefe0000, -0x81, 0x11, x1, 440, x2)

inst_78:
// rs1_val == -257, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x101;  immval:0x20
TEST_IMM_OP( slli, x11, x10, 0xfffffeff00000000, -0x101, 0x20, x1, 448, x2)

inst_79:
// rs1_val == -513, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x201;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xfffffffffdff0000, -0x201, 0x10, x1, 456, x2)

inst_80:
// rs1_val == -1025, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x401;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xffffffffffdff800, -0x401, 0xb, x1, 464, x2)

inst_81:
// rs1_val == -2049, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x801;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0xffffffffffffdffc, -0x801, 0x2, x1, 472, x2)

inst_82:
// rs1_val == -4097, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1001;  immval:0x13
TEST_IMM_OP( slli, x11, x10, 0xffffffff7ff80000, -0x1001, 0x13, x1, 480, x2)

inst_83:
// rs1_val == -8193, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2001;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfffffffffefff800, -0x2001, 0xb, x1, 488, x2)

inst_84:
// rs1_val == -16385, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4001;  immval:0x1f
TEST_IMM_OP( slli, x11, x10, 0xffffdfff80000000, -0x4001, 0x1f, x1, 496, x2)

inst_85:
// rs1_val == -32769, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xffffffff7fff0000, -0x8001, 0x10, x1, 504, x2)

inst_86:
// rs1_val == -65537, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x10001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xffffffffffbfffc0, -0x10001, 0x6, x1, 512, x2)

inst_87:
// rs1_val == -131073, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20001;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xfffffffffeffff80, -0x20001, 0x7, x1, 520, x2)

inst_88:
// rs1_val == -9007199254740993, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20000000000001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xf7ffffffffffffc0, -0x20000000000001, 0x6, x1, 528, x2)

inst_89:
// rs1_val == -18014398509481985, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x40000000000001;  immval:0x3e
TEST_IMM_OP( slli, x11, x10, 0xc000000000000000, -0x40000000000001, 0x3e, x1, 536, x2)

inst_90:
// rs1_val == -36028797018963969, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x80000000000001;  immval:0x8
TEST_IMM_OP( slli, x11, x10, 0x7fffffffffffff00, -0x80000000000001, 0x8, x1, 544, x2)

inst_91:
// rs1_val == -72057594037927937, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x100000000000001;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfffffffffffff800, -0x100000000000001, 0xb, x1, 552, x2)

inst_92:
// rs1_val == -144115188075855873, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x200000000000001;  immval:0x1f
TEST_IMM_OP( slli, x11, x10, 0xffffffff80000000, -0x200000000000001, 0x1f, x1, 560, x2)

inst_93:
// rs1_val == -288230376151711745, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x400000000000001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xffffffffffffffc0, -0x400000000000001, 0x6, x1, 568, x2)

inst_94:
// rs1_val == -576460752303423489, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x800000000000001;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xffffffffffff0000, -0x800000000000001, 0x10, x1, 576, x2)

inst_95:
// rs1_val == -2305843009213693953, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2000000000000001;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xbffffffffffffffe, -0x2000000000000001, 0x1, x1, 584, x2)

inst_96:
// rs1_val == -4611686018427387905, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4000000000000001;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfffffffffffff800, -0x4000000000000001, 0xb, x1, 592, x2)

inst_97:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: slli ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0xd
TEST_IMM_OP( slli, x11, x10, 0xaaaaaaaaaaaaa000, 0x5555555555555555, 0xd, x1, 600, x2)

inst_98:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode: slli ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0x5555555555555500, -0x5555555555555556, 0x7, x1, 608, x2)

inst_99:
// rs1_val==3, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x3;  immval:0x9
TEST_IMM_OP( slli, x11, x10, 0x600, 0x3, 0x9, x1, 616, x2)

inst_100:
// rs1_val==3689348814741910323, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xcccccccccccccc00, 0x3333333333333333, 0xa, x1, 624, x2)

inst_101:
// rs1_val==7378697629483820646, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x5
TEST_IMM_OP( slli, x11, x10, 0xccccccccccccccc0, 0x6666666666666666, 0x5, x1, 632, x2)

inst_102:
// rs1_val==-3037000499, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xffffffa57d866680, -0xb504f333, 0x7, x1, 640, x2)

inst_103:
// rs1_val==3037000499, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x15
TEST_IMM_OP( slli, x11, x10, 0x16a09e66600000, 0xb504f333, 0x15, x1, 648, x2)

inst_104:
// rs1_val==6148914691236517204, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x2a
TEST_IMM_OP( slli, x11, x10, 0x5555500000000000, 0x5555555555555554, 0x2a, x1, 656, x2)

inst_105:
// rs1_val==3689348814741910322, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x2f
TEST_IMM_OP( slli, x11, x10, 0x9999000000000000, 0x3333333333333332, 0x2f, x1, 664, x2)

inst_106:
// rs1_val==7378697629483820645, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xccccccccccca0000, 0x6666666666666665, 0x11, x1, 672, x2)

inst_107:
// rs1_val==3037000498, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0x2d413ccc80, 0xb504f332, 0x6, x1, 680, x2)

inst_108:
// rs1_val==6148914691236517206, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x37
TEST_IMM_OP( slli, x11, x10, 0xab00000000000000, 0x5555555555555556, 0x37, x1, 688, x2)

inst_109:
// rs1_val==-6148914691236517205, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0x5555555555555558, -0x5555555555555555, 0x3, x1, 696, x2)

inst_110:
// rs1_val==6, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0x180, 0x6, 0x6, x1, 704, x2)

inst_111:
// rs1_val==3689348814741910324, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0x99999999999a0000, 0x3333333333333334, 0xf, x1, 712, x2)

inst_112:
// rs1_val==7378697629483820647, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x37
TEST_IMM_OP( slli, x11, x10, 0x3380000000000000, 0x6666666666666667, 0x37, x1, 720, x2)

inst_113:
// rs1_val==-3037000498, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x5
TEST_IMM_OP( slli, x11, x10, 0xffffffe95f6199c0, -0xb504f332, 0x5, x1, 728, x2)

inst_114:
// rs1_val==3037000500, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x3b
TEST_IMM_OP( slli, x11, x10, 0xa000000000000000, 0xb504f334, 0x3b, x1, 736, x2)

inst_115:
// imm_val == 61, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x7fffffffffffffff;  immval:0x3d
TEST_IMM_OP( slli, x11, x10, 0xe000000000000000, 0x7fffffffffffffff, 0x3d, x1, 744, x2)

inst_116:
// rs1_val == -262145, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x40001;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xfffffffbffff0000, -0x40001, 0x10, x1, 752, x2)

inst_117:
// rs1_val == -524289, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x80001;  immval:0xd
TEST_IMM_OP( slli, x11, x10, 0xfffffffeffffe000, -0x80001, 0xd, x1, 760, x2)

inst_118:
// rs1_val == -1048577, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x100001;  immval:0x0
TEST_IMM_OP( slli, x11, x10, 0xffffffffffefffff, -0x100001, 0x0, x1, 768, x2)

inst_119:
// rs1_val == -2097153, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x12
TEST_IMM_OP( slli, x11, x10, 0xffffff7ffffc0000, -0x200001, 0x12, x1, 776, x2)

inst_120:
// rs1_val == -4194305, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x1f
TEST_IMM_OP( slli, x11, x10, 0xffdfffff80000000, -0x400001, 0x1f, x1, 784, x2)

inst_121:
// rs1_val == -8388609, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xffffffffdfffffc0, -0x800001, 0x6, x1, 792, x2)

inst_122:
// rs1_val == -16777217, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1000001;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xffffffff7fffff80, -0x1000001, 0x7, x1, 800, x2)

inst_123:
// rs1_val == -33554433, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2000001;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0xfffffffff7fffffc, -0x2000001, 0x2, x1, 808, x2)

inst_124:
// rs1_val == -67108865, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4000001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xfffffffeffffffc0, -0x4000001, 0x6, x1, 816, x2)

inst_125:
// rs1_val == -134217729, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xfffffffbffffff80, -0x8000001, 0x7, x1, 824, x2)

inst_126:
// rs1_val == -268435457, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0xfffffefffffff000, -0x10000001, 0xc, x1, 832, x2)

inst_127:
// rs1_val == -536870913, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20000001;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0xffffefffffff8000, -0x20000001, 0xf, x1, 840, x2)

inst_128:
// rs1_val == -1073741825, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x40000001;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xfffffefffffffc00, -0x40000001, 0xa, x1, 848, x2)

inst_129:
// rs1_val == -2147483649, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x80000001;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0xfffff7fffffff000, -0x80000001, 0xc, x1, 856, x2)

inst_130:
// rs1_val == -4294967297, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x100000001;  immval:0x12
TEST_IMM_OP( slli, x11, x10, 0xfffbfffffffc0000, -0x100000001, 0x12, x1, 864, x2)

inst_131:
// rs1_val == -8589934593, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x200000001;  immval:0x9
TEST_IMM_OP( slli, x11, x10, 0xfffffbfffffffe00, -0x200000001, 0x9, x1, 872, x2)

inst_132:
// rs1_val == -17179869185, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x400000001;  immval:0x8
TEST_IMM_OP( slli, x11, x10, 0xfffffbffffffff00, -0x400000001, 0x8, x1, 880, x2)

inst_133:
// rs1_val == -34359738369, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x800000001;  immval:0x0
TEST_IMM_OP( slli, x11, x10, 0xfffffff7ffffffff, -0x800000001, 0x0, x1, 888, x2)

inst_134:
// rs1_val == -68719476737, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1000000001;  immval:0x8
TEST_IMM_OP( slli, x11, x10, 0xffffefffffffff00, -0x1000000001, 0x8, x1, 896, x2)

inst_135:
// rs1_val == -137438953473, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2000000001;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0xfffffefffffffff8, -0x2000000001, 0x3, x1, 904, x2)

inst_136:
// rs1_val == -274877906945, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4000000001;  immval:0xd
TEST_IMM_OP( slli, x11, x10, 0xfff7ffffffffe000, -0x4000000001, 0xd, x1, 912, x2)

inst_137:
// rs1_val == -549755813889, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x8000000001;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfffbfffffffff800, -0x8000000001, 0xb, x1, 920, x2)

inst_138:
// rs1_val == -1099511627777, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x10000000001;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xfffffdfffffffffe, -0x10000000001, 0x1, x1, 928, x2)

inst_139:
// rs1_val == -2199023255553, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20000000001;  immval:0x5
TEST_IMM_OP( slli, x11, x10, 0xffffbfffffffffe0, -0x20000000001, 0x5, x1, 936, x2)

inst_140:
// rs1_val == -4398046511105, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x40000000001;  immval:0x3b
TEST_IMM_OP( slli, x11, x10, 0xf800000000000000, -0x40000000001, 0x3b, x1, 944, x2)

inst_141:
// rs1_val == -8796093022209, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x80000000001;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0xff7ffffffffff000, -0x80000000001, 0xc, x1, 952, x2)

inst_142:
// rs1_val == -17592186044417, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x100000000001;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xffffdffffffffffe, -0x100000000001, 0x1, x1, 960, x2)

inst_143:
// rs1_val == -70368744177665, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x400000000001;  immval:0x9
TEST_IMM_OP( slli, x11, x10, 0xff7ffffffffffe00, -0x400000000001, 0x9, x1, 968, x2)

inst_144:
// rs1_val == -140737488355329, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x800000000001;  immval:0x15
TEST_IMM_OP( slli, x11, x10, 0xffffffffffe00000, -0x800000000001, 0x15, x1, 976, x2)

inst_145:
// rs1_val == -281474976710657, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1000000000001;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xfffffffffffe0000, -0x1000000000001, 0x11, x1, 984, x2)

inst_146:
// rs1_val == -562949953421313, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2000000000001;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xeffffffffffff800, -0x2000000000001, 0xb, x1, 992, x2)

inst_147:
// rs1_val == -1125899906842625, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4000000000001;  immval:0x9
TEST_IMM_OP( slli, x11, x10, 0xf7fffffffffffe00, -0x4000000000001, 0x9, x1, 1000, x2)

inst_148:
// rs1_val == -4503599627370497, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x10000000000001;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0xffbffffffffffffc, -0x10000000000001, 0x2, x1, 1008, x2)

inst_149:
// rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val == 4194304, imm_val == 2
// opcode: slli ; op1:x10; dest:x11; op1val:0x400000;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0x1000000, 0x400000, 0x2, x1, 1016, x2)

inst_150:
// rs1_val == 32768, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x8000;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0x200000, 0x8000, 0x6, x1, 1024, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 129*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
