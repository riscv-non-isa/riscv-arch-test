 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:20:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the addiw instruction of the RISC-V I extension for the addiw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",addiw)

RVTEST_SIGBASE( x12,signature_x12_1)

// rs1 != rd, rs1==x2, rd==x26, rs1_val == imm_val, rs1_val > 0 and imm_val > 0, rs1_val == 512, imm_val == 512
// opcode: addiw ; op1:x2; dest:x26; op1val:0x0000000000000200;  immval:512
TEST_IMM_OP( addiw, x26, x2, 0x400, 0x0000000000000200, 512, x12, 0, x7)

// rs1 == rd, rs1==x20, rd==x20, rs1_val != imm_val, imm_val == 0, rs1_val == -72057594037927937
// opcode: addiw ; op1:x20; dest:x20; op1val:0xfeffffffffffffff;  immval:0
TEST_IMM_OP( addiw, x20, x20, 0xffffffff, 0xfeffffffffffffff, 0, x12, 8, x7)

// rs1==x28, rd==x0, rs1_val > 0 and imm_val < 0, imm_val == -257, rs1_val == 274877906944
// opcode: addiw ; op1:x28; dest:x0; op1val:0x0000004000000000;  immval:-257
TEST_IMM_OP( addiw, x0, x28, 0xfffffeff, 0x0000004000000000, -257, x12, 16, x7)

// rs1==x1, rd==x19, rs1_val < 0 and imm_val > 0, rs1_val == -1099511627777
// opcode: addiw ; op1:x1; dest:x19; op1val:0xfffffeffffffffff;  immval:6
TEST_IMM_OP( addiw, x19, x1, 0x100000005, 0xfffffeffffffffff, 6, x12, 24, x7)

// rs1==x3, rd==x13, rs1_val < 0 and imm_val < 0, rs1_val == -257, imm_val == -1366
// opcode: addiw ; op1:x3; dest:x13; op1val:0xfffffffffffffeff;  immval:-1366
TEST_IMM_OP( addiw, x13, x3, 0x1fffff9a9, 0xfffffffffffffeff, -1366, x12, 32, x7)

// rs1==x18, rd==x31, rs1_val == (-2**(xlen-1)), imm_val == 1024, rs1_val == -9223372036854775808
// opcode: addiw ; op1:x18; dest:x31; op1val:0x8000000000000000;  immval:1024
TEST_IMM_OP( addiw, x31, x18, 0x400, 0x8000000000000000, 1024, x12, 40, x7)

// rs1==x17, rd==x4, rs1_val == 0, imm_val == -9
// opcode: addiw ; op1:x17; dest:x4; op1val:0x0000000000000000;  immval:-9
TEST_IMM_OP( addiw, x4, x17, 0xfffffff7, 0x0000000000000000, -9, x12, 48, x7)

// rs1==x24, rd==x15, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807
// opcode: addiw ; op1:x24; dest:x15; op1val:0x7fffffffffffffff;  immval:7
TEST_IMM_OP( addiw, x15, x24, 0x100000006, 0x7fffffffffffffff, 7, x12, 56, x7)

// rs1==x9, rd==x2, rs1_val == 1, 
// opcode: addiw ; op1:x9; dest:x2; op1val:0x0000000000000001;  immval:-1366
TEST_IMM_OP( addiw, x2, x9, 0xfffffaab, 0x0000000000000001, -1366, x12, 64, x7)

// rs1==x8, rd==x22, imm_val == (-2**(12-1)), rs1_val == 8, imm_val == -2048
// opcode: addiw ; op1:x8; dest:x22; op1val:0x0000000000000008;  immval:-2048
TEST_IMM_OP( addiw, x22, x8, 0xfffff808, 0x0000000000000008, -2048, x12, 72, x7)

// rs1==x19, rd==x6, imm_val == (2**(12-1)-1), rs1_val == -4503599627370497, imm_val == 2047
// opcode: addiw ; op1:x19; dest:x6; op1val:0xffefffffffffffff;  immval:2047
TEST_IMM_OP( addiw, x6, x19, 0x1000007fe, 0xffefffffffffffff, 2047, x12, 80, x7)

// rs1==x14, rd==x18, imm_val == 1, 
// opcode: addiw ; op1:x14; dest:x18; op1val:0xfffffffffffffeff;  immval:1
TEST_IMM_OP( addiw, x18, x14, 0xffffff00, 0xfffffffffffffeff, 1, x12, 88, x7)

// rs1==x15, rd==x8, rs1_val == 2, imm_val == -5
// opcode: addiw ; op1:x15; dest:x8; op1val:0x0000000000000002;  immval:-5
TEST_IMM_OP( addiw, x8, x15, 0xfffffffd, 0x0000000000000002, -5, x12, 96, x7)

// rs1==x11, rd==x9, rs1_val == 4, 
// opcode: addiw ; op1:x11; dest:x9; op1val:0x0000000000000004;  immval:-1
TEST_IMM_OP( addiw, x9, x11, 0x100000003, 0x0000000000000004, -1, x12, 104, x7)

// rs1==x13, rd==x17, rs1_val == 16, 
// opcode: addiw ; op1:x13; dest:x17; op1val:0x0000000000000010;  immval:-7
TEST_IMM_OP( addiw, x17, x13, 0x100000009, 0x0000000000000010, -7, x12, 112, x7)

// rs1==x16, rd==x24, rs1_val == 32, 
// opcode: addiw ; op1:x16; dest:x24; op1val:0x0000000000000020;  immval:1023
TEST_IMM_OP( addiw, x24, x16, 0x41f, 0x0000000000000020, 1023, x12, 120, x7)

// rs1==x26, rd==x27, rs1_val == 64, 
// opcode: addiw ; op1:x26; dest:x27; op1val:0x0000000000000040;  immval:-257
TEST_IMM_OP( addiw, x27, x26, 0xffffff3f, 0x0000000000000040, -257, x12, 128, x7)

// rs1==x25, rd==x29, rs1_val == 128, imm_val == 2
// opcode: addiw ; op1:x25; dest:x29; op1val:0x0000000000000080;  immval:2
TEST_IMM_OP( addiw, x29, x25, 0x82, 0x0000000000000080, 2, x12, 136, x7)

// rs1==x27, rd==x21, rs1_val == 256, imm_val == -3
// opcode: addiw ; op1:x27; dest:x21; op1val:0x0000000000000100;  immval:-3
TEST_IMM_OP( addiw, x21, x27, 0x1000000fd, 0x0000000000000100, -3, x12, 144, x7)

// rs1==x5, rd==x14, rs1_val == 1024, imm_val == -65
// opcode: addiw ; op1:x5; dest:x14; op1val:0x0000000000000400;  immval:-65
TEST_IMM_OP( addiw, x14, x5, 0x1000003bf, 0x0000000000000400, -65, x12, 152, x7)

// rs1==x22, rd==x10, rs1_val == 2048, imm_val == 4
// opcode: addiw ; op1:x22; dest:x10; op1val:0x0000000000000800;  immval:4
TEST_IMM_OP( addiw, x10, x22, 0x804, 0x0000000000000800, 4, x12, 160, x7)

// rs1==x7, rd==x5, rs1_val == 4096, 
// opcode: addiw ; op1:x7; dest:x5; op1val:0x0000000000001000;  immval:-9
TEST_IMM_OP( addiw, x5, x7, 0x100000ff7, 0x0000000000001000, -9, x12, 168, x8)
RVTEST_SIGBASE( x2,signature_x2_0)

// rs1==x30, rd==x7, rs1_val == 8192, 
// opcode: addiw ; op1:x30; dest:x7; op1val:0x0000000000002000;  immval:-8
TEST_IMM_OP( addiw, x7, x30, 0x100001ff8, 0x0000000000002000, -8, x2, 0, x8)

// rs1==x29, rd==x28, rs1_val == 16384, imm_val == 8
// opcode: addiw ; op1:x29; dest:x28; op1val:0x0000000000004000;  immval:8
TEST_IMM_OP( addiw, x28, x29, 0x4008, 0x0000000000004000, 8, x2, 8, x8)

// rs1==x21, rd==x3, rs1_val == 32768, 
// opcode: addiw ; op1:x21; dest:x3; op1val:0x0000000000008000;  immval:-8
TEST_IMM_OP( addiw, x3, x21, 0x100007ff8, 0x0000000000008000, -8, x2, 16, x8)

// rs1==x10, rd==x16, rs1_val == 65536, 
// opcode: addiw ; op1:x10; dest:x16; op1val:0x0000000000010000;  immval:-10
TEST_IMM_OP( addiw, x16, x10, 0x10000fff6, 0x0000000000010000, -10, x2, 24, x8)

// rs1==x4, rd==x12, rs1_val == 131072, 
// opcode: addiw ; op1:x4; dest:x12; op1val:0x0000000000020000;  immval:-257
TEST_IMM_OP( addiw, x12, x4, 0x10001feff, 0x0000000000020000, -257, x2, 32, x8)

// rs1==x23, rd==x1, rs1_val == 262144, imm_val == 16
// opcode: addiw ; op1:x23; dest:x1; op1val:0x0000000000040000;  immval:16
TEST_IMM_OP( addiw, x1, x23, 0x40010, 0x0000000000040000, 16, x2, 40, x8)

// rs1==x6, rd==x11, rs1_val == 524288, 
// opcode: addiw ; op1:x6; dest:x11; op1val:0x0000000000080000;  immval:-7
TEST_IMM_OP( addiw, x11, x6, 0x10007fff9, 0x0000000000080000, -7, x2, 48, x8)

// rs1==x12, rd==x30, rs1_val == 1048576, imm_val == -2
// opcode: addiw ; op1:x12; dest:x30; op1val:0x0000000000100000;  immval:-2
TEST_IMM_OP( addiw, x30, x12, 0x1000ffffe, 0x0000000000100000, -2, x2, 56, x8)

// rs1==x31, rd==x23, rs1_val == 2097152, 
// opcode: addiw ; op1:x31; dest:x23; op1val:0x0000000000200000;  immval:512
TEST_IMM_OP( addiw, x23, x31, 0x200200, 0x0000000000200000, 512, x2, 64, x8)

// rs1==x0, rd==x25, rs1_val == 4194304, 
// opcode: addiw ; op1:x0; dest:x25; op1val:0x0000000000400000;  immval:-4
TEST_IMM_OP( addiw, x25, x0, 0x1003ffffc, 0x0000000000400000, -4, x2, 72, x8)

// rs1_val == 8388608, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000000800000;  immval:-7
TEST_IMM_OP( addiw, x11, x10, 0x1007ffff9, 0x0000000000800000, -7, x2, 80, x8)

// rs1_val == 16777216, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000001000000;  immval:2
TEST_IMM_OP( addiw, x11, x10, 0x1000002, 0x0000000001000000, 2, x2, 88, x8)

// rs1_val == 33554432, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000002000000;  immval:2047
TEST_IMM_OP( addiw, x11, x10, 0x20007ff, 0x0000000002000000, 2047, x2, 96, x8)

// rs1_val == 67108864, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000004000000;  immval:3
TEST_IMM_OP( addiw, x11, x10, 0x4000003, 0x0000000004000000, 3, x2, 104, x8)

// rs1_val == 134217728, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000008000000;  immval:16
TEST_IMM_OP( addiw, x11, x10, 0x8000010, 0x0000000008000000, 16, x2, 112, x8)

// rs1_val == 268435456, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000010000000;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x10ffffffd, 0x0000000010000000, -3, x2, 120, x8)

// rs1_val == 536870912, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000020000000;  immval:8
TEST_IMM_OP( addiw, x11, x10, 0x20000008, 0x0000000020000000, 8, x2, 128, x8)

// rs1_val == 1073741824, imm_val == 64
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000040000000;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x40000040, 0x0000000040000000, 64, x2, 136, x8)

// rs1_val == 2147483648, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000080000000;  immval:1024
TEST_IMM_OP( addiw, x11, x10, 0x80000400, 0x0000000080000000, 1024, x2, 144, x8)

// rs1_val == 4294967296, imm_val == -33
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000100000000;  immval:-33
TEST_IMM_OP( addiw, x11, x10, 0xffffffdf, 0x0000000100000000, -33, x2, 152, x8)

// rs1_val == 8589934592, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000200000000;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0xfffffffc, 0x0000000200000000, -4, x2, 160, x8)

// rs1_val == 17179869184, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000400000000;  immval:7
TEST_IMM_OP( addiw, x11, x10, 0x7, 0x0000000400000000, 7, x2, 168, x8)

// rs1_val == 34359738368, imm_val == 128
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000800000000;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0x80, 0x0000000800000000, 128, x2, 176, x8)

// rs1_val == 68719476736, imm_val == 256
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000001000000000;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0x100, 0x0000001000000000, 256, x2, 184, x8)

// rs1_val == 137438953472, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000002000000000;  immval:2047
TEST_IMM_OP( addiw, x11, x10, 0x7ff, 0x0000002000000000, 2047, x2, 192, x8)

// rs1_val == 549755813888, imm_val == -1025
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000008000000000;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0xfffffbff, 0x0000008000000000, -1025, x2, 200, x8)

// rs1_val == 1099511627776, imm_val == 32
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000010000000000;  immval:32
TEST_IMM_OP( addiw, x11, x10, 0x20, 0x0000010000000000, 32, x2, 208, x8)

// rs1_val == 2199023255552, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000020000000000;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0x80, 0x0000020000000000, 128, x2, 216, x8)

// rs1_val == 4398046511104, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000040000000000;  immval:32
TEST_IMM_OP( addiw, x11, x10, 0x20, 0x0000040000000000, 32, x2, 224, x8)

// rs1_val == 8796093022208, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000080000000000;  immval:4
TEST_IMM_OP( addiw, x11, x10, 0x4, 0x0000080000000000, 4, x2, 232, x8)

// rs1_val == 17592186044416, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000100000000000;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0x200, 0x0000100000000000, 512, x2, 240, x8)

// rs1_val == 35184372088832, imm_val == -129
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000200000000000;  immval:-129
TEST_IMM_OP( addiw, x11, x10, 0xffffff7f, 0x0000200000000000, -129, x2, 248, x8)

// rs1_val == 70368744177664, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000400000000000;  immval:-1024
TEST_IMM_OP( addiw, x11, x10, 0xfffffc00, 0x0000400000000000, -1024, x2, 256, x8)

// rs1_val == 140737488355328, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000800000000000;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0xfffffbff, 0x0000800000000000, -1025, x2, 264, x8)

// rs1_val == 281474976710656, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0001000000000000;  immval:32
TEST_IMM_OP( addiw, x11, x10, 0x20, 0x0001000000000000, 32, x2, 272, x8)

// rs1_val == 562949953421312, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0002000000000000;  immval:-2048
TEST_IMM_OP( addiw, x11, x10, 0xfffff800, 0x0002000000000000, -2048, x2, 280, x8)

// rs1_val == 1125899906842624, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0004000000000000;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x40, 0x0004000000000000, 64, x2, 288, x8)

// rs1_val == 2251799813685248, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0008000000000000;  immval:-1024
TEST_IMM_OP( addiw, x11, x10, 0xfffffc00, 0x0008000000000000, -1024, x2, 296, x8)

// rs1_val == 4503599627370496, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0010000000000000;  immval:6
TEST_IMM_OP( addiw, x11, x10, 0x6, 0x0010000000000000, 6, x2, 304, x8)

// rs1_val == 9007199254740992, imm_val == 1365
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0020000000000000;  immval:1365
TEST_IMM_OP( addiw, x11, x10, 0x555, 0x0020000000000000, 1365, x2, 312, x8)

// rs1_val == 18014398509481984, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0040000000000000;  immval:1023
TEST_IMM_OP( addiw, x11, x10, 0x3ff, 0x0040000000000000, 1023, x2, 320, x8)

// rs1_val == 36028797018963968, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0080000000000000;  immval:2
TEST_IMM_OP( addiw, x11, x10, 0x2, 0x0080000000000000, 2, x2, 328, x8)

// rs1_val == 72057594037927936, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0100000000000000;  immval:-1024
TEST_IMM_OP( addiw, x11, x10, 0xfffffc00, 0x0100000000000000, -1024, x2, 336, x8)

// rs1_val == 144115188075855872, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0200000000000000;  immval:-6
TEST_IMM_OP( addiw, x11, x10, 0xfffffffa, 0x0200000000000000, -6, x2, 344, x8)

// rs1_val == 288230376151711744, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0400000000000000;  immval:1023
TEST_IMM_OP( addiw, x11, x10, 0x3ff, 0x0400000000000000, 1023, x2, 352, x8)

// rs1_val == 576460752303423488, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0800000000000000;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0x200, 0x0800000000000000, 512, x2, 360, x8)

// rs1_val == 1152921504606846976, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x1000000000000000;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0x200, 0x1000000000000000, 512, x2, 368, x8)

// rs1_val == 2305843009213693952, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x2000000000000000;  immval:-5
TEST_IMM_OP( addiw, x11, x10, 0xfffffffb, 0x2000000000000000, -5, x2, 376, x8)

// rs1_val == 4611686018427387904, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x4000000000000000;  immval:-33
TEST_IMM_OP( addiw, x11, x10, 0xffffffdf, 0x4000000000000000, -33, x2, 384, x8)

// rs1_val == -2251799813685249, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfff7ffffffffffff;  immval:32
TEST_IMM_OP( addiw, x11, x10, 0x10000001f, 0xfff7ffffffffffff, 32, x2, 392, x8)

// rs1_val == -9007199254740993, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffdfffffffffffff;  immval:8
TEST_IMM_OP( addiw, x11, x10, 0x100000007, 0xffdfffffffffffff, 8, x2, 400, x8)

// rs1_val == -18014398509481985, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffbfffffffffffff;  immval:8
TEST_IMM_OP( addiw, x11, x10, 0x100000007, 0xffbfffffffffffff, 8, x2, 408, x8)

// rs1_val == -36028797018963969, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xff7fffffffffffff;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffc, 0xff7fffffffffffff, -3, x2, 416, x8)

// rs1_val == -144115188075855873, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfdffffffffffffff;  immval:-7
TEST_IMM_OP( addiw, x11, x10, 0x1fffffff8, 0xfdffffffffffffff, -7, x2, 424, x8)

// rs1_val == -288230376151711745, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfbffffffffffffff;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffb, 0xfbffffffffffffff, -4, x2, 432, x8)

// rs1_val == -576460752303423489, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xf7ffffffffffffff;  immval:32
TEST_IMM_OP( addiw, x11, x10, 0x10000001f, 0xf7ffffffffffffff, 32, x2, 440, x8)

// rs1_val == -1152921504606846977, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xefffffffffffffff;  immval:-257
TEST_IMM_OP( addiw, x11, x10, 0x1fffffefe, 0xefffffffffffffff, -257, x2, 448, x8)

// rs1_val == -2305843009213693953, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xdfffffffffffffff;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0x1000001ff, 0xdfffffffffffffff, 512, x2, 456, x8)

// rs1_val == -4611686018427387905, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xbfffffffffffffff;  immval:3
TEST_IMM_OP( addiw, x11, x10, 0x100000002, 0xbfffffffffffffff, 3, x2, 464, x8)

// rs1_val == 6148914691236517205, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0x155555154, 0x5555555555555555, -1025, x2, 472, x8)

// rs1_val == -6148914691236517206, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xaaaaaaaaaaaaaaaa;  immval:6
TEST_IMM_OP( addiw, x11, x10, 0xaaaaaab0, 0xaaaaaaaaaaaaaaaa, 6, x2, 480, x8)

// imm_val == -17, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000000001000;  immval:-17
TEST_IMM_OP( addiw, x11, x10, 0x100000fef, 0x0000000000001000, -17, x2, 488, x8)

// imm_val == -513, rs1_val == -262145
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffbffff;  immval:-513
TEST_IMM_OP( addiw, x11, x10, 0x1fffbfdfe, 0xfffffffffffbffff, -513, x2, 496, x8)

// rs1_val == -2, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffffffe;  immval:-2048
TEST_IMM_OP( addiw, x11, x10, 0x1fffff7fe, 0xfffffffffffffffe, -2048, x2, 504, x8)

// rs1_val == -3, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffffffd;  immval:-257
TEST_IMM_OP( addiw, x11, x10, 0x1fffffefc, 0xfffffffffffffffd, -257, x2, 512, x8)

// rs1_val == -5, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffffffb;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x1fffffff8, 0xfffffffffffffffb, -3, x2, 520, x8)

// rs1_val == -9, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffffff7;  immval:-2
TEST_IMM_OP( addiw, x11, x10, 0x1fffffff5, 0xfffffffffffffff7, -2, x2, 528, x8)

// rs1_val == -17, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffffffef;  immval:1023
TEST_IMM_OP( addiw, x11, x10, 0x1000003ee, 0xffffffffffffffef, 1023, x2, 536, x8)

// rs1_val == -33, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffffffdf;  immval:-5
TEST_IMM_OP( addiw, x11, x10, 0x1ffffffda, 0xffffffffffffffdf, -5, x2, 544, x8)

// rs1_val == -65, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffffffbf;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffffa69, 0xffffffffffffffbf, -1366, x2, 552, x8)

// rs1_val == -129, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffffff7f;  immval:-1024
TEST_IMM_OP( addiw, x11, x10, 0x1fffffb7f, 0xffffffffffffff7f, -1024, x2, 560, x8)

// rs1_val == -513, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffffdff;  immval:4
TEST_IMM_OP( addiw, x11, x10, 0xfffffe03, 0xfffffffffffffdff, 4, x2, 568, x8)

// rs1_val == -1025, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffffbff;  immval:-8
TEST_IMM_OP( addiw, x11, x10, 0x1fffffbf7, 0xfffffffffffffbff, -8, x2, 576, x8)

// rs1_val == -2049, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffff7ff;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffff2a9, 0xfffffffffffff7ff, -1366, x2, 584, x8)

// rs1_val == -4097, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffffefff;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x1ffffeffc, 0xffffffffffffefff, -3, x2, 592, x8)

// rs1_val == -8193, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffffdfff;  immval:-33
TEST_IMM_OP( addiw, x11, x10, 0x1ffffdfde, 0xffffffffffffdfff, -33, x2, 600, x8)

// rs1_val == -16385, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffffbfff;  immval:1024
TEST_IMM_OP( addiw, x11, x10, 0xffffc3ff, 0xffffffffffffbfff, 1024, x2, 608, x8)

// rs1_val == -32769, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffff7fff;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0xffff807f, 0xffffffffffff7fff, 128, x2, 616, x8)

// rs1_val == -65537, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffeffff;  immval:9
TEST_IMM_OP( addiw, x11, x10, 0xffff0008, 0xfffffffffffeffff, 9, x2, 624, x8)

// rs1_val == -131073, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffffdffff;  immval:7
TEST_IMM_OP( addiw, x11, x10, 0xfffe0006, 0xfffffffffffdffff, 7, x2, 632, x8)

// rs1_val == -524289, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffff7ffff;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0xfff800ff, 0xfffffffffff7ffff, 256, x2, 640, x8)

// rs1_val == -1048577, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffefffff;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0xfff001ff, 0xffffffffffefffff, 512, x2, 648, x8)

// rs1_val == -2097153, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffdfffff;  immval:-7
TEST_IMM_OP( addiw, x11, x10, 0x1ffdffff8, 0xffffffffffdfffff, -7, x2, 656, x8)

// rs1_val == -4194305, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffffbfffff;  immval:-513
TEST_IMM_OP( addiw, x11, x10, 0x1ffbffdfe, 0xffffffffffbfffff, -513, x2, 664, x8)

// rs1_val == -8388609, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffff7fffff;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0xff80007f, 0xffffffffff7fffff, 128, x2, 672, x8)

// rs1_val == -16777217, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffeffffff;  immval:1
TEST_IMM_OP( addiw, x11, x10, 0xff000000, 0xfffffffffeffffff, 1, x2, 680, x8)

// rs1_val == -33554433, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffdffffff;  immval:-7
TEST_IMM_OP( addiw, x11, x10, 0x1fdfffff8, 0xfffffffffdffffff, -7, x2, 688, x8)

// rs1_val == -67108865, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffffbffffff;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0xfc00007f, 0xfffffffffbffffff, 128, x2, 696, x8)

// rs1_val == -134217729, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffff7ffffff;  immval:5
TEST_IMM_OP( addiw, x11, x10, 0xf8000004, 0xfffffffff7ffffff, 5, x2, 704, x8)

// rs1_val == -268435457, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffefffffff;  immval:-2048
TEST_IMM_OP( addiw, x11, x10, 0x1effff7ff, 0xffffffffefffffff, -2048, x2, 712, x8)

// rs1_val == -536870913, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffdfffffff;  immval:-17
TEST_IMM_OP( addiw, x11, x10, 0x1dfffffee, 0xffffffffdfffffff, -17, x2, 720, x8)

// rs1_val == -1073741825, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffffbfffffff;  immval:3
TEST_IMM_OP( addiw, x11, x10, 0xc0000002, 0xffffffffbfffffff, 3, x2, 728, x8)

// rs1_val == -2147483649, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffff7fffffff;  immval:0
TEST_IMM_OP( addiw, x11, x10, 0x7fffffff, 0xffffffff7fffffff, 0, x2, 736, x8)

// rs1_val == -4294967297, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffeffffffff;  immval:5
TEST_IMM_OP( addiw, x11, x10, 0x100000004, 0xfffffffeffffffff, 5, x2, 744, x8)

// rs1_val == -8589934593, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffdffffffff;  immval:5
TEST_IMM_OP( addiw, x11, x10, 0x100000004, 0xfffffffdffffffff, 5, x2, 752, x8)

// rs1_val == -17179869185, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffffbffffffff;  immval:-129
TEST_IMM_OP( addiw, x11, x10, 0x1ffffff7e, 0xfffffffbffffffff, -129, x2, 760, x8)

// rs1_val == -34359738369, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffff7ffffffff;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0x1000000ff, 0xfffffff7ffffffff, 256, x2, 768, x8)

// rs1_val == -68719476737, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffefffffffff;  immval:9
TEST_IMM_OP( addiw, x11, x10, 0x100000008, 0xffffffefffffffff, 9, x2, 776, x8)

// rs1_val == -137438953473, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffdfffffffff;  immval:2
TEST_IMM_OP( addiw, x11, x10, 0x100000001, 0xffffffdfffffffff, 2, x2, 784, x8)

// rs1_val == -274877906945, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffffbfffffffff;  immval:6
TEST_IMM_OP( addiw, x11, x10, 0x100000005, 0xffffffbfffffffff, 6, x2, 792, x8)

// rs1_val == -549755813889, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffff7fffffffff;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0x1000000ff, 0xffffff7fffffffff, 256, x2, 800, x8)

// rs1_val == -2199023255553, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffdffffffffff;  immval:-513
TEST_IMM_OP( addiw, x11, x10, 0x1fffffdfe, 0xfffffdffffffffff, -513, x2, 808, x8)

// rs1_val == -4398046511105, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffffbffffffffff;  immval:-257
TEST_IMM_OP( addiw, x11, x10, 0x1fffffefe, 0xfffffbffffffffff, -257, x2, 816, x8)

// rs1_val == -8796093022209, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffff7ffffffffff;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffffaa9, 0xfffff7ffffffffff, -1366, x2, 824, x8)

// rs1_val == -17592186044417, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffefffffffffff;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x10000003f, 0xffffefffffffffff, 64, x2, 832, x8)

// rs1_val == -35184372088833, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffdfffffffffff;  immval:2
TEST_IMM_OP( addiw, x11, x10, 0x100000001, 0xffffdfffffffffff, 2, x2, 840, x8)

// rs1_val == -70368744177665, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffffbfffffffffff;  immval:16
TEST_IMM_OP( addiw, x11, x10, 0x10000000f, 0xffffbfffffffffff, 16, x2, 848, x8)

// rs1_val == -140737488355329, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xffff7fffffffffff;  immval:7
TEST_IMM_OP( addiw, x11, x10, 0x100000006, 0xffff7fffffffffff, 7, x2, 856, x8)

// rs1_val == -281474976710657, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffeffffffffffff;  immval:1365
TEST_IMM_OP( addiw, x11, x10, 0x100000554, 0xfffeffffffffffff, 1365, x2, 864, x8)

// rs1_val == -562949953421313, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffdffffffffffff;  immval:-2048
TEST_IMM_OP( addiw, x11, x10, 0x1fffff7ff, 0xfffdffffffffffff, -2048, x2, 872, x8)

// rs1_val == -1125899906842625, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0xfffbffffffffffff;  immval:-10
TEST_IMM_OP( addiw, x11, x10, 0x1fffffff5, 0xfffbffffffffffff, -10, x2, 880, x8)

// rs1_val > 0 and imm_val < 0, imm_val == -257, rs1_val == 274877906944
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000004000000000;  immval:-257
TEST_IMM_OP( addiw, x11, x10, 0xfffffeff, 0x0000004000000000, -257, x2, 888, x8)

// rs1_val == 4194304, 
// opcode: addiw ; op1:x10; dest:x11; op1val:0x0000000000400000;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x1003ffffc, 0x0000000000400000, -4, x2, 896, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 113*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
