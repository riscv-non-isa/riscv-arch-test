 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the addiw instruction of the RISC-V I extension for the addiw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",addiw)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs1 == rd, rs1==x6, rd==x6, rs1_val == imm_val, rs1_val == -33, rs1_val < 0 and imm_val < 0, imm_val == -33
// opcode: addiw ; op1:x6; dest:x6; op1val:-33;  immval:-33
TEST_IMM_OP( addiw, x6, x6, 0x1ffffffbe, -33, -33, x10, 0, x5)

inst_1:
// rs1 != rd, rs1==x8, rd==x0, rs1_val != imm_val, rs1_val == -2049, rs1_val < 0 and imm_val > 0, imm_val == 1024
// opcode: addiw ; op1:x8; dest:x0; op1val:-2049;  immval:1024
TEST_IMM_OP( addiw, x0, x8, 0xfffffbff, -2049, 1024, x10, 8, x5)

inst_2:
// rs1==x18, rd==x31, rs1_val > 0 and imm_val > 0, rs1_val == 72057594037927936, imm_val == 2
// opcode: addiw ; op1:x18; dest:x31; op1val:72057594037927936;  immval:2
TEST_IMM_OP( addiw, x31, x18, 0x2, 72057594037927936, 2, x10, 16, x5)

inst_3:
// rs1==x17, rd==x1, rs1_val > 0 and imm_val < 0, rs1_val == 137438953472
// opcode: addiw ; op1:x17; dest:x1; op1val:137438953472;  immval:-4
TEST_IMM_OP( addiw, x1, x17, 0xfffffffc, 137438953472, -4, x10, 24, x5)

inst_4:
// rs1==x22, rd==x4, rs1_val == (-2**(xlen-1)), imm_val == 4, rs1_val == -9223372036854775808
// opcode: addiw ; op1:x22; dest:x4; op1val:-9223372036854775808;  immval:4
TEST_IMM_OP( addiw, x4, x22, 0x4, -9223372036854775808, 4, x10, 32, x5)

inst_5:
// rs1==x24, rd==x28, rs1_val == 0, 
// opcode: addiw ; op1:x24; dest:x28; op1val:0;  immval:5
TEST_IMM_OP( addiw, x28, x24, 0x5, 0, 5, x10, 40, x5)

inst_6:
// rs1==x0, rd==x2, rs1_val == (2**(xlen-1)-1), imm_val == -2048, imm_val == (-2**(12-1)), rs1_val == 9223372036854775807
// opcode: addiw ; op1:x0; dest:x2; op1val:9223372036854775807;  immval:-2048
TEST_IMM_OP( addiw, x2, x0, 0x1fffff7ff, 9223372036854775807, -2048, x10, 48, x5)

inst_7:
// rs1==x11, rd==x30, rs1_val == 1, 
// opcode: addiw ; op1:x11; dest:x30; op1val:1;  immval:3
TEST_IMM_OP( addiw, x30, x11, 0x4, 1, 3, x10, 56, x5)

inst_8:
// rs1==x30, rd==x14, imm_val == 0, rs1_val == 562949953421312
// opcode: addiw ; op1:x30; dest:x14; op1val:562949953421312;  immval:0
TEST_IMM_OP( addiw, x14, x30, 0x0, 562949953421312, 0, x10, 64, x5)

inst_9:
// rs1==x13, rd==x21, imm_val == (2**(12-1)-1), imm_val == 2047
// opcode: addiw ; op1:x13; dest:x21; op1val:-10;  immval:2047
TEST_IMM_OP( addiw, x21, x13, 0x1000007f5, -10, 2047, x10, 72, x5)

inst_10:
// rs1==x15, rd==x7, imm_val == 1, rs1_val == 268435456
// opcode: addiw ; op1:x15; dest:x7; op1val:268435456;  immval:1
TEST_IMM_OP( addiw, x7, x15, 0x10000001, 268435456, 1, x10, 80, x5)

inst_11:
// rs1==x28, rd==x20, rs1_val == 2, imm_val == -513
// opcode: addiw ; op1:x28; dest:x20; op1val:2;  immval:-513
TEST_IMM_OP( addiw, x20, x28, 0xfffffe01, 2, -513, x10, 88, x5)

inst_12:
// rs1==x7, rd==x15, rs1_val == 4, 
// opcode: addiw ; op1:x7; dest:x15; op1val:4;  immval:9
TEST_IMM_OP( addiw, x15, x7, 0xd, 4, 9, x10, 96, x5)

inst_13:
// rs1==x27, rd==x3, rs1_val == 8, imm_val == -65
// opcode: addiw ; op1:x27; dest:x3; op1val:8;  immval:-65
TEST_IMM_OP( addiw, x3, x27, 0xffffffc7, 8, -65, x10, 104, x5)

inst_14:
// rs1==x25, rd==x17, rs1_val == 16, 
// opcode: addiw ; op1:x25; dest:x17; op1val:16;  immval:2047
TEST_IMM_OP( addiw, x17, x25, 0x80f, 16, 2047, x10, 112, x5)

inst_15:
// rs1==x21, rd==x13, rs1_val == 32, 
// opcode: addiw ; op1:x21; dest:x13; op1val:32;  immval:-33
TEST_IMM_OP( addiw, x13, x21, 0xffffffff, 32, -33, x10, 120, x5)

inst_16:
// rs1==x19, rd==x11, rs1_val == 64, 
// opcode: addiw ; op1:x19; dest:x11; op1val:64;  immval:0
TEST_IMM_OP( addiw, x11, x19, 0x40, 64, 0, x10, 128, x5)

inst_17:
// rs1==x9, rd==x29, rs1_val == 128, 
// opcode: addiw ; op1:x9; dest:x29; op1val:128;  immval:-1024
TEST_IMM_OP( addiw, x29, x9, 0xfffffc80, 128, -1024, x10, 136, x5)

inst_18:
// rs1==x16, rd==x19, rs1_val == 256, 
// opcode: addiw ; op1:x16; dest:x19; op1val:256;  immval:-513
TEST_IMM_OP( addiw, x19, x16, 0xfffffeff, 256, -513, x10, 144, x5)

inst_19:
// rs1==x23, rd==x16, rs1_val == 512, imm_val == 256
// opcode: addiw ; op1:x23; dest:x16; op1val:512;  immval:256
TEST_IMM_OP( addiw, x16, x23, 0x300, 512, 256, x10, 152, x5)

inst_20:
// rs1==x5, rd==x26, rs1_val == 1024, imm_val == -9
// opcode: addiw ; op1:x5; dest:x26; op1val:1024;  immval:-9
TEST_IMM_OP( addiw, x26, x5, 0x1000003f7, 1024, -9, x10, 160, x7)
RVTEST_SIGBASE( x6,signature_x6_0)

inst_21:
// rs1==x20, rd==x18, rs1_val == 2048, 
// opcode: addiw ; op1:x20; dest:x18; op1val:2048;  immval:-8
TEST_IMM_OP( addiw, x18, x20, 0x1000007f8, 2048, -8, x6, 0, x7)

inst_22:
// rs1==x31, rd==x24, rs1_val == 4096, 
// opcode: addiw ; op1:x31; dest:x24; op1val:4096;  immval:4
TEST_IMM_OP( addiw, x24, x31, 0x1004, 4096, 4, x6, 8, x7)

inst_23:
// rs1==x3, rd==x22, rs1_val == 8192, 
// opcode: addiw ; op1:x3; dest:x22; op1val:8192;  immval:-7
TEST_IMM_OP( addiw, x22, x3, 0x100001ff9, 8192, -7, x6, 16, x7)

inst_24:
// rs1==x2, rd==x8, rs1_val == 16384, 
// opcode: addiw ; op1:x2; dest:x8; op1val:16384;  immval:4
TEST_IMM_OP( addiw, x8, x2, 0x4004, 16384, 4, x6, 24, x7)

inst_25:
// rs1==x29, rd==x5, rs1_val == 32768, imm_val == -1025
// opcode: addiw ; op1:x29; dest:x5; op1val:32768;  immval:-1025
TEST_IMM_OP( addiw, x5, x29, 0x100007bff, 32768, -1025, x6, 32, x7)

inst_26:
// rs1==x4, rd==x12, rs1_val == 65536, 
// opcode: addiw ; op1:x4; dest:x12; op1val:65536;  immval:0
TEST_IMM_OP( addiw, x12, x4, 0x10000, 65536, 0, x6, 40, x7)

inst_27:
// rs1==x12, rd==x10, rs1_val == 131072, imm_val == -17
// opcode: addiw ; op1:x12; dest:x10; op1val:131072;  immval:-17
TEST_IMM_OP( addiw, x10, x12, 0x10001ffef, 131072, -17, x6, 48, x7)

inst_28:
// rs1==x14, rd==x23, rs1_val == 262144, 
// opcode: addiw ; op1:x14; dest:x23; op1val:262144;  immval:-33
TEST_IMM_OP( addiw, x23, x14, 0x10003ffdf, 262144, -33, x6, 56, x7)

inst_29:
// rs1==x10, rd==x25, rs1_val == 524288, 
// opcode: addiw ; op1:x10; dest:x25; op1val:524288;  immval:1
TEST_IMM_OP( addiw, x25, x10, 0x80001, 524288, 1, x6, 64, x7)

inst_30:
// rs1==x26, rd==x9, rs1_val == 1048576, 
// opcode: addiw ; op1:x26; dest:x9; op1val:1048576;  immval:256
TEST_IMM_OP( addiw, x9, x26, 0x100100, 1048576, 256, x6, 72, x7)

inst_31:
// rs1==x1, rd==x27, rs1_val == 2097152, 
// opcode: addiw ; op1:x1; dest:x27; op1val:2097152;  immval:-9
TEST_IMM_OP( addiw, x27, x1, 0x1001ffff7, 2097152, -9, x6, 80, x7)

inst_32:
// rs1_val == 4194304, imm_val == 64
// opcode: addiw ; op1:x10; dest:x11; op1val:4194304;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x400040, 4194304, 64, x6, 88, x7)

inst_33:
// rs1_val == 8388608, imm_val == 128
// opcode: addiw ; op1:x10; dest:x11; op1val:8388608;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0x800080, 8388608, 128, x6, 96, x7)

inst_34:
// rs1_val == 16777216, 
// opcode: addiw ; op1:x10; dest:x11; op1val:16777216;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0x1000080, 16777216, 128, x6, 104, x7)

inst_35:
// rs1_val == 33554432, 
// opcode: addiw ; op1:x10; dest:x11; op1val:33554432;  immval:2047
TEST_IMM_OP( addiw, x11, x10, 0x20007ff, 33554432, 2047, x6, 112, x7)

inst_36:
// rs1_val == 67108864, imm_val == 512
// opcode: addiw ; op1:x10; dest:x11; op1val:67108864;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0x4000200, 67108864, 512, x6, 120, x7)

inst_37:
// rs1_val == 134217728, imm_val == -1366
// opcode: addiw ; op1:x10; dest:x11; op1val:134217728;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x107fffaaa, 134217728, -1366, x6, 128, x7)

inst_38:
// rs1_val == 536870912, 
// opcode: addiw ; op1:x10; dest:x11; op1val:536870912;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x11ffffffc, 536870912, -4, x6, 136, x7)

inst_39:
// rs1_val == 1073741824, 
// opcode: addiw ; op1:x10; dest:x11; op1val:1073741824;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x40000040, 1073741824, 64, x6, 144, x7)

inst_40:
// rs1_val == 2147483648, 
// opcode: addiw ; op1:x10; dest:x11; op1val:2147483648;  immval:-8
TEST_IMM_OP( addiw, x11, x10, 0x17ffffff8, 2147483648, -8, x6, 152, x7)

inst_41:
// rs1_val == 4294967296, imm_val == -129
// opcode: addiw ; op1:x10; dest:x11; op1val:4294967296;  immval:-129
TEST_IMM_OP( addiw, x11, x10, 0xffffff7f, 4294967296, -129, x6, 160, x7)

inst_42:
// rs1_val == 8589934592, 
// opcode: addiw ; op1:x10; dest:x11; op1val:8589934592;  immval:1023
TEST_IMM_OP( addiw, x11, x10, 0x3ff, 8589934592, 1023, x6, 168, x7)

inst_43:
// rs1_val == 17179869184, 
// opcode: addiw ; op1:x10; dest:x11; op1val:17179869184;  immval:2047
TEST_IMM_OP( addiw, x11, x10, 0x7ff, 17179869184, 2047, x6, 176, x7)

inst_44:
// rs1_val == 34359738368, 
// opcode: addiw ; op1:x10; dest:x11; op1val:34359738368;  immval:1
TEST_IMM_OP( addiw, x11, x10, 0x1, 34359738368, 1, x6, 184, x7)

inst_45:
// rs1_val == 68719476736, 
// opcode: addiw ; op1:x10; dest:x11; op1val:68719476736;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0x100, 68719476736, 256, x6, 192, x7)

inst_46:
// rs1_val == 274877906944, 
// opcode: addiw ; op1:x10; dest:x11; op1val:274877906944;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0xfffffffc, 274877906944, -4, x6, 200, x7)

inst_47:
// rs1_val == 549755813888, 
// opcode: addiw ; op1:x10; dest:x11; op1val:549755813888;  immval:6
TEST_IMM_OP( addiw, x11, x10, 0x6, 549755813888, 6, x6, 208, x7)

inst_48:
// rs1_val == 1099511627776, 
// opcode: addiw ; op1:x10; dest:x11; op1val:1099511627776;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0xfffffbff, 1099511627776, -1025, x6, 216, x7)

inst_49:
// rs1_val == 2199023255552, imm_val == 1365
// opcode: addiw ; op1:x10; dest:x11; op1val:2199023255552;  immval:1365
TEST_IMM_OP( addiw, x11, x10, 0x555, 2199023255552, 1365, x6, 224, x7)

inst_50:
// rs1_val == 4398046511104, 
// opcode: addiw ; op1:x10; dest:x11; op1val:4398046511104;  immval:4
TEST_IMM_OP( addiw, x11, x10, 0x4, 4398046511104, 4, x6, 232, x7)

inst_51:
// rs1_val == 8796093022208, 
// opcode: addiw ; op1:x10; dest:x11; op1val:8796093022208;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x40, 8796093022208, 64, x6, 240, x7)

inst_52:
// rs1_val == 17592186044416, 
// opcode: addiw ; op1:x10; dest:x11; op1val:17592186044416;  immval:7
TEST_IMM_OP( addiw, x11, x10, 0x7, 17592186044416, 7, x6, 248, x7)

inst_53:
// rs1_val == 35184372088832, 
// opcode: addiw ; op1:x10; dest:x11; op1val:35184372088832;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0x80, 35184372088832, 128, x6, 256, x7)

inst_54:
// rs1_val == 70368744177664, 
// opcode: addiw ; op1:x10; dest:x11; op1val:70368744177664;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0xfffffbff, 70368744177664, -1025, x6, 264, x7)

inst_55:
// rs1_val == 140737488355328, 
// opcode: addiw ; op1:x10; dest:x11; op1val:140737488355328;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0xfffffffc, 140737488355328, -4, x6, 272, x7)

inst_56:
// rs1_val == 281474976710656, 
// opcode: addiw ; op1:x10; dest:x11; op1val:281474976710656;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x40, 281474976710656, 64, x6, 280, x7)

inst_57:
// rs1_val == 1125899906842624, 
// opcode: addiw ; op1:x10; dest:x11; op1val:1125899906842624;  immval:64
TEST_IMM_OP( addiw, x11, x10, 0x40, 1125899906842624, 64, x6, 288, x7)

inst_58:
// rs1_val == 2251799813685248, 
// opcode: addiw ; op1:x10; dest:x11; op1val:2251799813685248;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0x100, 2251799813685248, 256, x6, 296, x7)

inst_59:
// rs1_val == 4503599627370496, 
// opcode: addiw ; op1:x10; dest:x11; op1val:4503599627370496;  immval:-513
TEST_IMM_OP( addiw, x11, x10, 0xfffffdff, 4503599627370496, -513, x6, 304, x7)

inst_60:
// rs1_val == 9007199254740992, 
// opcode: addiw ; op1:x10; dest:x11; op1val:9007199254740992;  immval:5
TEST_IMM_OP( addiw, x11, x10, 0x5, 9007199254740992, 5, x6, 312, x7)

inst_61:
// rs1_val == 18014398509481984, 
// opcode: addiw ; op1:x10; dest:x11; op1val:18014398509481984;  immval:0
TEST_IMM_OP( addiw, x11, x10, 0x0, 18014398509481984, 0, x6, 320, x7)

inst_62:
// rs1_val == 36028797018963968, 
// opcode: addiw ; op1:x10; dest:x11; op1val:36028797018963968;  immval:4
TEST_IMM_OP( addiw, x11, x10, 0x4, 36028797018963968, 4, x6, 328, x7)

inst_63:
// rs1_val == 144115188075855872, 
// opcode: addiw ; op1:x10; dest:x11; op1val:144115188075855872;  immval:2047
TEST_IMM_OP( addiw, x11, x10, 0x7ff, 144115188075855872, 2047, x6, 336, x7)

inst_64:
// rs1_val == 288230376151711744, 
// opcode: addiw ; op1:x10; dest:x11; op1val:288230376151711744;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0xfffffaaa, 288230376151711744, -1366, x6, 344, x7)

inst_65:
// rs1_val == 576460752303423488, 
// opcode: addiw ; op1:x10; dest:x11; op1val:576460752303423488;  immval:128
TEST_IMM_OP( addiw, x11, x10, 0x80, 576460752303423488, 128, x6, 352, x7)

inst_66:
// rs1_val == 1152921504606846976, 
// opcode: addiw ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:2
TEST_IMM_OP( addiw, x11, x10, 0x2, 1152921504606846976, 2, x6, 360, x7)

inst_67:
// rs1_val == 2305843009213693952, 
// opcode: addiw ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:1023
TEST_IMM_OP( addiw, x11, x10, 0x3ff, 2305843009213693952, 1023, x6, 368, x7)

inst_68:
// rs1_val == 4611686018427387904, 
// opcode: addiw ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0xfffffbff, 4611686018427387904, -1025, x6, 376, x7)

inst_69:
// rs1_val == -2, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-2;  immval:1024
TEST_IMM_OP( addiw, x11, x10, 0x1000003fe, -2, 1024, x6, 384, x7)

inst_70:
// rs1_val == -3, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-3;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0x1000000fd, -3, 256, x6, 392, x7)

inst_71:
// rs1_val == -5, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-5;  immval:-17
TEST_IMM_OP( addiw, x11, x10, 0x1ffffffea, -5, -17, x6, 400, x7)

inst_72:
// rs1_val == -9, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-9;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0x1fffffbf6, -9, -1025, x6, 408, x7)

inst_73:
// rs1_val == -17, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-17;  immval:1023
TEST_IMM_OP( addiw, x11, x10, 0x1000003ee, -17, 1023, x6, 416, x7)

inst_74:
// rs1_val == -65, imm_val == 16
// opcode: addiw ; op1:x10; dest:x11; op1val:-65;  immval:16
TEST_IMM_OP( addiw, x11, x10, 0xffffffcf, -65, 16, x6, 424, x7)

inst_75:
// rs1_val == -129, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-129;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0x10000017f, -129, 512, x6, 432, x7)

inst_76:
// rs1_val == -2251799813685249, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-2251799813685249;  immval:3
TEST_IMM_OP( addiw, x11, x10, 0x100000002, -2251799813685249, 3, x6, 440, x7)

inst_77:
// rs1_val == -4503599627370497, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-4503599627370497;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffffaa9, -4503599627370497, -1366, x6, 448, x7)

inst_78:
// rs1_val == -9007199254740993, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-9007199254740993;  immval:1024
TEST_IMM_OP( addiw, x11, x10, 0x1000003ff, -9007199254740993, 1024, x6, 456, x7)

inst_79:
// rs1_val == -18014398509481985, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-18014398509481985;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffb, -18014398509481985, -4, x6, 464, x7)

inst_80:
// rs1_val == -36028797018963969, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-36028797018963969;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffffaa9, -36028797018963969, -1366, x6, 472, x7)

inst_81:
// rs1_val == -72057594037927937, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-72057594037927937;  immval:3
TEST_IMM_OP( addiw, x11, x10, 0x100000002, -72057594037927937, 3, x6, 480, x7)

inst_82:
// rs1_val == -144115188075855873, imm_val == -2
// opcode: addiw ; op1:x10; dest:x11; op1val:-144115188075855873;  immval:-2
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffd, -144115188075855873, -2, x6, 488, x7)

inst_83:
// rs1_val == -288230376151711745, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-288230376151711745;  immval:9
TEST_IMM_OP( addiw, x11, x10, 0x100000008, -288230376151711745, 9, x6, 496, x7)

inst_84:
// rs1_val == -576460752303423489, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-576460752303423489;  immval:-10
TEST_IMM_OP( addiw, x11, x10, 0x1fffffff5, -576460752303423489, -10, x6, 504, x7)

inst_85:
// rs1_val == -1152921504606846977, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-1152921504606846977;  immval:-33
TEST_IMM_OP( addiw, x11, x10, 0x1ffffffde, -1152921504606846977, -33, x6, 512, x7)

inst_86:
// rs1_val == -2305843009213693953, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-2305843009213693953;  immval:-1025
TEST_IMM_OP( addiw, x11, x10, 0x1fffffbfe, -2305843009213693953, -1025, x6, 520, x7)

inst_87:
// rs1_val == -4611686018427387905, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-4611686018427387905;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffb, -4611686018427387905, -4, x6, 528, x7)

inst_88:
// rs1_val == 6148914691236517205, 
// opcode: addiw ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:-8
TEST_IMM_OP( addiw, x11, x10, 0x15555554d, 6148914691236517205, -8, x6, 536, x7)

inst_89:
// rs1_val == -6148914691236517206, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:-129
TEST_IMM_OP( addiw, x11, x10, 0x1aaaaaa29, -6148914691236517206, -129, x6, 544, x7)

inst_90:
// imm_val == 8, 
// opcode: addiw ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:8
TEST_IMM_OP( addiw, x11, x10, 0x8, 1152921504606846976, 8, x6, 552, x7)

inst_91:
// imm_val == 32, 
// opcode: addiw ; op1:x10; dest:x11; op1val:1073741824;  immval:32
TEST_IMM_OP( addiw, x11, x10, 0x40000020, 1073741824, 32, x6, 560, x7)

inst_92:
// imm_val == -3, 
// opcode: addiw ; op1:x10; dest:x11; op1val:8388608;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x1007ffffd, 8388608, -3, x6, 568, x7)

inst_93:
// imm_val == -5, 
// opcode: addiw ; op1:x10; dest:x11; op1val:16384;  immval:-5
TEST_IMM_OP( addiw, x11, x10, 0x100003ffb, 16384, -5, x6, 576, x7)

inst_94:
// imm_val == -257, rs1_val == -16385
// opcode: addiw ; op1:x10; dest:x11; op1val:-16385;  immval:-257
TEST_IMM_OP( addiw, x11, x10, 0x1ffffbefe, -16385, -257, x6, 584, x7)

inst_95:
// rs1_val == -257, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-257;  immval:7
TEST_IMM_OP( addiw, x11, x10, 0xffffff06, -257, 7, x6, 592, x7)

inst_96:
// rs1_val == -513, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-513;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffff8a9, -513, -1366, x6, 600, x7)

inst_97:
// rs1_val == -1025, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-1025;  immval:0
TEST_IMM_OP( addiw, x11, x10, 0xfffffbff, -1025, 0, x6, 608, x7)

inst_98:
// rs1_val == -4097, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-4097;  immval:5
TEST_IMM_OP( addiw, x11, x10, 0xfffff004, -4097, 5, x6, 616, x7)

inst_99:
// rs1_val == -8193, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-8193;  immval:-257
TEST_IMM_OP( addiw, x11, x10, 0x1ffffdefe, -8193, -257, x6, 624, x7)

inst_100:
// rs1_val == -32769, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-32769;  immval:2
TEST_IMM_OP( addiw, x11, x10, 0xffff8001, -32769, 2, x6, 632, x7)

inst_101:
// rs1_val == -65537, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-65537;  immval:-513
TEST_IMM_OP( addiw, x11, x10, 0x1fffefdfe, -65537, -513, x6, 640, x7)

inst_102:
// rs1_val == -131073, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-131073;  immval:-1024
TEST_IMM_OP( addiw, x11, x10, 0x1fffdfbff, -131073, -1024, x6, 648, x7)

inst_103:
// rs1_val == -262145, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-262145;  immval:5
TEST_IMM_OP( addiw, x11, x10, 0xfffc0004, -262145, 5, x6, 656, x7)

inst_104:
// rs1_val == -524289, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-524289;  immval:-1
TEST_IMM_OP( addiw, x11, x10, 0x1fff7fffe, -524289, -1, x6, 664, x7)

inst_105:
// rs1_val == -1048577, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-1048577;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0xfff000ff, -1048577, 256, x6, 672, x7)

inst_106:
// rs1_val == -2097153, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-2097153;  immval:-6
TEST_IMM_OP( addiw, x11, x10, 0x1ffdffff9, -2097153, -6, x6, 680, x7)

inst_107:
// rs1_val == -4194305, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-4194305;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1ffbffaa9, -4194305, -1366, x6, 688, x7)

inst_108:
// rs1_val == -8388609, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-8388609;  immval:-10
TEST_IMM_OP( addiw, x11, x10, 0x1ff7ffff5, -8388609, -10, x6, 696, x7)

inst_109:
// rs1_val == -16777217, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-16777217;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x1fefffffb, -16777217, -4, x6, 704, x7)

inst_110:
// rs1_val == -33554433, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-33554433;  immval:0
TEST_IMM_OP( addiw, x11, x10, 0xfdffffff, -33554433, 0, x6, 712, x7)

inst_111:
// rs1_val == -67108865, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-67108865;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x1fbfffffc, -67108865, -3, x6, 720, x7)

inst_112:
// rs1_val == -134217729, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-134217729;  immval:8
TEST_IMM_OP( addiw, x11, x10, 0xf8000007, -134217729, 8, x6, 728, x7)

inst_113:
// rs1_val == -268435457, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-268435457;  immval:-2048
TEST_IMM_OP( addiw, x11, x10, 0x1effff7ff, -268435457, -2048, x6, 736, x7)

inst_114:
// rs1_val == -536870913, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-536870913;  immval:2047
TEST_IMM_OP( addiw, x11, x10, 0xe00007fe, -536870913, 2047, x6, 744, x7)

inst_115:
// rs1_val == -1073741825, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-1073741825;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x1bffffffc, -1073741825, -3, x6, 752, x7)

inst_116:
// rs1_val == -2147483649, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-2147483649;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x17ffffffc, -2147483649, -3, x6, 760, x7)

inst_117:
// rs1_val == -4294967297, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-4294967297;  immval:-129
TEST_IMM_OP( addiw, x11, x10, 0x1ffffff7e, -4294967297, -129, x6, 768, x7)

inst_118:
// rs1_val == -8589934593, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-8589934593;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffffaa9, -8589934593, -1366, x6, 776, x7)

inst_119:
// rs1_val == -17179869185, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-17179869185;  immval:-3
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffc, -17179869185, -3, x6, 784, x7)

inst_120:
// rs1_val == -34359738369, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-34359738369;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffb, -34359738369, -4, x6, 792, x7)

inst_121:
// rs1_val == -68719476737, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-68719476737;  immval:256
TEST_IMM_OP( addiw, x11, x10, 0x1000000ff, -68719476737, 256, x6, 800, x7)

inst_122:
// rs1_val == -137438953473, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-137438953473;  immval:1
TEST_IMM_OP( addiw, x11, x10, 0x100000000, -137438953473, 1, x6, 808, x7)

inst_123:
// rs1_val == -274877906945, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-274877906945;  immval:2047
TEST_IMM_OP( addiw, x11, x10, 0x1000007fe, -274877906945, 2047, x6, 816, x7)

inst_124:
// rs1_val == -549755813889, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-549755813889;  immval:512
TEST_IMM_OP( addiw, x11, x10, 0x1000001ff, -549755813889, 512, x6, 824, x7)

inst_125:
// rs1_val == -1099511627777, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-1099511627777;  immval:1023
TEST_IMM_OP( addiw, x11, x10, 0x1000003fe, -1099511627777, 1023, x6, 832, x7)

inst_126:
// rs1_val == -2199023255553, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-2199023255553;  immval:0
TEST_IMM_OP( addiw, x11, x10, 0xffffffff, -2199023255553, 0, x6, 840, x7)

inst_127:
// rs1_val == -4398046511105, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-4398046511105;  immval:-6
TEST_IMM_OP( addiw, x11, x10, 0x1fffffff9, -4398046511105, -6, x6, 848, x7)

inst_128:
// rs1_val == -8796093022209, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-8796093022209;  immval:-4
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffb, -8796093022209, -4, x6, 856, x7)

inst_129:
// rs1_val == -17592186044417, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-17592186044417;  immval:-33
TEST_IMM_OP( addiw, x11, x10, 0x1ffffffde, -17592186044417, -33, x6, 864, x7)

inst_130:
// rs1_val == -35184372088833, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-35184372088833;  immval:-1
TEST_IMM_OP( addiw, x11, x10, 0x1fffffffe, -35184372088833, -1, x6, 872, x7)

inst_131:
// rs1_val == -70368744177665, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-70368744177665;  immval:1365
TEST_IMM_OP( addiw, x11, x10, 0x100000554, -70368744177665, 1365, x6, 880, x7)

inst_132:
// rs1_val == -140737488355329, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-140737488355329;  immval:1
TEST_IMM_OP( addiw, x11, x10, 0x100000000, -140737488355329, 1, x6, 888, x7)

inst_133:
// rs1_val == -281474976710657, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-281474976710657;  immval:3
TEST_IMM_OP( addiw, x11, x10, 0x100000002, -281474976710657, 3, x6, 896, x7)

inst_134:
// rs1_val == -562949953421313, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-562949953421313;  immval:-17
TEST_IMM_OP( addiw, x11, x10, 0x1ffffffee, -562949953421313, -17, x6, 904, x7)

inst_135:
// rs1_val == -1125899906842625, 
// opcode: addiw ; op1:x10; dest:x11; op1val:-1125899906842625;  immval:-1366
TEST_IMM_OP( addiw, x11, x10, 0x1fffffaa9, -1125899906842625, -1366, x6, 912, x7)

inst_136:
// rs1_val != imm_val, rs1_val == -2049, rs1_val < 0 and imm_val > 0, imm_val == 1024
// opcode: addiw ; op1:x10; dest:x11; op1val:-2049;  immval:1024
TEST_IMM_OP( addiw, x11, x10, 0xfffffbff, -2049, 1024, x6, 920, x7)

inst_137:
// rs1_val == (2**(xlen-1)-1), imm_val == -2048, imm_val == (-2**(12-1)), rs1_val == 9223372036854775807
// opcode: addiw ; op1:x10; dest:x11; op1val:9223372036854775807;  immval:-2048
TEST_IMM_OP( addiw, x11, x10, 0x1fffff7ff, 9223372036854775807, -2048, x6, 928, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 117*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
