 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Mon Nov  9 11:54:31 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xor instruction of the RISC-V I extension for the xor covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVTEST_CODE_BEGIN
RVMODEL_BOOT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xor)

RVTEST_SIGBASE( x6,signature_x6_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x16, rd==x16, rs1_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs2_val == -4194305, rs1_val == -9223372036854775808, rs1_val != rs2_val
// opcode: xor ; op1:x30; op2:x16; dest:x16; op1val:-9223372036854775808;  op2val:-4194305
TEST_RR_OP(xor, x16, x30, x16, 0x7fffffffffbfffff, -9223372036854775808, -4194305, x6, 0, x25)

inst_1:
// rs1 == rd != rs2, rs1==x17, rs2==x27, rd==x17, rs1_val == 0, rs2_val == 8796093022208
// opcode: xor ; op1:x17; op2:x27; dest:x17; op1val:0;  op2val:8796093022208
TEST_RR_OP(xor, x17, x17, x27, 0x80000000000, 0, 8796093022208, x6, 8, x25)

inst_2:
// rs1 == rs2 == rd, rs1==x21, rs2==x21, rd==x21, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs2_val == 4194304, rs1_val == 9223372036854775807
// opcode: xor ; op1:x21; op2:x21; dest:x21; op1val:9223372036854775807;  op2val:4194304
TEST_RR_OP(xor, x21, x21, x21, 0x7fffffffffbfffff, 9223372036854775807, 4194304, x6, 16, x25)

inst_3:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x5, rs1_val == 1, 
// opcode: xor ; op1:x23; op2:x23; dest:x5; op1val:1;  op2val:3
TEST_RR_OP(xor, x5, x23, x23, 0x2, 1, 3, x6, 24, x25)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x11, rd==x22, rs2_val == (-2**(xlen-1)), rs1_val == 2048, rs1_val > 0 and rs2_val < 0, rs2_val == -9223372036854775808
// opcode: xor ; op1:x13; op2:x11; dest:x22; op1val:2048;  op2val:-9223372036854775808
TEST_RR_OP(xor, x22, x13, x11, 0x8000000000000800, 2048, -9223372036854775808, x6, 32, x25)

inst_5:
// rs1==x19, rs2==x29, rd==x30, rs2_val == 0, rs1_val == 2097152
// opcode: xor ; op1:x19; op2:x29; dest:x30; op1val:2097152;  op2val:0
TEST_RR_OP(xor, x30, x19, x29, 0x200000, 2097152, 0, x6, 40, x25)

inst_6:
// rs1==x12, rs2==x2, rd==x3, rs2_val == (2**(xlen-1)-1), rs1_val == 134217728, rs2_val == 9223372036854775807
// opcode: xor ; op1:x12; op2:x2; dest:x3; op1val:134217728;  op2val:9223372036854775807
TEST_RR_OP(xor, x3, x12, x2, 0x7ffffffff7ffffff, 134217728, 9223372036854775807, x6, 48, x25)

inst_7:
// rs1==x7, rs2==x15, rd==x9, rs2_val == 1, rs1_val == 64
// opcode: xor ; op1:x7; op2:x15; dest:x9; op1val:64;  op2val:1
TEST_RR_OP(xor, x9, x7, x15, 0x41, 64, 1, x6, 56, x25)

inst_8:
// rs1==x1, rs2==x7, rd==x20, rs1_val < 0 and rs2_val > 0, rs2_val == 35184372088832, rs1_val == -129
// opcode: xor ; op1:x1; op2:x7; dest:x20; op1val:-129;  op2val:35184372088832
TEST_RR_OP(xor, x20, x1, x7, 0xffffdfffffffff7f, -129, 35184372088832, x6, 64, x25)

inst_9:
// rs1==x0, rs2==x24, rd==x18, rs1_val == rs2_val, rs1_val == 281474976710656, rs2_val == 281474976710656
// opcode: xor ; op1:x0; op2:x24; dest:x18; op1val:281474976710656;  op2val:281474976710656
TEST_RR_OP(xor, x18, x0, x24, 0x0, 281474976710656, 281474976710656, x6, 72, x25)

inst_10:
// rs1==x10, rs2==x4, rd==x8, rs1_val == 2, rs2_val == -134217729
// opcode: xor ; op1:x10; op2:x4; dest:x8; op1val:2;  op2val:-134217729
TEST_RR_OP(xor, x8, x10, x4, 0xfffffffff7fffffd, 2, -134217729, x6, 80, x25)

inst_11:
// rs1==x5, rs2==x20, rd==x14, rs1_val == 4, rs2_val == 576460752303423488
// opcode: xor ; op1:x5; op2:x20; dest:x14; op1val:4;  op2val:576460752303423488
TEST_RR_OP(xor, x14, x5, x20, 0x800000000000004, 4, 576460752303423488, x6, 88, x25)

inst_12:
// rs1==x3, rs2==x19, rd==x27, rs1_val == 8, rs2_val == 16384
// opcode: xor ; op1:x3; op2:x19; dest:x27; op1val:8;  op2val:16384
TEST_RR_OP(xor, x27, x3, x19, 0x4008, 8, 16384, x6, 96, x25)

inst_13:
// rs1==x24, rs2==x10, rd==x26, rs1_val == 16, 
// opcode: xor ; op1:x24; op2:x10; dest:x26; op1val:16;  op2val:281474976710656
TEST_RR_OP(xor, x26, x24, x10, 0x1000000000010, 16, 281474976710656, x6, 104, x25)

inst_14:
// rs1==x11, rs2==x26, rd==x29, rs1_val == 32, 
// opcode: xor ; op1:x11; op2:x26; dest:x29; op1val:32;  op2val:3
TEST_RR_OP(xor, x29, x11, x26, 0x23, 32, 3, x6, 112, x16)

inst_15:
// rs1==x14, rs2==x30, rd==x28, rs1_val == 128, rs2_val == -268435457
// opcode: xor ; op1:x14; op2:x30; dest:x28; op1val:128;  op2val:-268435457
TEST_RR_OP(xor, x28, x14, x30, 0xffffffffefffff7f, 128, -268435457, x6, 120, x16)
RVTEST_SIGBASE( x20,signature_x20_0)

inst_16:
// rs1==x27, rs2==x3, rd==x2, rs1_val == 256, rs2_val == -8796093022209
// opcode: xor ; op1:x27; op2:x3; dest:x2; op1val:256;  op2val:-8796093022209
TEST_RR_OP(xor, x2, x27, x3, 0xfffff7fffffffeff, 256, -8796093022209, x20, 0, x16)

inst_17:
// rs1==x18, rs2==x0, rd==x15, rs1_val == 512, rs2_val == -131073
// opcode: xor ; op1:x18; op2:x0; dest:x15; op1val:512;  op2val:-131073
TEST_RR_OP(xor, x15, x18, x0, 0xfffffffffffdfdff, 512, -131073, x20, 8, x16)

inst_18:
// rs1==x15, rs2==x31, rd==x4, rs1_val == 1024, rs2_val == 2097152
// opcode: xor ; op1:x15; op2:x31; dest:x4; op1val:1024;  op2val:2097152
TEST_RR_OP(xor, x4, x15, x31, 0x200400, 1024, 2097152, x20, 16, x16)

inst_19:
// rs1==x9, rs2==x5, rd==x1, rs1_val == 4096, rs2_val == 2
// opcode: xor ; op1:x9; op2:x5; dest:x1; op1val:4096;  op2val:2
TEST_RR_OP(xor, x1, x9, x5, 0x1002, 4096, 2, x20, 24, x16)

inst_20:
// rs1==x26, rs2==x17, rd==x24, rs1_val == 8192, rs2_val == -144115188075855873
// opcode: xor ; op1:x26; op2:x17; dest:x24; op1val:8192;  op2val:-144115188075855873
TEST_RR_OP(xor, x24, x26, x17, 0xfdffffffffffdfff, 8192, -144115188075855873, x20, 32, x16)

inst_21:
// rs1==x8, rs2==x18, rd==x31, rs1_val == 16384, rs2_val == -9007199254740993
// opcode: xor ; op1:x8; op2:x18; dest:x31; op1val:16384;  op2val:-9007199254740993
TEST_RR_OP(xor, x31, x8, x18, 0xffdfffffffffbfff, 16384, -9007199254740993, x20, 40, x16)

inst_22:
// rs1==x28, rs2==x22, rd==x23, rs1_val == 32768, rs2_val == 32768
// opcode: xor ; op1:x28; op2:x22; dest:x23; op1val:32768;  op2val:32768
TEST_RR_OP(xor, x23, x28, x22, 0x0, 32768, 32768, x20, 48, x16)

inst_23:
// rs1==x6, rs2==x12, rd==x7, rs1_val == 65536, rs2_val == -1025
// opcode: xor ; op1:x6; op2:x12; dest:x7; op1val:65536;  op2val:-1025
TEST_RR_OP(xor, x7, x6, x12, 0xfffffffffffefbff, 65536, -1025, x20, 56, x16)

inst_24:
// rs1==x4, rs2==x9, rd==x10, rs1_val == 131072, rs2_val == 4503599627370496
// opcode: xor ; op1:x4; op2:x9; dest:x10; op1val:131072;  op2val:4503599627370496
TEST_RR_OP(xor, x10, x4, x9, 0x10000000020000, 131072, 4503599627370496, x20, 64, x16)

inst_25:
// rs1==x29, rs2==x14, rd==x13, rs1_val == 262144, 
// opcode: xor ; op1:x29; op2:x14; dest:x13; op1val:262144;  op2val:-268435457
TEST_RR_OP(xor, x13, x29, x14, 0xffffffffeffbffff, 262144, -268435457, x20, 72, x16)

inst_26:
// rs1==x31, rs2==x25, rd==x0, rs1_val == 524288, rs2_val == -4611686018427387905
// opcode: xor ; op1:x31; op2:x25; dest:x0; op1val:524288;  op2val:-4611686018427387905
TEST_RR_OP(xor, x0, x31, x25, 0xbffffffffff7ffff, 524288, -4611686018427387905, x20, 80, x16)

inst_27:
// rs1==x22, rs2==x6, rd==x19, rs1_val == 1048576, rs2_val == -32769
// opcode: xor ; op1:x22; op2:x6; dest:x19; op1val:1048576;  op2val:-32769
TEST_RR_OP(xor, x19, x22, x6, 0xffffffffffef7fff, 1048576, -32769, x20, 88, x3)

inst_28:
// rs1==x2, rs2==x13, rd==x6, rs1_val == 4194304, 
// opcode: xor ; op1:x2; op2:x13; dest:x6; op1val:4194304;  op2val:-8796093022209
TEST_RR_OP(xor, x6, x2, x13, 0xfffff7ffffbfffff, 4194304, -8796093022209, x20, 96, x3)

inst_29:
// rs1==x16, rs2==x8, rd==x11, rs1_val == 8388608, rs2_val == -1073741825
// opcode: xor ; op1:x16; op2:x8; dest:x11; op1val:8388608;  op2val:-1073741825
TEST_RR_OP(xor, x11, x16, x8, 0xffffffffbf7fffff, 8388608, -1073741825, x20, 104, x3)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_30:
// rs1==x25, rs2==x28, rd==x12, rs1_val == 16777216, rs2_val == -17
// opcode: xor ; op1:x25; op2:x28; dest:x12; op1val:16777216;  op2val:-17
TEST_RR_OP(xor, x12, x25, x28, 0xfffffffffeffffef, 16777216, -17, x2, 0, x3)

inst_31:
// rs1==x20, rs2==x1, rd==x25, rs1_val == 33554432, rs2_val == -34359738369
// opcode: xor ; op1:x20; op2:x1; dest:x25; op1val:33554432;  op2val:-34359738369
TEST_RR_OP(xor, x25, x20, x1, 0xfffffff7fdffffff, 33554432, -34359738369, x2, 8, x3)

inst_32:
// rs1_val == 67108864, rs2_val == -288230376151711745
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:-288230376151711745
TEST_RR_OP(xor, x12, x10, x11, 0xfbfffffffbffffff, 67108864, -288230376151711745, x2, 16, x3)

inst_33:
// rs1_val == 268435456, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:1
TEST_RR_OP(xor, x12, x10, x11, 0x10000001, 268435456, 1, x2, 24, x3)

inst_34:
// rs1_val == 536870912, rs2_val == -2097153
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:-2097153
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffdfdfffff, 536870912, -2097153, x2, 32, x3)

inst_35:
// rs1_val == 1073741824, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-1
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffbfffffff, 1073741824, -1, x2, 40, x3)

inst_36:
// rs1_val == 2147483648, rs2_val == 2305843009213693952
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:2305843009213693952
TEST_RR_OP(xor, x12, x10, x11, 0x2000000080000000, 2147483648, 2305843009213693952, x2, 48, x3)

inst_37:
// rs1_val == 4294967296, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-2097153
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffeffdfffff, 4294967296, -2097153, x2, 56, x3)

inst_38:
// rs1_val == 8589934592, rs2_val == 549755813888
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:549755813888
TEST_RR_OP(xor, x12, x10, x11, 0x8200000000, 8589934592, 549755813888, x2, 64, x3)

inst_39:
// rs1_val == 17179869184, rs2_val == -1048577
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:-1048577
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffbffefffff, 17179869184, -1048577, x2, 72, x3)

inst_40:
// rs1_val == 34359738368, rs2_val == -4503599627370497
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:-4503599627370497
TEST_RR_OP(xor, x12, x10, x11, 0xffeffff7ffffffff, 34359738368, -4503599627370497, x2, 80, x3)

inst_41:
// rs1_val == 68719476736, rs2_val == 6148914691236517205
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:6148914691236517205
TEST_RR_OP(xor, x12, x10, x11, 0x5555554555555555, 68719476736, 6148914691236517205, x2, 88, x3)

inst_42:
// rs1_val == 137438953472, rs2_val == -262145
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:-262145
TEST_RR_OP(xor, x12, x10, x11, 0xffffffdffffbffff, 137438953472, -262145, x2, 96, x3)

inst_43:
// rs1_val == 274877906944, rs2_val == 2048
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:2048
TEST_RR_OP(xor, x12, x10, x11, 0x4000000800, 274877906944, 2048, x2, 104, x3)

inst_44:
// rs1_val == 549755813888, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:8796093022208
TEST_RR_OP(xor, x12, x10, x11, 0x88000000000, 549755813888, 8796093022208, x2, 112, x3)

inst_45:
// rs1_val == 1099511627776, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:2048
TEST_RR_OP(xor, x12, x10, x11, 0x10000000800, 1099511627776, 2048, x2, 120, x3)

inst_46:
// rs1_val == 2199023255552, rs2_val == 18014398509481984
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:18014398509481984
TEST_RR_OP(xor, x12, x10, x11, 0x40020000000000, 2199023255552, 18014398509481984, x2, 128, x3)

inst_47:
// rs1_val == 4398046511104, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-10
TEST_RR_OP(xor, x12, x10, x11, 0xfffffbfffffffff6, 4398046511104, -10, x2, 136, x3)

inst_48:
// rs1_val == 8796093022208, rs2_val == 1125899906842624
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:1125899906842624
TEST_RR_OP(xor, x12, x10, x11, 0x4080000000000, 8796093022208, 1125899906842624, x2, 144, x3)

inst_49:
// rs1_val == 17592186044416, rs2_val == -8388609
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:-8388609
TEST_RR_OP(xor, x12, x10, x11, 0xffffefffff7fffff, 17592186044416, -8388609, x2, 152, x3)

inst_50:
// rs1_val == 35184372088832, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:3
TEST_RR_OP(xor, x12, x10, x11, 0x200000000003, 35184372088832, 3, x2, 160, x3)

inst_51:
// rs1_val == 70368744177664, rs2_val == -4097
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:-4097
TEST_RR_OP(xor, x12, x10, x11, 0xffffbfffffffefff, 70368744177664, -4097, x2, 168, x3)

inst_52:
// rs1_val == 140737488355328, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:-1073741825
TEST_RR_OP(xor, x12, x10, x11, 0xffff7fffbfffffff, 140737488355328, -1073741825, x2, 176, x3)

inst_53:
// rs1_val == 562949953421312, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:-1048577
TEST_RR_OP(xor, x12, x10, x11, 0xfffdffffffefffff, 562949953421312, -1048577, x2, 184, x3)

inst_54:
// rs1_val == 1125899906842624, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:4194304
TEST_RR_OP(xor, x12, x10, x11, 0x4000000400000, 1125899906842624, 4194304, x2, 192, x3)

inst_55:
// rs1_val == 2251799813685248, rs2_val == -65537
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:-65537
TEST_RR_OP(xor, x12, x10, x11, 0xfff7fffffffeffff, 2251799813685248, -65537, x2, 200, x3)

inst_56:
// rs1_val == 4503599627370496, rs2_val == -9
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:-9
TEST_RR_OP(xor, x12, x10, x11, 0xffeffffffffffff7, 4503599627370496, -9, x2, 208, x3)

inst_57:
// rs1_val == 9007199254740992, rs2_val == 262144
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:262144
TEST_RR_OP(xor, x12, x10, x11, 0x20000000040000, 9007199254740992, 262144, x2, 216, x3)

inst_58:
// rs1_val == 18014398509481984, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-262145
TEST_RR_OP(xor, x12, x10, x11, 0xffbffffffffbffff, 18014398509481984, -262145, x2, 224, x3)

inst_59:
// rs1_val == 36028797018963968, rs2_val == 2199023255552
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:2199023255552
TEST_RR_OP(xor, x12, x10, x11, 0x80020000000000, 36028797018963968, 2199023255552, x2, 232, x3)

inst_60:
// rs1_val == 72057594037927936, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-134217729
TEST_RR_OP(xor, x12, x10, x11, 0xfefffffff7ffffff, 72057594037927936, -134217729, x2, 240, x3)

inst_61:
// rs1_val == 144115188075855872, rs2_val == -576460752303423489
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:-576460752303423489
TEST_RR_OP(xor, x12, x10, x11, 0xf5ffffffffffffff, 144115188075855872, -576460752303423489, x2, 248, x3)

inst_62:
// rs1_val == 288230376151711744, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-34359738369
TEST_RR_OP(xor, x12, x10, x11, 0xfbfffff7ffffffff, 288230376151711744, -34359738369, x2, 256, x3)

inst_63:
// rs1_val == 576460752303423488, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-144115188075855873
TEST_RR_OP(xor, x12, x10, x11, 0xf5ffffffffffffff, 576460752303423488, -144115188075855873, x2, 264, x3)

inst_64:
// rs1_val == 1152921504606846976, rs2_val == 34359738368
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:34359738368
TEST_RR_OP(xor, x12, x10, x11, 0x1000000800000000, 1152921504606846976, 34359738368, x2, 272, x3)

inst_65:
// rs1_val == 2305843009213693952, rs2_val == -72057594037927937
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-72057594037927937
TEST_RR_OP(xor, x12, x10, x11, 0xdeffffffffffffff, 2305843009213693952, -72057594037927937, x2, 280, x3)

inst_66:
// rs1_val == 4611686018427387904, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:5
TEST_RR_OP(xor, x12, x10, x11, 0x4000000000000005, 4611686018427387904, 5, x2, 288, x3)

inst_67:
// rs1_val == -2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-65537
TEST_RR_OP(xor, x12, x10, x11, 0x10001, -2, -65537, x2, 296, x3)

inst_68:
// rs1_val == -3, rs2_val == 17179869184
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:17179869184
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffbfffffffd, -3, 17179869184, x2, 304, x3)

inst_69:
// rs1_val == -5, rs2_val == -70368744177665
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-70368744177665
TEST_RR_OP(xor, x12, x10, x11, 0x400000000004, -5, -70368744177665, x2, 312, x3)

inst_70:
// rs1_val == -9, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-34359738369
TEST_RR_OP(xor, x12, x10, x11, 0x800000008, -9, -34359738369, x2, 320, x3)

inst_71:
// rs1_val == -17, rs2_val == 1073741824
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:1073741824
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffbfffffef, -17, 1073741824, x2, 328, x3)

inst_72:
// rs1_val == -33, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:9223372036854775807
TEST_RR_OP(xor, x12, x10, x11, 0x8000000000000020, -33, 9223372036854775807, x2, 336, x3)

inst_73:
// rs1_val == -65, rs2_val == 1152921504606846976
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:1152921504606846976
TEST_RR_OP(xor, x12, x10, x11, 0xefffffffffffffbf, -65, 1152921504606846976, x2, 344, x3)

inst_74:
// rs1_val == -257, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:18014398509481984
TEST_RR_OP(xor, x12, x10, x11, 0xffbffffffffffeff, -257, 18014398509481984, x2, 352, x3)

inst_75:
// rs1_val == -513, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-4
TEST_RR_OP(xor, x12, x10, x11, 0x203, -513, -4, x2, 360, x3)

inst_76:
// rs1_val == -1025, rs2_val == 268435456
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:268435456
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffeffffbff, -1025, 268435456, x2, 368, x3)

inst_77:
// rs1_val == -2049, rs2_val == 8589934592
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:8589934592
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffdfffff7ff, -2049, 8589934592, x2, 376, x3)

inst_78:
// rs1_val == -4097, rs2_val == 524288
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:524288
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffff7efff, -4097, 524288, x2, 384, x3)

inst_79:
// rs1_val == -8193, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-2097153
TEST_RR_OP(xor, x12, x10, x11, 0x202000, -8193, -2097153, x2, 392, x3)

inst_80:
// rs1_val == -16385, rs2_val == -1099511627777
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:-1099511627777
TEST_RR_OP(xor, x12, x10, x11, 0x10000004000, -16385, -1099511627777, x2, 400, x3)

inst_81:
// rs2_val == -1125899906842625, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:-1125899906842625
TEST_RR_OP(xor, x12, x10, x11, 0x8004000000000000, 9223372036854775807, -1125899906842625, x2, 408, x3)

inst_82:
// rs2_val == -2251799813685249, rs1_val == -4294967297
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-2251799813685249
TEST_RR_OP(xor, x12, x10, x11, 0x8000100000000, -4294967297, -2251799813685249, x2, 416, x3)

inst_83:
// rs2_val == -18014398509481985, rs1_val == -2097153
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-18014398509481985
TEST_RR_OP(xor, x12, x10, x11, 0x40000000200000, -2097153, -18014398509481985, x2, 424, x3)

inst_84:
// rs2_val == -36028797018963969, rs1_val == -8589934593
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-36028797018963969
TEST_RR_OP(xor, x12, x10, x11, 0x80000200000000, -8589934593, -36028797018963969, x2, 432, x3)

inst_85:
// rs2_val == -1152921504606846977, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:-1152921504606846977
TEST_RR_OP(xor, x12, x10, x11, 0xefffffffffffbfff, 16384, -1152921504606846977, x2, 440, x3)

inst_86:
// rs2_val == -2305843009213693953, rs1_val == -262145
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:-2305843009213693953
TEST_RR_OP(xor, x12, x10, x11, 0x2000000000040000, -262145, -2305843009213693953, x2, 448, x3)

inst_87:
// rs2_val == -6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:128;  op2val:-6148914691236517206
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaa2a, 128, -6148914691236517206, x2, 456, x3)

inst_88:
// rs1_val == -32769, rs2_val == -281474976710657
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:-281474976710657
TEST_RR_OP(xor, x12, x10, x11, 0x1000000008000, -32769, -281474976710657, x2, 464, x3)

inst_89:
// rs1_val == -65537, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-34359738369
TEST_RR_OP(xor, x12, x10, x11, 0x800010000, -65537, -34359738369, x2, 472, x3)

inst_90:
// rs1_val == -131073, rs2_val == 36028797018963968
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:36028797018963968
TEST_RR_OP(xor, x12, x10, x11, 0xff7ffffffffdffff, -131073, 36028797018963968, x2, 480, x3)

inst_91:
// rs1_val == -524289, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:3
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffff7fffc, -524289, 3, x2, 488, x3)

inst_92:
// rs1_val == -1048577, rs2_val == 128
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:128
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffefff7f, -1048577, 128, x2, 496, x3)

inst_93:
// rs1_val == -4194305, rs2_val == -16777217
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:-16777217
TEST_RR_OP(xor, x12, x10, x11, 0x1400000, -4194305, -16777217, x2, 504, x3)

inst_94:
// rs1_val == -8388609, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:-70368744177665
TEST_RR_OP(xor, x12, x10, x11, 0x400000800000, -8388609, -70368744177665, x2, 512, x3)

inst_95:
// rs1_val == -16777217, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:9
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffefffff6, -16777217, 9, x2, 520, x3)

inst_96:
// rs1_val == -33554433, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-131073
TEST_RR_OP(xor, x12, x10, x11, 0x2020000, -33554433, -131073, x2, 528, x3)

inst_97:
// rs1_val == -67108865, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-8
TEST_RR_OP(xor, x12, x10, x11, 0x4000007, -67108865, -8, x2, 536, x3)

inst_98:
// rs1_val == -134217729, rs2_val == -4294967297
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-4294967297
TEST_RR_OP(xor, x12, x10, x11, 0x108000000, -134217729, -4294967297, x2, 544, x3)

inst_99:
// rs1_val == -268435457, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:35184372088832
TEST_RR_OP(xor, x12, x10, x11, 0xffffdfffefffffff, -268435457, 35184372088832, x2, 552, x3)

inst_100:
// rs1_val == -536870913, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:6
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffdffffff9, -536870913, 6, x2, 560, x3)

inst_101:
// rs1_val == -1073741825, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:-72057594037927937
TEST_RR_OP(xor, x12, x10, x11, 0x100000040000000, -1073741825, -72057594037927937, x2, 568, x3)

inst_102:
// rs1_val == -2147483649, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:-6148914691236517206
TEST_RR_OP(xor, x12, x10, x11, 0x55555555d5555555, -2147483649, -6148914691236517206, x2, 576, x3)

inst_103:
// rs1_val == -17179869185, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:0
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffbffffffff, -17179869185, 0, x2, 584, x3)

inst_104:
// rs1_val == -34359738369, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:-262145
TEST_RR_OP(xor, x12, x10, x11, 0x800040000, -34359738369, -262145, x2, 592, x3)

inst_105:
// rs1_val == -68719476737, rs2_val == -35184372088833
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:-35184372088833
TEST_RR_OP(xor, x12, x10, x11, 0x201000000000, -68719476737, -35184372088833, x2, 600, x3)

inst_106:
// rs1_val == -137438953473, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:9
TEST_RR_OP(xor, x12, x10, x11, 0xffffffdffffffff6, -137438953473, 9, x2, 608, x3)

inst_107:
// rs1_val == -274877906945, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:-16777217
TEST_RR_OP(xor, x12, x10, x11, 0x4001000000, -274877906945, -16777217, x2, 616, x3)

inst_108:
// rs1_val == -549755813889, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:-65537
TEST_RR_OP(xor, x12, x10, x11, 0x8000010000, -549755813889, -65537, x2, 624, x3)

inst_109:
// rs1_val == -1099511627777, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:-1152921504606846977
TEST_RR_OP(xor, x12, x10, x11, 0x1000010000000000, -1099511627777, -1152921504606846977, x2, 632, x3)

inst_110:
// rs1_val == -2199023255553, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:-70368744177665
TEST_RR_OP(xor, x12, x10, x11, 0x420000000000, -2199023255553, -70368744177665, x2, 640, x3)

inst_111:
// rs1_val == -4398046511105, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:5
TEST_RR_OP(xor, x12, x10, x11, 0xfffffbfffffffffa, -4398046511105, 5, x2, 648, x3)

inst_112:
// rs1_val == -8796093022209, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:8796093022208
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, -8796093022209, 8796093022208, x2, 656, x3)

inst_113:
// rs1_val == -17592186044417, rs2_val == 4
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:4
TEST_RR_OP(xor, x12, x10, x11, 0xffffeffffffffffb, -17592186044417, 4, x2, 664, x3)

inst_114:
// rs1_val == -35184372088833, rs2_val == 8
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:8
TEST_RR_OP(xor, x12, x10, x11, 0xffffdffffffffff7, -35184372088833, 8, x2, 672, x3)

inst_115:
// rs1_val == -70368744177665, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:-4503599627370497
TEST_RR_OP(xor, x12, x10, x11, 0x10400000000000, -70368744177665, -4503599627370497, x2, 680, x3)

inst_116:
// rs1_val == -140737488355329, rs2_val == 67108864
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:67108864
TEST_RR_OP(xor, x12, x10, x11, 0xffff7ffffbffffff, -140737488355329, 67108864, x2, 688, x3)

inst_117:
// rs1_val == -281474976710657, rs2_val == -549755813889
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:-549755813889
TEST_RR_OP(xor, x12, x10, x11, 0x1008000000000, -281474976710657, -549755813889, x2, 696, x3)

inst_118:
// rs1_val == -562949953421313, rs2_val == 4096
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:4096
TEST_RR_OP(xor, x12, x10, x11, 0xfffdffffffffefff, -562949953421313, 4096, x2, 704, x3)

inst_119:
// rs1_val == -1125899906842625, rs2_val == -33
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-33
TEST_RR_OP(xor, x12, x10, x11, 0x4000000000020, -1125899906842625, -33, x2, 712, x3)

inst_120:
// rs1_val == -2251799813685249, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:-70368744177665
TEST_RR_OP(xor, x12, x10, x11, 0x8400000000000, -2251799813685249, -70368744177665, x2, 720, x3)

inst_121:
// rs1_val == -4503599627370497, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:-281474976710657
TEST_RR_OP(xor, x12, x10, x11, 0x11000000000000, -4503599627370497, -281474976710657, x2, 728, x3)

inst_122:
// rs1_val == -9007199254740993, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:2199023255552
TEST_RR_OP(xor, x12, x10, x11, 0xffdffdffffffffff, -9007199254740993, 2199023255552, x2, 736, x3)

inst_123:
// rs1_val == -18014398509481985, rs2_val == 8388608
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:8388608
TEST_RR_OP(xor, x12, x10, x11, 0xffbfffffff7fffff, -18014398509481985, 8388608, x2, 744, x3)

inst_124:
// rs1_val == -36028797018963969, rs2_val == 512
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:512
TEST_RR_OP(xor, x12, x10, x11, 0xff7ffffffffffdff, -36028797018963969, 512, x2, 752, x3)

inst_125:
// rs1_val == -72057594037927937, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:6
TEST_RR_OP(xor, x12, x10, x11, 0xfefffffffffffff9, -72057594037927937, 6, x2, 760, x3)

inst_126:
// rs1_val == -144115188075855873, rs2_val == -2
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-2
TEST_RR_OP(xor, x12, x10, x11, 0x200000000000001, -144115188075855873, -2, x2, 768, x3)

inst_127:
// rs1_val == -288230376151711745, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:-2305843009213693953
TEST_RR_OP(xor, x12, x10, x11, 0x2400000000000000, -288230376151711745, -2305843009213693953, x2, 776, x3)

inst_128:
// rs1_val == -576460752303423489, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-549755813889
TEST_RR_OP(xor, x12, x10, x11, 0x800008000000000, -576460752303423489, -549755813889, x2, 784, x3)

inst_129:
// rs1_val == -1152921504606846977, rs2_val == -4398046511105
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-4398046511105
TEST_RR_OP(xor, x12, x10, x11, 0x1000040000000000, -1152921504606846977, -4398046511105, x2, 792, x3)

inst_130:
// rs1_val == -2305843009213693953, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:-7
TEST_RR_OP(xor, x12, x10, x11, 0x2000000000000006, -2305843009213693953, -7, x2, 800, x3)

inst_131:
// rs1_val == -4611686018427387905, rs2_val == 1048576
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:1048576
TEST_RR_OP(xor, x12, x10, x11, 0xbfffffffffefffff, -4611686018427387905, 1048576, x2, 808, x3)

inst_132:
// rs1_val == 6148914691236517205, rs2_val == -8589934593
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:-8589934593
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa8aaaaaaaa, 6148914691236517205, -8589934593, x2, 816, x3)

inst_133:
// rs1_val == -6148914691236517206, rs2_val == 9007199254740992
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:9007199254740992
TEST_RR_OP(xor, x12, x10, x11, 0xaa8aaaaaaaaaaaaa, -6148914691236517206, 9007199254740992, x2, 824, x3)

inst_134:
// rs2_val == 16, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:16
TEST_RR_OP(xor, x12, x10, x11, 0x40000010, 1073741824, 16, x2, 832, x3)

inst_135:
// rs2_val == 32, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:32
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffff7df, -2049, 32, x2, 840, x3)

inst_136:
// rs2_val == 64, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:4096;  op2val:64
TEST_RR_OP(xor, x12, x10, x11, 0x1040, 4096, 64, x2, 848, x3)

inst_137:
// rs2_val == 256, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:256
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffff7fffeff, -134217729, 256, x2, 856, x3)

inst_138:
// rs2_val == 1024, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:1024
TEST_RR_OP(xor, x12, x10, x11, 0x10400, 65536, 1024, x2, 864, x3)

inst_139:
// rs2_val == 8192, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:8192
TEST_RR_OP(xor, x12, x10, x11, 0x800000000002000, 576460752303423488, 8192, x2, 872, x3)

inst_140:
// rs2_val == 65536, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:32768;  op2val:65536
TEST_RR_OP(xor, x12, x10, x11, 0x18000, 32768, 65536, x2, 880, x3)

inst_141:
// rs2_val == 131072, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:131072
TEST_RR_OP(xor, x12, x10, x11, 0xa0000, 524288, 131072, x2, 888, x3)

inst_142:
// rs2_val == 16777216, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:16777216
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffeffefff, -4097, 16777216, x2, 896, x3)

inst_143:
// rs2_val == 33554432, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:33554432
TEST_RR_OP(xor, x12, x10, x11, 0x802000000, 34359738368, 33554432, x2, 904, x3)

inst_144:
// rs2_val == 134217728, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:134217728
TEST_RR_OP(xor, x12, x10, x11, 0x208000000, 8589934592, 134217728, x2, 912, x3)

inst_145:
// rs2_val == 536870912, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:536870912
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffdfffffdf, -33, 536870912, x2, 920, x3)

inst_146:
// rs2_val == 2147483648, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:2147483648
TEST_RR_OP(xor, x12, x10, x11, 0xffffefff7fffffff, -17592186044417, 2147483648, x2, 928, x3)

inst_147:
// rs2_val == 4294967296, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:4294967296
TEST_RR_OP(xor, x12, x10, x11, 0xfff7fffeffffffff, -2251799813685249, 4294967296, x2, 936, x3)

inst_148:
// rs2_val == 68719476736, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:68719476736
TEST_RR_OP(xor, x12, x10, x11, 0x8001000000000, 2251799813685248, 68719476736, x2, 944, x3)

inst_149:
// rs2_val == 137438953472, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:137438953472
TEST_RR_OP(xor, x12, x10, x11, 0x3000000000, 68719476736, 137438953472, x2, 952, x3)

inst_150:
// rs2_val == 274877906944, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:274877906944
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, -274877906945, 274877906944, x2, 960, x3)

inst_151:
// rs2_val == 1099511627776, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:1099511627776
TEST_RR_OP(xor, x12, x10, x11, 0x110000000000, 17592186044416, 1099511627776, x2, 968, x3)

inst_152:
// rs2_val == 4398046511104, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:4398046511104
TEST_RR_OP(xor, x12, x10, x11, 0x40000000001, 1, 4398046511104, x2, 976, x3)

inst_153:
// rs2_val == 2251799813685248, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:2251799813685248
TEST_RR_OP(xor, x12, x10, x11, 0xeff7ffffffffffff, -1152921504606846977, 2251799813685248, x2, 984, x3)

inst_154:
// rs2_val == 562949953421312, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:562949953421312
TEST_RR_OP(xor, x12, x10, x11, 0x2000000000200, 512, 562949953421312, x2, 992, x3)

inst_155:
// rs2_val == 72057594037927936, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:72057594037927936
TEST_RR_OP(xor, x12, x10, x11, 0x100000000000006, 6, 72057594037927936, x2, 1000, x3)

inst_156:
// rs2_val == 144115188075855872, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:144115188075855872
TEST_RR_OP(xor, x12, x10, x11, 0x200001000000000, 68719476736, 144115188075855872, x2, 1008, x3)

inst_157:
// rs2_val == 288230376151711744, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:288230376151711744
TEST_RR_OP(xor, x12, x10, x11, 0xfbffffbfffffffff, -274877906945, 288230376151711744, x2, 1016, x3)

inst_158:
// rs2_val == 4611686018427387904, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:4611686018427387904
TEST_RR_OP(xor, x12, x10, x11, 0x4000000000200000, 2097152, 4611686018427387904, x2, 1024, x3)

inst_159:
// rs2_val == -3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:-3
TEST_RR_OP(xor, x12, x10, x11, 0x42, -65, -3, x2, 1032, x3)

inst_160:
// rs2_val == -5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-5
TEST_RR_OP(xor, x12, x10, x11, 0x1000000000000004, -1152921504606846977, -5, x2, 1040, x3)

inst_161:
// rs2_val == -65, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-65
TEST_RR_OP(xor, x12, x10, x11, 0x200000040, -8589934593, -65, x2, 1048, x3)

inst_162:
// rs2_val == 140737488355328, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:140737488355328
TEST_RR_OP(xor, x12, x10, x11, 0x2000800000000000, 2305843009213693952, 140737488355328, x2, 1056, x3)

inst_163:
// rs2_val == -129, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:-129
TEST_RR_OP(xor, x12, x10, x11, 0xffffefffffffff7f, 17592186044416, -129, x2, 1064, x3)

inst_164:
// rs2_val == -257, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:-257
TEST_RR_OP(xor, x12, x10, x11, 0x800000000100, -140737488355329, -257, x2, 1072, x3)

inst_165:
// rs2_val == -513, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:-513
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, 512, -513, x2, 1080, x3)

inst_166:
// rs2_val == -2049, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-2049
TEST_RR_OP(xor, x12, x10, x11, 0x810, -17, -2049, x2, 1088, x3)

inst_167:
// rs2_val == -8193, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:-8193
TEST_RR_OP(xor, x12, x10, x11, 0x40000002000, -4398046511105, -8193, x2, 1096, x3)

inst_168:
// rs2_val == -16385, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:-16385
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffbff7, 8, -16385, x2, 1104, x3)

inst_169:
// rs2_val == -524289, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-524289
TEST_RR_OP(xor, x12, x10, x11, 0x4000000080000, -1125899906842625, -524289, x2, 1112, x3)

inst_170:
// rs2_val == -33554433, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:-33554433
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffdffffdf, 32, -33554433, x2, 1120, x3)

inst_171:
// rs2_val == -67108865, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:-67108865
TEST_RR_OP(xor, x12, x10, x11, 0x4000400, -1025, -67108865, x2, 1128, x3)

inst_172:
// rs2_val == 17592186044416, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:32768;  op2val:17592186044416
TEST_RR_OP(xor, x12, x10, x11, 0x100000008000, 32768, 17592186044416, x2, 1136, x3)

inst_173:
// rs2_val == -536870913, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:-536870913
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffbdfffffff, 17179869184, -536870913, x2, 1144, x3)

inst_174:
// rs2_val == -2147483649, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-2147483649
TEST_RR_OP(xor, x12, x10, x11, 0x1000000080000000, -1152921504606846977, -2147483649, x2, 1152, x3)

inst_175:
// rs2_val == -17179869185, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:-17179869185
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffbfffdffff, 131072, -17179869185, x2, 1160, x3)

inst_176:
// rs2_val == -68719476737, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-68719476737
TEST_RR_OP(xor, x12, x10, x11, 0xffffffeff7ffffff, 134217728, -68719476737, x2, 1168, x3)

inst_177:
// rs2_val == -137438953473, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:-137438953473
TEST_RR_OP(xor, x12, x10, x11, 0xffffffdffffff7ff, 2048, -137438953473, x2, 1176, x3)

inst_178:
// rs2_val == -274877906945, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-9223372036854775808;  op2val:-274877906945
TEST_RR_OP(xor, x12, x10, x11, 0x7fffffbfffffffff, -9223372036854775808, -274877906945, x2, 1184, x3)

inst_179:
// rs2_val == -2199023255553, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:4096;  op2val:-2199023255553
TEST_RR_OP(xor, x12, x10, x11, 0xfffffdffffffefff, 4096, -2199023255553, x2, 1192, x3)

inst_180:
// rs2_val == -17592186044417, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:-17592186044417
TEST_RR_OP(xor, x12, x10, x11, 0xffffefffffffffdf, 32, -17592186044417, x2, 1200, x3)

inst_181:
// rs2_val == 70368744177664, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:70368744177664
TEST_RR_OP(xor, x12, x10, x11, 0xffffbffffffffffd, -3, 70368744177664, x2, 1208, x3)

inst_182:
// rs2_val == -140737488355329, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-140737488355329
TEST_RR_OP(xor, x12, x10, x11, 0x800000000004, -5, -140737488355329, x2, 1216, x3)

inst_183:
// rs2_val == -562949953421313, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-562949953421313
TEST_RR_OP(xor, x12, x10, x11, 0x202000000000000, -144115188075855873, -562949953421313, x2, 1224, x3)

inst_184:
// rs1_val == rs2_val, rs1_val == 281474976710656, rs2_val == 281474976710656
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:281474976710656
TEST_RR_OP(xor, x12, x10, x11, 0x0, 281474976710656, 281474976710656, x2, 1232, x3)

inst_185:
// rs1_val == 524288, rs2_val == -4611686018427387905
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:-4611686018427387905
TEST_RR_OP(xor, x12, x10, x11, 0xbffffffffff7ffff, 524288, -4611686018427387905, x2, 1240, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x20_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 156*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
