
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:23:49 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xor instruction of the RISC-V I extension for the xor covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xor)

RVTEST_SIGBASE( x8,signature_x8_1)

inst_0:
// rs2 == rd != rs1, rs1==x1, rs2==x24, rd==x24, rs1_val > 0 and rs2_val > 0, rs2_val == 72057594037927936, rs1_val != rs2_val
// opcode: xor ; op1:x1; op2:x24; dest:x24; op1val:0x6666666666666667;  op2val:0x100000000000000
TEST_RR_OP(xor, x24, x1, x24, 0x6766666666666667, 0x6666666666666667, 0x100000000000000, x8, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x12, rd==x30, rs1_val > 0 and rs2_val < 0, rs1_val == 35184372088832, rs2_val == -288230376151711745
// opcode: xor ; op1:x24; op2:x12; dest:x30; op1val:0x200000000000;  op2val:-0x400000000000001
TEST_RR_OP(xor, x30, x24, x12, 0xfbffdfffffffffff, 0x200000000000, -0x400000000000001, x8, 8, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x4, rs1_val < 0 and rs2_val < 0, rs2_val == -2049, rs1_val == -1099511627777
// opcode: xor ; op1:x22; op2:x22; dest:x4; op1val:-0x10000000001;  op2val:-0x801
TEST_RR_OP(xor, x4, x22, x22, 0x10000000800, -0x10000000001, -0x801, x8, 16, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_val < 0 and rs2_val > 0, rs1_val == -17592186044417
// opcode: xor ; op1:x18; op2:x18; dest:x18; op1val:-0x100000000001;  op2val:0x3333333333333333
TEST_RR_OP(xor, x18, x18, x18, 0xccccdccccccccccc, -0x100000000001, 0x3333333333333333, x8, 24, x14)

inst_4:
// rs1 == rd != rs2, rs1==x7, rs2==x29, rd==x7, rs1_val == rs2_val, rs2_val == -65, rs1_val == -65
// opcode: xor ; op1:x7; op2:x29; dest:x7; op1val:-0x41;  op2val:-0x41
TEST_RR_OP(xor, x7, x7, x29, 0x0, -0x41, -0x41, x8, 32, x14)

inst_5:
// rs1==x12, rs2==x10, rd==x28, rs2_val == (-2**(xlen-1)), rs1_val == 1073741824, rs2_val == -9223372036854775808
// opcode: xor ; op1:x12; op2:x10; dest:x28; op1val:0x40000000;  op2val:-0x8000000000000000
TEST_RR_OP(xor, x28, x12, x10, 0x8000000040000000, 0x40000000, -0x8000000000000000, x8, 40, x14)

inst_6:
// rs1==x28, rs2==x25, rd==x1, rs2_val == 0, rs1_val == -17179869185
// opcode: xor ; op1:x28; op2:x25; dest:x1; op1val:-0x400000001;  op2val:0x0
TEST_RR_OP(xor, x1, x28, x25, 0xfffffffbffffffff, -0x400000001, 0x0, x8, 48, x14)

inst_7:
// rs1==x30, rs2==x27, rd==x17, rs2_val == (2**(xlen-1)-1), rs1_val == 4, rs2_val == 9223372036854775807
// opcode: xor ; op1:x30; op2:x27; dest:x17; op1val:0x4;  op2val:0x7fffffffffffffff
TEST_RR_OP(xor, x17, x30, x27, 0x7ffffffffffffffb, 0x4, 0x7fffffffffffffff, x8, 56, x14)

inst_8:
// rs1==x10, rs2==x9, rd==x12, rs2_val == 1, rs1_val == 6148914691236517205
// opcode: xor ; op1:x10; op2:x9; dest:x12; op1val:0x5555555555555555;  op2val:0x1
TEST_RR_OP(xor, x12, x10, x9, 0x5555555555555554, 0x5555555555555555, 0x1, x8, 64, x14)

inst_9:
// rs1==x19, rs2==x15, rd==x27, rs1_val == (-2**(xlen-1)), rs1_val == -9223372036854775808
// opcode: xor ; op1:x19; op2:x15; dest:x27; op1val:-0x8000000000000000;  op2val:-0x801
TEST_RR_OP(xor, x27, x19, x15, 0x7ffffffffffff7ff, -0x8000000000000000, -0x801, x8, 72, x14)

inst_10:
// rs1==x31, rs2==x28, rd==x23, rs1_val == 0, rs2_val == 562949953421312
// opcode: xor ; op1:x31; op2:x28; dest:x23; op1val:0x0;  op2val:0x2000000000000
TEST_RR_OP(xor, x23, x31, x28, 0x2000000000000, 0x0, 0x2000000000000, x8, 80, x14)

inst_11:
// rs1==x21, rs2==x31, rd==x5, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807
// opcode: xor ; op1:x21; op2:x31; dest:x5; op1val:0x7fffffffffffffff;  op2val:0x6
TEST_RR_OP(xor, x5, x21, x31, 0x7ffffffffffffff9, 0x7fffffffffffffff, 0x6, x8, 88, x14)

inst_12:
// rs1==x2, rs2==x3, rd==x31, rs1_val == 1, rs2_val == -68719476737
// opcode: xor ; op1:x2; op2:x3; dest:x31; op1val:0x1;  op2val:-0x1000000001
TEST_RR_OP(xor, x31, x2, x3, 0xffffffeffffffffe, 0x1, -0x1000000001, x8, 96, x14)

inst_13:
// rs1==x4, rs2==x19, rd==x26, rs2_val == 2, rs1_val==4 and rs2_val==2
// opcode: xor ; op1:x4; op2:x19; dest:x26; op1val:0x4;  op2val:0x2
TEST_RR_OP(xor, x26, x4, x19, 0x6, 0x4, 0x2, x8, 104, x14)

inst_14:
// rs1==x20, rs2==x21, rd==x9, rs2_val == 4, rs1_val == -281474976710657
// opcode: xor ; op1:x20; op2:x21; dest:x9; op1val:-0x1000000000001;  op2val:0x4
TEST_RR_OP(xor, x9, x20, x21, 0xfffefffffffffffb, -0x1000000000001, 0x4, x8, 112, x14)

inst_15:
// rs1==x3, rs2==x6, rd==x25, rs2_val == 8, 
// opcode: xor ; op1:x3; op2:x6; dest:x25; op1val:-0x5555555555555555;  op2val:0x8
TEST_RR_OP(xor, x25, x3, x6, 0xaaaaaaaaaaaaaaa3, -0x5555555555555555, 0x8, x8, 120, x14)

inst_16:
// rs1==x13, rs2==x11, rd==x16, rs2_val == 16, rs1_val == 65536
// opcode: xor ; op1:x13; op2:x11; dest:x16; op1val:0x10000;  op2val:0x10
TEST_RR_OP(xor, x16, x13, x11, 0x10010, 0x10000, 0x10, x8, 128, x14)
RVTEST_SIGBASE( x18,signature_x18_0)

inst_17:
// rs1==x5, rs2==x23, rd==x2, rs2_val == 32, rs1_val == 274877906944
// opcode: xor ; op1:x5; op2:x23; dest:x2; op1val:0x4000000000;  op2val:0x20
TEST_RR_OP(xor, x2, x5, x23, 0x4000000020, 0x4000000000, 0x20, x18, 0, x24)

inst_18:
// rs1==x16, rs2==x4, rd==x29, rs2_val == 64, rs1_val == 524288
// opcode: xor ; op1:x16; op2:x4; dest:x29; op1val:0x80000;  op2val:0x40
TEST_RR_OP(xor, x29, x16, x4, 0x80040, 0x80000, 0x40, x18, 8, x24)

inst_19:
// rs1==x8, rs2==x26, rd==x14, rs2_val == 128, 
// opcode: xor ; op1:x8; op2:x26; dest:x14; op1val:0x5;  op2val:0x80
TEST_RR_OP(xor, x14, x8, x26, 0x85, 0x5, 0x80, x18, 16, x24)

inst_20:
// rs1==x14, rs2==x1, rd==x19, rs2_val == 256, rs1_val == 17592186044416
// opcode: xor ; op1:x14; op2:x1; dest:x19; op1val:0x100000000000;  op2val:0x100
TEST_RR_OP(xor, x19, x14, x1, 0x100000000100, 0x100000000000, 0x100, x18, 24, x24)

inst_21:
// rs1==x25, rs2==x13, rd==x8, rs2_val == 512, rs1_val == -9
// opcode: xor ; op1:x25; op2:x13; dest:x8; op1val:-0x9;  op2val:0x200
TEST_RR_OP(xor, x8, x25, x13, 0xfffffffffffffdf7, -0x9, 0x200, x18, 32, x24)

inst_22:
// rs1==x9, rs2==x0, rd==x11, rs2_val == 1024, 
// opcode: xor ; op1:x9; op2:x0; dest:x11; op1val:0xb504f334;  op2val:0x400
TEST_RR_OP(xor, x11, x9, x0, 0xb504f734, 0xb504f334, 0x400, x18, 40, x24)

inst_23:
// rs1==x27, rs2==x20, rd==x6, rs2_val == 2048, 
// opcode: xor ; op1:x27; op2:x20; dest:x6; op1val:0x5;  op2val:0x800
TEST_RR_OP(xor, x6, x27, x20, 0x805, 0x5, 0x800, x18, 48, x24)

inst_24:
// rs1==x26, rs2==x7, rd==x22, rs2_val == 4096, rs1_val == 281474976710656
// opcode: xor ; op1:x26; op2:x7; dest:x22; op1val:0x1000000000000;  op2val:0x1000
TEST_RR_OP(xor, x22, x26, x7, 0x1000000001000, 0x1000000000000, 0x1000, x18, 56, x24)

inst_25:
// rs1==x6, rs2==x17, rd==x20, rs2_val == 8192, rs1_val == 64
// opcode: xor ; op1:x6; op2:x17; dest:x20; op1val:0x40;  op2val:0x2000
TEST_RR_OP(xor, x20, x6, x17, 0x2040, 0x40, 0x2000, x18, 64, x24)

inst_26:
// rs1==x29, rs2==x30, rd==x21, rs2_val == 16384, rs1_val == 140737488355328
// opcode: xor ; op1:x29; op2:x30; dest:x21; op1val:0x800000000000;  op2val:0x4000
TEST_RR_OP(xor, x21, x29, x30, 0x800000004000, 0x800000000000, 0x4000, x18, 72, x24)

inst_27:
// rs1==x0, rs2==x16, rd==x10, rs2_val == 32768, rs1_val == -16385
// opcode: xor ; op1:x0; op2:x16; dest:x10; op1val:-0x4001;  op2val:0x8000
TEST_RR_OP(xor, x10, x0, x16, 0xffffffffffff3fff, -0x4001, 0x8000, x18, 80, x24)

inst_28:
// rs1==x11, rs2==x2, rd==x15, rs2_val == 65536, rs1_val == -134217729
// opcode: xor ; op1:x11; op2:x2; dest:x15; op1val:-0x8000001;  op2val:0x10000
TEST_RR_OP(xor, x15, x11, x2, 0xfffffffff7feffff, -0x8000001, 0x10000, x18, 88, x24)

inst_29:
// rs1==x15, rs2==x14, rd==x13, rs2_val == 131072, 
// opcode: xor ; op1:x15; op2:x14; dest:x13; op1val:-0x4001;  op2val:0x20000
TEST_RR_OP(xor, x13, x15, x14, 0xfffffffffffdbfff, -0x4001, 0x20000, x18, 96, x24)

inst_30:
// rs1==x23, rs2==x5, rd==x0, rs2_val == 262144, rs1_val == -4398046511105
// opcode: xor ; op1:x23; op2:x5; dest:x0; op1val:-0x40000000001;  op2val:0x40000
TEST_RR_OP(xor, x0, x23, x5, 0xfffffbfffffbffff, -0x40000000001, 0x40000, x18, 104, x24)

inst_31:
// rs1==x17, rs2==x8, rd==x3, rs2_val == 524288, rs1_val == 131072
// opcode: xor ; op1:x17; op2:x8; dest:x3; op1val:0x20000;  op2val:0x80000
TEST_RR_OP(xor, x3, x17, x8, 0xa0000, 0x20000, 0x80000, x18, 112, x24)

inst_32:
// rs2_val == 1048576, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:0x100000
TEST_RR_OP(xor, x12, x10, x11, 0x120000, 0x20000, 0x100000, x18, 120, x24)

inst_33:
// rs2_val == 2097152, rs1_val == 536870912
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x200000
TEST_RR_OP(xor, x12, x10, x11, 0x20200000, 0x20000000, 0x200000, x18, 128, x1)

inst_34:
// rs2_val == 4194304, rs1_val == 262144
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40000;  op2val:0x400000
TEST_RR_OP(xor, x12, x10, x11, 0x440000, 0x40000, 0x400000, x18, 136, x1)

inst_35:
// rs2_val == 8388608, rs1_val == -18014398509481985
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x40000000000001;  op2val:0x800000
TEST_RR_OP(xor, x12, x10, x11, 0xffbfffffff7fffff, -0x40000000000001, 0x800000, x18, 144, x1)

inst_36:
// rs2_val == 16777216, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x1000000
TEST_RR_OP(xor, x12, x10, x11, 0x1000004, 0x4, 0x1000000, x18, 152, x1)

inst_37:
// rs2_val == 33554432, rs1_val == 67108864
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0x2000000
TEST_RR_OP(xor, x12, x10, x11, 0x6000000, 0x4000000, 0x2000000, x18, 160, x1)

inst_38:
// rs2_val == 67108864, rs1_val == -2097153
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x200001;  op2val:0x4000000
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffbdfffff, -0x200001, 0x4000000, x18, 168, x1)

inst_39:
// rs2_val == 134217728, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x8000000
TEST_RR_OP(xor, x12, x10, x11, 0x8000006, 0x6, 0x8000000, x18, 176, x1)

inst_40:
// rs2_val == 268435456, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x10000000
TEST_RR_OP(xor, x12, x10, x11, 0x10010000, 0x10000, 0x10000000, x18, 184, x1)

inst_41:
// rs2_val == 536870912, rs1_val == -513
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:0x20000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffdffffdff, -0x201, 0x20000000, x18, 192, x1)

inst_42:
// rs2_val == 1073741824, rs1_val == -5
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x40000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffbffffffb, -0x5, 0x40000000, x18, 200, x1)

inst_43:
// rs2_val == 2147483648, rs1_val == -4503599627370497
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x10000000000001;  op2val:0x80000000
TEST_RR_OP(xor, x12, x10, x11, 0xffefffff7fffffff, -0x10000000000001, 0x80000000, x18, 208, x1)

inst_44:
// rs2_val == 4294967296, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x100000000
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffefffffffb, -0x5, 0x100000000, x18, 216, x1)

inst_45:
// rs2_val == 8589934592, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1;  op2val:0x200000000
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffdffffffff, -0x1, 0x200000000, x18, 224, x1)

inst_46:
// rs2_val == 17179869184, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x400000000
TEST_RR_OP(xor, x12, x10, x11, 0x400000004, 0x4, 0x400000000, x18, 232, x1)

inst_47:
// rs2_val == 34359738368, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x800000000
TEST_RR_OP(xor, x12, x10, x11, 0x800000006, 0x6, 0x800000000, x18, 240, x1)

inst_48:
// rs2_val == 68719476736, rs1_val == 4294967296
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x100000000;  op2val:0x1000000000
TEST_RR_OP(xor, x12, x10, x11, 0x1100000000, 0x100000000, 0x1000000000, x18, 248, x1)

inst_49:
// rs2_val == 137438953472, rs1_val == 144115188075855872
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200000000000000;  op2val:0x2000000000
TEST_RR_OP(xor, x12, x10, x11, 0x200002000000000, 0x200000000000000, 0x2000000000, x18, 256, x1)

inst_50:
// rs2_val == 274877906944, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200000000000;  op2val:0x4000000000
TEST_RR_OP(xor, x12, x10, x11, 0x204000000000, 0x200000000000, 0x4000000000, x18, 264, x1)

inst_51:
// rs2_val == 549755813888, rs1_val == 34359738368
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800000000;  op2val:0x8000000000
TEST_RR_OP(xor, x12, x10, x11, 0x8800000000, 0x800000000, 0x8000000000, x18, 272, x1)

inst_52:
// rs2_val == 1099511627776, rs1_val == -2305843009213693953
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2000000000000001;  op2val:0x10000000000
TEST_RR_OP(xor, x12, x10, x11, 0xdffffeffffffffff, -0x2000000000000001, 0x10000000000, x18, 280, x1)

inst_53:
// rs2_val == 2199023255552, rs1_val == -3
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x3;  op2val:0x20000000000
TEST_RR_OP(xor, x12, x10, x11, 0xfffffdfffffffffd, -0x3, 0x20000000000, x18, 288, x1)

inst_54:
// rs2_val == 4398046511104, rs1_val == 1125899906842624
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000000000000;  op2val:0x40000000000
TEST_RR_OP(xor, x12, x10, x11, 0x4040000000000, 0x4000000000000, 0x40000000000, x18, 296, x1)

inst_55:
// rs2_val == 8796093022208, rs1_val == -4611686018427387905
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x4000000000000001;  op2val:0x80000000000
TEST_RR_OP(xor, x12, x10, x11, 0xbffff7ffffffffff, -0x4000000000000001, 0x80000000000, x18, 304, x1)

inst_56:
// rs2_val == 17592186044416, rs1_val == 268435456
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x100000000000
TEST_RR_OP(xor, x12, x10, x11, 0x100010000000, 0x10000000, 0x100000000000, x18, 312, x1)

inst_57:
// rs2_val == 35184372088832, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x7;  op2val:0x200000000000
TEST_RR_OP(xor, x12, x10, x11, 0x200000000007, 0x7, 0x200000000000, x18, 320, x1)

inst_58:
// rs2_val == 70368744177664, rs1_val == -274877906945
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x4000000001;  op2val:0x400000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffbfbfffffffff, -0x4000000001, 0x400000000000, x18, 328, x1)

inst_59:
// rs2_val == 140737488355328, rs1_val == -262145
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:0x800000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffff7ffffffbffff, -0x40001, 0x800000000000, x18, 336, x1)

inst_60:
// rs2_val == 281474976710656, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x1000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x10000b504f334, 0xb504f334, 0x1000000000000, x18, 344, x1)

inst_61:
// rs2_val == 1125899906842624, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x3;  op2val:0x4000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xfffbfffffffffffd, -0x3, 0x4000000000000, x18, 352, x1)

inst_62:
// rs2_val == 2251799813685248, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x8000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x8000000000000, 0x0, 0x8000000000000, x18, 360, x1)

inst_63:
// rs2_val == 4503599627370496, rs1_val == 16
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10;  op2val:0x10000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x10000000000010, 0x10, 0x10000000000000, x18, 368, x1)

inst_64:
// rs2_val == 9007199254740992, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x20000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x20000000000006, 0x6, 0x20000000000000, x18, 376, x1)

inst_65:
// rs2_val == 18014398509481984, rs1_val == -257
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x101;  op2val:0x40000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffbffffffffffeff, -0x101, 0x40000000000000, x18, 384, x1)

inst_66:
// rs2_val == 36028797018963968, rs1_val == 16777216
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1000000;  op2val:0x80000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x80000001000000, 0x1000000, 0x80000000000000, x18, 392, x1)

inst_67:
// rs2_val == 144115188075855872, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x200000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x2000000b504f334, 0xb504f334, 0x200000000000000, x18, 400, x1)

inst_68:
// rs2_val == 288230376151711744, rs1_val == -9007199254740993
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x20000000000001;  op2val:0x400000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xfbdfffffffffffff, -0x20000000000001, 0x400000000000000, x18, 408, x1)

inst_69:
// rs2_val == 576460752303423488, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xa;  op2val:0x800000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xf7fffffffffffff6, -0xa, 0x800000000000000, x18, 416, x1)

inst_70:
// rs2_val == 1152921504606846976, rs1_val == 8796093022208
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80000000000;  op2val:0x1000000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x1000080000000000, 0x80000000000, 0x1000000000000000, x18, 424, x1)

inst_71:
// rs2_val == 2305843009213693952, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200000000000000;  op2val:0x2000000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x2200000000000000, 0x200000000000000, 0x2000000000000000, x18, 432, x1)

inst_72:
// rs2_val == 4611686018427387904, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x4000000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xbffffffffffffffb, -0x5, 0x4000000000000000, x18, 440, x1)

inst_73:
// rs2_val == -2, rs1_val == 2147483648
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:-0x2
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff7ffffffe, 0x80000000, -0x2, x18, 448, x1)

inst_74:
// rs2_val == -3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x3
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffe, 0x3, -0x3, x18, 456, x1)

inst_75:
// rs2_val == -5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x10000000001;  op2val:-0x5
TEST_RR_OP(xor, x12, x10, x11, 0x10000000004, -0x10000000001, -0x5, x18, 464, x1)

inst_76:
// rs2_val == -9, rs1_val == -137438953473
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2000000001;  op2val:-0x9
TEST_RR_OP(xor, x12, x10, x11, 0x2000000008, -0x2000000001, -0x9, x18, 472, x1)

inst_77:
// rs2_val == -17, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x20000000000001;  op2val:-0x11
TEST_RR_OP(xor, x12, x10, x11, 0x20000000000010, -0x20000000000001, -0x11, x18, 480, x1)

inst_78:
// rs2_val == -33, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x21
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffdf, 0x0, -0x21, x18, 488, x1)

inst_79:
// rs2_val == -129, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:-0x81
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffff7e, 0x1, -0x81, x18, 496, x1)

inst_80:
// rs2_val == -257, rs1_val == 288230376151711744
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x400000000000000;  op2val:-0x101
TEST_RR_OP(xor, x12, x10, x11, 0xfbfffffffffffeff, 0x400000000000000, -0x101, x18, 504, x1)

inst_81:
// rs2_val == -513, rs1_val == 1099511627776
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000000;  op2val:-0x201
TEST_RR_OP(xor, x12, x10, x11, 0xfffffefffffffdff, 0x10000000000, -0x201, x18, 512, x1)

inst_82:
// rs2_val == -1025, rs1_val == 8589934592
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200000000;  op2val:-0x401
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffdfffffbff, 0x200000000, -0x401, x18, 520, x1)

inst_83:
// rs2_val == -4097, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x1001
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffeffb, 0x4, -0x1001, x18, 528, x1)

inst_84:
// rs2_val == -8193, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800000000000;  op2val:-0x2001
TEST_RR_OP(xor, x12, x10, x11, 0xffff7fffffffdfff, 0x800000000000, -0x2001, x18, 536, x1)

inst_85:
// rs2_val == -16385, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x6;  op2val:-0x4001
TEST_RR_OP(xor, x12, x10, x11, 0x4005, -0x6, -0x4001, x18, 544, x1)

inst_86:
// rs2_val == -32769, rs1_val == -67108865
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:-0x8001
TEST_RR_OP(xor, x12, x10, x11, 0x4008000, -0x4000001, -0x8001, x18, 552, x1)

inst_87:
// rs2_val == -65537, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x10001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffeffff, 0x0, -0x10001, x18, 560, x1)

inst_88:
// rs2_val == -131073, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:-0x20001
TEST_RR_OP(xor, x12, x10, x11, 0xb506f331, -0xb504f332, -0x20001, x18, 568, x1)

inst_89:
// rs2_val == -262145, rs1_val == -34359738369
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x800000001;  op2val:-0x40001
TEST_RR_OP(xor, x12, x10, x11, 0x800040000, -0x800000001, -0x40001, x18, 576, x1)

inst_90:
// rs2_val == -524289, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800000000000;  op2val:-0x80001
TEST_RR_OP(xor, x12, x10, x11, 0xffff7ffffff7ffff, 0x800000000000, -0x80001, x18, 584, x1)

inst_91:
// rs2_val == -1048577, rs1_val == -131073
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x20001;  op2val:-0x100001
TEST_RR_OP(xor, x12, x10, x11, 0x120000, -0x20001, -0x100001, x18, 592, x1)

inst_92:
// rs2_val == -2097153, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80000000000;  op2val:-0x200001
TEST_RR_OP(xor, x12, x10, x11, 0xfffff7ffffdfffff, 0x80000000000, -0x200001, x18, 600, x1)

inst_93:
// rs2_val == -4194305, rs1_val == 512
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200;  op2val:-0x400001
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffbffdff, 0x200, -0x400001, x18, 608, x1)

inst_94:
// rs2_val == -8388609, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:-0x800001
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccc4ccccc, 0x3333333333333333, -0x800001, x18, 616, x1)

inst_95:
// rs2_val == -16777217, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:-0x1000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffaffffff, 0x4000000, -0x1000001, x18, 624, x1)

inst_96:
// rs2_val == -33554433, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:-0x2000001
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaa8aaaaaa, 0x5555555555555555, -0x2000001, x18, 632, x1)

inst_97:
// rs2_val == -67108865, rs1_val == 2305843009213693952
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000000000000000;  op2val:-0x4000001
TEST_RR_OP(xor, x12, x10, x11, 0xdffffffffbffffff, 0x2000000000000000, -0x4000001, x18, 640, x1)

inst_98:
// rs2_val == -134217729, rs1_val == 8
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8;  op2val:-0x8000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffff7fffff7, 0x8, -0x8000001, x18, 648, x1)

inst_99:
// rs2_val == -268435457, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1000000000000;  op2val:-0x10000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffeffffefffffff, 0x1000000000000, -0x10000001, x18, 656, x1)

inst_100:
// rs2_val == -536870913, rs1_val == -17
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:-0x20000001
TEST_RR_OP(xor, x12, x10, x11, 0x20000010, -0x11, -0x20000001, x18, 664, x1)

inst_101:
// rs2_val == -1073741825, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:-0x40000001
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaeaaaaaaa, 0x5555555555555555, -0x40000001, x18, 672, x1)

inst_102:
// rs2_val == -2147483649, rs1_val == -144115188075855873
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x200000000000001;  op2val:-0x80000001
TEST_RR_OP(xor, x12, x10, x11, 0x200000080000000, -0x200000000000001, -0x80000001, x18, 680, x1)

inst_103:
// rs2_val == -4294967297, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1;  op2val:-0x100000001
TEST_RR_OP(xor, x12, x10, x11, 0x100000000, -0x1, -0x100000001, x18, 688, x1)

inst_104:
// rs2_val == -8589934593, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:-0x200000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffdfffffffe, 0x1, -0x200000001, x18, 696, x1)

inst_105:
// rs2_val == -17179869185, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:-0x400000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffbbfffffff, 0x40000000, -0x400000001, x18, 704, x1)

inst_106:
// rs2_val == -34359738369, rs1_val == 4611686018427387904
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000000000000000;  op2val:-0x800000001
TEST_RR_OP(xor, x12, x10, x11, 0xbffffff7ffffffff, 0x4000000000000000, -0x800000001, x18, 712, x1)

inst_107:
// rs2_val == -137438953473, rs1_val == -4294967297
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x100000001;  op2val:-0x2000000001
TEST_RR_OP(xor, x12, x10, x11, 0x2100000000, -0x100000001, -0x2000000001, x18, 720, x1)

inst_108:
// rs2_val == -274877906945, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200000000000000;  op2val:-0x4000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfdffffbfffffffff, 0x200000000000000, -0x4000000001, x18, 728, x1)

inst_109:
// rs2_val == -549755813889, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80000;  op2val:-0x8000000001
TEST_RR_OP(xor, x12, x10, x11, 0xffffff7ffff7ffff, 0x80000, -0x8000000001, x18, 736, x1)

inst_110:
// rs2_val == -1099511627777, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x10000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffeffffffffff, 0x0, -0x10000000001, x18, 744, x1)

inst_111:
// rs2_val == -2199023255553, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:-0x20000000001
TEST_RR_OP(xor, x12, x10, x11, 0xcccccecccccccccd, 0x3333333333333332, -0x20000000001, x18, 752, x1)

inst_112:
// rs2_val == -4398046511105, rs1_val == -2049
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x801;  op2val:-0x40000000001
TEST_RR_OP(xor, x12, x10, x11, 0x40000000800, -0x801, -0x40000000001, x18, 760, x1)

inst_113:
// rs2_val == -8796093022209, rs1_val == 137438953472
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000000000;  op2val:-0x80000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffff7dfffffffff, 0x2000000000, -0x80000000001, x18, 768, x1)

inst_114:
// rs2_val == -17592186044417, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xa;  op2val:-0x100000000001
TEST_RR_OP(xor, x12, x10, x11, 0x100000000009, -0xa, -0x100000000001, x18, 776, x1)

inst_115:
// rs2_val == -35184372088833, rs1_val == 562949953421312
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000000000000;  op2val:-0x200000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffddfffffffffff, 0x2000000000000, -0x200000000001, x18, 784, x1)

inst_116:
// rs2_val == -70368744177665, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x4;  op2val:-0x400000000001
TEST_RR_OP(xor, x12, x10, x11, 0x400000000003, -0x4, -0x400000000001, x18, 792, x1)

inst_117:
// rs2_val == -140737488355329, rs1_val == 2
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x800000000001
TEST_RR_OP(xor, x12, x10, x11, 0xffff7ffffffffffd, 0x2, -0x800000000001, x18, 800, x1)

inst_118:
// rs2_val == -281474976710657, rs1_val == 134217728
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:-0x1000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffefffff7ffffff, 0x8000000, -0x1000000000001, x18, 808, x1)

inst_119:
// rs2_val == -562949953421313, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000000;  op2val:-0x2000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffdfeffffffffff, 0x10000000000, -0x2000000000001, x18, 816, x1)

inst_120:
// rs2_val == -1125899906842625, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000000;  op2val:-0x4000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffbfeffffffffff, 0x10000000000, -0x4000000000001, x18, 824, x1)

inst_121:
// rs2_val == -2251799813685249, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x8000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfff7ffffffffffff, 0x0, -0x8000000000001, x18, 832, x1)

inst_122:
// rs2_val == -4503599627370497, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:-0x10000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xffeffffffffffffe, 0x1, -0x10000000000001, x18, 840, x1)

inst_123:
// rs2_val == -9007199254740993, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:-0x20000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xffdfffffdfffffff, 0x20000000, -0x20000000000001, x18, 848, x1)

inst_124:
// rs2_val == -18014398509481985, rs1_val == -1025
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x401;  op2val:-0x40000000000001
TEST_RR_OP(xor, x12, x10, x11, 0x40000000000400, -0x401, -0x40000000000001, x18, 856, x1)

inst_125:
// rs2_val == -36028797018963969, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x80000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xff7ffffffffffffd, 0x2, -0x80000000000001, x18, 864, x1)

inst_126:
// rs2_val == -72057594037927937, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000000000000;  op2val:-0x100000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfefbffffffffffff, 0x4000000000000, -0x100000000000001, x18, 872, x1)

inst_127:
// rs2_val == -144115188075855873, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x6;  op2val:-0x200000000000001
TEST_RR_OP(xor, x12, x10, x11, 0x200000000000005, -0x6, -0x200000000000001, x18, 880, x1)

inst_128:
// rs2_val == -576460752303423489, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x100000000;  op2val:-0x800000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xf7fffffeffffffff, 0x100000000, -0x800000000000001, x18, 888, x1)

inst_129:
// rs2_val == -1152921504606846977, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:-0x1000000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xbaaaaaaaaaaaaaab, 0x5555555555555554, -0x1000000000000001, x18, 896, x1)

inst_130:
// rs2_val == -2305843009213693953, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:-0x2000000000000001
TEST_RR_OP(xor, x12, x10, x11, 0xdfffffff7fffffff, 0x80000000, -0x2000000000000001, x18, 904, x1)

inst_131:
// rs2_val == -4611686018427387905, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x8;  op2val:-0x4000000000000001
TEST_RR_OP(xor, x12, x10, x11, 0x4000000000000007, -0x8, -0x4000000000000001, x18, 912, x1)

inst_132:
// rs2_val == 6148914691236517205, rs1_val == 32
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555575, 0x20, 0x5555555555555555, x18, 920, x1)

inst_133:
// rs2_val == -6148914691236517206, rs1_val==4 and rs2_val==-6148914691236517206
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaae, 0x4, -0x5555555555555556, x18, 928, x1)

inst_134:
// rs1_val == 128, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:-0x40000001
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffbfffff7f, 0x80, -0x40000001, x18, 936, x1)

inst_135:
// rs1_val == 256, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x100;  op2val:0x400000
TEST_RR_OP(xor, x12, x10, x11, 0x400100, 0x100, 0x400000, x18, 944, x1)

inst_136:
// rs1_val == 1024, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:0x4000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x4000000000400, 0x400, 0x4000000000000, x18, 952, x1)

inst_137:
// rs1_val == 2048, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800;  op2val:-0x20001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffdf7ff, 0x800, -0x20001, x18, 960, x1)

inst_138:
// rs1_val == 4096, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1000;  op2val:0x100000000000
TEST_RR_OP(xor, x12, x10, x11, 0x100000001000, 0x1000, 0x100000000000, x18, 968, x1)

inst_139:
// rs1_val == 8192, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000;  op2val:-0x20000000001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffdffffffdfff, 0x2000, -0x20000000001, x18, 976, x1)

inst_140:
// rs1_val == 16384, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333337334, 0x4000, 0x3333333333333334, x18, 984, x1)

inst_141:
// rs1_val == 32768, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8000;  op2val:0x800000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x800000000008000, 0x8000, 0x800000000000000, x18, 992, x1)

inst_142:
// rs1_val == 1048576, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x100000;  op2val:-0x80000001
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff7fefffff, 0x100000, -0x80000001, x18, 1000, x1)

inst_143:
// rs1_val == 2097152, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200000;  op2val:-0x80000001
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff7fdfffff, 0x200000, -0x80000001, x18, 1008, x1)

inst_144:
// rs1_val == 4194304, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:0x7fffffffffffffff
TEST_RR_OP(xor, x12, x10, x11, 0x7fffffffffbfffff, 0x400000, 0x7fffffffffffffff, x18, 1016, x1)

inst_145:
// rs1_val == 8388608, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800000;  op2val:-0x3
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffff7ffffd, 0x800000, -0x3, x18, 1024, x1)

inst_146:
// rs1_val == 33554432, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:-0x4
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffdfffffc, 0x2000000, -0x4, x18, 1032, x1)

inst_147:
// rs1_val == 17179869184, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x400000000;  op2val:-0x100000000001
TEST_RR_OP(xor, x12, x10, x11, 0xffffeffbffffffff, 0x400000000, -0x100000000001, x18, 1040, x1)

inst_148:
// rs1_val == 68719476736, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1000000000;  op2val:0x200000000000
TEST_RR_OP(xor, x12, x10, x11, 0x201000000000, 0x1000000000, 0x200000000000, x18, 1048, x1)

inst_149:
// rs1_val == 549755813888, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8000000000;  op2val:0x80000000
TEST_RR_OP(xor, x12, x10, x11, 0x8080000000, 0x8000000000, 0x80000000, x18, 1056, x1)

inst_150:
// rs1_val == 2199023255552, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000000000;  op2val:-0x1001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffdffffffefff, 0x20000000000, -0x1001, x18, 1064, x1)

inst_151:
// rs1_val == 4398046511104, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40000000000;  op2val:-0x10001
TEST_RR_OP(xor, x12, x10, x11, 0xfffffbfffffeffff, 0x40000000000, -0x10001, x18, 1072, x1)

inst_152:
// rs1_val == 70368744177664, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x400000000000;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555155555555554, 0x400000000000, 0x5555555555555554, x18, 1080, x1)

inst_153:
// rs1_val == 2251799813685248, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8000000000000;  op2val:0x4000000000
TEST_RR_OP(xor, x12, x10, x11, 0x8004000000000, 0x8000000000000, 0x4000000000, x18, 1088, x1)

inst_154:
// rs1_val == 4503599627370496, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000000000;  op2val:-0x11
TEST_RR_OP(xor, x12, x10, x11, 0xffefffffffffffef, 0x10000000000000, -0x11, x18, 1096, x1)

inst_155:
// rs1_val == 9007199254740992, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000000000000;  op2val:0x10000000
TEST_RR_OP(xor, x12, x10, x11, 0x20000010000000, 0x20000000000000, 0x10000000, x18, 1104, x1)

inst_156:
// rs1_val == 18014398509481984, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40000000000000;  op2val:0x20000000000
TEST_RR_OP(xor, x12, x10, x11, 0x40020000000000, 0x40000000000000, 0x20000000000, x18, 1112, x1)

inst_157:
// rs1_val == 36028797018963968, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80000000000000;  op2val:0x100000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x180000000000000, 0x80000000000000, 0x100000000000000, x18, 1120, x1)

inst_158:
// rs1_val == 72057594037927936, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x100000000000000;  op2val:0x8000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x108000000000000, 0x100000000000000, 0x8000000000000, x18, 1128, x1)

inst_159:
// rs1_val == 576460752303423488, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800000000000000;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3b33333333333334, 0x800000000000000, 0x3333333333333334, x18, 1136, x1)

inst_160:
// rs1_val == 1152921504606846976, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1000000000000000;  op2val:-0x200000000001
TEST_RR_OP(xor, x12, x10, x11, 0xefffdfffffffffff, 0x1000000000000000, -0x200000000001, x18, 1144, x1)

inst_161:
// rs1_val == -2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2;  op2val:-0x1000001
TEST_RR_OP(xor, x12, x10, x11, 0x1000001, -0x2, -0x1000001, x18, 1152, x1)

inst_162:
// rs1_val == -33, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x21;  op2val:-0x400000001
TEST_RR_OP(xor, x12, x10, x11, 0x400000020, -0x21, -0x400000001, x18, 1160, x1)

inst_163:
// rs1_val == -129, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x81;  op2val:0x200000000
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffdffffff7f, -0x81, 0x200000000, x18, 1168, x1)

inst_164:
// rs1_val == -4097, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1001;  op2val:0x20000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffdfffffffffefff, -0x1001, 0x20000000000000, x18, 1176, x1)

inst_165:
// rs1_val == -8193, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:-0x4000001
TEST_RR_OP(xor, x12, x10, x11, 0x4002000, -0x2001, -0x4000001, x18, 1184, x1)

inst_166:
// rs1_val == -32769, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x8001;  op2val:-0x400001
TEST_RR_OP(xor, x12, x10, x11, 0x408000, -0x8001, -0x400001, x18, 1192, x1)

inst_167:
// rs1_val == -65537, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x10001;  op2val:-0xa
TEST_RR_OP(xor, x12, x10, x11, 0x10009, -0x10001, -0xa, x18, 1200, x1)

inst_168:
// rs1_val == -524289, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x80001;  op2val:0x20000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffdff7ffff, -0x80001, 0x20000000, x18, 1208, x1)

inst_169:
// rs1_val == -1048577, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x100001;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffefffff, -0x100001, 0x0, x18, 1216, x1)

inst_170:
// rs1_val == -4194305, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x400001;  op2val:-0x9
TEST_RR_OP(xor, x12, x10, x11, 0x400008, -0x400001, -0x9, x18, 1224, x1)

inst_171:
// rs1_val == -8388609, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x800001;  op2val:0x200000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffdfffff7fffff, -0x800001, 0x200000000000, x18, 1232, x1)

inst_172:
// rs1_val == -16777217, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:-0x2000000000001
TEST_RR_OP(xor, x12, x10, x11, 0x2000001000000, -0x1000001, -0x2000000000001, x18, 1240, x1)

inst_173:
// rs1_val == -33554433, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2000001;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffdffffff, -0x2000001, 0x0, x18, 1248, x1)

inst_174:
// rs1_val == -268435457, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:0x800000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffff7fffefffffff, -0x10000001, 0x800000000000, x18, 1256, x1)

inst_175:
// rs1_val == -536870913, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x20000001;  op2val:-0x400000000001
TEST_RR_OP(xor, x12, x10, x11, 0x400020000000, -0x20000001, -0x400000000001, x18, 1264, x1)

inst_176:
// rs1_val == -1073741825, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x40000001;  op2val:-0x10000000000001
TEST_RR_OP(xor, x12, x10, x11, 0x10000040000000, -0x40000001, -0x10000000000001, x18, 1272, x1)

inst_177:
// rs1_val == -2147483649, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x80000001;  op2val:0x200000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffdfff7fffffff, -0x80000001, 0x200000000000, x18, 1280, x1)

inst_178:
// rs1_val == -8589934593, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x200000001;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x2b504f332, -0x200000001, -0xb504f333, x18, 1288, x1)

inst_179:
// rs1_val == -68719476737, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1000000001;  op2val:-0x20000000001
TEST_RR_OP(xor, x12, x10, x11, 0x21000000000, -0x1000000001, -0x20000000001, x18, 1296, x1)

inst_180:
// rs1_val == -549755813889, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x8000000001;  op2val:0x80000
TEST_RR_OP(xor, x12, x10, x11, 0xffffff7ffff7ffff, -0x8000000001, 0x80000, x18, 1304, x1)

inst_181:
// rs1_val == -2199023255553, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x20000000001;  op2val:0x400000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffbdffffffffff, -0x20000000001, 0x400000000000, x18, 1312, x1)

inst_182:
// rs1_val == -8796093022209, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000001;  op2val:0x40000000
TEST_RR_OP(xor, x12, x10, x11, 0xfffff7ffbfffffff, -0x80000000001, 0x40000000, x18, 1320, x1)

inst_183:
// rs1_val == -35184372088833, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x200000000001;  op2val:0x20000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xffdfdfffffffffff, -0x200000000001, 0x20000000000000, x18, 1328, x1)

inst_184:
// rs1_val == -70368744177665, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x400000000001;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffbfff4afb0ccd, -0x400000000001, 0xb504f332, x18, 1336, x1)

inst_185:
// rs1_val == -140737488355329, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x800000000001;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x8000b504f331, -0x800000000001, -0xb504f332, x18, 1344, x1)

inst_186:
// rs1_val == -562949953421313, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2000000000001;  op2val:-0x8000000000000000
TEST_RR_OP(xor, x12, x10, x11, 0x7ffdffffffffffff, -0x2000000000001, -0x8000000000000000, x18, 1352, x1)

inst_187:
// rs1_val == -1125899906842625, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x4000000000001;  op2val:0x800
TEST_RR_OP(xor, x12, x10, x11, 0xfffbfffffffff7ff, -0x4000000000001, 0x800, x18, 1360, x1)

inst_188:
// rs1_val == -2251799813685249, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x8000000000001;  op2val:0x100000000
TEST_RR_OP(xor, x12, x10, x11, 0xfff7fffeffffffff, -0x8000000000001, 0x100000000, x18, 1368, x1)

inst_189:
// rs1_val == -36028797018963969, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000000001;  op2val:0x800000000000000
TEST_RR_OP(xor, x12, x10, x11, 0xf77fffffffffffff, -0x80000000000001, 0x800000000000000, x18, 1376, x1)

inst_190:
// rs1_val == -72057594037927937, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x100000000000001;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x5455555555555555, -0x100000000000001, -0x5555555555555556, x18, 1384, x1)

inst_191:
// rs1_val == -288230376151711745, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x400000000000001;  op2val:-0x100000000000001
TEST_RR_OP(xor, x12, x10, x11, 0x500000000000000, -0x400000000000001, -0x100000000000001, x18, 1392, x1)

inst_192:
// rs1_val == -576460752303423489, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x800000000000001;  op2val:-0x80000000001
TEST_RR_OP(xor, x12, x10, x11, 0x800080000000000, -0x800000000000001, -0x80000000001, x18, 1400, x1)

inst_193:
// rs1_val == -1152921504606846977, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1000000000000001;  op2val:-0x200000001
TEST_RR_OP(xor, x12, x10, x11, 0x1000000200000000, -0x1000000000000001, -0x200000001, x18, 1408, x1)

inst_194:
// rs1_val == -6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:-0x200001
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555755555, -0x5555555555555556, -0x200001, x18, 1416, x1)

inst_195:
// rs1_val==3 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x3, 0x3, x18, 1424, x1)

inst_196:
// rs1_val==3 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x3, 0x5555555555555555, x18, 1432, x1)

inst_197:
// rs1_val==3 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa9, 0x3, -0x5555555555555556, x18, 1440, x1)

inst_198:
// rs1_val==3 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x3, 0x5, x18, 1448, x1)

inst_199:
// rs1_val==3 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x3, 0x3333333333333333, x18, 1456, x1)

inst_200:
// rs1_val==3 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x3, 0x6666666666666666, x18, 1464, x1)

inst_201:
// rs1_val==3 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cce, 0x3, -0xb504f333, x18, 1472, x1)

inst_202:
// rs1_val==3 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xb504f330, 0x3, 0xb504f333, x18, 1480, x1)

inst_203:
// rs1_val==3 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x3, 0x2, x18, 1488, x1)

inst_204:
// rs1_val==3 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555557, 0x3, 0x5555555555555554, x18, 1496, x1)

inst_205:
// rs1_val==3 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x3, 0x0, x18, 1504, x1)

inst_206:
// rs1_val==3 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x3, 0x4, x18, 1512, x1)

inst_207:
// rs1_val==3 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x3, 0x3333333333333332, x18, 1520, x1)

inst_208:
// rs1_val==3 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x3, 0x6666666666666665, x18, 1528, x1)

inst_209:
// rs1_val==3 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xb504f331, 0x3, 0xb504f332, x18, 1536, x1)

inst_210:
// rs1_val==3 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x3, 0x5555555555555556, x18, 1544, x1)

inst_211:
// rs1_val==3 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa8, 0x3, -0x5555555555555555, x18, 1552, x1)

inst_212:
// rs1_val==3 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x3, 0x6, x18, 1560, x1)

inst_213:
// rs1_val==3 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333337, 0x3, 0x3333333333333334, x18, 1568, x1)

inst_214:
// rs1_val==3 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666664, 0x3, 0x6666666666666667, x18, 1576, x1)

inst_215:
// rs1_val==3 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccd, 0x3, -0xb504f332, x18, 1584, x1)

inst_216:
// rs1_val==3 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xb504f337, 0x3, 0xb504f334, x18, 1592, x1)

inst_217:
// rs1_val==6148914691236517205 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x5555555555555555, 0x3, x18, 1600, x1)

inst_218:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x5555555555555555, 0x5555555555555555, x18, 1608, x1)

inst_219:
// rs1_val==6148914691236517205 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, 0x5555555555555555, -0x5555555555555556, x18, 1616, x1)

inst_220:
// rs1_val==6148914691236517205 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555550, 0x5555555555555555, 0x5, x18, 1624, x1)

inst_221:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x5555555555555555, 0x3333333333333333, x18, 1632, x1)

inst_222:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x5555555555555555, 0x6666666666666666, x18, 1640, x1)

inst_223:
// rs1_val==6148914691236517205 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, 0x5555555555555555, -0xb504f333, x18, 1648, x1)

inst_224:
// rs1_val==6148914691236517205 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a666, 0x5555555555555555, 0xb504f333, x18, 1656, x1)

inst_225:
// rs1_val==6148914691236517205 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555557, 0x5555555555555555, 0x2, x18, 1664, x1)

inst_226:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x5555555555555555, 0x5555555555555554, x18, 1672, x1)

inst_227:
// rs1_val==6148914691236517205 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x5555555555555555, 0x0, x18, 1680, x1)

inst_228:
// rs1_val==6148914691236517205 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555551, 0x5555555555555555, 0x4, x18, 1688, x1)

inst_229:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x5555555555555555, 0x3333333333333332, x18, 1696, x1)

inst_230:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x5555555555555555, 0x6666666666666665, x18, 1704, x1)

inst_231:
// rs1_val==6148914691236517205 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a667, 0x5555555555555555, 0xb504f332, x18, 1712, x1)

inst_232:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x5555555555555555, 0x5555555555555556, x18, 1720, x1)

inst_233:
// rs1_val==6148914691236517205 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffe, 0x5555555555555555, -0x5555555555555555, x18, 1728, x1)

inst_234:
// rs1_val==6148914691236517205 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555553, 0x5555555555555555, 0x6, x18, 1736, x1)

inst_235:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666661, 0x5555555555555555, 0x3333333333333334, x18, 1744, x1)

inst_236:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x5555555555555555, 0x6666666666666667, x18, 1752, x1)

inst_237:
// rs1_val==6148914691236517205 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599b, 0x5555555555555555, -0xb504f332, x18, 1760, x1)

inst_238:
// rs1_val==6148914691236517205 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555555;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a661, 0x5555555555555555, 0xb504f334, x18, 1768, x1)

inst_239:
// rs1_val==-6148914691236517206 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa9, -0x5555555555555556, 0x3, x18, 1776, x1)

inst_240:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, -0x5555555555555556, 0x5555555555555555, x18, 1784, x1)

inst_241:
// rs1_val==-6148914691236517206 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0x5555555555555556, -0x5555555555555556, x18, 1792, x1)

inst_242:
// rs1_val==-6148914691236517206 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaaf, -0x5555555555555556, 0x5, x18, 1800, x1)

inst_243:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999999, -0x5555555555555556, 0x3333333333333333, x18, 1808, x1)

inst_244:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccc, -0x5555555555555556, 0x6666666666666666, x18, 1816, x1)

inst_245:
// rs1_val==-6148914691236517206 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a667, -0x5555555555555556, -0xb504f333, x18, 1824, x1)

inst_246:
// rs1_val==-6148914691236517206 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5999, -0x5555555555555556, 0xb504f333, x18, 1832, x1)

inst_247:
// rs1_val==-6148914691236517206 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa8, -0x5555555555555556, 0x2, x18, 1840, x1)

inst_248:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffe, -0x5555555555555556, 0x5555555555555554, x18, 1848, x1)

inst_249:
// rs1_val==-6148914691236517206 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, -0x5555555555555556, 0x0, x18, 1856, x1)

inst_250:
// rs1_val==-6148914691236517206 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaae, -0x5555555555555556, 0x4, x18, 1864, x1)

inst_251:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999998, -0x5555555555555556, 0x3333333333333332, x18, 1872, x1)

inst_252:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccf, -0x5555555555555556, 0x6666666666666665, x18, 1880, x1)

inst_253:
// rs1_val==-6148914691236517206 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, -0x5555555555555556, 0xb504f332, x18, 1888, x1)

inst_254:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffc, -0x5555555555555556, 0x5555555555555556, x18, 1896, x1)

inst_255:
// rs1_val==-6148914691236517206 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x1, -0x5555555555555556, -0x5555555555555555, x18, 1904, x1)

inst_256:
// rs1_val==-6148914691236517206 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaac, -0x5555555555555556, 0x6, x18, 1912, x1)

inst_257:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x999999999999999e, -0x5555555555555556, 0x3333333333333334, x18, 1920, x1)

inst_258:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccd, -0x5555555555555556, 0x6666666666666667, x18, 1928, x1)

inst_259:
// rs1_val==-6148914691236517206 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a664, -0x5555555555555556, -0xb504f332, x18, 1936, x1)

inst_260:
// rs1_val==-6148914691236517206 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555556;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599e, -0x5555555555555556, 0xb504f334, x18, 1944, x1)

inst_261:
// rs1_val==5 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x5, 0x3, x18, 1952, x1)

inst_262:
// rs1_val==5 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555550, 0x5, 0x5555555555555555, x18, 1960, x1)

inst_263:
// rs1_val==5 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaaf, 0x5, -0x5555555555555556, x18, 1968, x1)

inst_264:
// rs1_val==5 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x5, 0x5, x18, 1976, x1)

inst_265:
// rs1_val==5 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333336, 0x5, 0x3333333333333333, x18, 1984, x1)

inst_266:
// rs1_val==5 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666663, 0x5, 0x6666666666666666, x18, 1992, x1)

inst_267:
// rs1_val==5 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cc8, 0x5, -0xb504f333, x18, 2000, x1)

inst_268:
// rs1_val==5 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xb504f336, 0x5, 0xb504f333, x18, 2008, x1)

inst_269:
// rs1_val==5 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x5, 0x2, x18, 2016, x1)

inst_270:
// rs1_val==5 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555551, 0x5, 0x5555555555555554, x18, 2024, x1)

inst_271:
// rs1_val==5 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x5, 0x0, x18, 2032, x1)

inst_272:
// rs1_val==5 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x5, 0x4, x18, 2040, x1)
RVTEST_SIGBASE( x18,signature_x18_1)

inst_273:
// rs1_val==5 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333337, 0x5, 0x3333333333333332, x18, 0, x1)

inst_274:
// rs1_val==5 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666660, 0x5, 0x6666666666666665, x18, 8, x1)

inst_275:
// rs1_val==5 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xb504f337, 0x5, 0xb504f332, x18, 16, x1)

inst_276:
// rs1_val==5 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555553, 0x5, 0x5555555555555556, x18, 24, x1)

inst_277:
// rs1_val==5 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaae, 0x5, -0x5555555555555555, x18, 32, x1)

inst_278:
// rs1_val==5 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x5, 0x6, x18, 40, x1)

inst_279:
// rs1_val==5 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x5, 0x3333333333333334, x18, 48, x1)

inst_280:
// rs1_val==5 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666662, 0x5, 0x6666666666666667, x18, 56, x1)

inst_281:
// rs1_val==5 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccb, 0x5, -0xb504f332, x18, 64, x1)

inst_282:
// rs1_val==5 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xb504f331, 0x5, 0xb504f334, x18, 72, x1)

inst_283:
// rs1_val==3689348814741910323 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x3333333333333333, 0x3, x18, 80, x1)

inst_284:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x3333333333333333, 0x5555555555555555, x18, 88, x1)

inst_285:
// rs1_val==3689348814741910323 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999999, 0x3333333333333333, -0x5555555555555556, x18, 96, x1)

inst_286:
// rs1_val==3689348814741910323 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333336, 0x3333333333333333, 0x5, x18, 104, x1)

inst_287:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x3333333333333333, 0x3333333333333333, x18, 112, x1)

inst_288:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x3333333333333333, 0x6666666666666666, x18, 120, x1)

inst_289:
// rs1_val==3689348814741910323 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffe, 0x3333333333333333, -0xb504f333, x18, 128, x1)

inst_290:
// rs1_val==3689348814741910323 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c000, 0x3333333333333333, 0xb504f333, x18, 136, x1)

inst_291:
// rs1_val==3689348814741910323 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x3333333333333333, 0x2, x18, 144, x1)

inst_292:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x3333333333333333, 0x5555555555555554, x18, 152, x1)

inst_293:
// rs1_val==3689348814741910323 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x3333333333333333, 0x0, x18, 160, x1)

inst_294:
// rs1_val==3689348814741910323 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333337, 0x3333333333333333, 0x4, x18, 168, x1)

inst_295:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x3333333333333333, 0x3333333333333332, x18, 176, x1)

inst_296:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x3333333333333333, 0x6666666666666665, x18, 184, x1)

inst_297:
// rs1_val==3689348814741910323 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c001, 0x3333333333333333, 0xb504f332, x18, 192, x1)

inst_298:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x3333333333333333, 0x5555555555555556, x18, 200, x1)

inst_299:
// rs1_val==3689348814741910323 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999998, 0x3333333333333333, -0x5555555555555555, x18, 208, x1)

inst_300:
// rs1_val==3689348814741910323 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333335, 0x3333333333333333, 0x6, x18, 216, x1)

inst_301:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x3333333333333333, 0x3333333333333334, x18, 224, x1)

inst_302:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x3333333333333333, 0x6666666666666667, x18, 232, x1)

inst_303:
// rs1_val==3689348814741910323 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffd, 0x3333333333333333, -0xb504f332, x18, 240, x1)

inst_304:
// rs1_val==3689348814741910323 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333333;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c007, 0x3333333333333333, 0xb504f334, x18, 248, x1)

inst_305:
// rs1_val==7378697629483820646 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x6666666666666666, 0x3, x18, 256, x1)

inst_306:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x6666666666666666, 0x5555555555555555, x18, 264, x1)

inst_307:
// rs1_val==7378697629483820646 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccc, 0x6666666666666666, -0x5555555555555556, x18, 272, x1)

inst_308:
// rs1_val==7378697629483820646 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666663, 0x6666666666666666, 0x5, x18, 280, x1)

inst_309:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x6666666666666666, 0x3333333333333333, x18, 288, x1)

inst_310:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x6666666666666666, 0x6666666666666666, x18, 296, x1)

inst_311:
// rs1_val==7378697629483820646 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aab, 0x6666666666666666, -0xb504f333, x18, 304, x1)

inst_312:
// rs1_val==7378697629483820646 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629555, 0x6666666666666666, 0xb504f333, x18, 312, x1)

inst_313:
// rs1_val==7378697629483820646 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666664, 0x6666666666666666, 0x2, x18, 320, x1)

inst_314:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x6666666666666666, 0x5555555555555554, x18, 328, x1)

inst_315:
// rs1_val==7378697629483820646 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x6666666666666666, 0x0, x18, 336, x1)

inst_316:
// rs1_val==7378697629483820646 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666662, 0x6666666666666666, 0x4, x18, 344, x1)

inst_317:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x6666666666666666, 0x3333333333333332, x18, 352, x1)

inst_318:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x6666666666666666, 0x6666666666666665, x18, 360, x1)

inst_319:
// rs1_val==7378697629483820646 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629554, 0x6666666666666666, 0xb504f332, x18, 368, x1)

inst_320:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x6666666666666666, 0x5555555555555556, x18, 376, x1)

inst_321:
// rs1_val==7378697629483820646 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccd, 0x6666666666666666, -0x5555555555555555, x18, 384, x1)

inst_322:
// rs1_val==7378697629483820646 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666660, 0x6666666666666666, 0x6, x18, 392, x1)

inst_323:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555552, 0x6666666666666666, 0x3333333333333334, x18, 400, x1)

inst_324:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x6666666666666666, 0x6666666666666667, x18, 408, x1)

inst_325:
// rs1_val==7378697629483820646 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aa8, 0x6666666666666666, -0xb504f332, x18, 416, x1)

inst_326:
// rs1_val==7378697629483820646 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666666;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629552, 0x6666666666666666, 0xb504f334, x18, 424, x1)

inst_327:
// rs1_val==-3037000499 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cce, -0xb504f333, 0x3, x18, 432, x1)

inst_328:
// rs1_val==-3037000499 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, -0xb504f333, 0x5555555555555555, x18, 440, x1)

inst_329:
// rs1_val==-3037000499 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a667, -0xb504f333, -0x5555555555555556, x18, 448, x1)

inst_330:
// rs1_val==-3037000499 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cc8, -0xb504f333, 0x5, x18, 456, x1)

inst_331:
// rs1_val==-3037000499 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffe, -0xb504f333, 0x3333333333333333, x18, 464, x1)

inst_332:
// rs1_val==-3037000499 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aab, -0xb504f333, 0x6666666666666666, x18, 472, x1)

inst_333:
// rs1_val==-3037000499 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0xb504f333, -0xb504f333, x18, 480, x1)

inst_334:
// rs1_val==-3037000499 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffe, -0xb504f333, 0xb504f333, x18, 488, x1)

inst_335:
// rs1_val==-3037000499 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccf, -0xb504f333, 0x2, x18, 496, x1)

inst_336:
// rs1_val==-3037000499 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5999, -0xb504f333, 0x5555555555555554, x18, 504, x1)

inst_337:
// rs1_val==-3037000499 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccd, -0xb504f333, 0x0, x18, 512, x1)

inst_338:
// rs1_val==-3037000499 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cc9, -0xb504f333, 0x4, x18, 520, x1)

inst_339:
// rs1_val==-3037000499 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83fff, -0xb504f333, 0x3333333333333332, x18, 528, x1)

inst_340:
// rs1_val==-3037000499 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aa8, -0xb504f333, 0x6666666666666665, x18, 536, x1)

inst_341:
// rs1_val==-3037000499 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, -0xb504f333, 0xb504f332, x18, 544, x1)

inst_342:
// rs1_val==-3037000499 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599b, -0xb504f333, 0x5555555555555556, x18, 552, x1)

inst_343:
// rs1_val==-3037000499 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a666, -0xb504f333, -0x5555555555555555, x18, 560, x1)

inst_344:
// rs1_val==-3037000499 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccb, -0xb504f333, 0x6, x18, 568, x1)

inst_345:
// rs1_val==-3037000499 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ff9, -0xb504f333, 0x3333333333333334, x18, 576, x1)

inst_346:
// rs1_val==-3037000499 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aaa, -0xb504f333, 0x6666666666666667, x18, 584, x1)

inst_347:
// rs1_val==-3037000499 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x3, -0xb504f333, -0xb504f332, x18, 592, x1)

inst_348:
// rs1_val==-3037000499 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f333;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffff9, -0xb504f333, 0xb504f334, x18, 600, x1)

inst_349:
// rs1_val==3037000499 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xb504f330, 0xb504f333, 0x3, x18, 608, x1)

inst_350:
// rs1_val==3037000499 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a666, 0xb504f333, 0x5555555555555555, x18, 616, x1)

inst_351:
// rs1_val==3037000499 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5999, 0xb504f333, -0x5555555555555556, x18, 624, x1)

inst_352:
// rs1_val==3037000499 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xb504f336, 0xb504f333, 0x5, x18, 632, x1)

inst_353:
// rs1_val==3037000499 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c000, 0xb504f333, 0x3333333333333333, x18, 640, x1)

inst_354:
// rs1_val==3037000499 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629555, 0xb504f333, 0x6666666666666666, x18, 648, x1)

inst_355:
// rs1_val==3037000499 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffe, 0xb504f333, -0xb504f333, x18, 656, x1)

inst_356:
// rs1_val==3037000499 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0xb504f333, 0xb504f333, x18, 664, x1)

inst_357:
// rs1_val==3037000499 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xb504f331, 0xb504f333, 0x2, x18, 672, x1)

inst_358:
// rs1_val==3037000499 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a667, 0xb504f333, 0x5555555555555554, x18, 680, x1)

inst_359:
// rs1_val==3037000499 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xb504f333, 0xb504f333, 0x0, x18, 688, x1)

inst_360:
// rs1_val==3037000499 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xb504f337, 0xb504f333, 0x4, x18, 696, x1)

inst_361:
// rs1_val==3037000499 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c001, 0xb504f333, 0x3333333333333332, x18, 704, x1)

inst_362:
// rs1_val==3037000499 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629556, 0xb504f333, 0x6666666666666665, x18, 712, x1)

inst_363:
// rs1_val==3037000499 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0xb504f333, 0xb504f332, x18, 720, x1)

inst_364:
// rs1_val==3037000499 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a665, 0xb504f333, 0x5555555555555556, x18, 728, x1)

inst_365:
// rs1_val==3037000499 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, 0xb504f333, -0x5555555555555555, x18, 736, x1)

inst_366:
// rs1_val==3037000499 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xb504f335, 0xb504f333, 0x6, x18, 744, x1)

inst_367:
// rs1_val==3037000499 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c007, 0xb504f333, 0x3333333333333334, x18, 752, x1)

inst_368:
// rs1_val==3037000499 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629554, 0xb504f333, 0x6666666666666667, x18, 760, x1)

inst_369:
// rs1_val==3037000499 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffd, 0xb504f333, -0xb504f332, x18, 768, x1)

inst_370:
// rs1_val==3037000499 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f333;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0xb504f333, 0xb504f334, x18, 776, x1)

inst_371:
// rs1_val==2 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x2, 0x3, x18, 784, x1)

inst_372:
// rs1_val==2 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555557, 0x2, 0x5555555555555555, x18, 792, x1)

inst_373:
// rs1_val==2 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa8, 0x2, -0x5555555555555556, x18, 800, x1)

inst_374:
// rs1_val==2 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x2, 0x5, x18, 808, x1)

inst_375:
// rs1_val==2 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x2, 0x3333333333333333, x18, 816, x1)

inst_376:
// rs1_val==2 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666664, 0x2, 0x6666666666666666, x18, 824, x1)

inst_377:
// rs1_val==2 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccf, 0x2, -0xb504f333, x18, 832, x1)

inst_378:
// rs1_val==2 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xb504f331, 0x2, 0xb504f333, x18, 840, x1)

inst_379:
// rs1_val==2 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x2, 0x2, x18, 848, x1)

inst_380:
// rs1_val==2 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x2, 0x5555555555555554, x18, 856, x1)

inst_381:
// rs1_val==2 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x2, 0x0, x18, 864, x1)

inst_382:
// rs1_val==2 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x2, 0x4, x18, 872, x1)

inst_383:
// rs1_val==2 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x2, 0x3333333333333332, x18, 880, x1)

inst_384:
// rs1_val==2 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x2, 0x6666666666666665, x18, 888, x1)

inst_385:
// rs1_val==2 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xb504f330, 0x2, 0xb504f332, x18, 896, x1)

inst_386:
// rs1_val==2 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x2, 0x5555555555555556, x18, 904, x1)

inst_387:
// rs1_val==2 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa9, 0x2, -0x5555555555555555, x18, 912, x1)

inst_388:
// rs1_val==2 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x2, 0x6, x18, 920, x1)

inst_389:
// rs1_val==2 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333336, 0x2, 0x3333333333333334, x18, 928, x1)

inst_390:
// rs1_val==2 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x2, 0x6666666666666667, x18, 936, x1)

inst_391:
// rs1_val==2 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccc, 0x2, -0xb504f332, x18, 944, x1)

inst_392:
// rs1_val==2 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xb504f336, 0x2, 0xb504f334, x18, 952, x1)

inst_393:
// rs1_val==6148914691236517204 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555557, 0x5555555555555554, 0x3, x18, 960, x1)

inst_394:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x5555555555555554, 0x5555555555555555, x18, 968, x1)

inst_395:
// rs1_val==6148914691236517204 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffe, 0x5555555555555554, -0x5555555555555556, x18, 976, x1)

inst_396:
// rs1_val==6148914691236517204 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555551, 0x5555555555555554, 0x5, x18, 984, x1)

inst_397:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x5555555555555554, 0x3333333333333333, x18, 992, x1)

inst_398:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x5555555555555554, 0x6666666666666666, x18, 1000, x1)

inst_399:
// rs1_val==6148914691236517204 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5999, 0x5555555555555554, -0xb504f333, x18, 1008, x1)

inst_400:
// rs1_val==6148914691236517204 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a667, 0x5555555555555554, 0xb504f333, x18, 1016, x1)

inst_401:
// rs1_val==6148914691236517204 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x5555555555555554, 0x2, x18, 1024, x1)

inst_402:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x5555555555555554, 0x5555555555555554, x18, 1032, x1)

inst_403:
// rs1_val==6148914691236517204 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x5555555555555554, 0x0, x18, 1040, x1)

inst_404:
// rs1_val==6148914691236517204 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555550, 0x5555555555555554, 0x4, x18, 1048, x1)

inst_405:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x5555555555555554, 0x3333333333333332, x18, 1056, x1)

inst_406:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x5555555555555554, 0x6666666666666665, x18, 1064, x1)

inst_407:
// rs1_val==6148914691236517204 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a666, 0x5555555555555554, 0xb504f332, x18, 1072, x1)

inst_408:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x5555555555555554, 0x5555555555555556, x18, 1080, x1)

inst_409:
// rs1_val==6148914691236517204 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, 0x5555555555555554, -0x5555555555555555, x18, 1088, x1)

inst_410:
// rs1_val==6148914691236517204 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555552, 0x5555555555555554, 0x6, x18, 1096, x1)

inst_411:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666660, 0x5555555555555554, 0x3333333333333334, x18, 1104, x1)

inst_412:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x5555555555555554, 0x6666666666666667, x18, 1112, x1)

inst_413:
// rs1_val==6148914691236517204 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599a, 0x5555555555555554, -0xb504f332, x18, 1120, x1)

inst_414:
// rs1_val==6148914691236517204 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555554;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a660, 0x5555555555555554, 0xb504f334, x18, 1128, x1)

inst_415:
// rs1_val==0 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x0, 0x3, x18, 1136, x1)

inst_416:
// rs1_val==0 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x0, 0x5555555555555555, x18, 1144, x1)

inst_417:
// rs1_val==0 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, 0x0, -0x5555555555555556, x18, 1152, x1)

inst_418:
// rs1_val==0 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x0, 0x5, x18, 1160, x1)

inst_419:
// rs1_val==0 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x0, 0x3333333333333333, x18, 1168, x1)

inst_420:
// rs1_val==0 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x0, 0x6666666666666666, x18, 1176, x1)

inst_421:
// rs1_val==0 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccd, 0x0, -0xb504f333, x18, 1184, x1)

inst_422:
// rs1_val==0 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cce, 0x0, -0xb504f332, x18, 1192, x1)

inst_423:
// rs1_val==0 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xb504f334, 0x0, 0xb504f334, x18, 1200, x1)

inst_424:
// rs1_val==4 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x4, 0x3, x18, 1208, x1)

inst_425:
// rs1_val==4 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555551, 0x4, 0x5555555555555555, x18, 1216, x1)

inst_426:
// rs1_val==4 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x4, 0x5, x18, 1224, x1)

inst_427:
// rs1_val==4 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333337, 0x4, 0x3333333333333333, x18, 1232, x1)

inst_428:
// rs1_val==4 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666662, 0x4, 0x6666666666666666, x18, 1240, x1)

inst_429:
// rs1_val==4 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cc9, 0x4, -0xb504f333, x18, 1248, x1)

inst_430:
// rs1_val==4 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xb504f337, 0x4, 0xb504f333, x18, 1256, x1)

inst_431:
// rs1_val==4 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555550, 0x4, 0x5555555555555554, x18, 1264, x1)

inst_432:
// rs1_val==4 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x4, 0x0, x18, 1272, x1)

inst_433:
// rs1_val==4 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x4, 0x4, x18, 1280, x1)

inst_434:
// rs1_val==4 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333336, 0x4, 0x3333333333333332, x18, 1288, x1)

inst_435:
// rs1_val==4 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666661, 0x4, 0x6666666666666665, x18, 1296, x1)

inst_436:
// rs1_val==4 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xb504f336, 0x4, 0xb504f332, x18, 1304, x1)

inst_437:
// rs1_val==4 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555552, 0x4, 0x5555555555555556, x18, 1312, x1)

inst_438:
// rs1_val==4 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaaf, 0x4, -0x5555555555555555, x18, 1320, x1)

inst_439:
// rs1_val==4 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x4, 0x6, x18, 1328, x1)

inst_440:
// rs1_val==4 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x4, 0x3333333333333334, x18, 1336, x1)

inst_441:
// rs1_val==4 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666663, 0x4, 0x6666666666666667, x18, 1344, x1)

inst_442:
// rs1_val==4 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cca, 0x4, -0xb504f332, x18, 1352, x1)

inst_443:
// rs1_val==4 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xb504f330, 0x4, 0xb504f334, x18, 1360, x1)

inst_444:
// rs1_val==3689348814741910322 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x3333333333333332, 0x3, x18, 1368, x1)

inst_445:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x3333333333333332, 0x5555555555555555, x18, 1376, x1)

inst_446:
// rs1_val==3689348814741910322 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999998, 0x3333333333333332, -0x5555555555555556, x18, 1384, x1)

inst_447:
// rs1_val==3689348814741910322 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333337, 0x3333333333333332, 0x5, x18, 1392, x1)

inst_448:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x3333333333333332, 0x3333333333333333, x18, 1400, x1)

inst_449:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x3333333333333332, 0x6666666666666666, x18, 1408, x1)

inst_450:
// rs1_val==3689348814741910322 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83fff, 0x3333333333333332, -0xb504f333, x18, 1416, x1)

inst_451:
// rs1_val==3689348814741910322 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c001, 0x3333333333333332, 0xb504f333, x18, 1424, x1)

inst_452:
// rs1_val==3689348814741910322 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x3333333333333332, 0x2, x18, 1432, x1)

inst_453:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x3333333333333332, 0x5555555555555554, x18, 1440, x1)

inst_454:
// rs1_val==3689348814741910322 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x3333333333333332, 0x0, x18, 1448, x1)

inst_455:
// rs1_val==3689348814741910322 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333336, 0x3333333333333332, 0x4, x18, 1456, x1)

inst_456:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x3333333333333332, 0x3333333333333332, x18, 1464, x1)

inst_457:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555557, 0x3333333333333332, 0x6666666666666665, x18, 1472, x1)

inst_458:
// rs1_val==3689348814741910322 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c000, 0x3333333333333332, 0xb504f332, x18, 1480, x1)

inst_459:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666664, 0x3333333333333332, 0x5555555555555556, x18, 1488, x1)

inst_460:
// rs1_val==3689348814741910322 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999999, 0x3333333333333332, -0x5555555555555555, x18, 1496, x1)

inst_461:
// rs1_val==3689348814741910322 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333334, 0x3333333333333332, 0x6, x18, 1504, x1)

inst_462:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x3333333333333332, 0x3333333333333334, x18, 1512, x1)

inst_463:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x3333333333333332, 0x6666666666666667, x18, 1520, x1)

inst_464:
// rs1_val==3689348814741910322 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffc, 0x3333333333333332, -0xb504f332, x18, 1528, x1)

inst_465:
// rs1_val==3689348814741910322 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333332;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c006, 0x3333333333333332, 0xb504f334, x18, 1536, x1)

inst_466:
// rs1_val==7378697629483820645 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666666, 0x6666666666666665, 0x3, x18, 1544, x1)

inst_467:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x6666666666666665, 0x5555555555555555, x18, 1552, x1)

inst_468:
// rs1_val==7378697629483820645 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccf, 0x6666666666666665, -0x5555555555555556, x18, 1560, x1)

inst_469:
// rs1_val==7378697629483820645 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666660, 0x6666666666666665, 0x5, x18, 1568, x1)

inst_470:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x6666666666666665, 0x3333333333333333, x18, 1576, x1)

inst_471:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x6666666666666665, 0x6666666666666666, x18, 1584, x1)

inst_472:
// rs1_val==7378697629483820645 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aa8, 0x6666666666666665, -0xb504f333, x18, 1592, x1)

inst_473:
// rs1_val==7378697629483820645 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629556, 0x6666666666666665, 0xb504f333, x18, 1600, x1)

inst_474:
// rs1_val==7378697629483820645 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x6666666666666665, 0x2, x18, 1608, x1)

inst_475:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x6666666666666665, 0x5555555555555554, x18, 1616, x1)

inst_476:
// rs1_val==7378697629483820645 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x6666666666666665, 0x0, x18, 1624, x1)

inst_477:
// rs1_val==7378697629483820645 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666661, 0x6666666666666665, 0x4, x18, 1632, x1)

inst_478:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555557, 0x6666666666666665, 0x3333333333333332, x18, 1640, x1)

inst_479:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x6666666666666665, 0x6666666666666665, x18, 1648, x1)

inst_480:
// rs1_val==7378697629483820645 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629557, 0x6666666666666665, 0xb504f332, x18, 1656, x1)

inst_481:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x6666666666666665, 0x5555555555555556, x18, 1664, x1)

inst_482:
// rs1_val==7378697629483820645 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xccccccccccccccce, 0x6666666666666665, -0x5555555555555555, x18, 1672, x1)

inst_483:
// rs1_val==7378697629483820645 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666663, 0x6666666666666665, 0x6, x18, 1680, x1)

inst_484:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555551, 0x6666666666666665, 0x3333333333333334, x18, 1688, x1)

inst_485:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x6666666666666665, 0x6666666666666667, x18, 1696, x1)

inst_486:
// rs1_val==7378697629483820645 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aab, 0x6666666666666665, -0xb504f332, x18, 1704, x1)

inst_487:
// rs1_val==7378697629483820645 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666665;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629551, 0x6666666666666665, 0xb504f334, x18, 1712, x1)

inst_488:
// rs1_val==3037000498 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xb504f331, 0xb504f332, 0x3, x18, 1720, x1)

inst_489:
// rs1_val==3037000498 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a667, 0xb504f332, 0x5555555555555555, x18, 1728, x1)

inst_490:
// rs1_val==3037000498 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, 0xb504f332, -0x5555555555555556, x18, 1736, x1)

inst_491:
// rs1_val==3037000498 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xb504f337, 0xb504f332, 0x5, x18, 1744, x1)

inst_492:
// rs1_val==3037000498 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c001, 0xb504f332, 0x3333333333333333, x18, 1752, x1)

inst_493:
// rs1_val==3037000498 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629554, 0xb504f332, 0x6666666666666666, x18, 1760, x1)

inst_494:
// rs1_val==3037000498 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, 0xb504f332, -0xb504f333, x18, 1768, x1)

inst_495:
// rs1_val==3037000498 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0xb504f332, 0xb504f333, x18, 1776, x1)

inst_496:
// rs1_val==3037000498 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xb504f330, 0xb504f332, 0x2, x18, 1784, x1)

inst_497:
// rs1_val==3037000498 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a666, 0xb504f332, 0x5555555555555554, x18, 1792, x1)

inst_498:
// rs1_val==3037000498 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xb504f332, 0xb504f332, 0x0, x18, 1800, x1)

inst_499:
// rs1_val==3037000498 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xb504f336, 0xb504f332, 0x4, x18, 1808, x1)

inst_500:
// rs1_val==3037000498 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c000, 0xb504f332, 0x3333333333333332, x18, 1816, x1)

inst_501:
// rs1_val==3037000498 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629557, 0xb504f332, 0x6666666666666665, x18, 1824, x1)

inst_502:
// rs1_val==3037000498 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0xb504f332, 0xb504f332, x18, 1832, x1)

inst_503:
// rs1_val==3037000498 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a664, 0xb504f332, 0x5555555555555556, x18, 1840, x1)

inst_504:
// rs1_val==3037000498 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5999, 0xb504f332, -0x5555555555555555, x18, 1848, x1)

inst_505:
// rs1_val==3037000498 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xb504f334, 0xb504f332, 0x6, x18, 1856, x1)

inst_506:
// rs1_val==3037000498 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c006, 0xb504f332, 0x3333333333333334, x18, 1864, x1)

inst_507:
// rs1_val==3037000498 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629555, 0xb504f332, 0x6666666666666667, x18, 1872, x1)

inst_508:
// rs1_val==3037000498 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffc, 0xb504f332, -0xb504f332, x18, 1880, x1)

inst_509:
// rs1_val==3037000498 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f332;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0xb504f332, 0xb504f334, x18, 1888, x1)

inst_510:
// rs1_val==6148914691236517206 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x5555555555555556, 0x3, x18, 1896, x1)

inst_511:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x5555555555555556, 0x5555555555555555, x18, 1904, x1)

inst_512:
// rs1_val==6148914691236517206 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffc, 0x5555555555555556, -0x5555555555555556, x18, 1912, x1)

inst_513:
// rs1_val==6148914691236517206 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555553, 0x5555555555555556, 0x5, x18, 1920, x1)

inst_514:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x5555555555555556, 0x3333333333333333, x18, 1928, x1)

inst_515:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x5555555555555556, 0x6666666666666666, x18, 1936, x1)

inst_516:
// rs1_val==6148914691236517206 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599b, 0x5555555555555556, -0xb504f333, x18, 1944, x1)

inst_517:
// rs1_val==6148914691236517206 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a665, 0x5555555555555556, 0xb504f333, x18, 1952, x1)

inst_518:
// rs1_val==6148914691236517206 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x5555555555555556, 0x2, x18, 1960, x1)

inst_519:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x5555555555555556, 0x5555555555555554, x18, 1968, x1)

inst_520:
// rs1_val==6148914691236517206 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x5555555555555556, 0x0, x18, 1976, x1)

inst_521:
// rs1_val==6148914691236517206 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555552, 0x5555555555555556, 0x4, x18, 1984, x1)

inst_522:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666664, 0x5555555555555556, 0x3333333333333332, x18, 1992, x1)

inst_523:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x5555555555555556, 0x6666666666666665, x18, 2000, x1)

inst_524:
// rs1_val==6148914691236517206 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a664, 0x5555555555555556, 0xb504f332, x18, 2008, x1)

inst_525:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x5555555555555556, 0x5555555555555556, x18, 2016, x1)

inst_526:
// rs1_val==6148914691236517206 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffd, 0x5555555555555556, -0x5555555555555555, x18, 2024, x1)

inst_527:
// rs1_val==6148914691236517206 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555550, 0x5555555555555556, 0x6, x18, 2032, x1)

inst_528:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666662, 0x5555555555555556, 0x3333333333333334, x18, 2040, x1)
RVTEST_SIGBASE( x18,signature_x18_2)

inst_529:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x5555555555555556, 0x6666666666666667, x18, 0, x1)

inst_530:
// rs1_val==6148914691236517206 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, 0x5555555555555556, -0xb504f332, x18, 8, x1)

inst_531:
// rs1_val==6148914691236517206 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5555555555555556;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a662, 0x5555555555555556, 0xb504f334, x18, 16, x1)

inst_532:
// rs1_val==-6148914691236517205 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa8, -0x5555555555555555, 0x3, x18, 24, x1)

inst_533:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffe, -0x5555555555555555, 0x5555555555555555, x18, 32, x1)

inst_534:
// rs1_val==-6148914691236517205 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x1, -0x5555555555555555, -0x5555555555555556, x18, 40, x1)

inst_535:
// rs1_val==-6148914691236517205 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaae, -0x5555555555555555, 0x5, x18, 48, x1)

inst_536:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999998, -0x5555555555555555, 0x3333333333333333, x18, 56, x1)

inst_537:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccd, -0x5555555555555555, 0x6666666666666666, x18, 64, x1)

inst_538:
// rs1_val==-6148914691236517205 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a666, -0x5555555555555555, -0xb504f333, x18, 72, x1)

inst_539:
// rs1_val==-6148914691236517205 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, -0x5555555555555555, 0xb504f333, x18, 80, x1)

inst_540:
// rs1_val==-6148914691236517205 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaa9, -0x5555555555555555, 0x2, x18, 88, x1)

inst_541:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffffffff, -0x5555555555555555, 0x5555555555555554, x18, 96, x1)

inst_542:
// rs1_val==-6148914691236517205 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaab, -0x5555555555555555, 0x0, x18, 104, x1)

inst_543:
// rs1_val==-6148914691236517205 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaaf, -0x5555555555555555, 0x4, x18, 112, x1)

inst_544:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x9999999999999999, -0x5555555555555555, 0x3333333333333332, x18, 120, x1)

inst_545:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0xccccccccccccccce, -0x5555555555555555, 0x6666666666666665, x18, 128, x1)

inst_546:
// rs1_val==-6148914691236517205 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5999, -0x5555555555555555, 0xb504f332, x18, 136, x1)

inst_547:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffd, -0x5555555555555555, 0x5555555555555556, x18, 144, x1)

inst_548:
// rs1_val==-6148914691236517205 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0x5555555555555555, -0x5555555555555555, x18, 152, x1)

inst_549:
// rs1_val==-6148914691236517205 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaad, -0x5555555555555555, 0x6, x18, 160, x1)

inst_550:
// rs1_val==0 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x0, 0x4, x18, 168, x1)

inst_551:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x999999999999999f, -0x5555555555555555, 0x3333333333333334, x18, 176, x1)

inst_552:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccc, -0x5555555555555555, 0x6666666666666667, x18, 184, x1)

inst_553:
// rs1_val==-6148914691236517205 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a665, -0x5555555555555555, -0xb504f332, x18, 192, x1)

inst_554:
// rs1_val==-6148914691236517205 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5555555555555555;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599f, -0x5555555555555555, 0xb504f334, x18, 200, x1)

inst_555:
// rs1_val==6 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x6, 0x3, x18, 208, x1)

inst_556:
// rs1_val==6 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555553, 0x6, 0x5555555555555555, x18, 216, x1)

inst_557:
// rs1_val==6 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaac, 0x6, -0x5555555555555556, x18, 224, x1)

inst_558:
// rs1_val==6 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x6, 0x5, x18, 232, x1)

inst_559:
// rs1_val==6 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333335, 0x6, 0x3333333333333333, x18, 240, x1)

inst_560:
// rs1_val==6 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666660, 0x6, 0x6666666666666666, x18, 248, x1)

inst_561:
// rs1_val==6 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccb, 0x6, -0xb504f333, x18, 256, x1)

inst_562:
// rs1_val==6 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xb504f335, 0x6, 0xb504f333, x18, 264, x1)

inst_563:
// rs1_val==6 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x6, 0x2, x18, 272, x1)

inst_564:
// rs1_val==6 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555552, 0x6, 0x5555555555555554, x18, 280, x1)

inst_565:
// rs1_val==6 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x6, 0x0, x18, 288, x1)

inst_566:
// rs1_val==6 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x6, 0x4, x18, 296, x1)

inst_567:
// rs1_val==6 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333334, 0x6, 0x3333333333333332, x18, 304, x1)

inst_568:
// rs1_val==6 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666663, 0x6, 0x6666666666666665, x18, 312, x1)

inst_569:
// rs1_val==6 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xb504f334, 0x6, 0xb504f332, x18, 320, x1)

inst_570:
// rs1_val==6 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555550, 0x6, 0x5555555555555556, x18, 328, x1)

inst_571:
// rs1_val==6 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaad, 0x6, -0x5555555555555555, x18, 336, x1)

inst_572:
// rs1_val==6 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x6, 0x6, x18, 344, x1)

inst_573:
// rs1_val==6 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x6, 0x3333333333333334, x18, 352, x1)

inst_574:
// rs1_val==6 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666661, 0x6, 0x6666666666666667, x18, 360, x1)

inst_575:
// rs1_val==6 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cc8, 0x6, -0xb504f332, x18, 368, x1)

inst_576:
// rs1_val==6 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xb504f332, 0x6, 0xb504f334, x18, 376, x1)

inst_577:
// rs1_val==3689348814741910324 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333337, 0x3333333333333334, 0x3, x18, 384, x1)

inst_578:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666661, 0x3333333333333334, 0x5555555555555555, x18, 392, x1)

inst_579:
// rs1_val==3689348814741910324 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x999999999999999e, 0x3333333333333334, -0x5555555555555556, x18, 400, x1)

inst_580:
// rs1_val==3689348814741910324 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x3333333333333334, 0x5, x18, 408, x1)

inst_581:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x3333333333333334, 0x3333333333333333, x18, 416, x1)

inst_582:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555552, 0x3333333333333334, 0x6666666666666666, x18, 424, x1)

inst_583:
// rs1_val==3689348814741910324 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ff9, 0x3333333333333334, -0xb504f333, x18, 432, x1)

inst_584:
// rs1_val==3689348814741910324 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c007, 0x3333333333333334, 0xb504f333, x18, 440, x1)

inst_585:
// rs1_val==3689348814741910324 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333336, 0x3333333333333334, 0x2, x18, 448, x1)

inst_586:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666660, 0x3333333333333334, 0x5555555555555554, x18, 456, x1)

inst_587:
// rs1_val==3689348814741910324 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333334, 0x3333333333333334, 0x0, x18, 464, x1)

inst_588:
// rs1_val==3689348814741910324 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333330, 0x3333333333333334, 0x4, x18, 472, x1)

inst_589:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x3333333333333334, 0x3333333333333332, x18, 480, x1)

inst_590:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555551, 0x3333333333333334, 0x6666666666666665, x18, 488, x1)

inst_591:
// rs1_val==3689348814741910324 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c006, 0x3333333333333334, 0xb504f332, x18, 496, x1)

inst_592:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666662, 0x3333333333333334, 0x5555555555555556, x18, 504, x1)

inst_593:
// rs1_val==3689348814741910324 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x999999999999999f, 0x3333333333333334, -0x5555555555555555, x18, 512, x1)

inst_594:
// rs1_val==3689348814741910324 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x3333333333333334, 0x6, x18, 520, x1)

inst_595:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x3333333333333334, 0x3333333333333334, x18, 528, x1)

inst_596:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555553, 0x3333333333333334, 0x6666666666666667, x18, 536, x1)

inst_597:
// rs1_val==3689348814741910324 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffa, 0x3333333333333334, -0xb504f332, x18, 544, x1)

inst_598:
// rs1_val==3689348814741910324 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3333333333333334;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c000, 0x3333333333333334, 0xb504f334, x18, 552, x1)

inst_599:
// rs1_val==7378697629483820647 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666664, 0x6666666666666667, 0x3, x18, 560, x1)

inst_600:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x6666666666666667, 0x5555555555555555, x18, 568, x1)

inst_601:
// rs1_val==7378697629483820647 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccd, 0x6666666666666667, -0x5555555555555556, x18, 576, x1)

inst_602:
// rs1_val==7378697629483820647 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666662, 0x6666666666666667, 0x5, x18, 584, x1)

inst_603:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x6666666666666667, 0x3333333333333333, x18, 592, x1)

inst_604:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x6666666666666667, 0x6666666666666666, x18, 600, x1)

inst_605:
// rs1_val==7378697629483820647 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aaa, 0x6666666666666667, -0xb504f333, x18, 608, x1)

inst_606:
// rs1_val==7378697629483820647 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629554, 0x6666666666666667, 0xb504f333, x18, 616, x1)

inst_607:
// rs1_val==7378697629483820647 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x6666666666666667, 0x2, x18, 624, x1)

inst_608:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333333, 0x6666666666666667, 0x5555555555555554, x18, 632, x1)

inst_609:
// rs1_val==7378697629483820647 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x6666666666666667, 0x0, x18, 640, x1)

inst_610:
// rs1_val==7378697629483820647 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666663, 0x6666666666666667, 0x4, x18, 648, x1)

inst_611:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555555, 0x6666666666666667, 0x3333333333333332, x18, 656, x1)

inst_612:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x6666666666666667, 0x6666666666666665, x18, 664, x1)

inst_613:
// rs1_val==7378697629483820647 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629555, 0x6666666666666667, 0xb504f332, x18, 672, x1)

inst_614:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333331, 0x6666666666666667, 0x5555555555555556, x18, 680, x1)

inst_615:
// rs1_val==7378697629483820647 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccccccccccc, 0x6666666666666667, -0x5555555555555555, x18, 688, x1)

inst_616:
// rs1_val==7378697629483820647 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666661, 0x6666666666666667, 0x6, x18, 696, x1)

inst_617:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555553, 0x6666666666666667, 0x3333333333333334, x18, 704, x1)

inst_618:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x6666666666666667, 0x6666666666666667, x18, 712, x1)

inst_619:
// rs1_val==7378697629483820647 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aa9, 0x6666666666666667, -0xb504f332, x18, 720, x1)

inst_620:
// rs1_val==7378697629483820647 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6666666666666667;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629553, 0x6666666666666667, 0xb504f334, x18, 728, x1)

inst_621:
// rs1_val==-3037000498 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccd, -0xb504f332, 0x3, x18, 736, x1)

inst_622:
// rs1_val==-3037000498 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599b, -0xb504f332, 0x5555555555555555, x18, 744, x1)

inst_623:
// rs1_val==-3037000498 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a664, -0xb504f332, -0x5555555555555556, x18, 752, x1)

inst_624:
// rs1_val==-3037000498 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccb, -0xb504f332, 0x5, x18, 760, x1)

inst_625:
// rs1_val==-3037000498 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffd, -0xb504f332, 0x3333333333333333, x18, 768, x1)

inst_626:
// rs1_val==-3037000498 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aa8, -0xb504f332, 0x6666666666666666, x18, 776, x1)

inst_627:
// rs1_val==-3037000498 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x3, -0xb504f332, -0xb504f333, x18, 784, x1)

inst_628:
// rs1_val==-3037000498 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffd, -0xb504f332, 0xb504f333, x18, 792, x1)

inst_629:
// rs1_val==-3037000498 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0ccc, -0xb504f332, 0x2, x18, 800, x1)

inst_630:
// rs1_val==-3037000498 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599a, -0xb504f332, 0x5555555555555554, x18, 808, x1)

inst_631:
// rs1_val==-3037000498 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cce, -0xb504f332, 0x0, x18, 816, x1)

inst_632:
// rs1_val==-3037000498 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cca, -0xb504f332, 0x4, x18, 824, x1)

inst_633:
// rs1_val==-3037000498 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffc, -0xb504f332, 0x3333333333333332, x18, 832, x1)

inst_634:
// rs1_val==-3037000498 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aab, -0xb504f332, 0x6666666666666665, x18, 840, x1)

inst_635:
// rs1_val==-3037000498 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffc, -0xb504f332, 0xb504f332, x18, 848, x1)

inst_636:
// rs1_val==-3037000498 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae5998, -0xb504f332, 0x5555555555555556, x18, 856, x1)

inst_637:
// rs1_val==-3037000498 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a665, -0xb504f332, -0x5555555555555555, x18, 864, x1)

inst_638:
// rs1_val==-3037000498 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff4afb0cc8, -0xb504f332, 0x6, x18, 872, x1)

inst_639:
// rs1_val==-3037000498 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc79c83ffa, -0xb504f332, 0x3333333333333334, x18, 880, x1)

inst_640:
// rs1_val==-3037000498 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x999999992c9d6aa9, -0xb504f332, 0x6666666666666667, x18, 888, x1)

inst_641:
// rs1_val==-3037000498 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0xb504f332, -0xb504f332, x18, 896, x1)

inst_642:
// rs1_val==-3037000498 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504f332;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffa, -0xb504f332, 0xb504f334, x18, 904, x1)

inst_643:
// rs1_val==3037000500 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xb504f337, 0xb504f334, 0x3, x18, 912, x1)

inst_644:
// rs1_val==3037000500 and rs2_val==6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a661, 0xb504f334, 0x5555555555555555, x18, 920, x1)

inst_645:
// rs1_val==3037000500 and rs2_val==-6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:-0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599e, 0xb504f334, -0x5555555555555556, x18, 928, x1)

inst_646:
// rs1_val==3037000500 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xb504f331, 0xb504f334, 0x5, x18, 936, x1)

inst_647:
// rs1_val==3037000500 and rs2_val==3689348814741910323, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c007, 0xb504f334, 0x3333333333333333, x18, 944, x1)

inst_648:
// rs1_val==3037000500 and rs2_val==7378697629483820646, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x6666666666666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629552, 0xb504f334, 0x6666666666666666, x18, 952, x1)

inst_649:
// rs1_val==3037000500 and rs2_val==-3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:-0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffff9, 0xb504f334, -0xb504f333, x18, 960, x1)

inst_650:
// rs1_val==3037000500 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0xb504f334, 0xb504f333, x18, 968, x1)

inst_651:
// rs1_val==3037000500 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xb504f336, 0xb504f334, 0x2, x18, 976, x1)

inst_652:
// rs1_val==3037000500 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a660, 0xb504f334, 0x5555555555555554, x18, 984, x1)

inst_653:
// rs1_val==3037000500 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xb504f334, 0xb504f334, 0x0, x18, 992, x1)

inst_654:
// rs1_val==3037000500 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xb504f330, 0xb504f334, 0x4, x18, 1000, x1)

inst_655:
// rs1_val==3037000500 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c006, 0xb504f334, 0x3333333333333332, x18, 1008, x1)

inst_656:
// rs1_val==3037000500 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629551, 0xb504f334, 0x6666666666666665, x18, 1016, x1)

inst_657:
// rs1_val==3037000500 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0xb504f334, 0xb504f332, x18, 1024, x1)

inst_658:
// rs1_val==3037000500 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555555e051a662, 0xb504f334, 0x5555555555555556, x18, 1032, x1)

inst_659:
// rs1_val==3037000500 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa1fae599f, 0xb504f334, -0x5555555555555555, x18, 1040, x1)

inst_660:
// rs1_val==3037000500 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xb504f332, 0xb504f334, 0x6, x18, 1048, x1)

inst_661:
// rs1_val==3037000500 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x333333338637c000, 0xb504f334, 0x3333333333333334, x18, 1056, x1)

inst_662:
// rs1_val==3037000500 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666666d3629553, 0xb504f334, 0x6666666666666667, x18, 1064, x1)

inst_663:
// rs1_val==3037000500 and rs2_val==-3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:-0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffffffffffa, 0xb504f334, -0xb504f332, x18, 1072, x1)

inst_664:
// rs1_val==3037000500 and rs2_val==3037000500, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0xb504f334
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0xb504f334, 0xb504f334, x18, 1080, x1)

inst_665:
// rs1_val==0 and rs2_val==3037000499, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504f333
TEST_RR_OP(xor, x12, x10, x11, 0xb504f333, 0x0, 0xb504f333, x18, 1088, x1)

inst_666:
// rs1_val==0 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x0, 0x2, x18, 1096, x1)

inst_667:
// rs1_val==0 and rs2_val==6148914691236517204, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5555555555555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555554, 0x0, 0x5555555555555554, x18, 1104, x1)

inst_668:
// rs1_val==0 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x0, 0x0, x18, 1112, x1)

inst_669:
// rs1_val==0 and rs2_val==3689348814741910322, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3333333333333332
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333332, 0x0, 0x3333333333333332, x18, 1120, x1)

inst_670:
// rs1_val==0 and rs2_val==7378697629483820645, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6666666666666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666665, 0x0, 0x6666666666666665, x18, 1128, x1)

inst_671:
// rs1_val==0 and rs2_val==3037000498, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504f332
TEST_RR_OP(xor, x12, x10, x11, 0xb504f332, 0x0, 0xb504f332, x18, 1136, x1)

inst_672:
// rs1_val==0 and rs2_val==6148914691236517206, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5555555555555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555555555555556, 0x0, 0x5555555555555556, x18, 1144, x1)

inst_673:
// rs1_val==0 and rs2_val==-6148914691236517205, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x5555555555555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaaaaaaaaab, 0x0, -0x5555555555555555, x18, 1152, x1)

inst_674:
// rs1_val==0 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x0, 0x6, x18, 1160, x1)

inst_675:
// rs1_val==0 and rs2_val==3689348814741910324, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3333333333333334
TEST_RR_OP(xor, x12, x10, x11, 0x3333333333333334, 0x0, 0x3333333333333334, x18, 1168, x1)

inst_676:
// rs1_val==0 and rs2_val==7378697629483820647, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6666666666666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666666666666667, 0x0, 0x6666666666666667, x18, 1176, x1)

inst_677:
// rs1_val < 0 and rs2_val > 0, rs1_val == -17592186044417
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x100000000001;  op2val:0x3333333333333333
TEST_RR_OP(xor, x12, x10, x11, 0xccccdccccccccccc, -0x100000000001, 0x3333333333333333, x18, 1184, x1)

inst_678:
// rs2_val == 1024, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504f334;  op2val:0x400
TEST_RR_OP(xor, x12, x10, x11, 0xb504f734, 0xb504f334, 0x400, x18, 1192, x1)

inst_679:
// rs2_val == 32768, rs1_val == -16385
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x4001;  op2val:0x8000
TEST_RR_OP(xor, x12, x10, x11, 0xffffffffffff3fff, -0x4001, 0x8000, x18, 1200, x1)

inst_680:
// rs2_val == 262144, rs1_val == -4398046511105
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x40000000001;  op2val:0x40000
TEST_RR_OP(xor, x12, x10, x11, 0xfffffbfffffbffff, -0x40000000001, 0x40000, x18, 1208, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x18_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x18_2:
    .fill 152*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
