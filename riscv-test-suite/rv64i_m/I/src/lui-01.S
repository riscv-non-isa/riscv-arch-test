
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:23:49 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the lui instruction of the RISC-V I extension for the lui covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",lui)

RVTEST_SIGBASE( x12,signature_x12_1)

inst_0:
// rd==x7, imm_val == 0, imm_val==0
// opcode: lui ; dest:x7; immval:0x0
TEST_CASE(x17, x7, 0x0, x12, 0, lui x7,0x0)

inst_1:
// rd==x31, imm_val > 0, imm_val==419429
// opcode: lui ; dest:x31; immval:0x66665
TEST_CASE(x17, x31, 0x6666500000000000, x12, 8, lui x31,0x66665)

inst_2:
// rd==x15, imm_val == ((2**20)-1), 
// opcode: lui ; dest:x15; immval:0xfffff
TEST_CASE(x17, x15, 0xfffff00000000000, x12, 16, lui x15,0xfffff)

inst_3:
// rd==x21, imm_val==3, 
// opcode: lui ; dest:x21; immval:0x3
TEST_CASE(x17, x21, 0x300000000000, x12, 24, lui x21,0x3)

inst_4:
// rd==x1, imm_val==349525, imm_val == 349525
// opcode: lui ; dest:x1; immval:0x55555
TEST_CASE(x17, x1, 0x5555500000000000, x12, 32, lui x1,0x55555)

inst_5:
// rd==x27, imm_val==699050, imm_val == 699050
// opcode: lui ; dest:x27; immval:0xaaaaa
TEST_CASE(x17, x27, 0xaaaaa00000000000, x12, 40, lui x27,0xaaaaa)

inst_6:
// rd==x6, imm_val==5, 
// opcode: lui ; dest:x6; immval:0x5
TEST_CASE(x17, x6, 0x500000000000, x12, 48, lui x6,0x5)

inst_7:
// rd==x26, imm_val==209715, 
// opcode: lui ; dest:x26; immval:0x33333
TEST_CASE(x17, x26, 0x3333300000000000, x12, 56, lui x26,0x33333)

inst_8:
// rd==x13, imm_val==419430, 
// opcode: lui ; dest:x13; immval:0x66666
TEST_CASE(x17, x13, 0x6666600000000000, x12, 64, lui x13,0x66666)

inst_9:
// rd==x9, imm_val==724, 
// opcode: lui ; dest:x9; immval:0x2d4
TEST_CASE(x17, x9, 0x2d400000000000, x12, 72, lui x9,0x2d4)

inst_10:
// rd==x28, imm_val==1023, 
// opcode: lui ; dest:x28; immval:0x3ff
TEST_CASE(x17, x28, 0x3ff00000000000, x12, 80, lui x28,0x3ff)

inst_11:
// rd==x20, imm_val==2, imm_val == 2
// opcode: lui ; dest:x20; immval:0x2
TEST_CASE(x17, x20, 0x200000000000, x12, 88, lui x20,0x2)

inst_12:
// rd==x0, imm_val==349524, 
// opcode: lui ; dest:x0; immval:0x55554
TEST_CASE(x17, x0, 0x5555400000000000, x12, 96, lui x0,0x55554)

inst_13:
// rd==x16, imm_val==699049, 
// opcode: lui ; dest:x16; immval:0xaaaa9
TEST_CASE(x17, x16, 0xaaaa900000000000, x12, 104, lui x16,0xaaaa9)

inst_14:
// rd==x19, imm_val==4, imm_val == 4
// opcode: lui ; dest:x19; immval:0x4
TEST_CASE(x17, x19, 0x400000000000, x12, 112, lui x19,0x4)

inst_15:
// rd==x2, imm_val==209714, 
// opcode: lui ; dest:x2; immval:0x33332
TEST_CASE(x17, x2, 0x3333200000000000, x12, 120, lui x2,0x33332)

inst_16:
// rd==x29, imm_val==723, 
// opcode: lui ; dest:x29; immval:0x2d3
TEST_CASE(x17, x29, 0x2d300000000000, x12, 128, lui x29,0x2d3)

inst_17:
// rd==x10, imm_val==1022, 
// opcode: lui ; dest:x10; immval:0x3fe
TEST_CASE(x17, x10, 0x3fe00000000000, x12, 136, lui x10,0x3fe)

inst_18:
// rd==x23, imm_val==349526, 
// opcode: lui ; dest:x23; immval:0x55556
TEST_CASE(x17, x23, 0x5555600000000000, x12, 144, lui x23,0x55556)

inst_19:
// rd==x8, imm_val==699051, 
// opcode: lui ; dest:x8; immval:0xaaaab
TEST_CASE(x17, x8, 0xaaaab00000000000, x12, 152, lui x8,0xaaaab)

inst_20:
// rd==x24, imm_val==6, 
// opcode: lui ; dest:x24; immval:0x6
TEST_CASE(x17, x24, 0x600000000000, x12, 160, lui x24,0x6)

inst_21:
// rd==x18, imm_val==209716, 
// opcode: lui ; dest:x18; immval:0x33334
TEST_CASE(x17, x18, 0x3333400000000000, x12, 168, lui x18,0x33334)

inst_22:
// rd==x4, imm_val==419431, 
// opcode: lui ; dest:x4; immval:0x66667
TEST_CASE(x17, x4, 0x6666700000000000, x12, 176, lui x4,0x66667)

inst_23:
// rd==x25, imm_val==725, 
// opcode: lui ; dest:x25; immval:0x2d5
TEST_CASE(x17, x25, 0x2d500000000000, x12, 184, lui x25,0x2d5)

inst_24:
// rd==x5, imm_val==1, imm_val == 1
// opcode: lui ; dest:x5; immval:0x1
TEST_CASE(x17, x5, 0x100000000000, x12, 192, lui x5,0x1)

inst_25:
// rd==x3, imm_val==1024, imm_val == 1024
// opcode: lui ; dest:x3; immval:0x400
TEST_CASE(x17, x3, 0x40000000000000, x12, 200, lui x3,0x400)

inst_26:
// rd==x11, imm_val == 8, 
// opcode: lui ; dest:x11; immval:0x8
TEST_CASE(x17, x11, 0x800000000000, x12, 208, lui x11,0x8)

inst_27:
// rd==x14, imm_val == 16, 
// opcode: lui ; dest:x14; immval:0x10
TEST_CASE(x17, x14, 0x1000000000000, x12, 216, lui x14,0x10)

inst_28:
// rd==x17, imm_val == 32, 
// opcode: lui ; dest:x17; immval:0x20
TEST_CASE(x2, x17, 0x2000000000000, x12, 224, lui x17,0x20)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_29:
// rd==x22, imm_val == 64, 
// opcode: lui ; dest:x22; immval:0x40
TEST_CASE(x2, x22, 0x4000000000000, x1, 0, lui x22,0x40)

inst_30:
// rd==x12, imm_val == 128, 
// opcode: lui ; dest:x12; immval:0x80
TEST_CASE(x2, x12, 0x8000000000000, x1, 8, lui x12,0x80)

inst_31:
// rd==x30, imm_val == 983039, 
// opcode: lui ; dest:x30; immval:0xeffff
TEST_CASE(x2, x30, 0xeffff00000000000, x1, 16, lui x30,0xeffff)

inst_32:
// imm_val == 917503, 
// opcode: lui ; dest:x10; immval:0xdffff
TEST_CASE(x2, x10, 0xdffff00000000000, x1, 24, lui x10,0xdffff)

inst_33:
// imm_val == 786431, 
// opcode: lui ; dest:x10; immval:0xbffff
TEST_CASE(x2, x10, 0xbffff00000000000, x1, 32, lui x10,0xbffff)

inst_34:
// imm_val == 524287, 
// opcode: lui ; dest:x10; immval:0x7ffff
TEST_CASE(x2, x10, 0x7ffff00000000000, x1, 40, lui x10,0x7ffff)

inst_35:
// imm_val == 256, 
// opcode: lui ; dest:x10; immval:0x100
TEST_CASE(x2, x10, 0x10000000000000, x1, 48, lui x10,0x100)

inst_36:
// imm_val == 512, 
// opcode: lui ; dest:x10; immval:0x200
TEST_CASE(x2, x10, 0x20000000000000, x1, 56, lui x10,0x200)

inst_37:
// imm_val == 2048, 
// opcode: lui ; dest:x10; immval:0x800
TEST_CASE(x2, x10, 0x80000000000000, x1, 64, lui x10,0x800)

inst_38:
// imm_val == 4096, 
// opcode: lui ; dest:x10; immval:0x1000
TEST_CASE(x2, x10, 0x100000000000000, x1, 72, lui x10,0x1000)

inst_39:
// imm_val == 8192, 
// opcode: lui ; dest:x10; immval:0x2000
TEST_CASE(x2, x10, 0x200000000000000, x1, 80, lui x10,0x2000)

inst_40:
// imm_val == 16384, 
// opcode: lui ; dest:x10; immval:0x4000
TEST_CASE(x2, x10, 0x400000000000000, x1, 88, lui x10,0x4000)

inst_41:
// imm_val == 32768, 
// opcode: lui ; dest:x10; immval:0x8000
TEST_CASE(x2, x10, 0x800000000000000, x1, 96, lui x10,0x8000)

inst_42:
// imm_val == 65536, 
// opcode: lui ; dest:x10; immval:0x10000
TEST_CASE(x2, x10, 0x1000000000000000, x1, 104, lui x10,0x10000)

inst_43:
// imm_val == 131072, 
// opcode: lui ; dest:x10; immval:0x20000
TEST_CASE(x2, x10, 0x2000000000000000, x1, 112, lui x10,0x20000)

inst_44:
// imm_val == 262144, 
// opcode: lui ; dest:x10; immval:0x40000
TEST_CASE(x2, x10, 0x4000000000000000, x1, 120, lui x10,0x40000)

inst_45:
// imm_val == 524288, 
// opcode: lui ; dest:x10; immval:0x80000
TEST_CASE(x2, x10, 0x8000000000000000, x1, 128, lui x10,0x80000)

inst_46:
// imm_val == 1048574, 
// opcode: lui ; dest:x10; immval:0xffffe
TEST_CASE(x2, x10, 0xffffe00000000000, x1, 136, lui x10,0xffffe)

inst_47:
// imm_val == 1048573, 
// opcode: lui ; dest:x10; immval:0xffffd
TEST_CASE(x2, x10, 0xffffd00000000000, x1, 144, lui x10,0xffffd)

inst_48:
// imm_val == 1048571, 
// opcode: lui ; dest:x10; immval:0xffffb
TEST_CASE(x2, x10, 0xffffb00000000000, x1, 152, lui x10,0xffffb)

inst_49:
// imm_val == 1048567, 
// opcode: lui ; dest:x10; immval:0xffff7
TEST_CASE(x2, x10, 0xffff700000000000, x1, 160, lui x10,0xffff7)

inst_50:
// imm_val == 1048559, 
// opcode: lui ; dest:x10; immval:0xfffef
TEST_CASE(x2, x10, 0xfffef00000000000, x1, 168, lui x10,0xfffef)

inst_51:
// imm_val == 1048543, 
// opcode: lui ; dest:x10; immval:0xfffdf
TEST_CASE(x2, x10, 0xfffdf00000000000, x1, 176, lui x10,0xfffdf)

inst_52:
// imm_val == 1048511, 
// opcode: lui ; dest:x10; immval:0xfffbf
TEST_CASE(x2, x10, 0xfffbf00000000000, x1, 184, lui x10,0xfffbf)

inst_53:
// imm_val == 1048447, 
// opcode: lui ; dest:x10; immval:0xfff7f
TEST_CASE(x2, x10, 0xfff7f00000000000, x1, 192, lui x10,0xfff7f)

inst_54:
// imm_val == 1048319, 
// opcode: lui ; dest:x10; immval:0xffeff
TEST_CASE(x2, x10, 0xffeff00000000000, x1, 200, lui x10,0xffeff)

inst_55:
// imm_val == 1048063, 
// opcode: lui ; dest:x10; immval:0xffdff
TEST_CASE(x2, x10, 0xffdff00000000000, x1, 208, lui x10,0xffdff)

inst_56:
// imm_val == 1047551, 
// opcode: lui ; dest:x10; immval:0xffbff
TEST_CASE(x2, x10, 0xffbff00000000000, x1, 216, lui x10,0xffbff)

inst_57:
// imm_val == 1046527, 
// opcode: lui ; dest:x10; immval:0xff7ff
TEST_CASE(x2, x10, 0xff7ff00000000000, x1, 224, lui x10,0xff7ff)

inst_58:
// imm_val == 1044479, 
// opcode: lui ; dest:x10; immval:0xfefff
TEST_CASE(x2, x10, 0xfefff00000000000, x1, 232, lui x10,0xfefff)

inst_59:
// imm_val == 1040383, 
// opcode: lui ; dest:x10; immval:0xfdfff
TEST_CASE(x2, x10, 0xfdfff00000000000, x1, 240, lui x10,0xfdfff)

inst_60:
// imm_val == 1032191, 
// opcode: lui ; dest:x10; immval:0xfbfff
TEST_CASE(x2, x10, 0xfbfff00000000000, x1, 248, lui x10,0xfbfff)

inst_61:
// imm_val == 1015807, 
// opcode: lui ; dest:x10; immval:0xf7fff
TEST_CASE(x2, x10, 0xf7fff00000000000, x1, 256, lui x10,0xf7fff)

inst_62:
// imm_val==349524, 
// opcode: lui ; dest:x10; immval:0x55554
TEST_CASE(x2, x10, 0x5555400000000000, x1, 264, lui x10,0x55554)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 29*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 34*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
