
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the addi instruction of the RISC-V I extension for the addi covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",addi)

RVTEST_SIGBASE( x5,signature_x5_1)

inst_0:
// rs1 == rd, rs1==x17, rd==x17, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val > 0 and imm_val < 0, rs1_val == 2305843009213693952
// opcode: addi ; op1:x17; dest:x17; op1val:2305843009213693952;  immval:-2048
TEST_IMM_OP( addi, x17, x17, 0x1ffffffffffff800, 2305843009213693952, -2048, x5, 0, x20)

inst_1:
// rs1 != rd, rs1==x25, rd==x26, imm_val == 0, rs1_val==-6148914691236517205 and imm_val==0
// opcode: addi ; op1:x25; dest:x26; op1val:-6148914691236517205;  immval:0
TEST_IMM_OP( addi, x26, x25, 0xaaaaaaaaaaaaaaab, -6148914691236517205, 0, x5, 8, x20)

inst_2:
// rs1==x26, rd==x2, imm_val == (2**(12-1)-1), rs1_val > 0 and imm_val > 0, rs1_val == 536870912, imm_val == 2047
// opcode: addi ; op1:x26; dest:x2; op1val:536870912;  immval:2047
TEST_IMM_OP( addi, x2, x26, 0x200007ff, 536870912, 2047, x5, 16, x20)

inst_3:
// rs1==x6, rd==x25, imm_val == 1, rs1_val == -2097153, rs1_val < 0 and imm_val > 0
// opcode: addi ; op1:x6; dest:x25; op1val:-2097153;  immval:1
TEST_IMM_OP( addi, x25, x6, 0xffffffffffe00000, -2097153, 1, x5, 24, x20)

inst_4:
// rs1==x15, rd==x18, rs1_val == (-2**(xlen-1)), rs1_val == -9223372036854775808, imm_val == 512
// opcode: addi ; op1:x15; dest:x18; op1val:-9223372036854775808;  immval:512
TEST_IMM_OP( addi, x18, x15, 0x8000000000000200, -9223372036854775808, 512, x5, 32, x20)

inst_5:
// rs1==x16, rd==x23, rs1_val == 0, imm_val == 128
// opcode: addi ; op1:x16; dest:x23; op1val:0;  immval:128
TEST_IMM_OP( addi, x23, x16, 0x80, 0, 128, x5, 40, x20)

inst_6:
// rs1==x24, rd==x3, rs1_val == (2**(xlen-1)-1), imm_val == 256, rs1_val == 9223372036854775807
// opcode: addi ; op1:x24; dest:x3; op1val:9223372036854775807;  immval:256
TEST_IMM_OP( addi, x3, x24, 0x80000000000000ff, 9223372036854775807, 256, x5, 48, x20)

inst_7:
// rs1==x19, rd==x29, rs1_val == 1, imm_val == -9
// opcode: addi ; op1:x19; dest:x29; op1val:1;  immval:-9
TEST_IMM_OP( addi, x29, x19, 0xfffffffffffffff8, 1, -9, x5, 56, x20)

inst_8:
// rs1==x10, rd==x21, rs1_val == imm_val, imm_val == -3, rs1_val < 0 and imm_val < 0, rs1_val == -3
// opcode: addi ; op1:x10; dest:x21; op1val:-3;  immval:-3
TEST_IMM_OP( addi, x21, x10, 0xfffffffffffffffa, -3, -3, x5, 64, x20)

inst_9:
// rs1==x13, rd==x24, imm_val == 2, rs1_val == 549755813888
// opcode: addi ; op1:x13; dest:x24; op1val:549755813888;  immval:2
TEST_IMM_OP( addi, x24, x13, 0x8000000002, 549755813888, 2, x5, 72, x20)

inst_10:
// rs1==x23, rd==x12, imm_val == 4, rs1_val==6148914691236517206 and imm_val==4
// opcode: addi ; op1:x23; dest:x12; op1val:6148914691236517206;  immval:4
TEST_IMM_OP( addi, x12, x23, 0x555555555555555a, 6148914691236517206, 4, x5, 80, x20)

inst_11:
// rs1==x9, rd==x19, imm_val == 8, rs1_val == -8193
// opcode: addi ; op1:x9; dest:x19; op1val:-8193;  immval:8
TEST_IMM_OP( addi, x19, x9, 0xffffffffffffe007, -8193, 8, x5, 88, x20)

inst_12:
// rs1==x21, rd==x7, imm_val == 16, 
// opcode: addi ; op1:x21; dest:x7; op1val:3;  immval:16
TEST_IMM_OP( addi, x7, x21, 0x13, 3, 16, x5, 96, x20)

inst_13:
// rs1==x12, rd==x27, imm_val == 32, rs1_val == -32769
// opcode: addi ; op1:x12; dest:x27; op1val:-32769;  immval:32
TEST_IMM_OP( addi, x27, x12, 0xffffffffffff801f, -32769, 32, x5, 104, x20)

inst_14:
// rs1==x8, rd==x9, imm_val == 64, rs1_val == -17179869185
// opcode: addi ; op1:x8; dest:x9; op1val:-17179869185;  immval:64
TEST_IMM_OP( addi, x9, x8, 0xfffffffc0000003f, -17179869185, 64, x5, 112, x20)

inst_15:
// rs1==x7, rd==x22, imm_val == 1024, 
// opcode: addi ; op1:x7; dest:x22; op1val:2305843009213693952;  immval:1024
TEST_IMM_OP( addi, x22, x7, 0x2000000000000400, 2305843009213693952, 1024, x5, 120, x20)

inst_16:
// rs1==x14, rd==x28, imm_val == -2, rs1_val == -2
// opcode: addi ; op1:x14; dest:x28; op1val:-2;  immval:-2
TEST_IMM_OP( addi, x28, x14, 0xfffffffffffffffc, -2, -2, x5, 128, x20)

inst_17:
// rs1==x1, rd==x4, imm_val == -5, rs1_val == 131072
// opcode: addi ; op1:x1; dest:x4; op1val:131072;  immval:-5
TEST_IMM_OP( addi, x4, x1, 0x1fffb, 131072, -5, x5, 136, x20)

inst_18:
// rs1==x3, rd==x11, imm_val == -17, rs1_val == 18014398509481984
// opcode: addi ; op1:x3; dest:x11; op1val:18014398509481984;  immval:-17
TEST_IMM_OP( addi, x11, x3, 0x3fffffffffffef, 18014398509481984, -17, x5, 144, x20)

inst_19:
// rs1==x27, rd==x6, imm_val == -33, rs1_val == -65
// opcode: addi ; op1:x27; dest:x6; op1val:-65;  immval:-33
TEST_IMM_OP( addi, x6, x27, 0xffffffffffffff9e, -65, -33, x5, 152, x3)

inst_20:
// rs1==x2, rd==x31, imm_val == -65, rs1_val == 2147483648
// opcode: addi ; op1:x2; dest:x31; op1val:2147483648;  immval:-65
TEST_IMM_OP( addi, x31, x2, 0x7fffffbf, 2147483648, -65, x5, 160, x3)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_21:
// rs1==x11, rd==x15, imm_val == -129, rs1_val == -137438953473
// opcode: addi ; op1:x11; dest:x15; op1val:-137438953473;  immval:-129
TEST_IMM_OP( addi, x15, x11, 0xffffffdfffffff7e, -137438953473, -129, x2, 0, x3)

inst_22:
// rs1==x30, rd==x8, imm_val == -257, 
// opcode: addi ; op1:x30; dest:x8; op1val:3689348814741910323;  immval:-257
TEST_IMM_OP( addi, x8, x30, 0x3333333333333232, 3689348814741910323, -257, x2, 8, x3)

inst_23:
// rs1==x5, rd==x20, imm_val == -513, 
// opcode: addi ; op1:x5; dest:x20; op1val:3689348814741910322;  immval:-513
TEST_IMM_OP( addi, x20, x5, 0x3333333333333131, 3689348814741910322, -513, x2, 16, x3)

inst_24:
// rs1==x31, rd==x13, imm_val == -1025, rs1_val == 4096
// opcode: addi ; op1:x31; dest:x13; op1val:4096;  immval:-1025
TEST_IMM_OP( addi, x13, x31, 0xbff, 4096, -1025, x2, 24, x3)

inst_25:
// rs1==x20, rd==x16, imm_val == 1365, rs1_val == -33
// opcode: addi ; op1:x20; dest:x16; op1val:-33;  immval:1365
TEST_IMM_OP( addi, x16, x20, 0x534, -33, 1365, x2, 32, x3)

inst_26:
// rs1==x0, rd==x1, imm_val == -1366, rs1_val == 274877906944
// opcode: addi ; op1:x0; dest:x1; op1val:274877906944;  immval:-1366
TEST_IMM_OP( addi, x1, x0, 0x3ffffffaaa, 274877906944, -1366, x2, 40, x3)

inst_27:
// rs1==x28, rd==x5, rs1_val == 2, 
// opcode: addi ; op1:x28; dest:x5; op1val:2;  immval:1
TEST_IMM_OP( addi, x5, x28, 0x3, 2, 1, x2, 48, x3)

inst_28:
// rs1==x18, rd==x14, rs1_val == 4, 
// opcode: addi ; op1:x18; dest:x14; op1val:4;  immval:-513
TEST_IMM_OP( addi, x14, x18, 0xfffffffffffffe03, 4, -513, x2, 56, x3)

inst_29:
// rs1==x4, rd==x30, rs1_val == 8, 
// opcode: addi ; op1:x4; dest:x30; op1val:8;  immval:6
TEST_IMM_OP( addi, x30, x4, 0xe, 8, 6, x2, 64, x3)

inst_30:
// rs1==x29, rd==x0, rs1_val == 16, 
// opcode: addi ; op1:x29; dest:x0; op1val:16;  immval:6
TEST_IMM_OP( addi, x0, x29, 0x16, 16, 6, x2, 72, x3)

inst_31:
// rs1==x22, rd==x10, rs1_val == 32, 
// opcode: addi ; op1:x22; dest:x10; op1val:32;  immval:7
TEST_IMM_OP( addi, x10, x22, 0x27, 32, 7, x2, 80, x3)

inst_32:
// rs1_val == 64, 
// opcode: addi ; op1:x10; dest:x11; op1val:64;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x40, 64, 0, x2, 88, x3)

inst_33:
// rs1_val == 128, 
// opcode: addi ; op1:x10; dest:x11; op1val:128;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x82, 128, 2, x2, 96, x3)

inst_34:
// rs1_val == 256, 
// opcode: addi ; op1:x10; dest:x11; op1val:256;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x104, 256, 4, x2, 104, x3)

inst_35:
// rs1_val == 512, 
// opcode: addi ; op1:x10; dest:x11; op1val:512;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffcaa, 512, -1366, x2, 112, x3)

inst_36:
// rs1_val == 1024, 
// opcode: addi ; op1:x10; dest:x11; op1val:1024;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x956, 1024, 1366, x2, 120, x3)

inst_37:
// rs1_val == 2048, 
// opcode: addi ; op1:x10; dest:x11; op1val:2048;  immval:-6
TEST_IMM_OP( addi, x11, x10, 0x7fa, 2048, -6, x2, 128, x3)

inst_38:
// rs1_val == 8192, 
// opcode: addi ; op1:x10; dest:x11; op1val:8192;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x1fd4, 8192, -44, x2, 136, x3)

inst_39:
// rs1_val == 16384, 
// opcode: addi ; op1:x10; dest:x11; op1val:16384;  immval:-129
TEST_IMM_OP( addi, x11, x10, 0x3f7f, 16384, -129, x2, 144, x3)

inst_40:
// rs1_val == 32768, 
// opcode: addi ; op1:x10; dest:x11; op1val:32768;  immval:-1
TEST_IMM_OP( addi, x11, x10, 0x7fff, 32768, -1, x2, 152, x3)

inst_41:
// rs1_val == 65536, 
// opcode: addi ; op1:x10; dest:x11; op1val:65536;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffd3, 65536, -45, x2, 160, x3)

inst_42:
// rs1_val == 262144, 
// opcode: addi ; op1:x10; dest:x11; op1val:262144;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x4002c, 262144, 44, x2, 168, x3)

inst_43:
// rs1_val == 524288, 
// opcode: addi ; op1:x10; dest:x11; op1val:524288;  immval:-257
TEST_IMM_OP( addi, x11, x10, 0x7feff, 524288, -257, x2, 176, x3)

inst_44:
// rs1_val == 1048576, 
// opcode: addi ; op1:x10; dest:x11; op1val:1048576;  immval:-513
TEST_IMM_OP( addi, x11, x10, 0xffdff, 1048576, -513, x2, 184, x3)

inst_45:
// rs1_val == 2097152, 
// opcode: addi ; op1:x10; dest:x11; op1val:2097152;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x200666, 2097152, 1638, x2, 192, x3)

inst_46:
// rs1_val == 4194304, 
// opcode: addi ; op1:x10; dest:x11; op1val:4194304;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x400004, 4194304, 4, x2, 200, x3)

inst_47:
// rs1_val == 8388608, 
// opcode: addi ; op1:x10; dest:x11; op1val:8388608;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x800000, 8388608, 0, x2, 208, x3)

inst_48:
// rs1_val == 16777216, 
// opcode: addi ; op1:x10; dest:x11; op1val:16777216;  immval:-513
TEST_IMM_OP( addi, x11, x10, 0xfffdff, 16777216, -513, x2, 216, x3)

inst_49:
// rs1_val == 33554432, 
// opcode: addi ; op1:x10; dest:x11; op1val:33554432;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x2000556, 33554432, 1366, x2, 224, x3)

inst_50:
// rs1_val == 67108864, 
// opcode: addi ; op1:x10; dest:x11; op1val:67108864;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x4000005, 67108864, 5, x2, 232, x3)

inst_51:
// rs1_val == 134217728, 
// opcode: addi ; op1:x10; dest:x11; op1val:134217728;  immval:-1025
TEST_IMM_OP( addi, x11, x10, 0x7fffbff, 134217728, -1025, x2, 240, x3)

inst_52:
// rs1_val == 268435456, 
// opcode: addi ; op1:x10; dest:x11; op1val:268435456;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x10000000, 268435456, 0, x2, 248, x3)

inst_53:
// rs1_val == 1073741824, 
// opcode: addi ; op1:x10; dest:x11; op1val:1073741824;  immval:-2048
TEST_IMM_OP( addi, x11, x10, 0x3ffff800, 1073741824, -2048, x2, 256, x3)

inst_54:
// rs1_val == 4294967296, 
// opcode: addi ; op1:x10; dest:x11; op1val:4294967296;  immval:-5
TEST_IMM_OP( addi, x11, x10, 0xfffffffb, 4294967296, -5, x2, 264, x3)

inst_55:
// rs1_val == 8589934592, 
// opcode: addi ; op1:x10; dest:x11; op1val:8589934592;  immval:-1025
TEST_IMM_OP( addi, x11, x10, 0x1fffffbff, 8589934592, -1025, x2, 272, x3)

inst_56:
// rs1_val == 17179869184, 
// opcode: addi ; op1:x10; dest:x11; op1val:17179869184;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x400000004, 17179869184, 4, x2, 280, x3)

inst_57:
// rs1_val == 34359738368, 
// opcode: addi ; op1:x10; dest:x11; op1val:34359738368;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x800000006, 34359738368, 6, x2, 288, x3)

inst_58:
// rs1_val == 68719476736, 
// opcode: addi ; op1:x10; dest:x11; op1val:68719476736;  immval:128
TEST_IMM_OP( addi, x11, x10, 0x1000000080, 68719476736, 128, x2, 296, x3)

inst_59:
// rs1_val == 137438953472, 
// opcode: addi ; op1:x10; dest:x11; op1val:137438953472;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x2000000665, 137438953472, 1637, x2, 304, x3)

inst_60:
// rs1_val == 1099511627776, 
// opcode: addi ; op1:x10; dest:x11; op1val:1099511627776;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x10000000002, 1099511627776, 2, x2, 312, x3)

inst_61:
// rs1_val == 2199023255552, 
// opcode: addi ; op1:x10; dest:x11; op1val:2199023255552;  immval:32
TEST_IMM_OP( addi, x11, x10, 0x20000000020, 2199023255552, 32, x2, 320, x3)

inst_62:
// rs1_val == 4398046511104, 
// opcode: addi ; op1:x10; dest:x11; op1val:4398046511104;  immval:-1
TEST_IMM_OP( addi, x11, x10, 0x3ffffffffff, 4398046511104, -1, x2, 328, x3)

inst_63:
// rs1_val == 8796093022208, 
// opcode: addi ; op1:x10; dest:x11; op1val:8796093022208;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x80000000005, 8796093022208, 5, x2, 336, x3)

inst_64:
// rs1_val == 17592186044416, 
// opcode: addi ; op1:x10; dest:x11; op1val:17592186044416;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x100000000006, 17592186044416, 6, x2, 344, x3)

inst_65:
// rs1_val == 35184372088832, 
// opcode: addi ; op1:x10; dest:x11; op1val:35184372088832;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x200000000000, 35184372088832, 0, x2, 352, x3)

inst_66:
// rs1_val == 70368744177664, 
// opcode: addi ; op1:x10; dest:x11; op1val:70368744177664;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x400000000003, 70368744177664, 3, x2, 360, x3)

inst_67:
// rs1_val == 140737488355328, 
// opcode: addi ; op1:x10; dest:x11; op1val:140737488355328;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x80000000002c, 140737488355328, 44, x2, 368, x3)

inst_68:
// rs1_val == 281474976710656, 
// opcode: addi ; op1:x10; dest:x11; op1val:281474976710656;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffaaa, 281474976710656, -1366, x2, 376, x3)

inst_69:
// rs1_val == 562949953421312, 
// opcode: addi ; op1:x10; dest:x11; op1val:562949953421312;  immval:128
TEST_IMM_OP( addi, x11, x10, 0x2000000000080, 562949953421312, 128, x2, 384, x3)

inst_70:
// rs1_val == 1125899906842624, 
// opcode: addi ; op1:x10; dest:x11; op1val:1125899906842624;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x4000000000004, 1125899906842624, 4, x2, 392, x3)

inst_71:
// rs1_val == 2251799813685248, 
// opcode: addi ; op1:x10; dest:x11; op1val:2251799813685248;  immval:-1025
TEST_IMM_OP( addi, x11, x10, 0x7fffffffffbff, 2251799813685248, -1025, x2, 400, x3)

inst_72:
// rs1_val == 4503599627370496, 
// opcode: addi ; op1:x10; dest:x11; op1val:4503599627370496;  immval:128
TEST_IMM_OP( addi, x11, x10, 0x10000000000080, 4503599627370496, 128, x2, 408, x3)

inst_73:
// rs1_val == 9007199254740992, 
// opcode: addi ; op1:x10; dest:x11; op1val:9007199254740992;  immval:-3
TEST_IMM_OP( addi, x11, x10, 0x1ffffffffffffd, 9007199254740992, -3, x2, 416, x3)

inst_74:
// rs1_val == 36028797018963968, 
// opcode: addi ; op1:x10; dest:x11; op1val:36028797018963968;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x80000000000556, 36028797018963968, 1366, x2, 424, x3)

inst_75:
// rs1_val == 72057594037927936, 
// opcode: addi ; op1:x10; dest:x11; op1val:72057594037927936;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x100000000000005, 72057594037927936, 5, x2, 432, x3)

inst_76:
// rs1_val == 144115188075855872, 
// opcode: addi ; op1:x10; dest:x11; op1val:144115188075855872;  immval:-7
TEST_IMM_OP( addi, x11, x10, 0x1fffffffffffff9, 144115188075855872, -7, x2, 440, x3)

inst_77:
// rs1_val == 288230376151711744, 
// opcode: addi ; op1:x10; dest:x11; op1val:288230376151711744;  immval:32
TEST_IMM_OP( addi, x11, x10, 0x400000000000020, 288230376151711744, 32, x2, 448, x3)

inst_78:
// rs1_val == 576460752303423488, 
// opcode: addi ; op1:x10; dest:x11; op1val:576460752303423488;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x7fffffffffffaab, 576460752303423488, -1365, x2, 456, x3)

inst_79:
// rs1_val == 1152921504606846976, 
// opcode: addi ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:-6
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffa, 1152921504606846976, -6, x2, 464, x3)

inst_80:
// rs1_val == 4611686018427387904, 
// opcode: addi ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:128
TEST_IMM_OP( addi, x11, x10, 0x4000000000000080, 4611686018427387904, 128, x2, 472, x3)

inst_81:
// rs1_val == -5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-5;  immval:16
TEST_IMM_OP( addi, x11, x10, 0xb, -5, 16, x2, 480, x3)

inst_82:
// rs1_val == -9, 
// opcode: addi ; op1:x10; dest:x11; op1val:-9;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x54c, -9, 1365, x2, 488, x3)

inst_83:
// rs1_val == -17, 
// opcode: addi ; op1:x10; dest:x11; op1val:-17;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x321, -17, 818, x2, 496, x3)

inst_84:
// rs1_val == -129, 
// opcode: addi ; op1:x10; dest:x11; op1val:-129;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffab, -129, 44, x2, 504, x3)

inst_85:
// rs1_val == -257, 
// opcode: addi ; op1:x10; dest:x11; op1val:-257;  immval:-17
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffeee, -257, -17, x2, 512, x3)

inst_86:
// rs1_val == -513, 
// opcode: addi ; op1:x10; dest:x11; op1val:-513;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffe2b, -513, 44, x2, 520, x3)

inst_87:
// rs1_val == -1025, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1025;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffc03, -1025, 4, x2, 528, x3)

inst_88:
// rs1_val == -2049, 
// opcode: addi ; op1:x10; dest:x11; op1val:-2049;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffff805, -2049, 6, x2, 536, x3)

inst_89:
// rs1_val == -4097, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4097;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffff02c, -4097, 45, x2, 544, x3)

inst_90:
// rs1_val == -16385, 
// opcode: addi ; op1:x10; dest:x11; op1val:-16385;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffc004, -16385, 5, x2, 552, x3)

inst_91:
// rs1_val == -65537, 
// opcode: addi ; op1:x10; dest:x11; op1val:-65537;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xffffffffffff0664, -65537, 1637, x2, 560, x3)

inst_92:
// rs1_val == -131073, 
// opcode: addi ; op1:x10; dest:x11; op1val:-131073;  immval:-2048
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffdf7ff, -131073, -2048, x2, 568, x3)

inst_93:
// rs1_val == -262145, 
// opcode: addi ; op1:x10; dest:x11; op1val:-262145;  immval:-3
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffbfffc, -262145, -3, x2, 576, x3)

inst_94:
// rs1_val == -524289, 
// opcode: addi ; op1:x10; dest:x11; op1val:-524289;  immval:8
TEST_IMM_OP( addi, x11, x10, 0xfffffffffff80007, -524289, 8, x2, 584, x3)

inst_95:
// rs1_val == -1048577, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1048577;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xffffffffffefffff, -1048577, 0, x2, 592, x3)

inst_96:
// rs1_val == -4194305, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4194305;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffbfffd3, -4194305, -44, x2, 600, x3)

inst_97:
// rs1_val == -8388609, 
// opcode: addi ; op1:x10; dest:x11; op1val:-8388609;  immval:-10
TEST_IMM_OP( addi, x11, x10, 0xffffffffff7ffff5, -8388609, -10, x2, 608, x3)

inst_98:
// rs1_val == -16777217, 
// opcode: addi ; op1:x10; dest:x11; op1val:-16777217;  immval:-6
TEST_IMM_OP( addi, x11, x10, 0xfffffffffefffff9, -16777217, -6, x2, 616, x3)

inst_99:
// rs1_val == -33554433, 
// opcode: addi ; op1:x10; dest:x11; op1val:-33554433;  immval:-8
TEST_IMM_OP( addi, x11, x10, 0xfffffffffdfffff7, -33554433, -8, x2, 624, x3)

inst_100:
// rs1_val == -67108865, 
// opcode: addi ; op1:x10; dest:x11; op1val:-67108865;  immval:-1024
TEST_IMM_OP( addi, x11, x10, 0xfffffffffbfffbff, -67108865, -1024, x2, 632, x3)

inst_101:
// rs1_val == -134217729, 
// opcode: addi ; op1:x10; dest:x11; op1val:-134217729;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xfffffffff7ffffff, -134217729, 0, x2, 640, x3)

inst_102:
// rs1_val == -268435457, 
// opcode: addi ; op1:x10; dest:x11; op1val:-268435457;  immval:-129
TEST_IMM_OP( addi, x11, x10, 0xffffffffefffff7e, -268435457, -129, x2, 648, x3)

inst_103:
// rs1_val == -536870913, 
// opcode: addi ; op1:x10; dest:x11; op1val:-536870913;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xffffffffe0000002, -536870913, 3, x2, 656, x3)

inst_104:
// rs1_val == -1073741825, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1073741825;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xffffffffc000002d, -1073741825, 46, x2, 664, x3)

inst_105:
// rs1_val == -2147483649, 
// opcode: addi ; op1:x10; dest:x11; op1val:-2147483649;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xffffffff8000002b, -2147483649, 44, x2, 672, x3)

inst_106:
// rs1_val == -4294967297, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4294967297;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xffffffff00000001, -4294967297, 2, x2, 680, x3)

inst_107:
// rs1_val == -8589934593, 
// opcode: addi ; op1:x10; dest:x11; op1val:-8589934593;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xfffffffe00000003, -8589934593, 4, x2, 688, x3)

inst_108:
// rs1_val == -34359738369, 
// opcode: addi ; op1:x10; dest:x11; op1val:-34359738369;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xfffffff800000003, -34359738369, 4, x2, 696, x3)

inst_109:
// rs1_val == -68719476737, 
// opcode: addi ; op1:x10; dest:x11; op1val:-68719476737;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xfffffff000000001, -68719476737, 2, x2, 704, x3)

inst_110:
// rs1_val == -274877906945, 
// opcode: addi ; op1:x10; dest:x11; op1val:-274877906945;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xffffffc000000332, -274877906945, 819, x2, 712, x3)

inst_111:
// rs1_val == -549755813889, 
// opcode: addi ; op1:x10; dest:x11; op1val:-549755813889;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xffffff8000000665, -549755813889, 1638, x2, 720, x3)

inst_112:
// rs1_val == -1099511627777, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1099511627777;  immval:9
TEST_IMM_OP( addi, x11, x10, 0xffffff0000000008, -1099511627777, 9, x2, 728, x3)

inst_113:
// rs1_val == -2199023255553, 
// opcode: addi ; op1:x10; dest:x11; op1val:-2199023255553;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xfffffe0000000002, -2199023255553, 3, x2, 736, x3)

inst_114:
// rs1_val == -4398046511105, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4398046511105;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xfffffc0000000002, -4398046511105, 3, x2, 744, x3)

inst_115:
// rs1_val == -8796093022209, 
// opcode: addi ; op1:x10; dest:x11; op1val:-8796093022209;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xfffff7ffffffffd3, -8796093022209, -44, x2, 752, x3)

inst_116:
// rs1_val == -17592186044417, 
// opcode: addi ; op1:x10; dest:x11; op1val:-17592186044417;  immval:8
TEST_IMM_OP( addi, x11, x10, 0xfffff00000000007, -17592186044417, 8, x2, 760, x3)

inst_117:
// rs1_val == -35184372088833, 
// opcode: addi ; op1:x10; dest:x11; op1val:-35184372088833;  immval:-6
TEST_IMM_OP( addi, x11, x10, 0xffffdffffffffff9, -35184372088833, -6, x2, 768, x3)

inst_118:
// rs1_val == -70368744177665, 
// opcode: addi ; op1:x10; dest:x11; op1val:-70368744177665;  immval:-8
TEST_IMM_OP( addi, x11, x10, 0xffffbffffffffff7, -70368744177665, -8, x2, 776, x3)

inst_119:
// rs1_val == -140737488355329, 
// opcode: addi ; op1:x10; dest:x11; op1val:-140737488355329;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffff7fffffffffd3, -140737488355329, -44, x2, 784, x3)

inst_120:
// rs1_val == -281474976710657, 
// opcode: addi ; op1:x10; dest:x11; op1val:-281474976710657;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xffff000000000333, -281474976710657, 820, x2, 792, x3)

inst_121:
// rs1_val == -562949953421313, 
// opcode: addi ; op1:x10; dest:x11; op1val:-562949953421313;  immval:-1
TEST_IMM_OP( addi, x11, x10, 0xfffdfffffffffffe, -562949953421313, -1, x2, 800, x3)

inst_122:
// rs1_val == -1125899906842625, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1125899906842625;  immval:64
TEST_IMM_OP( addi, x11, x10, 0xfffc00000000003f, -1125899906842625, 64, x2, 808, x3)

inst_123:
// rs1_val == -2251799813685249, 
// opcode: addi ; op1:x10; dest:x11; op1val:-2251799813685249;  immval:8
TEST_IMM_OP( addi, x11, x10, 0xfff8000000000007, -2251799813685249, 8, x2, 816, x3)

inst_124:
// rs1_val == -4503599627370497, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4503599627370497;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xfff0000000000333, -4503599627370497, 820, x2, 824, x3)

inst_125:
// rs1_val == -9007199254740993, 
// opcode: addi ; op1:x10; dest:x11; op1val:-9007199254740993;  immval:-1
TEST_IMM_OP( addi, x11, x10, 0xffdffffffffffffe, -9007199254740993, -1, x2, 832, x3)

inst_126:
// rs1_val == -18014398509481985, 
// opcode: addi ; op1:x10; dest:x11; op1val:-18014398509481985;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffbfffffffffffd2, -18014398509481985, -45, x2, 840, x3)

inst_127:
// rs1_val == -36028797018963969, 
// opcode: addi ; op1:x10; dest:x11; op1val:-36028797018963969;  immval:-2048
TEST_IMM_OP( addi, x11, x10, 0xff7ffffffffff7ff, -36028797018963969, -2048, x2, 848, x3)

inst_128:
// rs1_val == -72057594037927937, 
// opcode: addi ; op1:x10; dest:x11; op1val:-72057594037927937;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xff00000000000555, -72057594037927937, 1366, x2, 856, x3)

inst_129:
// rs1_val == -144115188075855873, 
// opcode: addi ; op1:x10; dest:x11; op1val:-144115188075855873;  immval:-65
TEST_IMM_OP( addi, x11, x10, 0xfdffffffffffffbe, -144115188075855873, -65, x2, 864, x3)

inst_130:
// rs1_val == -288230376151711745, 
// opcode: addi ; op1:x10; dest:x11; op1val:-288230376151711745;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xfc00000000000666, -288230376151711745, 1639, x2, 872, x3)

inst_131:
// rs1_val == -576460752303423489, 
// opcode: addi ; op1:x10; dest:x11; op1val:-576460752303423489;  immval:-33
TEST_IMM_OP( addi, x11, x10, 0xf7ffffffffffffde, -576460752303423489, -33, x2, 880, x3)

inst_132:
// rs1_val == -1152921504606846977, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1152921504606846977;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xf000000000000666, -1152921504606846977, 1639, x2, 888, x3)

inst_133:
// rs1_val == -2305843009213693953, 
// opcode: addi ; op1:x10; dest:x11; op1val:-2305843009213693953;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xe000000000000002, -2305843009213693953, 3, x2, 896, x3)

inst_134:
// rs1_val == -4611686018427387905, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4611686018427387905;  immval:256
TEST_IMM_OP( addi, x11, x10, 0xc0000000000000ff, -4611686018427387905, 256, x2, 904, x3)

inst_135:
// rs1_val == 6148914691236517205, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:-4
TEST_IMM_OP( addi, x11, x10, 0x5555555555555551, 6148914691236517205, -4, x2, 912, x3)

inst_136:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206 and imm_val==819
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaddd, -6148914691236517206, 819, x2, 920, x3)

inst_137:
// rs1_val==3 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x6, 3, 3, x2, 928, x3)

inst_138:
// rs1_val==3 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x558, 3, 1365, x2, 936, x3)

inst_139:
// rs1_val==3 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaad, 3, -1366, x2, 944, x3)

inst_140:
// rs1_val==3 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x8, 3, 5, x2, 952, x3)

inst_141:
// rs1_val==3 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x336, 3, 819, x2, 960, x3)

inst_142:
// rs1_val==3 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x669, 3, 1638, x2, 968, x3)

inst_143:
// rs1_val==3 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd6, 3, -45, x2, 976, x3)

inst_144:
// rs1_val==3 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x30, 3, 45, x2, 984, x3)

inst_145:
// rs1_val==3 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x5, 3, 2, x2, 992, x3)

inst_146:
// rs1_val==3 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x557, 3, 1364, x2, 1000, x3)

inst_147:
// rs1_val==3 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x3, 3, 0, x2, 1008, x3)

inst_148:
// rs1_val==3 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x7, 3, 4, x2, 1016, x3)

inst_149:
// rs1_val==3 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x335, 3, 818, x2, 1024, x3)

inst_150:
// rs1_val==3 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x668, 3, 1637, x2, 1032, x3)

inst_151:
// rs1_val==3 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x2f, 3, 44, x2, 1040, x3)

inst_152:
// rs1_val==3 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x559, 3, 1366, x2, 1048, x3)

inst_153:
// rs1_val==3 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaae, 3, -1365, x2, 1056, x3)

inst_154:
// rs1_val==3 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x9, 3, 6, x2, 1064, x3)

inst_155:
// rs1_val==3 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x337, 3, 820, x2, 1072, x3)

inst_156:
// rs1_val==3 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x66a, 3, 1639, x2, 1080, x3)

inst_157:
// rs1_val==3 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd7, 3, -44, x2, 1088, x3)

inst_158:
// rs1_val==3 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:3;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x31, 3, 46, x2, 1096, x3)

inst_159:
// rs1_val==6148914691236517205 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x5555555555555558, 6148914691236517205, 3, x2, 1104, x3)

inst_160:
// rs1_val==6148914691236517205 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aaa, 6148914691236517205, 1365, x2, 1112, x3)

inst_161:
// rs1_val==6148914691236517205 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x5555555555554fff, 6148914691236517205, -1366, x2, 1120, x3)

inst_162:
// rs1_val==6148914691236517205 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x555555555555555a, 6148914691236517205, 5, x2, 1128, x3)

inst_163:
// rs1_val==6148914691236517205 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x5555555555555888, 6148914691236517205, 819, x2, 1136, x3)

inst_164:
// rs1_val==6148914691236517205 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bbb, 6148914691236517205, 1638, x2, 1144, x3)

inst_165:
// rs1_val==6148914691236517205 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x5555555555555528, 6148914691236517205, -45, x2, 1152, x3)

inst_166:
// rs1_val==6148914691236517205 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x5555555555555582, 6148914691236517205, 45, x2, 1160, x3)

inst_167:
// rs1_val==6148914691236517205 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x5555555555555557, 6148914691236517205, 2, x2, 1168, x3)

inst_168:
// rs1_val==6148914691236517205 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aa9, 6148914691236517205, 1364, x2, 1176, x3)

inst_169:
// rs1_val==6148914691236517205 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x5555555555555555, 6148914691236517205, 0, x2, 1184, x3)

inst_170:
// rs1_val==6148914691236517205 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x5555555555555559, 6148914691236517205, 4, x2, 1192, x3)

inst_171:
// rs1_val==6148914691236517205 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x5555555555555887, 6148914691236517205, 818, x2, 1200, x3)

inst_172:
// rs1_val==6148914691236517205 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bba, 6148914691236517205, 1637, x2, 1208, x3)

inst_173:
// rs1_val==6148914691236517205 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x5555555555555581, 6148914691236517205, 44, x2, 1216, x3)

inst_174:
// rs1_val==6148914691236517205 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aab, 6148914691236517205, 1366, x2, 1224, x3)

inst_175:
// rs1_val==6148914691236517205 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x5555555555555000, 6148914691236517205, -1365, x2, 1232, x3)

inst_176:
// rs1_val==6148914691236517205 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x555555555555555b, 6148914691236517205, 6, x2, 1240, x3)

inst_177:
// rs1_val==6148914691236517205 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x5555555555555889, 6148914691236517205, 820, x2, 1248, x3)

inst_178:
// rs1_val==6148914691236517205 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bbc, 6148914691236517205, 1639, x2, 1256, x3)

inst_179:
// rs1_val==6148914691236517205 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x5555555555555529, 6148914691236517205, -44, x2, 1264, x3)

inst_180:
// rs1_val==6148914691236517205 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x5555555555555583, 6148914691236517205, 46, x2, 1272, x3)

inst_181:
// rs1_val==-6148914691236517206 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaad, -6148914691236517206, 3, x2, 1280, x3)

inst_182:
// rs1_val==-6148914691236517206 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaafff, -6148914691236517206, 1365, x2, 1288, x3)

inst_183:
// rs1_val==-6148914691236517206 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaa554, -6148914691236517206, -1366, x2, 1296, x3)

inst_184:
// rs1_val==-6148914691236517206 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaaf, -6148914691236517206, 5, x2, 1304, x3)

inst_185:
// rs1_val==-6148914691236517206 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab110, -6148914691236517206, 1638, x2, 1312, x3)

inst_186:
// rs1_val==-6148914691236517206 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaa7d, -6148914691236517206, -45, x2, 1320, x3)

inst_187:
// rs1_val==-6148914691236517206 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaad7, -6148914691236517206, 45, x2, 1328, x3)

inst_188:
// rs1_val==-6148914691236517206 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaac, -6148914691236517206, 2, x2, 1336, x3)

inst_189:
// rs1_val==-6148914691236517206 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaffe, -6148914691236517206, 1364, x2, 1344, x3)

inst_190:
// rs1_val==-6148914691236517206 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaaa, -6148914691236517206, 0, x2, 1352, x3)

inst_191:
// rs1_val==-6148914691236517206 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaae, -6148914691236517206, 4, x2, 1360, x3)

inst_192:
// rs1_val==-6148914691236517206 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:818
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaddc, -6148914691236517206, 818, x2, 1368, x3)

inst_193:
// rs1_val==-6148914691236517206 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab10f, -6148914691236517206, 1637, x2, 1376, x3)

inst_194:
// rs1_val==-6148914691236517206 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaad6, -6148914691236517206, 44, x2, 1384, x3)

inst_195:
// rs1_val==-6148914691236517206 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab000, -6148914691236517206, 1366, x2, 1392, x3)

inst_196:
// rs1_val==-6148914691236517206 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaa555, -6148914691236517206, -1365, x2, 1400, x3)

inst_197:
// rs1_val==-6148914691236517206 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaab0, -6148914691236517206, 6, x2, 1408, x3)

inst_198:
// rs1_val==-6148914691236517206 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaadde, -6148914691236517206, 820, x2, 1416, x3)

inst_199:
// rs1_val==-6148914691236517206 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab111, -6148914691236517206, 1639, x2, 1424, x3)

inst_200:
// rs1_val==-6148914691236517206 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaa7e, -6148914691236517206, -44, x2, 1432, x3)

inst_201:
// rs1_val==-6148914691236517206 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaad8, -6148914691236517206, 46, x2, 1440, x3)

inst_202:
// rs1_val==5 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x8, 5, 3, x2, 1448, x3)

inst_203:
// rs1_val==5 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x55a, 5, 1365, x2, 1456, x3)

inst_204:
// rs1_val==5 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaaf, 5, -1366, x2, 1464, x3)

inst_205:
// rs1_val==5 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xa, 5, 5, x2, 1472, x3)

inst_206:
// rs1_val==5 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x338, 5, 819, x2, 1480, x3)

inst_207:
// rs1_val==5 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x66b, 5, 1638, x2, 1488, x3)

inst_208:
// rs1_val==5 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd8, 5, -45, x2, 1496, x3)

inst_209:
// rs1_val==5 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x32, 5, 45, x2, 1504, x3)

inst_210:
// rs1_val==5 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x7, 5, 2, x2, 1512, x3)

inst_211:
// rs1_val==5 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x559, 5, 1364, x2, 1520, x3)

inst_212:
// rs1_val==5 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x5, 5, 0, x2, 1528, x3)

inst_213:
// rs1_val==5 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x9, 5, 4, x2, 1536, x3)

inst_214:
// rs1_val==5 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x337, 5, 818, x2, 1544, x3)

inst_215:
// rs1_val==5 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x66a, 5, 1637, x2, 1552, x3)

inst_216:
// rs1_val==5 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x31, 5, 44, x2, 1560, x3)

inst_217:
// rs1_val==5 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x55b, 5, 1366, x2, 1568, x3)

inst_218:
// rs1_val==5 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffab0, 5, -1365, x2, 1576, x3)

inst_219:
// rs1_val==5 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xb, 5, 6, x2, 1584, x3)

inst_220:
// rs1_val==5 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x339, 5, 820, x2, 1592, x3)

inst_221:
// rs1_val==5 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x66c, 5, 1639, x2, 1600, x3)

inst_222:
// rs1_val==5 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd9, 5, -44, x2, 1608, x3)

inst_223:
// rs1_val==5 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:5;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x33, 5, 46, x2, 1616, x3)

inst_224:
// rs1_val==3689348814741910323 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x3333333333333336, 3689348814741910323, 3, x2, 1624, x3)

inst_225:
// rs1_val==3689348814741910323 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x3333333333333888, 3689348814741910323, 1365, x2, 1632, x3)

inst_226:
// rs1_val==3689348814741910323 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x3333333333332ddd, 3689348814741910323, -1366, x2, 1640, x3)

inst_227:
// rs1_val==3689348814741910323 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x3333333333333338, 3689348814741910323, 5, x2, 1648, x3)

inst_228:
// rs1_val==3689348814741910323 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x3333333333333666, 3689348814741910323, 819, x2, 1656, x3)

inst_229:
// rs1_val==3689348814741910323 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x3333333333333999, 3689348814741910323, 1638, x2, 1664, x3)

inst_230:
// rs1_val==3689348814741910323 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x3333333333333306, 3689348814741910323, -45, x2, 1672, x3)

inst_231:
// rs1_val==3689348814741910323 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x3333333333333360, 3689348814741910323, 45, x2, 1680, x3)

inst_232:
// rs1_val==3689348814741910323 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x3333333333333335, 3689348814741910323, 2, x2, 1688, x3)

inst_233:
// rs1_val==3689348814741910323 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x3333333333333887, 3689348814741910323, 1364, x2, 1696, x3)

inst_234:
// rs1_val==3689348814741910323 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x3333333333333333, 3689348814741910323, 0, x2, 1704, x3)

inst_235:
// rs1_val==3689348814741910323 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x3333333333333337, 3689348814741910323, 4, x2, 1712, x3)

inst_236:
// rs1_val==3689348814741910323 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x3333333333333665, 3689348814741910323, 818, x2, 1720, x3)

inst_237:
// rs1_val==3689348814741910323 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x3333333333333998, 3689348814741910323, 1637, x2, 1728, x3)

inst_238:
// rs1_val==3689348814741910323 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x333333333333335f, 3689348814741910323, 44, x2, 1736, x3)

inst_239:
// rs1_val==3689348814741910323 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x3333333333333889, 3689348814741910323, 1366, x2, 1744, x3)

inst_240:
// rs1_val==3689348814741910323 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x3333333333332dde, 3689348814741910323, -1365, x2, 1752, x3)

inst_241:
// rs1_val==3689348814741910323 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x3333333333333339, 3689348814741910323, 6, x2, 1760, x3)

inst_242:
// rs1_val==3689348814741910323 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x3333333333333667, 3689348814741910323, 820, x2, 1768, x3)

inst_243:
// rs1_val==3689348814741910323 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x333333333333399a, 3689348814741910323, 1639, x2, 1776, x3)

inst_244:
// rs1_val==3689348814741910323 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x3333333333333307, 3689348814741910323, -44, x2, 1784, x3)

inst_245:
// rs1_val==3689348814741910323 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x3333333333333361, 3689348814741910323, 46, x2, 1792, x3)

inst_246:
// rs1_val==7378697629483820646 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x6666666666666669, 7378697629483820646, 3, x2, 1800, x3)

inst_247:
// rs1_val==7378697629483820646 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bbb, 7378697629483820646, 1365, x2, 1808, x3)

inst_248:
// rs1_val==7378697629483820646 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x6666666666666110, 7378697629483820646, -1366, x2, 1816, x3)

inst_249:
// rs1_val==7378697629483820646 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x666666666666666b, 7378697629483820646, 5, x2, 1824, x3)

inst_250:
// rs1_val==7378697629483820646 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x6666666666666999, 7378697629483820646, 819, x2, 1832, x3)

inst_251:
// rs1_val==7378697629483820646 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x6666666666666ccc, 7378697629483820646, 1638, x2, 1840, x3)

inst_252:
// rs1_val==7378697629483820646 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x6666666666666639, 7378697629483820646, -45, x2, 1848, x3)

inst_253:
// rs1_val==7378697629483820646 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x6666666666666693, 7378697629483820646, 45, x2, 1856, x3)

inst_254:
// rs1_val==7378697629483820646 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x6666666666666668, 7378697629483820646, 2, x2, 1864, x3)

inst_255:
// rs1_val==7378697629483820646 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bba, 7378697629483820646, 1364, x2, 1872, x3)

inst_256:
// rs1_val==7378697629483820646 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x6666666666666666, 7378697629483820646, 0, x2, 1880, x3)

inst_257:
// rs1_val==7378697629483820646 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x666666666666666a, 7378697629483820646, 4, x2, 1888, x3)

inst_258:
// rs1_val==7378697629483820646 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x6666666666666998, 7378697629483820646, 818, x2, 1896, x3)

inst_259:
// rs1_val==7378697629483820646 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x6666666666666ccb, 7378697629483820646, 1637, x2, 1904, x3)

inst_260:
// rs1_val==7378697629483820646 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x6666666666666692, 7378697629483820646, 44, x2, 1912, x3)

inst_261:
// rs1_val==7378697629483820646 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bbc, 7378697629483820646, 1366, x2, 1920, x3)

inst_262:
// rs1_val==7378697629483820646 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x6666666666666111, 7378697629483820646, -1365, x2, 1928, x3)

inst_263:
// rs1_val==7378697629483820646 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x666666666666666c, 7378697629483820646, 6, x2, 1936, x3)

inst_264:
// rs1_val==7378697629483820646 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x666666666666699a, 7378697629483820646, 820, x2, 1944, x3)

inst_265:
// rs1_val==7378697629483820646 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x6666666666666ccd, 7378697629483820646, 1639, x2, 1952, x3)

inst_266:
// rs1_val==7378697629483820646 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x666666666666663a, 7378697629483820646, -44, x2, 1960, x3)

inst_267:
// rs1_val==7378697629483820646 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x6666666666666694, 7378697629483820646, 46, x2, 1968, x3)

inst_268:
// rs1_val==-3037000499 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd0, -3037000499, 3, x2, 1976, x3)

inst_269:
// rs1_val==-3037000499 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1222, -3037000499, 1365, x2, 1984, x3)

inst_270:
// rs1_val==-3037000499 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0777, -3037000499, -1366, x2, 1992, x3)

inst_271:
// rs1_val==-3037000499 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd2, -3037000499, 5, x2, 2000, x3)

inst_272:
// rs1_val==-3037000499 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1000, -3037000499, 819, x2, 2008, x3)

inst_273:
// rs1_val==-3037000499 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1333, -3037000499, 1638, x2, 2016, x3)

inst_274:
// rs1_val==-3037000499 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0ca0, -3037000499, -45, x2, 2024, x3)

inst_275:
// rs1_val==-3037000499 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cfa, -3037000499, 45, x2, 2032, x3)

inst_276:
// rs1_val==-3037000499 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0ccf, -3037000499, 2, x2, 2040, x3)
RVTEST_SIGBASE( x2,signature_x2_1)

inst_277:
// rs1_val==-3037000499 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1221, -3037000499, 1364, x2, 0, x3)

inst_278:
// rs1_val==-3037000499 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0ccd, -3037000499, 0, x2, 8, x3)

inst_279:
// rs1_val==-3037000499 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd1, -3037000499, 4, x2, 16, x3)

inst_280:
// rs1_val==-3037000499 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:818
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0fff, -3037000499, 818, x2, 24, x3)

inst_281:
// rs1_val==-3037000499 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1332, -3037000499, 1637, x2, 32, x3)

inst_282:
// rs1_val==-3037000499 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cf9, -3037000499, 44, x2, 40, x3)

inst_283:
// rs1_val==-3037000499 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1223, -3037000499, 1366, x2, 48, x3)

inst_284:
// rs1_val==-3037000499 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0778, -3037000499, -1365, x2, 56, x3)

inst_285:
// rs1_val==-3037000499 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd3, -3037000499, 6, x2, 64, x3)

inst_286:
// rs1_val==-3037000499 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1001, -3037000499, 820, x2, 72, x3)

inst_287:
// rs1_val==-3037000499 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1334, -3037000499, 1639, x2, 80, x3)

inst_288:
// rs1_val==-3037000499 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0ca1, -3037000499, -44, x2, 88, x3)

inst_289:
// rs1_val==-3037000499 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000499;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cfb, -3037000499, 46, x2, 96, x3)

inst_290:
// rs1_val==3037000499 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xb504f336, 3037000499, 3, x2, 104, x3)

inst_291:
// rs1_val==3037000499 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xb504f888, 3037000499, 1365, x2, 112, x3)

inst_292:
// rs1_val==3037000499 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xb504eddd, 3037000499, -1366, x2, 120, x3)

inst_293:
// rs1_val==3037000499 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xb504f338, 3037000499, 5, x2, 128, x3)

inst_294:
// rs1_val==3037000499 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xb504f666, 3037000499, 819, x2, 136, x3)

inst_295:
// rs1_val==3037000499 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xb504f999, 3037000499, 1638, x2, 144, x3)

inst_296:
// rs1_val==3037000499 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xb504f306, 3037000499, -45, x2, 152, x3)

inst_297:
// rs1_val==3037000499 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xb504f360, 3037000499, 45, x2, 160, x3)

inst_298:
// rs1_val==3037000499 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xb504f335, 3037000499, 2, x2, 168, x3)

inst_299:
// rs1_val==3037000499 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0xb504f887, 3037000499, 1364, x2, 176, x3)

inst_300:
// rs1_val==3037000499 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xb504f333, 3037000499, 0, x2, 184, x3)

inst_301:
// rs1_val==3037000499 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xb504f337, 3037000499, 4, x2, 192, x3)

inst_302:
// rs1_val==3037000499 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:818
TEST_IMM_OP( addi, x11, x10, 0xb504f665, 3037000499, 818, x2, 200, x3)

inst_303:
// rs1_val==3037000499 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xb504f998, 3037000499, 1637, x2, 208, x3)

inst_304:
// rs1_val==3037000499 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xb504f35f, 3037000499, 44, x2, 216, x3)

inst_305:
// rs1_val==3037000499 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xb504f889, 3037000499, 1366, x2, 224, x3)

inst_306:
// rs1_val==3037000499 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xb504edde, 3037000499, -1365, x2, 232, x3)

inst_307:
// rs1_val==3037000499 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xb504f339, 3037000499, 6, x2, 240, x3)

inst_308:
// rs1_val==3037000499 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xb504f667, 3037000499, 820, x2, 248, x3)

inst_309:
// rs1_val==3037000499 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xb504f99a, 3037000499, 1639, x2, 256, x3)

inst_310:
// rs1_val==3037000499 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xb504f307, 3037000499, -44, x2, 264, x3)

inst_311:
// rs1_val==3037000499 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000499;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xb504f361, 3037000499, 46, x2, 272, x3)

inst_312:
// rs1_val==2 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x5, 2, 3, x2, 280, x3)

inst_313:
// rs1_val==2 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x557, 2, 1365, x2, 288, x3)

inst_314:
// rs1_val==2 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaac, 2, -1366, x2, 296, x3)

inst_315:
// rs1_val==2 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x7, 2, 5, x2, 304, x3)

inst_316:
// rs1_val==2 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x335, 2, 819, x2, 312, x3)

inst_317:
// rs1_val==2 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x668, 2, 1638, x2, 320, x3)

inst_318:
// rs1_val==2 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd5, 2, -45, x2, 328, x3)

inst_319:
// rs1_val==2 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x2f, 2, 45, x2, 336, x3)

inst_320:
// rs1_val==2 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x4, 2, 2, x2, 344, x3)

inst_321:
// rs1_val==2 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x556, 2, 1364, x2, 352, x3)

inst_322:
// rs1_val==2 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x2, 2, 0, x2, 360, x3)

inst_323:
// rs1_val==2 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x6, 2, 4, x2, 368, x3)

inst_324:
// rs1_val==2 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x334, 2, 818, x2, 376, x3)

inst_325:
// rs1_val==2 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x667, 2, 1637, x2, 384, x3)

inst_326:
// rs1_val==2 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x2e, 2, 44, x2, 392, x3)

inst_327:
// rs1_val==2 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x558, 2, 1366, x2, 400, x3)

inst_328:
// rs1_val==2 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaad, 2, -1365, x2, 408, x3)

inst_329:
// rs1_val==2 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x8, 2, 6, x2, 416, x3)

inst_330:
// rs1_val==2 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x336, 2, 820, x2, 424, x3)

inst_331:
// rs1_val==2 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x669, 2, 1639, x2, 432, x3)

inst_332:
// rs1_val==2 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd6, 2, -44, x2, 440, x3)

inst_333:
// rs1_val==2 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:2;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x30, 2, 46, x2, 448, x3)

inst_334:
// rs1_val==6148914691236517204 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x5555555555555557, 6148914691236517204, 3, x2, 456, x3)

inst_335:
// rs1_val==6148914691236517204 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aa9, 6148914691236517204, 1365, x2, 464, x3)

inst_336:
// rs1_val==6148914691236517204 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x5555555555554ffe, 6148914691236517204, -1366, x2, 472, x3)

inst_337:
// rs1_val==6148914691236517204 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x5555555555555559, 6148914691236517204, 5, x2, 480, x3)

inst_338:
// rs1_val==6148914691236517204 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x5555555555555887, 6148914691236517204, 819, x2, 488, x3)

inst_339:
// rs1_val==6148914691236517204 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bba, 6148914691236517204, 1638, x2, 496, x3)

inst_340:
// rs1_val==6148914691236517204 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x5555555555555527, 6148914691236517204, -45, x2, 504, x3)

inst_341:
// rs1_val==6148914691236517204 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x5555555555555581, 6148914691236517204, 45, x2, 512, x3)

inst_342:
// rs1_val==6148914691236517204 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x5555555555555556, 6148914691236517204, 2, x2, 520, x3)

inst_343:
// rs1_val==6148914691236517204 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aa8, 6148914691236517204, 1364, x2, 528, x3)

inst_344:
// rs1_val==6148914691236517204 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x5555555555555554, 6148914691236517204, 0, x2, 536, x3)

inst_345:
// rs1_val==6148914691236517204 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x5555555555555558, 6148914691236517204, 4, x2, 544, x3)

inst_346:
// rs1_val==6148914691236517204 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x5555555555555886, 6148914691236517204, 818, x2, 552, x3)

inst_347:
// rs1_val==6148914691236517204 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bb9, 6148914691236517204, 1637, x2, 560, x3)

inst_348:
// rs1_val==6148914691236517204 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x5555555555555580, 6148914691236517204, 44, x2, 568, x3)

inst_349:
// rs1_val==6148914691236517204 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aaa, 6148914691236517204, 1366, x2, 576, x3)

inst_350:
// rs1_val==6148914691236517204 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x5555555555554fff, 6148914691236517204, -1365, x2, 584, x3)

inst_351:
// rs1_val==6148914691236517204 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x555555555555555a, 6148914691236517204, 6, x2, 592, x3)

inst_352:
// rs1_val==6148914691236517204 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x5555555555555888, 6148914691236517204, 820, x2, 600, x3)

inst_353:
// rs1_val==6148914691236517204 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bbb, 6148914691236517204, 1639, x2, 608, x3)

inst_354:
// rs1_val==6148914691236517204 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x5555555555555528, 6148914691236517204, -44, x2, 616, x3)

inst_355:
// rs1_val==6148914691236517204 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x5555555555555582, 6148914691236517204, 46, x2, 624, x3)

inst_356:
// rs1_val==0 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x3, 0, 3, x2, 632, x3)

inst_357:
// rs1_val==0 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x555, 0, 1365, x2, 640, x3)

inst_358:
// rs1_val==0 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaaa, 0, -1366, x2, 648, x3)

inst_359:
// rs1_val==0 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x5, 0, 5, x2, 656, x3)

inst_360:
// rs1_val==0 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x333, 0, 819, x2, 664, x3)

inst_361:
// rs1_val==0 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x666, 0, 1638, x2, 672, x3)

inst_362:
// rs1_val==0 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd3, 0, -45, x2, 680, x3)

inst_363:
// rs1_val==6148914691236517206 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x5555555555555582, 6148914691236517206, 44, x2, 688, x3)

inst_364:
// rs1_val==6148914691236517206 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aac, 6148914691236517206, 1366, x2, 696, x3)

inst_365:
// rs1_val==6148914691236517206 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x5555555555555001, 6148914691236517206, -1365, x2, 704, x3)

inst_366:
// rs1_val==6148914691236517206 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x555555555555555c, 6148914691236517206, 6, x2, 712, x3)

inst_367:
// rs1_val==6148914691236517206 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x555555555555588a, 6148914691236517206, 820, x2, 720, x3)

inst_368:
// rs1_val==6148914691236517206 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bbd, 6148914691236517206, 1639, x2, 728, x3)

inst_369:
// rs1_val==6148914691236517206 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x555555555555552a, 6148914691236517206, -44, x2, 736, x3)

inst_370:
// rs1_val==6148914691236517206 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x5555555555555584, 6148914691236517206, 46, x2, 744, x3)

inst_371:
// rs1_val==-6148914691236517205 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaae, -6148914691236517205, 3, x2, 752, x3)

inst_372:
// rs1_val==-6148914691236517205 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab000, -6148914691236517205, 1365, x2, 760, x3)

inst_373:
// rs1_val==-6148914691236517205 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaa555, -6148914691236517205, -1366, x2, 768, x3)

inst_374:
// rs1_val==-6148914691236517205 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaab0, -6148914691236517205, 5, x2, 776, x3)

inst_375:
// rs1_val==-6148914691236517205 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaadde, -6148914691236517205, 819, x2, 784, x3)

inst_376:
// rs1_val==-6148914691236517205 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab111, -6148914691236517205, 1638, x2, 792, x3)

inst_377:
// rs1_val==-6148914691236517205 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaa7e, -6148914691236517205, -45, x2, 800, x3)

inst_378:
// rs1_val==-6148914691236517205 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaad8, -6148914691236517205, 45, x2, 808, x3)

inst_379:
// rs1_val==-6148914691236517205 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaad, -6148914691236517205, 2, x2, 816, x3)

inst_380:
// rs1_val==-6148914691236517205 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaafff, -6148914691236517205, 1364, x2, 824, x3)

inst_381:
// rs1_val==-6148914691236517205 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaaaf, -6148914691236517205, 4, x2, 832, x3)

inst_382:
// rs1_val==-6148914691236517205 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:818
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaddd, -6148914691236517205, 818, x2, 840, x3)

inst_383:
// rs1_val==-6148914691236517205 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab110, -6148914691236517205, 1637, x2, 848, x3)

inst_384:
// rs1_val==-6148914691236517205 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaad7, -6148914691236517205, 44, x2, 856, x3)

inst_385:
// rs1_val==-6148914691236517205 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab001, -6148914691236517205, 1366, x2, 864, x3)

inst_386:
// rs1_val==-6148914691236517205 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaa556, -6148914691236517205, -1365, x2, 872, x3)

inst_387:
// rs1_val==-6148914691236517205 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaab1, -6148914691236517205, 6, x2, 880, x3)

inst_388:
// rs1_val==-6148914691236517205 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaddf, -6148914691236517205, 820, x2, 888, x3)

inst_389:
// rs1_val==-6148914691236517205 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaab112, -6148914691236517205, 1639, x2, 896, x3)

inst_390:
// rs1_val==-6148914691236517205 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaa7f, -6148914691236517205, -44, x2, 904, x3)

inst_391:
// rs1_val==-6148914691236517205 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaaaaaaaad9, -6148914691236517205, 46, x2, 912, x3)

inst_392:
// rs1_val==6 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x9, 6, 3, x2, 920, x3)

inst_393:
// rs1_val==6 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x55b, 6, 1365, x2, 928, x3)

inst_394:
// rs1_val==6 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffab0, 6, -1366, x2, 936, x3)

inst_395:
// rs1_val==6 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xb, 6, 5, x2, 944, x3)

inst_396:
// rs1_val==6 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x339, 6, 819, x2, 952, x3)

inst_397:
// rs1_val==6 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x66c, 6, 1638, x2, 960, x3)

inst_398:
// rs1_val==6 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd9, 6, -45, x2, 968, x3)

inst_399:
// rs1_val==6 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x33, 6, 45, x2, 976, x3)

inst_400:
// rs1_val==6 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x8, 6, 2, x2, 984, x3)

inst_401:
// rs1_val==6 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x55a, 6, 1364, x2, 992, x3)

inst_402:
// rs1_val==6 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x6, 6, 0, x2, 1000, x3)

inst_403:
// rs1_val==6 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xa, 6, 4, x2, 1008, x3)

inst_404:
// rs1_val==6 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x338, 6, 818, x2, 1016, x3)

inst_405:
// rs1_val==6 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x66b, 6, 1637, x2, 1024, x3)

inst_406:
// rs1_val==6 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x32, 6, 44, x2, 1032, x3)

inst_407:
// rs1_val==6 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x55c, 6, 1366, x2, 1040, x3)

inst_408:
// rs1_val==6 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffab1, 6, -1365, x2, 1048, x3)

inst_409:
// rs1_val==6 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xc, 6, 6, x2, 1056, x3)

inst_410:
// rs1_val==6 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x33a, 6, 820, x2, 1064, x3)

inst_411:
// rs1_val==6 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x66d, 6, 1639, x2, 1072, x3)

inst_412:
// rs1_val==6 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffda, 6, -44, x2, 1080, x3)

inst_413:
// rs1_val==6 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x34, 6, 46, x2, 1088, x3)

inst_414:
// rs1_val==3689348814741910324 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x3333333333333337, 3689348814741910324, 3, x2, 1096, x3)

inst_415:
// rs1_val==3689348814741910324 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x3333333333333889, 3689348814741910324, 1365, x2, 1104, x3)

inst_416:
// rs1_val==3689348814741910324 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x3333333333332dde, 3689348814741910324, -1366, x2, 1112, x3)

inst_417:
// rs1_val==3689348814741910324 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x3333333333333339, 3689348814741910324, 5, x2, 1120, x3)

inst_418:
// rs1_val==3689348814741910324 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x3333333333333667, 3689348814741910324, 819, x2, 1128, x3)

inst_419:
// rs1_val==3689348814741910324 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x333333333333399a, 3689348814741910324, 1638, x2, 1136, x3)

inst_420:
// rs1_val==3689348814741910324 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x3333333333333307, 3689348814741910324, -45, x2, 1144, x3)

inst_421:
// rs1_val==3689348814741910324 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x3333333333333361, 3689348814741910324, 45, x2, 1152, x3)

inst_422:
// rs1_val==3689348814741910324 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x3333333333333336, 3689348814741910324, 2, x2, 1160, x3)

inst_423:
// rs1_val==3689348814741910324 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x3333333333333888, 3689348814741910324, 1364, x2, 1168, x3)

inst_424:
// rs1_val==3689348814741910324 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x3333333333333334, 3689348814741910324, 0, x2, 1176, x3)

inst_425:
// rs1_val==3689348814741910324 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x3333333333333338, 3689348814741910324, 4, x2, 1184, x3)

inst_426:
// rs1_val==3689348814741910324 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x3333333333333666, 3689348814741910324, 818, x2, 1192, x3)

inst_427:
// rs1_val==3689348814741910324 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x3333333333333999, 3689348814741910324, 1637, x2, 1200, x3)

inst_428:
// rs1_val==3689348814741910324 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x3333333333333360, 3689348814741910324, 44, x2, 1208, x3)

inst_429:
// rs1_val==3689348814741910324 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x333333333333388a, 3689348814741910324, 1366, x2, 1216, x3)

inst_430:
// rs1_val==3689348814741910324 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x3333333333332ddf, 3689348814741910324, -1365, x2, 1224, x3)

inst_431:
// rs1_val==3689348814741910324 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x333333333333333a, 3689348814741910324, 6, x2, 1232, x3)

inst_432:
// rs1_val==3689348814741910324 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x3333333333333668, 3689348814741910324, 820, x2, 1240, x3)

inst_433:
// rs1_val==3689348814741910324 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x333333333333399b, 3689348814741910324, 1639, x2, 1248, x3)

inst_434:
// rs1_val==3689348814741910324 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x3333333333333308, 3689348814741910324, -44, x2, 1256, x3)

inst_435:
// rs1_val==3689348814741910324 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x3333333333333362, 3689348814741910324, 46, x2, 1264, x3)

inst_436:
// rs1_val==7378697629483820647 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x666666666666666a, 7378697629483820647, 3, x2, 1272, x3)

inst_437:
// rs1_val==7378697629483820647 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bbc, 7378697629483820647, 1365, x2, 1280, x3)

inst_438:
// rs1_val==7378697629483820647 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x6666666666666111, 7378697629483820647, -1366, x2, 1288, x3)

inst_439:
// rs1_val==7378697629483820647 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x666666666666666c, 7378697629483820647, 5, x2, 1296, x3)

inst_440:
// rs1_val==7378697629483820647 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x666666666666699a, 7378697629483820647, 819, x2, 1304, x3)

inst_441:
// rs1_val==7378697629483820647 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x6666666666666ccd, 7378697629483820647, 1638, x2, 1312, x3)

inst_442:
// rs1_val==7378697629483820647 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x666666666666663a, 7378697629483820647, -45, x2, 1320, x3)

inst_443:
// rs1_val==7378697629483820647 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x6666666666666694, 7378697629483820647, 45, x2, 1328, x3)

inst_444:
// rs1_val==7378697629483820647 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x6666666666666669, 7378697629483820647, 2, x2, 1336, x3)

inst_445:
// rs1_val==7378697629483820647 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bbb, 7378697629483820647, 1364, x2, 1344, x3)

inst_446:
// rs1_val==7378697629483820647 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x6666666666666667, 7378697629483820647, 0, x2, 1352, x3)

inst_447:
// rs1_val==7378697629483820647 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x666666666666666b, 7378697629483820647, 4, x2, 1360, x3)

inst_448:
// rs1_val==7378697629483820647 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x6666666666666999, 7378697629483820647, 818, x2, 1368, x3)

inst_449:
// rs1_val==7378697629483820647 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x6666666666666ccc, 7378697629483820647, 1637, x2, 1376, x3)

inst_450:
// rs1_val==7378697629483820647 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x6666666666666693, 7378697629483820647, 44, x2, 1384, x3)

inst_451:
// rs1_val==7378697629483820647 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bbd, 7378697629483820647, 1366, x2, 1392, x3)

inst_452:
// rs1_val==7378697629483820647 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x6666666666666112, 7378697629483820647, -1365, x2, 1400, x3)

inst_453:
// rs1_val==7378697629483820647 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x666666666666666d, 7378697629483820647, 6, x2, 1408, x3)

inst_454:
// rs1_val==7378697629483820647 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x666666666666699b, 7378697629483820647, 820, x2, 1416, x3)

inst_455:
// rs1_val==7378697629483820647 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x6666666666666cce, 7378697629483820647, 1639, x2, 1424, x3)

inst_456:
// rs1_val==7378697629483820647 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x666666666666663b, 7378697629483820647, -44, x2, 1432, x3)

inst_457:
// rs1_val==7378697629483820647 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x6666666666666695, 7378697629483820647, 46, x2, 1440, x3)

inst_458:
// rs1_val==-3037000498 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd1, -3037000498, 3, x2, 1448, x3)

inst_459:
// rs1_val==-3037000498 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1223, -3037000498, 1365, x2, 1456, x3)

inst_460:
// rs1_val==-3037000498 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0778, -3037000498, -1366, x2, 1464, x3)

inst_461:
// rs1_val==-3037000498 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd3, -3037000498, 5, x2, 1472, x3)

inst_462:
// rs1_val==-3037000498 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1001, -3037000498, 819, x2, 1480, x3)

inst_463:
// rs1_val==-3037000498 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1334, -3037000498, 1638, x2, 1488, x3)

inst_464:
// rs1_val==-3037000498 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0ca1, -3037000498, -45, x2, 1496, x3)

inst_465:
// rs1_val==-3037000498 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cfb, -3037000498, 45, x2, 1504, x3)

inst_466:
// rs1_val==-3037000498 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd0, -3037000498, 2, x2, 1512, x3)

inst_467:
// rs1_val==-3037000498 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1222, -3037000498, 1364, x2, 1520, x3)

inst_468:
// rs1_val==-3037000498 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cce, -3037000498, 0, x2, 1528, x3)

inst_469:
// rs1_val==-3037000498 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd2, -3037000498, 4, x2, 1536, x3)

inst_470:
// rs1_val==-3037000498 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:818
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1000, -3037000498, 818, x2, 1544, x3)

inst_471:
// rs1_val==-3037000498 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1333, -3037000498, 1637, x2, 1552, x3)

inst_472:
// rs1_val==-3037000498 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cfa, -3037000498, 44, x2, 1560, x3)

inst_473:
// rs1_val==-3037000498 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1224, -3037000498, 1366, x2, 1568, x3)

inst_474:
// rs1_val==-3037000498 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0779, -3037000498, -1365, x2, 1576, x3)

inst_475:
// rs1_val==-3037000498 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cd4, -3037000498, 6, x2, 1584, x3)

inst_476:
// rs1_val==-3037000498 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1002, -3037000498, 820, x2, 1592, x3)

inst_477:
// rs1_val==-3037000498 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb1335, -3037000498, 1639, x2, 1600, x3)

inst_478:
// rs1_val==-3037000498 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0ca2, -3037000498, -44, x2, 1608, x3)

inst_479:
// rs1_val==-3037000498 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3037000498;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xffffffff4afb0cfc, -3037000498, 46, x2, 1616, x3)

inst_480:
// rs1_val==3037000500 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xb504f337, 3037000500, 3, x2, 1624, x3)

inst_481:
// rs1_val==3037000500 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xb504f889, 3037000500, 1365, x2, 1632, x3)

inst_482:
// rs1_val==3037000500 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xb504edde, 3037000500, -1366, x2, 1640, x3)

inst_483:
// rs1_val==3037000500 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xb504f339, 3037000500, 5, x2, 1648, x3)

inst_484:
// rs1_val==3037000500 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xb504f667, 3037000500, 819, x2, 1656, x3)

inst_485:
// rs1_val==3037000500 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xb504f99a, 3037000500, 1638, x2, 1664, x3)

inst_486:
// rs1_val==3037000500 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xb504f307, 3037000500, -45, x2, 1672, x3)

inst_487:
// rs1_val==3037000500 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xb504f361, 3037000500, 45, x2, 1680, x3)

inst_488:
// rs1_val==3037000500 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xb504f336, 3037000500, 2, x2, 1688, x3)

inst_489:
// rs1_val==3037000500 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0xb504f888, 3037000500, 1364, x2, 1696, x3)

inst_490:
// rs1_val==3037000500 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xb504f334, 3037000500, 0, x2, 1704, x3)

inst_491:
// rs1_val==6148914691236517206 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bbc, 6148914691236517206, 1638, x2, 1712, x3)

inst_492:
// rs1_val==3037000500 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xb504f338, 3037000500, 4, x2, 1720, x3)

inst_493:
// rs1_val==3037000500 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:818
TEST_IMM_OP( addi, x11, x10, 0xb504f666, 3037000500, 818, x2, 1728, x3)

inst_494:
// rs1_val==3037000500 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xb504f999, 3037000500, 1637, x2, 1736, x3)

inst_495:
// rs1_val==3037000500 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xb504f360, 3037000500, 44, x2, 1744, x3)

inst_496:
// rs1_val==3037000500 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xb504f88a, 3037000500, 1366, x2, 1752, x3)

inst_497:
// rs1_val==3037000500 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xb504eddf, 3037000500, -1365, x2, 1760, x3)

inst_498:
// rs1_val==3037000500 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xb504f33a, 3037000500, 6, x2, 1768, x3)

inst_499:
// rs1_val==3037000500 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xb504f668, 3037000500, 820, x2, 1776, x3)

inst_500:
// rs1_val==3037000500 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xb504f99b, 3037000500, 1639, x2, 1784, x3)

inst_501:
// rs1_val==3037000500 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xb504f308, 3037000500, -44, x2, 1792, x3)

inst_502:
// rs1_val==3037000500 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000500;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xb504f362, 3037000500, 46, x2, 1800, x3)

inst_503:
// rs1_val==0 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x2d, 0, 45, x2, 1808, x3)

inst_504:
// rs1_val==0 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x2, 0, 2, x2, 1816, x3)

inst_505:
// rs1_val==0 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x554, 0, 1364, x2, 1824, x3)

inst_506:
// rs1_val==0 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x0, 0, 0, x2, 1832, x3)

inst_507:
// rs1_val==0 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x4, 0, 4, x2, 1840, x3)

inst_508:
// rs1_val==0 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x332, 0, 818, x2, 1848, x3)

inst_509:
// rs1_val==0 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x665, 0, 1637, x2, 1856, x3)

inst_510:
// rs1_val==0 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x2c, 0, 44, x2, 1864, x3)

inst_511:
// rs1_val==0 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x556, 0, 1366, x2, 1872, x3)

inst_512:
// rs1_val==0 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaab, 0, -1365, x2, 1880, x3)

inst_513:
// rs1_val==0 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x6, 0, 6, x2, 1888, x3)

inst_514:
// rs1_val==0 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x334, 0, 820, x2, 1896, x3)

inst_515:
// rs1_val==0 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x667, 0, 1639, x2, 1904, x3)

inst_516:
// rs1_val==0 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd4, 0, -44, x2, 1912, x3)

inst_517:
// rs1_val==0 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x2e, 0, 46, x2, 1920, x3)

inst_518:
// rs1_val==4 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x7, 4, 3, x2, 1928, x3)

inst_519:
// rs1_val==4 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x559, 4, 1365, x2, 1936, x3)

inst_520:
// rs1_val==4 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaae, 4, -1366, x2, 1944, x3)

inst_521:
// rs1_val==4 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x9, 4, 5, x2, 1952, x3)

inst_522:
// rs1_val==4 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x337, 4, 819, x2, 1960, x3)

inst_523:
// rs1_val==4 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x66a, 4, 1638, x2, 1968, x3)

inst_524:
// rs1_val==4 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd7, 4, -45, x2, 1976, x3)

inst_525:
// rs1_val==4 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x31, 4, 45, x2, 1984, x3)

inst_526:
// rs1_val==4 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x6, 4, 2, x2, 1992, x3)

inst_527:
// rs1_val==4 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x558, 4, 1364, x2, 2000, x3)

inst_528:
// rs1_val==4 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x4, 4, 0, x2, 2008, x3)

inst_529:
// rs1_val==4 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x8, 4, 4, x2, 2016, x3)

inst_530:
// rs1_val==4 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x336, 4, 818, x2, 2024, x3)

inst_531:
// rs1_val==4 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x669, 4, 1637, x2, 2032, x3)

inst_532:
// rs1_val==4 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x30, 4, 44, x2, 2040, x3)
RVTEST_SIGBASE( x2,signature_x2_2)

inst_533:
// rs1_val==4 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x55a, 4, 1366, x2, 0, x3)

inst_534:
// rs1_val==4 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xfffffffffffffaaf, 4, -1365, x2, 8, x3)

inst_535:
// rs1_val==4 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xa, 4, 6, x2, 16, x3)

inst_536:
// rs1_val==4 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x338, 4, 820, x2, 24, x3)

inst_537:
// rs1_val==4 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x66b, 4, 1639, x2, 32, x3)

inst_538:
// rs1_val==4 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xffffffffffffffd8, 4, -44, x2, 40, x3)

inst_539:
// rs1_val==4 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:4;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x32, 4, 46, x2, 48, x3)

inst_540:
// rs1_val==3689348814741910322 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x3333333333333335, 3689348814741910322, 3, x2, 56, x3)

inst_541:
// rs1_val==3689348814741910322 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x3333333333333887, 3689348814741910322, 1365, x2, 64, x3)

inst_542:
// rs1_val==3689348814741910322 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x3333333333332ddc, 3689348814741910322, -1366, x2, 72, x3)

inst_543:
// rs1_val==3689348814741910322 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x3333333333333337, 3689348814741910322, 5, x2, 80, x3)

inst_544:
// rs1_val==3689348814741910322 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x3333333333333665, 3689348814741910322, 819, x2, 88, x3)

inst_545:
// rs1_val==3689348814741910322 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x3333333333333998, 3689348814741910322, 1638, x2, 96, x3)

inst_546:
// rs1_val==3689348814741910322 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x3333333333333305, 3689348814741910322, -45, x2, 104, x3)

inst_547:
// rs1_val==3689348814741910322 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x333333333333335f, 3689348814741910322, 45, x2, 112, x3)

inst_548:
// rs1_val==3689348814741910322 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x3333333333333334, 3689348814741910322, 2, x2, 120, x3)

inst_549:
// rs1_val==3689348814741910322 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x3333333333333886, 3689348814741910322, 1364, x2, 128, x3)

inst_550:
// rs1_val==3689348814741910322 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x3333333333333332, 3689348814741910322, 0, x2, 136, x3)

inst_551:
// rs1_val==3689348814741910322 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x3333333333333336, 3689348814741910322, 4, x2, 144, x3)

inst_552:
// rs1_val==3689348814741910322 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x3333333333333664, 3689348814741910322, 818, x2, 152, x3)

inst_553:
// rs1_val==3689348814741910322 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x3333333333333997, 3689348814741910322, 1637, x2, 160, x3)

inst_554:
// rs1_val==3689348814741910322 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x333333333333335e, 3689348814741910322, 44, x2, 168, x3)

inst_555:
// rs1_val==3689348814741910322 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x3333333333333888, 3689348814741910322, 1366, x2, 176, x3)

inst_556:
// rs1_val==3689348814741910322 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x3333333333332ddd, 3689348814741910322, -1365, x2, 184, x3)

inst_557:
// rs1_val==3689348814741910322 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x3333333333333338, 3689348814741910322, 6, x2, 192, x3)

inst_558:
// rs1_val==3689348814741910322 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x3333333333333666, 3689348814741910322, 820, x2, 200, x3)

inst_559:
// rs1_val==3689348814741910322 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x3333333333333999, 3689348814741910322, 1639, x2, 208, x3)

inst_560:
// rs1_val==3689348814741910322 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x3333333333333306, 3689348814741910322, -44, x2, 216, x3)

inst_561:
// rs1_val==3689348814741910322 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x3333333333333360, 3689348814741910322, 46, x2, 224, x3)

inst_562:
// rs1_val==7378697629483820645 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x6666666666666668, 7378697629483820645, 3, x2, 232, x3)

inst_563:
// rs1_val==7378697629483820645 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bba, 7378697629483820645, 1365, x2, 240, x3)

inst_564:
// rs1_val==7378697629483820645 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x666666666666610f, 7378697629483820645, -1366, x2, 248, x3)

inst_565:
// rs1_val==7378697629483820645 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x666666666666666a, 7378697629483820645, 5, x2, 256, x3)

inst_566:
// rs1_val==7378697629483820645 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x6666666666666998, 7378697629483820645, 819, x2, 264, x3)

inst_567:
// rs1_val==7378697629483820645 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0x6666666666666ccb, 7378697629483820645, 1638, x2, 272, x3)

inst_568:
// rs1_val==7378697629483820645 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x6666666666666638, 7378697629483820645, -45, x2, 280, x3)

inst_569:
// rs1_val==7378697629483820645 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x6666666666666692, 7378697629483820645, 45, x2, 288, x3)

inst_570:
// rs1_val==7378697629483820645 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x6666666666666667, 7378697629483820645, 2, x2, 296, x3)

inst_571:
// rs1_val==7378697629483820645 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bb9, 7378697629483820645, 1364, x2, 304, x3)

inst_572:
// rs1_val==7378697629483820645 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x6666666666666665, 7378697629483820645, 0, x2, 312, x3)

inst_573:
// rs1_val==7378697629483820645 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:4
TEST_IMM_OP( addi, x11, x10, 0x6666666666666669, 7378697629483820645, 4, x2, 320, x3)

inst_574:
// rs1_val==7378697629483820645 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x6666666666666997, 7378697629483820645, 818, x2, 328, x3)

inst_575:
// rs1_val==7378697629483820645 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x6666666666666cca, 7378697629483820645, 1637, x2, 336, x3)

inst_576:
// rs1_val==7378697629483820645 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:44
TEST_IMM_OP( addi, x11, x10, 0x6666666666666691, 7378697629483820645, 44, x2, 344, x3)

inst_577:
// rs1_val==7378697629483820645 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0x6666666666666bbb, 7378697629483820645, 1366, x2, 352, x3)

inst_578:
// rs1_val==7378697629483820645 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0x6666666666666110, 7378697629483820645, -1365, x2, 360, x3)

inst_579:
// rs1_val==7378697629483820645 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x666666666666666b, 7378697629483820645, 6, x2, 368, x3)

inst_580:
// rs1_val==7378697629483820645 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:820
TEST_IMM_OP( addi, x11, x10, 0x6666666666666999, 7378697629483820645, 820, x2, 376, x3)

inst_581:
// rs1_val==7378697629483820645 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0x6666666666666ccc, 7378697629483820645, 1639, x2, 384, x3)

inst_582:
// rs1_val==7378697629483820645 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0x6666666666666639, 7378697629483820645, -44, x2, 392, x3)

inst_583:
// rs1_val==7378697629483820645 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:46
TEST_IMM_OP( addi, x11, x10, 0x6666666666666693, 7378697629483820645, 46, x2, 400, x3)

inst_584:
// rs1_val==3037000498 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xb504f335, 3037000498, 3, x2, 408, x3)

inst_585:
// rs1_val==3037000498 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xb504f887, 3037000498, 1365, x2, 416, x3)

inst_586:
// rs1_val==3037000498 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xb504eddc, 3037000498, -1366, x2, 424, x3)

inst_587:
// rs1_val==3037000498 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:5
TEST_IMM_OP( addi, x11, x10, 0xb504f337, 3037000498, 5, x2, 432, x3)

inst_588:
// rs1_val==3037000498 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:819
TEST_IMM_OP( addi, x11, x10, 0xb504f665, 3037000498, 819, x2, 440, x3)

inst_589:
// rs1_val==3037000498 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:1638
TEST_IMM_OP( addi, x11, x10, 0xb504f998, 3037000498, 1638, x2, 448, x3)

inst_590:
// rs1_val==3037000498 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0xb504f305, 3037000498, -45, x2, 456, x3)

inst_591:
// rs1_val==3037000498 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:45
TEST_IMM_OP( addi, x11, x10, 0xb504f35f, 3037000498, 45, x2, 464, x3)

inst_592:
// rs1_val==3037000498 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:2
TEST_IMM_OP( addi, x11, x10, 0xb504f334, 3037000498, 2, x2, 472, x3)

inst_593:
// rs1_val==3037000498 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0xb504f886, 3037000498, 1364, x2, 480, x3)

inst_594:
// rs1_val==3037000498 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xb504f332, 3037000498, 0, x2, 488, x3)

inst_595:
// rs1_val==3037000498 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:4
TEST_IMM_OP( addi, x11, x10, 0xb504f336, 3037000498, 4, x2, 496, x3)

inst_596:
// rs1_val==3037000498 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:818
TEST_IMM_OP( addi, x11, x10, 0xb504f664, 3037000498, 818, x2, 504, x3)

inst_597:
// rs1_val==3037000498 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0xb504f997, 3037000498, 1637, x2, 512, x3)

inst_598:
// rs1_val==3037000498 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:44
TEST_IMM_OP( addi, x11, x10, 0xb504f35e, 3037000498, 44, x2, 520, x3)

inst_599:
// rs1_val==3037000498 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:1366
TEST_IMM_OP( addi, x11, x10, 0xb504f888, 3037000498, 1366, x2, 528, x3)

inst_600:
// rs1_val==3037000498 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:-1365
TEST_IMM_OP( addi, x11, x10, 0xb504eddd, 3037000498, -1365, x2, 536, x3)

inst_601:
// rs1_val==3037000498 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xb504f338, 3037000498, 6, x2, 544, x3)

inst_602:
// rs1_val==3037000498 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:820
TEST_IMM_OP( addi, x11, x10, 0xb504f666, 3037000498, 820, x2, 552, x3)

inst_603:
// rs1_val==3037000498 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:1639
TEST_IMM_OP( addi, x11, x10, 0xb504f999, 3037000498, 1639, x2, 560, x3)

inst_604:
// rs1_val==3037000498 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:-44
TEST_IMM_OP( addi, x11, x10, 0xb504f306, 3037000498, -44, x2, 568, x3)

inst_605:
// rs1_val==3037000498 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:3037000498;  immval:46
TEST_IMM_OP( addi, x11, x10, 0xb504f360, 3037000498, 46, x2, 576, x3)

inst_606:
// rs1_val==6148914691236517206 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:3
TEST_IMM_OP( addi, x11, x10, 0x5555555555555559, 6148914691236517206, 3, x2, 584, x3)

inst_607:
// rs1_val==6148914691236517206 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aab, 6148914691236517206, 1365, x2, 592, x3)

inst_608:
// rs1_val==6148914691236517206 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x5555555555555000, 6148914691236517206, -1366, x2, 600, x3)

inst_609:
// rs1_val==6148914691236517206 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:5
TEST_IMM_OP( addi, x11, x10, 0x555555555555555b, 6148914691236517206, 5, x2, 608, x3)

inst_610:
// rs1_val==6148914691236517206 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:819
TEST_IMM_OP( addi, x11, x10, 0x5555555555555889, 6148914691236517206, 819, x2, 616, x3)

inst_611:
// rs1_val==6148914691236517206 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:-45
TEST_IMM_OP( addi, x11, x10, 0x5555555555555529, 6148914691236517206, -45, x2, 624, x3)

inst_612:
// rs1_val==6148914691236517206 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:45
TEST_IMM_OP( addi, x11, x10, 0x5555555555555583, 6148914691236517206, 45, x2, 632, x3)

inst_613:
// rs1_val==6148914691236517206 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x5555555555555558, 6148914691236517206, 2, x2, 640, x3)

inst_614:
// rs1_val==6148914691236517206 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1364
TEST_IMM_OP( addi, x11, x10, 0x5555555555555aaa, 6148914691236517206, 1364, x2, 648, x3)

inst_615:
// rs1_val==6148914691236517206 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x5555555555555556, 6148914691236517206, 0, x2, 656, x3)

inst_616:
// rs1_val==6148914691236517206 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:818
TEST_IMM_OP( addi, x11, x10, 0x5555555555555888, 6148914691236517206, 818, x2, 664, x3)

inst_617:
// rs1_val==6148914691236517206 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:1637
TEST_IMM_OP( addi, x11, x10, 0x5555555555555bbb, 6148914691236517206, 1637, x2, 672, x3)

inst_618:
// imm_val == -1366, rs1_val == 274877906944
// opcode: addi ; op1:x10; dest:x11; op1val:274877906944;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0x3ffffffaaa, 274877906944, -1366, x2, 680, x3)

inst_619:
// rs1_val == 16, 
// opcode: addi ; op1:x10; dest:x11; op1val:16;  immval:6
TEST_IMM_OP( addi, x11, x10, 0x16, 16, 6, x2, 688, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x2_2:
    .fill 87*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
