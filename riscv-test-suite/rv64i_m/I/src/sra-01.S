
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra instruction of the RISC-V i extension for the sra covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64i")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sra)

RVTEST_SIGBASE( x7,signature_x7_1)

inst_0:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x14, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs2_val == 59, rs1_val == -8589934593
// opcode: sra ; op1:x22; op2:x22; dest:x14; op1val:-8589934593;  op2val:59
TEST_RR_OP(sra, x14, x22, x22, 0x1f, -8589934593, 59, x7, 0, x19)

inst_1:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 144115188075855872
// opcode: sra ; op1:x11; op2:x11; dest:x11; op1val:144115188075855872;  op2val:7
TEST_RR_OP(sra, x11, x11, x11, 0x0, 144115188075855872, 7, x7, 8, x19)

inst_2:
// rs1 == rd != rs2, rs1==x9, rs2==x8, rd==x9, rs1_val < 0 and rs2_val == 0, rs1_val == -32769
// opcode: sra ; op1:x9; op2:x8; dest:x9; op1val:-32769;  op2val:0
TEST_RR_OP(sra, x9, x9, x8, 0xffff7fff, -32769, 0, x7, 16, x19)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x5, rd==x30, rs1_val > 0 and rs2_val == 0, rs1_val == 134217728
// opcode: sra ; op1:x16; op2:x5; dest:x30; op1val:134217728;  op2val:0
TEST_RR_OP(sra, x30, x16, x5, 0x8000000, 134217728, 0, x7, 24, x19)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x21, rd==x21, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, rs1_val==6
// opcode: sra ; op1:x27; op2:x21; dest:x21; op1val:6;  op2val:6
TEST_RR_OP(sra, x21, x27, x21, 0x0, 6, 6, x7, 32, x19)

inst_5:
// rs1==x31, rs2==x14, rd==x3, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -9223372036854775808, rs2_val == 42
// opcode: sra ; op1:x31; op2:x14; dest:x3; op1val:-9223372036854775808;  op2val:42
TEST_RR_OP(sra, x3, x31, x14, 0x0, -9223372036854775808, 42, x7, 40, x19)

inst_6:
// rs1==x4, rs2==x1, rd==x6, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs1_val==0, rs2_val == 32
// opcode: sra ; op1:x4; op2:x1; dest:x6; op1val:0;  op2val:32
TEST_RR_OP(sra, x6, x4, x1, 0x0, 0, 32, x7, 48, x19)

inst_7:
// rs1==x0, rs2==x23, rd==x29, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 9223372036854775807
// opcode: sra ; op1:x0; op2:x23; dest:x29; op1val:9223372036854775807;  op2val:32
TEST_RR_OP(sra, x29, x0, x23, 0xffffffff, 9223372036854775807, 32, x7, 56, x19)

inst_8:
// rs1==x13, rs2==x29, rd==x31, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1
// opcode: sra ; op1:x13; op2:x29; dest:x31; op1val:1;  op2val:32
TEST_RR_OP(sra, x31, x13, x29, 0x1, 1, 32, x7, 64, x19)

inst_9:
// rs1==x29, rs2==x18, rd==x8, rs1_val == 2, rs1_val==2
// opcode: sra ; op1:x29; op2:x18; dest:x8; op1val:2;  op2val:11
TEST_RR_OP(sra, x8, x29, x18, 0x0, 2, 11, x7, 72, x19)

inst_10:
// rs1==x2, rs2==x4, rd==x28, rs1_val == 4, rs1_val==4
// opcode: sra ; op1:x2; op2:x4; dest:x28; op1val:4;  op2val:63
TEST_RR_OP(sra, x28, x2, x4, 0x0, 4, 63, x7, 80, x19)

inst_11:
// rs1==x15, rs2==x28, rd==x12, rs1_val == 8, 
// opcode: sra ; op1:x15; op2:x28; dest:x12; op1val:8;  op2val:11
TEST_RR_OP(sra, x12, x15, x28, 0x0, 8, 11, x7, 88, x19)

inst_12:
// rs1==x10, rs2==x26, rd==x20, rs1_val == 16, rs2_val == 2
// opcode: sra ; op1:x10; op2:x26; dest:x20; op1val:16;  op2val:2
TEST_RR_OP(sra, x20, x10, x26, 0x4, 16, 2, x7, 96, x19)

inst_13:
// rs1==x30, rs2==x2, rd==x17, rs1_val == 32, rs2_val == 31
// opcode: sra ; op1:x30; op2:x2; dest:x17; op1val:32;  op2val:31
TEST_RR_OP(sra, x17, x30, x2, 0x0, 32, 31, x7, 104, x19)

inst_14:
// rs1==x28, rs2==x25, rd==x1, rs1_val == 64, 
// opcode: sra ; op1:x28; op2:x25; dest:x1; op1val:64;  op2val:7
TEST_RR_OP(sra, x1, x28, x25, 0x0, 64, 7, x7, 112, x9)
RVTEST_SIGBASE( x11,signature_x11_0)

inst_15:
// rs1==x24, rs2==x20, rd==x15, rs1_val == 128, 
// opcode: sra ; op1:x24; op2:x20; dest:x15; op1val:128;  op2val:59
TEST_RR_OP(sra, x15, x24, x20, 0x0, 128, 59, x11, 0, x9)

inst_16:
// rs1==x14, rs2==x6, rd==x5, rs1_val == 256, 
// opcode: sra ; op1:x14; op2:x6; dest:x5; op1val:256;  op2val:5
TEST_RR_OP(sra, x5, x14, x6, 0x8, 256, 5, x11, 8, x9)

inst_17:
// rs1==x26, rs2==x24, rd==x25, rs1_val == 512, 
// opcode: sra ; op1:x26; op2:x24; dest:x25; op1val:512;  op2val:7
TEST_RR_OP(sra, x25, x26, x24, 0x4, 512, 7, x11, 16, x9)

inst_18:
// rs1==x21, rs2==x17, rd==x13, rs1_val == 1024, rs2_val == 16
// opcode: sra ; op1:x21; op2:x17; dest:x13; op1val:1024;  op2val:16
TEST_RR_OP(sra, x13, x21, x17, 0x0, 1024, 16, x11, 24, x9)

inst_19:
// rs1==x17, rs2==x12, rd==x22, rs1_val == 2048, 
// opcode: sra ; op1:x17; op2:x12; dest:x22; op1val:2048;  op2val:19
TEST_RR_OP(sra, x22, x17, x12, 0x0, 2048, 19, x11, 32, x9)

inst_20:
// rs1==x19, rs2==x13, rd==x18, rs1_val == 4096, 
// opcode: sra ; op1:x19; op2:x13; dest:x18; op1val:4096;  op2val:14
TEST_RR_OP(sra, x18, x19, x13, 0x0, 4096, 14, x11, 40, x9)

inst_21:
// rs1==x12, rs2==x16, rd==x24, rs1_val == 8192, 
// opcode: sra ; op1:x12; op2:x16; dest:x24; op1val:8192;  op2val:19
TEST_RR_OP(sra, x24, x12, x16, 0x0, 8192, 19, x11, 48, x9)

inst_22:
// rs1==x20, rs2==x30, rd==x26, rs1_val == 16384, 
// opcode: sra ; op1:x20; op2:x30; dest:x26; op1val:16384;  op2val:19
TEST_RR_OP(sra, x26, x20, x30, 0x0, 16384, 19, x11, 56, x9)

inst_23:
// rs1==x7, rs2==x27, rd==x2, rs1_val == 32768, 
// opcode: sra ; op1:x7; op2:x27; dest:x2; op1val:32768;  op2val:14
TEST_RR_OP(sra, x2, x7, x27, 0x2, 32768, 14, x11, 64, x9)

inst_24:
// rs1==x8, rs2==x31, rd==x0, rs1_val == 65536, 
// opcode: sra ; op1:x8; op2:x31; dest:x0; op1val:65536;  op2val:15
TEST_RR_OP(sra, x0, x8, x31, 0x2, 65536, 15, x11, 72, x9)

inst_25:
// rs1==x23, rs2==x19, rd==x4, rs1_val == 131072, 
// opcode: sra ; op1:x23; op2:x19; dest:x4; op1val:131072;  op2val:5
TEST_RR_OP(sra, x4, x23, x19, 0x1000, 131072, 5, x11, 80, x9)

inst_26:
// rs1==x6, rs2==x15, rd==x16, rs1_val == 262144, rs2_val == 55
// opcode: sra ; op1:x6; op2:x15; dest:x16; op1val:262144;  op2val:55
TEST_RR_OP(sra, x16, x6, x15, 0x0, 262144, 55, x11, 88, x9)

inst_27:
// rs1==x3, rs2==x0, rd==x19, rs1_val == 524288, rs2_val == 1
// opcode: sra ; op1:x3; op2:x0; dest:x19; op1val:524288;  op2val:1
TEST_RR_OP(sra, x19, x3, x0, 0x40000, 524288, 1, x11, 96, x9)

inst_28:
// rs1==x5, rs2==x7, rd==x23, rs1_val == 1048576, 
// opcode: sra ; op1:x5; op2:x7; dest:x23; op1val:1048576;  op2val:6
TEST_RR_OP(sra, x23, x5, x7, 0x4000, 1048576, 6, x11, 104, x2)

inst_29:
// rs1==x1, rs2==x9, rd==x27, rs1_val == 2097152, rs2_val == 61
// opcode: sra ; op1:x1; op2:x9; dest:x27; op1val:2097152;  op2val:61
TEST_RR_OP(sra, x27, x1, x9, 0x0, 2097152, 61, x11, 112, x2)

inst_30:
// rs1==x18, rs2==x3, rd==x10, rs1_val == 4194304, 
// opcode: sra ; op1:x18; op2:x3; dest:x10; op1val:4194304;  op2val:3
TEST_RR_OP(sra, x10, x18, x3, 0x80000, 4194304, 3, x11, 120, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_31:
// rs1==x25, rs2==x10, rd==x7, rs1_val == 8388608, 
// opcode: sra ; op1:x25; op2:x10; dest:x7; op1val:8388608;  op2val:1
TEST_RR_OP(sra, x7, x25, x10, 0x400000, 8388608, 1, x1, 0, x2)

inst_32:
// rs1_val == 16777216, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:6
TEST_RR_OP(sra, x12, x10, x11, 0x40000, 16777216, 6, x1, 8, x2)

inst_33:
// rs1_val == 33554432, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0x2000000, 33554432, 0, x1, 16, x2)

inst_34:
// rs1_val == 67108864, rs2_val == 47
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x800, 67108864, 47, x1, 24, x2)

inst_35:
// rs1_val == 268435456, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:42
TEST_RR_OP(sra, x12, x10, x11, 0x40000, 268435456, 42, x1, 32, x2)

inst_36:
// rs1_val == 536870912, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x100000, 536870912, 9, x1, 40, x2)

inst_37:
// rs1_val == 1073741824, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:61
TEST_RR_OP(sra, x12, x10, x11, 0x2, 1073741824, 61, x1, 48, x2)

inst_38:
// rs1_val == 2147483648, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:42
TEST_RR_OP(sra, x12, x10, x11, 0x200000, 2147483648, 42, x1, 56, x2)

inst_39:
// rs1_val == 4294967296, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:19
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4294967296, 19, x1, 64, x2)

inst_40:
// rs1_val == 8589934592, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x0, 8589934592, 31, x1, 72, x2)

inst_41:
// rs1_val == 17179869184, rs2_val == 8
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0x0, 17179869184, 8, x1, 80, x2)

inst_42:
// rs1_val == 34359738368, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x0, 34359738368, 17, x1, 88, x2)

inst_43:
// rs1_val == 68719476736, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:14
TEST_RR_OP(sra, x12, x10, x11, 0x0, 68719476736, 14, x1, 96, x2)

inst_44:
// rs1_val == 137438953472, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:3
TEST_RR_OP(sra, x12, x10, x11, 0x0, 137438953472, 3, x1, 104, x2)

inst_45:
// rs1_val == 274877906944, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x0, 274877906944, 31, x1, 112, x2)

inst_46:
// rs1_val == 549755813888, rs2_val == 62
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x0, 549755813888, 62, x1, 120, x2)

inst_47:
// rs1_val == 1099511627776, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0x0, 1099511627776, 8, x1, 128, x2)

inst_48:
// rs1_val == 2199023255552, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:2
TEST_RR_OP(sra, x12, x10, x11, 0x0, 2199023255552, 2, x1, 136, x2)

inst_49:
// rs1_val == 4398046511104, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4398046511104, 17, x1, 144, x2)

inst_50:
// rs1_val == 8796093022208, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:42
TEST_RR_OP(sra, x12, x10, x11, 0x0, 8796093022208, 42, x1, 152, x2)

inst_51:
// rs1_val == 17592186044416, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:13
TEST_RR_OP(sra, x12, x10, x11, 0x0, 17592186044416, 13, x1, 160, x2)

inst_52:
// rs1_val == 35184372088832, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:18
TEST_RR_OP(sra, x12, x10, x11, 0x0, 35184372088832, 18, x1, 168, x2)

inst_53:
// rs1_val == 70368744177664, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:15
TEST_RR_OP(sra, x12, x10, x11, 0x0, 70368744177664, 15, x1, 176, x2)

inst_54:
// rs1_val == 140737488355328, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x0, 140737488355328, 47, x1, 184, x2)

inst_55:
// rs1_val == 281474976710656, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0x0, 281474976710656, 0, x1, 192, x2)

inst_56:
// rs1_val == 562949953421312, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0x0, 562949953421312, 12, x1, 200, x2)

inst_57:
// rs1_val == 1125899906842624, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x0, 1125899906842624, 17, x1, 208, x2)

inst_58:
// rs1_val == 2251799813685248, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:18
TEST_RR_OP(sra, x12, x10, x11, 0x0, 2251799813685248, 18, x1, 216, x2)

inst_59:
// rs1_val == 4503599627370496, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4503599627370496, 62, x1, 224, x2)

inst_60:
// rs1_val == 9007199254740992, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x0, 9007199254740992, 47, x1, 232, x2)

inst_61:
// rs1_val == 18014398509481984, rs2_val == 4
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0x0, 18014398509481984, 4, x1, 240, x2)

inst_62:
// rs1_val == 36028797018963968, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x0, 36028797018963968, 7, x1, 248, x2)

inst_63:
// rs1_val == 72057594037927936, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x0, 72057594037927936, 47, x1, 256, x2)

inst_64:
// rs1_val == 288230376151711744, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:6
TEST_RR_OP(sra, x12, x10, x11, 0x0, 288230376151711744, 6, x1, 264, x2)

inst_65:
// rs1_val == 576460752303423488, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0x0, 576460752303423488, 12, x1, 272, x2)

inst_66:
// rs1_val == 1152921504606846976, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0x0, 1152921504606846976, 0, x1, 280, x2)

inst_67:
// rs1_val == 2305843009213693952, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0x0, 2305843009213693952, 12, x1, 288, x2)

inst_68:
// rs1_val == 4611686018427387904, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4611686018427387904, 8, x1, 296, x2)

inst_69:
// rs1_val == -2, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -2, 10, x1, 304, x2)

inst_70:
// rs1_val == -3, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:2
TEST_RR_OP(sra, x12, x10, x11, 0x3fffffff, -3, 2, x1, 312, x2)

inst_71:
// rs1_val == -5, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:13
TEST_RR_OP(sra, x12, x10, x11, 0x7ffff, -5, 13, x1, 320, x2)

inst_72:
// rs1_val == -9, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0xfffff, -9, 12, x1, 328, x2)

inst_73:
// rs1_val == -17, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x1f, -17, 59, x1, 336, x2)

inst_74:
// rs1_val == -33, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:5
TEST_RR_OP(sra, x12, x10, x11, 0x7fffffe, -33, 5, x1, 344, x2)

inst_75:
// rs1_val == -65, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:61
TEST_RR_OP(sra, x12, x10, x11, 0x7, -65, 61, x1, 352, x2)

inst_76:
// rs1_val == -129, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x7fffff, -129, 9, x1, 360, x2)

inst_77:
// rs1_val == -257, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:14
TEST_RR_OP(sra, x12, x10, x11, 0x3ffff, -257, 14, x1, 368, x2)

inst_78:
// rs1_val == -513, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:2
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff7f, -513, 2, x1, 376, x2)

inst_79:
// rs1_val == -1025, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3ffffe, -1025, 10, x1, 384, x2)

inst_80:
// rs1_val == -2049, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:1
TEST_RR_OP(sra, x12, x10, x11, 0x7ffffbff, -2049, 1, x1, 392, x2)

inst_81:
// rs1_val == -4097, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:18
TEST_RR_OP(sra, x12, x10, x11, 0x3fff, -4097, 18, x1, 400, x2)

inst_82:
// rs1_val == -8193, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x1ffff, -8193, 47, x1, 408, x2)

inst_83:
// rs1_val == -16385, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:6
TEST_RR_OP(sra, x12, x10, x11, 0x3fffeff, -16385, 6, x1, 416, x2)

inst_84:
// rs1_val == -65537, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:14
TEST_RR_OP(sra, x12, x10, x11, 0x3fffb, -65537, 14, x1, 424, x2)

inst_85:
// rs1_val == -131073, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:16
TEST_RR_OP(sra, x12, x10, x11, 0xfffd, -131073, 16, x1, 432, x2)

inst_86:
// rs1_val == -262145, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:5
TEST_RR_OP(sra, x12, x10, x11, 0x7ffdfff, -262145, 5, x1, 440, x2)

inst_87:
// rs1_val == -524289, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x1ffef, -524289, 47, x1, 448, x2)

inst_88:
// rs1_val == -36028797018963969, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -36028797018963969, 10, x1, 456, x2)

inst_89:
// rs1_val == -72057594037927937, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0xffffffff, -72057594037927937, 32, x1, 464, x2)

inst_90:
// rs1_val == -144115188075855873, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x1ffffff, -144115188075855873, 7, x1, 472, x2)

inst_91:
// rs1_val == -288230376151711745, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:18
TEST_RR_OP(sra, x12, x10, x11, 0x3fff, -288230376151711745, 18, x1, 480, x2)

inst_92:
// rs1_val == -576460752303423489, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0xfffff, -576460752303423489, 12, x1, 488, x2)

inst_93:
// rs1_val == -1152921504606846977, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0xffffffff, -1152921504606846977, 32, x1, 496, x2)

inst_94:
// rs1_val == -2305843009213693953, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:63
TEST_RR_OP(sra, x12, x10, x11, 0x1, -2305843009213693953, 63, x1, 504, x2)

inst_95:
// rs1_val == -4611686018427387905, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:55
TEST_RR_OP(sra, x12, x10, x11, 0x1ff, -4611686018427387905, 55, x1, 512, x2)

inst_96:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0x5555555, 6148914691236517205, 4, x1, 520, x2)

inst_97:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xaaaaaa, -6148914691236517206, 8, x1, 528, x2)

inst_98:
// rs1_val==3, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6
TEST_RR_OP(sra, x12, x10, x11, 0x0, 3, 6, x1, 536, x2)

inst_99:
// rs1_val==5, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0x0, 5, 4, x1, 544, x2)

inst_100:
// rs1_val==3689348814741910323, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x6666, 3689348814741910323, 47, x1, 552, x2)

inst_101:
// rs1_val==7378697629483820646, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0x66666, 7378697629483820646, 12, x1, 560, x2)

inst_102:
// rs1_val==-3037000499, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x257d86, -3037000499, 9, x1, 568, x2)

inst_103:
// rs1_val==3037000499, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0xb504f333, 3037000499, 0, x1, 576, x2)

inst_104:
// rs1_val==6148914691236517204, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:42
TEST_RR_OP(sra, x12, x10, x11, 0x155555, 6148914691236517204, 42, x1, 584, x2)

inst_105:
// rs1_val==3689348814741910322, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x6, 3689348814741910322, 59, x1, 592, x2)

inst_106:
// rs1_val==7378697629483820645, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x0, 7378697629483820645, 31, x1, 600, x2)

inst_107:
// rs1_val==3037000498, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:19
TEST_RR_OP(sra, x12, x10, x11, 0x16a0, 3037000498, 19, x1, 608, x2)

inst_108:
// rs1_val==6148914691236517206, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:63
TEST_RR_OP(sra, x12, x10, x11, 0x0, 6148914691236517206, 63, x1, 616, x2)

inst_109:
// rs1_val==-6148914691236517205, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x1555555, -6148914691236517205, 7, x1, 624, x2)

inst_110:
// rs1_val==3689348814741910324, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6
TEST_RR_OP(sra, x12, x10, x11, 0xcccccc, 3689348814741910324, 6, x1, 632, x2)

inst_111:
// rs1_val==7378697629483820647, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0x66666667, 7378697629483820647, 32, x1, 640, x2)

inst_112:
// rs1_val==-3037000498, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:5
TEST_RR_OP(sra, x12, x10, x11, 0x257d866, -3037000498, 5, x1, 648, x2)

inst_113:
// rs1_val==3037000500, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x1, 3037000500, 31, x1, 656, x2)

inst_114:
// rs2_val == 21, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:21
TEST_RR_OP(sra, x12, x10, x11, 0x0, 140737488355328, 21, x1, 664, x2)

inst_115:
// rs1_val == -1048577, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3ffbff, -1048577, 10, x1, 672, x2)

inst_116:
// rs1_val == -2097153, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:1
TEST_RR_OP(sra, x12, x10, x11, 0x7fefffff, -2097153, 1, x1, 680, x2)

inst_117:
// rs1_val == -4194305, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:55
TEST_RR_OP(sra, x12, x10, x11, 0x1ff, -4194305, 55, x1, 688, x2)

inst_118:
// rs1_val == -8388609, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x1f, -8388609, 59, x1, 696, x2)

inst_119:
// rs1_val == -16777217, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:11
TEST_RR_OP(sra, x12, x10, x11, 0x1fdfff, -16777217, 11, x1, 704, x2)

inst_120:
// rs1_val == -33554433, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0xfdffffff, -33554433, 32, x1, 712, x2)

inst_121:
// rs1_val == -67108865, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xfbffff, -67108865, 8, x1, 720, x2)

inst_122:
// rs1_val == -134217729, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:5
TEST_RR_OP(sra, x12, x10, x11, 0x7bfffff, -134217729, 5, x1, 728, x2)

inst_123:
// rs1_val == -268435457, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x77ff, -268435457, 17, x1, 736, x2)

inst_124:
// rs1_val == -536870913, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0xdffffff, -536870913, 4, x1, 744, x2)

inst_125:
// rs1_val == -1073741825, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x2, -1073741825, 62, x1, 752, x2)

inst_126:
// rs1_val == -2147483649, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -2147483649, 9, x1, 760, x2)

inst_127:
// rs1_val == -4294967297, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xffffff, -4294967297, 8, x1, 768, x2)

inst_128:
// rs1_val == -17179869185, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:5
TEST_RR_OP(sra, x12, x10, x11, 0x7ffffff, -17179869185, 5, x1, 776, x2)

inst_129:
// rs1_val == -34359738369, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:5
TEST_RR_OP(sra, x12, x10, x11, 0x7ffffff, -34359738369, 5, x1, 784, x2)

inst_130:
// rs1_val == -68719476737, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x7fffff, -68719476737, 9, x1, 792, x2)

inst_131:
// rs1_val == -137438953473, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:42
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -137438953473, 42, x1, 800, x2)

inst_132:
// rs1_val == -274877906945, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x1ffff, -274877906945, 47, x1, 808, x2)

inst_133:
// rs1_val == -549755813889, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x1ffffff, -549755813889, 7, x1, 816, x2)

inst_134:
// rs1_val == -1099511627777, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x1ffff, -1099511627777, 47, x1, 824, x2)

inst_135:
// rs1_val == -2199023255553, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:3
TEST_RR_OP(sra, x12, x10, x11, 0x1fffffff, -2199023255553, 3, x1, 832, x2)

inst_136:
// rs1_val == -4398046511105, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0xfffffff, -4398046511105, 4, x1, 840, x2)

inst_137:
// rs1_val == -8796093022209, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:6
TEST_RR_OP(sra, x12, x10, x11, 0x3ffffff, -8796093022209, 6, x1, 848, x2)

inst_138:
// rs1_val == -17592186044417, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xffffff, -17592186044417, 8, x1, 856, x2)

inst_139:
// rs1_val == -35184372088833, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:16
TEST_RR_OP(sra, x12, x10, x11, 0xffff, -35184372088833, 16, x1, 864, x2)

inst_140:
// rs1_val == -70368744177665, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:11
TEST_RR_OP(sra, x12, x10, x11, 0x1fffff, -70368744177665, 11, x1, 872, x2)

inst_141:
// rs1_val == -140737488355329, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0xffffffff, -140737488355329, 0, x1, 880, x2)

inst_142:
// rs1_val == -281474976710657, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:3
TEST_RR_OP(sra, x12, x10, x11, 0x1fffffff, -281474976710657, 3, x1, 888, x2)

inst_143:
// rs1_val == -562949953421313, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0xfffffff, -562949953421313, 4, x1, 896, x2)

inst_144:
// rs1_val == -1125899906842625, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -1125899906842625, 10, x1, 904, x2)

inst_145:
// rs1_val == -2251799813685249, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:42
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -2251799813685249, 42, x1, 912, x2)

inst_146:
// rs1_val == -4503599627370497, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x7fff, -4503599627370497, 17, x1, 920, x2)

inst_147:
// rs1_val == -9007199254740993, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:18
TEST_RR_OP(sra, x12, x10, x11, 0x3fff, -9007199254740993, 18, x1, 928, x2)

inst_148:
// rs1_val == -18014398509481985, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x1ffffff, -18014398509481985, 7, x1, 936, x2)

inst_149:
// rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs2_val == 59, rs1_val == -8589934593
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x1f, -8589934593, 59, x1, 944, x2)

inst_150:
// rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 144115188075855872
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x0, 144115188075855872, 7, x1, 952, x2)

inst_151:
// rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 9223372036854775807
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0xffffffff, 9223372036854775807, 32, x1, 960, x2)

inst_152:
// rs1_val == 65536, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:15
TEST_RR_OP(sra, x12, x10, x11, 0x2, 65536, 15, x1, 968, x2)

inst_153:
// rs1_val == 524288, rs2_val == 1
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:1
TEST_RR_OP(sra, x12, x10, x11, 0x40000, 524288, 1, x1, 976, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 123*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
