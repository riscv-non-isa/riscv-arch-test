 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra instruction of the RISC-V i extension for the sra covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64i")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sra)

RVTEST_SIGBASE( x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x23, rd==x19, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -9223372036854775808
// opcode: sra ; op1:x6; op2:x23; dest:x19; op1val:-9223372036854775808;  op2val:19
TEST_RR_OP(sra, x19, x6, x23, 0x0, -9223372036854775808, 19, x8, 0, x20)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x14, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, 
// opcode: sra ; op1:x13; op2:x13; dest:x14; op1val:9;  op2val:63
TEST_RR_OP(sra, x14, x13, x13, 0x0, 9, 63, x8, 8, x20)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x28, rd==x30, rs1_val < 0 and rs2_val == 0, rs1_val == -2147483649
// opcode: sra ; op1:x30; op2:x28; dest:x30; op1val:-2147483649;  op2val:0
TEST_RR_OP(sra, x30, x30, x28, 0x7fffffff, -2147483649, 0, x8, 16, x20)

inst_3:
// rs2 == rd != rs1, rs1==x12, rs2==x26, rd==x26, rs1_val > 0 and rs2_val == 0, rs1_val == 72057594037927936
// opcode: sra ; op1:x12; op2:x26; dest:x26; op1val:72057594037927936;  op2val:0
TEST_RR_OP(sra, x26, x12, x26, 0x0, 72057594037927936, 0, x8, 24, x20)

inst_4:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, 
// opcode: sra ; op1:x31; op2:x31; dest:x31; op1val:9;  op2val:9
TEST_RR_OP(sra, x31, x31, x31, 0x0, 9, 9, x8, 32, x20)

inst_5:
// rs1==x5, rs2==x6, rd==x2, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs2_val == 8
// opcode: sra ; op1:x5; op2:x6; dest:x2; op1val:0;  op2val:8
TEST_RR_OP(sra, x2, x5, x6, 0x0, 0, 8, x8, 40, x20)

inst_6:
// rs1==x15, rs2==x5, rd==x3, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 9223372036854775807
// opcode: sra ; op1:x15; op2:x5; dest:x3; op1val:9223372036854775807;  op2val:8
TEST_RR_OP(sra, x3, x15, x5, 0xffffff, 9223372036854775807, 8, x8, 48, x20)

inst_7:
// rs1==x4, rs2==x27, rd==x15, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1
// opcode: sra ; op1:x4; op2:x27; dest:x15; op1val:1;  op2val:0
TEST_RR_OP(sra, x15, x4, x27, 0x1, 1, 0, x8, 56, x20)

inst_8:
// rs1==x17, rs2==x9, rd==x28, rs2_val == 1, 
// opcode: sra ; op1:x17; op2:x9; dest:x28; op1val:6;  op2val:1
TEST_RR_OP(sra, x28, x17, x9, 0x3, 6, 1, x8, 64, x20)

inst_9:
// rs1==x16, rs2==x4, rd==x9, rs2_val == 2, rs1_val == 2251799813685248
// opcode: sra ; op1:x16; op2:x4; dest:x9; op1val:2251799813685248;  op2val:2
TEST_RR_OP(sra, x9, x16, x4, 0x0, 2251799813685248, 2, x8, 72, x20)

inst_10:
// rs1==x21, rs2==x0, rd==x16, rs2_val == 4, rs1_val == -8796093022209
// opcode: sra ; op1:x21; op2:x0; dest:x16; op1val:-8796093022209;  op2val:4
TEST_RR_OP(sra, x16, x21, x0, 0xfffffff, -8796093022209, 4, x8, 80, x20)

inst_11:
// rs1==x19, rs2==x25, rd==x12, rs2_val == 16, rs1_val == -8193
// opcode: sra ; op1:x19; op2:x25; dest:x12; op1val:-8193;  op2val:16
TEST_RR_OP(sra, x12, x19, x25, 0xffff, -8193, 16, x8, 88, x20)

inst_12:
// rs1==x11, rs2==x2, rd==x18, rs2_val == 32, 
// opcode: sra ; op1:x11; op2:x2; dest:x18; op1val:9223372036854775807;  op2val:32
TEST_RR_OP(sra, x18, x11, x2, 0xffffffff, 9223372036854775807, 32, x8, 96, x20)

inst_13:
// rs1==x1, rs2==x19, rd==x24, rs2_val == 62, rs1_val == 17179869184
// opcode: sra ; op1:x1; op2:x19; dest:x24; op1val:17179869184;  op2val:62
TEST_RR_OP(sra, x24, x1, x19, 0x0, 17179869184, 62, x8, 104, x20)

inst_14:
// rs1==x0, rs2==x11, rd==x17, rs2_val == 61, rs1_val == 33554432
// opcode: sra ; op1:x0; op2:x11; dest:x17; op1val:33554432;  op2val:61
TEST_RR_OP(sra, x17, x0, x11, 0x0, 33554432, 61, x8, 112, x20)

inst_15:
// rs1==x9, rs2==x10, rd==x25, rs2_val == 59, 
// opcode: sra ; op1:x9; op2:x10; dest:x25; op1val:33554432;  op2val:59
TEST_RR_OP(sra, x25, x9, x10, 0x0, 33554432, 59, x8, 120, x20)

inst_16:
// rs1==x24, rs2==x3, rd==x1, rs2_val == 55, 
// opcode: sra ; op1:x24; op2:x3; dest:x1; op1val:-1;  op2val:55
TEST_RR_OP(sra, x1, x24, x3, 0x1ff, -1, 55, x8, 128, x20)

inst_17:
// rs1==x18, rs2==x15, rd==x6, rs2_val == 47, rs1_val == -1099511627777
// opcode: sra ; op1:x18; op2:x15; dest:x6; op1val:-1099511627777;  op2val:47
TEST_RR_OP(sra, x6, x18, x15, 0x1ffff, -1099511627777, 47, x8, 136, x20)

inst_18:
// rs1==x28, rs2==x7, rd==x0, rs2_val == 31, 
// opcode: sra ; op1:x28; op2:x7; dest:x0; op1val:-8;  op2val:31
TEST_RR_OP(sra, x0, x28, x7, 0x1, -8, 31, x8, 144, x20)

inst_19:
// rs1==x29, rs2==x12, rd==x22, rs2_val == 21, rs1_val == 16
// opcode: sra ; op1:x29; op2:x12; dest:x22; op1val:16;  op2val:21
TEST_RR_OP(sra, x22, x29, x12, 0x0, 16, 21, x8, 152, x9)
RVTEST_SIGBASE( x6,signature_x6_0)

inst_20:
// rs1==x14, rs2==x20, rd==x21, rs2_val == 42, rs1_val == -137438953473
// opcode: sra ; op1:x14; op2:x20; dest:x21; op1val:-137438953473;  op2val:42
TEST_RR_OP(sra, x21, x14, x20, 0x3fffff, -137438953473, 42, x6, 0, x9)

inst_21:
// rs1==x3, rs2==x18, rd==x29, rs1_val == 2, 
// opcode: sra ; op1:x3; op2:x18; dest:x29; op1val:2;  op2val:6
TEST_RR_OP(sra, x29, x3, x18, 0x0, 2, 6, x6, 8, x9)

inst_22:
// rs1==x25, rs2==x29, rd==x8, rs1_val == 4, 
// opcode: sra ; op1:x25; op2:x29; dest:x8; op1val:4;  op2val:13
TEST_RR_OP(sra, x8, x25, x29, 0x0, 4, 13, x6, 16, x9)

inst_23:
// rs1==x26, rs2==x21, rd==x23, rs1_val == 8, 
// opcode: sra ; op1:x26; op2:x21; dest:x23; op1val:8;  op2val:13
TEST_RR_OP(sra, x23, x26, x21, 0x0, 8, 13, x6, 24, x9)

inst_24:
// rs1==x23, rs2==x24, rd==x27, rs1_val == 32, 
// opcode: sra ; op1:x23; op2:x24; dest:x27; op1val:32;  op2val:31
TEST_RR_OP(sra, x27, x23, x24, 0x0, 32, 31, x6, 32, x9)

inst_25:
// rs1==x8, rs2==x22, rd==x10, rs1_val == 64, 
// opcode: sra ; op1:x8; op2:x22; dest:x10; op1val:64;  op2val:2
TEST_RR_OP(sra, x10, x8, x22, 0x10, 64, 2, x6, 40, x9)

inst_26:
// rs1==x10, rs2==x16, rd==x5, rs1_val == 128, 
// opcode: sra ; op1:x10; op2:x16; dest:x5; op1val:128;  op2val:11
TEST_RR_OP(sra, x5, x10, x16, 0x0, 128, 11, x6, 48, x9)

inst_27:
// rs1==x20, rs2==x8, rd==x7, rs1_val == 256, 
// opcode: sra ; op1:x20; op2:x8; dest:x7; op1val:256;  op2val:63
TEST_RR_OP(sra, x7, x20, x8, 0x0, 256, 63, x6, 56, x9)

inst_28:
// rs1==x27, rs2==x14, rd==x13, rs1_val == 512, 
// opcode: sra ; op1:x27; op2:x14; dest:x13; op1val:512;  op2val:10
TEST_RR_OP(sra, x13, x27, x14, 0x0, 512, 10, x6, 64, x9)

inst_29:
// rs1==x2, rs2==x1, rd==x4, rs1_val == 1024, 
// opcode: sra ; op1:x2; op2:x1; dest:x4; op1val:1024;  op2val:10
TEST_RR_OP(sra, x4, x2, x1, 0x1, 1024, 10, x6, 72, x9)

inst_30:
// rs1==x22, rs2==x30, rd==x20, rs1_val == 2048, 
// opcode: sra ; op1:x22; op2:x30; dest:x20; op1val:2048;  op2val:18
TEST_RR_OP(sra, x20, x22, x30, 0x0, 2048, 18, x6, 80, x9)

inst_31:
// rs1==x7, rs2==x17, rd==x11, rs1_val == 4096, 
// opcode: sra ; op1:x7; op2:x17; dest:x11; op1val:4096;  op2val:2
TEST_RR_OP(sra, x11, x7, x17, 0x400, 4096, 2, x6, 88, x9)

inst_32:
// rs1_val == 8192, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:13
TEST_RR_OP(sra, x12, x10, x11, 0x1, 8192, 13, x6, 96, x9)

inst_33:
// rs1_val == 16384, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0x40, 16384, 8, x6, 104, x9)

inst_34:
// rs1_val == 32768, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:32768;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x20, 32768, 10, x6, 112, x9)

inst_35:
// rs1_val == 65536, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0x10000, 65536, 32, x6, 120, x9)

inst_36:
// rs1_val == 131072, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x0, 131072, 62, x6, 128, x9)

inst_37:
// rs1_val == 262144, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:63
TEST_RR_OP(sra, x12, x10, x11, 0x0, 262144, 63, x6, 136, x9)

inst_38:
// rs1_val == 524288, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0x80000, 524288, 0, x6, 144, x9)

inst_39:
// rs1_val == 1048576, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x800, 1048576, 9, x6, 152, x9)

inst_40:
// rs1_val == 2097152, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0x200, 2097152, 12, x6, 160, x9)

inst_41:
// rs1_val == 4194304, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:15
TEST_RR_OP(sra, x12, x10, x11, 0x80, 4194304, 15, x6, 168, x9)

inst_42:
// rs1_val == 8388608, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:6
TEST_RR_OP(sra, x12, x10, x11, 0x20000, 8388608, 6, x6, 176, x9)

inst_43:
// rs1_val == 16777216, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:11
TEST_RR_OP(sra, x12, x10, x11, 0x2000, 16777216, 11, x6, 184, x9)

inst_44:
// rs1_val == 67108864, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:61
TEST_RR_OP(sra, x12, x10, x11, 0x0, 67108864, 61, x6, 192, x9)

inst_45:
// rs1_val == 134217728, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0x800000, 134217728, 4, x6, 200, x9)

inst_46:
// rs1_val == 268435456, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x40000, 268435456, 10, x6, 208, x9)

inst_47:
// rs1_val == 536870912, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:61
TEST_RR_OP(sra, x12, x10, x11, 0x1, 536870912, 61, x6, 216, x9)

inst_48:
// rs1_val == 1073741824, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:55
TEST_RR_OP(sra, x12, x10, x11, 0x80, 1073741824, 55, x6, 224, x9)

inst_49:
// rs1_val == 2147483648, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x1, 2147483648, 31, x6, 232, x9)

inst_50:
// rs1_val == 4294967296, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4294967296, 59, x6, 240, x9)

inst_51:
// rs1_val == 8589934592, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:21
TEST_RR_OP(sra, x12, x10, x11, 0x0, 8589934592, 21, x6, 248, x9)

inst_52:
// rs1_val == 34359738368, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x0, 34359738368, 7, x6, 256, x9)

inst_53:
// rs1_val == 68719476736, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:14
TEST_RR_OP(sra, x12, x10, x11, 0x0, 68719476736, 14, x6, 264, x9)

inst_54:
// rs1_val == 137438953472, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:61
TEST_RR_OP(sra, x12, x10, x11, 0x0, 137438953472, 61, x6, 272, x9)

inst_55:
// rs1_val == 274877906944, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:11
TEST_RR_OP(sra, x12, x10, x11, 0x0, 274877906944, 11, x6, 280, x9)

inst_56:
// rs1_val == 549755813888, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0x0, 549755813888, 0, x6, 288, x9)

inst_57:
// rs1_val == 1099511627776, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:63
TEST_RR_OP(sra, x12, x10, x11, 0x0, 1099511627776, 63, x6, 296, x9)

inst_58:
// rs1_val == 2199023255552, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x0, 2199023255552, 17, x6, 304, x9)

inst_59:
// rs1_val == 4398046511104, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4398046511104, 32, x6, 312, x9)

inst_60:
// rs1_val == 8796093022208, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:47
TEST_RR_OP(sra, x12, x10, x11, 0x0, 8796093022208, 47, x6, 320, x9)

inst_61:
// rs1_val == 17592186044416, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x0, 17592186044416, 7, x6, 328, x9)

inst_62:
// rs1_val == 35184372088832, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x0, 35184372088832, 59, x6, 336, x9)

inst_63:
// rs1_val == 70368744177664, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:13
TEST_RR_OP(sra, x12, x10, x11, 0x0, 70368744177664, 13, x6, 344, x9)

inst_64:
// rs1_val == 140737488355328, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0x0, 140737488355328, 12, x6, 352, x9)

inst_65:
// rs1_val == 281474976710656, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x0, 281474976710656, 10, x6, 360, x9)

inst_66:
// rs1_val == 562949953421312, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0x0, 562949953421312, 8, x6, 368, x9)

inst_67:
// rs1_val == 1125899906842624, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x0, 1125899906842624, 10, x6, 376, x9)

inst_68:
// rs1_val == 4503599627370496, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:5
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4503599627370496, 5, x6, 384, x9)

inst_69:
// rs1_val == 9007199254740992, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:3
TEST_RR_OP(sra, x12, x10, x11, 0x0, 9007199254740992, 3, x6, 392, x9)

inst_70:
// rs1_val == 18014398509481984, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:63
TEST_RR_OP(sra, x12, x10, x11, 0x0, 18014398509481984, 63, x6, 400, x9)

inst_71:
// rs1_val == 36028797018963968, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:15
TEST_RR_OP(sra, x12, x10, x11, 0x0, 36028797018963968, 15, x6, 408, x9)

inst_72:
// rs1_val == 144115188075855872, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x0, 144115188075855872, 59, x6, 416, x9)

inst_73:
// rs1_val == 288230376151711744, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0x0, 288230376151711744, 32, x6, 424, x9)

inst_74:
// rs1_val == 576460752303423488, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x0, 576460752303423488, 62, x6, 432, x9)

inst_75:
// rs1_val == -2199023255553, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -2199023255553, 10, x6, 440, x9)

inst_76:
// rs1_val == -4398046511105, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:2
TEST_RR_OP(sra, x12, x10, x11, 0x3fffffff, -4398046511105, 2, x6, 448, x9)

inst_77:
// rs1_val == -17592186044417, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:18
TEST_RR_OP(sra, x12, x10, x11, 0x3fff, -17592186044417, 18, x6, 456, x9)

inst_78:
// rs1_val == -35184372088833, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -35184372088833, 10, x6, 464, x9)

inst_79:
// rs1_val == -70368744177665, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:15
TEST_RR_OP(sra, x12, x10, x11, 0x1ffff, -70368744177665, 15, x6, 472, x9)

inst_80:
// rs1_val == -140737488355329, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x1ffffff, -140737488355329, 7, x6, 480, x9)

inst_81:
// rs1_val == -281474976710657, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -281474976710657, 10, x6, 488, x9)

inst_82:
// rs1_val == -562949953421313, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:59
TEST_RR_OP(sra, x12, x10, x11, 0x1f, -562949953421313, 59, x6, 496, x9)

inst_83:
// rs1_val == -1125899906842625, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:16
TEST_RR_OP(sra, x12, x10, x11, 0xffff, -1125899906842625, 16, x6, 504, x9)

inst_84:
// rs1_val == -2251799813685249, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -2251799813685249, 10, x6, 512, x9)

inst_85:
// rs1_val == -4503599627370497, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:15
TEST_RR_OP(sra, x12, x10, x11, 0x1ffff, -4503599627370497, 15, x6, 520, x9)

inst_86:
// rs1_val == -9007199254740993, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:2
TEST_RR_OP(sra, x12, x10, x11, 0x3fffffff, -9007199254740993, 2, x6, 528, x9)

inst_87:
// rs1_val == -18014398509481985, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x1, -18014398509481985, 31, x6, 536, x9)

inst_88:
// rs1_val == -36028797018963969, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xffffff, -36028797018963969, 8, x6, 544, x9)

inst_89:
// rs1_val == -72057594037927937, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:19
TEST_RR_OP(sra, x12, x10, x11, 0x1fff, -72057594037927937, 19, x6, 552, x9)

inst_90:
// rs1_val == -144115188075855873, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x7fff, -144115188075855873, 17, x6, 560, x9)

inst_91:
// rs1_val == -288230376151711745, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x3, -288230376151711745, 62, x6, 568, x9)

inst_92:
// rs1_val == -576460752303423489, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x7fff, -576460752303423489, 17, x6, 576, x9)

inst_93:
// rs1_val == -1152921504606846977, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x7fffff, -1152921504606846977, 9, x6, 584, x9)

inst_94:
// rs1_val == -2305843009213693953, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xffffff, -2305843009213693953, 8, x6, 592, x9)

inst_95:
// rs1_val == -4611686018427387905, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:14
TEST_RR_OP(sra, x12, x10, x11, 0x3ffff, -4611686018427387905, 14, x6, 600, x9)

inst_96:
// rs1_val == 6148914691236517205, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0x55555555, 6148914691236517205, 32, x6, 608, x9)

inst_97:
// rs1_val == -6148914691236517206, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x2aaaaa, -6148914691236517206, 10, x6, 616, x9)

inst_98:
// rs1_val == 1152921504606846976, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x0, 1152921504606846976, 31, x6, 624, x9)

inst_99:
// rs1_val == 2305843009213693952, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:0
TEST_RR_OP(sra, x12, x10, x11, 0x0, 2305843009213693952, 0, x6, 632, x9)

inst_100:
// rs1_val == 4611686018427387904, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:1
TEST_RR_OP(sra, x12, x10, x11, 0x0, 4611686018427387904, 1, x6, 640, x9)

inst_101:
// rs1_val == -2, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:13
TEST_RR_OP(sra, x12, x10, x11, 0x7ffff, -2, 13, x6, 648, x9)

inst_102:
// rs1_val == -3, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:19
TEST_RR_OP(sra, x12, x10, x11, 0x1fff, -3, 19, x6, 656, x9)

inst_103:
// rs1_val == -5, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x3, -5, 62, x6, 664, x9)

inst_104:
// rs1_val == -9, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xffffff, -9, 8, x6, 672, x9)

inst_105:
// rs1_val == -17, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:14
TEST_RR_OP(sra, x12, x10, x11, 0x3ffff, -17, 14, x6, 680, x9)

inst_106:
// rs1_val == -33, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x3, -33, 62, x6, 688, x9)

inst_107:
// rs1_val == -65, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x7fff, -65, 17, x6, 696, x9)

inst_108:
// rs1_val == -129, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x7fffff, -129, 9, x6, 704, x9)

inst_109:
// rs1_val == -257, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:18
TEST_RR_OP(sra, x12, x10, x11, 0x3fff, -257, 18, x6, 712, x9)

inst_110:
// rs1_val == -513, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:13
TEST_RR_OP(sra, x12, x10, x11, 0x7ffff, -513, 13, x6, 720, x9)

inst_111:
// rs1_val == -1025, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0xfffff, -1025, 12, x6, 728, x9)

inst_112:
// rs1_val == -2049, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:42
TEST_RR_OP(sra, x12, x10, x11, 0x3ffffd, -2049, 42, x6, 736, x9)

inst_113:
// rs1_val == -4097, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:7
TEST_RR_OP(sra, x12, x10, x11, 0x1ffffdf, -4097, 7, x6, 744, x9)

inst_114:
// rs1_val == -16385, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:55
TEST_RR_OP(sra, x12, x10, x11, 0x1ff, -16385, 55, x6, 752, x9)

inst_115:
// rs1_val == -32769, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x1, -32769, 31, x6, 760, x9)

inst_116:
// rs1_val == -65537, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xfffeff, -65537, 8, x6, 768, x9)

inst_117:
// rs1_val == -131073, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:8
TEST_RR_OP(sra, x12, x10, x11, 0xfffdff, -131073, 8, x6, 776, x9)

inst_118:
// rs1_val == -262145, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:62
TEST_RR_OP(sra, x12, x10, x11, 0x3, -262145, 62, x6, 784, x9)

inst_119:
// rs1_val == -524289, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3ffdff, -524289, 10, x6, 792, x9)

inst_120:
// rs1_val == -1048577, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:1
TEST_RR_OP(sra, x12, x10, x11, 0x7ff7ffff, -1048577, 1, x6, 800, x9)

inst_121:
// rs1_val == -2097153, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:17
TEST_RR_OP(sra, x12, x10, x11, 0x7fef, -2097153, 17, x6, 808, x9)

inst_122:
// rs1_val == -4194305, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:16
TEST_RR_OP(sra, x12, x10, x11, 0xffbf, -4194305, 16, x6, 816, x9)

inst_123:
// rs1_val == -8388609, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:32
TEST_RR_OP(sra, x12, x10, x11, 0xff7fffff, -8388609, 32, x6, 824, x9)

inst_124:
// rs1_val == -16777217, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:2
TEST_RR_OP(sra, x12, x10, x11, 0x3fbfffff, -16777217, 2, x6, 832, x9)

inst_125:
// rs1_val == -33554433, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:1
TEST_RR_OP(sra, x12, x10, x11, 0x7effffff, -33554433, 1, x6, 840, x9)

inst_126:
// rs1_val == -67108865, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:15
TEST_RR_OP(sra, x12, x10, x11, 0x1f7ff, -67108865, 15, x6, 848, x9)

inst_127:
// rs1_val == -134217729, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:16
TEST_RR_OP(sra, x12, x10, x11, 0xf7ff, -134217729, 16, x6, 856, x9)

inst_128:
// rs1_val == -268435457, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:12
TEST_RR_OP(sra, x12, x10, x11, 0xeffff, -268435457, 12, x6, 864, x9)

inst_129:
// rs1_val == -536870913, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:1
TEST_RR_OP(sra, x12, x10, x11, 0x6fffffff, -536870913, 1, x6, 872, x9)

inst_130:
// rs1_val == -1073741825, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0xbffffff, -1073741825, 4, x6, 880, x9)

inst_131:
// rs1_val == -4294967297, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:3
TEST_RR_OP(sra, x12, x10, x11, 0x1fffffff, -4294967297, 3, x6, 888, x9)

inst_132:
// rs1_val == -8589934593, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x7fffff, -8589934593, 9, x6, 896, x9)

inst_133:
// rs1_val == -17179869185, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:19
TEST_RR_OP(sra, x12, x10, x11, 0x1fff, -17179869185, 19, x6, 904, x9)

inst_134:
// rs1_val == -34359738369, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:31
TEST_RR_OP(sra, x12, x10, x11, 0x1, -34359738369, 31, x6, 912, x9)

inst_135:
// rs1_val == -68719476737, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:55
TEST_RR_OP(sra, x12, x10, x11, 0x1ff, -68719476737, 55, x6, 920, x9)

inst_136:
// rs1_val == -274877906945, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:10
TEST_RR_OP(sra, x12, x10, x11, 0x3fffff, -274877906945, 10, x6, 928, x9)

inst_137:
// rs1_val == -549755813889, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x7fffff, -549755813889, 9, x6, 936, x9)

inst_138:
// rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:9;  op2val:9
TEST_RR_OP(sra, x12, x10, x11, 0x0, 9, 9, x6, 944, x9)

inst_139:
// rs2_val == 4, rs1_val == -8796093022209
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:4
TEST_RR_OP(sra, x12, x10, x11, 0xfffffff, -8796093022209, 4, x6, 952, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 120*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
