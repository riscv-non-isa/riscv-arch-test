 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xori instruction of the RISC-V I extension for the xori covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xori)

RVTEST_SIGBASE( x8,signature_x8_1)

inst_0:
// rs1 == rd, rs1==x2, rd==x2, rs1_val == imm_val, imm_val == -513, rs1_val < 0 and imm_val < 0, rs1_val == -513
// opcode: xori ; op1:x2; dest:x2; op1val:-513;  immval:-513
TEST_IMM_OP( xori, x2, x2, 0x0, -513, -513, x8, 0, x16)

inst_1:
// rs1 != rd, rs1==x11, rd==x21, rs1_val != imm_val, imm_val == -5, rs1_val == -2
// opcode: xori ; op1:x11; dest:x21; op1val:-2;  immval:-5
TEST_IMM_OP( xori, x21, x11, 0x5, -2, -5, x8, 8, x16)

inst_2:
// rs1==x7, rd==x22, rs1_val > 0 and imm_val > 0, rs1_val == 1073741824, imm_val == 128
// opcode: xori ; op1:x7; dest:x22; op1val:1073741824;  immval:128
TEST_IMM_OP( xori, x22, x7, 0x40000080, 1073741824, 128, x8, 16, x16)

inst_3:
// rs1==x5, rd==x4, rs1_val > 0 and imm_val < 0, imm_val == -9, rs1_val == 4398046511104
// opcode: xori ; op1:x5; dest:x4; op1val:4398046511104;  immval:-9
TEST_IMM_OP( xori, x4, x5, 0xfffffbfffffffff7, 4398046511104, -9, x8, 24, x16)

inst_4:
// rs1==x0, rd==x17, rs1_val < 0 and imm_val > 0, 
// opcode: xori ; op1:x0; dest:x17; op1val:-4;  immval:7
TEST_IMM_OP( xori, x17, x0, 0xfffffffffffffffb, -4, 7, x8, 32, x16)

inst_5:
// rs1==x27, rd==x23, rs1_val == (-2**(xlen-1)), rs1_val == -9223372036854775808
// opcode: xori ; op1:x27; dest:x23; op1val:-9223372036854775808;  immval:-5
TEST_IMM_OP( xori, x23, x27, 0x7ffffffffffffffb, -9223372036854775808, -5, x8, 40, x16)

inst_6:
// rs1==x13, rd==x25, rs1_val == 0, imm_val == 1365
// opcode: xori ; op1:x13; dest:x25; op1val:0;  immval:1365
TEST_IMM_OP( xori, x25, x13, 0x555, 0, 1365, x8, 48, x16)

inst_7:
// rs1==x21, rd==x24, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807
// opcode: xori ; op1:x21; dest:x24; op1val:9223372036854775807;  immval:-1024
TEST_IMM_OP( xori, x24, x21, 0x80000000000003ff, 9223372036854775807, -1024, x8, 56, x16)

inst_8:
// rs1==x20, rd==x31, rs1_val == 1, imm_val == (2**(12-1)-1), imm_val == 2047
// opcode: xori ; op1:x20; dest:x31; op1val:1;  immval:2047
TEST_IMM_OP( xori, x31, x20, 0x7fe, 1, 2047, x8, 64, x16)

inst_9:
// rs1==x6, rd==x7, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val == 2147483648
// opcode: xori ; op1:x6; dest:x7; op1val:2147483648;  immval:-2048
TEST_IMM_OP( xori, x7, x6, 0xffffffff7ffff800, 2147483648, -2048, x8, 72, x16)

inst_10:
// rs1==x4, rd==x29, imm_val == 0, rs1_val == -67108865
// opcode: xori ; op1:x4; dest:x29; op1val:-67108865;  immval:0
TEST_IMM_OP( xori, x29, x4, 0xfffffffffbffffff, -67108865, 0, x8, 80, x16)

inst_11:
// rs1==x1, rd==x26, imm_val == 1, rs1_val == 35184372088832
// opcode: xori ; op1:x1; dest:x26; op1val:35184372088832;  immval:1
TEST_IMM_OP( xori, x26, x1, 0x200000000001, 35184372088832, 1, x8, 88, x16)

inst_12:
// rs1==x24, rd==x15, rs1_val == 2, 
// opcode: xori ; op1:x24; dest:x15; op1val:2;  immval:-10
TEST_IMM_OP( xori, x15, x24, 0xfffffffffffffff4, 2, -10, x8, 96, x16)

inst_13:
// rs1==x17, rd==x10, rs1_val == 4, imm_val == 64
// opcode: xori ; op1:x17; dest:x10; op1val:4;  immval:64
TEST_IMM_OP( xori, x10, x17, 0x44, 4, 64, x8, 104, x16)

inst_14:
// rs1==x9, rd==x0, rs1_val == 8, imm_val == -33
// opcode: xori ; op1:x9; dest:x0; op1val:8;  immval:-33
TEST_IMM_OP( xori, x0, x9, 0xffffffffffffffd7, 8, -33, x8, 112, x16)

inst_15:
// rs1==x31, rd==x30, rs1_val == 16, 
// opcode: xori ; op1:x31; dest:x30; op1val:16;  immval:64
TEST_IMM_OP( xori, x30, x31, 0x50, 16, 64, x8, 120, x16)

inst_16:
// rs1==x10, rd==x20, rs1_val == 32, 
// opcode: xori ; op1:x10; dest:x20; op1val:32;  immval:2047
TEST_IMM_OP( xori, x20, x10, 0x7df, 32, 2047, x8, 128, x16)

inst_17:
// rs1==x12, rd==x1, rs1_val == 64, 
// opcode: xori ; op1:x12; dest:x1; op1val:64;  immval:-33
TEST_IMM_OP( xori, x1, x12, 0xffffffffffffff9f, 64, -33, x8, 136, x16)

inst_18:
// rs1==x25, rd==x5, rs1_val == 128, 
// opcode: xori ; op1:x25; dest:x5; op1val:128;  immval:7
TEST_IMM_OP( xori, x5, x25, 0x87, 128, 7, x8, 144, x16)

inst_19:
// rs1==x30, rd==x3, rs1_val == 256, 
// opcode: xori ; op1:x30; dest:x3; op1val:256;  immval:64
TEST_IMM_OP( xori, x3, x30, 0x140, 256, 64, x8, 152, x16)

inst_20:
// rs1==x23, rd==x28, rs1_val == 512, 
// opcode: xori ; op1:x23; dest:x28; op1val:512;  immval:5
TEST_IMM_OP( xori, x28, x23, 0x205, 512, 5, x8, 160, x16)

inst_21:
// rs1==x28, rd==x11, rs1_val == 1024, 
// opcode: xori ; op1:x28; dest:x11; op1val:1024;  immval:1023
TEST_IMM_OP( xori, x11, x28, 0x7ff, 1024, 1023, x8, 168, x16)

inst_22:
// rs1==x14, rd==x18, rs1_val == 2048, 
// opcode: xori ; op1:x14; dest:x18; op1val:2048;  immval:-9
TEST_IMM_OP( xori, x18, x14, 0xfffffffffffff7f7, 2048, -9, x8, 176, x16)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_23:
// rs1==x8, rd==x19, rs1_val == 4096, 
// opcode: xori ; op1:x8; dest:x19; op1val:4096;  immval:5
TEST_IMM_OP( xori, x19, x8, 0x1005, 4096, 5, x1, 0, x2)

inst_24:
// rs1==x18, rd==x16, rs1_val == 8192, 
// opcode: xori ; op1:x18; dest:x16; op1val:8192;  immval:-8
TEST_IMM_OP( xori, x16, x18, 0xffffffffffffdff8, 8192, -8, x1, 8, x2)

inst_25:
// rs1==x29, rd==x9, rs1_val == 16384, 
// opcode: xori ; op1:x29; dest:x9; op1val:16384;  immval:-10
TEST_IMM_OP( xori, x9, x29, 0xffffffffffffbff6, 16384, -10, x1, 16, x2)

inst_26:
// rs1==x15, rd==x14, rs1_val == 32768, 
// opcode: xori ; op1:x15; dest:x14; op1val:32768;  immval:-9
TEST_IMM_OP( xori, x14, x15, 0xffffffffffff7ff7, 32768, -9, x1, 24, x2)

inst_27:
// rs1==x22, rd==x12, rs1_val == 65536, imm_val == -3
// opcode: xori ; op1:x22; dest:x12; op1val:65536;  immval:-3
TEST_IMM_OP( xori, x12, x22, 0xfffffffffffefffd, 65536, -3, x1, 32, x2)

inst_28:
// rs1==x16, rd==x27, rs1_val == 131072, 
// opcode: xori ; op1:x16; dest:x27; op1val:131072;  immval:-7
TEST_IMM_OP( xori, x27, x16, 0xfffffffffffdfff9, 131072, -7, x1, 40, x2)

inst_29:
// rs1==x3, rd==x8, rs1_val == 262144, imm_val == -1366
// opcode: xori ; op1:x3; dest:x8; op1val:262144;  immval:-1366
TEST_IMM_OP( xori, x8, x3, 0xfffffffffffbfaaa, 262144, -1366, x1, 48, x2)

inst_30:
// rs1==x26, rd==x6, rs1_val == 524288, 
// opcode: xori ; op1:x26; dest:x6; op1val:524288;  immval:-33
TEST_IMM_OP( xori, x6, x26, 0xfffffffffff7ffdf, 524288, -33, x1, 56, x2)

inst_31:
// rs1==x19, rd==x13, rs1_val == 1048576, 
// opcode: xori ; op1:x19; dest:x13; op1val:1048576;  immval:1023
TEST_IMM_OP( xori, x13, x19, 0x1003ff, 1048576, 1023, x1, 64, x2)

inst_32:
// rs1_val == 2097152, 
// opcode: xori ; op1:x10; dest:x11; op1val:2097152;  immval:6
TEST_IMM_OP( xori, x11, x10, 0x200006, 2097152, 6, x1, 72, x2)

inst_33:
// rs1_val == 4194304, 
// opcode: xori ; op1:x10; dest:x11; op1val:4194304;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0xffffffffffbffffd, 4194304, -3, x1, 80, x2)

inst_34:
// rs1_val == 8388608, 
// opcode: xori ; op1:x10; dest:x11; op1val:8388608;  immval:-8
TEST_IMM_OP( xori, x11, x10, 0xffffffffff7ffff8, 8388608, -8, x1, 88, x2)

inst_35:
// rs1_val == 16777216, imm_val == -65
// opcode: xori ; op1:x10; dest:x11; op1val:16777216;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0xfffffffffeffffbf, 16777216, -65, x1, 96, x2)

inst_36:
// rs1_val == 33554432, 
// opcode: xori ; op1:x10; dest:x11; op1val:33554432;  immval:1
TEST_IMM_OP( xori, x11, x10, 0x2000001, 33554432, 1, x1, 104, x2)

inst_37:
// rs1_val == 67108864, imm_val == 32
// opcode: xori ; op1:x10; dest:x11; op1val:67108864;  immval:32
TEST_IMM_OP( xori, x11, x10, 0x4000020, 67108864, 32, x1, 112, x2)

inst_38:
// rs1_val == 134217728, 
// opcode: xori ; op1:x10; dest:x11; op1val:134217728;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0xfffffffff7ffffff, 134217728, -1, x1, 120, x2)

inst_39:
// rs1_val == 268435456, 
// opcode: xori ; op1:x10; dest:x11; op1val:268435456;  immval:1365
TEST_IMM_OP( xori, x11, x10, 0x10000555, 268435456, 1365, x1, 128, x2)

inst_40:
// rs1_val == 536870912, 
// opcode: xori ; op1:x10; dest:x11; op1val:536870912;  immval:2047
TEST_IMM_OP( xori, x11, x10, 0x200007ff, 536870912, 2047, x1, 136, x2)

inst_41:
// rs1_val == 4294967296, 
// opcode: xori ; op1:x10; dest:x11; op1val:4294967296;  immval:9
TEST_IMM_OP( xori, x11, x10, 0x100000009, 4294967296, 9, x1, 144, x2)

inst_42:
// rs1_val == 8589934592, 
// opcode: xori ; op1:x10; dest:x11; op1val:8589934592;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0x2000003ff, 8589934592, 1023, x1, 152, x2)

inst_43:
// rs1_val == 17179869184, 
// opcode: xori ; op1:x10; dest:x11; op1val:17179869184;  immval:128
TEST_IMM_OP( xori, x11, x10, 0x400000080, 17179869184, 128, x1, 160, x2)

inst_44:
// rs1_val == 34359738368, 
// opcode: xori ; op1:x10; dest:x11; op1val:34359738368;  immval:128
TEST_IMM_OP( xori, x11, x10, 0x800000080, 34359738368, 128, x1, 168, x2)

inst_45:
// rs1_val == 68719476736, 
// opcode: xori ; op1:x10; dest:x11; op1val:68719476736;  immval:128
TEST_IMM_OP( xori, x11, x10, 0x1000000080, 68719476736, 128, x1, 176, x2)

inst_46:
// rs1_val == 137438953472, imm_val == -129
// opcode: xori ; op1:x10; dest:x11; op1val:137438953472;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0xffffffdfffffff7f, 137438953472, -129, x1, 184, x2)

inst_47:
// rs1_val == 274877906944, 
// opcode: xori ; op1:x10; dest:x11; op1val:274877906944;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0xffffffbffffffffc, 274877906944, -4, x1, 192, x2)

inst_48:
// rs1_val == 549755813888, 
// opcode: xori ; op1:x10; dest:x11; op1val:549755813888;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0xffffff7ffffffaaa, 549755813888, -1366, x1, 200, x2)

inst_49:
// rs1_val == 1099511627776, 
// opcode: xori ; op1:x10; dest:x11; op1val:1099511627776;  immval:-9
TEST_IMM_OP( xori, x11, x10, 0xfffffefffffffff7, 1099511627776, -9, x1, 208, x2)

inst_50:
// rs1_val == 2199023255552, 
// opcode: xori ; op1:x10; dest:x11; op1val:2199023255552;  immval:2047
TEST_IMM_OP( xori, x11, x10, 0x200000007ff, 2199023255552, 2047, x1, 216, x2)

inst_51:
// rs1_val == 8796093022208, 
// opcode: xori ; op1:x10; dest:x11; op1val:8796093022208;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0xfffff7ffffffffff, 8796093022208, -1, x1, 224, x2)

inst_52:
// rs1_val == 17592186044416, 
// opcode: xori ; op1:x10; dest:x11; op1val:17592186044416;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0xffffeffffffffdff, 17592186044416, -513, x1, 232, x2)

inst_53:
// rs1_val == 70368744177664, 
// opcode: xori ; op1:x10; dest:x11; op1val:70368744177664;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0x4000000003ff, 70368744177664, 1023, x1, 240, x2)

inst_54:
// rs1_val == 140737488355328, 
// opcode: xori ; op1:x10; dest:x11; op1val:140737488355328;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0xffff7ffffffffdff, 140737488355328, -513, x1, 248, x2)

inst_55:
// rs1_val == 281474976710656, imm_val == -17
// opcode: xori ; op1:x10; dest:x11; op1val:281474976710656;  immval:-17
TEST_IMM_OP( xori, x11, x10, 0xfffeffffffffffef, 281474976710656, -17, x1, 256, x2)

inst_56:
// rs1_val == 562949953421312, 
// opcode: xori ; op1:x10; dest:x11; op1val:562949953421312;  immval:9
TEST_IMM_OP( xori, x11, x10, 0x2000000000009, 562949953421312, 9, x1, 264, x2)

inst_57:
// rs1_val == 1125899906842624, imm_val == -257
// opcode: xori ; op1:x10; dest:x11; op1val:1125899906842624;  immval:-257
TEST_IMM_OP( xori, x11, x10, 0xfffbfffffffffeff, 1125899906842624, -257, x1, 272, x2)

inst_58:
// rs1_val == 2251799813685248, 
// opcode: xori ; op1:x10; dest:x11; op1val:2251799813685248;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0xfff7fffffffffffb, 2251799813685248, -5, x1, 280, x2)

inst_59:
// rs1_val == 4503599627370496, 
// opcode: xori ; op1:x10; dest:x11; op1val:4503599627370496;  immval:5
TEST_IMM_OP( xori, x11, x10, 0x10000000000005, 4503599627370496, 5, x1, 288, x2)

inst_60:
// rs1_val == 9007199254740992, 
// opcode: xori ; op1:x10; dest:x11; op1val:9007199254740992;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0xffdffffffffffffd, 9007199254740992, -3, x1, 296, x2)

inst_61:
// rs1_val == 18014398509481984, 
// opcode: xori ; op1:x10; dest:x11; op1val:18014398509481984;  immval:-2048
TEST_IMM_OP( xori, x11, x10, 0xffbffffffffff800, 18014398509481984, -2048, x1, 304, x2)

inst_62:
// rs1_val == 36028797018963968, imm_val == 16
// opcode: xori ; op1:x10; dest:x11; op1val:36028797018963968;  immval:16
TEST_IMM_OP( xori, x11, x10, 0x80000000000010, 36028797018963968, 16, x1, 312, x2)

inst_63:
// rs1_val == 72057594037927936, 
// opcode: xori ; op1:x10; dest:x11; op1val:72057594037927936;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0xfeffffffffffff7f, 72057594037927936, -129, x1, 320, x2)

inst_64:
// rs1_val == 144115188075855872, 
// opcode: xori ; op1:x10; dest:x11; op1val:144115188075855872;  immval:-33
TEST_IMM_OP( xori, x11, x10, 0xfdffffffffffffdf, 144115188075855872, -33, x1, 328, x2)

inst_65:
// rs1_val == 288230376151711744, 
// opcode: xori ; op1:x10; dest:x11; op1val:288230376151711744;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0xfbfffffffffffc00, 288230376151711744, -1024, x1, 336, x2)

inst_66:
// rs1_val == 576460752303423488, 
// opcode: xori ; op1:x10; dest:x11; op1val:576460752303423488;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0xf7ffffffffffff7f, 576460752303423488, -129, x1, 344, x2)

inst_67:
// rs1_val == 1152921504606846976, imm_val == 256
// opcode: xori ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:256
TEST_IMM_OP( xori, x11, x10, 0x1000000000000100, 1152921504606846976, 256, x1, 352, x2)

inst_68:
// rs1_val == 2305843009213693952, 
// opcode: xori ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0xdffffffffffffc00, 2305843009213693952, -1024, x1, 360, x2)

inst_69:
// rs1_val == 4611686018427387904, 
// opcode: xori ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:3
TEST_IMM_OP( xori, x11, x10, 0x4000000000000003, 4611686018427387904, 3, x1, 368, x2)

inst_70:
// rs1_val == -3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-3;  immval:0
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffffffd, -3, 0, x1, 376, x2)

inst_71:
// rs1_val == -5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-5;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0x3fb, -5, -1024, x1, 384, x2)

inst_72:
// rs1_val == -9, 
// opcode: xori ; op1:x10; dest:x11; op1val:-9;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffff77, -9, 128, x1, 392, x2)

inst_73:
// rs1_val == -17, imm_val == 512
// opcode: xori ; op1:x10; dest:x11; op1val:-17;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffffdef, -17, 512, x1, 400, x2)

inst_74:
// rs1_val == -33, 
// opcode: xori ; op1:x10; dest:x11; op1val:-33;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0x3df, -33, -1024, x1, 408, x2)

inst_75:
// rs1_val == -2251799813685249, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2251799813685249;  immval:7
TEST_IMM_OP( xori, x11, x10, 0xfff7fffffffffff8, -2251799813685249, 7, x1, 416, x2)

inst_76:
// rs1_val == -4503599627370497, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4503599627370497;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xffeffffffffffdff, -4503599627370497, 512, x1, 424, x2)

inst_77:
// rs1_val == -9007199254740993, 
// opcode: xori ; op1:x10; dest:x11; op1val:-9007199254740993;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0x20000000000004, -9007199254740993, -5, x1, 432, x2)

inst_78:
// rs1_val == -18014398509481985, imm_val == -2
// opcode: xori ; op1:x10; dest:x11; op1val:-18014398509481985;  immval:-2
TEST_IMM_OP( xori, x11, x10, 0x40000000000001, -18014398509481985, -2, x1, 440, x2)

inst_79:
// rs1_val == -36028797018963969, 
// opcode: xori ; op1:x10; dest:x11; op1val:-36028797018963969;  immval:5
TEST_IMM_OP( xori, x11, x10, 0xff7ffffffffffffa, -36028797018963969, 5, x1, 448, x2)

inst_80:
// rs1_val == -72057594037927937, 
// opcode: xori ; op1:x10; dest:x11; op1val:-72057594037927937;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0x100000000000003, -72057594037927937, -4, x1, 456, x2)

inst_81:
// rs1_val == -144115188075855873, 
// opcode: xori ; op1:x10; dest:x11; op1val:-144115188075855873;  immval:-7
TEST_IMM_OP( xori, x11, x10, 0x200000000000006, -144115188075855873, -7, x1, 464, x2)

inst_82:
// rs1_val == -288230376151711745, 
// opcode: xori ; op1:x10; dest:x11; op1val:-288230376151711745;  immval:1
TEST_IMM_OP( xori, x11, x10, 0xfbfffffffffffffe, -288230376151711745, 1, x1, 472, x2)

inst_83:
// rs1_val == -576460752303423489, 
// opcode: xori ; op1:x10; dest:x11; op1val:-576460752303423489;  immval:32
TEST_IMM_OP( xori, x11, x10, 0xf7ffffffffffffdf, -576460752303423489, 32, x1, 480, x2)

inst_84:
// rs1_val == -1152921504606846977, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1152921504606846977;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0x1000000000000000, -1152921504606846977, -1, x1, 488, x2)

inst_85:
// rs1_val == -2305843009213693953, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2305843009213693953;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0x2000000000000000, -2305843009213693953, -1, x1, 496, x2)

inst_86:
// rs1_val == -4611686018427387905, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4611686018427387905;  immval:-8
TEST_IMM_OP( xori, x11, x10, 0x4000000000000007, -4611686018427387905, -8, x1, 504, x2)

inst_87:
// rs1_val == 6148914691236517205, 
// opcode: xori ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaaaaaaaaae, 6148914691236517205, -5, x1, 512, x2)

inst_88:
// rs1_val == -6148914691236517206, imm_val == 2
// opcode: xori ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:2
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaaaaaaaaa8, -6148914691236517206, 2, x1, 520, x2)

inst_89:
// imm_val == 4, rs1_val == -8193
// opcode: xori ; op1:x10; dest:x11; op1val:-8193;  immval:4
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffdffb, -8193, 4, x1, 528, x2)

inst_90:
// imm_val == 8, 
// opcode: xori ; op1:x10; dest:x11; op1val:65536;  immval:8
TEST_IMM_OP( xori, x11, x10, 0x10008, 65536, 8, x1, 536, x2)

inst_91:
// imm_val == 1024, 
// opcode: xori ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:1024
TEST_IMM_OP( xori, x11, x10, 0x2000000000000400, 2305843009213693952, 1024, x1, 544, x2)

inst_92:
// imm_val == -1025, 
// opcode: xori ; op1:x10; dest:x11; op1val:4194304;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0xffffffffffbffbff, 4194304, -1025, x1, 552, x2)

inst_93:
// rs1_val == -65, 
// opcode: xori ; op1:x10; dest:x11; op1val:-65;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffff3f, -65, 128, x1, 560, x2)

inst_94:
// rs1_val == -129, 
// opcode: xori ; op1:x10; dest:x11; op1val:-129;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffffff, -129, 128, x1, 568, x2)

inst_95:
// rs1_val == -257, 
// opcode: xori ; op1:x10; dest:x11; op1val:-257;  immval:-33
TEST_IMM_OP( xori, x11, x10, 0x120, -257, -33, x1, 576, x2)

inst_96:
// rs1_val == -1025, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1025;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0x0, -1025, -1025, x1, 584, x2)

inst_97:
// rs1_val == -2049, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2049;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0x880, -2049, -129, x1, 592, x2)

inst_98:
// rs1_val == -4097, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4097;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffeffc, -4097, 3, x1, 600, x2)

inst_99:
// rs1_val == -16385, 
// opcode: xori ; op1:x10; dest:x11; op1val:-16385;  immval:9
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffbff6, -16385, 9, x1, 608, x2)

inst_100:
// rs1_val == -32769, 
// opcode: xori ; op1:x10; dest:x11; op1val:-32769;  immval:-2
TEST_IMM_OP( xori, x11, x10, 0x8001, -32769, -2, x1, 616, x2)

inst_101:
// rs1_val == -65537, 
// opcode: xori ; op1:x10; dest:x11; op1val:-65537;  immval:-10
TEST_IMM_OP( xori, x11, x10, 0x10009, -65537, -10, x1, 624, x2)

inst_102:
// rs1_val == -131073, 
// opcode: xori ; op1:x10; dest:x11; op1val:-131073;  immval:4
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffdfffb, -131073, 4, x1, 632, x2)

inst_103:
// rs1_val == -262145, 
// opcode: xori ; op1:x10; dest:x11; op1val:-262145;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0x40003, -262145, -4, x1, 640, x2)

inst_104:
// rs1_val == -524289, 
// opcode: xori ; op1:x10; dest:x11; op1val:-524289;  immval:-9
TEST_IMM_OP( xori, x11, x10, 0x80008, -524289, -9, x1, 648, x2)

inst_105:
// rs1_val == -1048577, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1048577;  immval:2
TEST_IMM_OP( xori, x11, x10, 0xffffffffffeffffd, -1048577, 2, x1, 656, x2)

inst_106:
// rs1_val == -2097153, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2097153;  immval:256
TEST_IMM_OP( xori, x11, x10, 0xffffffffffdffeff, -2097153, 256, x1, 664, x2)

inst_107:
// rs1_val == -4194305, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4194305;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0x4003ff, -4194305, -1024, x1, 672, x2)

inst_108:
// rs1_val == -8388609, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8388609;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xffffffffff7fff7f, -8388609, 128, x1, 680, x2)

inst_109:
// rs1_val == -16777217, 
// opcode: xori ; op1:x10; dest:x11; op1val:-16777217;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xfffffffffefffffc, -16777217, 3, x1, 688, x2)

inst_110:
// rs1_val == -33554433, 
// opcode: xori ; op1:x10; dest:x11; op1val:-33554433;  immval:64
TEST_IMM_OP( xori, x11, x10, 0xfffffffffdffffbf, -33554433, 64, x1, 696, x2)

inst_111:
// rs1_val == -134217729, 
// opcode: xori ; op1:x10; dest:x11; op1val:-134217729;  immval:1
TEST_IMM_OP( xori, x11, x10, 0xfffffffff7fffffe, -134217729, 1, x1, 704, x2)

inst_112:
// rs1_val == -268435457, 
// opcode: xori ; op1:x10; dest:x11; op1val:-268435457;  immval:-7
TEST_IMM_OP( xori, x11, x10, 0x10000006, -268435457, -7, x1, 712, x2)

inst_113:
// rs1_val == -536870913, 
// opcode: xori ; op1:x10; dest:x11; op1val:-536870913;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xffffffffdffffffc, -536870913, 3, x1, 720, x2)

inst_114:
// rs1_val == -1073741825, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1073741825;  immval:256
TEST_IMM_OP( xori, x11, x10, 0xffffffffbffffeff, -1073741825, 256, x1, 728, x2)

inst_115:
// rs1_val == -2147483649, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2147483649;  immval:2
TEST_IMM_OP( xori, x11, x10, 0xffffffff7ffffffd, -2147483649, 2, x1, 736, x2)

inst_116:
// rs1_val == -4294967297, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4294967297;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0x100000004, -4294967297, -5, x1, 744, x2)

inst_117:
// rs1_val == -8589934593, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8589934593;  immval:0
TEST_IMM_OP( xori, x11, x10, 0xfffffffdffffffff, -8589934593, 0, x1, 752, x2)

inst_118:
// rs1_val == -17179869185, 
// opcode: xori ; op1:x10; dest:x11; op1val:-17179869185;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0x400000400, -17179869185, -1025, x1, 760, x2)

inst_119:
// rs1_val == -34359738369, 
// opcode: xori ; op1:x10; dest:x11; op1val:-34359738369;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xfffffff7fffffffc, -34359738369, 3, x1, 768, x2)

inst_120:
// rs1_val == -68719476737, 
// opcode: xori ; op1:x10; dest:x11; op1val:-68719476737;  immval:8
TEST_IMM_OP( xori, x11, x10, 0xffffffeffffffff7, -68719476737, 8, x1, 776, x2)

inst_121:
// rs1_val == -137438953473, 
// opcode: xori ; op1:x10; dest:x11; op1val:-137438953473;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xffffffdffffffffc, -137438953473, 3, x1, 784, x2)

inst_122:
// rs1_val == -274877906945, 
// opcode: xori ; op1:x10; dest:x11; op1val:-274877906945;  immval:-8
TEST_IMM_OP( xori, x11, x10, 0x4000000007, -274877906945, -8, x1, 792, x2)

inst_123:
// rs1_val == -549755813889, 
// opcode: xori ; op1:x10; dest:x11; op1val:-549755813889;  immval:-7
TEST_IMM_OP( xori, x11, x10, 0x8000000006, -549755813889, -7, x1, 800, x2)

inst_124:
// rs1_val == -1099511627777, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1099511627777;  immval:2
TEST_IMM_OP( xori, x11, x10, 0xfffffefffffffffd, -1099511627777, 2, x1, 808, x2)

inst_125:
// rs1_val == -2199023255553, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2199023255553;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0x20000000040, -2199023255553, -65, x1, 816, x2)

inst_126:
// rs1_val == -4398046511105, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4398046511105;  immval:4
TEST_IMM_OP( xori, x11, x10, 0xfffffbfffffffffb, -4398046511105, 4, x1, 824, x2)

inst_127:
// rs1_val == -8796093022209, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8796093022209;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0x80000000000, -8796093022209, -1, x1, 832, x2)

inst_128:
// rs1_val == -17592186044417, 
// opcode: xori ; op1:x10; dest:x11; op1val:-17592186044417;  immval:-257
TEST_IMM_OP( xori, x11, x10, 0x100000000100, -17592186044417, -257, x1, 840, x2)

inst_129:
// rs1_val == -35184372088833, 
// opcode: xori ; op1:x10; dest:x11; op1val:-35184372088833;  immval:-2048
TEST_IMM_OP( xori, x11, x10, 0x2000000007ff, -35184372088833, -2048, x1, 848, x2)

inst_130:
// rs1_val == -70368744177665, 
// opcode: xori ; op1:x10; dest:x11; op1val:-70368744177665;  immval:4
TEST_IMM_OP( xori, x11, x10, 0xffffbffffffffffb, -70368744177665, 4, x1, 856, x2)

inst_131:
// rs1_val == -140737488355329, 
// opcode: xori ; op1:x10; dest:x11; op1val:-140737488355329;  immval:5
TEST_IMM_OP( xori, x11, x10, 0xffff7ffffffffffa, -140737488355329, 5, x1, 864, x2)

inst_132:
// rs1_val == -281474976710657, 
// opcode: xori ; op1:x10; dest:x11; op1val:-281474976710657;  immval:-17
TEST_IMM_OP( xori, x11, x10, 0x1000000000010, -281474976710657, -17, x1, 872, x2)

inst_133:
// rs1_val == -562949953421313, 
// opcode: xori ; op1:x10; dest:x11; op1val:-562949953421313;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0x2000000000080, -562949953421313, -129, x1, 880, x2)

inst_134:
// rs1_val == -1125899906842625, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1125899906842625;  immval:1365
TEST_IMM_OP( xori, x11, x10, 0xfffbfffffffffaaa, -1125899906842625, 1365, x1, 888, x2)

inst_135:
// rs1_val == 8, imm_val == -33
// opcode: xori ; op1:x10; dest:x11; op1val:8;  immval:-33
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffffd7, 8, -33, x1, 896, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 113*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
