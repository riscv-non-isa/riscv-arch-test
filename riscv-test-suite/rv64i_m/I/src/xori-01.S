 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Mon Nov  9 11:54:31 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xori instruction of the RISC-V I extension for the xori covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVTEST_CODE_BEGIN
RVMODEL_BOOT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xori)

RVTEST_SIGBASE( x7,signature_x7_1)

inst_0:
// rs1 == rd, rs1==x27, rd==x27, rs1_val == imm_val, imm_val == -65, rs1_val == -65, rs1_val < 0 and imm_val < 0
// opcode: xori ; op1:x27; dest:x27; op1val:-65;  immval:-65
TEST_IMM_OP( xori, x27, x27, 0x0, -65, -65, x7, 0, x8)

inst_1:
// rs1 != rd, rs1==x30, rd==x16, rs1_val != imm_val, rs1_val == -9223372036854775808, rs1_val == (-2**(xlen-1))
// opcode: xori ; op1:x30; dest:x16; op1val:-9223372036854775808;  immval:-7
TEST_IMM_OP( xori, x16, x30, 0x7ffffffffffffff9, -9223372036854775808, -7, x7, 8, x8)

inst_2:
// rs1==x28, rd==x13, rs1_val > 0 and imm_val > 0, imm_val == 16, rs1_val == 17179869184
// opcode: xori ; op1:x28; dest:x13; op1val:17179869184;  immval:16
TEST_IMM_OP( xori, x13, x28, 0x400000010, 17179869184, 16, x7, 16, x8)

inst_3:
// rs1==x15, rd==x20, rs1_val > 0 and imm_val < 0, 
// opcode: xori ; op1:x15; dest:x20; op1val:5;  immval:-1
TEST_IMM_OP( xori, x20, x15, 0xfffffffffffffffa, 5, -1, x7, 24, x8)

inst_4:
// rs1==x14, rd==x22, rs1_val < 0 and imm_val > 0, 
// opcode: xori ; op1:x14; dest:x22; op1val:-8;  immval:16
TEST_IMM_OP( xori, x22, x14, 0xffffffffffffffe8, -8, 16, x7, 32, x8)

inst_5:
// rs1==x0, rd==x9, rs1_val == 0, imm_val == 0
// opcode: xori ; op1:x0; dest:x9; op1val:0;  immval:0
TEST_IMM_OP( xori, x9, x0, 0x0, 0, 0, x7, 40, x8)

inst_6:
// rs1==x6, rd==x14, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807
// opcode: xori ; op1:x6; dest:x14; op1val:9223372036854775807;  immval:-10
TEST_IMM_OP( xori, x14, x6, 0x8000000000000009, 9223372036854775807, -10, x7, 48, x8)

inst_7:
// rs1==x9, rd==x0, rs1_val == 1, 
// opcode: xori ; op1:x9; dest:x0; op1val:1;  immval:0
TEST_IMM_OP( xori, x0, x9, 0x1, 1, 0, x7, 56, x8)

inst_8:
// rs1==x23, rd==x28, imm_val == (-2**(12-1)), imm_val == -2048
// opcode: xori ; op1:x23; dest:x28; op1val:-4;  immval:-2048
TEST_IMM_OP( xori, x28, x23, 0x7fc, -4, -2048, x7, 64, x8)

inst_9:
// rs1==x16, rd==x18, imm_val == (2**(12-1)-1), imm_val == 2047, rs1_val == -4398046511105
// opcode: xori ; op1:x16; dest:x18; op1val:-4398046511105;  immval:2047
TEST_IMM_OP( xori, x18, x16, 0xfffffbfffffff800, -4398046511105, 2047, x7, 72, x8)

inst_10:
// rs1==x31, rd==x24, imm_val == 1, rs1_val == -4503599627370497
// opcode: xori ; op1:x31; dest:x24; op1val:-4503599627370497;  immval:1
TEST_IMM_OP( xori, x24, x31, 0xffeffffffffffffe, -4503599627370497, 1, x7, 80, x8)

inst_11:
// rs1==x1, rd==x26, rs1_val == 2, 
// opcode: xori ; op1:x1; dest:x26; op1val:2;  immval:-4
TEST_IMM_OP( xori, x26, x1, 0xfffffffffffffffe, 2, -4, x7, 88, x8)

inst_12:
// rs1==x2, rd==x10, rs1_val == 4, imm_val == 1365
// opcode: xori ; op1:x2; dest:x10; op1val:4;  immval:1365
TEST_IMM_OP( xori, x10, x2, 0x551, 4, 1365, x7, 96, x8)

inst_13:
// rs1==x20, rd==x1, rs1_val == 8, 
// opcode: xori ; op1:x20; dest:x1; op1val:8;  immval:-65
TEST_IMM_OP( xori, x1, x20, 0xffffffffffffffb7, 8, -65, x7, 104, x8)

inst_14:
// rs1==x19, rd==x12, rs1_val == 16, 
// opcode: xori ; op1:x19; dest:x12; op1val:16;  immval:2047
TEST_IMM_OP( xori, x12, x19, 0x7ef, 16, 2047, x7, 112, x8)

inst_15:
// rs1==x10, rd==x25, rs1_val == 32, imm_val == -17
// opcode: xori ; op1:x10; dest:x25; op1val:32;  immval:-17
TEST_IMM_OP( xori, x25, x10, 0xffffffffffffffcf, 32, -17, x7, 120, x8)

inst_16:
// rs1==x11, rd==x5, rs1_val == 64, imm_val == 128
// opcode: xori ; op1:x11; dest:x5; op1val:64;  immval:128
TEST_IMM_OP( xori, x5, x11, 0xc0, 64, 128, x7, 128, x8)

inst_17:
// rs1==x3, rd==x6, rs1_val == 128, imm_val == 32
// opcode: xori ; op1:x3; dest:x6; op1val:128;  immval:32
TEST_IMM_OP( xori, x6, x3, 0xa0, 128, 32, x7, 136, x8)

inst_18:
// rs1==x21, rd==x11, rs1_val == 256, imm_val == -9
// opcode: xori ; op1:x21; dest:x11; op1val:256;  immval:-9
TEST_IMM_OP( xori, x11, x21, 0xfffffffffffffef7, 256, -9, x7, 144, x8)

inst_19:
// rs1==x26, rd==x15, rs1_val == 512, imm_val == -33
// opcode: xori ; op1:x26; dest:x15; op1val:512;  immval:-33
TEST_IMM_OP( xori, x15, x26, 0xfffffffffffffddf, 512, -33, x7, 152, x8)

inst_20:
// rs1==x4, rd==x23, rs1_val == 1024, 
// opcode: xori ; op1:x4; dest:x23; op1val:1024;  immval:-17
TEST_IMM_OP( xori, x23, x4, 0xfffffffffffffbef, 1024, -17, x7, 160, x8)

inst_21:
// rs1==x5, rd==x4, rs1_val == 2048, imm_val == -1366
// opcode: xori ; op1:x5; dest:x4; op1val:2048;  immval:-1366
TEST_IMM_OP( xori, x4, x5, 0xfffffffffffff2aa, 2048, -1366, x7, 168, x6)

inst_22:
// rs1==x13, rd==x21, rs1_val == 4096, 
// opcode: xori ; op1:x13; dest:x21; op1val:4096;  immval:-2048
TEST_IMM_OP( xori, x21, x13, 0xffffffffffffe800, 4096, -2048, x7, 176, x6)

inst_23:
// rs1==x29, rd==x30, rs1_val == 8192, 
// opcode: xori ; op1:x29; dest:x30; op1val:8192;  immval:9
TEST_IMM_OP( xori, x30, x29, 0x2009, 8192, 9, x7, 184, x6)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_24:
// rs1==x17, rd==x29, rs1_val == 16384, 
// opcode: xori ; op1:x17; dest:x29; op1val:16384;  immval:-1366
TEST_IMM_OP( xori, x29, x17, 0xffffffffffffbaaa, 16384, -1366, x1, 0, x6)

inst_25:
// rs1==x24, rd==x17, rs1_val == 32768, imm_val == -129
// opcode: xori ; op1:x24; dest:x17; op1val:32768;  immval:-129
TEST_IMM_OP( xori, x17, x24, 0xffffffffffff7f7f, 32768, -129, x1, 8, x6)

inst_26:
// rs1==x25, rd==x7, rs1_val == 65536, 
// opcode: xori ; op1:x25; dest:x7; op1val:65536;  immval:9
TEST_IMM_OP( xori, x7, x25, 0x10009, 65536, 9, x1, 16, x6)

inst_27:
// rs1==x18, rd==x2, rs1_val == 131072, imm_val == -1025
// opcode: xori ; op1:x18; dest:x2; op1val:131072;  immval:-1025
TEST_IMM_OP( xori, x2, x18, 0xfffffffffffdfbff, 131072, -1025, x1, 24, x6)

inst_28:
// rs1==x8, rd==x19, rs1_val == 262144, imm_val == -2
// opcode: xori ; op1:x8; dest:x19; op1val:262144;  immval:-2
TEST_IMM_OP( xori, x19, x8, 0xfffffffffffbfffe, 262144, -2, x1, 32, x6)

inst_29:
// rs1==x7, rd==x3, rs1_val == 524288, 
// opcode: xori ; op1:x7; dest:x3; op1val:524288;  immval:-129
TEST_IMM_OP( xori, x3, x7, 0xfffffffffff7ff7f, 524288, -129, x1, 40, x6)

inst_30:
// rs1==x12, rd==x31, rs1_val == 1048576, 
// opcode: xori ; op1:x12; dest:x31; op1val:1048576;  immval:2047
TEST_IMM_OP( xori, x31, x12, 0x1007ff, 1048576, 2047, x1, 48, x6)

inst_31:
// rs1==x22, rd==x8, rs1_val == 2097152, 
// opcode: xori ; op1:x22; dest:x8; op1val:2097152;  immval:7
TEST_IMM_OP( xori, x8, x22, 0x200007, 2097152, 7, x1, 56, x6)

inst_32:
// rs1_val == 4194304, 
// opcode: xori ; op1:x10; dest:x11; op1val:4194304;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0xffffffffffbffaaa, 4194304, -1366, x1, 64, x6)

inst_33:
// rs1_val == 8388608, 
// opcode: xori ; op1:x10; dest:x11; op1val:8388608;  immval:0
TEST_IMM_OP( xori, x11, x10, 0x800000, 8388608, 0, x1, 72, x6)

inst_34:
// rs1_val == 16777216, 
// opcode: xori ; op1:x10; dest:x11; op1val:16777216;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0xfffffffffefffbff, 16777216, -1025, x1, 80, x6)

inst_35:
// rs1_val == 33554432, 
// opcode: xori ; op1:x10; dest:x11; op1val:33554432;  immval:9
TEST_IMM_OP( xori, x11, x10, 0x2000009, 33554432, 9, x1, 88, x6)

inst_36:
// rs1_val == 67108864, 
// opcode: xori ; op1:x10; dest:x11; op1val:67108864;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0xfffffffffbfffaaa, 67108864, -1366, x1, 96, x6)

inst_37:
// rs1_val == 134217728, 
// opcode: xori ; op1:x10; dest:x11; op1val:134217728;  immval:-17
TEST_IMM_OP( xori, x11, x10, 0xfffffffff7ffffef, 134217728, -17, x1, 104, x6)

inst_38:
// rs1_val == 268435456, 
// opcode: xori ; op1:x10; dest:x11; op1val:268435456;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0xffffffffefffffff, 268435456, -1, x1, 112, x6)

inst_39:
// rs1_val == 536870912, 
// opcode: xori ; op1:x10; dest:x11; op1val:536870912;  immval:-17
TEST_IMM_OP( xori, x11, x10, 0xffffffffdfffffef, 536870912, -17, x1, 120, x6)

inst_40:
// rs1_val == 1073741824, imm_val == -513
// opcode: xori ; op1:x10; dest:x11; op1val:1073741824;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0xffffffffbffffdff, 1073741824, -513, x1, 128, x6)

inst_41:
// rs1_val == 2147483648, 
// opcode: xori ; op1:x10; dest:x11; op1val:2147483648;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0xffffffff7ffffaaa, 2147483648, -1366, x1, 136, x6)

inst_42:
// rs1_val == 4294967296, imm_val == -257
// opcode: xori ; op1:x10; dest:x11; op1val:4294967296;  immval:-257
TEST_IMM_OP( xori, x11, x10, 0xfffffffefffffeff, 4294967296, -257, x1, 144, x6)

inst_43:
// rs1_val == 8589934592, imm_val == -3
// opcode: xori ; op1:x10; dest:x11; op1val:8589934592;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0xfffffffdfffffffd, 8589934592, -3, x1, 152, x6)

inst_44:
// rs1_val == 34359738368, 
// opcode: xori ; op1:x10; dest:x11; op1val:34359738368;  immval:-2
TEST_IMM_OP( xori, x11, x10, 0xfffffff7fffffffe, 34359738368, -2, x1, 160, x6)

inst_45:
// rs1_val == 68719476736, 
// opcode: xori ; op1:x10; dest:x11; op1val:68719476736;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0xffffffeffffffdff, 68719476736, -513, x1, 168, x6)

inst_46:
// rs1_val == 137438953472, 
// opcode: xori ; op1:x10; dest:x11; op1val:137438953472;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0xffffffdffffffaaa, 137438953472, -1366, x1, 176, x6)

inst_47:
// rs1_val == 274877906944, 
// opcode: xori ; op1:x10; dest:x11; op1val:274877906944;  immval:3
TEST_IMM_OP( xori, x11, x10, 0x4000000003, 274877906944, 3, x1, 184, x6)

inst_48:
// rs1_val == 549755813888, 
// opcode: xori ; op1:x10; dest:x11; op1val:549755813888;  immval:-33
TEST_IMM_OP( xori, x11, x10, 0xffffff7fffffffdf, 549755813888, -33, x1, 192, x6)

inst_49:
// rs1_val == 1099511627776, 
// opcode: xori ; op1:x10; dest:x11; op1val:1099511627776;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0xfffffefffffffdff, 1099511627776, -513, x1, 200, x6)

inst_50:
// rs1_val == 2199023255552, 
// opcode: xori ; op1:x10; dest:x11; op1val:2199023255552;  immval:1365
TEST_IMM_OP( xori, x11, x10, 0x20000000555, 2199023255552, 1365, x1, 208, x6)

inst_51:
// rs1_val == 4398046511104, 
// opcode: xori ; op1:x10; dest:x11; op1val:4398046511104;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0xfffffbfffffffffd, 4398046511104, -3, x1, 216, x6)

inst_52:
// rs1_val == 8796093022208, 
// opcode: xori ; op1:x10; dest:x11; op1val:8796093022208;  immval:-9
TEST_IMM_OP( xori, x11, x10, 0xfffff7fffffffff7, 8796093022208, -9, x1, 224, x6)

inst_53:
// rs1_val == 17592186044416, 
// opcode: xori ; op1:x10; dest:x11; op1val:17592186044416;  immval:-6
TEST_IMM_OP( xori, x11, x10, 0xffffeffffffffffa, 17592186044416, -6, x1, 232, x6)

inst_54:
// rs1_val == 35184372088832, 
// opcode: xori ; op1:x10; dest:x11; op1val:35184372088832;  immval:-7
TEST_IMM_OP( xori, x11, x10, 0xffffdffffffffff9, 35184372088832, -7, x1, 240, x6)

inst_55:
// rs1_val == 70368744177664, 
// opcode: xori ; op1:x10; dest:x11; op1val:70368744177664;  immval:3
TEST_IMM_OP( xori, x11, x10, 0x400000000003, 70368744177664, 3, x1, 248, x6)

inst_56:
// rs1_val == 140737488355328, imm_val == 512
// opcode: xori ; op1:x10; dest:x11; op1val:140737488355328;  immval:512
TEST_IMM_OP( xori, x11, x10, 0x800000000200, 140737488355328, 512, x1, 256, x6)

inst_57:
// rs1_val == 281474976710656, 
// opcode: xori ; op1:x10; dest:x11; op1val:281474976710656;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0xfffefffffffffffc, 281474976710656, -4, x1, 264, x6)

inst_58:
// rs1_val == 562949953421312, 
// opcode: xori ; op1:x10; dest:x11; op1val:562949953421312;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0xfffdffffffffffff, 562949953421312, -1, x1, 272, x6)

inst_59:
// rs1_val == 1125899906842624, 
// opcode: xori ; op1:x10; dest:x11; op1val:1125899906842624;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0xfffbffffffffffbf, 1125899906842624, -65, x1, 280, x6)

inst_60:
// rs1_val == 2251799813685248, 
// opcode: xori ; op1:x10; dest:x11; op1val:2251799813685248;  immval:128
TEST_IMM_OP( xori, x11, x10, 0x8000000000080, 2251799813685248, 128, x1, 288, x6)

inst_61:
// rs1_val == 4503599627370496, 
// opcode: xori ; op1:x10; dest:x11; op1val:4503599627370496;  immval:-6
TEST_IMM_OP( xori, x11, x10, 0xffeffffffffffffa, 4503599627370496, -6, x1, 296, x6)

inst_62:
// rs1_val == 9007199254740992, 
// opcode: xori ; op1:x10; dest:x11; op1val:9007199254740992;  immval:9
TEST_IMM_OP( xori, x11, x10, 0x20000000000009, 9007199254740992, 9, x1, 304, x6)

inst_63:
// rs1_val == 18014398509481984, imm_val == 4
// opcode: xori ; op1:x10; dest:x11; op1val:18014398509481984;  immval:4
TEST_IMM_OP( xori, x11, x10, 0x40000000000004, 18014398509481984, 4, x1, 312, x6)

inst_64:
// rs1_val == 36028797018963968, 
// opcode: xori ; op1:x10; dest:x11; op1val:36028797018963968;  immval:5
TEST_IMM_OP( xori, x11, x10, 0x80000000000005, 36028797018963968, 5, x1, 320, x6)

inst_65:
// rs1_val == 72057594037927936, 
// opcode: xori ; op1:x10; dest:x11; op1val:72057594037927936;  immval:-7
TEST_IMM_OP( xori, x11, x10, 0xfefffffffffffff9, 72057594037927936, -7, x1, 328, x6)

inst_66:
// rs1_val == 144115188075855872, imm_val == 1024
// opcode: xori ; op1:x10; dest:x11; op1val:144115188075855872;  immval:1024
TEST_IMM_OP( xori, x11, x10, 0x200000000000400, 144115188075855872, 1024, x1, 336, x6)

inst_67:
// rs1_val == 288230376151711744, 
// opcode: xori ; op1:x10; dest:x11; op1val:288230376151711744;  immval:-7
TEST_IMM_OP( xori, x11, x10, 0xfbfffffffffffff9, 288230376151711744, -7, x1, 344, x6)

inst_68:
// rs1_val == 576460752303423488, 
// opcode: xori ; op1:x10; dest:x11; op1val:576460752303423488;  immval:32
TEST_IMM_OP( xori, x11, x10, 0x800000000000020, 576460752303423488, 32, x1, 352, x6)

inst_69:
// rs1_val == 1152921504606846976, imm_val == 64
// opcode: xori ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:64
TEST_IMM_OP( xori, x11, x10, 0x1000000000000040, 1152921504606846976, 64, x1, 360, x6)

inst_70:
// rs1_val == 2305843009213693952, 
// opcode: xori ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:-257
TEST_IMM_OP( xori, x11, x10, 0xdffffffffffffeff, 2305843009213693952, -257, x1, 368, x6)

inst_71:
// rs1_val == 4611686018427387904, 
// opcode: xori ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0xbffffffffffffffc, 4611686018427387904, -4, x1, 376, x6)

inst_72:
// rs1_val == -2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0x2, -2, -4, x1, 384, x6)

inst_73:
// rs1_val == -3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-3;  immval:1024
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffffbfd, -3, 1024, x1, 392, x6)

inst_74:
// rs1_val == -5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-5;  immval:5
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffffffe, -5, 5, x1, 400, x6)

inst_75:
// rs1_val == -2251799813685249, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2251799813685249;  immval:-2048
TEST_IMM_OP( xori, x11, x10, 0x80000000007ff, -2251799813685249, -2048, x1, 408, x6)

inst_76:
// rs1_val == -9007199254740993, 
// opcode: xori ; op1:x10; dest:x11; op1val:-9007199254740993;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0x20000000000400, -9007199254740993, -1025, x1, 416, x6)

inst_77:
// rs1_val == -18014398509481985, 
// opcode: xori ; op1:x10; dest:x11; op1val:-18014398509481985;  immval:64
TEST_IMM_OP( xori, x11, x10, 0xffbfffffffffffbf, -18014398509481985, 64, x1, 424, x6)

inst_78:
// rs1_val == -36028797018963969, 
// opcode: xori ; op1:x10; dest:x11; op1val:-36028797018963969;  immval:-257
TEST_IMM_OP( xori, x11, x10, 0x80000000000100, -36028797018963969, -257, x1, 432, x6)

inst_79:
// rs1_val == -72057594037927937, 
// opcode: xori ; op1:x10; dest:x11; op1val:-72057594037927937;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xfeffffffffffff7f, -72057594037927937, 128, x1, 440, x6)

inst_80:
// rs1_val == -144115188075855873, 
// opcode: xori ; op1:x10; dest:x11; op1val:-144115188075855873;  immval:7
TEST_IMM_OP( xori, x11, x10, 0xfdfffffffffffff8, -144115188075855873, 7, x1, 448, x6)

inst_81:
// rs1_val == -288230376151711745, 
// opcode: xori ; op1:x10; dest:x11; op1val:-288230376151711745;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xfbfffffffffffffc, -288230376151711745, 3, x1, 456, x6)

inst_82:
// rs1_val == -576460752303423489, 
// opcode: xori ; op1:x10; dest:x11; op1val:-576460752303423489;  immval:-9
TEST_IMM_OP( xori, x11, x10, 0x800000000000008, -576460752303423489, -9, x1, 464, x6)

inst_83:
// rs1_val == -1152921504606846977, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1152921504606846977;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0xeffffffffffffc00, -1152921504606846977, 1023, x1, 472, x6)

inst_84:
// rs1_val == -2305843009213693953, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2305843009213693953;  immval:6
TEST_IMM_OP( xori, x11, x10, 0xdffffffffffffff9, -2305843009213693953, 6, x1, 480, x6)

inst_85:
// rs1_val == -4611686018427387905, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4611686018427387905;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xbffffffffffffdff, -4611686018427387905, 512, x1, 488, x6)

inst_86:
// rs1_val == 6148914691236517205, imm_val == 8
// opcode: xori ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:8
TEST_IMM_OP( xori, x11, x10, 0x555555555555555d, 6148914691236517205, 8, x1, 496, x6)

inst_87:
// rs1_val == -6148914691236517206, 
// opcode: xori ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:1
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaaaaaaaaab, -6148914691236517206, 1, x1, 504, x6)

inst_88:
// imm_val == 2, 
// opcode: xori ; op1:x10; dest:x11; op1val:18014398509481984;  immval:2
TEST_IMM_OP( xori, x11, x10, 0x40000000000002, 18014398509481984, 2, x1, 512, x6)

inst_89:
// imm_val == 256, rs1_val == -1099511627777
// opcode: xori ; op1:x10; dest:x11; op1val:-1099511627777;  immval:256
TEST_IMM_OP( xori, x11, x10, 0xfffffefffffffeff, -1099511627777, 256, x1, 520, x6)

inst_90:
// imm_val == -5, 
// opcode: xori ; op1:x10; dest:x11; op1val:134217728;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0xfffffffff7fffffb, 134217728, -5, x1, 528, x6)

inst_91:
// rs1_val == -9, 
// opcode: xori ; op1:x10; dest:x11; op1val:-9;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0x408, -9, -1025, x1, 536, x6)

inst_92:
// rs1_val == -17, 
// opcode: xori ; op1:x10; dest:x11; op1val:-17;  immval:6
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffffe9, -17, 6, x1, 544, x6)

inst_93:
// rs1_val == -33, 
// opcode: xori ; op1:x10; dest:x11; op1val:-33;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0x22, -33, -3, x1, 552, x6)

inst_94:
// rs1_val == -129, 
// opcode: xori ; op1:x10; dest:x11; op1val:-129;  immval:-7
TEST_IMM_OP( xori, x11, x10, 0x86, -129, -7, x1, 560, x6)

inst_95:
// rs1_val == -257, 
// opcode: xori ; op1:x10; dest:x11; op1val:-257;  immval:8
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffffef7, -257, 8, x1, 568, x6)

inst_96:
// rs1_val == -513, 
// opcode: xori ; op1:x10; dest:x11; op1val:-513;  immval:256
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffffcff, -513, 256, x1, 576, x6)

inst_97:
// rs1_val == -1025, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1025;  immval:7
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffffbf8, -1025, 7, x1, 584, x6)

inst_98:
// rs1_val == -2049, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2049;  immval:2047
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffff000, -2049, 2047, x1, 592, x6)

inst_99:
// rs1_val == -4097, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4097;  immval:-2
TEST_IMM_OP( xori, x11, x10, 0x1001, -4097, -2, x1, 600, x6)

inst_100:
// rs1_val == -8193, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8193;  immval:9
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffdff6, -8193, 9, x1, 608, x6)

inst_101:
// rs1_val == -16385, 
// opcode: xori ; op1:x10; dest:x11; op1val:-16385;  immval:6
TEST_IMM_OP( xori, x11, x10, 0xffffffffffffbff9, -16385, 6, x1, 616, x6)

inst_102:
// rs1_val == -32769, 
// opcode: xori ; op1:x10; dest:x11; op1val:-32769;  immval:64
TEST_IMM_OP( xori, x11, x10, 0xffffffffffff7fbf, -32769, 64, x1, 624, x6)

inst_103:
// rs1_val == -65537, 
// opcode: xori ; op1:x10; dest:x11; op1val:-65537;  immval:5
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffefffa, -65537, 5, x1, 632, x6)

inst_104:
// rs1_val == -131073, 
// opcode: xori ; op1:x10; dest:x11; op1val:-131073;  immval:2
TEST_IMM_OP( xori, x11, x10, 0xfffffffffffdfffd, -131073, 2, x1, 640, x6)

inst_105:
// rs1_val == -262145, 
// opcode: xori ; op1:x10; dest:x11; op1val:-262145;  immval:-6
TEST_IMM_OP( xori, x11, x10, 0x40005, -262145, -6, x1, 648, x6)

inst_106:
// rs1_val == -524289, 
// opcode: xori ; op1:x10; dest:x11; op1val:-524289;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0x80003, -524289, -4, x1, 656, x6)

inst_107:
// rs1_val == -1048577, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1048577;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xffffffffffeffdff, -1048577, 512, x1, 664, x6)

inst_108:
// rs1_val == -2097153, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2097153;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0x200000, -2097153, -1, x1, 672, x6)

inst_109:
// rs1_val == -4194305, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4194305;  immval:7
TEST_IMM_OP( xori, x11, x10, 0xffffffffffbffff8, -4194305, 7, x1, 680, x6)

inst_110:
// rs1_val == -8388609, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8388609;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0x800002, -8388609, -3, x1, 688, x6)

inst_111:
// rs1_val == -16777217, 
// opcode: xori ; op1:x10; dest:x11; op1val:-16777217;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0x1000555, -16777217, -1366, x1, 696, x6)

inst_112:
// rs1_val == -33554433, 
// opcode: xori ; op1:x10; dest:x11; op1val:-33554433;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0x2000002, -33554433, -3, x1, 704, x6)

inst_113:
// rs1_val == -67108865, 
// opcode: xori ; op1:x10; dest:x11; op1val:-67108865;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0x4000555, -67108865, -1366, x1, 712, x6)

inst_114:
// rs1_val == -134217729, 
// opcode: xori ; op1:x10; dest:x11; op1val:-134217729;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xfffffffff7fffffc, -134217729, 3, x1, 720, x6)

inst_115:
// rs1_val == -268435457, 
// opcode: xori ; op1:x10; dest:x11; op1val:-268435457;  immval:-33
TEST_IMM_OP( xori, x11, x10, 0x10000020, -268435457, -33, x1, 728, x6)

inst_116:
// rs1_val == -536870913, 
// opcode: xori ; op1:x10; dest:x11; op1val:-536870913;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0xffffffffdffffc00, -536870913, 1023, x1, 736, x6)

inst_117:
// rs1_val == -1073741825, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1073741825;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0x40000080, -1073741825, -129, x1, 744, x6)

inst_118:
// rs1_val == -2147483649, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2147483649;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0x80000000, -2147483649, -1, x1, 752, x6)

inst_119:
// rs1_val == -4294967297, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4294967297;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0x100000200, -4294967297, -513, x1, 760, x6)

inst_120:
// rs1_val == -8589934593, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8589934593;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0x200000555, -8589934593, -1366, x1, 768, x6)

inst_121:
// rs1_val == -17179869185, 
// opcode: xori ; op1:x10; dest:x11; op1val:-17179869185;  immval:9
TEST_IMM_OP( xori, x11, x10, 0xfffffffbfffffff6, -17179869185, 9, x1, 776, x6)

inst_122:
// rs1_val == -34359738369, 
// opcode: xori ; op1:x10; dest:x11; op1val:-34359738369;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xfffffff7ffffff7f, -34359738369, 128, x1, 784, x6)

inst_123:
// rs1_val == -68719476737, 
// opcode: xori ; op1:x10; dest:x11; op1val:-68719476737;  immval:-10
TEST_IMM_OP( xori, x11, x10, 0x1000000009, -68719476737, -10, x1, 792, x6)

inst_124:
// rs1_val == -137438953473, 
// opcode: xori ; op1:x10; dest:x11; op1val:-137438953473;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xffffffdffffffdff, -137438953473, 512, x1, 800, x6)

inst_125:
// rs1_val == -274877906945, 
// opcode: xori ; op1:x10; dest:x11; op1val:-274877906945;  immval:-2
TEST_IMM_OP( xori, x11, x10, 0x4000000001, -274877906945, -2, x1, 808, x6)

inst_126:
// rs1_val == -549755813889, 
// opcode: xori ; op1:x10; dest:x11; op1val:-549755813889;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0x8000000555, -549755813889, -1366, x1, 816, x6)

inst_127:
// rs1_val == -2199023255553, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2199023255553;  immval:4
TEST_IMM_OP( xori, x11, x10, 0xfffffdfffffffffb, -2199023255553, 4, x1, 824, x6)

inst_128:
// rs1_val == -8796093022209, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8796093022209;  immval:16
TEST_IMM_OP( xori, x11, x10, 0xfffff7ffffffffef, -8796093022209, 16, x1, 832, x6)

inst_129:
// rs1_val == -17592186044417, 
// opcode: xori ; op1:x10; dest:x11; op1val:-17592186044417;  immval:-2048
TEST_IMM_OP( xori, x11, x10, 0x1000000007ff, -17592186044417, -2048, x1, 840, x6)

inst_130:
// rs1_val == -35184372088833, 
// opcode: xori ; op1:x10; dest:x11; op1val:-35184372088833;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xffffdffffffffdff, -35184372088833, 512, x1, 848, x6)

inst_131:
// rs1_val == -70368744177665, 
// opcode: xori ; op1:x10; dest:x11; op1val:-70368744177665;  immval:-8
TEST_IMM_OP( xori, x11, x10, 0x400000000007, -70368744177665, -8, x1, 856, x6)

inst_132:
// rs1_val == -140737488355329, 
// opcode: xori ; op1:x10; dest:x11; op1val:-140737488355329;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xffff7ffffffffdff, -140737488355329, 512, x1, 864, x6)

inst_133:
// rs1_val == -281474976710657, 
// opcode: xori ; op1:x10; dest:x11; op1val:-281474976710657;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0x1000000000003, -281474976710657, -4, x1, 872, x6)

inst_134:
// rs1_val == -562949953421313, 
// opcode: xori ; op1:x10; dest:x11; op1val:-562949953421313;  immval:6
TEST_IMM_OP( xori, x11, x10, 0xfffdfffffffffff9, -562949953421313, 6, x1, 880, x6)

inst_135:
// rs1_val == -1125899906842625, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1125899906842625;  immval:-33
TEST_IMM_OP( xori, x11, x10, 0x4000000000020, -1125899906842625, -33, x1, 888, x6)

inst_136:
// rs1_val == 0, imm_val == 0
// opcode: xori ; op1:x10; dest:x11; op1val:0;  immval:0
TEST_IMM_OP( xori, x11, x10, 0x0, 0, 0, x1, 896, x6)

inst_137:
// rs1_val == 1, 
// opcode: xori ; op1:x10; dest:x11; op1val:1;  immval:0
TEST_IMM_OP( xori, x11, x10, 0x1, 1, 0, x1, 904, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 114*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
