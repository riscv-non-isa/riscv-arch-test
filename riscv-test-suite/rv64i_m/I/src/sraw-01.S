
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Tue Nov 19 02:34:25 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /workspaces/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /workspaces/riscv-arch-test/coverage/i/rv64i.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sraw instruction of the RISC-V RV64 extension for the sraw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",sraw)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x31, rs1_val < 0 and rs2_val == 0, 
// opcode: sraw ; op1:x30; op2:x30; dest:x31; op1val:-0xb504f332;  op2val:-0xb504f332
TEST_RR_OP(sraw, x31, x30, x30, 0x12bec, -0xb504f332, -0xb504f332, x1, 0*XLEN/8, x2)

inst_1:
// rs1 == rd != rs2, rs1==x29, rs2==x31, rd==x29, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, 
// opcode: sraw ; op1:x29; op2:x31; dest:x29; op1val:-0xb504f332;  op2val:0x1f
TEST_RR_OP(sraw, x29, x29, x31, 0x0, -0xb504f332, 0x1f, x1, 1*XLEN/8, x2)

inst_2:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, 
// opcode: sraw ; op1:x28; op2:x28; dest:x28; op1val:-0x8000000000000000;  op2val:-0x8000000000000000
TEST_RR_OP(sraw, x28, x28, x28, 0x0, -0x8000000000000000, -0x8000000000000000, x1, 2*XLEN/8, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen
// opcode: sraw ; op1:x31; op2:x29; dest:x30; op1val:0x7fffffffffffffff;  op2val:0x1f
TEST_RR_OP(sraw, x30, x31, x29, -0x1, 0x7fffffffffffffff, 0x1f, x1, 3*XLEN/8, x2)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x27, rd==x27, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, 
// opcode: sraw ; op1:x26; op2:x27; dest:x27; op1val:0x0;  op2val:0x1f
TEST_RR_OP(sraw, x27, x26, x27, 0x0, 0x0, 0x1f, x1, 4*XLEN/8, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, 
// opcode: sraw ; op1:x27; op2:x25; dest:x26; op1val:0x1;  op2val:0x1f
TEST_RR_OP(sraw, x26, x27, x25, 0x0, 0x1, 0x1f, x1, 5*XLEN/8, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, 
// opcode: sraw ; op1:x24; op2:x26; dest:x25; op1val:0x10;  op2val:0x10
TEST_RR_OP(sraw, x25, x24, x26, 0x0, 0x10, 0x10, x1, 6*XLEN/8, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, rs1_val > 0 and rs2_val == 0, 
// opcode: sraw ; op1:x25; op2:x23; dest:x24; op1val:0xb504f334;  op2val:0x0
TEST_RR_OP(sraw, x24, x25, x23, -0x4afb0ccc, 0xb504f334, 0x0, x1, 7*XLEN/8, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, 
// opcode: sraw ; op1:x22; op2:x24; dest:x23; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x23, x22, x24, 0x0, 0x0, 0x0, x1, 8*XLEN/8, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, 
// opcode: sraw ; op1:x23; op2:x21; dest:x22; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x22, x23, x21, 0x0, 0x0, 0x0, x1, 9*XLEN/8, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, 
// opcode: sraw ; op1:x20; op2:x22; dest:x21; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x21, x20, x22, 0x0, 0x0, 0x0, x1, 10*XLEN/8, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, 
// opcode: sraw ; op1:x21; op2:x19; dest:x20; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x20, x21, x19, 0x0, 0x0, 0x0, x1, 11*XLEN/8, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, 
// opcode: sraw ; op1:x18; op2:x20; dest:x19; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x19, x18, x20, 0x0, 0x0, 0x0, x1, 12*XLEN/8, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, 
// opcode: sraw ; op1:x19; op2:x17; dest:x18; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x18, x19, x17, 0x0, 0x0, 0x0, x1, 13*XLEN/8, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, 
// opcode: sraw ; op1:x16; op2:x18; dest:x17; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x17, x16, x18, 0x0, 0x0, 0x0, x1, 14*XLEN/8, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, 
// opcode: sraw ; op1:x17; op2:x15; dest:x16; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x16, x17, x15, 0x0, 0x0, 0x0, x1, 15*XLEN/8, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, 
// opcode: sraw ; op1:x14; op2:x16; dest:x15; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x15, x14, x16, 0x0, 0x0, 0x0, x1, 16*XLEN/8, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, 
// opcode: sraw ; op1:x15; op2:x13; dest:x14; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x14, x15, x13, 0x0, 0x0, 0x0, x1, 17*XLEN/8, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, 
// opcode: sraw ; op1:x12; op2:x14; dest:x13; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x13, x12, x14, 0x0, 0x0, 0x0, x1, 18*XLEN/8, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, 
// opcode: sraw ; op1:x13; op2:x11; dest:x12; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x12, x13, x11, 0x0, 0x0, 0x0, x1, 19*XLEN/8, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, 
// opcode: sraw ; op1:x10; op2:x12; dest:x11; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x11, x10, x12, 0x0, 0x0, 0x0, x1, 20*XLEN/8, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, 
// opcode: sraw ; op1:x11; op2:x9; dest:x10; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x10, x11, x9, 0x0, 0x0, 0x0, x1, 21*XLEN/8, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, 
// opcode: sraw ; op1:x8; op2:x10; dest:x9; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x9, x8, x10, 0x0, 0x0, 0x0, x1, 22*XLEN/8, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, 
// opcode: sraw ; op1:x9; op2:x7; dest:x8; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x8, x9, x7, 0x0, 0x0, 0x0, x1, 23*XLEN/8, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, 
// opcode: sraw ; op1:x6; op2:x8; dest:x7; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x7, x6, x8, 0x0, 0x0, 0x0, x1, 24*XLEN/8, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x7, rs2==x5, rd==x6, 
// opcode: sraw ; op1:x7; op2:x5; dest:x6; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x6, x7, x5, 0x0, 0x0, 0x0, x8, 0*XLEN/8, x9)

inst_26:
// rs1==x4, rs2==x6, rd==x5, 
// opcode: sraw ; op1:x4; op2:x6; dest:x5; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x5, x4, x6, 0x0, 0x0, 0x0, x8, 1*XLEN/8, x9)

inst_27:
// rs1==x5, rs2==x3, rd==x4, 
// opcode: sraw ; op1:x5; op2:x3; dest:x4; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x4, x5, x3, 0x0, 0x0, 0x0, x8, 2*XLEN/8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3, 
// opcode: sraw ; op1:x2; op2:x4; dest:x3; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x3, x2, x4, 0x0, 0x0, 0x0, x8, 3*XLEN/8, x9)

inst_29:
// rs1==x3, rs2==x1, rd==x2, 
// opcode: sraw ; op1:x3; op2:x1; dest:x2; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x2, x3, x1, 0x0, 0x0, 0x0, x8, 4*XLEN/8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1, 
// opcode: sraw ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x1, x0, x2, 0x0, 0x0, 0x0, x8, 5*XLEN/8, x9)

inst_31:
// rs1==x1, 
// opcode: sraw ; op1:x1; op2:x30; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x31, x1, x30, 0x0, 0x0, 0x0, x8, 6*XLEN/8, x9)

inst_32:
// rs2==x0, 
// opcode: sraw ; op1:x30; op2:x0; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x31, x30, x0, 0x0, 0x0, 0x0, x8, 7*XLEN/8, x9)

inst_33:
// rd==x0, 
// opcode: sraw ; op1:x31; op2:x30; dest:x0; op1val:0x0;  op2val:0x0
TEST_RR_OP(sraw, x0, x31, x30, 0, 0x0, 0x0, x8, 8*XLEN/8, x9)

inst_34:
// rs1_val < 0 and rs2_val == 0, 
// opcode: sraw ; op1:x30; op2:x29; dest:x31; op1val:-0xb504f332;  op2val:0x0
TEST_RR_OP(sraw, x31, x30, x29, 0x4afb0cce, -0xb504f332, 0x0, x8, 9*XLEN/8, x9)

inst_35:
// rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, 
// opcode: sraw ; op1:x30; op2:x29; dest:x31; op1val:-0x8000000000000000;  op2val:0x1f
TEST_RR_OP(sraw, x31, x30, x29, 0x0, -0x8000000000000000, 0x1f, x8, 10*XLEN/8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 25*((XLEN/8)/4),4,0xdeadbeef


signature_x8_0:
    .fill 11*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
