 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Mon Nov  9 11:54:31 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the jalr instruction of the RISC-V I extension for the jalr covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",jalr)

RVTEST_SIGBASE( x13,signature_x13_1)

inst_0:
// rs1 == rd, rs1==x28, rd==x28, imm_val > 0, imm_val == 16
// opcode: jalr; op1:x28; dest:x28; immval:16; align:0 
TEST_JALR_OP(x15, x28, x28, 16, x13, 0,0)

inst_1:
// rs1 != rd, rs1==x11, rd==x4, imm_val < 0, 
// opcode: jalr; op1:x11; dest:x4; immval:-1024; align:0 
TEST_JALR_OP(x15, x4, x11, -1024, x13, 8,0)

inst_2:
// rs1==x23, rd==x11, imm_val == 1, 
// opcode: jalr; op1:x23; dest:x11; immval:1; align:0 
TEST_JALR_OP(x15, x11, x23, 1, x13, 16,0)

inst_3:
// rs1==x18, rd==x7, imm_val == 2, 
// opcode: jalr; op1:x18; dest:x7; immval:2; align:0 
TEST_JALR_OP(x15, x7, x18, 2, x13, 24,0)

inst_4:
// rs1==x27, rd==x16, imm_val == 4, 
// opcode: jalr; op1:x27; dest:x16; immval:4; align:0 
TEST_JALR_OP(x15, x16, x27, 4, x13, 32,0)

inst_5:
// rs1==x8, rd==x29, imm_val == 8, 
// opcode: jalr; op1:x8; dest:x29; immval:8; align:0 
TEST_JALR_OP(x15, x29, x8, 8, x13, 40,0)

inst_6:
// rs1==x5, rd==x30, imm_val == 32, 
// opcode: jalr; op1:x5; dest:x30; immval:32; align:0 
TEST_JALR_OP(x15, x30, x5, 32, x13, 48,0)

inst_7:
// rs1==x24, rd==x26, imm_val == 64, 
// opcode: jalr; op1:x24; dest:x26; immval:64; align:0 
TEST_JALR_OP(x15, x26, x24, 64, x13, 56,0)

inst_8:
// rs1==x4, rd==x12, imm_val == 128, 
// opcode: jalr; op1:x4; dest:x12; immval:128; align:0 
TEST_JALR_OP(x15, x12, x4, 128, x13, 64,0)

inst_9:
// rs1==x2, rd==x6, imm_val == 256, 
// opcode: jalr; op1:x2; dest:x6; immval:256; align:0 
TEST_JALR_OP(x15, x6, x2, 256, x13, 72,0)

inst_10:
// rs1==x29, rd==x21, imm_val == 512, 
// opcode: jalr; op1:x29; dest:x21; immval:512; align:0 
TEST_JALR_OP(x15, x21, x29, 512, x13, 80,0)

inst_11:
// rs1==x20, rd==x3, imm_val == 1024, 
// opcode: jalr; op1:x20; dest:x3; immval:1024; align:0 
TEST_JALR_OP(x15, x3, x20, 1024, x13, 88,0)

inst_12:
// rs1==x22, rd==x5, imm_val == -2048, 
// opcode: jalr; op1:x22; dest:x5; immval:-2048; align:0 
TEST_JALR_OP(x15, x5, x22, -2048, x13, 96,0)

inst_13:
// rs1==x21, rd==x19, imm_val == -2, 
// opcode: jalr; op1:x21; dest:x19; immval:-2; align:0 
TEST_JALR_OP(x15, x19, x21, -2, x13, 104,0)

inst_14:
// rs1==x3, rd==x9, imm_val == -3, 
// opcode: jalr; op1:x3; dest:x9; immval:-3; align:0 
TEST_JALR_OP(x15, x9, x3, -3, x13, 112,0)

inst_15:
// rs1==x17, rd==x2, imm_val == -5, 
// opcode: jalr; op1:x17; dest:x2; immval:-5; align:0 
TEST_JALR_OP(x15, x2, x17, -5, x13, 120,0)

inst_16:
// rs1==x9, rd==x27, imm_val == -9, 
// opcode: jalr; op1:x9; dest:x27; immval:-9; align:0 
TEST_JALR_OP(x15, x27, x9, -9, x13, 128,0)

inst_17:
// rs1==x16, rd==x22, imm_val == -17, 
// opcode: jalr; op1:x16; dest:x22; immval:-17; align:0 
TEST_JALR_OP(x15, x22, x16, -17, x13, 136,0)

inst_18:
// rs1==x10, rd==x14, imm_val == -33, 
// opcode: jalr; op1:x10; dest:x14; immval:-33; align:0 
TEST_JALR_OP(x15, x14, x10, -33, x13, 144,0)

inst_19:
// rs1==x1, rd==x18, imm_val == -65, 
// opcode: jalr; op1:x1; dest:x18; immval:-65; align:0 
TEST_JALR_OP(x15, x18, x1, -65, x13, 152,0)

inst_20:
// rs1==x7, rd==x31, imm_val == -129, 
// opcode: jalr; op1:x7; dest:x31; immval:-129; align:0 
TEST_JALR_OP(x3, x31, x7, -129, x13, 160,0)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_21:
// rs1==x14, rd==x23, imm_val == -257, 
// opcode: jalr; op1:x14; dest:x23; immval:-257; align:0 
TEST_JALR_OP(x3, x23, x14, -257, x2, 0,0)

inst_22:
// rs1==x19, rd==x25, imm_val == -513, 
// opcode: jalr; op1:x19; dest:x25; immval:-513; align:0 
TEST_JALR_OP(x3, x25, x19, -513, x2, 8,0)

inst_23:
// rs1==x6, rd==x20, imm_val == -1025, 
// opcode: jalr; op1:x6; dest:x20; immval:-1025; align:0 
TEST_JALR_OP(x3, x20, x6, -1025, x2, 16,0)

inst_24:
// rs1==x30, rd==x15, imm_val == 2047, 
// opcode: jalr; op1:x30; dest:x15; immval:2047; align:0 
TEST_JALR_OP(x3, x15, x30, 2047, x2, 24,0)

inst_25:
// rs1==x15, rd==x13, imm_val == 1365, 
// opcode: jalr; op1:x15; dest:x13; immval:1365; align:0 
TEST_JALR_OP(x3, x13, x15, 1365, x2, 32,0)

inst_26:
// rs1==x26, rd==x24, imm_val == -1366, 
// opcode: jalr; op1:x26; dest:x24; immval:-1366; align:0 
TEST_JALR_OP(x3, x24, x26, -1366, x2, 40,0)

inst_27:
// rs1==x25, rd==x0, 
// opcode: jalr; op1:x25; dest:x0; immval:-2048; align:0 
TEST_JALR_OP(x3, x0, x25, -2048, x2, 48,0)

inst_28:
// rs1==x13, rd==x17, 
// opcode: jalr; op1:x13; dest:x17; immval:-2048; align:0 
TEST_JALR_OP(x3, x17, x13, -2048, x2, 56,0)

inst_29:
// rs1==x31, rd==x8, 
// opcode: jalr; op1:x31; dest:x8; immval:-2048; align:0 
TEST_JALR_OP(x3, x8, x31, -2048, x2, 64,0)

inst_30:
// rs1==x12, rd==x10, 
// opcode: jalr; op1:x12; dest:x10; immval:-2048; align:0 
TEST_JALR_OP(x3, x10, x12, -2048, x2, 72,0)

inst_31:
// rd==x1, 
// opcode: jalr; op1:x25; dest:x1; immval:-2048; align:0 
TEST_JALR_OP(x3, x1, x25, -2048, x2, 80,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 11*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
