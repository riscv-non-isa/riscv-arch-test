
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",slli)
la x1,signature_x1_1
TEST_IMM_OP( slli, x31, x30, -18446744073709551616, -1, 63, x1, 0, x2)
TEST_IMM_OP( slli, x30, x31, 56713727820156410564931271856155000832, 6148914691236517205, 63, x1, 8, x2)
TEST_IMM_OP( slli, x29, x28, -9223372036854775809, -1, 0, x1, 16, x2)
TEST_IMM_OP( slli, x28, x29, 6148914691236517205, 6148914691236517205, 0, x1, 24, x2)
TEST_IMM_OP( slli, x27, x26, 137438953472, 32, 32, x1, 32, x2)
TEST_IMM_OP( slli, x26, x27, -85070591730234615865843651857942052864, -9223372036854775808, 63, x1, 40, x2)
TEST_IMM_OP( slli, x25, x24, 0, 0, 63, x1, 48, x2)
TEST_IMM_OP( slli, x24, x25, 85070591730234615847396907784232501248, 9223372036854775807, 63, x1, 56, x2)
TEST_IMM_OP( slli, x23, x22, 0, 1, 63, x1, 64, x2)
TEST_IMM_OP( slli, x22, x23, -9223372036854775810, -1, 1, x1, 72, x2)
TEST_IMM_OP( slli, x21, x20, -9223372036854775812, -1, 2, x1, 80, x2)
TEST_IMM_OP( slli, x20, x21, -9223372036854775824, -1, 4, x1, 88, x2)
TEST_IMM_OP( slli, x19, x18, -9223372036854776064, -1, 8, x1, 96, x2)
TEST_IMM_OP( slli, x18, x19, -9223372036854841344, -1, 16, x1, 104, x2)
TEST_IMM_OP( slli, x17, x16, -13835058055282163712, -1, 62, x1, 112, x2)
TEST_IMM_OP( slli, x16, x17, -11529215046068469760, -1, 61, x1, 120, x2)
TEST_IMM_OP( slli, x15, x14, -9799832789158199296, -1, 59, x1, 128, x2)
TEST_IMM_OP( slli, x14, x15, -9259400833873739776, -1, 55, x1, 136, x2)
TEST_IMM_OP( slli, x13, x12, -9223512774343131136, -1, 47, x1, 144, x2)
TEST_IMM_OP( slli, x12, x13, -9223372039002259456, -1, 31, x1, 152, x2)
TEST_IMM_OP( slli, x11, x10, -9223372036856872960, -1, 21, x1, 160, x2)
TEST_IMM_OP( slli, x10, x11, -9223376434901286912, -1, 42, x1, 168, x2)
TEST_IMM_OP( slli, x9, x8, 18446744073709551616, 2, 63, x1, 176, x2)
TEST_IMM_OP( slli, x8, x9, 36893488147419103232, 4, 63, x1, 184, x2)
TEST_IMM_OP( slli, x7, x6, 73786976294838206464, 8, 63, x1, 192, x2)
TEST_IMM_OP( slli, x6, x7, 147573952589676412928, 16, 63, x1, 200, x2)
TEST_IMM_OP( slli, x5, x4, 590295810358705651712, 64, 63, x1, 208, x2)
la x6,signature_x6_0
TEST_IMM_OP( slli, x4, x5, 1180591620717411303424, 128, 63, x6, 0, x7)
TEST_IMM_OP( slli, x3, x2, 2361183241434822606848, 256, 63, x6, 8, x7)
TEST_IMM_OP( slli, x2, x3, 4722366482869645213696, 512, 63, x6, 16, x7)
TEST_IMM_OP( slli, x1, x0, 9444732965739290427392, 1024, 63, x6, 24, x7)
TEST_IMM_OP( slli, x0, x1, 18889465931478580854784, 2048, 63, x6, 32, x7)
TEST_IMM_OP( slli, x31, x31, 37778931862957161709568, 4096, 63, x6, 40, x7)
TEST_IMM_OP( slli, x11, x10, 75557863725914323419136, 8192, 63, x6, 48, x7)
TEST_IMM_OP( slli, x11, x10, 151115727451828646838272, 16384, 63, x6, 56, x7)
TEST_IMM_OP( slli, x11, x10, 302231454903657293676544, 32768, 63, x6, 64, x7)
TEST_IMM_OP( slli, x11, x10, 604462909807314587353088, 65536, 63, x6, 72, x7)
TEST_IMM_OP( slli, x11, x10, 1208925819614629174706176, 131072, 63, x6, 80, x7)
TEST_IMM_OP( slli, x11, x10, 2417851639229258349412352, 262144, 63, x6, 88, x7)
TEST_IMM_OP( slli, x11, x10, 4835703278458516698824704, 524288, 63, x6, 96, x7)
TEST_IMM_OP( slli, x11, x10, 9671406556917033397649408, 1048576, 63, x6, 104, x7)
TEST_IMM_OP( slli, x11, x10, 19342813113834066795298816, 2097152, 63, x6, 112, x7)
TEST_IMM_OP( slli, x11, x10, 38685626227668133590597632, 4194304, 63, x6, 120, x7)
TEST_IMM_OP( slli, x11, x10, 77371252455336267181195264, 8388608, 63, x6, 128, x7)
TEST_IMM_OP( slli, x11, x10, 154742504910672534362390528, 16777216, 63, x6, 136, x7)
TEST_IMM_OP( slli, x11, x10, 309485009821345068724781056, 33554432, 63, x6, 144, x7)
TEST_IMM_OP( slli, x11, x10, 618970019642690137449562112, 67108864, 63, x6, 152, x7)
TEST_IMM_OP( slli, x11, x10, 1237940039285380274899124224, 134217728, 63, x6, 160, x7)
TEST_IMM_OP( slli, x11, x10, 2475880078570760549798248448, 268435456, 63, x6, 168, x7)
TEST_IMM_OP( slli, x11, x10, 4951760157141521099596496896, 536870912, 63, x6, 176, x7)
TEST_IMM_OP( slli, x11, x10, 9903520314283042199192993792, 1073741824, 63, x6, 184, x7)
TEST_IMM_OP( slli, x11, x10, 19807040628566084398385987584, 2147483648, 63, x6, 192, x7)
TEST_IMM_OP( slli, x11, x10, 39614081257132168796771975168, 4294967296, 63, x6, 200, x7)
TEST_IMM_OP( slli, x11, x10, 79228162514264337593543950336, 8589934592, 63, x6, 208, x7)
TEST_IMM_OP( slli, x11, x10, 158456325028528675187087900672, 17179869184, 63, x6, 216, x7)
TEST_IMM_OP( slli, x11, x10, 316912650057057350374175801344, 34359738368, 63, x6, 224, x7)
TEST_IMM_OP( slli, x11, x10, 633825300114114700748351602688, 68719476736, 63, x6, 232, x7)
TEST_IMM_OP( slli, x11, x10, 1267650600228229401496703205376, 137438953472, 63, x6, 240, x7)
TEST_IMM_OP( slli, x11, x10, 2535301200456458802993406410752, 274877906944, 63, x6, 248, x7)
TEST_IMM_OP( slli, x11, x10, 5070602400912917605986812821504, 549755813888, 63, x6, 256, x7)
TEST_IMM_OP( slli, x11, x10, 10141204801825835211973625643008, 1099511627776, 63, x6, 264, x7)
TEST_IMM_OP( slli, x11, x10, 20282409603651670423947251286016, 2199023255552, 63, x6, 272, x7)
TEST_IMM_OP( slli, x11, x10, 40564819207303340847894502572032, 4398046511104, 63, x6, 280, x7)
TEST_IMM_OP( slli, x11, x10, 81129638414606681695789005144064, 8796093022208, 63, x6, 288, x7)
TEST_IMM_OP( slli, x11, x10, 162259276829213363391578010288128, 17592186044416, 63, x6, 296, x7)
TEST_IMM_OP( slli, x11, x10, 324518553658426726783156020576256, 35184372088832, 63, x6, 304, x7)
TEST_IMM_OP( slli, x11, x10, 649037107316853453566312041152512, 70368744177664, 63, x6, 312, x7)
TEST_IMM_OP( slli, x11, x10, 1298074214633706907132624082305024, 140737488355328, 63, x6, 320, x7)
TEST_IMM_OP( slli, x11, x10, 2596148429267413814265248164610048, 281474976710656, 63, x6, 328, x7)
TEST_IMM_OP( slli, x11, x10, 5192296858534827628530496329220096, 562949953421312, 63, x6, 336, x7)
TEST_IMM_OP( slli, x11, x10, 10384593717069655257060992658440192, 1125899906842624, 63, x6, 344, x7)
TEST_IMM_OP( slli, x11, x10, 20769187434139310514121985316880384, 2251799813685248, 63, x6, 352, x7)
TEST_IMM_OP( slli, x11, x10, 41538374868278621028243970633760768, 4503599627370496, 63, x6, 360, x7)
TEST_IMM_OP( slli, x11, x10, 83076749736557242056487941267521536, 9007199254740992, 63, x6, 368, x7)
TEST_IMM_OP( slli, x11, x10, 166153499473114484112975882535043072, 18014398509481984, 63, x6, 376, x7)
TEST_IMM_OP( slli, x11, x10, 332306998946228968225951765070086144, 36028797018963968, 63, x6, 384, x7)
TEST_IMM_OP( slli, x11, x10, 664613997892457936451903530140172288, 72057594037927936, 63, x6, 392, x7)
TEST_IMM_OP( slli, x11, x10, 1329227995784915872903807060280344576, 144115188075855872, 63, x6, 400, x7)
TEST_IMM_OP( slli, x11, x10, 2658455991569831745807614120560689152, 288230376151711744, 63, x6, 408, x7)
TEST_IMM_OP( slli, x11, x10, 5316911983139663491615228241121378304, 576460752303423488, 63, x6, 416, x7)
TEST_IMM_OP( slli, x11, x10, 10633823966279326983230456482242756608, 1152921504606846976, 63, x6, 424, x7)
TEST_IMM_OP( slli, x11, x10, 21267647932558653966460912964485513216, 2305843009213693952, 63, x6, 432, x7)
TEST_IMM_OP( slli, x11, x10, 42535295865117307932921825928971026432, 4611686018427387904, 63, x6, 440, x7)
TEST_IMM_OP( slli, x11, x10, -18446744073709551616, -2, 63, x6, 448, x7)
TEST_IMM_OP( slli, x11, x10, -5070602400931364350060522373120, -549755813889, 63, x6, 456, x7)
TEST_IMM_OP( slli, x11, x10, -10141204801844281956047335194624, -1099511627777, 63, x6, 464, x7)
TEST_IMM_OP( slli, x11, x10, -20282409603670117168020960837632, -2199023255553, 63, x6, 472, x7)
TEST_IMM_OP( slli, x11, x10, -40564819207321787591968212123648, -4398046511105, 63, x6, 480, x7)
TEST_IMM_OP( slli, x11, x10, -81129638414625128439862714695680, -8796093022209, 63, x6, 488, x7)
TEST_IMM_OP( slli, x11, x10, -162259276829231810135651719839744, -17592186044417, 63, x6, 496, x7)
TEST_IMM_OP( slli, x11, x10, -324518553658445173527229730127872, -35184372088833, 63, x6, 504, x7)
TEST_IMM_OP( slli, x11, x10, -649037107316871900310385750704128, -70368744177665, 63, x6, 512, x7)
TEST_IMM_OP( slli, x11, x10, -1298074214633725353876697791856640, -140737488355329, 63, x6, 520, x7)
TEST_IMM_OP( slli, x11, x10, -2596148429267432261009321874161664, -281474976710657, 63, x6, 528, x7)
TEST_IMM_OP( slli, x11, x10, -5192296858534846075274570038771712, -562949953421313, 63, x6, 536, x7)
TEST_IMM_OP( slli, x11, x10, -10384593717069673703805066367991808, -1125899906842625, 63, x6, 544, x7)
TEST_IMM_OP( slli, x11, x10, -20769187434139328960866059026432000, -2251799813685249, 63, x6, 552, x7)
TEST_IMM_OP( slli, x11, x10, -41538374868278639474988044343312384, -4503599627370497, 63, x6, 560, x7)
TEST_IMM_OP( slli, x11, x10, -83076749736557260503232014977073152, -9007199254740993, 63, x6, 568, x7)
TEST_IMM_OP( slli, x11, x10, -166153499473114502559719956244594688, -18014398509481985, 63, x6, 576, x7)
TEST_IMM_OP( slli, x11, x10, -332306998946228986672695838779637760, -36028797018963969, 63, x6, 584, x7)
TEST_IMM_OP( slli, x11, x10, -664613997892457954898647603849723904, -72057594037927937, 63, x6, 592, x7)
TEST_IMM_OP( slli, x11, x10, -1329227995784915891350551133989896192, -144115188075855873, 63, x6, 600, x7)
TEST_IMM_OP( slli, x11, x10, -2658455991569831764254358194270240768, -288230376151711745, 63, x6, 608, x7)
TEST_IMM_OP( slli, x11, x10, -5316911983139663510061972314830929920, -576460752303423489, 63, x6, 616, x7)
TEST_IMM_OP( slli, x11, x10, -10633823966279327001677200555952308224, -1152921504606846977, 63, x6, 624, x7)
TEST_IMM_OP( slli, x11, x10, -21267647932558653984907657038195064832, -2305843009213693953, 63, x6, 632, x7)
TEST_IMM_OP( slli, x11, x10, -42535295865117307951368570002680578048, -4611686018427387905, 63, x6, 640, x7)
TEST_IMM_OP( slli, x11, x10, -56713727820156410583378015929864552448, -6148914691236517206, 63, x6, 648, x7)
TEST_IMM_OP( slli, x11, x10, -36893488147419103232, -3, 63, x6, 656, x7)
TEST_IMM_OP( slli, x11, x10, -55340232221128654848, -5, 63, x6, 664, x7)
TEST_IMM_OP( slli, x11, x10, -92233720368547758080, -9, 63, x6, 672, x7)
TEST_IMM_OP( slli, x11, x10, -166020696663385964544, -17, 63, x6, 680, x7)
TEST_IMM_OP( slli, x11, x10, -313594649253062377472, -33, 63, x6, 688, x7)
TEST_IMM_OP( slli, x11, x10, -608742554432415203328, -65, 63, x6, 696, x7)
TEST_IMM_OP( slli, x11, x10, -1199038364791120855040, -129, 63, x6, 704, x7)
TEST_IMM_OP( slli, x11, x10, -2379629985508532158464, -257, 63, x6, 712, x7)
TEST_IMM_OP( slli, x11, x10, -4740813226943354765312, -513, 63, x6, 720, x7)
TEST_IMM_OP( slli, x11, x10, -9463179709812999979008, -1025, 63, x6, 728, x7)
TEST_IMM_OP( slli, x11, x10, -18907912675552290406400, -2049, 63, x6, 736, x7)
TEST_IMM_OP( slli, x11, x10, -37797378607030871261184, -4097, 63, x6, 744, x7)
TEST_IMM_OP( slli, x11, x10, -75576310469988032970752, -8193, 63, x6, 752, x7)
TEST_IMM_OP( slli, x11, x10, -151134174195902356389888, -16385, 63, x6, 760, x7)
TEST_IMM_OP( slli, x11, x10, -302249901647731003228160, -32769, 63, x6, 768, x7)
TEST_IMM_OP( slli, x11, x10, -604481356551388296904704, -65537, 63, x6, 776, x7)
TEST_IMM_OP( slli, x11, x10, -1208944266358702884257792, -131073, 63, x6, 784, x7)
TEST_IMM_OP( slli, x11, x10, -2417870085973332058963968, -262145, 63, x6, 792, x7)
TEST_IMM_OP( slli, x11, x10, -4835721725202590408376320, -524289, 63, x6, 800, x7)
TEST_IMM_OP( slli, x11, x10, -9671425003661107107201024, -1048577, 63, x6, 808, x7)
TEST_IMM_OP( slli, x11, x10, -19342831560578140504850432, -2097153, 63, x6, 816, x7)
TEST_IMM_OP( slli, x11, x10, -38685644674412207300149248, -4194305, 63, x6, 824, x7)
TEST_IMM_OP( slli, x11, x10, -77371270902080340890746880, -8388609, 63, x6, 832, x7)
TEST_IMM_OP( slli, x11, x10, -154742523357416608071942144, -16777217, 63, x6, 840, x7)
TEST_IMM_OP( slli, x11, x10, -309485028268089142434332672, -33554433, 63, x6, 848, x7)
TEST_IMM_OP( slli, x11, x10, -618970038089434211159113728, -67108865, 63, x6, 856, x7)
TEST_IMM_OP( slli, x11, x10, -1237940057732124348608675840, -134217729, 63, x6, 864, x7)
TEST_IMM_OP( slli, x11, x10, -2475880097017504623507800064, -268435457, 63, x6, 872, x7)
TEST_IMM_OP( slli, x11, x10, -4951760175588265173306048512, -536870913, 63, x6, 880, x7)
TEST_IMM_OP( slli, x11, x10, -9903520332729786272902545408, -1073741825, 63, x6, 888, x7)
TEST_IMM_OP( slli, x11, x10, -19807040647012828472095539200, -2147483649, 63, x6, 896, x7)
TEST_IMM_OP( slli, x11, x10, -39614081275578912870481526784, -4294967297, 63, x6, 904, x7)
TEST_IMM_OP( slli, x11, x10, -79228162532711081667253501952, -8589934593, 63, x6, 912, x7)
TEST_IMM_OP( slli, x11, x10, -158456325046975419260797452288, -17179869185, 63, x6, 920, x7)
TEST_IMM_OP( slli, x11, x10, -316912650075504094447885352960, -34359738369, 63, x6, 928, x7)
TEST_IMM_OP( slli, x11, x10, -633825300132561444822061154304, -68719476737, 63, x6, 936, x7)
TEST_IMM_OP( slli, x11, x10, -1267650600246676145570412756992, -137438953473, 63, x6, 944, x7)
TEST_IMM_OP( slli, x11, x10, -2535301200474905547067115962368, -274877906945, 63, x6, 952, x7)
TEST_IMM_OP( slli, x11, x10, 9444732965739290427392, 1024, 63, x6, 960, x7)
TEST_IMM_OP( slli, x11, x10, 18889465931478580854784, 2048, 63, x6, 968, x7)
TEST_IMM_OP( slli, x11, x10, 37778931862957161709568, 4096, 63, x6, 976, x7)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 27*(XLEN/32),4,0xafacadee


signature_x6_0:
    .fill 123*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
