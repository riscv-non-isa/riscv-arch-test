 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Mon Nov  9 11:54:31 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sub instruction of the RISC-V I extension for the sub covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sub)

RVTEST_SIGBASE( x13,signature_x13_1)

inst_0:
// rs2 == rd != rs1, rs1==x12, rs2==x29, rd==x29, rs1_val == (-2**(xlen-1)), rs2_val == 8192, rs1_val < 0 and rs2_val > 0, rs1_val == -9223372036854775808, rs1_val != rs2_val
// opcode: sub ; op1:x12; op2:x29; dest:x29; op1val:-9223372036854775808;  op2val:8192
TEST_RR_OP(sub, x29, x12, x29, 0x7fffffffffffe000, -9223372036854775808, 8192, x13, 0, x8)

inst_1:
// rs1 == rd != rs2, rs1==x6, rs2==x0, rd==x6, rs1_val == 0, rs2_val == 8589934592
// opcode: sub ; op1:x6; op2:x0; dest:x6; op1val:0;  op2val:8589934592
TEST_RR_OP(sub, x6, x6, x0, 0xfffffffe00000000, 0, 8589934592, x13, 8, x8)

inst_2:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val < 0, rs2_val == -1152921504606846977, rs1_val == 9223372036854775807
// opcode: sub ; op1:x5; op2:x5; dest:x5; op1val:9223372036854775807;  op2val:-1152921504606846977
TEST_RR_OP(sub, x5, x5, x5, 0x9000000000000000, 9223372036854775807, -1152921504606846977, x13, 16, x8)

inst_3:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x26, rs1_val == 1, rs1_val > 0 and rs2_val > 0, rs2_val == 2251799813685248
// opcode: sub ; op1:x9; op2:x9; dest:x26; op1val:1;  op2val:2251799813685248
TEST_RR_OP(sub, x26, x9, x9, 0xfff8000000000001, 1, 2251799813685248, x13, 24, x8)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x26, rd==x27, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, rs1_val == 8589934592
// opcode: sub ; op1:x17; op2:x26; dest:x27; op1val:8589934592;  op2val:-9223372036854775808
TEST_RR_OP(sub, x27, x17, x26, 0x8000000200000000, 8589934592, -9223372036854775808, x13, 32, x8)

inst_5:
// rs1==x4, rs2==x20, rd==x18, rs2_val == 0, rs1_val == 4
// opcode: sub ; op1:x4; op2:x20; dest:x18; op1val:4;  op2val:0
TEST_RR_OP(sub, x18, x4, x20, 0x4, 4, 0, x13, 40, x8)

inst_6:
// rs1==x24, rs2==x27, rd==x30, rs2_val == (2**(xlen-1)-1), rs1_val == 70368744177664, rs2_val == 9223372036854775807
// opcode: sub ; op1:x24; op2:x27; dest:x30; op1val:70368744177664;  op2val:9223372036854775807
TEST_RR_OP(sub, x30, x24, x27, 0x8000400000000001, 70368744177664, 9223372036854775807, x13, 48, x8)

inst_7:
// rs1==x10, rs2==x16, rd==x1, rs2_val == 1, rs1_val == -4398046511105
// opcode: sub ; op1:x10; op2:x16; dest:x1; op1val:-4398046511105;  op2val:1
TEST_RR_OP(sub, x1, x10, x16, 0xfffffbfffffffffe, -4398046511105, 1, x13, 56, x8)

inst_8:
// rs1==x20, rs2==x12, rd==x21, rs1_val < 0 and rs2_val < 0, rs2_val == -8388609
// opcode: sub ; op1:x20; op2:x12; dest:x21; op1val:-7;  op2val:-8388609
TEST_RR_OP(sub, x21, x20, x12, 0x7ffffa, -7, -8388609, x13, 64, x8)

inst_9:
// rs1==x14, rs2==x18, rd==x20, rs1_val == rs2_val, rs1_val == -1048577, rs2_val == -1048577
// opcode: sub ; op1:x14; op2:x18; dest:x20; op1val:-1048577;  op2val:-1048577
TEST_RR_OP(sub, x20, x14, x18, 0x0, -1048577, -1048577, x13, 72, x8)

inst_10:
// rs1==x26, rs2==x3, rd==x25, rs1_val == 2, rs2_val == -140737488355329
// opcode: sub ; op1:x26; op2:x3; dest:x25; op1val:2;  op2val:-140737488355329
TEST_RR_OP(sub, x25, x26, x3, 0x800000000003, 2, -140737488355329, x13, 80, x8)

inst_11:
// rs1==x11, rs2==x7, rd==x2, rs1_val == 8, rs2_val == -70368744177665
// opcode: sub ; op1:x11; op2:x7; dest:x2; op1val:8;  op2val:-70368744177665
TEST_RR_OP(sub, x2, x11, x7, 0x400000000009, 8, -70368744177665, x13, 88, x8)

inst_12:
// rs1==x27, rs2==x25, rd==x0, rs1_val == 16, rs2_val == -4398046511105
// opcode: sub ; op1:x27; op2:x25; dest:x0; op1val:16;  op2val:-4398046511105
TEST_RR_OP(sub, x0, x27, x25, 0x40000000011, 16, -4398046511105, x13, 96, x8)

inst_13:
// rs1==x3, rs2==x17, rd==x15, rs1_val == 32, rs2_val == 72057594037927936
// opcode: sub ; op1:x3; op2:x17; dest:x15; op1val:32;  op2val:72057594037927936
TEST_RR_OP(sub, x15, x3, x17, 0xff00000000000020, 32, 72057594037927936, x13, 104, x8)

inst_14:
// rs1==x31, rs2==x15, rd==x28, rs1_val == 64, rs2_val == -16385
// opcode: sub ; op1:x31; op2:x15; dest:x28; op1val:64;  op2val:-16385
TEST_RR_OP(sub, x28, x31, x15, 0x4041, 64, -16385, x13, 112, x8)

inst_15:
// rs1==x21, rs2==x30, rd==x23, rs1_val == 128, rs2_val == 140737488355328
// opcode: sub ; op1:x21; op2:x30; dest:x23; op1val:128;  op2val:140737488355328
TEST_RR_OP(sub, x23, x21, x30, 0xffff800000000080, 128, 140737488355328, x13, 120, x8)

inst_16:
// rs1==x23, rs2==x8, rd==x3, rs1_val == 256, rs2_val == 512
// opcode: sub ; op1:x23; op2:x8; dest:x3; op1val:256;  op2val:512
TEST_RR_OP(sub, x3, x23, x8, 0xffffffffffffff00, 256, 512, x13, 128, x5)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_17:
// rs1==x7, rs2==x24, rd==x31, rs1_val == 512, rs2_val == -257
// opcode: sub ; op1:x7; op2:x24; dest:x31; op1val:512;  op2val:-257
TEST_RR_OP(sub, x31, x7, x24, 0x301, 512, -257, x3, 0, x5)

inst_18:
// rs1==x19, rs2==x13, rd==x4, rs1_val == 1024, rs2_val == 137438953472
// opcode: sub ; op1:x19; op2:x13; dest:x4; op1val:1024;  op2val:137438953472
TEST_RR_OP(sub, x4, x19, x13, 0xffffffe000000400, 1024, 137438953472, x3, 8, x5)

inst_19:
// rs1==x18, rs2==x31, rd==x8, rs1_val == 2048, 
// opcode: sub ; op1:x18; op2:x31; dest:x8; op1val:2048;  op2val:6
TEST_RR_OP(sub, x8, x18, x31, 0x7fa, 2048, 6, x3, 16, x5)

inst_20:
// rs1==x0, rs2==x6, rd==x16, rs1_val == 4096, 
// opcode: sub ; op1:x0; op2:x6; dest:x16; op1val:4096;  op2val:-8
TEST_RR_OP(sub, x16, x0, x6, 0x1008, 4096, -8, x3, 24, x5)

inst_21:
// rs1==x25, rs2==x11, rd==x24, rs1_val == 8192, 
// opcode: sub ; op1:x25; op2:x11; dest:x24; op1val:8192;  op2val:8589934592
TEST_RR_OP(sub, x24, x25, x11, 0xfffffffe00002000, 8192, 8589934592, x3, 32, x5)

inst_22:
// rs1==x8, rs2==x28, rd==x19, rs1_val == 16384, rs2_val == 18014398509481984
// opcode: sub ; op1:x8; op2:x28; dest:x19; op1val:16384;  op2val:18014398509481984
TEST_RR_OP(sub, x19, x8, x28, 0xffc0000000004000, 16384, 18014398509481984, x3, 40, x5)

inst_23:
// rs1==x15, rs2==x21, rd==x22, rs1_val == 32768, rs2_val == 256
// opcode: sub ; op1:x15; op2:x21; dest:x22; op1val:32768;  op2val:256
TEST_RR_OP(sub, x22, x15, x21, 0x7f00, 32768, 256, x3, 48, x5)

inst_24:
// rs1==x16, rs2==x1, rd==x11, rs1_val == 65536, 
// opcode: sub ; op1:x16; op2:x1; dest:x11; op1val:65536;  op2val:9223372036854775807
TEST_RR_OP(sub, x11, x16, x1, 0x8000000000010001, 65536, 9223372036854775807, x3, 56, x5)

inst_25:
// rs1==x30, rs2==x23, rd==x9, rs1_val == 131072, rs2_val == 34359738368
// opcode: sub ; op1:x30; op2:x23; dest:x9; op1val:131072;  op2val:34359738368
TEST_RR_OP(sub, x9, x30, x23, 0xfffffff800020000, 131072, 34359738368, x3, 64, x5)

inst_26:
// rs1==x1, rs2==x2, rd==x17, rs1_val == 262144, rs2_val == -2251799813685249
// opcode: sub ; op1:x1; op2:x2; dest:x17; op1val:262144;  op2val:-2251799813685249
TEST_RR_OP(sub, x17, x1, x2, 0x8000000040001, 262144, -2251799813685249, x3, 72, x5)

inst_27:
// rs1==x29, rs2==x22, rd==x7, rs1_val == 524288, rs2_val == -35184372088833
// opcode: sub ; op1:x29; op2:x22; dest:x7; op1val:524288;  op2val:-35184372088833
TEST_RR_OP(sub, x7, x29, x22, 0x200000080001, 524288, -35184372088833, x3, 80, x5)

inst_28:
// rs1==x13, rs2==x4, rd==x10, rs1_val == 1048576, 
// opcode: sub ; op1:x13; op2:x4; dest:x10; op1val:1048576;  op2val:2251799813685248
TEST_RR_OP(sub, x10, x13, x4, 0xfff8000000100000, 1048576, 2251799813685248, x3, 88, x5)

inst_29:
// rs1==x2, rs2==x14, rd==x12, rs1_val == 2097152, rs2_val == -34359738369
// opcode: sub ; op1:x2; op2:x14; dest:x12; op1val:2097152;  op2val:-34359738369
TEST_RR_OP(sub, x12, x2, x14, 0x800200001, 2097152, -34359738369, x3, 96, x5)

inst_30:
// rs1==x28, rs2==x10, rd==x13, rs1_val == 4194304, rs2_val == 2147483648
// opcode: sub ; op1:x28; op2:x10; dest:x13; op1val:4194304;  op2val:2147483648
TEST_RR_OP(sub, x13, x28, x10, 0xffffffff80400000, 4194304, 2147483648, x3, 104, x5)

inst_31:
// rs1==x22, rs2==x19, rd==x14, rs1_val == 8388608, 
// opcode: sub ; op1:x22; op2:x19; dest:x14; op1val:8388608;  op2val:7
TEST_RR_OP(sub, x14, x22, x19, 0x7ffff9, 8388608, 7, x3, 112, x5)

inst_32:
// rs1_val == 16777216, rs2_val == -2305843009213693953
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:-2305843009213693953
TEST_RR_OP(sub, x12, x10, x11, 0x2000000001000001, 16777216, -2305843009213693953, x3, 120, x5)

inst_33:
// rs1_val == 33554432, rs2_val == -3
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:-3
TEST_RR_OP(sub, x12, x10, x11, 0x2000003, 33554432, -3, x3, 128, x5)

inst_34:
// rs1_val == 67108864, rs2_val == 562949953421312
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:562949953421312
TEST_RR_OP(sub, x12, x10, x11, 0xfffe000004000000, 67108864, 562949953421312, x3, 136, x5)

inst_35:
// rs1_val == 134217728, rs2_val == -262145
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-262145
TEST_RR_OP(sub, x12, x10, x11, 0x8040001, 134217728, -262145, x3, 144, x5)

inst_36:
// rs1_val == 268435456, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:-2251799813685249
TEST_RR_OP(sub, x12, x10, x11, 0x8000010000001, 268435456, -2251799813685249, x3, 152, x5)

inst_37:
// rs1_val == 536870912, rs2_val == 2
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x1ffffffe, 536870912, 2, x3, 160, x5)

inst_38:
// rs1_val == 1073741824, rs2_val == -33
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-33
TEST_RR_OP(sub, x12, x10, x11, 0x40000021, 1073741824, -33, x3, 168, x5)

inst_39:
// rs1_val == 2147483648, rs2_val == -536870913
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:-536870913
TEST_RR_OP(sub, x12, x10, x11, 0xa0000001, 2147483648, -536870913, x3, 176, x5)

inst_40:
// rs1_val == 4294967296, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-262145
TEST_RR_OP(sub, x12, x10, x11, 0x100040001, 4294967296, -262145, x3, 184, x5)

inst_41:
// rs1_val == 17179869184, rs2_val == 1152921504606846976
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:1152921504606846976
TEST_RR_OP(sub, x12, x10, x11, 0xf000000400000000, 17179869184, 1152921504606846976, x3, 192, x5)

inst_42:
// rs1_val == 34359738368, rs2_val == 536870912
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:536870912
TEST_RR_OP(sub, x12, x10, x11, 0x7e0000000, 34359738368, 536870912, x3, 200, x5)

inst_43:
// rs1_val == 68719476736, rs2_val == -65
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:-65
TEST_RR_OP(sub, x12, x10, x11, 0x1000000041, 68719476736, -65, x3, 208, x5)

inst_44:
// rs1_val == 137438953472, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:140737488355328
TEST_RR_OP(sub, x12, x10, x11, 0xffff802000000000, 137438953472, 140737488355328, x3, 216, x5)

inst_45:
// rs1_val == 274877906944, rs2_val == -2049
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:-2049
TEST_RR_OP(sub, x12, x10, x11, 0x4000000801, 274877906944, -2049, x3, 224, x5)

inst_46:
// rs1_val == 549755813888, rs2_val == 576460752303423488
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:576460752303423488
TEST_RR_OP(sub, x12, x10, x11, 0xf800008000000000, 549755813888, 576460752303423488, x3, 232, x5)

inst_47:
// rs1_val == 1099511627776, rs2_val == 35184372088832
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:35184372088832
TEST_RR_OP(sub, x12, x10, x11, 0xffffe10000000000, 1099511627776, 35184372088832, x3, 240, x5)

inst_48:
// rs1_val == 2199023255552, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x20000000000, 2199023255552, 0, x3, 248, x5)

inst_49:
// rs1_val == 4398046511104, rs2_val == -68719476737
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-68719476737
TEST_RR_OP(sub, x12, x10, x11, 0x41000000001, 4398046511104, -68719476737, x3, 256, x5)

inst_50:
// rs1_val == 8796093022208, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:-2251799813685249
TEST_RR_OP(sub, x12, x10, x11, 0x8080000000001, 8796093022208, -2251799813685249, x3, 264, x5)

inst_51:
// rs1_val == 17592186044416, rs2_val == 1099511627776
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:1099511627776
TEST_RR_OP(sub, x12, x10, x11, 0xf0000000000, 17592186044416, 1099511627776, x3, 272, x5)

inst_52:
// rs1_val == 35184372088832, rs2_val == -9
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:-9
TEST_RR_OP(sub, x12, x10, x11, 0x200000000009, 35184372088832, -9, x3, 280, x5)

inst_53:
// rs1_val == 140737488355328, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:7
TEST_RR_OP(sub, x12, x10, x11, 0x7ffffffffff9, 140737488355328, 7, x3, 288, x5)

inst_54:
// rs1_val == 281474976710656, rs2_val == -36028797018963969
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:-36028797018963969
TEST_RR_OP(sub, x12, x10, x11, 0x81000000000001, 281474976710656, -36028797018963969, x3, 296, x5)

inst_55:
// rs1_val == 562949953421312, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:8589934592
TEST_RR_OP(sub, x12, x10, x11, 0x1fffe00000000, 562949953421312, 8589934592, x3, 304, x5)

inst_56:
// rs1_val == 1125899906842624, rs2_val == -18014398509481985
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:-18014398509481985
TEST_RR_OP(sub, x12, x10, x11, 0x44000000000001, 1125899906842624, -18014398509481985, x3, 312, x5)

inst_57:
// rs1_val == 2251799813685248, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:-33
TEST_RR_OP(sub, x12, x10, x11, 0x8000000000021, 2251799813685248, -33, x3, 320, x5)

inst_58:
// rs1_val == 4503599627370496, rs2_val == -2147483649
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:-2147483649
TEST_RR_OP(sub, x12, x10, x11, 0x10000080000001, 4503599627370496, -2147483649, x3, 328, x5)

inst_59:
// rs1_val == 9007199254740992, rs2_val == -65537
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:-65537
TEST_RR_OP(sub, x12, x10, x11, 0x20000000010001, 9007199254740992, -65537, x3, 336, x5)

inst_60:
// rs1_val == 18014398509481984, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-65
TEST_RR_OP(sub, x12, x10, x11, 0x40000000000041, 18014398509481984, -65, x3, 344, x5)

inst_61:
// rs1_val == 36028797018963968, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:562949953421312
TEST_RR_OP(sub, x12, x10, x11, 0x7e000000000000, 36028797018963968, 562949953421312, x3, 352, x5)

inst_62:
// rs1_val == 72057594037927936, rs2_val == -137438953473
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-137438953473
TEST_RR_OP(sub, x12, x10, x11, 0x100002000000001, 72057594037927936, -137438953473, x3, 360, x5)

inst_63:
// rs1_val == 144115188075855872, rs2_val == 9007199254740992
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:9007199254740992
TEST_RR_OP(sub, x12, x10, x11, 0x1e0000000000000, 144115188075855872, 9007199254740992, x3, 368, x5)

inst_64:
// rs1_val == 288230376151711744, rs2_val == 4096
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:4096
TEST_RR_OP(sub, x12, x10, x11, 0x3fffffffffff000, 288230376151711744, 4096, x3, 376, x5)

inst_65:
// rs1_val == 576460752303423488, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-65537
TEST_RR_OP(sub, x12, x10, x11, 0x800000000010001, 576460752303423488, -65537, x3, 384, x5)

inst_66:
// rs1_val == 1152921504606846976, rs2_val == -4194305
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:-4194305
TEST_RR_OP(sub, x12, x10, x11, 0x1000000000400001, 1152921504606846976, -4194305, x3, 392, x5)

inst_67:
// rs1_val == 2305843009213693952, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-70368744177665
TEST_RR_OP(sub, x12, x10, x11, 0x2000400000000001, 2305843009213693952, -70368744177665, x3, 400, x5)

inst_68:
// rs1_val == 4611686018427387904, rs2_val == 70368744177664
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:70368744177664
TEST_RR_OP(sub, x12, x10, x11, 0x3fffc00000000000, 4611686018427387904, 70368744177664, x3, 408, x5)

inst_69:
// rs1_val == -2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-536870913
TEST_RR_OP(sub, x12, x10, x11, 0x1fffffff, -2, -536870913, x3, 416, x5)

inst_70:
// rs1_val == -3, rs2_val == -16777217
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-16777217
TEST_RR_OP(sub, x12, x10, x11, 0xfffffe, -3, -16777217, x3, 424, x5)

inst_71:
// rs1_val == -5, rs2_val == -9007199254740993
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-9007199254740993
TEST_RR_OP(sub, x12, x10, x11, 0x1ffffffffffffc, -5, -9007199254740993, x3, 432, x5)

inst_72:
// rs1_val == -9, rs2_val == -281474976710657
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-281474976710657
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffff8, -9, -281474976710657, x3, 440, x5)

inst_73:
// rs1_val == -17, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-68719476737
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff0, -17, -68719476737, x3, 448, x5)

inst_74:
// rs1_val == -33, rs2_val == -2199023255553
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:-2199023255553
TEST_RR_OP(sub, x12, x10, x11, 0x1ffffffffe0, -33, -2199023255553, x3, 456, x5)

inst_75:
// rs1_val == -65, rs2_val == 1125899906842624
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:1125899906842624
TEST_RR_OP(sub, x12, x10, x11, 0xfffbffffffffffbf, -65, 1125899906842624, x3, 464, x5)

inst_76:
// rs1_val == -129, rs2_val == 134217728
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:134217728
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffff7ffff7f, -129, 134217728, x3, 472, x5)

inst_77:
// rs1_val == -257, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:-1048577
TEST_RR_OP(sub, x12, x10, x11, 0xfff00, -257, -1048577, x3, 480, x5)

inst_78:
// rs1_val == -513, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-1
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffe00, -513, -1, x3, 488, x5)

inst_79:
// rs2_val == -1125899906842625, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8;  op2val:-1125899906842625
TEST_RR_OP(sub, x12, x10, x11, 0x3fffffffffff9, -8, -1125899906842625, x3, 496, x5)

inst_80:
// rs2_val == -4503599627370497, rs1_val == -2097153
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-4503599627370497
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe00000, -2097153, -4503599627370497, x3, 504, x5)

inst_81:
// rs2_val == -72057594037927937, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-72057594037927937
TEST_RR_OP(sub, x12, x10, x11, 0x100000100000001, 4294967296, -72057594037927937, x3, 512, x5)

inst_82:
// rs2_val == -144115188075855873, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-144115188075855873
TEST_RR_OP(sub, x12, x10, x11, 0x1fffffffffffffc, -5, -144115188075855873, x3, 520, x5)

inst_83:
// rs2_val == -288230376151711745, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-288230376151711745
TEST_RR_OP(sub, x12, x10, x11, 0xc00000000000001, 576460752303423488, -288230376151711745, x3, 528, x5)

inst_84:
// rs2_val == -576460752303423489, rs1_val == -4097
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:-576460752303423489
TEST_RR_OP(sub, x12, x10, x11, 0x7fffffffffff000, -4097, -576460752303423489, x3, 536, x5)

inst_85:
// rs2_val == -4611686018427387905, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:-4611686018427387905
TEST_RR_OP(sub, x12, x10, x11, 0x3ffffc0000000000, -4398046511105, -4611686018427387905, x3, 544, x5)

inst_86:
// rs2_val == 6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaab2ab, 2048, 6148914691236517205, x3, 552, x5)

inst_87:
// rs2_val == -6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555555d, 7, -6148914691236517206, x3, 560, x5)

inst_88:
// rs1_val == -1025, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:-9223372036854775808
TEST_RR_OP(sub, x12, x10, x11, 0x7ffffffffffffbff, -1025, -9223372036854775808, x3, 568, x5)

inst_89:
// rs1_val == -2049, rs2_val == -33554433
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:-33554433
TEST_RR_OP(sub, x12, x10, x11, 0x1fff800, -2049, -33554433, x3, 576, x5)

inst_90:
// rs1_val == -8193, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-137438953473
TEST_RR_OP(sub, x12, x10, x11, 0x1fffffe000, -8193, -137438953473, x3, 584, x5)

inst_91:
// rs1_val == -16385, rs2_val == -268435457
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:-268435457
TEST_RR_OP(sub, x12, x10, x11, 0xfffc000, -16385, -268435457, x3, 592, x5)

inst_92:
// rs1_val == -32769, rs2_val == -32769
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:-32769
TEST_RR_OP(sub, x12, x10, x11, 0x0, -32769, -32769, x3, 600, x5)

inst_93:
// rs1_val == -65537, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-2199023255553
TEST_RR_OP(sub, x12, x10, x11, 0x1ffffff0000, -65537, -2199023255553, x3, 608, x5)

inst_94:
// rs1_val == -131073, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:-6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffe0005, -131073, -6, x3, 616, x5)

inst_95:
// rs1_val == -262145, rs2_val == 2097152
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:2097152
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffdbffff, -262145, 2097152, x3, 624, x5)

inst_96:
// rs1_val == -524289, rs2_val == 64
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:64
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffff7ffbf, -524289, 64, x3, 632, x5)

inst_97:
// rs1_val == -4194305, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:2147483648
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff7fbfffff, -4194305, 2147483648, x3, 640, x5)

inst_98:
// rs1_val == -8388609, rs2_val == -131073
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:-131073
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffff820000, -8388609, -131073, x3, 648, x5)

inst_99:
// rs1_val == -16777217, rs2_val == 8
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:8
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffefffff7, -16777217, 8, x3, 656, x5)

inst_100:
// rs1_val == -33554433, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:1125899906842624
TEST_RR_OP(sub, x12, x10, x11, 0xfffbfffffdffffff, -33554433, 1125899906842624, x3, 664, x5)

inst_101:
// rs1_val == -67108865, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffbfffff9, -67108865, 6, x3, 672, x5)

inst_102:
// rs1_val == -134217729, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:8
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffff7fffff7, -134217729, 8, x3, 680, x5)

inst_103:
// rs1_val == -268435457, rs2_val == 144115188075855872
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:144115188075855872
TEST_RR_OP(sub, x12, x10, x11, 0xfdffffffefffffff, -268435457, 144115188075855872, x3, 688, x5)

inst_104:
// rs1_val == -536870913, rs2_val == -524289
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:-524289
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffe0080000, -536870913, -524289, x3, 696, x5)

inst_105:
// rs1_val == -1073741825, rs2_val == 2048
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:2048
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffbffff7ff, -1073741825, 2048, x3, 704, x5)

inst_106:
// rs1_val == -2147483649, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:-33554433
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff82000000, -2147483649, -33554433, x3, 712, x5)

inst_107:
// rs1_val == -4294967297, rs2_val == 32
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:32
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffeffffffdf, -4294967297, 32, x3, 720, x5)

inst_108:
// rs1_val == -8589934593, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-140737488355329
TEST_RR_OP(sub, x12, x10, x11, 0x7ffe00000000, -8589934593, -140737488355329, x3, 728, x5)

inst_109:
// rs1_val == -17179869185, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:-4398046511105
TEST_RR_OP(sub, x12, x10, x11, 0x3fc00000000, -17179869185, -4398046511105, x3, 736, x5)

inst_110:
// rs1_val == -34359738369, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:2048
TEST_RR_OP(sub, x12, x10, x11, 0xfffffff7fffff7ff, -34359738369, 2048, x3, 744, x5)

inst_111:
// rs1_val == -68719476737, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:-65537
TEST_RR_OP(sub, x12, x10, x11, 0xfffffff000010000, -68719476737, -65537, x3, 752, x5)

inst_112:
// rs1_val == -137438953473, rs2_val == 262144
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:262144
TEST_RR_OP(sub, x12, x10, x11, 0xffffffdffffbffff, -137438953473, 262144, x3, 760, x5)

inst_113:
// rs1_val == -274877906945, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:1
TEST_RR_OP(sub, x12, x10, x11, 0xffffffbffffffffe, -274877906945, 1, x3, 768, x5)

inst_114:
// rs1_val == -549755813889, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:576460752303423488
TEST_RR_OP(sub, x12, x10, x11, 0xf7ffff7fffffffff, -549755813889, 576460752303423488, x3, 776, x5)

inst_115:
// rs1_val == -1099511627777, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:1
TEST_RR_OP(sub, x12, x10, x11, 0xfffffefffffffffe, -1099511627777, 1, x3, 784, x5)

inst_116:
// rs1_val == -2199023255553, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:-1125899906842625
TEST_RR_OP(sub, x12, x10, x11, 0x3fe0000000000, -2199023255553, -1125899906842625, x3, 792, x5)

inst_117:
// rs1_val == -8796093022209, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:576460752303423488
TEST_RR_OP(sub, x12, x10, x11, 0xf7fff7ffffffffff, -8796093022209, 576460752303423488, x3, 800, x5)

inst_118:
// rs1_val == -17592186044417, rs2_val == 8388608
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:8388608
TEST_RR_OP(sub, x12, x10, x11, 0xffffefffff7fffff, -17592186044417, 8388608, x3, 808, x5)

inst_119:
// rs1_val == -35184372088833, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:2251799813685248
TEST_RR_OP(sub, x12, x10, x11, 0xfff7dfffffffffff, -35184372088833, 2251799813685248, x3, 816, x5)

inst_120:
// rs1_val == -70368744177665, rs2_val == 65536
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:65536
TEST_RR_OP(sub, x12, x10, x11, 0xffffbffffffeffff, -70368744177665, 65536, x3, 824, x5)

inst_121:
// rs1_val == -140737488355329, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:512
TEST_RR_OP(sub, x12, x10, x11, 0xffff7ffffffffdff, -140737488355329, 512, x3, 832, x5)

inst_122:
// rs1_val == -281474976710657, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:-140737488355329
TEST_RR_OP(sub, x12, x10, x11, 0xffff800000000000, -281474976710657, -140737488355329, x3, 840, x5)

inst_123:
// rs1_val == -562949953421313, rs2_val == 16384
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:16384
TEST_RR_OP(sub, x12, x10, x11, 0xfffdffffffffbfff, -562949953421313, 16384, x3, 848, x5)

inst_124:
// rs1_val == -1125899906842625, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-288230376151711745
TEST_RR_OP(sub, x12, x10, x11, 0x3fc000000000000, -1125899906842625, -288230376151711745, x3, 856, x5)

inst_125:
// rs1_val == -2251799813685249, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:-4
TEST_RR_OP(sub, x12, x10, x11, 0xfff8000000000003, -2251799813685249, -4, x3, 864, x5)

inst_126:
// rs1_val == -4503599627370497, rs2_val == -2
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:-2
TEST_RR_OP(sub, x12, x10, x11, 0xfff0000000000001, -4503599627370497, -2, x3, 872, x5)

inst_127:
// rs1_val == -9007199254740993, rs2_val == 2305843009213693952
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:2305843009213693952
TEST_RR_OP(sub, x12, x10, x11, 0xdfdfffffffffffff, -9007199254740993, 2305843009213693952, x3, 880, x5)

inst_128:
// rs1_val == -18014398509481985, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:-72057594037927937
TEST_RR_OP(sub, x12, x10, x11, 0xc0000000000000, -18014398509481985, -72057594037927937, x3, 888, x5)

inst_129:
// rs1_val == -36028797018963969, rs2_val == -513
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:-513
TEST_RR_OP(sub, x12, x10, x11, 0xff80000000000200, -36028797018963969, -513, x3, 896, x5)

inst_130:
// rs1_val == -72057594037927937, rs2_val == 4194304
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:4194304
TEST_RR_OP(sub, x12, x10, x11, 0xfeffffffffbfffff, -72057594037927937, 4194304, x3, 904, x5)

inst_131:
// rs1_val == -144115188075855873, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xfdfffffffffffffa, -144115188075855873, 5, x3, 912, x5)

inst_132:
// rs1_val == -288230376151711745, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:-9223372036854775808
TEST_RR_OP(sub, x12, x10, x11, 0x7bffffffffffffff, -288230376151711745, -9223372036854775808, x3, 920, x5)

inst_133:
// rs1_val == -576460752303423489, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-6
TEST_RR_OP(sub, x12, x10, x11, 0xf800000000000005, -576460752303423489, -6, x3, 928, x5)

inst_134:
// rs1_val == -1152921504606846977, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-10
TEST_RR_OP(sub, x12, x10, x11, 0xf000000000000009, -1152921504606846977, -10, x3, 936, x5)

inst_135:
// rs1_val == -2305843009213693953, rs2_val == -1099511627777
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:-1099511627777
TEST_RR_OP(sub, x12, x10, x11, 0xe000010000000000, -2305843009213693953, -1099511627777, x3, 944, x5)

inst_136:
// rs1_val == -4611686018427387905, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:2048
TEST_RR_OP(sub, x12, x10, x11, 0xbffffffffffff7ff, -4611686018427387905, 2048, x3, 952, x5)

inst_137:
// rs1_val == 6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:134217728
TEST_RR_OP(sub, x12, x10, x11, 0x555555554d555555, 6148914691236517205, 134217728, x3, 960, x5)

inst_138:
// rs1_val == -6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-68719476737
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaabaaaaaaaab, -6148914691236517206, -68719476737, x3, 968, x5)

inst_139:
// rs2_val == 4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffbfb, -1025, 4, x3, 976, x5)

inst_140:
// rs2_val == 16, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:16
TEST_RR_OP(sub, x12, x10, x11, 0x1ff0, 8192, 16, x3, 984, x5)

inst_141:
// rs2_val == 128, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:128
TEST_RR_OP(sub, x12, x10, x11, 0x3ffffffffffff80, 288230376151711744, 128, x3, 992, x5)

inst_142:
// rs2_val == 1024, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:1024
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffb7f, -129, 1024, x3, 1000, x5)

inst_143:
// rs2_val == 32768, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:32768
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffff5fff, -8193, 32768, x3, 1008, x5)

inst_144:
// rs2_val == 131072, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:131072
TEST_RR_OP(sub, x12, x10, x11, 0xf7fffffffffdffff, -576460752303423489, 131072, x3, 1016, x5)

inst_145:
// rs2_val == 524288, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:524288
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffff80005, 5, 524288, x3, 1024, x5)

inst_146:
// rs2_val == 1048576, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:1048576
TEST_RR_OP(sub, x12, x10, x11, 0x1fffff00000, 2199023255552, 1048576, x3, 1032, x5)

inst_147:
// rs2_val == 16777216, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:16777216
TEST_RR_OP(sub, x12, x10, x11, 0xffffdffffeffffff, -35184372088833, 16777216, x3, 1040, x5)

inst_148:
// rs2_val == 33554432, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:33554432
TEST_RR_OP(sub, x12, x10, x11, 0xfffff7fffdffffff, -8796093022209, 33554432, x3, 1048, x5)

inst_149:
// rs2_val == 67108864, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:67108864
TEST_RR_OP(sub, x12, x10, x11, 0x3fc000000, 17179869184, 67108864, x3, 1056, x5)

inst_150:
// rs2_val == 268435456, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:268435456
TEST_RR_OP(sub, x12, x10, x11, 0x7fff0000000, 8796093022208, 268435456, x3, 1064, x5)

inst_151:
// rs2_val == 1073741824, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:1073741824
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffdbfffffff, -8589934593, 1073741824, x3, 1072, x5)

inst_152:
// rs2_val == 4294967296, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:4294967296
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff00000008, 8, 4294967296, x3, 1080, x5)

inst_153:
// rs2_val == 4503599627370496, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:4503599627370496
TEST_RR_OP(sub, x12, x10, x11, 0xffe7ffffffffffff, -2251799813685249, 4503599627370496, x3, 1088, x5)

inst_154:
// rs2_val == 36028797018963968, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:36028797018963968
TEST_RR_OP(sub, x12, x10, x11, 0xff80020000000000, 2199023255552, 36028797018963968, x3, 1096, x5)

inst_155:
// rs2_val == 288230376151711744, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:288230376151711744
TEST_RR_OP(sub, x12, x10, x11, 0xfc00000000000400, 1024, 288230376151711744, x3, 1104, x5)

inst_156:
// rs2_val == 4611686018427387904, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:4611686018427387904
TEST_RR_OP(sub, x12, x10, x11, 0xbfffffffdfffffff, -536870913, 4611686018427387904, x3, 1112, x5)

inst_157:
// rs2_val == -5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:-5
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffc0000004, -1073741825, -5, x3, 1120, x5)

inst_158:
// rs2_val == -17, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:-17
TEST_RR_OP(sub, x12, x10, x11, 0x18, 7, -17, x3, 1128, x5)

inst_159:
// rs2_val == -129, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-10;  op2val:-129
TEST_RR_OP(sub, x12, x10, x11, 0x77, -10, -129, x3, 1136, x5)

inst_160:
// rs2_val == -1025, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:-1025
TEST_RR_OP(sub, x12, x10, x11, 0x200000000000401, 144115188075855872, -1025, x3, 1144, x5)

inst_161:
// rs2_val == -4097, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:-4097
TEST_RR_OP(sub, x12, x10, x11, 0x20000000001001, 9007199254740992, -4097, x3, 1152, x5)

inst_162:
// rs2_val == -8193, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:-8193
TEST_RR_OP(sub, x12, x10, x11, 0x200000000002001, 144115188075855872, -8193, x3, 1160, x5)

inst_163:
// rs2_val == -2097153, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:-2097153
TEST_RR_OP(sub, x12, x10, x11, 0x300001, 1048576, -2097153, x3, 1168, x5)

inst_164:
// rs2_val == 8796093022208, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:128;  op2val:8796093022208
TEST_RR_OP(sub, x12, x10, x11, 0xfffff80000000080, 128, 8796093022208, x3, 1176, x5)

inst_165:
// rs2_val == -67108865, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:-67108865
TEST_RR_OP(sub, x12, x10, x11, 0x10004000001, 1099511627776, -67108865, x3, 1184, x5)

inst_166:
// rs2_val == 17592186044416, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-7;  op2val:17592186044416
TEST_RR_OP(sub, x12, x10, x11, 0xffffeffffffffff9, -7, 17592186044416, x3, 1192, x5)

inst_167:
// rs2_val == -134217729, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-134217729
TEST_RR_OP(sub, x12, x10, x11, 0xf000000008000000, -1152921504606846977, -134217729, x3, 1200, x5)

inst_168:
// rs2_val == -1073741825, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:-1073741825
TEST_RR_OP(sub, x12, x10, x11, 0xfffff80040000000, -8796093022209, -1073741825, x3, 1208, x5)

inst_169:
// rs2_val == -4294967297, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:-4294967297
TEST_RR_OP(sub, x12, x10, x11, 0x100400001, 4194304, -4294967297, x3, 1216, x5)

inst_170:
// rs2_val == -8589934593, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-8589934593
TEST_RR_OP(sub, x12, x10, x11, 0x208000001, 134217728, -8589934593, x3, 1224, x5)

inst_171:
// rs2_val == 17179869184, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:17179869184
TEST_RR_OP(sub, x12, x10, x11, 0xffffdffbffffffff, -35184372088833, 17179869184, x3, 1232, x5)

inst_172:
// rs2_val == -17179869185, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-17179869185
TEST_RR_OP(sub, x12, x10, x11, 0x400000005, 4, -17179869185, x3, 1240, x5)

inst_173:
// rs2_val == 68719476736, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:68719476736
TEST_RR_OP(sub, x12, x10, x11, 0xffffdfefffffffff, -35184372088833, 68719476736, x3, 1248, x5)

inst_174:
// rs2_val == 274877906944, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4096;  op2val:274877906944
TEST_RR_OP(sub, x12, x10, x11, 0xffffffc000001000, 4096, 274877906944, x3, 1256, x5)

inst_175:
// rs2_val == -274877906945, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:-274877906945
TEST_RR_OP(sub, x12, x10, x11, 0x3000000000, -68719476737, -274877906945, x3, 1264, x5)

inst_176:
// rs2_val == 549755813888, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:549755813888
TEST_RR_OP(sub, x12, x10, x11, 0xfdffff7fffffffff, -144115188075855873, 549755813888, x3, 1272, x5)

inst_177:
// rs2_val == -549755813889, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-549755813889
TEST_RR_OP(sub, x12, x10, x11, 0x8000000001, 0, -549755813889, x3, 1280, x5)

inst_178:
// rs2_val == 2199023255552, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:2199023255552
TEST_RR_OP(sub, x12, x10, x11, 0xfffffdfffffffdff, -513, 2199023255552, x3, 1288, x5)

inst_179:
// rs2_val == 4398046511104, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:4398046511104
TEST_RR_OP(sub, x12, x10, x11, 0xfffffbff7fffffff, -2147483649, 4398046511104, x3, 1296, x5)

inst_180:
// rs2_val == -8796093022209, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:-8796093022209
TEST_RR_OP(sub, x12, x10, x11, 0x80000002001, 8192, -8796093022209, x3, 1304, x5)

inst_181:
// rs2_val == -17592186044417, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-17592186044417
TEST_RR_OP(sub, x12, x10, x11, 0x100000000007, 6, -17592186044417, x3, 1312, x5)

inst_182:
// rs2_val == 281474976710656, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:281474976710656
TEST_RR_OP(sub, x12, x10, x11, 0xffff040000000000, 4398046511104, 281474976710656, x3, 1320, x5)

inst_183:
// rs2_val == -562949953421313, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:-562949953421313
TEST_RR_OP(sub, x12, x10, x11, 0x1f00000000000, -17592186044417, -562949953421313, x3, 1328, x5)

inst_184:
// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val < 0, rs2_val == -1152921504606846977, rs1_val == 9223372036854775807
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:-1152921504606846977
TEST_RR_OP(sub, x12, x10, x11, 0x9000000000000000, 9223372036854775807, -1152921504606846977, x3, 1336, x5)

inst_185:
// rs1_val == 1, rs1_val > 0 and rs2_val > 0, rs2_val == 2251799813685248
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:2251799813685248
TEST_RR_OP(sub, x12, x10, x11, 0xfff8000000000001, 1, 2251799813685248, x3, 1344, x5)

inst_186:
// rs1_val == 16, rs2_val == -4398046511105
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:-4398046511105
TEST_RR_OP(sub, x12, x10, x11, 0x40000000011, 16, -4398046511105, x3, 1352, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 170*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
