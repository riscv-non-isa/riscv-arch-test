
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sub instruction of the RISC-V I extension for the sub covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sub)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x20, rs1_val > 0 and rs2_val > 0, rs2_val == 68719476736, rs1_val == 274877906944, rs1_val != rs2_val
// opcode: sub ; op1:x22; op2:x22; dest:x20; op1val:274877906944;  op2val:68719476736
TEST_RR_OP(sub, x20, x22, x22, 0x3000000000, 274877906944, 68719476736, x10, 0, x9)

inst_1:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_val > 0 and rs2_val < 0, rs1_val == 16, rs2_val == -70368744177665
// opcode: sub ; op1:x1; op2:x1; dest:x1; op1val:16;  op2val:-70368744177665
TEST_RR_OP(sub, x1, x1, x1, 0x400000000011, 16, -70368744177665, x10, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x8, rs2==x4, rd==x8, rs1_val < 0 and rs2_val < 0, rs2_val == -562949953421313, rs1_val == -1099511627777
// opcode: sub ; op1:x8; op2:x4; dest:x8; op1val:-1099511627777;  op2val:-562949953421313
TEST_RR_OP(sub, x8, x8, x4, 0x1ff0000000000, -1099511627777, -562949953421313, x10, 16, x9)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x20, rd==x19, rs1_val < 0 and rs2_val > 0, rs1_val == -562949953421313, rs2_val == 262144
// opcode: sub ; op1:x0; op2:x20; dest:x19; op1val:-562949953421313;  op2val:262144
TEST_RR_OP(sub, x19, x0, x20, 0xfffdfffffffbffff, -562949953421313, 262144, x10, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x6, rd==x6, rs1_val == rs2_val, rs2_val == 256, rs1_val == 256
// opcode: sub ; op1:x12; op2:x6; dest:x6; op1val:256;  op2val:256
TEST_RR_OP(sub, x6, x12, x6, 0x0, 256, 256, x10, 32, x9)

inst_5:
// rs1==x2, rs2==x7, rd==x30, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, rs1_val == 2147483648
// opcode: sub ; op1:x2; op2:x7; dest:x30; op1val:2147483648;  op2val:-9223372036854775808
TEST_RR_OP(sub, x30, x2, x7, 0x8000000080000000, 2147483648, -9223372036854775808, x10, 40, x9)

inst_6:
// rs1==x14, rs2==x21, rd==x15, rs2_val == 0, rs1_val == 4194304
// opcode: sub ; op1:x14; op2:x21; dest:x15; op1val:4194304;  op2val:0
TEST_RR_OP(sub, x15, x14, x21, 0x400000, 4194304, 0, x10, 48, x9)

inst_7:
// rs1==x23, rs2==x30, rd==x27, rs2_val == (2**(xlen-1)-1), rs1_val == 4503599627370496, rs2_val == 9223372036854775807
// opcode: sub ; op1:x23; op2:x30; dest:x27; op1val:4503599627370496;  op2val:9223372036854775807
TEST_RR_OP(sub, x27, x23, x30, 0x8010000000000001, 4503599627370496, 9223372036854775807, x10, 56, x9)

inst_8:
// rs1==x25, rs2==x24, rd==x16, rs2_val == 1, rs1_val == -6148914691236517206
// opcode: sub ; op1:x25; op2:x24; dest:x16; op1val:-6148914691236517206;  op2val:1
TEST_RR_OP(sub, x16, x25, x24, 0xaaaaaaaaaaaaaaa9, -6148914691236517206, 1, x10, 64, x9)

inst_9:
// rs1==x27, rs2==x5, rd==x28, rs1_val == (-2**(xlen-1)), rs2_val == -137438953473, rs1_val == -9223372036854775808
// opcode: sub ; op1:x27; op2:x5; dest:x28; op1val:-9223372036854775808;  op2val:-137438953473
TEST_RR_OP(sub, x28, x27, x5, 0x8000002000000001, -9223372036854775808, -137438953473, x10, 72, x9)

inst_10:
// rs1==x30, rs2==x13, rd==x23, rs1_val == 0, rs2_val == -8589934593
// opcode: sub ; op1:x30; op2:x13; dest:x23; op1val:0;  op2val:-8589934593
TEST_RR_OP(sub, x23, x30, x13, 0x200000001, 0, -8589934593, x10, 80, x9)

inst_11:
// rs1==x17, rs2==x27, rd==x22, rs1_val == (2**(xlen-1)-1), rs2_val == 134217728, rs1_val == 9223372036854775807
// opcode: sub ; op1:x17; op2:x27; dest:x22; op1val:9223372036854775807;  op2val:134217728
TEST_RR_OP(sub, x22, x17, x27, 0x7ffffffff7ffffff, 9223372036854775807, 134217728, x10, 88, x9)

inst_12:
// rs1==x15, rs2==x0, rd==x3, rs1_val == 1, rs2_val == -72057594037927937
// opcode: sub ; op1:x15; op2:x0; dest:x3; op1val:1;  op2val:-72057594037927937
TEST_RR_OP(sub, x3, x15, x0, 0x100000000000002, 1, -72057594037927937, x10, 96, x9)

inst_13:
// rs1==x26, rs2==x28, rd==x4, rs2_val == 2, rs1_val == 512
// opcode: sub ; op1:x26; op2:x28; dest:x4; op1val:512;  op2val:2
TEST_RR_OP(sub, x4, x26, x28, 0x1fe, 512, 2, x10, 104, x9)

inst_14:
// rs1==x6, rs2==x25, rd==x18, rs2_val == 4, rs1_val == 140737488355328
// opcode: sub ; op1:x6; op2:x25; dest:x18; op1val:140737488355328;  op2val:4
TEST_RR_OP(sub, x18, x6, x25, 0x7ffffffffffc, 140737488355328, 4, x10, 112, x9)

inst_15:
// rs1==x3, rs2==x18, rd==x14, rs2_val == 8, rs1_val == 536870912
// opcode: sub ; op1:x3; op2:x18; dest:x14; op1val:536870912;  op2val:8
TEST_RR_OP(sub, x14, x3, x18, 0x1ffffff8, 536870912, 8, x10, 120, x9)

inst_16:
// rs1==x29, rs2==x23, rd==x2, rs2_val == 16, rs1_val == 70368744177664
// opcode: sub ; op1:x29; op2:x23; dest:x2; op1val:70368744177664;  op2val:16
TEST_RR_OP(sub, x2, x29, x23, 0x3ffffffffff0, 70368744177664, 16, x10, 128, x9)

inst_17:
// rs1==x13, rs2==x14, rd==x17, rs2_val == 32, rs1_val == -8796093022209
// opcode: sub ; op1:x13; op2:x14; dest:x17; op1val:-8796093022209;  op2val:32
TEST_RR_OP(sub, x17, x13, x14, 0xfffff7ffffffffdf, -8796093022209, 32, x10, 136, x6)

inst_18:
// rs1==x21, rs2==x9, rd==x12, rs2_val == 64, 
// opcode: sub ; op1:x21; op2:x9; dest:x12; op1val:7;  op2val:64
TEST_RR_OP(sub, x12, x21, x9, 0xffffffffffffffc7, 7, 64, x10, 144, x6)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_19:
// rs1==x24, rs2==x19, rd==x7, rs2_val == 128, rs1_val == -70368744177665
// opcode: sub ; op1:x24; op2:x19; dest:x7; op1val:-70368744177665;  op2val:128
TEST_RR_OP(sub, x7, x24, x19, 0xffffbfffffffff7f, -70368744177665, 128, x1, 0, x6)

inst_20:
// rs1==x16, rs2==x29, rd==x31, rs2_val == 512, 
// opcode: sub ; op1:x16; op2:x29; dest:x31; op1val:0;  op2val:512
TEST_RR_OP(sub, x31, x16, x29, 0xfffffffffffffe00, 0, 512, x1, 8, x6)

inst_21:
// rs1==x19, rs2==x11, rd==x13, rs2_val == 1024, rs1_val == -4503599627370497
// opcode: sub ; op1:x19; op2:x11; dest:x13; op1val:-4503599627370497;  op2val:1024
TEST_RR_OP(sub, x13, x19, x11, 0xffeffffffffffbff, -4503599627370497, 1024, x1, 16, x6)

inst_22:
// rs1==x31, rs2==x26, rd==x10, rs2_val == 2048, 
// opcode: sub ; op1:x31; op2:x26; dest:x10; op1val:6;  op2val:2048
TEST_RR_OP(sub, x10, x31, x26, 0xfffffffffffff806, 6, 2048, x1, 24, x6)

inst_23:
// rs1==x28, rs2==x2, rd==x0, rs2_val == 4096, 
// opcode: sub ; op1:x28; op2:x2; dest:x0; op1val:3689348814741910323;  op2val:4096
TEST_RR_OP(sub, x0, x28, x2, 0x3333333333332333, 3689348814741910323, 4096, x1, 32, x6)

inst_24:
// rs1==x9, rs2==x10, rd==x11, rs2_val == 8192, rs1_val == 65536
// opcode: sub ; op1:x9; op2:x10; dest:x11; op1val:65536;  op2val:8192
TEST_RR_OP(sub, x11, x9, x10, 0xe000, 65536, 8192, x1, 40, x6)

inst_25:
// rs1==x4, rs2==x3, rd==x5, rs2_val == 16384, 
// opcode: sub ; op1:x4; op2:x3; dest:x5; op1val:-6148914691236517205;  op2val:16384
TEST_RR_OP(sub, x5, x4, x3, 0xaaaaaaaaaaaa6aab, -6148914691236517205, 16384, x1, 48, x6)

inst_26:
// rs1==x11, rs2==x15, rd==x24, rs2_val == 32768, 
// opcode: sub ; op1:x11; op2:x15; dest:x24; op1val:6;  op2val:32768
TEST_RR_OP(sub, x24, x11, x15, 0xffffffffffff8006, 6, 32768, x1, 56, x6)

inst_27:
// rs1==x7, rs2==x12, rd==x9, rs2_val == 65536, 
// opcode: sub ; op1:x7; op2:x12; dest:x9; op1val:3037000498;  op2val:65536
TEST_RR_OP(sub, x9, x7, x12, 0xb503f332, 3037000498, 65536, x1, 64, x6)

inst_28:
// rs1==x18, rs2==x8, rd==x29, rs2_val == 131072, rs1_val == 36028797018963968
// opcode: sub ; op1:x18; op2:x8; dest:x29; op1val:36028797018963968;  op2val:131072
TEST_RR_OP(sub, x29, x18, x8, 0x7ffffffffe0000, 36028797018963968, 131072, x1, 72, x6)

inst_29:
// rs1==x10, rs2==x31, rd==x26, rs2_val == 524288, 
// opcode: sub ; op1:x10; op2:x31; dest:x26; op1val:7378697629483820647;  op2val:524288
TEST_RR_OP(sub, x26, x10, x31, 0x66666666665e6667, 7378697629483820647, 524288, x1, 80, x6)

inst_30:
// rs1==x5, rs2==x16, rd==x21, rs2_val == 1048576, rs1_val == 268435456
// opcode: sub ; op1:x5; op2:x16; dest:x21; op1val:268435456;  op2val:1048576
TEST_RR_OP(sub, x21, x5, x16, 0xff00000, 268435456, 1048576, x1, 88, x6)

inst_31:
// rs1==x20, rs2==x17, rd==x25, rs2_val == 2097152, rs1_val == 64
// opcode: sub ; op1:x20; op2:x17; dest:x25; op1val:64;  op2val:2097152
TEST_RR_OP(sub, x25, x20, x17, 0xffffffffffe00040, 64, 2097152, x1, 96, x6)

inst_32:
// rs2_val == 4194304, rs1_val == 562949953421312
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:4194304
TEST_RR_OP(sub, x12, x10, x11, 0x1ffffffc00000, 562949953421312, 4194304, x1, 104, x6)

inst_33:
// rs2_val == 8388608, rs1_val == -268435457
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:8388608
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffef7fffff, -268435457, 8388608, x1, 112, x6)

inst_34:
// rs2_val == 16777216, rs1_val == -33
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:16777216
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffeffffdf, -33, 16777216, x1, 120, x6)

inst_35:
// rs2_val == 33554432, rs1_val == -4097
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:33554432
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffdffefff, -4097, 33554432, x1, 128, x6)

inst_36:
// rs2_val == 67108864, rs1_val == -274877906945
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:67108864
TEST_RR_OP(sub, x12, x10, x11, 0xffffffbffbffffff, -274877906945, 67108864, x1, 136, x6)

inst_37:
// rs2_val == 268435456, rs1_val == 2097152
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:268435456
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffff0200000, 2097152, 268435456, x1, 144, x6)

inst_38:
// rs2_val == 536870912, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:536870912
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffe0000000, 0, 536870912, x1, 152, x6)

inst_39:
// rs2_val == 1073741824, rs1_val == 17592186044416
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:1073741824
TEST_RR_OP(sub, x12, x10, x11, 0xfffc0000000, 17592186044416, 1073741824, x1, 160, x6)

inst_40:
// rs2_val == 2147483648, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:64;  op2val:2147483648
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff80000040, 64, 2147483648, x1, 168, x6)

inst_41:
// rs2_val == 4294967296, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387904;  op2val:4294967296
TEST_RR_OP(sub, x12, x10, x11, 0xbfffffff00000000, -4611686018427387904, 4294967296, x1, 176, x6)

inst_42:
// rs2_val == 8589934592, rs1_val == 34359738368
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:8589934592
TEST_RR_OP(sub, x12, x10, x11, 0x600000000, 34359738368, 8589934592, x1, 184, x6)

inst_43:
// rs2_val == 17179869184, rs1_val == -144115188075855873
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:17179869184
TEST_RR_OP(sub, x12, x10, x11, 0xfdfffffbffffffff, -144115188075855873, 17179869184, x1, 192, x6)

inst_44:
// rs2_val == 34359738368, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:34359738368
TEST_RR_OP(sub, x12, x10, x11, 0xfffffff800000000, 0, 34359738368, x1, 200, x6)

inst_45:
// rs2_val == 137438953472, rs1_val == 17179869184
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:137438953472
TEST_RR_OP(sub, x12, x10, x11, 0xffffffe400000000, 17179869184, 137438953472, x1, 208, x6)

inst_46:
// rs2_val == 274877906944, rs1_val == 1152921504606846976
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:274877906944
TEST_RR_OP(sub, x12, x10, x11, 0xfffffc000000000, 1152921504606846976, 274877906944, x1, 216, x6)

inst_47:
// rs2_val == 549755813888, rs1_val == 33554432
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:549755813888
TEST_RR_OP(sub, x12, x10, x11, 0xffffff8002000000, 33554432, 549755813888, x1, 224, x6)

inst_48:
// rs2_val == 1099511627776, rs1_val == -1048577
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:1099511627776
TEST_RR_OP(sub, x12, x10, x11, 0xfffffeffffefffff, -1048577, 1099511627776, x1, 232, x6)

inst_49:
// rs2_val == 2199023255552, rs1_val == -524289
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:2199023255552
TEST_RR_OP(sub, x12, x10, x11, 0xfffffdfffff7ffff, -524289, 2199023255552, x1, 240, x6)

inst_50:
// rs2_val == 4398046511104, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:4398046511104
TEST_RR_OP(sub, x12, x10, x11, 0xfffffbbfffffffff, -274877906945, 4398046511104, x1, 248, x6)

inst_51:
// rs2_val == 8796093022208, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:8796093022208
TEST_RR_OP(sub, x12, x10, x11, 0xfffff800b504f334, 3037000500, 8796093022208, x1, 256, x6)

inst_52:
// rs2_val == 17592186044416, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4;  op2val:17592186044416
TEST_RR_OP(sub, x12, x10, x11, 0xffffeffffffffffc, -4, 17592186044416, x1, 264, x6)

inst_53:
// rs2_val == 35184372088832, rs1_val == 2
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:35184372088832
TEST_RR_OP(sub, x12, x10, x11, 0xffffe00000000002, 2, 35184372088832, x1, 272, x6)

inst_54:
// rs2_val == 70368744177664, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:70368744177664
TEST_RR_OP(sub, x12, x10, x11, 0xffffb7ffffffffff, -8796093022209, 70368744177664, x1, 280, x6)

inst_55:
// rs2_val == 140737488355328, rs1_val == -8388609
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:140737488355328
TEST_RR_OP(sub, x12, x10, x11, 0xffff7fffff7fffff, -8388609, 140737488355328, x1, 288, x6)

inst_56:
// rs2_val == 281474976710656, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:281474976710656
TEST_RR_OP(sub, x12, x10, x11, 0xffff0000b504f332, 3037000498, 281474976710656, x1, 296, x6)

inst_57:
// rs2_val == 562949953421312, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:562949953421312
TEST_RR_OP(sub, x12, x10, x11, 0xfffe000002000000, 33554432, 562949953421312, x1, 304, x6)

inst_58:
// rs2_val == 1125899906842624, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9223372036854775808;  op2val:1125899906842624
TEST_RR_OP(sub, x12, x10, x11, 0x7ffc000000000000, -9223372036854775808, 1125899906842624, x1, 312, x6)

inst_59:
// rs2_val == 2251799813685248, rs1_val == -65537
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:2251799813685248
TEST_RR_OP(sub, x12, x10, x11, 0xfff7fffffffeffff, -65537, 2251799813685248, x1, 320, x6)

inst_60:
// rs2_val == 4503599627370496, rs1_val == -4611686018427387905
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:4503599627370496
TEST_RR_OP(sub, x12, x10, x11, 0xbfefffffffffffff, -4611686018427387905, 4503599627370496, x1, 328, x6)

inst_61:
// rs2_val == 9007199254740992, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:9007199254740992
TEST_RR_OP(sub, x12, x10, x11, 0xffe0000000000005, 5, 9007199254740992, x1, 336, x6)

inst_62:
// rs2_val == 18014398509481984, rs1_val == 4611686018427387904
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:18014398509481984
TEST_RR_OP(sub, x12, x10, x11, 0x3fc0000000000000, 4611686018427387904, 18014398509481984, x1, 344, x6)

inst_63:
// rs2_val == 36028797018963968, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:36028797018963968
TEST_RR_OP(sub, x12, x10, x11, 0xff80000000000002, 2, 36028797018963968, x1, 352, x6)

inst_64:
// rs2_val == 72057594037927936, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:72057594037927936
TEST_RR_OP(sub, x12, x10, x11, 0xff00000000010000, 65536, 72057594037927936, x1, 360, x6)

inst_65:
// rs2_val == 144115188075855872, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:144115188075855872
TEST_RR_OP(sub, x12, x10, x11, 0xfdffffff4afb0ccd, -3037000499, 144115188075855872, x1, 368, x6)

inst_66:
// rs2_val == 288230376151711744, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1;  op2val:288230376151711744
TEST_RR_OP(sub, x12, x10, x11, 0xfbffffffffffffff, -1, 288230376151711744, x1, 376, x6)

inst_67:
// rs2_val == 576460752303423488, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387904;  op2val:576460752303423488
TEST_RR_OP(sub, x12, x10, x11, 0xb800000000000000, -4611686018427387904, 576460752303423488, x1, 384, x6)

inst_68:
// rs2_val == 1152921504606846976, rs1_val == -32769
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:1152921504606846976
TEST_RR_OP(sub, x12, x10, x11, 0xefffffffffff7fff, -32769, 1152921504606846976, x1, 392, x6)

inst_69:
// rs2_val == 2305843009213693952, rs1_val == -17592186044417
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:2305843009213693952
TEST_RR_OP(sub, x12, x10, x11, 0xdfffefffffffffff, -17592186044417, 2305843009213693952, x1, 400, x6)

inst_70:
// rs2_val == 4611686018427387904, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:4611686018427387904
TEST_RR_OP(sub, x12, x10, x11, 0xbfffffffefffffff, -268435457, 4611686018427387904, x1, 408, x6)

inst_71:
// rs2_val == -2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-2
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0, -2, x1, 416, x6)

inst_72:
// rs2_val == -3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-3
TEST_RR_OP(sub, x12, x10, x11, 0x8, 5, -3, x1, 424, x6)

inst_73:
// rs2_val == -5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:-5
TEST_RR_OP(sub, x12, x10, x11, 0xb504f338, 3037000499, -5, x1, 432, x6)

inst_74:
// rs2_val == -9, rs1_val == 68719476736
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:-9
TEST_RR_OP(sub, x12, x10, x11, 0x1000000009, 68719476736, -9, x1, 440, x6)

inst_75:
// rs2_val == -17, rs1_val == -9007199254740993
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:-17
TEST_RR_OP(sub, x12, x10, x11, 0xffe0000000000010, -9007199254740993, -17, x1, 448, x6)

inst_76:
// rs2_val == -33, rs1_val == -1125899906842625
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-33
TEST_RR_OP(sub, x12, x10, x11, 0xfffc000000000020, -1125899906842625, -33, x1, 456, x6)

inst_77:
// rs2_val == -65, rs1_val == -72057594037927937
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:-65
TEST_RR_OP(sub, x12, x10, x11, 0xff00000000000040, -72057594037927937, -65, x1, 464, x6)

inst_78:
// rs2_val == -129, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-129
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0d4e, -3037000499, -129, x1, 472, x6)

inst_79:
// rs2_val == -257, rs1_val == -68719476737
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:-257
TEST_RR_OP(sub, x12, x10, x11, 0xfffffff000000100, -68719476737, -257, x1, 480, x6)

inst_80:
// rs2_val == -513, rs1_val == 1099511627776
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:-513
TEST_RR_OP(sub, x12, x10, x11, 0x10000000201, 1099511627776, -513, x1, 488, x6)

inst_81:
// rs2_val == -1025, rs1_val == -17179869185
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:-1025
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffc00000400, -17179869185, -1025, x1, 496, x6)

inst_82:
// rs2_val == -2049, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:-2049
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555d55, 6148914691236517204, -2049, x1, 504, x6)

inst_83:
// rs2_val == -4097, rs1_val == 131072
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:-4097
TEST_RR_OP(sub, x12, x10, x11, 0x21001, 131072, -4097, x1, 512, x6)

inst_84:
// rs2_val == -8193, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:-8193
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffff0002000, -268435457, -8193, x1, 520, x6)

inst_85:
// rs2_val == -16385, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-16385
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaeaab, -6148914691236517206, -16385, x1, 528, x6)

inst_86:
// rs2_val == -32769, rs1_val == -2097153
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-32769
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffe08000, -2097153, -32769, x1, 536, x6)

inst_87:
// rs2_val == -65537, rs1_val == -36028797018963969
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:-65537
TEST_RR_OP(sub, x12, x10, x11, 0xff80000000010000, -36028797018963969, -65537, x1, 544, x6)

inst_88:
// rs2_val == -131073, rs1_val == 281474976710656
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:-131073
TEST_RR_OP(sub, x12, x10, x11, 0x1000000020001, 281474976710656, -131073, x1, 552, x6)

inst_89:
// rs2_val == -262145, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-262145
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4aff0cce, -3037000499, -262145, x1, 560, x6)

inst_90:
// rs2_val == -524289, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-524289
TEST_RR_OP(sub, x12, x10, x11, 0x80001, 0, -524289, x1, 568, x6)

inst_91:
// rs2_val == -1048577, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-1048577
TEST_RR_OP(sub, x12, x10, x11, 0xfe00000000100000, -144115188075855873, -1048577, x1, 576, x6)

inst_92:
// rs2_val == -2097153, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-2097153
TEST_RR_OP(sub, x12, x10, x11, 0x180000, -524289, -2097153, x1, 584, x6)

inst_93:
// rs2_val == -4194305, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:-4194305
TEST_RR_OP(sub, x12, x10, x11, 0x400400001, 17179869184, -4194305, x1, 592, x6)

inst_94:
// rs2_val == -8388609, rs1_val == 32768
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:32768;  op2val:-8388609
TEST_RR_OP(sub, x12, x10, x11, 0x808001, 32768, -8388609, x1, 600, x6)

inst_95:
// rs2_val == -16777217, rs1_val == 1073741824
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-16777217
TEST_RR_OP(sub, x12, x10, x11, 0x41000001, 1073741824, -16777217, x1, 608, x6)

inst_96:
// rs2_val == -33554433, rs1_val == -137438953473
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:-33554433
TEST_RR_OP(sub, x12, x10, x11, 0xffffffe002000000, -137438953473, -33554433, x1, 616, x6)

inst_97:
// rs2_val == -67108865, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:-67108865
TEST_RR_OP(sub, x12, x10, x11, 0x4400001, 4194304, -67108865, x1, 624, x6)

inst_98:
// rs2_val == -134217729, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:32768;  op2val:-134217729
TEST_RR_OP(sub, x12, x10, x11, 0x8008001, 32768, -134217729, x1, 632, x6)

inst_99:
// rs2_val == -268435457, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-268435457
TEST_RR_OP(sub, x12, x10, x11, 0xfe00000010000000, -144115188075855873, -268435457, x1, 640, x6)

inst_100:
// rs2_val == -536870913, rs1_val == 262144
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:-536870913
TEST_RR_OP(sub, x12, x10, x11, 0x20040001, 262144, -536870913, x1, 648, x6)

inst_101:
// rs2_val == -1073741825, rs1_val == -3
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-1073741825
TEST_RR_OP(sub, x12, x10, x11, 0x3ffffffe, -3, -1073741825, x1, 656, x6)

inst_102:
// rs2_val == -2147483649, rs1_val == -35184372088833
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:-2147483649
TEST_RR_OP(sub, x12, x10, x11, 0xffffe00080000000, -35184372088833, -2147483649, x1, 664, x6)

inst_103:
// rs2_val == -4294967297, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:256;  op2val:-4294967297
TEST_RR_OP(sub, x12, x10, x11, 0x100000101, 256, -4294967297, x1, 672, x6)

inst_104:
// rs2_val == -17179869185, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-17179869185
TEST_RR_OP(sub, x12, x10, x11, 0x34afb0cce, -3037000499, -17179869185, x1, 680, x6)

inst_105:
// rs2_val == -34359738369, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:64;  op2val:-34359738369
TEST_RR_OP(sub, x12, x10, x11, 0x800000041, 64, -34359738369, x1, 688, x6)

inst_106:
// rs2_val == -68719476737, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-68719476737
TEST_RR_OP(sub, x12, x10, x11, 0x1000000001, 0, -68719476737, x1, 696, x6)

inst_107:
// rs2_val == -274877906945, rs1_val == -2199023255553
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:-274877906945
TEST_RR_OP(sub, x12, x10, x11, 0xfffffe4000000000, -2199023255553, -274877906945, x1, 704, x6)

inst_108:
// rs2_val == -549755813889, rs1_val == -281474976710657
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:-549755813889
TEST_RR_OP(sub, x12, x10, x11, 0xffff008000000000, -281474976710657, -549755813889, x1, 712, x6)

inst_109:
// rs2_val == -1099511627777, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:-1099511627777
TEST_RR_OP(sub, x12, x10, x11, 0x3333343333333333, 3689348814741910322, -1099511627777, x1, 720, x6)

inst_110:
// rs2_val == -2199023255553, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-2199023255553
TEST_RR_OP(sub, x12, x10, x11, 0x20000000004, 3, -2199023255553, x1, 728, x6)

inst_111:
// rs2_val == -4398046511105, rs1_val == 144115188075855872
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:-4398046511105
TEST_RR_OP(sub, x12, x10, x11, 0x200040000000001, 144115188075855872, -4398046511105, x1, 736, x6)

inst_112:
// rs2_val == -8796093022209, rs1_val == 128
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:128;  op2val:-8796093022209
TEST_RR_OP(sub, x12, x10, x11, 0x80000000081, 128, -8796093022209, x1, 744, x6)

inst_113:
// rs2_val == -17592186044417, rs1_val == 4398046511104
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-17592186044417
TEST_RR_OP(sub, x12, x10, x11, 0x140000000001, 4398046511104, -17592186044417, x1, 752, x6)

inst_114:
// rs2_val == -35184372088833, rs1_val == 4
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-35184372088833
TEST_RR_OP(sub, x12, x10, x11, 0x200000000005, 4, -35184372088833, x1, 760, x6)

inst_115:
// rs2_val == -140737488355329, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-140737488355329
TEST_RR_OP(sub, x12, x10, x11, 0xfffc800000000000, -1125899906842625, -140737488355329, x1, 768, x6)

inst_116:
// rs2_val == -281474976710657, rs1_val == 72057594037927936
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-281474976710657
TEST_RR_OP(sub, x12, x10, x11, 0x101000000000001, 72057594037927936, -281474976710657, x1, 776, x6)

inst_117:
// rs2_val == -1125899906842625, rs1_val == -536870913
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:-1125899906842625
TEST_RR_OP(sub, x12, x10, x11, 0x3ffffe0000000, -536870913, -1125899906842625, x1, 784, x6)

inst_118:
// rs2_val == -2251799813685249, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:-2251799813685249
TEST_RR_OP(sub, x12, x10, x11, 0x80000b504f333, 3037000498, -2251799813685249, x1, 792, x6)

inst_119:
// rs2_val == -4503599627370497, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:-4503599627370497
TEST_RR_OP(sub, x12, x10, x11, 0x10000400000001, 17179869184, -4503599627370497, x1, 800, x6)

inst_120:
// rs2_val == -9007199254740993, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-9007199254740993
TEST_RR_OP(sub, x12, x10, x11, 0x20000000000001, 0, -9007199254740993, x1, 808, x6)

inst_121:
// rs2_val == -18014398509481985, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:-18014398509481985
TEST_RR_OP(sub, x12, x10, x11, 0x40000020000001, 536870912, -18014398509481985, x1, 816, x6)

inst_122:
// rs2_val == -36028797018963969, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-36028797018963969
TEST_RR_OP(sub, x12, x10, x11, 0x7fffff4afb0cce, -3037000499, -36028797018963969, x1, 824, x6)

inst_123:
// rs2_val == -144115188075855873, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:-144115188075855873
TEST_RR_OP(sub, x12, x10, x11, 0x1e0000000000000, -9007199254740993, -144115188075855873, x1, 832, x6)

inst_124:
// rs2_val == -288230376151711745, rs1_val == 1125899906842624
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:-288230376151711745
TEST_RR_OP(sub, x12, x10, x11, 0x404000000000001, 1125899906842624, -288230376151711745, x1, 840, x6)

inst_125:
// rs2_val == -576460752303423489, rs1_val == -16777217
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:-576460752303423489
TEST_RR_OP(sub, x12, x10, x11, 0x7ffffffff000000, -16777217, -576460752303423489, x1, 848, x6)

inst_126:
// rs2_val == -1152921504606846977, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:-1152921504606846977
TEST_RR_OP(sub, x12, x10, x11, 0x10000000b504f334, 3037000499, -1152921504606846977, x1, 856, x6)

inst_127:
// rs2_val == -2305843009213693953, rs1_val == 8192
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:-2305843009213693953
TEST_RR_OP(sub, x12, x10, x11, 0x2000000000002001, 8192, -2305843009213693953, x1, 864, x6)

inst_128:
// rs2_val == -4611686018427387905, rs1_val == -1152921504606846977
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-4611686018427387905
TEST_RR_OP(sub, x12, x10, x11, 0x3000000000000000, -1152921504606846977, -4611686018427387905, x1, 872, x6)

inst_129:
// rs2_val == 6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xab2aaaaaaaaaaaab, 36028797018963968, 6148914691236517205, x1, 880, x6)

inst_130:
// rs2_val == -6148914691236517206, rs1_val==7378697629483820646 and rs2_val==-6148914691236517206
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbbbbbbbbbc, 7378697629483820646, -6148914691236517206, x1, 888, x6)

inst_131:
// rs1_val == 8, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:-2305843009213693953
TEST_RR_OP(sub, x12, x10, x11, 0x2000000000000009, 8, -2305843009213693953, x1, 896, x6)

inst_132:
// rs1_val == 32, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:268435456
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffff0000020, 32, 268435456, x1, 904, x6)

inst_133:
// rs1_val == 1024, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:-262145
TEST_RR_OP(sub, x12, x10, x11, 0x40401, 1024, -262145, x1, 912, x6)

inst_134:
// rs1_val == 2048, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x7fd, 2048, 3, x1, 920, x6)

inst_135:
// rs1_val == 4096, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4096;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x1000, 4096, 0, x1, 928, x6)

inst_136:
// rs1_val == 16384, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:8192
TEST_RR_OP(sub, x12, x10, x11, 0x2000, 16384, 8192, x1, 936, x6)

inst_137:
// rs1_val == 524288, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:288230376151711744
TEST_RR_OP(sub, x12, x10, x11, 0xfc00000000080000, 524288, 288230376151711744, x1, 944, x6)

inst_138:
// rs1_val == 1048576, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:262144
TEST_RR_OP(sub, x12, x10, x11, 0xc0000, 1048576, 262144, x1, 952, x6)

inst_139:
// rs1_val == 8388608, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x7ffffb, 8388608, 5, x1, 960, x6)

inst_140:
// rs1_val == 16777216, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:-7
TEST_RR_OP(sub, x12, x10, x11, 0x1000007, 16777216, -7, x1, 968, x6)

inst_141:
// rs1_val == 67108864, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:-134217729
TEST_RR_OP(sub, x12, x10, x11, 0xc000001, 67108864, -134217729, x1, 976, x6)

inst_142:
// rs1_val == 134217728, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-17179869185
TEST_RR_OP(sub, x12, x10, x11, 0x408000001, 134217728, -17179869185, x1, 984, x6)

inst_143:
// rs1_val == 4294967296, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-8388609
TEST_RR_OP(sub, x12, x10, x11, 0x100800001, 4294967296, -8388609, x1, 992, x6)

inst_144:
// rs1_val == 8589934592, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x200000000, 8589934592, 0, x1, 1000, x6)

inst_145:
// rs1_val == 137438953472, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:-2199023255553
TEST_RR_OP(sub, x12, x10, x11, 0x22000000001, 137438953472, -2199023255553, x1, 1008, x6)

inst_146:
// rs1_val == 549755813888, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:-67108865
TEST_RR_OP(sub, x12, x10, x11, 0x8004000001, 549755813888, -67108865, x1, 1016, x6)

inst_147:
// rs1_val == 2199023255552, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:4096
TEST_RR_OP(sub, x12, x10, x11, 0x1fffffff000, 2199023255552, 4096, x1, 1024, x6)

inst_148:
// rs1_val == 8796093022208, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:562949953421312
TEST_RR_OP(sub, x12, x10, x11, 0xfffe080000000000, 8796093022208, 562949953421312, x1, 1032, x6)

inst_149:
// rs1_val == 35184372088832, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:8796093022208
TEST_RR_OP(sub, x12, x10, x11, 0x180000000000, 35184372088832, 8796093022208, x1, 1040, x6)

inst_150:
// rs1_val == 2251799813685248, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:-8193
TEST_RR_OP(sub, x12, x10, x11, 0x8000000002001, 2251799813685248, -8193, x1, 1048, x6)

inst_151:
// rs1_val == 9007199254740992, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x1fffff4afb0cce, 9007199254740992, 3037000498, x1, 1056, x6)

inst_152:
// rs1_val == 18014398509481984, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-1152921504606846977
TEST_RR_OP(sub, x12, x10, x11, 0x1040000000000001, 18014398509481984, -1152921504606846977, x1, 1064, x6)

inst_153:
// rs1_val == 288230376151711744, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-536870913
TEST_RR_OP(sub, x12, x10, x11, 0x400000020000001, 288230376151711744, -536870913, x1, 1072, x6)

inst_154:
// rs1_val == 576460752303423488, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-33
TEST_RR_OP(sub, x12, x10, x11, 0x800000000000021, 576460752303423488, -33, x1, 1080, x6)

inst_155:
// rs1_val == 2305843009213693952, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-4294967297
TEST_RR_OP(sub, x12, x10, x11, 0x2000000100000001, 2305843009213693952, -4294967297, x1, 1088, x6)

inst_156:
// rs1_val == -2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-140737488355329
TEST_RR_OP(sub, x12, x10, x11, 0x7fffffffffff, -2, -140737488355329, x1, 1096, x6)

inst_157:
// rs1_val == -5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:512
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffdfb, -5, 512, x1, 1104, x6)

inst_158:
// rs1_val == -9, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:256
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffef7, -9, 256, x1, 1112, x6)

inst_159:
// rs1_val == -17, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:67108864
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffbffffef, -17, 67108864, x1, 1120, x6)

inst_160:
// rs1_val == -65, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffbb, -65, 4, x1, 1128, x6)

inst_161:
// rs1_val == -129, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:70368744177664
TEST_RR_OP(sub, x12, x10, x11, 0xffffbfffffffff7f, -129, 70368744177664, x1, 1136, x6)

inst_162:
// rs1_val == -257, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:1
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffefe, -257, 1, x1, 1144, x6)

inst_163:
// rs1_val == -513, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-2049
TEST_RR_OP(sub, x12, x10, x11, 0x600, -513, -2049, x1, 1152, x6)

inst_164:
// rs1_val == -1025, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:36028797018963968
TEST_RR_OP(sub, x12, x10, x11, 0xff7ffffffffffbff, -1025, 36028797018963968, x1, 1160, x6)

inst_165:
// rs1_val == -2049, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:144115188075855872
TEST_RR_OP(sub, x12, x10, x11, 0xfdfffffffffff7ff, -2049, 144115188075855872, x1, 1168, x6)

inst_166:
// rs1_val == -8193, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-8
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffe007, -8193, -8, x1, 1176, x6)

inst_167:
// rs1_val == -16385, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:-140737488355329
TEST_RR_OP(sub, x12, x10, x11, 0x7fffffffc000, -16385, -140737488355329, x1, 1184, x6)

inst_168:
// rs1_val == -131073, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:-4503599627370497
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffe0000, -131073, -4503599627370497, x1, 1192, x6)

inst_169:
// rs1_val == -262145, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:-1125899906842625
TEST_RR_OP(sub, x12, x10, x11, 0x3fffffffc0000, -262145, -1125899906842625, x1, 1200, x6)

inst_170:
// rs1_val == -4194305, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffbffffb, -4194305, 4, x1, 1208, x6)

inst_171:
// rs1_val == -33554433, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-4194305
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffe400000, -33554433, -4194305, x1, 1216, x6)

inst_172:
// rs1_val == -67108865, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-8589934593
TEST_RR_OP(sub, x12, x10, x11, 0x1fc000000, -67108865, -8589934593, x1, 1224, x6)

inst_173:
// rs1_val == -134217729, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:512
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffff7fffdff, -134217729, 512, x1, 1232, x6)

inst_174:
// rs1_val == -1073741825, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffbfffffff, -1073741825, 0, x1, 1240, x6)

inst_175:
// rs1_val == -2147483649, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:-33
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff80000020, -2147483649, -33, x1, 1248, x6)

inst_176:
// rs1_val == -4294967297, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:1099511627776
TEST_RR_OP(sub, x12, x10, x11, 0xfffffefeffffffff, -4294967297, 1099511627776, x1, 1256, x6)

inst_177:
// rs1_val == -8589934593, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-34359738369
TEST_RR_OP(sub, x12, x10, x11, 0x600000000, -8589934593, -34359738369, x1, 1264, x6)

inst_178:
// rs1_val == -34359738369, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xfffffff74afb0ccd, -34359738369, 3037000498, x1, 1272, x6)

inst_179:
// rs1_val == -549755813889, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:131072
TEST_RR_OP(sub, x12, x10, x11, 0xffffff7ffffdffff, -549755813889, 131072, x1, 1280, x6)

inst_180:
// rs1_val == -4398046511105, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xccccc8cccccccccd, -4398046511105, 3689348814741910322, x1, 1288, x6)

inst_181:
// rs1_val == -140737488355329, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:-67108865
TEST_RR_OP(sub, x12, x10, x11, 0xffff800004000000, -140737488355329, -67108865, x1, 1296, x6)

inst_182:
// rs1_val == -2251799813685249, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:-1099511627777
TEST_RR_OP(sub, x12, x10, x11, 0xfff8010000000000, -2251799813685249, -1099511627777, x1, 1304, x6)

inst_183:
// rs1_val == -18014398509481985, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xffbffffffffffffb, -18014398509481985, 4, x1, 1312, x6)

inst_184:
// rs1_val == -288230376151711745, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xfbffffffffffffff, -288230376151711745, 0, x1, 1320, x6)

inst_185:
// rs1_val == -576460752303423489, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-1048577
TEST_RR_OP(sub, x12, x10, x11, 0xf800000000100000, -576460752303423489, -1048577, x1, 1328, x6)

inst_186:
// rs1_val == -2305843009213693953, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:256
TEST_RR_OP(sub, x12, x10, x11, 0xdffffffffffffeff, -2305843009213693953, 256, x1, 1336, x6)

inst_187:
// rs1_val == 6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:7
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555554e, 6148914691236517205, 7, x1, 1344, x6)

inst_188:
// rs1_val==3 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x0, 3, 3, x1, 1352, x6)

inst_189:
// rs1_val==3 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaae, 3, 6148914691236517205, x1, 1360, x6)

inst_190:
// rs1_val==3 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555559, 3, -6148914691236517206, x1, 1368, x6)

inst_191:
// rs1_val==3 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 3, 5, x1, 1376, x6)

inst_192:
// rs1_val==3 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd0, 3, 3689348814741910323, x1, 1384, x6)

inst_193:
// rs1_val==3 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999d, 3, 7378697629483820646, x1, 1392, x6)

inst_194:
// rs1_val==3 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xb504f336, 3, -3037000499, x1, 1400, x6)

inst_195:
// rs1_val==3 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd0, 3, 3037000499, x1, 1408, x6)

inst_196:
// rs1_val==3 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x1, 3, 2, x1, 1416, x6)

inst_197:
// rs1_val==3 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaaf, 3, 6148914691236517204, x1, 1424, x6)

inst_198:
// rs1_val==3 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x3, 3, 0, x1, 1432, x6)

inst_199:
// rs1_val==3 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 3, 4, x1, 1440, x6)

inst_200:
// rs1_val==3 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd1, 3, 3689348814741910322, x1, 1448, x6)

inst_201:
// rs1_val==3 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999e, 3, 7378697629483820645, x1, 1456, x6)

inst_202:
// rs1_val==3 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd1, 3, 3037000498, x1, 1464, x6)

inst_203:
// rs1_val==3 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaad, 3, 6148914691236517206, x1, 1472, x6)

inst_204:
// rs1_val==3 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555558, 3, -6148914691236517205, x1, 1480, x6)

inst_205:
// rs1_val==3 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffd, 3, 6, x1, 1488, x6)

inst_206:
// rs1_val==3 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccf, 3, 3689348814741910324, x1, 1496, x6)

inst_207:
// rs1_val==3 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999c, 3, 7378697629483820647, x1, 1504, x6)

inst_208:
// rs1_val==3 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xb504f335, 3, -3037000498, x1, 1512, x6)

inst_209:
// rs1_val==3 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccf, 3, 3037000500, x1, 1520, x6)

inst_210:
// rs1_val==6148914691236517205 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555552, 6148914691236517205, 3, x1, 1528, x6)

inst_211:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x0, 6148914691236517205, 6148914691236517205, x1, 1536, x6)

inst_212:
// rs1_val==6148914691236517205 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaab, 6148914691236517205, -6148914691236517206, x1, 1544, x6)

inst_213:
// rs1_val==6148914691236517205 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555550, 6148914691236517205, 5, x1, 1552, x6)

inst_214:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222222, 6148914691236517205, 3689348814741910323, x1, 1560, x6)

inst_215:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeeef, 6148914691236517205, 7378697629483820646, x1, 1568, x6)

inst_216:
// rs1_val==6148914691236517205 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4888, 6148914691236517205, -3037000499, x1, 1576, x6)

inst_217:
// rs1_val==6148914691236517205 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506222, 6148914691236517205, 3037000499, x1, 1584, x6)

inst_218:
// rs1_val==6148914691236517205 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555553, 6148914691236517205, 2, x1, 1592, x6)

inst_219:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x1, 6148914691236517205, 6148914691236517204, x1, 1600, x6)

inst_220:
// rs1_val==6148914691236517205 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555555, 6148914691236517205, 0, x1, 1608, x6)

inst_221:
// rs1_val==6148914691236517205 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555551, 6148914691236517205, 4, x1, 1616, x6)

inst_222:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222223, 6148914691236517205, 3689348814741910322, x1, 1624, x6)

inst_223:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeef0, 6148914691236517205, 7378697629483820645, x1, 1632, x6)

inst_224:
// rs1_val==6148914691236517205 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506223, 6148914691236517205, 3037000498, x1, 1640, x6)

inst_225:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 6148914691236517205, 6148914691236517206, x1, 1648, x6)

inst_226:
// rs1_val==6148914691236517205 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, 6148914691236517205, -6148914691236517205, x1, 1656, x6)

inst_227:
// rs1_val==6148914691236517205 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555554f, 6148914691236517205, 6, x1, 1664, x6)

inst_228:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222221, 6148914691236517205, 3689348814741910324, x1, 1672, x6)

inst_229:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeeee, 6148914691236517205, 7378697629483820647, x1, 1680, x6)

inst_230:
// rs1_val==6148914691236517205 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4887, 6148914691236517205, -3037000498, x1, 1688, x6)

inst_231:
// rs1_val==6148914691236517205 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506221, 6148914691236517205, 3037000500, x1, 1696, x6)

inst_232:
// rs1_val==-6148914691236517206 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa7, -6148914691236517206, 3, x1, 1704, x6)

inst_233:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555555, -6148914691236517206, 6148914691236517205, x1, 1712, x6)

inst_234:
// rs1_val==-6148914691236517206 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x0, -6148914691236517206, -6148914691236517206, x1, 1720, x6)

inst_235:
// rs1_val==-6148914691236517206 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa5, -6148914691236517206, 5, x1, 1728, x6)

inst_236:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x7777777777777777, -6148914691236517206, 3689348814741910323, x1, 1736, x6)

inst_237:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x4444444444444444, -6148914691236517206, 7378697629483820646, x1, 1744, x6)

inst_238:
// rs1_val==-6148914691236517206 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddd, -6148914691236517206, -3037000499, x1, 1752, x6)

inst_239:
// rs1_val==-6148914691236517206 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b777, -6148914691236517206, 3037000499, x1, 1760, x6)

inst_240:
// rs1_val==-6148914691236517206 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa8, -6148914691236517206, 2, x1, 1768, x6)

inst_241:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555556, -6148914691236517206, 6148914691236517204, x1, 1776, x6)

inst_242:
// rs1_val==-6148914691236517206 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, -6148914691236517206, 0, x1, 1784, x6)

inst_243:
// rs1_val==-6148914691236517206 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa6, -6148914691236517206, 4, x1, 1792, x6)

inst_244:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x7777777777777778, -6148914691236517206, 3689348814741910322, x1, 1800, x6)

inst_245:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x4444444444444445, -6148914691236517206, 7378697629483820645, x1, 1808, x6)

inst_246:
// rs1_val==-6148914691236517206 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b778, -6148914691236517206, 3037000498, x1, 1816, x6)

inst_247:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555554, -6148914691236517206, 6148914691236517206, x1, 1824, x6)

inst_248:
// rs1_val==-6148914691236517206 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, -6148914691236517206, -6148914691236517205, x1, 1832, x6)

inst_249:
// rs1_val==-6148914691236517206 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa4, -6148914691236517206, 6, x1, 1840, x6)

inst_250:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x7777777777777776, -6148914691236517206, 3689348814741910324, x1, 1848, x6)

inst_251:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x4444444444444443, -6148914691236517206, 7378697629483820647, x1, 1856, x6)

inst_252:
// rs1_val==-6148914691236517206 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddc, -6148914691236517206, -3037000498, x1, 1864, x6)

inst_253:
// rs1_val==-6148914691236517206 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b776, -6148914691236517206, 3037000500, x1, 1872, x6)

inst_254:
// rs1_val==5 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x2, 5, 3, x1, 1880, x6)

inst_255:
// rs1_val==5 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaab0, 5, 6148914691236517205, x1, 1888, x6)

inst_256:
// rs1_val==5 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555555b, 5, -6148914691236517206, x1, 1896, x6)

inst_257:
// rs1_val==5 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x0, 5, 5, x1, 1904, x6)

inst_258:
// rs1_val==5 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd2, 5, 3689348814741910323, x1, 1912, x6)

inst_259:
// rs1_val==5 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999f, 5, 7378697629483820646, x1, 1920, x6)

inst_260:
// rs1_val==5 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xb504f338, 5, -3037000499, x1, 1928, x6)

inst_261:
// rs1_val==5 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd2, 5, 3037000499, x1, 1936, x6)

inst_262:
// rs1_val==5 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x3, 5, 2, x1, 1944, x6)

inst_263:
// rs1_val==5 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaab1, 5, 6148914691236517204, x1, 1952, x6)

inst_264:
// rs1_val==5 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x5, 5, 0, x1, 1960, x6)

inst_265:
// rs1_val==5 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x1, 5, 4, x1, 1968, x6)

inst_266:
// rs1_val==5 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd3, 5, 3689348814741910322, x1, 1976, x6)

inst_267:
// rs1_val==5 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x99999999999999a0, 5, 7378697629483820645, x1, 1984, x6)

inst_268:
// rs1_val==5 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd3, 5, 3037000498, x1, 1992, x6)

inst_269:
// rs1_val==5 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaaf, 5, 6148914691236517206, x1, 2000, x6)

inst_270:
// rs1_val==5 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555555a, 5, -6148914691236517205, x1, 2008, x6)

inst_271:
// rs1_val==5 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 5, 6, x1, 2016, x6)

inst_272:
// rs1_val==5 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd1, 5, 3689348814741910324, x1, 2024, x6)

inst_273:
// rs1_val==5 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999e, 5, 7378697629483820647, x1, 2032, x6)

inst_274:
// rs1_val==5 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xb504f337, 5, -3037000498, x1, 2040, x6)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_275:
// rs1_val==5 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd1, 5, 3037000500, x1, 0, x6)

inst_276:
// rs1_val==3689348814741910323 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333330, 3689348814741910323, 3, x1, 8, x6)

inst_277:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xddddddddddddddde, 3689348814741910323, 6148914691236517205, x1, 16, x6)

inst_278:
// rs1_val==3689348814741910323 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x8888888888888889, 3689348814741910323, -6148914691236517206, x1, 24, x6)

inst_279:
// rs1_val==3689348814741910323 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332e, 3689348814741910323, 5, x1, 32, x6)

inst_280:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x0, 3689348814741910323, 3689348814741910323, x1, 40, x6)

inst_281:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccd, 3689348814741910323, 7378697629483820646, x1, 48, x6)

inst_282:
// rs1_val==3689348814741910323 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x33333333e8382666, 3689348814741910323, -3037000499, x1, 56, x6)

inst_283:
// rs1_val==3689348814741910323 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e4000, 3689348814741910323, 3037000499, x1, 64, x6)

inst_284:
// rs1_val==3689348814741910323 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333331, 3689348814741910323, 2, x1, 72, x6)

inst_285:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddddddddddf, 3689348814741910323, 6148914691236517204, x1, 80, x6)

inst_286:
// rs1_val==3689348814741910323 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333333, 3689348814741910323, 0, x1, 88, x6)

inst_287:
// rs1_val==3689348814741910323 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332f, 3689348814741910323, 4, x1, 96, x6)

inst_288:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x1, 3689348814741910323, 3689348814741910322, x1, 104, x6)

inst_289:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccce, 3689348814741910323, 7378697629483820645, x1, 112, x6)

inst_290:
// rs1_val==3689348814741910323 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e4001, 3689348814741910323, 3037000498, x1, 120, x6)

inst_291:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddddddddddd, 3689348814741910323, 6148914691236517206, x1, 128, x6)

inst_292:
// rs1_val==3689348814741910323 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x8888888888888888, 3689348814741910323, -6148914691236517205, x1, 136, x6)

inst_293:
// rs1_val==3689348814741910323 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332d, 3689348814741910323, 6, x1, 144, x6)

inst_294:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 3689348814741910323, 3689348814741910324, x1, 152, x6)

inst_295:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccc, 3689348814741910323, 7378697629483820647, x1, 160, x6)

inst_296:
// rs1_val==3689348814741910323 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x33333333e8382665, 3689348814741910323, -3037000498, x1, 168, x6)

inst_297:
// rs1_val==3689348814741910323 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e3fff, 3689348814741910323, 3037000500, x1, 176, x6)

inst_298:
// rs1_val==7378697629483820646 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666663, 7378697629483820646, 3, x1, 184, x6)

inst_299:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111111, 7378697629483820646, 6148914691236517205, x1, 192, x6)

inst_300:
// rs1_val==7378697629483820646 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666661, 7378697629483820646, 5, x1, 200, x6)

inst_301:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333333, 7378697629483820646, 3689348814741910323, x1, 208, x6)

inst_302:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x0, 7378697629483820646, 7378697629483820646, x1, 216, x6)

inst_303:
// rs1_val==7378697629483820646 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x666666671b6b5999, 7378697629483820646, -3037000499, x1, 224, x6)

inst_304:
// rs1_val==7378697629483820646 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617333, 7378697629483820646, 3037000499, x1, 232, x6)

inst_305:
// rs1_val==7378697629483820646 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666664, 7378697629483820646, 2, x1, 240, x6)

inst_306:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111112, 7378697629483820646, 6148914691236517204, x1, 248, x6)

inst_307:
// rs1_val==7378697629483820646 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666666, 7378697629483820646, 0, x1, 256, x6)

inst_308:
// rs1_val==7378697629483820646 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666662, 7378697629483820646, 4, x1, 264, x6)

inst_309:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333334, 7378697629483820646, 3689348814741910322, x1, 272, x6)

inst_310:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x1, 7378697629483820646, 7378697629483820645, x1, 280, x6)

inst_311:
// rs1_val==7378697629483820646 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617334, 7378697629483820646, 3037000498, x1, 288, x6)

inst_312:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111110, 7378697629483820646, 6148914691236517206, x1, 296, x6)

inst_313:
// rs1_val==7378697629483820646 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbbbbbbbbbb, 7378697629483820646, -6148914691236517205, x1, 304, x6)

inst_314:
// rs1_val==7378697629483820646 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666660, 7378697629483820646, 6, x1, 312, x6)

inst_315:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333332, 7378697629483820646, 3689348814741910324, x1, 320, x6)

inst_316:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 7378697629483820646, 7378697629483820647, x1, 328, x6)

inst_317:
// rs1_val==7378697629483820646 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x666666671b6b5998, 7378697629483820646, -3037000498, x1, 336, x6)

inst_318:
// rs1_val==7378697629483820646 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617332, 7378697629483820646, 3037000500, x1, 344, x6)

inst_319:
// rs1_val==-3037000499 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cca, -3037000499, 3, x1, 352, x6)

inst_320:
// rs1_val==-3037000499 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b778, -3037000499, 6148914691236517205, x1, 360, x6)

inst_321:
// rs1_val==-3037000499 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506223, -3037000499, -6148914691236517206, x1, 368, x6)

inst_322:
// rs1_val==-3037000499 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cc8, -3037000499, 5, x1, 376, x6)

inst_323:
// rs1_val==-3037000499 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc17c7d99a, -3037000499, 3689348814741910323, x1, 384, x6)

inst_324:
// rs1_val==-3037000499 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x99999998e494a667, -3037000499, 7378697629483820646, x1, 392, x6)

inst_325:
// rs1_val==-3037000499 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x0, -3037000499, -3037000499, x1, 400, x6)

inst_326:
// rs1_val==-3037000499 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe95f6199a, -3037000499, 3037000499, x1, 408, x6)

inst_327:
// rs1_val==-3037000499 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccb, -3037000499, 2, x1, 416, x6)

inst_328:
// rs1_val==-3037000499 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b779, -3037000499, 6148914691236517204, x1, 424, x6)

inst_329:
// rs1_val==-3037000499 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccd, -3037000499, 0, x1, 432, x6)

inst_330:
// rs1_val==-3037000499 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cc9, -3037000499, 4, x1, 440, x6)

inst_331:
// rs1_val==-3037000499 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc17c7d99b, -3037000499, 3689348814741910322, x1, 448, x6)

inst_332:
// rs1_val==-3037000499 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x99999998e494a668, -3037000499, 7378697629483820645, x1, 456, x6)

inst_333:
// rs1_val==-3037000499 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe95f6199b, -3037000499, 3037000498, x1, 464, x6)

inst_334:
// rs1_val==-3037000499 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b777, -3037000499, 6148914691236517206, x1, 472, x6)

inst_335:
// rs1_val==-3037000499 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506222, -3037000499, -6148914691236517205, x1, 480, x6)

inst_336:
// rs1_val==-3037000499 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cc7, -3037000499, 6, x1, 488, x6)

inst_337:
// rs1_val==-3037000499 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc17c7d999, -3037000499, 3689348814741910324, x1, 496, x6)

inst_338:
// rs1_val==-3037000499 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x99999998e494a666, -3037000499, 7378697629483820647, x1, 504, x6)

inst_339:
// rs1_val==-3037000499 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, -3037000499, -3037000498, x1, 512, x6)

inst_340:
// rs1_val==-3037000499 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe95f61999, -3037000499, 3037000500, x1, 520, x6)

inst_341:
// rs1_val==3037000499 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xb504f330, 3037000499, 3, x1, 528, x6)

inst_342:
// rs1_val==3037000499 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9dde, 3037000499, 6148914691236517205, x1, 536, x6)

inst_343:
// rs1_val==3037000499 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4889, 3037000499, -6148914691236517206, x1, 544, x6)

inst_344:
// rs1_val==3037000499 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32e, 3037000499, 5, x1, 552, x6)

inst_345:
// rs1_val==3037000499 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1c000, 3037000499, 3689348814741910323, x1, 560, x6)

inst_346:
// rs1_val==3037000499 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8ccd, 3037000499, 7378697629483820646, x1, 568, x6)

inst_347:
// rs1_val==3037000499 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x16a09e666, 3037000499, -3037000499, x1, 576, x6)

inst_348:
// rs1_val==3037000499 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x0, 3037000499, 3037000499, x1, 584, x6)

inst_349:
// rs1_val==3037000499 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xb504f331, 3037000499, 2, x1, 592, x6)

inst_350:
// rs1_val==3037000499 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddf, 3037000499, 6148914691236517204, x1, 600, x6)

inst_351:
// rs1_val==3037000499 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xb504f333, 3037000499, 0, x1, 608, x6)

inst_352:
// rs1_val==3037000499 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32f, 3037000499, 4, x1, 616, x6)

inst_353:
// rs1_val==3037000499 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1c001, 3037000499, 3689348814741910322, x1, 624, x6)

inst_354:
// rs1_val==3037000499 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8cce, 3037000499, 7378697629483820645, x1, 632, x6)

inst_355:
// rs1_val==3037000499 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x1, 3037000499, 3037000498, x1, 640, x6)

inst_356:
// rs1_val==3037000499 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddd, 3037000499, 6148914691236517206, x1, 648, x6)

inst_357:
// rs1_val==3037000499 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4888, 3037000499, -6148914691236517205, x1, 656, x6)

inst_358:
// rs1_val==3037000499 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32d, 3037000499, 6, x1, 664, x6)

inst_359:
// rs1_val==3037000499 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1bfff, 3037000499, 3689348814741910324, x1, 672, x6)

inst_360:
// rs1_val==3037000499 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8ccc, 3037000499, 7378697629483820647, x1, 680, x6)

inst_361:
// rs1_val==3037000499 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x16a09e665, 3037000499, -3037000498, x1, 688, x6)

inst_362:
// rs1_val==3037000499 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 3037000499, 3037000500, x1, 696, x6)

inst_363:
// rs1_val==2 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 2, 3, x1, 704, x6)

inst_364:
// rs1_val==2 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaad, 2, 6148914691236517205, x1, 712, x6)

inst_365:
// rs1_val==2 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555558, 2, -6148914691236517206, x1, 720, x6)

inst_366:
// rs1_val==2 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffd, 2, 5, x1, 728, x6)

inst_367:
// rs1_val==2 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccf, 2, 3689348814741910323, x1, 736, x6)

inst_368:
// rs1_val==2 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999c, 2, 7378697629483820646, x1, 744, x6)

inst_369:
// rs1_val==2 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xb504f335, 2, -3037000499, x1, 752, x6)

inst_370:
// rs1_val==2 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccf, 2, 3037000499, x1, 760, x6)

inst_371:
// rs1_val==2 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x0, 2, 2, x1, 768, x6)

inst_372:
// rs1_val==2 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaae, 2, 6148914691236517204, x1, 776, x6)

inst_373:
// rs1_val==2 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x2, 2, 0, x1, 784, x6)

inst_374:
// rs1_val==2 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 2, 4, x1, 792, x6)

inst_375:
// rs1_val==2 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd0, 2, 3689348814741910322, x1, 800, x6)

inst_376:
// rs1_val==2 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999d, 2, 7378697629483820645, x1, 808, x6)

inst_377:
// rs1_val==2 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd0, 2, 3037000498, x1, 816, x6)

inst_378:
// rs1_val==2 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaac, 2, 6148914691236517206, x1, 824, x6)

inst_379:
// rs1_val==2 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555557, 2, -6148914691236517205, x1, 832, x6)

inst_380:
// rs1_val==2 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffc, 2, 6, x1, 840, x6)

inst_381:
// rs1_val==2 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccce, 2, 3689348814741910324, x1, 848, x6)

inst_382:
// rs1_val==2 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999b, 2, 7378697629483820647, x1, 856, x6)

inst_383:
// rs1_val==2 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xb504f334, 2, -3037000498, x1, 864, x6)

inst_384:
// rs1_val==2 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cce, 2, 3037000500, x1, 872, x6)

inst_385:
// rs1_val==6148914691236517204 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555551, 6148914691236517204, 3, x1, 880, x6)

inst_386:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 6148914691236517204, 6148914691236517205, x1, 888, x6)

inst_387:
// rs1_val==6148914691236517204 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, 6148914691236517204, -6148914691236517206, x1, 896, x6)

inst_388:
// rs1_val==6148914691236517204 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555554f, 6148914691236517204, 5, x1, 904, x6)

inst_389:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222221, 6148914691236517204, 3689348814741910323, x1, 912, x6)

inst_390:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeeee, 6148914691236517204, 7378697629483820646, x1, 920, x6)

inst_391:
// rs1_val==6148914691236517204 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4887, 6148914691236517204, -3037000499, x1, 928, x6)

inst_392:
// rs1_val==6148914691236517204 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506221, 6148914691236517204, 3037000499, x1, 936, x6)

inst_393:
// rs1_val==6148914691236517204 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555552, 6148914691236517204, 2, x1, 944, x6)

inst_394:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x0, 6148914691236517204, 6148914691236517204, x1, 952, x6)

inst_395:
// rs1_val==6148914691236517204 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555554, 6148914691236517204, 0, x1, 960, x6)

inst_396:
// rs1_val==6148914691236517204 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555550, 6148914691236517204, 4, x1, 968, x6)

inst_397:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222222, 6148914691236517204, 3689348814741910322, x1, 976, x6)

inst_398:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeeef, 6148914691236517204, 7378697629483820645, x1, 984, x6)

inst_399:
// rs1_val==6148914691236517204 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506222, 6148914691236517204, 3037000498, x1, 992, x6)

inst_400:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 6148914691236517204, 6148914691236517206, x1, 1000, x6)

inst_401:
// rs1_val==6148914691236517204 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa9, 6148914691236517204, -6148914691236517205, x1, 1008, x6)

inst_402:
// rs1_val==6148914691236517204 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555554e, 6148914691236517204, 6, x1, 1016, x6)

inst_403:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222220, 6148914691236517204, 3689348814741910324, x1, 1024, x6)

inst_404:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeeed, 6148914691236517204, 7378697629483820647, x1, 1032, x6)

inst_405:
// rs1_val==6148914691236517204 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4886, 6148914691236517204, -3037000498, x1, 1040, x6)

inst_406:
// rs1_val==6148914691236517204 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506220, 6148914691236517204, 3037000500, x1, 1048, x6)

inst_407:
// rs1_val==0 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffd, 0, 3, x1, 1056, x6)

inst_408:
// rs1_val==0 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaab, 0, 6148914691236517205, x1, 1064, x6)

inst_409:
// rs1_val==0 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555556, 0, -6148914691236517206, x1, 1072, x6)

inst_410:
// rs1_val==0 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffb, 0, 5, x1, 1080, x6)

inst_411:
// rs1_val==0 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccd, 0, 3689348814741910323, x1, 1088, x6)

inst_412:
// rs1_val==0 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999a, 0, 7378697629483820646, x1, 1096, x6)

inst_413:
// rs1_val==0 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xb504f333, 0, -3037000499, x1, 1104, x6)

inst_414:
// rs1_val==0 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccd, 0, 3037000499, x1, 1112, x6)

inst_415:
// rs1_val==0 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 0, 2, x1, 1120, x6)

inst_416:
// rs1_val==0 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xb504f332, 0, -3037000498, x1, 1128, x6)

inst_417:
// rs1_val==0 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccc, 0, 3037000500, x1, 1136, x6)

inst_418:
// rs1_val==4 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x1, 4, 3, x1, 1144, x6)

inst_419:
// rs1_val==4 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaaf, 4, 6148914691236517205, x1, 1152, x6)

inst_420:
// rs1_val==4 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555555a, 4, -6148914691236517206, x1, 1160, x6)

inst_421:
// rs1_val==4 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 4, 5, x1, 1168, x6)

inst_422:
// rs1_val==4 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd1, 4, 3689348814741910323, x1, 1176, x6)

inst_423:
// rs1_val==4 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999e, 4, 7378697629483820646, x1, 1184, x6)

inst_424:
// rs1_val==4 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xb504f337, 4, -3037000499, x1, 1192, x6)

inst_425:
// rs1_val==4 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd1, 4, 3037000499, x1, 1200, x6)

inst_426:
// rs1_val==4 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x2, 4, 2, x1, 1208, x6)

inst_427:
// rs1_val==4 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaab0, 4, 6148914691236517204, x1, 1216, x6)

inst_428:
// rs1_val==4 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x4, 4, 0, x1, 1224, x6)

inst_429:
// rs1_val==4 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x0, 4, 4, x1, 1232, x6)

inst_430:
// rs1_val==4 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd2, 4, 3689348814741910322, x1, 1240, x6)

inst_431:
// rs1_val==4 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999f, 4, 7378697629483820645, x1, 1248, x6)

inst_432:
// rs1_val==4 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd2, 4, 3037000498, x1, 1256, x6)

inst_433:
// rs1_val==4 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaae, 4, 6148914691236517206, x1, 1264, x6)

inst_434:
// rs1_val==4 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555559, 4, -6148914691236517205, x1, 1272, x6)

inst_435:
// rs1_val==4 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 4, 6, x1, 1280, x6)

inst_436:
// rs1_val==4 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd0, 4, 3689348814741910324, x1, 1288, x6)

inst_437:
// rs1_val==4 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999d, 4, 7378697629483820647, x1, 1296, x6)

inst_438:
// rs1_val==4 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xb504f336, 4, -3037000498, x1, 1304, x6)

inst_439:
// rs1_val==4 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd0, 4, 3037000500, x1, 1312, x6)

inst_440:
// rs1_val==3689348814741910322 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332f, 3689348814741910322, 3, x1, 1320, x6)

inst_441:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddddddddddd, 3689348814741910322, 6148914691236517205, x1, 1328, x6)

inst_442:
// rs1_val==3689348814741910322 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x8888888888888888, 3689348814741910322, -6148914691236517206, x1, 1336, x6)

inst_443:
// rs1_val==3689348814741910322 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332d, 3689348814741910322, 5, x1, 1344, x6)

inst_444:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 3689348814741910322, 3689348814741910323, x1, 1352, x6)

inst_445:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccc, 3689348814741910322, 7378697629483820646, x1, 1360, x6)

inst_446:
// rs1_val==3689348814741910322 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x33333333e8382665, 3689348814741910322, -3037000499, x1, 1368, x6)

inst_447:
// rs1_val==3689348814741910322 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e3fff, 3689348814741910322, 3037000499, x1, 1376, x6)

inst_448:
// rs1_val==3689348814741910322 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333330, 3689348814741910322, 2, x1, 1384, x6)

inst_449:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xddddddddddddddde, 3689348814741910322, 6148914691236517204, x1, 1392, x6)

inst_450:
// rs1_val==3689348814741910322 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333332, 3689348814741910322, 0, x1, 1400, x6)

inst_451:
// rs1_val==3689348814741910322 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332e, 3689348814741910322, 4, x1, 1408, x6)

inst_452:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x0, 3689348814741910322, 3689348814741910322, x1, 1416, x6)

inst_453:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccd, 3689348814741910322, 7378697629483820645, x1, 1424, x6)

inst_454:
// rs1_val==3689348814741910322 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e4000, 3689348814741910322, 3037000498, x1, 1432, x6)

inst_455:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddddddddddc, 3689348814741910322, 6148914691236517206, x1, 1440, x6)

inst_456:
// rs1_val==3689348814741910322 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x8888888888888887, 3689348814741910322, -6148914691236517205, x1, 1448, x6)

inst_457:
// rs1_val==3689348814741910322 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332c, 3689348814741910322, 6, x1, 1456, x6)

inst_458:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 3689348814741910322, 3689348814741910324, x1, 1464, x6)

inst_459:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccb, 3689348814741910322, 7378697629483820647, x1, 1472, x6)

inst_460:
// rs1_val==3689348814741910322 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x33333333e8382664, 3689348814741910322, -3037000498, x1, 1480, x6)

inst_461:
// rs1_val==3689348814741910322 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e3ffe, 3689348814741910322, 3037000500, x1, 1488, x6)

inst_462:
// rs1_val==7378697629483820645 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666662, 7378697629483820645, 3, x1, 1496, x6)

inst_463:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111110, 7378697629483820645, 6148914691236517205, x1, 1504, x6)

inst_464:
// rs1_val==7378697629483820645 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbbbbbbbbbb, 7378697629483820645, -6148914691236517206, x1, 1512, x6)

inst_465:
// rs1_val==7378697629483820645 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666660, 7378697629483820645, 5, x1, 1520, x6)

inst_466:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333332, 7378697629483820645, 3689348814741910323, x1, 1528, x6)

inst_467:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 7378697629483820645, 7378697629483820646, x1, 1536, x6)

inst_468:
// rs1_val==7378697629483820645 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x666666671b6b5998, 7378697629483820645, -3037000499, x1, 1544, x6)

inst_469:
// rs1_val==7378697629483820645 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617332, 7378697629483820645, 3037000499, x1, 1552, x6)

inst_470:
// rs1_val==7378697629483820645 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666663, 7378697629483820645, 2, x1, 1560, x6)

inst_471:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111111, 7378697629483820645, 6148914691236517204, x1, 1568, x6)

inst_472:
// rs1_val==7378697629483820645 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666665, 7378697629483820645, 0, x1, 1576, x6)

inst_473:
// rs1_val==7378697629483820645 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666661, 7378697629483820645, 4, x1, 1584, x6)

inst_474:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333333, 7378697629483820645, 3689348814741910322, x1, 1592, x6)

inst_475:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x0, 7378697629483820645, 7378697629483820645, x1, 1600, x6)

inst_476:
// rs1_val==7378697629483820645 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617333, 7378697629483820645, 3037000498, x1, 1608, x6)

inst_477:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x111111111111110f, 7378697629483820645, 6148914691236517206, x1, 1616, x6)

inst_478:
// rs1_val==7378697629483820645 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbbbbbbbbba, 7378697629483820645, -6148914691236517205, x1, 1624, x6)

inst_479:
// rs1_val==7378697629483820645 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x666666666666665f, 7378697629483820645, 6, x1, 1632, x6)

inst_480:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333331, 7378697629483820645, 3689348814741910324, x1, 1640, x6)

inst_481:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 7378697629483820645, 7378697629483820647, x1, 1648, x6)

inst_482:
// rs1_val==7378697629483820645 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x666666671b6b5997, 7378697629483820645, -3037000498, x1, 1656, x6)

inst_483:
// rs1_val==7378697629483820645 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617331, 7378697629483820645, 3037000500, x1, 1664, x6)

inst_484:
// rs1_val==3037000498 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32f, 3037000498, 3, x1, 1672, x6)

inst_485:
// rs1_val==3037000498 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddd, 3037000498, 6148914691236517205, x1, 1680, x6)

inst_486:
// rs1_val==3037000498 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4888, 3037000498, -6148914691236517206, x1, 1688, x6)

inst_487:
// rs1_val==3037000498 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32d, 3037000498, 5, x1, 1696, x6)

inst_488:
// rs1_val==3037000498 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1bfff, 3037000498, 3689348814741910323, x1, 1704, x6)

inst_489:
// rs1_val==3037000498 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8ccc, 3037000498, 7378697629483820646, x1, 1712, x6)

inst_490:
// rs1_val==3037000498 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x16a09e665, 3037000498, -3037000499, x1, 1720, x6)

inst_491:
// rs1_val==3037000498 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xffffffffffffffff, 3037000498, 3037000499, x1, 1728, x6)

inst_492:
// rs1_val==3037000498 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xb504f330, 3037000498, 2, x1, 1736, x6)

inst_493:
// rs1_val==3037000498 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9dde, 3037000498, 6148914691236517204, x1, 1744, x6)

inst_494:
// rs1_val==3037000498 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xb504f332, 3037000498, 0, x1, 1752, x6)

inst_495:
// rs1_val==3037000498 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32e, 3037000498, 4, x1, 1760, x6)

inst_496:
// rs1_val==3037000498 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1c000, 3037000498, 3689348814741910322, x1, 1768, x6)

inst_497:
// rs1_val==3037000498 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8ccd, 3037000498, 7378697629483820645, x1, 1776, x6)

inst_498:
// rs1_val==3037000498 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x0, 3037000498, 3037000498, x1, 1784, x6)

inst_499:
// rs1_val==3037000498 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddc, 3037000498, 6148914691236517206, x1, 1792, x6)

inst_500:
// rs1_val==3037000498 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4887, 3037000498, -6148914691236517205, x1, 1800, x6)

inst_501:
// rs1_val==3037000498 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32c, 3037000498, 6, x1, 1808, x6)

inst_502:
// rs1_val==3037000498 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1bffe, 3037000498, 3689348814741910324, x1, 1816, x6)

inst_503:
// rs1_val==3037000498 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8ccb, 3037000498, 7378697629483820647, x1, 1824, x6)

inst_504:
// rs1_val==3037000498 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x16a09e664, 3037000498, -3037000498, x1, 1832, x6)

inst_505:
// rs1_val==3037000498 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffe, 3037000498, 3037000500, x1, 1840, x6)

inst_506:
// rs1_val==6148914691236517206 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555553, 6148914691236517206, 3, x1, 1848, x6)

inst_507:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x1, 6148914691236517206, 6148914691236517205, x1, 1856, x6)

inst_508:
// rs1_val==6148914691236517206 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaac, 6148914691236517206, -6148914691236517206, x1, 1864, x6)

inst_509:
// rs1_val==6148914691236517206 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555551, 6148914691236517206, 5, x1, 1872, x6)

inst_510:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222223, 6148914691236517206, 3689348814741910323, x1, 1880, x6)

inst_511:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeef0, 6148914691236517206, 7378697629483820646, x1, 1888, x6)

inst_512:
// rs1_val==6148914691236517206 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4889, 6148914691236517206, -3037000499, x1, 1896, x6)

inst_513:
// rs1_val==6148914691236517206 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506223, 6148914691236517206, 3037000499, x1, 1904, x6)

inst_514:
// rs1_val==6148914691236517206 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555554, 6148914691236517206, 2, x1, 1912, x6)

inst_515:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x2, 6148914691236517206, 6148914691236517204, x1, 1920, x6)

inst_516:
// rs1_val==6148914691236517206 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555556, 6148914691236517206, 0, x1, 1928, x6)

inst_517:
// rs1_val==6148914691236517206 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555552, 6148914691236517206, 4, x1, 1936, x6)

inst_518:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222224, 6148914691236517206, 3689348814741910322, x1, 1944, x6)

inst_519:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeef1, 6148914691236517206, 7378697629483820645, x1, 1952, x6)

inst_520:
// rs1_val==6148914691236517206 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506224, 6148914691236517206, 3037000498, x1, 1960, x6)

inst_521:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x0, 6148914691236517206, 6148914691236517206, x1, 1968, x6)

inst_522:
// rs1_val==6148914691236517206 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaab, 6148914691236517206, -6148914691236517205, x1, 1976, x6)

inst_523:
// rs1_val==6148914691236517206 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555550, 6148914691236517206, 6, x1, 1984, x6)

inst_524:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x2222222222222222, 6148914691236517206, 3689348814741910324, x1, 1992, x6)

inst_525:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeeeeeeeeeef, 6148914691236517206, 7378697629483820647, x1, 2000, x6)

inst_526:
// rs1_val==6148914691236517206 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4888, 6148914691236517206, -3037000498, x1, 2008, x6)

inst_527:
// rs1_val==6148914691236517206 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506222, 6148914691236517206, 3037000500, x1, 2016, x6)

inst_528:
// rs1_val==-6148914691236517205 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa8, -6148914691236517205, 3, x1, 2024, x6)

inst_529:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555556, -6148914691236517205, 6148914691236517205, x1, 2032, x6)

inst_530:
// rs1_val==-6148914691236517205 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x1, -6148914691236517205, -6148914691236517206, x1, 2040, x6)
RVTEST_SIGBASE( x1,signature_x1_2)

inst_531:
// rs1_val==-6148914691236517205 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa6, -6148914691236517205, 5, x1, 0, x6)

inst_532:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x7777777777777778, -6148914691236517205, 3689348814741910323, x1, 8, x6)

inst_533:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x4444444444444445, -6148914691236517205, 7378697629483820646, x1, 16, x6)

inst_534:
// rs1_val==-6148914691236517205 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9dde, -6148914691236517205, -3037000499, x1, 24, x6)

inst_535:
// rs1_val==-6148914691236517205 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b778, -6148914691236517205, 3037000499, x1, 32, x6)

inst_536:
// rs1_val==-6148914691236517205 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa9, -6148914691236517205, 2, x1, 40, x6)

inst_537:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555557, -6148914691236517205, 6148914691236517204, x1, 48, x6)

inst_538:
// rs1_val==-6148914691236517205 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaab, -6148914691236517205, 0, x1, 56, x6)

inst_539:
// rs1_val==-6148914691236517205 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa7, -6148914691236517205, 4, x1, 64, x6)

inst_540:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x7777777777777779, -6148914691236517205, 3689348814741910322, x1, 72, x6)

inst_541:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x4444444444444446, -6148914691236517205, 7378697629483820645, x1, 80, x6)

inst_542:
// rs1_val==-6148914691236517205 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b779, -6148914691236517205, 3037000498, x1, 88, x6)

inst_543:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555555, -6148914691236517205, 6148914691236517206, x1, 96, x6)

inst_544:
// rs1_val==-6148914691236517205 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x0, -6148914691236517205, -6148914691236517205, x1, 104, x6)

inst_545:
// rs1_val==-6148914691236517205 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaa5, -6148914691236517205, 6, x1, 112, x6)

inst_546:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x7777777777777777, -6148914691236517205, 3689348814741910324, x1, 120, x6)

inst_547:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x4444444444444444, -6148914691236517205, 7378697629483820647, x1, 128, x6)

inst_548:
// rs1_val==-6148914691236517205 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddd, -6148914691236517205, -3037000498, x1, 136, x6)

inst_549:
// rs1_val==-6148914691236517205 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b777, -6148914691236517205, 3037000500, x1, 144, x6)

inst_550:
// rs1_val==6 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x3, 6, 3, x1, 152, x6)

inst_551:
// rs1_val==6 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaab1, 6, 6148914691236517205, x1, 160, x6)

inst_552:
// rs1_val==6 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555555c, 6, -6148914691236517206, x1, 168, x6)

inst_553:
// rs1_val==6 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x1, 6, 5, x1, 176, x6)

inst_554:
// rs1_val==6 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd3, 6, 3689348814741910323, x1, 184, x6)

inst_555:
// rs1_val==6 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x99999999999999a0, 6, 7378697629483820646, x1, 192, x6)

inst_556:
// rs1_val==6 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xb504f339, 6, -3037000499, x1, 200, x6)

inst_557:
// rs1_val==6 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd3, 6, 3037000499, x1, 208, x6)

inst_558:
// rs1_val==6 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x4, 6, 2, x1, 216, x6)

inst_559:
// rs1_val==6 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaab2, 6, 6148914691236517204, x1, 224, x6)

inst_560:
// rs1_val==6 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x6, 6, 0, x1, 232, x6)

inst_561:
// rs1_val==6 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x2, 6, 4, x1, 240, x6)

inst_562:
// rs1_val==6 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd4, 6, 3689348814741910322, x1, 248, x6)

inst_563:
// rs1_val==6 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x99999999999999a1, 6, 7378697629483820645, x1, 256, x6)

inst_564:
// rs1_val==6 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd4, 6, 3037000498, x1, 264, x6)

inst_565:
// rs1_val==6 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaab0, 6, 6148914691236517206, x1, 272, x6)

inst_566:
// rs1_val==6 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x555555555555555b, 6, -6148914691236517205, x1, 280, x6)

inst_567:
// rs1_val==6 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x0, 6, 6, x1, 288, x6)

inst_568:
// rs1_val==6 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccd2, 6, 3689348814741910324, x1, 296, x6)

inst_569:
// rs1_val==6 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999f, 6, 7378697629483820647, x1, 304, x6)

inst_570:
// rs1_val==6 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xb504f338, 6, -3037000498, x1, 312, x6)

inst_571:
// rs1_val==6 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cd2, 6, 3037000500, x1, 320, x6)

inst_572:
// rs1_val==3689348814741910324 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333331, 3689348814741910324, 3, x1, 328, x6)

inst_573:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddddddddddf, 3689348814741910324, 6148914691236517205, x1, 336, x6)

inst_574:
// rs1_val==3689348814741910324 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x888888888888888a, 3689348814741910324, -6148914691236517206, x1, 344, x6)

inst_575:
// rs1_val==3689348814741910324 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332f, 3689348814741910324, 5, x1, 352, x6)

inst_576:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x1, 3689348814741910324, 3689348814741910323, x1, 360, x6)

inst_577:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccce, 3689348814741910324, 7378697629483820646, x1, 368, x6)

inst_578:
// rs1_val==3689348814741910324 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x33333333e8382667, 3689348814741910324, -3037000499, x1, 376, x6)

inst_579:
// rs1_val==3689348814741910324 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e4001, 3689348814741910324, 3037000499, x1, 384, x6)

inst_580:
// rs1_val==3689348814741910324 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333332, 3689348814741910324, 2, x1, 392, x6)

inst_581:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddddddddde0, 3689348814741910324, 6148914691236517204, x1, 400, x6)

inst_582:
// rs1_val==3689348814741910324 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333334, 3689348814741910324, 0, x1, 408, x6)

inst_583:
// rs1_val==3689348814741910324 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333330, 3689348814741910324, 4, x1, 416, x6)

inst_584:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x2, 3689348814741910324, 3689348814741910322, x1, 424, x6)

inst_585:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccf, 3689348814741910324, 7378697629483820645, x1, 432, x6)

inst_586:
// rs1_val==3689348814741910324 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e4002, 3689348814741910324, 3037000498, x1, 440, x6)

inst_587:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xddddddddddddddde, 3689348814741910324, 6148914691236517206, x1, 448, x6)

inst_588:
// rs1_val==3689348814741910324 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x8888888888888889, 3689348814741910324, -6148914691236517205, x1, 456, x6)

inst_589:
// rs1_val==3689348814741910324 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x333333333333332e, 3689348814741910324, 6, x1, 464, x6)

inst_590:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x0, 3689348814741910324, 3689348814741910324, x1, 472, x6)

inst_591:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccd, 3689348814741910324, 7378697629483820647, x1, 480, x6)

inst_592:
// rs1_val==3689348814741910324 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x33333333e8382666, 3689348814741910324, -3037000498, x1, 488, x6)

inst_593:
// rs1_val==3689348814741910324 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x333333327e2e4000, 3689348814741910324, 3037000500, x1, 496, x6)

inst_594:
// rs1_val==7378697629483820647 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666664, 7378697629483820647, 3, x1, 504, x6)

inst_595:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111112, 7378697629483820647, 6148914691236517205, x1, 512, x6)

inst_596:
// rs1_val==7378697629483820647 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbbbbbbbbbd, 7378697629483820647, -6148914691236517206, x1, 520, x6)

inst_597:
// rs1_val==7378697629483820647 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666662, 7378697629483820647, 5, x1, 528, x6)

inst_598:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333334, 7378697629483820647, 3689348814741910323, x1, 536, x6)

inst_599:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x1, 7378697629483820647, 7378697629483820646, x1, 544, x6)

inst_600:
// rs1_val==7378697629483820647 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x666666671b6b599a, 7378697629483820647, -3037000499, x1, 552, x6)

inst_601:
// rs1_val==7378697629483820647 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617334, 7378697629483820647, 3037000499, x1, 560, x6)

inst_602:
// rs1_val==7378697629483820647 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666665, 7378697629483820647, 2, x1, 568, x6)

inst_603:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111113, 7378697629483820647, 6148914691236517204, x1, 576, x6)

inst_604:
// rs1_val==7378697629483820647 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666667, 7378697629483820647, 0, x1, 584, x6)

inst_605:
// rs1_val==7378697629483820647 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666663, 7378697629483820647, 4, x1, 592, x6)

inst_606:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333335, 7378697629483820647, 3689348814741910322, x1, 600, x6)

inst_607:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x2, 7378697629483820647, 7378697629483820645, x1, 608, x6)

inst_608:
// rs1_val==7378697629483820647 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617335, 7378697629483820647, 3037000498, x1, 616, x6)

inst_609:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x1111111111111111, 7378697629483820647, 6148914691236517206, x1, 624, x6)

inst_610:
// rs1_val==7378697629483820647 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbbbbbbbbbc, 7378697629483820647, -6148914691236517205, x1, 632, x6)

inst_611:
// rs1_val==7378697629483820647 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0x6666666666666661, 7378697629483820647, 6, x1, 640, x6)

inst_612:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0x3333333333333333, 7378697629483820647, 3689348814741910324, x1, 648, x6)

inst_613:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x0, 7378697629483820647, 7378697629483820647, x1, 656, x6)

inst_614:
// rs1_val==7378697629483820647 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x666666671b6b5999, 7378697629483820647, -3037000498, x1, 664, x6)

inst_615:
// rs1_val==7378697629483820647 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x66666665b1617333, 7378697629483820647, 3037000500, x1, 672, x6)

inst_616:
// rs1_val==-3037000498 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccb, -3037000498, 3, x1, 680, x6)

inst_617:
// rs1_val==-3037000498 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b779, -3037000498, 6148914691236517205, x1, 688, x6)

inst_618:
// rs1_val==-3037000498 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506224, -3037000498, -6148914691236517206, x1, 696, x6)

inst_619:
// rs1_val==-3037000498 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cc9, -3037000498, 5, x1, 704, x6)

inst_620:
// rs1_val==-3037000498 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc17c7d99b, -3037000498, 3689348814741910323, x1, 712, x6)

inst_621:
// rs1_val==-3037000498 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x99999998e494a668, -3037000498, 7378697629483820646, x1, 720, x6)

inst_622:
// rs1_val==-3037000498 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x1, -3037000498, -3037000499, x1, 728, x6)

inst_623:
// rs1_val==-3037000498 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe95f6199b, -3037000498, 3037000499, x1, 736, x6)

inst_624:
// rs1_val==-3037000498 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0ccc, -3037000498, 2, x1, 744, x6)

inst_625:
// rs1_val==-3037000498 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b77a, -3037000498, 6148914691236517204, x1, 752, x6)

inst_626:
// rs1_val==-3037000498 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cce, -3037000498, 0, x1, 760, x6)

inst_627:
// rs1_val==-3037000498 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cca, -3037000498, 4, x1, 768, x6)

inst_628:
// rs1_val==-3037000498 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc17c7d99c, -3037000498, 3689348814741910322, x1, 776, x6)

inst_629:
// rs1_val==-3037000498 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x99999998e494a669, -3037000498, 7378697629483820645, x1, 784, x6)

inst_630:
// rs1_val==-3037000498 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe95f6199c, -3037000498, 3037000498, x1, 792, x6)

inst_631:
// rs1_val==-3037000498 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9f5a5b778, -3037000498, 6148914691236517206, x1, 800, x6)

inst_632:
// rs1_val==-3037000498 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x55555554a0506223, -3037000498, -6148914691236517205, x1, 808, x6)

inst_633:
// rs1_val==-3037000498 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cc8, -3037000498, 6, x1, 816, x6)

inst_634:
// rs1_val==-3037000498 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc17c7d99a, -3037000498, 3689348814741910324, x1, 824, x6)

inst_635:
// rs1_val==-3037000498 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x99999998e494a667, -3037000498, 7378697629483820647, x1, 832, x6)

inst_636:
// rs1_val==-3037000498 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x0, -3037000498, -3037000498, x1, 840, x6)

inst_637:
// rs1_val==-3037000498 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe95f6199a, -3037000498, 3037000500, x1, 848, x6)

inst_638:
// rs1_val==3037000500 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3
TEST_RR_OP(sub, x12, x10, x11, 0xb504f331, 3037000500, 3, x1, 856, x6)

inst_639:
// rs1_val==3037000500 and rs2_val==6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9ddf, 3037000500, 6148914691236517205, x1, 864, x6)

inst_640:
// rs1_val==3037000500 and rs2_val==-6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:-6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a488a, 3037000500, -6148914691236517206, x1, 872, x6)

inst_641:
// rs1_val==3037000500 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:5
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32f, 3037000500, 5, x1, 880, x6)

inst_642:
// rs1_val==3037000500 and rs2_val==3689348814741910323, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3689348814741910323
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1c001, 3037000500, 3689348814741910323, x1, 888, x6)

inst_643:
// rs1_val==3037000500 and rs2_val==7378697629483820646, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:7378697629483820646
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8cce, 3037000500, 7378697629483820646, x1, 896, x6)

inst_644:
// rs1_val==3037000500 and rs2_val==-3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:-3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x16a09e667, 3037000500, -3037000499, x1, 904, x6)

inst_645:
// rs1_val==3037000500 and rs2_val==3037000499, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3037000499
TEST_RR_OP(sub, x12, x10, x11, 0x1, 3037000500, 3037000499, x1, 912, x6)

inst_646:
// rs1_val==3037000500 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:2
TEST_RR_OP(sub, x12, x10, x11, 0xb504f332, 3037000500, 2, x1, 920, x6)

inst_647:
// rs1_val==3037000500 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9de0, 3037000500, 6148914691236517204, x1, 928, x6)

inst_648:
// rs1_val==3037000500 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0xb504f334, 3037000500, 0, x1, 936, x6)

inst_649:
// rs1_val==3037000500 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xb504f330, 3037000500, 4, x1, 944, x6)

inst_650:
// rs1_val==3037000500 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1c002, 3037000500, 3689348814741910322, x1, 952, x6)

inst_651:
// rs1_val==3037000500 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8ccf, 3037000500, 7378697629483820645, x1, 960, x6)

inst_652:
// rs1_val==3037000500 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x2, 3037000500, 3037000498, x1, 968, x6)

inst_653:
// rs1_val==3037000500 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab5faf9dde, 3037000500, 6148914691236517206, x1, 976, x6)

inst_654:
// rs1_val==3037000500 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x555555560a5a4889, 3037000500, -6148914691236517205, x1, 984, x6)

inst_655:
// rs1_val==3037000500 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xb504f32e, 3037000500, 6, x1, 992, x6)

inst_656:
// rs1_val==3037000500 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd81d1c000, 3037000500, 3689348814741910324, x1, 1000, x6)

inst_657:
// rs1_val==3037000500 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a4e9e8ccd, 3037000500, 7378697629483820647, x1, 1008, x6)

inst_658:
// rs1_val==3037000500 and rs2_val==-3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:-3037000498
TEST_RR_OP(sub, x12, x10, x11, 0x16a09e666, 3037000500, -3037000498, x1, 1016, x6)

inst_659:
// rs1_val==3037000500 and rs2_val==3037000500, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3037000500
TEST_RR_OP(sub, x12, x10, x11, 0x0, 3037000500, 3037000500, x1, 1024, x6)

inst_660:
// rs1_val==0 and rs2_val==6148914691236517204, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6148914691236517204
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaac, 0, 6148914691236517204, x1, 1032, x6)

inst_661:
// rs1_val==0 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:0
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0, 0, x1, 1040, x6)

inst_662:
// rs1_val==0 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:4
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffc, 0, 4, x1, 1048, x6)

inst_663:
// rs1_val==0 and rs2_val==3689348814741910322, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3689348814741910322
TEST_RR_OP(sub, x12, x10, x11, 0xccccccccccccccce, 0, 3689348814741910322, x1, 1056, x6)

inst_664:
// rs1_val==0 and rs2_val==7378697629483820645, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:7378697629483820645
TEST_RR_OP(sub, x12, x10, x11, 0x999999999999999b, 0, 7378697629483820645, x1, 1064, x6)

inst_665:
// rs1_val==0 and rs2_val==3037000498, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3037000498
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff4afb0cce, 0, 3037000498, x1, 1072, x6)

inst_666:
// rs1_val==0 and rs2_val==6148914691236517206, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6148914691236517206
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, 0, 6148914691236517206, x1, 1080, x6)

inst_667:
// rs1_val==0 and rs2_val==-6148914691236517205, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-6148914691236517205
TEST_RR_OP(sub, x12, x10, x11, 0x5555555555555555, 0, -6148914691236517205, x1, 1088, x6)

inst_668:
// rs1_val==0 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffffffffffa, 0, 6, x1, 1096, x6)

inst_669:
// rs1_val==0 and rs2_val==3689348814741910324, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3689348814741910324
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccccccccccc, 0, 3689348814741910324, x1, 1104, x6)

inst_670:
// rs1_val==0 and rs2_val==7378697629483820647, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:7378697629483820647
TEST_RR_OP(sub, x12, x10, x11, 0x9999999999999999, 0, 7378697629483820647, x1, 1112, x6)

inst_671:
// rs1_val > 0 and rs2_val > 0, rs2_val == 68719476736, rs1_val == 274877906944, rs1_val != rs2_val
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:68719476736
TEST_RR_OP(sub, x12, x10, x11, 0x3000000000, 274877906944, 68719476736, x1, 1120, x6)

inst_672:
// rs1_val > 0 and rs2_val < 0, rs1_val == 16, rs2_val == -70368744177665
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:-70368744177665
TEST_RR_OP(sub, x12, x10, x11, 0x400000000011, 16, -70368744177665, x1, 1128, x6)

inst_673:
// rs1_val < 0 and rs2_val > 0, rs1_val == -562949953421313, rs2_val == 262144
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:262144
TEST_RR_OP(sub, x12, x10, x11, 0xfffdfffffffbffff, -562949953421313, 262144, x1, 1136, x6)

inst_674:
// rs1_val == 1, rs2_val == -72057594037927937
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:-72057594037927937
TEST_RR_OP(sub, x12, x10, x11, 0x100000000000002, 1, -72057594037927937, x1, 1144, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 144*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
