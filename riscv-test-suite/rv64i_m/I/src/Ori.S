
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",ori)
la x1,signature_x1_1
TEST_IMM_OP( ori, x31, x30, -9223372036854775809, -1, -1, x1, 0, x2)
TEST_IMM_OP( ori, x30, x31, -9223372036854775809, -1, 2047, x1, 8, x2)
TEST_IMM_OP( ori, x29, x28, 6148914691236517887, 6148914691236517205, 2047, x1, 16, x2)
TEST_IMM_OP( ori, x28, x29, -9223372036854775809, 6148914691236517205, -1, x1, 24, x2)
TEST_IMM_OP( ori, x27, x26, -18446744073709549569, -9223372036854775808, 2047, x1, 32, x2)
TEST_IMM_OP( ori, x26, x27, 2047, 0, 2047, x1, 40, x2)
TEST_IMM_OP( ori, x25, x24, 9223372036854775807, 9223372036854775807, 2047, x1, 48, x2)
TEST_IMM_OP( ori, x24, x25, 2047, 1, 2047, x1, 56, x2)
TEST_IMM_OP( ori, x23, x22, -9223372036854775809, -1, -2048, x1, 64, x2)
TEST_IMM_OP( ori, x22, x23, -9223372036854775809, -1, 0, x1, 72, x2)
TEST_IMM_OP( ori, x21, x20, -9223372036854775809, -1, 1, x1, 80, x2)
TEST_IMM_OP( ori, x20, x21, 2047, 2, 2047, x1, 88, x2)
TEST_IMM_OP( ori, x19, x18, 2047, 4, 2047, x1, 96, x2)
TEST_IMM_OP( ori, x18, x19, 2047, 8, 2047, x1, 104, x2)
TEST_IMM_OP( ori, x17, x16, 2047, 16, 2047, x1, 112, x2)
TEST_IMM_OP( ori, x16, x17, 2047, 32, 2047, x1, 120, x2)
TEST_IMM_OP( ori, x15, x14, 2047, 64, 2047, x1, 128, x2)
TEST_IMM_OP( ori, x14, x15, 2047, 128, 2047, x1, 136, x2)
TEST_IMM_OP( ori, x13, x12, 2047, 256, 2047, x1, 144, x2)
TEST_IMM_OP( ori, x12, x13, 2047, 512, 2047, x1, 152, x2)
TEST_IMM_OP( ori, x11, x10, 2047, 1024, 2047, x1, 160, x2)
TEST_IMM_OP( ori, x10, x11, 4095, 2048, 2047, x1, 168, x2)
TEST_IMM_OP( ori, x9, x8, 6143, 4096, 2047, x1, 176, x2)
TEST_IMM_OP( ori, x8, x9, 10239, 8192, 2047, x1, 184, x2)
TEST_IMM_OP( ori, x7, x6, 18431, 16384, 2047, x1, 192, x2)
TEST_IMM_OP( ori, x6, x7, 34815, 32768, 2047, x1, 200, x2)
TEST_IMM_OP( ori, x5, x4, 67583, 65536, 2047, x1, 208, x2)
la x6,signature_x6_0
TEST_IMM_OP( ori, x4, x5, 133119, 131072, 2047, x6, 0, x7)
TEST_IMM_OP( ori, x3, x2, 264191, 262144, 2047, x6, 8, x7)
TEST_IMM_OP( ori, x2, x3, 526335, 524288, 2047, x6, 16, x7)
TEST_IMM_OP( ori, x1, x0, 1050623, 1048576, 2047, x6, 24, x7)
TEST_IMM_OP( ori, x0, x1, 2099199, 2097152, 2047, x6, 32, x7)
TEST_IMM_OP( ori, x31, x31, 4196351, 4194304, 2047, x6, 40, x7)
TEST_IMM_OP( ori, x11, x10, 8390655, 8388608, 2047, x6, 48, x7)
TEST_IMM_OP( ori, x11, x10, 16779263, 16777216, 2047, x6, 56, x7)
TEST_IMM_OP( ori, x11, x10, 33556479, 33554432, 2047, x6, 64, x7)
TEST_IMM_OP( ori, x11, x10, 67110911, 67108864, 2047, x6, 72, x7)
TEST_IMM_OP( ori, x11, x10, 134219775, 134217728, 2047, x6, 80, x7)
TEST_IMM_OP( ori, x11, x10, 268437503, 268435456, 2047, x6, 88, x7)
TEST_IMM_OP( ori, x11, x10, 536872959, 536870912, 2047, x6, 96, x7)
TEST_IMM_OP( ori, x11, x10, 1073743871, 1073741824, 2047, x6, 104, x7)
TEST_IMM_OP( ori, x11, x10, 2147485695, 2147483648, 2047, x6, 112, x7)
TEST_IMM_OP( ori, x11, x10, 4294969343, 4294967296, 2047, x6, 120, x7)
TEST_IMM_OP( ori, x11, x10, 8589936639, 8589934592, 2047, x6, 128, x7)
TEST_IMM_OP( ori, x11, x10, 17179871231, 17179869184, 2047, x6, 136, x7)
TEST_IMM_OP( ori, x11, x10, 34359740415, 34359738368, 2047, x6, 144, x7)
TEST_IMM_OP( ori, x11, x10, 68719478783, 68719476736, 2047, x6, 152, x7)
TEST_IMM_OP( ori, x11, x10, 137438955519, 137438953472, 2047, x6, 160, x7)
TEST_IMM_OP( ori, x11, x10, 274877908991, 274877906944, 2047, x6, 168, x7)
TEST_IMM_OP( ori, x11, x10, 549755815935, 549755813888, 2047, x6, 176, x7)
TEST_IMM_OP( ori, x11, x10, 1099511629823, 1099511627776, 2047, x6, 184, x7)
TEST_IMM_OP( ori, x11, x10, 2199023257599, 2199023255552, 2047, x6, 192, x7)
TEST_IMM_OP( ori, x11, x10, 4398046513151, 4398046511104, 2047, x6, 200, x7)
TEST_IMM_OP( ori, x11, x10, 8796093024255, 8796093022208, 2047, x6, 208, x7)
TEST_IMM_OP( ori, x11, x10, 17592186046463, 17592186044416, 2047, x6, 216, x7)
TEST_IMM_OP( ori, x11, x10, 35184372090879, 35184372088832, 2047, x6, 224, x7)
TEST_IMM_OP( ori, x11, x10, 70368744179711, 70368744177664, 2047, x6, 232, x7)
TEST_IMM_OP( ori, x11, x10, 140737488357375, 140737488355328, 2047, x6, 240, x7)
TEST_IMM_OP( ori, x11, x10, 281474976712703, 281474976710656, 2047, x6, 248, x7)
TEST_IMM_OP( ori, x11, x10, 562949953423359, 562949953421312, 2047, x6, 256, x7)
TEST_IMM_OP( ori, x11, x10, 1125899906844671, 1125899906842624, 2047, x6, 264, x7)
TEST_IMM_OP( ori, x11, x10, 2251799813687295, 2251799813685248, 2047, x6, 272, x7)
TEST_IMM_OP( ori, x11, x10, 4503599627372543, 4503599627370496, 2047, x6, 280, x7)
TEST_IMM_OP( ori, x11, x10, 9007199254743039, 9007199254740992, 2047, x6, 288, x7)
TEST_IMM_OP( ori, x11, x10, 18014398509484031, 18014398509481984, 2047, x6, 296, x7)
TEST_IMM_OP( ori, x11, x10, 36028797018966015, 36028797018963968, 2047, x6, 304, x7)
TEST_IMM_OP( ori, x11, x10, 72057594037929983, 72057594037927936, 2047, x6, 312, x7)
TEST_IMM_OP( ori, x11, x10, 144115188075857919, 144115188075855872, 2047, x6, 320, x7)
TEST_IMM_OP( ori, x11, x10, 288230376151713791, 288230376151711744, 2047, x6, 328, x7)
TEST_IMM_OP( ori, x11, x10, 576460752303425535, 576460752303423488, 2047, x6, 336, x7)
TEST_IMM_OP( ori, x11, x10, 1152921504606849023, 1152921504606846976, 2047, x6, 344, x7)
TEST_IMM_OP( ori, x11, x10, 2305843009213695999, 2305843009213693952, 2047, x6, 352, x7)
TEST_IMM_OP( ori, x11, x10, 4611686018427389951, 4611686018427387904, 2047, x6, 360, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -2, 2047, x6, 368, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -3, 2047, x6, 376, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -5, 2047, x6, 384, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -9, 2047, x6, 392, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -17, 2047, x6, 400, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -33, 2047, x6, 408, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -65, 2047, x6, 416, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -129, 2047, x6, 424, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -257, 2047, x6, 432, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -513, 2047, x6, 440, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1025, 2047, x6, 448, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854777857, -2049, 2047, x6, 456, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854779905, -4097, 2047, x6, 464, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854784001, -8193, 2047, x6, 472, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854792193, -16385, 2047, x6, 480, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854808577, -32769, 2047, x6, 488, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854841345, -65537, 2047, x6, 496, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854906881, -131073, 2047, x6, 504, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036855037953, -262145, 2047, x6, 512, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036855300097, -524289, 2047, x6, 520, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036855824385, -1048577, 2047, x6, 528, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036856872961, -2097153, 2047, x6, 536, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036858970113, -4194305, 2047, x6, 544, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036863164417, -8388609, 2047, x6, 552, x7)
TEST_IMM_OP( ori, x11, x10, -9225623836668461057, -2251799813685249, 2047, x6, 560, x7)
TEST_IMM_OP( ori, x11, x10, -9227875636482146305, -4503599627370497, 2047, x6, 568, x7)
TEST_IMM_OP( ori, x11, x10, -9232379236109516801, -9007199254740993, 2047, x6, 576, x7)
TEST_IMM_OP( ori, x11, x10, -9241386435364257793, -18014398509481985, 2047, x6, 584, x7)
TEST_IMM_OP( ori, x11, x10, -9259400833873739777, -36028797018963969, 2047, x6, 592, x7)
TEST_IMM_OP( ori, x11, x10, -9295429630892703745, -72057594037927937, 2047, x6, 600, x7)
TEST_IMM_OP( ori, x11, x10, -9367487224930631681, -144115188075855873, 2047, x6, 608, x7)
TEST_IMM_OP( ori, x11, x10, -9511602413006487553, -288230376151711745, 2047, x6, 616, x7)
TEST_IMM_OP( ori, x11, x10, -9799832789158199297, -576460752303423489, 2047, x6, 624, x7)
TEST_IMM_OP( ori, x11, x10, -10376293541461622785, -1152921504606846977, 2047, x6, 632, x7)
TEST_IMM_OP( ori, x11, x10, -11529215046068469761, -2305843009213693953, 2047, x6, 640, x7)
TEST_IMM_OP( ori, x11, x10, -13835058055282163713, -4611686018427387905, 2047, x6, 648, x7)
TEST_IMM_OP( ori, x11, x10, -15372286728091291649, -6148914691236517206, 2047, x6, 656, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 2, x6, 664, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 4, x6, 672, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 8, x6, 680, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 16, x6, 688, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 32, x6, 696, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 64, x6, 704, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 128, x6, 712, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 256, x6, 720, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 512, x6, 728, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 1024, x6, 736, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -2, x6, 744, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -3, x6, 752, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -5, x6, 760, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -9, x6, 768, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -17, x6, 776, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -33, x6, 784, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -65, x6, 792, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -129, x6, 800, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -257, x6, 808, x7)
TEST_IMM_OP( ori, x11, x10, -9223376434901286913, -4398046511105, 2047, x6, 816, x7)
TEST_IMM_OP( ori, x11, x10, -9223389629040820225, -17592186044417, 2047, x6, 824, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -513, x6, 832, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -1025, x6, 840, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036871553025, -16777217, 2047, x6, 848, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, 1365, x6, 856, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036888330241, -33554433, 2047, x6, 864, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036854775809, -1, -1366, x6, 872, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036921884673, -67108865, 2047, x6, 880, x7)
TEST_IMM_OP( ori, x11, x10, -9223372036988993537, -134217729, 2047, x6, 888, x7)
TEST_IMM_OP( ori, x11, x10, -9223372037123211265, -268435457, 2047, x6, 896, x7)
TEST_IMM_OP( ori, x11, x10, -9223372037391646721, -536870913, 2047, x6, 904, x7)
TEST_IMM_OP( ori, x11, x10, -9223372037928517633, -1073741825, 2047, x6, 912, x7)
TEST_IMM_OP( ori, x11, x10, -9223372039002259457, -2147483649, 2047, x6, 920, x7)
TEST_IMM_OP( ori, x11, x10, -9223372041149743105, -4294967297, 2047, x6, 928, x7)
TEST_IMM_OP( ori, x11, x10, -9223372045444710401, -8589934593, 2047, x6, 936, x7)
TEST_IMM_OP( ori, x11, x10, -9223372054034644993, -17179869185, 2047, x6, 944, x7)
TEST_IMM_OP( ori, x11, x10, -9223372071214514177, -34359738369, 2047, x6, 952, x7)
TEST_IMM_OP( ori, x11, x10, -9223372105574252545, -68719476737, 2047, x6, 960, x7)
TEST_IMM_OP( ori, x11, x10, -9223372174293729281, -137438953473, 2047, x6, 968, x7)
TEST_IMM_OP( ori, x11, x10, -9223372311732682753, -274877906945, 2047, x6, 976, x7)
TEST_IMM_OP( ori, x11, x10, -9223372586610589697, -549755813889, 2047, x6, 984, x7)
TEST_IMM_OP( ori, x11, x10, -9223373136366403585, -1099511627777, 2047, x6, 992, x7)
TEST_IMM_OP( ori, x11, x10, -9223374235878031361, -2199023255553, 2047, x6, 1000, x7)
TEST_IMM_OP( ori, x11, x10, -9223380832947798017, -8796093022209, 2047, x6, 1008, x7)
TEST_IMM_OP( ori, x11, x10, -9223407221226864641, -35184372088833, 2047, x6, 1016, x7)
TEST_IMM_OP( ori, x11, x10, -9223442405598953473, -70368744177665, 2047, x6, 1024, x7)
TEST_IMM_OP( ori, x11, x10, -9223512774343131137, -140737488355329, 2047, x6, 1032, x7)
TEST_IMM_OP( ori, x11, x10, -9223653511831486465, -281474976710657, 2047, x6, 1040, x7)
TEST_IMM_OP( ori, x11, x10, -9223934986808197121, -562949953421313, 2047, x6, 1048, x7)
TEST_IMM_OP( ori, x11, x10, -9224497936761618433, -1125899906842625, 2047, x6, 1056, x7)
TEST_IMM_OP( ori, x11, x10, 1050623, 1048576, 2047, x6, 1064, x7)
TEST_IMM_OP( ori, x11, x10, 2099199, 2097152, 2047, x6, 1072, x7)
TEST_IMM_OP( ori, x11, x10, 4196351, 4194304, 2047, x6, 1080, x7)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 27*(XLEN/32),4,0xafacadee


signature_x6_0:
    .fill 136*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
