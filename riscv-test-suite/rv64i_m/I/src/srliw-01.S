
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srliw instruction of the RISC-V I extension for the srliw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",srliw)

RVTEST_SIGBASE( x13,signature_x13_1)

inst_0:
// rs1 == rd, rs1==x27, rd==x27, rs1_val < 0 and imm_val > 0 and imm_val < 32, imm_val == 30, rs1_val == -32769
// opcode: srliw ; op1:x27; dest:x27; op1val:-32769;  immval:30
TEST_IMM_OP( srliw, x27, x27, 0x3, -32769, 30, x13, 0, x11)

inst_1:
// rs1 != rd, rs1==x8, rd==x16, rs1_val > 0 and imm_val > 0 and imm_val < 32, rs1_val == 576460752303423488
// opcode: srliw ; op1:x8; dest:x16; op1val:576460752303423488;  immval:17
TEST_IMM_OP( srliw, x16, x8, 0x0, 576460752303423488, 17, x13, 8, x11)

inst_2:
// rs1==x5, rd==x6, rs1_val < 0 and imm_val == 0, rs1_val==-3037000499
// opcode: srliw ; op1:x5; dest:x6; op1val:-3037000499;  immval:0
TEST_IMM_OP( srliw, x6, x5, 0x4afb0ccd, -3037000499, 0, x13, 16, x11)

inst_3:
// rs1==x2, rd==x9, rs1_val > 0 and imm_val == 0, 
// opcode: srliw ; op1:x2; dest:x9; op1val:7;  immval:0
TEST_IMM_OP( srliw, x9, x2, 0x7, 7, 0, x13, 24, x11)

inst_4:
// rs1==x6, rd==x23, rs1_val < 0 and imm_val == 31, rs1_val == -1125899906842625
// opcode: srliw ; op1:x6; dest:x23; op1val:-1125899906842625;  immval:31
TEST_IMM_OP( srliw, x23, x6, 0x1, -1125899906842625, 31, x13, 32, x11)

inst_5:
// rs1==x19, rd==x3, rs1_val > 0 and imm_val == 31, rs1_val == 34359738368
// opcode: srliw ; op1:x19; dest:x3; op1val:34359738368;  immval:31
TEST_IMM_OP( srliw, x3, x19, 0x0, 34359738368, 31, x13, 40, x11)

inst_6:
// rs1==x7, rd==x24, rs1_val == imm_val and imm_val > 0 and imm_val < 32, rs1_val==5
// opcode: srliw ; op1:x7; dest:x24; op1val:5;  immval:5
TEST_IMM_OP( srliw, x24, x7, 0x0, 5, 5, x13, 48, x11)

inst_7:
// rs1==x17, rd==x14, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < 32, rs1_val == -9223372036854775808
// opcode: srliw ; op1:x17; dest:x14; op1val:-9223372036854775808;  immval:19
TEST_IMM_OP( srliw, x14, x17, 0x0, -9223372036854775808, 19, x13, 56, x11)

inst_8:
// rs1==x0, rd==x4, rs1_val == 0 and imm_val >= 0 and imm_val < 32, imm_val == 23, rs1_val==0
// opcode: srliw ; op1:x0; dest:x4; op1val:0;  immval:23
TEST_IMM_OP( srliw, x4, x0, 0x0, 0, 23, x13, 64, x11)

inst_9:
// rs1==x3, rd==x21, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < 32, rs1_val == 9223372036854775807, imm_val == 4
// opcode: srliw ; op1:x3; dest:x21; op1val:9223372036854775807;  immval:4
TEST_IMM_OP( srliw, x21, x3, 0xfffffff, 9223372036854775807, 4, x13, 72, x11)

inst_10:
// rs1==x28, rd==x18, rs1_val == 1 and imm_val >= 0 and imm_val < 32, rs1_val == 1, imm_val == 8
// opcode: srliw ; op1:x28; dest:x18; op1val:1;  immval:8
TEST_IMM_OP( srliw, x18, x28, 0x0, 1, 8, x13, 80, x11)

inst_11:
// rs1==x15, rd==x31, rs1_val == 2, rs1_val==2, imm_val == 21
// opcode: srliw ; op1:x15; dest:x31; op1val:2;  immval:21
TEST_IMM_OP( srliw, x31, x15, 0x0, 2, 21, x13, 88, x11)

inst_12:
// rs1==x18, rd==x17, rs1_val == 4, rs1_val==4
// opcode: srliw ; op1:x18; dest:x17; op1val:4;  immval:6
TEST_IMM_OP( srliw, x17, x18, 0x0, 4, 6, x13, 96, x11)

inst_13:
// rs1==x20, rd==x10, rs1_val == 8, 
// opcode: srliw ; op1:x20; dest:x10; op1val:8;  immval:7
TEST_IMM_OP( srliw, x10, x20, 0x0, 8, 7, x13, 104, x11)

inst_14:
// rs1==x21, rd==x7, rs1_val == 16, 
// opcode: srliw ; op1:x21; dest:x7; op1val:16;  immval:0
TEST_IMM_OP( srliw, x7, x21, 0x10, 16, 0, x13, 112, x11)

inst_15:
// rs1==x9, rd==x5, rs1_val == 32, 
// opcode: srliw ; op1:x9; dest:x5; op1val:32;  immval:23
TEST_IMM_OP( srliw, x5, x9, 0x0, 32, 23, x13, 120, x11)

inst_16:
// rs1==x1, rd==x15, rs1_val == 64, 
// opcode: srliw ; op1:x1; dest:x15; op1val:64;  immval:9
TEST_IMM_OP( srliw, x15, x1, 0x0, 64, 9, x13, 128, x11)

inst_17:
// rs1==x23, rd==x30, rs1_val == 128, imm_val == 29
// opcode: srliw ; op1:x23; dest:x30; op1val:128;  immval:29
TEST_IMM_OP( srliw, x30, x23, 0x0, 128, 29, x13, 136, x11)

inst_18:
// rs1==x25, rd==x2, rs1_val == 256, 
// opcode: srliw ; op1:x25; dest:x2; op1val:256;  immval:0
TEST_IMM_OP( srliw, x2, x25, 0x100, 256, 0, x13, 144, x11)

inst_19:
// rs1==x30, rd==x12, rs1_val == 512, 
// opcode: srliw ; op1:x30; dest:x12; op1val:512;  immval:7
TEST_IMM_OP( srliw, x12, x30, 0x4, 512, 7, x13, 152, x11)

inst_20:
// rs1==x14, rd==x19, rs1_val == 1024, 
// opcode: srliw ; op1:x14; dest:x19; op1val:1024;  immval:31
TEST_IMM_OP( srliw, x19, x14, 0x0, 1024, 31, x13, 160, x11)

inst_21:
// rs1==x10, rd==x1, rs1_val == 2048, imm_val == 16
// opcode: srliw ; op1:x10; dest:x1; op1val:2048;  immval:16
TEST_IMM_OP( srliw, x1, x10, 0x0, 2048, 16, x13, 168, x11)

inst_22:
// rs1==x24, rd==x28, rs1_val == 4096, 
// opcode: srliw ; op1:x24; dest:x28; op1val:4096;  immval:6
TEST_IMM_OP( srliw, x28, x24, 0x40, 4096, 6, x13, 176, x11)

inst_23:
// rs1==x22, rd==x8, rs1_val == 8192, 
// opcode: srliw ; op1:x22; dest:x8; op1val:8192;  immval:14
TEST_IMM_OP( srliw, x8, x22, 0x0, 8192, 14, x13, 184, x11)

inst_24:
// rs1==x11, rd==x29, rs1_val == 16384, 
// opcode: srliw ; op1:x11; dest:x29; op1val:16384;  immval:11
TEST_IMM_OP( srliw, x29, x11, 0x8, 16384, 11, x13, 192, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_25:
// rs1==x12, rd==x26, rs1_val == 32768, imm_val == 1
// opcode: srliw ; op1:x12; dest:x26; op1val:32768;  immval:1
TEST_IMM_OP( srliw, x26, x12, 0x4000, 32768, 1, x1, 0, x2)

inst_26:
// rs1==x4, rd==x11, rs1_val == 65536, 
// opcode: srliw ; op1:x4; dest:x11; op1val:65536;  immval:8
TEST_IMM_OP( srliw, x11, x4, 0x100, 65536, 8, x1, 8, x2)

inst_27:
// rs1==x29, rd==x13, rs1_val == 131072, 
// opcode: srliw ; op1:x29; dest:x13; op1val:131072;  immval:12
TEST_IMM_OP( srliw, x13, x29, 0x20, 131072, 12, x1, 16, x2)

inst_28:
// rs1==x26, rd==x25, rs1_val == 262144, 
// opcode: srliw ; op1:x26; dest:x25; op1val:262144;  immval:29
TEST_IMM_OP( srliw, x25, x26, 0x0, 262144, 29, x1, 24, x2)

inst_29:
// rs1==x13, rd==x20, rs1_val == 524288, 
// opcode: srliw ; op1:x13; dest:x20; op1val:524288;  immval:12
TEST_IMM_OP( srliw, x20, x13, 0x80, 524288, 12, x1, 32, x2)

inst_30:
// rs1==x31, rd==x0, rs1_val == 1048576, 
// opcode: srliw ; op1:x31; dest:x0; op1val:1048576;  immval:30
TEST_IMM_OP( srliw, x0, x31, 0x0, 1048576, 30, x1, 40, x2)

inst_31:
// rs1==x16, rd==x22, rs1_val == 2097152, 
// opcode: srliw ; op1:x16; dest:x22; op1val:2097152;  immval:3
TEST_IMM_OP( srliw, x22, x16, 0x40000, 2097152, 3, x1, 48, x2)

inst_32:
// rs1_val == 4194304, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4194304;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x0, 4194304, 23, x1, 56, x2)

inst_33:
// rs1_val == 8388608, 
// opcode: srliw ; op1:x10; dest:x11; op1val:8388608;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x400000, 8388608, 1, x1, 64, x2)

inst_34:
// rs1_val == 16777216, 
// opcode: srliw ; op1:x10; dest:x11; op1val:16777216;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x800000, 16777216, 1, x1, 72, x2)

inst_35:
// rs1_val == 33554432, 
// opcode: srliw ; op1:x10; dest:x11; op1val:33554432;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x10000, 33554432, 9, x1, 80, x2)

inst_36:
// rs1_val == 67108864, imm_val == 2
// opcode: srliw ; op1:x10; dest:x11; op1val:67108864;  immval:2
TEST_IMM_OP( srliw, x11, x10, 0x1000000, 67108864, 2, x1, 88, x2)

inst_37:
// rs1_val == 134217728, 
// opcode: srliw ; op1:x10; dest:x11; op1val:134217728;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x10000, 134217728, 11, x1, 96, x2)

inst_38:
// rs1_val == 268435456, 
// opcode: srliw ; op1:x10; dest:x11; op1val:268435456;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0x1000, 268435456, 16, x1, 104, x2)

inst_39:
// rs1_val == 536870912, 
// opcode: srliw ; op1:x10; dest:x11; op1val:536870912;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x10000000, 536870912, 1, x1, 112, x2)

inst_40:
// rs1_val == 1073741824, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1073741824;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0x40000, 1073741824, 12, x1, 120, x2)

inst_41:
// rs1_val == 2147483648, imm_val == 15
// opcode: srliw ; op1:x10; dest:x11; op1val:2147483648;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x10000, 2147483648, 15, x1, 128, x2)

inst_42:
// rs1_val == 4294967296, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4294967296;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x0, 4294967296, 0, x1, 136, x2)

inst_43:
// rs1_val == 8589934592, 
// opcode: srliw ; op1:x10; dest:x11; op1val:8589934592;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x0, 8589934592, 0, x1, 144, x2)

inst_44:
// rs1_val == 17179869184, imm_val == 10
// opcode: srliw ; op1:x10; dest:x11; op1val:17179869184;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x0, 17179869184, 10, x1, 152, x2)

inst_45:
// rs1_val == 68719476736, 
// opcode: srliw ; op1:x10; dest:x11; op1val:68719476736;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x0, 68719476736, 11, x1, 160, x2)

inst_46:
// rs1_val == 137438953472, 
// opcode: srliw ; op1:x10; dest:x11; op1val:137438953472;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x0, 137438953472, 15, x1, 168, x2)

inst_47:
// rs1_val == 274877906944, 
// opcode: srliw ; op1:x10; dest:x11; op1val:274877906944;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x0, 274877906944, 1, x1, 176, x2)

inst_48:
// rs1_val == 549755813888, 
// opcode: srliw ; op1:x10; dest:x11; op1val:549755813888;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 549755813888, 30, x1, 184, x2)

inst_49:
// rs1_val == 1099511627776, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1099511627776;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0x0, 1099511627776, 8, x1, 192, x2)

inst_50:
// rs1_val == 2199023255552, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2199023255552;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 2199023255552, 30, x1, 200, x2)

inst_51:
// rs1_val == 4398046511104, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4398046511104;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x0, 4398046511104, 15, x1, 208, x2)

inst_52:
// rs1_val == 8796093022208, 
// opcode: srliw ; op1:x10; dest:x11; op1val:8796093022208;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x0, 8796093022208, 7, x1, 216, x2)

inst_53:
// rs1_val == 17592186044416, 
// opcode: srliw ; op1:x10; dest:x11; op1val:17592186044416;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0x0, 17592186044416, 12, x1, 224, x2)

inst_54:
// rs1_val == 35184372088832, 
// opcode: srliw ; op1:x10; dest:x11; op1val:35184372088832;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x0, 35184372088832, 5, x1, 232, x2)

inst_55:
// rs1_val == 70368744177664, 
// opcode: srliw ; op1:x10; dest:x11; op1val:70368744177664;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x0, 70368744177664, 15, x1, 240, x2)

inst_56:
// rs1_val == 140737488355328, 
// opcode: srliw ; op1:x10; dest:x11; op1val:140737488355328;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x0, 140737488355328, 14, x1, 248, x2)

inst_57:
// rs1_val == 281474976710656, 
// opcode: srliw ; op1:x10; dest:x11; op1val:281474976710656;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x0, 281474976710656, 10, x1, 256, x2)

inst_58:
// rs1_val == 562949953421312, 
// opcode: srliw ; op1:x10; dest:x11; op1val:562949953421312;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0x0, 562949953421312, 8, x1, 264, x2)

inst_59:
// rs1_val == 1125899906842624, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1125899906842624;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x0, 1125899906842624, 6, x1, 272, x2)

inst_60:
// rs1_val == 2251799813685248, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2251799813685248;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x0, 2251799813685248, 0, x1, 280, x2)

inst_61:
// rs1_val == 4503599627370496, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4503599627370496;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x0, 4503599627370496, 15, x1, 288, x2)

inst_62:
// rs1_val == 9007199254740992, 
// opcode: srliw ; op1:x10; dest:x11; op1val:9007199254740992;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x0, 9007199254740992, 29, x1, 296, x2)

inst_63:
// rs1_val == 18014398509481984, 
// opcode: srliw ; op1:x10; dest:x11; op1val:18014398509481984;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0x0, 18014398509481984, 8, x1, 304, x2)

inst_64:
// rs1_val == 36028797018963968, 
// opcode: srliw ; op1:x10; dest:x11; op1val:36028797018963968;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x0, 36028797018963968, 0, x1, 312, x2)

inst_65:
// rs1_val == 72057594037927936, 
// opcode: srliw ; op1:x10; dest:x11; op1val:72057594037927936;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x0, 72057594037927936, 13, x1, 320, x2)

inst_66:
// rs1_val == 144115188075855872, 
// opcode: srliw ; op1:x10; dest:x11; op1val:144115188075855872;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x0, 144115188075855872, 0, x1, 328, x2)

inst_67:
// rs1_val == 288230376151711744, 
// opcode: srliw ; op1:x10; dest:x11; op1val:288230376151711744;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x0, 288230376151711744, 13, x1, 336, x2)

inst_68:
// rs1_val == 1152921504606846976, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0x0, 1152921504606846976, 12, x1, 344, x2)

inst_69:
// rs1_val == 2305843009213693952, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x0, 2305843009213693952, 29, x1, 352, x2)

inst_70:
// rs1_val == 4611686018427387904, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x0, 4611686018427387904, 10, x1, 360, x2)

inst_71:
// rs1_val == -2, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x1fff, -2, 19, x1, 368, x2)

inst_72:
// rs1_val == -3, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-3;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x1, -3, 31, x1, 376, x2)

inst_73:
// rs1_val == -5, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-5;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x3fffff, -5, 10, x1, 384, x2)

inst_74:
// rs1_val == -9, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-9;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0xfffff, -9, 12, x1, 392, x2)

inst_75:
// rs1_val == -17, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-17;  immval:2
TEST_IMM_OP( srliw, x11, x10, 0x3ffffffb, -17, 2, x1, 400, x2)

inst_76:
// rs1_val == -33, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-33;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x3fff, -33, 18, x1, 408, x2)

inst_77:
// rs1_val == -65, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-65;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -65, 30, x1, 416, x2)

inst_78:
// rs1_val == -129, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-129;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fffff, -129, 11, x1, 424, x2)

inst_79:
// rs1_val == -257, imm_val == 27
// opcode: srliw ; op1:x10; dest:x11; op1val:-257;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x1f, -257, 27, x1, 432, x2)

inst_80:
// rs1_val == -513, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-513;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x1f, -513, 27, x1, 440, x2)

inst_81:
// rs1_val == -1025, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1025;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x3ffffef, -1025, 6, x1, 448, x2)

inst_82:
// rs1_val == -2049, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2049;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -2049, 30, x1, 456, x2)

inst_83:
// rs1_val == -4097, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4097;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x7ffff7f, -4097, 5, x1, 464, x2)

inst_84:
// rs1_val == -8193, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8193;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, -8193, 16, x1, 472, x2)

inst_85:
// rs1_val == -16385, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-16385;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x3fffe, -16385, 14, x1, 480, x2)

inst_86:
// rs1_val == -65537, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-65537;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x7fff, -65537, 17, x1, 488, x2)

inst_87:
// rs1_val == -131073, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-131073;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -131073, 30, x1, 496, x2)

inst_88:
// rs1_val == -9007199254740993, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-9007199254740993;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -9007199254740993, 30, x1, 504, x2)

inst_89:
// rs1_val == -18014398509481985, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-18014398509481985;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x1f, -18014398509481985, 27, x1, 512, x2)

inst_90:
// rs1_val == -36028797018963969, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-36028797018963969;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x3ffff, -36028797018963969, 14, x1, 520, x2)

inst_91:
// rs1_val == -72057594037927937, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-72057594037927937;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x1fff, -72057594037927937, 19, x1, 528, x2)

inst_92:
// rs1_val == -144115188075855873, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-144115188075855873;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fffff, -144115188075855873, 11, x1, 536, x2)

inst_93:
// rs1_val == -288230376151711745, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-288230376151711745;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0xfffff, -288230376151711745, 12, x1, 544, x2)

inst_94:
// rs1_val == -576460752303423489, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-576460752303423489;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xfffffff, -576460752303423489, 4, x1, 552, x2)

inst_95:
// rs1_val == -1152921504606846977, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1152921504606846977;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x1ffffff, -1152921504606846977, 7, x1, 560, x2)

inst_96:
// rs1_val == -2305843009213693953, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2305843009213693953;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x7ffff, -2305843009213693953, 13, x1, 568, x2)

inst_97:
// rs1_val == -4611686018427387905, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4611686018427387905;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x3ffffff, -4611686018427387905, 6, x1, 576, x2)

inst_98:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: srliw ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0xaaaa, 6148914691236517205, 15, x1, 584, x2)

inst_99:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode: srliw ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x155, -6148914691236517206, 23, x1, 592, x2)

inst_100:
// rs1_val==3, 
// opcode: srliw ; op1:x10; dest:x11; op1val:3;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x0, 3, 19, x1, 600, x2)

inst_101:
// rs1_val==3689348814741910323, 
// opcode: srliw ; op1:x10; dest:x11; op1val:3689348814741910323;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0x3333333, 3689348814741910323, 4, x1, 608, x2)

inst_102:
// rs1_val==7378697629483820646, 
// opcode: srliw ; op1:x10; dest:x11; op1val:7378697629483820646;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x33333333, 7378697629483820646, 1, x1, 616, x2)

inst_103:
// rs1_val==3037000499, 
// opcode: srliw ; op1:x10; dest:x11; op1val:3037000499;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xb504f33, 3037000499, 4, x1, 624, x2)

inst_104:
// rs1_val==6148914691236517204, 
// opcode: srliw ; op1:x10; dest:x11; op1val:6148914691236517204;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x55555554, 6148914691236517204, 0, x1, 632, x2)

inst_105:
// rs1_val==3689348814741910322, 
// opcode: srliw ; op1:x10; dest:x11; op1val:3689348814741910322;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x6666666, 3689348814741910322, 3, x1, 640, x2)

inst_106:
// rs1_val==7378697629483820645, 
// opcode: srliw ; op1:x10; dest:x11; op1val:7378697629483820645;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x3, 7378697629483820645, 29, x1, 648, x2)

inst_107:
// rs1_val==3037000498, 
// opcode: srliw ; op1:x10; dest:x11; op1val:3037000498;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x5a82, 3037000498, 17, x1, 656, x2)

inst_108:
// rs1_val==6148914691236517206, 
// opcode: srliw ; op1:x10; dest:x11; op1val:6148914691236517206;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x2aaaaa, 6148914691236517206, 9, x1, 664, x2)

inst_109:
// rs1_val==-6148914691236517205, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-6148914691236517205;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x55555, -6148914691236517205, 13, x1, 672, x2)

inst_110:
// rs1_val==6, 
// opcode: srliw ; op1:x10; dest:x11; op1val:6;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x0, 6, 14, x1, 680, x2)

inst_111:
// rs1_val==3689348814741910324, 
// opcode: srliw ; op1:x10; dest:x11; op1val:3689348814741910324;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x0, 3689348814741910324, 31, x1, 688, x2)

inst_112:
// rs1_val==7378697629483820647, 
// opcode: srliw ; op1:x10; dest:x11; op1val:7378697629483820647;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x0, 7378697629483820647, 31, x1, 696, x2)

inst_113:
// rs1_val==-3037000498, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-3037000498;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x257d, -3037000498, 17, x1, 704, x2)

inst_114:
// rs1_val==3037000500, 
// opcode: srliw ; op1:x10; dest:x11; op1val:3037000500;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x5a8, 3037000500, 21, x1, 712, x2)

inst_115:
// rs1_val == -262145, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-262145;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x7ff, -262145, 21, x1, 720, x2)

inst_116:
// rs1_val == -524289, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-524289;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, -524289, 29, x1, 728, x2)

inst_117:
// rs1_val == -1048577, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1048577;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x3ffbfff, -1048577, 6, x1, 736, x2)

inst_118:
// rs1_val == -2097153, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2097153;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0xffdff, -2097153, 12, x1, 744, x2)

inst_119:
// rs1_val == -4194305, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4194305;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x3fefff, -4194305, 10, x1, 752, x2)

inst_120:
// rs1_val == -8388609, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8388609;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fefff, -8388609, 11, x1, 760, x2)

inst_121:
// rs1_val == -16777217, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-16777217;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x1, -16777217, 31, x1, 768, x2)

inst_122:
// rs1_val == -33554433, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-33554433;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, -33554433, 29, x1, 776, x2)

inst_123:
// rs1_val == -67108865, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-67108865;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xfbff, -67108865, 16, x1, 784, x2)

inst_124:
// rs1_val == -134217729, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-134217729;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xf7ff, -134217729, 16, x1, 792, x2)

inst_125:
// rs1_val == -268435457, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-268435457;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -268435457, 30, x1, 800, x2)

inst_126:
// rs1_val == -536870913, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-536870913;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xdfff, -536870913, 16, x1, 808, x2)

inst_127:
// rs1_val == -1073741825, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1073741825;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x17f, -1073741825, 23, x1, 816, x2)

inst_128:
// rs1_val == -2147483649, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2147483649;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0xffffff, -2147483649, 7, x1, 824, x2)

inst_129:
// rs1_val == -4294967297, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4294967297;  immval:2
TEST_IMM_OP( srliw, x11, x10, 0x3fffffff, -4294967297, 2, x1, 832, x2)

inst_130:
// rs1_val == -8589934593, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8589934593;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x7ffffff, -8589934593, 5, x1, 840, x2)

inst_131:
// rs1_val == -17179869185, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-17179869185;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x3ffffff, -17179869185, 6, x1, 848, x2)

inst_132:
// rs1_val == -34359738369, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-34359738369;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x7fffff, -34359738369, 9, x1, 856, x2)

inst_133:
// rs1_val == -68719476737, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-68719476737;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1ff, -68719476737, 23, x1, 864, x2)

inst_134:
// rs1_val == -137438953473, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-137438953473;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x1, -137438953473, 31, x1, 872, x2)

inst_135:
// rs1_val == -274877906945, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-274877906945;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, -274877906945, 29, x1, 880, x2)

inst_136:
// rs1_val == -549755813889, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-549755813889;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x7fffffff, -549755813889, 1, x1, 888, x2)

inst_137:
// rs1_val == -1099511627777, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1099511627777;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0xffffffff, -1099511627777, 0, x1, 896, x2)

inst_138:
// rs1_val == -2199023255553, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2199023255553;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, -2199023255553, 16, x1, 904, x2)

inst_139:
// rs1_val == -4398046511105, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4398046511105;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x1ffffff, -4398046511105, 7, x1, 912, x2)

inst_140:
// rs1_val == -8796093022209, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8796093022209;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1ff, -8796093022209, 23, x1, 920, x2)

inst_141:
// rs1_val == -17592186044417, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-17592186044417;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x1ffff, -17592186044417, 15, x1, 928, x2)

inst_142:
// rs1_val == -35184372088833, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-35184372088833;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x3ffffff, -35184372088833, 6, x1, 936, x2)

inst_143:
// rs1_val == -70368744177665, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-70368744177665;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x1f, -70368744177665, 27, x1, 944, x2)

inst_144:
// rs1_val == -140737488355329, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-140737488355329;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1fffffff, -140737488355329, 3, x1, 952, x2)

inst_145:
// rs1_val == -281474976710657, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-281474976710657;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fffff, -281474976710657, 11, x1, 960, x2)

inst_146:
// rs1_val == -562949953421313, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-562949953421313;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x1fff, -562949953421313, 19, x1, 968, x2)

inst_147:
// rs1_val == -2251799813685249, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2251799813685249;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -2251799813685249, 30, x1, 976, x2)

inst_148:
// rs1_val == -4503599627370497, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4503599627370497;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x1fff, -4503599627370497, 19, x1, 984, x2)

inst_149:
// rs1_val == 0 and imm_val >= 0 and imm_val < 32, imm_val == 23, rs1_val==0
// opcode: srliw ; op1:x10; dest:x11; op1val:0;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x0, 0, 23, x1, 992, x2)

inst_150:
// rs1_val == 1048576, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1048576;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 1048576, 30, x1, 1000, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 126*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
