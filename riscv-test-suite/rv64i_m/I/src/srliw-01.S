 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 11:19:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srliw instruction of the RISC-V I extension for the srliw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",srliw)

RVTEST_SIGBASE( x27,signature_x27_1)

// rs1 == rd, rs1==x15, rd==x15, rs1_val < 0 and imm_val > 0 and imm_val < 32, rs1_val == -1125899906842625
// opcode: srliw ; op1:x15; dest:x15; op1val:0xfffbffffffffffff;  immval:3
TEST_IMM_OP( srliw, x15, x15, 0x1fffffff, 0xfffbffffffffffff, 3, x27, 0, x7)

// rs1 != rd, rs1==x4, rd==x12, rs1_val > 0 and imm_val > 0 and imm_val < 32, rs1_val == 2251799813685248
// opcode: srliw ; op1:x4; dest:x12; op1val:0x0008000000000000;  immval:18
TEST_IMM_OP( srliw, x12, x4, 0x0, 0x0008000000000000, 18, x27, 8, x7)

// rs1==x17, rd==x24, rs1_val < 0 and imm_val == 0, rs1_val == -288230376151711745
// opcode: srliw ; op1:x17; dest:x24; op1val:0xfbffffffffffffff;  immval:0
TEST_IMM_OP( srliw, x24, x17, 0xffffffff, 0xfbffffffffffffff, 0, x27, 16, x7)

// rs1==x28, rd==x23, rs1_val > 0 and imm_val == 0, rs1_val == 6148914691236517205
// opcode: srliw ; op1:x28; dest:x23; op1val:0x5555555555555555;  immval:0
TEST_IMM_OP( srliw, x23, x28, 0x55555555, 0x5555555555555555, 0, x27, 24, x7)

// rs1==x11, rd==x21, rs1_val < 0 and imm_val == 31, rs1_val == -70368744177665
// opcode: srliw ; op1:x11; dest:x21; op1val:0xffffbfffffffffff;  immval:31
TEST_IMM_OP( srliw, x21, x11, 0x1, 0xffffbfffffffffff, 31, x27, 32, x7)

// rs1==x23, rd==x19, rs1_val > 0 and imm_val == 31, rs1_val == 8796093022208
// opcode: srliw ; op1:x23; dest:x19; op1val:0x0000080000000000;  immval:31
TEST_IMM_OP( srliw, x19, x23, 0x0, 0x0000080000000000, 31, x27, 40, x7)

// rs1==x20, rd==x28, rs1_val == imm_val and imm_val > 0 and imm_val < 32, 
// opcode: srliw ; op1:x20; dest:x28; op1val:0x0000000000000006;  immval:6
TEST_IMM_OP( srliw, x28, x20, 0x0, 0x0000000000000006, 6, x27, 48, x7)

// rs1==x1, rd==x8, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < 32, rs1_val == -9223372036854775808
// opcode: srliw ; op1:x1; dest:x8; op1val:0x8000000000000000;  immval:7
TEST_IMM_OP( srliw, x8, x1, 0x0, 0x8000000000000000, 7, x27, 56, x7)

// rs1==x22, rd==x9, rs1_val == 0 and imm_val >= 0 and imm_val < 32, imm_val == 21
// opcode: srliw ; op1:x22; dest:x9; op1val:0x0000000000000000;  immval:21
TEST_IMM_OP( srliw, x9, x22, 0x0, 0x0000000000000000, 21, x27, 64, x7)

// rs1==x29, rd==x5, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < 32, imm_val == 2, rs1_val == 9223372036854775807
// opcode: srliw ; op1:x29; dest:x5; op1val:0x7fffffffffffffff;  immval:2
TEST_IMM_OP( srliw, x5, x29, 0x3fffffff, 0x7fffffffffffffff, 2, x27, 72, x7)

// rs1==x8, rd==x20, rs1_val == 1 and imm_val >= 0 and imm_val < 32, rs1_val == 1, imm_val == 16
// opcode: srliw ; op1:x8; dest:x20; op1val:0x0000000000000001;  immval:16
TEST_IMM_OP( srliw, x20, x8, 0x0, 0x0000000000000001, 16, x27, 80, x7)

// rs1==x0, rd==x29, imm_val == 1, rs1_val == -6148914691236517206
// opcode: srliw ; op1:x0; dest:x29; op1val:0xaaaaaaaaaaaaaaaa;  immval:1
TEST_IMM_OP( srliw, x29, x0, 0x55555555, 0xaaaaaaaaaaaaaaaa, 1, x27, 88, x7)

// rs1==x16, rd==x11, imm_val == 4, rs1_val == 8589934592
// opcode: srliw ; op1:x16; dest:x11; op1val:0x0000000200000000;  immval:4
TEST_IMM_OP( srliw, x11, x16, 0x0, 0x0000000200000000, 4, x27, 96, x7)

// rs1==x14, rd==x13, imm_val == 8, rs1_val == 274877906944
// opcode: srliw ; op1:x14; dest:x13; op1val:0x0000004000000000;  immval:8
TEST_IMM_OP( srliw, x13, x14, 0x0, 0x0000004000000000, 8, x27, 104, x7)

// rs1==x5, rd==x1, imm_val == 30, 
// opcode: srliw ; op1:x5; dest:x1; op1val:0xfffbffffffffffff;  immval:30
TEST_IMM_OP( srliw, x1, x5, 0x3, 0xfffbffffffffffff, 30, x27, 112, x7)

// rs1==x24, rd==x14, imm_val == 29, rs1_val == 536870912
// opcode: srliw ; op1:x24; dest:x14; op1val:0x0000000020000000;  immval:29
TEST_IMM_OP( srliw, x14, x24, 0x1, 0x0000000020000000, 29, x27, 120, x7)

// rs1==x12, rd==x17, imm_val == 27, rs1_val == -513
// opcode: srliw ; op1:x12; dest:x17; op1val:0xfffffffffffffdff;  immval:27
TEST_IMM_OP( srliw, x17, x12, 0x1f, 0xfffffffffffffdff, 27, x27, 128, x7)

// rs1==x6, rd==x16, imm_val == 23, 
// opcode: srliw ; op1:x6; dest:x16; op1val:0xc000000000000000;  immval:23
TEST_IMM_OP( srliw, x16, x6, 0x0, 0xc000000000000000, 23, x27, 136, x7)

// rs1==x2, rd==x22, imm_val == 15, rs1_val == -268435457
// opcode: srliw ; op1:x2; dest:x22; op1val:0xffffffffefffffff;  immval:15
TEST_IMM_OP( srliw, x22, x2, 0x1dfff, 0xffffffffefffffff, 15, x27, 144, x7)

// rs1==x18, rd==x3, imm_val == 10, rs1_val == 268435456
// opcode: srliw ; op1:x18; dest:x3; op1val:0x0000000010000000;  immval:10
TEST_IMM_OP( srliw, x3, x18, 0x40000, 0x0000000010000000, 10, x27, 152, x7)

// rs1==x10, rd==x26, rs1_val == 2, 
// opcode: srliw ; op1:x10; dest:x26; op1val:0x0000000000000002;  immval:19
TEST_IMM_OP( srliw, x26, x10, 0x0, 0x0000000000000002, 19, x27, 160, x7)

// rs1==x13, rd==x0, rs1_val == 4, 
// opcode: srliw ; op1:x13; dest:x0; op1val:0x0000000000000004;  immval:14
TEST_IMM_OP( srliw, x0, x13, 0x0, 0x0000000000000004, 14, x27, 168, x7)

// rs1==x19, rd==x25, rs1_val == 8, 
// opcode: srliw ; op1:x19; dest:x25; op1val:0x0000000000000008;  immval:4
TEST_IMM_OP( srliw, x25, x19, 0x0, 0x0000000000000008, 4, x27, 176, x7)

// rs1==x7, rd==x18, rs1_val == 16, 
// opcode: srliw ; op1:x7; dest:x18; op1val:0x0000000000000010;  immval:12
TEST_IMM_OP( srliw, x18, x7, 0x0, 0x0000000000000010, 12, x27, 184, x5)
RVTEST_SIGBASE( x1,signature_x1_0)

// rs1==x9, rd==x7, rs1_val == 32, 
// opcode: srliw ; op1:x9; dest:x7; op1val:0x0000000000000020;  immval:5
TEST_IMM_OP( srliw, x7, x9, 0x1, 0x0000000000000020, 5, x1, 0, x5)

// rs1==x25, rd==x27, rs1_val == 64, 
// opcode: srliw ; op1:x25; dest:x27; op1val:0x0000000000000040;  immval:30
TEST_IMM_OP( srliw, x27, x25, 0x0, 0x0000000000000040, 30, x1, 8, x5)

// rs1==x3, rd==x6, rs1_val == 128, 
// opcode: srliw ; op1:x3; dest:x6; op1val:0x0000000000000080;  immval:0
TEST_IMM_OP( srliw, x6, x3, 0x80, 0x0000000000000080, 0, x1, 16, x5)

// rs1==x31, rd==x2, rs1_val == 256, 
// opcode: srliw ; op1:x31; dest:x2; op1val:0x0000000000000100;  immval:30
TEST_IMM_OP( srliw, x2, x31, 0x0, 0x0000000000000100, 30, x1, 24, x5)

// rs1==x27, rd==x10, rs1_val == 512, 
// opcode: srliw ; op1:x27; dest:x10; op1val:0x0000000000000200;  immval:23
TEST_IMM_OP( srliw, x10, x27, 0x0, 0x0000000000000200, 23, x1, 32, x5)

// rs1==x21, rd==x30, rs1_val == 1024, 
// opcode: srliw ; op1:x21; dest:x30; op1val:0x0000000000000400;  immval:0
TEST_IMM_OP( srliw, x30, x21, 0x400, 0x0000000000000400, 0, x1, 40, x5)

// rs1==x26, rd==x31, rs1_val == 2048, 
// opcode: srliw ; op1:x26; dest:x31; op1val:0x0000000000000800;  immval:2
TEST_IMM_OP( srliw, x31, x26, 0x200, 0x0000000000000800, 2, x1, 48, x5)

// rs1==x30, rd==x4, rs1_val == 4096, 
// opcode: srliw ; op1:x30; dest:x4; op1val:0x0000000000001000;  immval:6
TEST_IMM_OP( srliw, x4, x30, 0x40, 0x0000000000001000, 6, x1, 56, x5)

// rs1_val == 8192, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000002000;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000000002000, 14, x1, 64, x5)

// rs1_val == 16384, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000004000;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000000004000, 18, x1, 72, x5)

// rs1_val == 32768, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000008000;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x4000, 0x0000000000008000, 1, x1, 80, x5)

// rs1_val == 65536, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000010000;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000000010000, 18, x1, 88, x5)

// rs1_val == 131072, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000020000;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x400, 0x0000000000020000, 7, x1, 96, x5)

// rs1_val == 262144, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000040000;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0x40, 0x0000000000040000, 12, x1, 104, x5)

// rs1_val == 524288, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000080000;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000000080000, 29, x1, 112, x5)

// rs1_val == 1048576, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000100000;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x2000, 0x0000000000100000, 7, x1, 120, x5)

// rs1_val == 2097152, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000200000;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000000200000, 30, x1, 128, x5)

// rs1_val == 4194304, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000400000;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x80, 0x0000000000400000, 15, x1, 136, x5)

// rs1_val == 8388608, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000800000;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0x800, 0x0000000000800000, 12, x1, 144, x5)

// rs1_val == 16777216, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000001000000;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x2000, 0x0000000001000000, 11, x1, 152, x5)

// rs1_val == 33554432, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000002000000;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x4, 0x0000000002000000, 23, x1, 160, x5)

// rs1_val == 67108864, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000004000000;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000004000000, 29, x1, 168, x5)

// rs1_val == 134217728, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000008000000;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x1000, 0x0000000008000000, 15, x1, 176, x5)

// rs1_val == 1073741824, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000040000000;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x800, 0x0000000040000000, 19, x1, 184, x5)

// rs1_val == 2147483648, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000080000000;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0x800000, 0x0000000080000000, 8, x1, 192, x5)

// rs1_val == 4294967296, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000100000000;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000100000000, 10, x1, 200, x5)

// rs1_val == 17179869184, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000400000000;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000400000000, 15, x1, 208, x5)

// rs1_val == 34359738368, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000800000000;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000800000000, 7, x1, 216, x5)

// rs1_val == 68719476736, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000001000000000;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000001000000000, 6, x1, 224, x5)

// rs1_val == 137438953472, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000002000000000;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000002000000000, 4, x1, 232, x5)

// rs1_val == 549755813888, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000008000000000;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000008000000000, 21, x1, 240, x5)

// rs1_val == 1099511627776, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000010000000000;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000010000000000, 14, x1, 248, x5)

// rs1_val == 2199023255552, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000020000000000;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000020000000000, 30, x1, 256, x5)

// rs1_val == 4398046511104, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000040000000000;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000040000000000, 4, x1, 264, x5)

// rs1_val == 17592186044416, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000100000000000;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000100000000000, 15, x1, 272, x5)

// rs1_val == 35184372088832, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000200000000000;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000200000000000, 5, x1, 280, x5)

// rs1_val == 70368744177664, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000400000000000;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000400000000000, 4, x1, 288, x5)

// rs1_val == 140737488355328, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000800000000000;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000800000000000, 15, x1, 296, x5)

// rs1_val == 281474976710656, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0001000000000000;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0001000000000000, 7, x1, 304, x5)

// rs1_val == 562949953421312, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0002000000000000;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0002000000000000, 21, x1, 312, x5)

// rs1_val == 1125899906842624, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0004000000000000;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0004000000000000, 19, x1, 320, x5)

// rs1_val == 4503599627370496, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0010000000000000;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0010000000000000, 11, x1, 328, x5)

// rs1_val == 9007199254740992, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0020000000000000;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0020000000000000, 18, x1, 336, x5)

// rs1_val == 18014398509481984, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0040000000000000;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0040000000000000, 19, x1, 344, x5)

// rs1_val == 36028797018963968, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0080000000000000;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0080000000000000, 6, x1, 352, x5)

// rs1_val == 72057594037927936, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0100000000000000;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0100000000000000, 13, x1, 360, x5)

// rs1_val == 144115188075855872, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0200000000000000;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0200000000000000, 7, x1, 368, x5)

// rs1_val == -2199023255553, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffdffffffffff;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x3fff, 0xfffffdffffffffff, 18, x1, 376, x5)

// rs1_val == -4398046511105, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffbffffffffff;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x7fffff, 0xfffffbffffffffff, 9, x1, 384, x5)

// rs1_val == -8796093022209, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffff7ffffffffff;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x7ffffff, 0xfffff7ffffffffff, 5, x1, 392, x5)

// rs1_val == -17592186044417, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffefffffffffff;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, 0xffffefffffffffff, 29, x1, 400, x5)

// rs1_val == -35184372088833, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffdfffffffffff;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x1ffff, 0xffffdfffffffffff, 15, x1, 408, x5)

// rs1_val == -140737488355329, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffff7fffffffffff;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, 0xffff7fffffffffff, 16, x1, 416, x5)

// rs1_val == -281474976710657, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffeffffffffffff;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1fffffff, 0xfffeffffffffffff, 3, x1, 424, x5)

// rs1_val == -562949953421313, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffdffffffffffff;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x3fff, 0xfffdffffffffffff, 18, x1, 432, x5)

// rs1_val == -2251799813685249, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfff7ffffffffffff;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x1, 0xfff7ffffffffffff, 31, x1, 440, x5)

// rs1_val == -4503599627370497, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffefffffffffffff;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x3fff, 0xffefffffffffffff, 18, x1, 448, x5)

// rs1_val == -9007199254740993, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffdfffffffffffff;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x3fff, 0xffdfffffffffffff, 18, x1, 456, x5)

// rs1_val == -18014398509481985, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffbfffffffffffff;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x3ffffff, 0xffbfffffffffffff, 6, x1, 464, x5)

// rs1_val == -36028797018963969, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xff7fffffffffffff;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, 0xff7fffffffffffff, 29, x1, 472, x5)

// rs1_val == -72057594037927937, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfeffffffffffffff;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fffff, 0xfeffffffffffffff, 11, x1, 480, x5)

// rs1_val == -144115188075855873, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfdffffffffffffff;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, 0xfdffffffffffffff, 29, x1, 488, x5)

// rs1_val == -576460752303423489, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xf7ffffffffffffff;  immval:2
TEST_IMM_OP( srliw, x11, x10, 0x3fffffff, 0xf7ffffffffffffff, 2, x1, 496, x5)

// rs1_val == -1152921504606846977, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xefffffffffffffff;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x7ff, 0xefffffffffffffff, 21, x1, 504, x5)

// rs1_val == -2305843009213693953, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xdfffffffffffffff;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x1, 0xdfffffffffffffff, 31, x1, 512, x5)

// rs1_val == -4611686018427387905, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xbfffffffffffffff;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x7fff, 0xbfffffffffffffff, 17, x1, 520, x5)

// rs1_val == 288230376151711744, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0400000000000000;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0400000000000000, 30, x1, 528, x5)

// rs1_val == 576460752303423488, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0800000000000000;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0800000000000000, 0, x1, 536, x5)

// rs1_val == 1152921504606846976, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x1000000000000000;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x1000000000000000, 30, x1, 544, x5)

// rs1_val == 2305843009213693952, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x2000000000000000;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x2000000000000000, 16, x1, 552, x5)

// rs1_val == 4611686018427387904, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x4000000000000000;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x4000000000000000, 6, x1, 560, x5)

// rs1_val == -2, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffffffe;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1ff, 0xfffffffffffffffe, 23, x1, 568, x5)

// rs1_val == -3, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffffffd;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x3ffff, 0xfffffffffffffffd, 14, x1, 576, x5)

// rs1_val == -5, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffffffb;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, 0xfffffffffffffffb, 16, x1, 584, x5)

// rs1_val == -9, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffffff7;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x7fff, 0xfffffffffffffff7, 17, x1, 592, x5)

// rs1_val == -17, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffffffef;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x1ffffff, 0xffffffffffffffef, 7, x1, 600, x5)

// rs1_val == -33, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffffffdf;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xffffffd, 0xffffffffffffffdf, 4, x1, 608, x5)

// rs1_val == -65, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffffffbf;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1ffffff7, 0xffffffffffffffbf, 3, x1, 616, x5)

// rs1_val == -129, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffffff7f;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x1fff, 0xffffffffffffff7f, 19, x1, 624, x5)

// rs1_val == -257, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffffeff;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fffff, 0xfffffffffffffeff, 11, x1, 632, x5)

// rs1_val == -1025, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffffbff;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0xfffffb, 0xfffffffffffffbff, 8, x1, 640, x5)

// rs1_val == -2049, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffff7ff;  immval:2
TEST_IMM_OP( srliw, x11, x10, 0x3ffffdff, 0xfffffffffffff7ff, 2, x1, 648, x5)

// rs1_val == -4097, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffffefff;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1ffffd, 0xffffffffffffefff, 11, x1, 656, x5)

// rs1_val == -8193, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffffdfff;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1ffffbff, 0xffffffffffffdfff, 3, x1, 664, x5)

// rs1_val == -16385, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffffbfff;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, 0xffffffffffffbfff, 30, x1, 672, x5)

// rs1_val == -32769, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffff7fff;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x1f, 0xffffffffffff7fff, 27, x1, 680, x5)

// rs1_val == -65537, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffeffff;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x1fffd, 0xfffffffffffeffff, 15, x1, 688, x5)

// rs1_val == -131073, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffdffff;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, 0xfffffffffffdffff, 29, x1, 696, x5)

// rs1_val == -262145, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffffbffff;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x7ff, 0xfffffffffffbffff, 21, x1, 704, x5)

// rs1_val == -524289, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffff7ffff;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x7ffbfff, 0xfffffffffff7ffff, 5, x1, 712, x5)

// rs1_val == -1048577, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffefffff;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x7ff7ff, 0xffffffffffefffff, 9, x1, 720, x5)

// rs1_val == -2097153, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffdfffff;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, 0xffffffffffdfffff, 29, x1, 728, x5)

// rs1_val == -4194305, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffffbfffff;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1ff7ff, 0xffffffffffbfffff, 11, x1, 736, x5)

// rs1_val == -8388609, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffff7fffff;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, 0xffffffffff7fffff, 29, x1, 744, x5)

// rs1_val == -16777217, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffeffffff;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x7f7fffff, 0xfffffffffeffffff, 1, x1, 752, x5)

// rs1_val == -33554433, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffdffffff;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0xfdffff, 0xfffffffffdffffff, 8, x1, 760, x5)

// rs1_val == -67108865, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffffbffffff;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1f7fff, 0xfffffffffbffffff, 11, x1, 768, x5)

// rs1_val == -134217729, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffff7ffffff;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x1efffff, 0xfffffffff7ffffff, 7, x1, 776, x5)

// rs1_val == -536870913, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffdfffffff;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x6ff, 0xffffffffdfffffff, 21, x1, 784, x5)

// rs1_val == -1073741825, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffffbfffffff;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x17fffff, 0xffffffffbfffffff, 7, x1, 792, x5)

// rs1_val == -2147483649, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffff7fffffff;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0x7ffffff, 0xffffffff7fffffff, 4, x1, 800, x5)

// rs1_val == -4294967297, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffeffffffff;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, 0xfffffffeffffffff, 30, x1, 808, x5)

// rs1_val == -8589934593, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffdffffffff;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0xffffffff, 0xfffffffdffffffff, 0, x1, 816, x5)

// rs1_val == -17179869185, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffffbffffffff;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fffff, 0xfffffffbffffffff, 11, x1, 824, x5)

// rs1_val == -34359738369, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffff7ffffffff;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x7ff, 0xfffffff7ffffffff, 21, x1, 832, x5)

// rs1_val == -68719476737, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffefffffffff;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x7fffff, 0xffffffefffffffff, 9, x1, 840, x5)

// rs1_val == -137438953473, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffdfffffffff;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0xffffff, 0xffffffdfffffffff, 8, x1, 848, x5)

// rs1_val == -274877906945, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffffbfffffffff;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1ff, 0xffffffbfffffffff, 23, x1, 856, x5)

// rs1_val == -549755813889, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xffffff7fffffffff;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x7fffff, 0xffffff7fffffffff, 9, x1, 864, x5)

// rs1_val == -1099511627777, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0xfffffeffffffffff;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x7fff, 0xfffffeffffffffff, 17, x1, 872, x5)

// imm_val == 1, rs1_val == -6148914691236517206
// opcode: srliw ; op1:x10; dest:x11; op1val:0xaaaaaaaaaaaaaaaa;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x55555555, 0xaaaaaaaaaaaaaaaa, 1, x1, 880, x5)

// rs1_val == 4, 
// opcode: srliw ; op1:x10; dest:x11; op1val:0x0000000000000004;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x0, 0x0000000000000004, 14, x1, 888, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x27_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x27_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
