 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srliw instruction of the RISC-V I extension for the srliw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",srliw)

RVTEST_SIGBASE( x24,signature_x24_1)

inst_0:
// rs1 == rd, rs1==x29, rd==x29, rs1_val < 0 and imm_val > 0 and imm_val < 32, 
// opcode: srliw ; op1:x29; dest:x29; op1val:-4611686018427387904;  immval:18
TEST_IMM_OP( srliw, x29, x29, 0x0, -4611686018427387904, 18, x24, 0, x27)

inst_1:
// rs1 != rd, rs1==x6, rd==x8, rs1_val > 0 and imm_val > 0 and imm_val < 32, rs1_val == 33554432
// opcode: srliw ; op1:x6; dest:x8; op1val:33554432;  immval:12
TEST_IMM_OP( srliw, x8, x6, 0x2000, 33554432, 12, x24, 8, x27)

inst_2:
// rs1==x21, rd==x31, rs1_val < 0 and imm_val == 0, rs1_val == -562949953421313
// opcode: srliw ; op1:x21; dest:x31; op1val:-562949953421313;  immval:0
TEST_IMM_OP( srliw, x31, x21, 0xffffffff, -562949953421313, 0, x24, 16, x27)

inst_3:
// rs1==x10, rd==x4, rs1_val > 0 and imm_val == 0, rs1_val == 4096
// opcode: srliw ; op1:x10; dest:x4; op1val:4096;  immval:0
TEST_IMM_OP( srliw, x4, x10, 0x1000, 4096, 0, x24, 24, x27)

inst_4:
// rs1==x15, rd==x11, rs1_val < 0 and imm_val == 31, rs1_val == -4611686018427387905
// opcode: srliw ; op1:x15; dest:x11; op1val:-4611686018427387905;  immval:31
TEST_IMM_OP( srliw, x11, x15, 0x1, -4611686018427387905, 31, x24, 32, x27)

inst_5:
// rs1==x12, rd==x20, rs1_val > 0 and imm_val == 31, rs1_val == 4398046511104
// opcode: srliw ; op1:x12; dest:x20; op1val:4398046511104;  immval:31
TEST_IMM_OP( srliw, x20, x12, 0x0, 4398046511104, 31, x24, 40, x27)

inst_6:
// rs1==x18, rd==x17, rs1_val == imm_val and imm_val > 0 and imm_val < 32, 
// opcode: srliw ; op1:x18; dest:x17; op1val:3;  immval:3
TEST_IMM_OP( srliw, x17, x18, 0x0, 3, 3, x24, 48, x27)

inst_7:
// rs1==x3, rd==x2, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < 32, rs1_val == -9223372036854775808
// opcode: srliw ; op1:x3; dest:x2; op1val:-9223372036854775808;  immval:12
TEST_IMM_OP( srliw, x2, x3, 0x0, -9223372036854775808, 12, x24, 56, x27)

inst_8:
// rs1==x14, rd==x5, rs1_val == 0 and imm_val >= 0 and imm_val < 32, 
// opcode: srliw ; op1:x14; dest:x5; op1val:0;  immval:9
TEST_IMM_OP( srliw, x5, x14, 0x0, 0, 9, x24, 64, x27)

inst_9:
// rs1==x8, rd==x15, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < 32, imm_val == 4, rs1_val == 9223372036854775807
// opcode: srliw ; op1:x8; dest:x15; op1val:9223372036854775807;  immval:4
TEST_IMM_OP( srliw, x15, x8, 0xfffffff, 9223372036854775807, 4, x24, 72, x27)

inst_10:
// rs1==x17, rd==x26, rs1_val == 1 and imm_val >= 0 and imm_val < 32, imm_val == 23, rs1_val == 1
// opcode: srliw ; op1:x17; dest:x26; op1val:1;  immval:23
TEST_IMM_OP( srliw, x26, x17, 0x0, 1, 23, x24, 80, x27)

inst_11:
// rs1==x16, rd==x21, imm_val == 1, 
// opcode: srliw ; op1:x16; dest:x21; op1val:-4;  immval:1
TEST_IMM_OP( srliw, x21, x16, 0x7ffffffe, -4, 1, x24, 88, x27)

inst_12:
// rs1==x25, rd==x12, imm_val == 2, rs1_val == -4398046511105
// opcode: srliw ; op1:x25; dest:x12; op1val:-4398046511105;  immval:2
TEST_IMM_OP( srliw, x12, x25, 0x3fffffff, -4398046511105, 2, x24, 96, x27)

inst_13:
// rs1==x22, rd==x1, imm_val == 8, 
// opcode: srliw ; op1:x22; dest:x1; op1val:5;  immval:8
TEST_IMM_OP( srliw, x1, x22, 0x0, 5, 8, x24, 104, x27)

inst_14:
// rs1==x13, rd==x23, imm_val == 16, rs1_val == 32
// opcode: srliw ; op1:x13; dest:x23; op1val:32;  immval:16
TEST_IMM_OP( srliw, x23, x13, 0x0, 32, 16, x24, 112, x27)

inst_15:
// rs1==x11, rd==x18, imm_val == 30, 
// opcode: srliw ; op1:x11; dest:x18; op1val:6;  immval:30
TEST_IMM_OP( srliw, x18, x11, 0x0, 6, 30, x24, 120, x27)

inst_16:
// rs1==x5, rd==x25, imm_val == 29, rs1_val == 262144
// opcode: srliw ; op1:x5; dest:x25; op1val:262144;  immval:29
TEST_IMM_OP( srliw, x25, x5, 0x0, 262144, 29, x24, 128, x27)

inst_17:
// rs1==x9, rd==x28, imm_val == 27, rs1_val == 16384
// opcode: srliw ; op1:x9; dest:x28; op1val:16384;  immval:27
TEST_IMM_OP( srliw, x28, x9, 0x0, 16384, 27, x24, 136, x27)

inst_18:
// rs1==x19, rd==x7, imm_val == 15, rs1_val == -4294967297
// opcode: srliw ; op1:x19; dest:x7; op1val:-4294967297;  immval:15
TEST_IMM_OP( srliw, x7, x19, 0x1ffff, -4294967297, 15, x24, 144, x27)
RVTEST_SIGBASE( x5,signature_x5_0)

inst_19:
// rs1==x24, rd==x0, imm_val == 21, rs1_val == -257
// opcode: srliw ; op1:x24; dest:x0; op1val:-257;  immval:21
TEST_IMM_OP( srliw, x0, x24, 0x7ff, -257, 21, x5, 0, x8)

inst_20:
// rs1==x7, rd==x9, imm_val == 10, rs1_val == 35184372088832
// opcode: srliw ; op1:x7; dest:x9; op1val:35184372088832;  immval:10
TEST_IMM_OP( srliw, x9, x7, 0x0, 35184372088832, 10, x5, 8, x8)

inst_21:
// rs1==x26, rd==x19, rs1_val == 2, 
// opcode: srliw ; op1:x26; dest:x19; op1val:2;  immval:0
TEST_IMM_OP( srliw, x19, x26, 0x2, 2, 0, x5, 16, x8)

inst_22:
// rs1==x0, rd==x30, rs1_val == 4, 
// opcode: srliw ; op1:x0; dest:x30; op1val:4;  immval:19
TEST_IMM_OP( srliw, x30, x0, 0x0, 4, 19, x5, 24, x8)

inst_23:
// rs1==x23, rd==x24, rs1_val == 8, 
// opcode: srliw ; op1:x23; dest:x24; op1val:8;  immval:2
TEST_IMM_OP( srliw, x24, x23, 0x2, 8, 2, x5, 32, x8)

inst_24:
// rs1==x20, rd==x14, rs1_val == 16, 
// opcode: srliw ; op1:x20; dest:x14; op1val:16;  immval:14
TEST_IMM_OP( srliw, x14, x20, 0x0, 16, 14, x5, 40, x8)

inst_25:
// rs1==x2, rd==x6, rs1_val == 64, 
// opcode: srliw ; op1:x2; dest:x6; op1val:64;  immval:29
TEST_IMM_OP( srliw, x6, x2, 0x0, 64, 29, x5, 48, x8)

inst_26:
// rs1==x30, rd==x27, rs1_val == 128, 
// opcode: srliw ; op1:x30; dest:x27; op1val:128;  immval:30
TEST_IMM_OP( srliw, x27, x30, 0x0, 128, 30, x5, 56, x8)

inst_27:
// rs1==x31, rd==x3, rs1_val == 256, 
// opcode: srliw ; op1:x31; dest:x3; op1val:256;  immval:21
TEST_IMM_OP( srliw, x3, x31, 0x0, 256, 21, x5, 64, x8)

inst_28:
// rs1==x28, rd==x22, rs1_val == 512, 
// opcode: srliw ; op1:x28; dest:x22; op1val:512;  immval:4
TEST_IMM_OP( srliw, x22, x28, 0x20, 512, 4, x5, 72, x8)

inst_29:
// rs1==x27, rd==x13, rs1_val == 1024, 
// opcode: srliw ; op1:x27; dest:x13; op1val:1024;  immval:31
TEST_IMM_OP( srliw, x13, x27, 0x0, 1024, 31, x5, 80, x8)

inst_30:
// rs1==x4, rd==x10, rs1_val == 2048, 
// opcode: srliw ; op1:x4; dest:x10; op1val:2048;  immval:10
TEST_IMM_OP( srliw, x10, x4, 0x2, 2048, 10, x5, 88, x8)

inst_31:
// rs1==x1, rd==x16, rs1_val == 8192, 
// opcode: srliw ; op1:x1; dest:x16; op1val:8192;  immval:4
TEST_IMM_OP( srliw, x16, x1, 0x200, 8192, 4, x5, 96, x8)

inst_32:
// rs1_val == 32768, 
// opcode: srliw ; op1:x10; dest:x11; op1val:32768;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x0, 32768, 18, x5, 104, x8)

inst_33:
// rs1_val == 65536, 
// opcode: srliw ; op1:x10; dest:x11; op1val:65536;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x0, 65536, 31, x5, 112, x8)

inst_34:
// rs1_val == 131072, 
// opcode: srliw ; op1:x10; dest:x11; op1val:131072;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x80, 131072, 10, x5, 120, x8)

inst_35:
// rs1_val == 524288, 
// opcode: srliw ; op1:x10; dest:x11; op1val:524288;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0x80, 524288, 12, x5, 128, x8)

inst_36:
// rs1_val == 1048576, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1048576;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x4, 1048576, 18, x5, 136, x8)

inst_37:
// rs1_val == 2097152, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2097152;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x10, 2097152, 17, x5, 144, x8)

inst_38:
// rs1_val == 4194304, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4194304;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x0, 4194304, 27, x5, 152, x8)

inst_39:
// rs1_val == 8388608, 
// opcode: srliw ; op1:x10; dest:x11; op1val:8388608;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x4000, 8388608, 9, x5, 160, x8)

inst_40:
// rs1_val == 16777216, 
// opcode: srliw ; op1:x10; dest:x11; op1val:16777216;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x40, 16777216, 18, x5, 168, x8)

inst_41:
// rs1_val == 67108864, 
// opcode: srliw ; op1:x10; dest:x11; op1val:67108864;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x0, 67108864, 30, x5, 176, x8)

inst_42:
// rs1_val == 134217728, 
// opcode: srliw ; op1:x10; dest:x11; op1val:134217728;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0x8000000, 134217728, 0, x5, 184, x8)

inst_43:
// rs1_val == 268435456, 
// opcode: srliw ; op1:x10; dest:x11; op1val:268435456;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x800000, 268435456, 5, x5, 192, x8)

inst_44:
// rs1_val == 536870912, 
// opcode: srliw ; op1:x10; dest:x11; op1val:536870912;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0x2000, 536870912, 16, x5, 200, x8)

inst_45:
// rs1_val == 1073741824, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1073741824;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0x400000, 1073741824, 8, x5, 208, x8)

inst_46:
// rs1_val == 2147483648, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2147483648;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x10000000, 2147483648, 3, x5, 216, x8)

inst_47:
// rs1_val == 4294967296, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4294967296;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x0, 4294967296, 17, x5, 224, x8)

inst_48:
// rs1_val == 8589934592, 
// opcode: srliw ; op1:x10; dest:x11; op1val:8589934592;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x0, 8589934592, 31, x5, 232, x8)

inst_49:
// rs1_val == 17179869184, 
// opcode: srliw ; op1:x10; dest:x11; op1val:17179869184;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0x0, 17179869184, 8, x5, 240, x8)

inst_50:
// rs1_val == 34359738368, 
// opcode: srliw ; op1:x10; dest:x11; op1val:34359738368;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x0, 34359738368, 6, x5, 248, x8)

inst_51:
// rs1_val == 68719476736, 
// opcode: srliw ; op1:x10; dest:x11; op1val:68719476736;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x0, 68719476736, 21, x5, 256, x8)

inst_52:
// rs1_val == 137438953472, 
// opcode: srliw ; op1:x10; dest:x11; op1val:137438953472;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x0, 137438953472, 1, x5, 264, x8)

inst_53:
// rs1_val == 274877906944, 
// opcode: srliw ; op1:x10; dest:x11; op1val:274877906944;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x0, 274877906944, 3, x5, 272, x8)

inst_54:
// rs1_val == 549755813888, 
// opcode: srliw ; op1:x10; dest:x11; op1val:549755813888;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x0, 549755813888, 17, x5, 280, x8)

inst_55:
// rs1_val == 1099511627776, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1099511627776;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0x0, 1099511627776, 16, x5, 288, x8)

inst_56:
// rs1_val == 2199023255552, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2199023255552;  immval:2
TEST_IMM_OP( srliw, x11, x10, 0x0, 2199023255552, 2, x5, 296, x8)

inst_57:
// rs1_val == 8796093022208, 
// opcode: srliw ; op1:x10; dest:x11; op1val:8796093022208;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x0, 8796093022208, 6, x5, 304, x8)

inst_58:
// rs1_val == 17592186044416, 
// opcode: srliw ; op1:x10; dest:x11; op1val:17592186044416;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x0, 17592186044416, 19, x5, 312, x8)

inst_59:
// rs1_val == 70368744177664, 
// opcode: srliw ; op1:x10; dest:x11; op1val:70368744177664;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0x0, 70368744177664, 8, x5, 320, x8)

inst_60:
// rs1_val == 140737488355328, 
// opcode: srliw ; op1:x10; dest:x11; op1val:140737488355328;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x0, 140737488355328, 1, x5, 328, x8)

inst_61:
// rs1_val == 281474976710656, 
// opcode: srliw ; op1:x10; dest:x11; op1val:281474976710656;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x0, 281474976710656, 5, x5, 336, x8)

inst_62:
// rs1_val == 562949953421312, 
// opcode: srliw ; op1:x10; dest:x11; op1val:562949953421312;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x0, 562949953421312, 13, x5, 344, x8)

inst_63:
// rs1_val == 1125899906842624, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1125899906842624;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x0, 1125899906842624, 18, x5, 352, x8)

inst_64:
// rs1_val == 2251799813685248, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2251799813685248;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x0, 2251799813685248, 6, x5, 360, x8)

inst_65:
// rs1_val == 4503599627370496, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4503599627370496;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x0, 4503599627370496, 27, x5, 368, x8)

inst_66:
// rs1_val == 9007199254740992, 
// opcode: srliw ; op1:x10; dest:x11; op1val:9007199254740992;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x0, 9007199254740992, 1, x5, 376, x8)

inst_67:
// rs1_val == 18014398509481984, 
// opcode: srliw ; op1:x10; dest:x11; op1val:18014398509481984;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x0, 18014398509481984, 9, x5, 384, x8)

inst_68:
// rs1_val == 36028797018963968, 
// opcode: srliw ; op1:x10; dest:x11; op1val:36028797018963968;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x0, 36028797018963968, 27, x5, 392, x8)

inst_69:
// rs1_val == 72057594037927936, 
// opcode: srliw ; op1:x10; dest:x11; op1val:72057594037927936;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x0, 72057594037927936, 13, x5, 400, x8)

inst_70:
// rs1_val == 144115188075855872, 
// opcode: srliw ; op1:x10; dest:x11; op1val:144115188075855872;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x0, 144115188075855872, 31, x5, 408, x8)

inst_71:
// rs1_val == 288230376151711744, 
// opcode: srliw ; op1:x10; dest:x11; op1val:288230376151711744;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x0, 288230376151711744, 14, x5, 416, x8)

inst_72:
// rs1_val == 576460752303423488, 
// opcode: srliw ; op1:x10; dest:x11; op1val:576460752303423488;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0x0, 576460752303423488, 4, x5, 424, x8)

inst_73:
// rs1_val == -2199023255553, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2199023255553;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0xffffff, -2199023255553, 8, x5, 432, x8)

inst_74:
// rs1_val == -8796093022209, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8796093022209;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, -8796093022209, 16, x5, 440, x8)

inst_75:
// rs1_val == -17592186044417, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-17592186044417;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, -17592186044417, 16, x5, 448, x8)

inst_76:
// rs1_val == -35184372088833, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-35184372088833;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x7ffffff, -35184372088833, 5, x5, 456, x8)

inst_77:
// rs1_val == -70368744177665, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-70368744177665;  immval:15
TEST_IMM_OP( srliw, x11, x10, 0x1ffff, -70368744177665, 15, x5, 464, x8)

inst_78:
// rs1_val == -140737488355329, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-140737488355329;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x3fffff, -140737488355329, 10, x5, 472, x8)

inst_79:
// rs1_val == -281474976710657, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-281474976710657;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x7ffffff, -281474976710657, 5, x5, 480, x8)

inst_80:
// rs1_val == -1125899906842625, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1125899906842625;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0xffffffff, -1125899906842625, 0, x5, 488, x8)

inst_81:
// rs1_val == -2251799813685249, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2251799813685249;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, -2251799813685249, 16, x5, 496, x8)

inst_82:
// rs1_val == -4503599627370497, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4503599627370497;  immval:8
TEST_IMM_OP( srliw, x11, x10, 0xffffff, -4503599627370497, 8, x5, 504, x8)

inst_83:
// rs1_val == -9007199254740993, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-9007199254740993;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x3fff, -9007199254740993, 18, x5, 512, x8)

inst_84:
// rs1_val == -18014398509481985, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-18014398509481985;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x1f, -18014398509481985, 27, x5, 520, x8)

inst_85:
// rs1_val == -36028797018963969, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-36028797018963969;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -36028797018963969, 30, x5, 528, x8)

inst_86:
// rs1_val == -72057594037927937, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-72057594037927937;  immval:14
TEST_IMM_OP( srliw, x11, x10, 0x3ffff, -72057594037927937, 14, x5, 536, x8)

inst_87:
// rs1_val == -144115188075855873, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-144115188075855873;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1ff, -144115188075855873, 23, x5, 544, x8)

inst_88:
// rs1_val == -288230376151711745, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-288230376151711745;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x7fffffff, -288230376151711745, 1, x5, 552, x8)

inst_89:
// rs1_val == -576460752303423489, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-576460752303423489;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, -576460752303423489, 16, x5, 560, x8)

inst_90:
// rs1_val == -1152921504606846977, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1152921504606846977;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xfffffff, -1152921504606846977, 4, x5, 568, x8)

inst_91:
// rs1_val == -2305843009213693953, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2305843009213693953;  immval:18
TEST_IMM_OP( srliw, x11, x10, 0x3fff, -2305843009213693953, 18, x5, 576, x8)

inst_92:
// rs1_val == 6148914691236517205, 
// opcode: srliw ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0xaaaaa, 6148914691236517205, 11, x5, 584, x8)

inst_93:
// rs1_val == -6148914691236517206, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x5, -6148914691236517206, 29, x5, 592, x8)

inst_94:
// rs1_val == 1152921504606846976, 
// opcode: srliw ; op1:x10; dest:x11; op1val:1152921504606846976;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0x0, 1152921504606846976, 4, x5, 600, x8)

inst_95:
// rs1_val == 2305843009213693952, 
// opcode: srliw ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x0, 2305843009213693952, 19, x5, 608, x8)

inst_96:
// rs1_val == 4611686018427387904, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:13
TEST_IMM_OP( srliw, x11, x10, 0x0, 4611686018427387904, 13, x5, 616, x8)

inst_97:
// rs1_val == -2, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, -2, 29, x5, 624, x8)

inst_98:
// rs1_val == -3, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-3;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1fffffff, -3, 3, x5, 632, x8)

inst_99:
// rs1_val == -5, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-5;  immval:11
TEST_IMM_OP( srliw, x11, x10, 0x1fffff, -5, 11, x5, 640, x8)

inst_100:
// rs1_val == -9, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-9;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1ff, -9, 23, x5, 648, x8)

inst_101:
// rs1_val == -17, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-17;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xffffffe, -17, 4, x5, 656, x8)

inst_102:
// rs1_val == -33, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-33;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x7fffff, -33, 9, x5, 664, x8)

inst_103:
// rs1_val == -65, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-65;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x3fffff, -65, 10, x5, 672, x8)

inst_104:
// rs1_val == -129, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-129;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, -129, 29, x5, 680, x8)

inst_105:
// rs1_val == -513, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-513;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1ff, -513, 23, x5, 688, x8)

inst_106:
// rs1_val == -1025, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1025;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xfffffbf, -1025, 4, x5, 696, x8)

inst_107:
// rs1_val == -2049, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2049;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x7fff, -2049, 17, x5, 704, x8)

inst_108:
// rs1_val == -4097, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4097;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xffff, -4097, 16, x5, 712, x8)

inst_109:
// rs1_val == -8193, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8193;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x7fffefff, -8193, 1, x5, 720, x8)

inst_110:
// rs1_val == -16385, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-16385;  immval:30
TEST_IMM_OP( srliw, x11, x10, 0x3, -16385, 30, x5, 728, x8)

inst_111:
// rs1_val == -32769, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-32769;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1fffefff, -32769, 3, x5, 736, x8)

inst_112:
// rs1_val == -65537, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-65537;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x7ff, -65537, 21, x5, 744, x8)

inst_113:
// rs1_val == -131073, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-131073;  immval:16
TEST_IMM_OP( srliw, x11, x10, 0xfffd, -131073, 16, x5, 752, x8)

inst_114:
// rs1_val == -262145, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-262145;  immval:0
TEST_IMM_OP( srliw, x11, x10, 0xfffbffff, -262145, 0, x5, 760, x8)

inst_115:
// rs1_val == -524289, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-524289;  immval:10
TEST_IMM_OP( srliw, x11, x10, 0x3ffdff, -524289, 10, x5, 768, x8)

inst_116:
// rs1_val == -1048577, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1048577;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1ffdffff, -1048577, 3, x5, 776, x8)

inst_117:
// rs1_val == -2097153, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2097153;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1ffbffff, -2097153, 3, x5, 784, x8)

inst_118:
// rs1_val == -4194305, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-4194305;  immval:31
TEST_IMM_OP( srliw, x11, x10, 0x1, -4194305, 31, x5, 792, x8)

inst_119:
// rs1_val == -8388609, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8388609;  immval:29
TEST_IMM_OP( srliw, x11, x10, 0x7, -8388609, 29, x5, 800, x8)

inst_120:
// rs1_val == -16777217, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-16777217;  immval:23
TEST_IMM_OP( srliw, x11, x10, 0x1fd, -16777217, 23, x5, 808, x8)

inst_121:
// rs1_val == -33554433, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-33554433;  immval:6
TEST_IMM_OP( srliw, x11, x10, 0x3f7ffff, -33554433, 6, x5, 816, x8)

inst_122:
// rs1_val == -67108865, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-67108865;  immval:5
TEST_IMM_OP( srliw, x11, x10, 0x7dfffff, -67108865, 5, x5, 824, x8)

inst_123:
// rs1_val == -134217729, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-134217729;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1effffff, -134217729, 3, x5, 832, x8)

inst_124:
// rs1_val == -268435457, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-268435457;  immval:9
TEST_IMM_OP( srliw, x11, x10, 0x77ffff, -268435457, 9, x5, 840, x8)

inst_125:
// rs1_val == -536870913, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-536870913;  immval:17
TEST_IMM_OP( srliw, x11, x10, 0x6fff, -536870913, 17, x5, 848, x8)

inst_126:
// rs1_val == -1073741825, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1073741825;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xbffffff, -1073741825, 4, x5, 856, x8)

inst_127:
// rs1_val == -2147483649, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-2147483649;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0xf, -2147483649, 27, x5, 864, x8)

inst_128:
// rs1_val == -8589934593, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-8589934593;  immval:1
TEST_IMM_OP( srliw, x11, x10, 0x7fffffff, -8589934593, 1, x5, 872, x8)

inst_129:
// rs1_val == -17179869185, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-17179869185;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x1fff, -17179869185, 19, x5, 880, x8)

inst_130:
// rs1_val == -34359738369, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-34359738369;  immval:12
TEST_IMM_OP( srliw, x11, x10, 0xfffff, -34359738369, 12, x5, 888, x8)

inst_131:
// rs1_val == -68719476737, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-68719476737;  immval:2
TEST_IMM_OP( srliw, x11, x10, 0x3fffffff, -68719476737, 2, x5, 896, x8)

inst_132:
// rs1_val == -137438953473, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-137438953473;  immval:27
TEST_IMM_OP( srliw, x11, x10, 0x1f, -137438953473, 27, x5, 904, x8)

inst_133:
// rs1_val == -274877906945, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-274877906945;  immval:7
TEST_IMM_OP( srliw, x11, x10, 0x1ffffff, -274877906945, 7, x5, 912, x8)

inst_134:
// rs1_val == -549755813889, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-549755813889;  immval:4
TEST_IMM_OP( srliw, x11, x10, 0xfffffff, -549755813889, 4, x5, 920, x8)

inst_135:
// rs1_val == -1099511627777, 
// opcode: srliw ; op1:x10; dest:x11; op1val:-1099511627777;  immval:3
TEST_IMM_OP( srliw, x11, x10, 0x1fffffff, -1099511627777, 3, x5, 928, x8)

inst_136:
// imm_val == 21, rs1_val == -257
// opcode: srliw ; op1:x10; dest:x11; op1val:-257;  immval:21
TEST_IMM_OP( srliw, x11, x10, 0x7ff, -257, 21, x5, 936, x8)

inst_137:
// rs1_val == 4, 
// opcode: srliw ; op1:x10; dest:x11; op1val:4;  immval:19
TEST_IMM_OP( srliw, x11, x10, 0x0, 4, 19, x5, 944, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x24_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x24_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 119*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
