 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the beq instruction of the RISC-V I extension for the beq covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",beq)

RVTEST_SIGBASE( x3,signature_x3_1)

inst_0:
// rs1 == rs2, rs1==x5, rs2==x5, rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs2_val == 1073741824, rs1_val == 8796093022208, rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0
// opcode: beq, op1:x5; op2:x5; op1val:8796093022208; op2val:1073741824; immval:8; align:0
TEST_BRANCH_OP(beq, x7, x5, x5, 8796093022208, 1073741824, 8, 3f, x3, 0,0)

inst_1:
// rs1 != rs2, rs1==x6, rs2==x18, rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs1_val == 2097152
// opcode: beq, op1:x6; op2:x18; op1val:2097152; op2val:-4; immval:1024; align:0
TEST_BRANCH_OP(beq, x7, x6, x18, 2097152, -4, 1024, 3f, x3, 8,0)

inst_2:
// rs1==x10, rs2==x2, rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs1_val == -33554433, rs2_val == -67108865
// opcode: beq, op1:x10; op2:x2; op1val:-33554433; op2val:-67108865; immval:128; align:0
TEST_BRANCH_OP(beq, x7, x10, x2, -33554433, -67108865, 128, 3f, x3, 16,0)

inst_3:
// rs1==x14, rs2==x9, rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == -2305843009213693953
// opcode: beq, op1:x14; op2:x9; op1val:-2305843009213693953; op2val:5; immval:4; align:0
TEST_BRANCH_OP(beq, x7, x14, x9, -2305843009213693953, 5, 4, 3f, x3, 24,0)

inst_4:
// rs1==x23, rs2==x22, rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == -1099511627777, rs2_val == -1099511627777
// opcode: beq, op1:x23; op2:x22; op1val:-1099511627777; op2val:-1099511627777; immval:256; align:0
TEST_BRANCH_OP(beq, x7, x23, x22, -1099511627777, -1099511627777, 256, 3f, x3, 32,0)

inst_5:
// rs1==x17, rs2==x20, rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs1_val == -6148914691236517206, rs2_val == -6148914691236517206
// opcode: beq, op1:x17; op2:x20; op1val:-6148914691236517206; op2val:-6148914691236517206; immval:8; align:0
TEST_BRANCH_OP(beq, x7, x17, x20, -6148914691236517206, -6148914691236517206, 8, 1b, x3, 40,0)

inst_6:
// rs1==x4, rs2==x29, rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs2_val == -1048577, rs1_val == -4097
// opcode: beq, op1:x4; op2:x29; op1val:-4097; op2val:-1048577; immval:0; align:0
TEST_BRANCH_OP(beq, x7, x4, x29, -4097, -1048577, 0, 1b, x3, 48,0)

inst_7:
// rs1==x11, rs2==x13, rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs2_val == 268435456, rs1_val == -17592186044417
// opcode: beq, op1:x11; op2:x13; op1val:-17592186044417; op2val:268435456; immval:4; align:0
TEST_BRANCH_OP(beq, x7, x11, x13, -17592186044417, 268435456, 4, 1b, x3, 56,0)

inst_8:
// rs1==x30, rs2==x12, rs1_val == 1, rs2_val == -140737488355329
// opcode: beq, op1:x30; op2:x12; op1val:1; op2val:-140737488355329; immval:8; align:0
TEST_BRANCH_OP(beq, x7, x30, x12, 1, -140737488355329, 8, 3f, x3, 64,0)

inst_9:
// rs1==x20, rs2==x24, rs1_val == 2, rs2_val == -33554433
// opcode: beq, op1:x20; op2:x24; op1val:2; op2val:-33554433; immval:2; align:0
TEST_BRANCH_OP(beq, x7, x20, x24, 2, -33554433, 2, 3f, x3, 72,0)

inst_10:
// rs1==x31, rs2==x27, rs1_val == 4, 
// opcode: beq, op1:x31; op2:x27; op1val:4; op2val:-10; immval:1024; align:0
TEST_BRANCH_OP(beq, x7, x31, x27, 4, -10, 1024, 3f, x3, 80,0)

inst_11:
// rs1==x12, rs2==x28, rs1_val == 8, rs2_val == -8589934593
// opcode: beq, op1:x12; op2:x28; op1val:8; op2val:-8589934593; immval:64; align:0
TEST_BRANCH_OP(beq, x7, x12, x28, 8, -8589934593, 64, 3f, x3, 88,0)

inst_12:
// rs1==x26, rs2==x19, rs1_val == 16, rs2_val == 32768
// opcode: beq, op1:x26; op2:x19; op1val:16; op2val:32768; immval:64; align:0
TEST_BRANCH_OP(beq, x7, x26, x19, 16, 32768, 64, 3f, x3, 96,0)

inst_13:
// rs1==x18, rs2==x11, rs1_val == 32, rs2_val == -4194305
// opcode: beq, op1:x18; op2:x11; op1val:32; op2val:-4194305; immval:6; align:0
TEST_BRANCH_OP(beq, x7, x18, x11, 32, -4194305, 6, 1b, x3, 104,0)

inst_14:
// rs1==x28, rs2==x26, rs1_val == 64, 
// opcode: beq, op1:x28; op2:x26; op1val:64; op2val:-6; immval:64; align:0
TEST_BRANCH_OP(beq, x7, x28, x26, 64, -6, 64, 3f, x3, 112,0)

inst_15:
// rs1==x9, rs2==x25, rs1_val == 128, rs2_val == 8
// opcode: beq, op1:x9; op2:x25; op1val:128; op2val:8; immval:2; align:0
TEST_BRANCH_OP(beq, x7, x9, x25, 128, 8, 2, 1b, x3, 120,0)

inst_16:
// rs1==x19, rs2==x16, rs1_val == 256, rs2_val == -17179869185
// opcode: beq, op1:x19; op2:x16; op1val:256; op2val:-17179869185; immval:2; align:0
TEST_BRANCH_OP(beq, x7, x19, x16, 256, -17179869185, 2, 1b, x3, 128,0)

inst_17:
// rs1==x22, rs2==x21, rs1_val == 512, 
// opcode: beq, op1:x22; op2:x21; op1val:512; op2val:5; immval:4; align:0
TEST_BRANCH_OP(beq, x7, x22, x21, 512, 5, 4, 3f, x3, 136,0)

inst_18:
// rs1==x27, rs2==x1, rs1_val == 1024, rs2_val == 144115188075855872
// opcode: beq, op1:x27; op2:x1; op1val:1024; op2val:144115188075855872; immval:10; align:0
TEST_BRANCH_OP(beq, x7, x27, x1, 1024, 144115188075855872, 10, 1b, x3, 144,0)

inst_19:
// rs1==x7, rs2==x30, rs1_val == 2048, 
// opcode: beq, op1:x7; op2:x30; op1val:2048; op2val:1073741824; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x7, x30, 2048, 1073741824, 0, 3f, x3, 152,0)
RVTEST_SIGBASE( x5,signature_x5_0)

inst_20:
// rs1==x29, rs2==x10, rs1_val == 4096, rs2_val == 134217728
// opcode: beq, op1:x29; op2:x10; op1val:4096; op2val:134217728; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x29, x10, 4096, 134217728, 0, 1b, x5, 0,0)

inst_21:
// rs1==x3, rs2==x23, rs1_val == 8192, rs2_val == -288230376151711745
// opcode: beq, op1:x3; op2:x23; op1val:8192; op2val:-288230376151711745; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x3, x23, 8192, -288230376151711745, 4, 3f, x5, 8,0)

inst_22:
// rs1==x15, rs2==x8, rs1_val == 16384, rs2_val == -32769
// opcode: beq, op1:x15; op2:x8; op1val:16384; op2val:-32769; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x15, x8, 16384, -32769, 4, 3f, x5, 16,0)

inst_23:
// rs1==x8, rs2==x6, rs1_val == 32768, 
// opcode: beq, op1:x8; op2:x6; op1val:32768; op2val:7; immval:256; align:0
TEST_BRANCH_OP(beq, x9, x8, x6, 32768, 7, 256, 3f, x5, 24,0)

inst_24:
// rs1==x21, rs2==x31, rs1_val == 65536, rs2_val == -4398046511105
// opcode: beq, op1:x21; op2:x31; op1val:65536; op2val:-4398046511105; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x21, x31, 65536, -4398046511105, 0, 1b, x5, 32,0)

inst_25:
// rs1==x24, rs2==x0, rs1_val == 131072, rs2_val == -70368744177665
// opcode: beq, op1:x24; op2:x0; op1val:131072; op2val:-70368744177665; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x24, x0, 131072, -70368744177665, 4, 1b, x5, 40,0)

inst_26:
// rs1==x1, rs2==x7, rs1_val == 262144, rs2_val == -16385
// opcode: beq, op1:x1; op2:x7; op1val:262144; op2val:-16385; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x1, x7, 262144, -16385, 6, 3f, x5, 48,0)

inst_27:
// rs1==x2, rs2==x4, rs1_val == 524288, 
// opcode: beq, op1:x2; op2:x4; op1val:524288; op2val:-6148914691236517206; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x2, x4, 524288, -6148914691236517206, 0, 3f, x5, 56,0)

inst_28:
// rs1==x16, rs2==x3, rs1_val == 1048576, 
// opcode: beq, op1:x16; op2:x3; op1val:1048576; op2val:-32769; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x16, x3, 1048576, -32769, 16, 3f, x5, 64,0)

inst_29:
// rs1==x25, rs2==x17, rs1_val == 4194304, rs2_val == -2049
// opcode: beq, op1:x25; op2:x17; op1val:4194304; op2val:-2049; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x25, x17, 4194304, -2049, 8, 3f, x5, 72,0)

inst_30:
// rs1==x13, rs2==x15, rs1_val == 8388608, rs2_val == -17
// opcode: beq, op1:x13; op2:x15; op1val:8388608; op2val:-17; immval:256; align:0
TEST_BRANCH_OP(beq, x9, x13, x15, 8388608, -17, 256, 3f, x5, 80,0)

inst_31:
// rs1==x0, rs2==x14, rs1_val == 16777216, rs2_val == 64
// opcode: beq, op1:x0; op2:x14; op1val:16777216; op2val:64; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x0, x14, 16777216, 64, 128, 3f, x5, 88,0)

inst_32:
// rs1_val == 33554432, 
// opcode: beq, op1:x10; op2:x11; op1val:33554432; op2val:6; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 33554432, 6, 1024, 3f, x5, 96,0)

inst_33:
// rs1_val == 67108864, rs2_val == -134217729
// opcode: beq, op1:x10; op2:x11; op1val:67108864; op2val:-134217729; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 67108864, -134217729, 6, 3f, x5, 104,0)

inst_34:
// rs1_val == 134217728, rs2_val == -9223372036854775808
// opcode: beq, op1:x10; op2:x11; op1val:134217728; op2val:-9223372036854775808; immval:64; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 134217728, -9223372036854775808, 64, 3f, x5, 112,0)

inst_35:
// rs1_val == 268435456, 
// opcode: beq, op1:x10; op2:x11; op1val:268435456; op2val:-16385; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 268435456, -16385, 2, 3f, x5, 120,0)

inst_36:
// rs1_val == 536870912, rs2_val == -129
// opcode: beq, op1:x10; op2:x11; op1val:536870912; op2val:-129; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 536870912, -129, 1024, 3f, x5, 128,0)

inst_37:
// rs1_val == 1073741824, 
// opcode: beq, op1:x10; op2:x11; op1val:1073741824; op2val:144115188075855872; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 1073741824, 144115188075855872, 1024, 3f, x5, 136,0)

inst_38:
// rs1_val == 2147483648, rs2_val == 137438953472
// opcode: beq, op1:x10; op2:x11; op1val:2147483648; op2val:137438953472; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2147483648, 137438953472, 0, 3f, x5, 144,0)

inst_39:
// rs1_val == 4294967296, 
// opcode: beq, op1:x10; op2:x11; op1val:4294967296; op2val:137438953472; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 4294967296, 137438953472, 8, 3f, x5, 152,0)

inst_40:
// rs1_val == 8589934592, rs2_val == -17592186044417
// opcode: beq, op1:x10; op2:x11; op1val:8589934592; op2val:-17592186044417; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 8589934592, -17592186044417, 2, 3f, x5, 160,0)

inst_41:
// rs1_val == 17179869184, rs2_val == -262145
// opcode: beq, op1:x10; op2:x11; op1val:17179869184; op2val:-262145; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 17179869184, -262145, 1366, 1b, x5, 168,0)

inst_42:
// rs1_val == 34359738368, 
// opcode: beq, op1:x10; op2:x11; op1val:34359738368; op2val:6; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 34359738368, 6, 6, 3f, x5, 176,0)

inst_43:
// rs1_val == 68719476736, 
// opcode: beq, op1:x10; op2:x11; op1val:68719476736; op2val:-6148914691236517206; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 68719476736, -6148914691236517206, 1024, 3f, x5, 184,0)

inst_44:
// rs1_val == 137438953472, rs2_val == -144115188075855873
// opcode: beq, op1:x10; op2:x11; op1val:137438953472; op2val:-144115188075855873; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 137438953472, -144115188075855873, 2, 3f, x5, 192,0)

inst_45:
// rs1_val == 274877906944, rs2_val == 18014398509481984
// opcode: beq, op1:x10; op2:x11; op1val:274877906944; op2val:18014398509481984; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 274877906944, 18014398509481984, 0, 1b, x5, 200,0)

inst_46:
// rs1_val == 549755813888, 
// opcode: beq, op1:x10; op2:x11; op1val:549755813888; op2val:-17592186044417; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 549755813888, -17592186044417, 0, 1b, x5, 208,0)

inst_47:
// rs1_val == 1099511627776, rs2_val == -562949953421313
// opcode: beq, op1:x10; op2:x11; op1val:1099511627776; op2val:-562949953421313; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 1099511627776, -562949953421313, 2, 3f, x5, 216,0)

inst_48:
// rs1_val == 2199023255552, rs2_val == 36028797018963968
// opcode: beq, op1:x10; op2:x11; op1val:2199023255552; op2val:36028797018963968; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2199023255552, 36028797018963968, 1366, 1b, x5, 224,0)

inst_49:
// rs1_val == 4398046511104, rs2_val == -536870913
// opcode: beq, op1:x10; op2:x11; op1val:4398046511104; op2val:-536870913; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 4398046511104, -536870913, 6, 1b, x5, 232,0)

inst_50:
// rs1_val == 17592186044416, rs2_val == -4294967297
// opcode: beq, op1:x10; op2:x11; op1val:17592186044416; op2val:-4294967297; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 17592186044416, -4294967297, 4, 1b, x5, 240,0)

inst_51:
// rs1_val == 35184372088832, 
// opcode: beq, op1:x10; op2:x11; op1val:35184372088832; op2val:134217728; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 35184372088832, 134217728, 16, 3f, x5, 248,0)

inst_52:
// rs1_val == 70368744177664, rs2_val == 8192
// opcode: beq, op1:x10; op2:x11; op1val:70368744177664; op2val:8192; immval:512; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 70368744177664, 8192, 512, 3f, x5, 256,0)

inst_53:
// rs1_val == 140737488355328, rs2_val == 2048
// opcode: beq, op1:x10; op2:x11; op1val:140737488355328; op2val:2048; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 140737488355328, 2048, 1024, 3f, x5, 264,0)

inst_54:
// rs1_val == 281474976710656, 
// opcode: beq, op1:x10; op2:x11; op1val:281474976710656; op2val:36028797018963968; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 281474976710656, 36028797018963968, 2, 1b, x5, 272,0)

inst_55:
// rs1_val == 562949953421312, rs2_val == -34359738369
// opcode: beq, op1:x10; op2:x11; op1val:562949953421312; op2val:-34359738369; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 562949953421312, -34359738369, 1024, 1b, x5, 280,0)

inst_56:
// rs1_val == 1125899906842624, 
// opcode: beq, op1:x10; op2:x11; op1val:1125899906842624; op2val:7; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 1125899906842624, 7, 16, 3f, x5, 288,0)

inst_57:
// rs1_val == 2251799813685248, rs2_val == 2
// opcode: beq, op1:x10; op2:x11; op1val:2251799813685248; op2val:2; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2251799813685248, 2, 2, 3f, x5, 296,0)

inst_58:
// rs1_val == 4503599627370496, 
// opcode: beq, op1:x10; op2:x11; op1val:4503599627370496; op2val:-34359738369; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 4503599627370496, -34359738369, 4, 3f, x5, 304,0)

inst_59:
// rs1_val == 9007199254740992, rs2_val == 128
// opcode: beq, op1:x10; op2:x11; op1val:9007199254740992; op2val:128; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 9007199254740992, 128, 1024, 3f, x5, 312,0)

inst_60:
// rs1_val == 18014398509481984, 
// opcode: beq, op1:x10; op2:x11; op1val:18014398509481984; op2val:-262145; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 18014398509481984, -262145, 8, 3f, x5, 320,0)

inst_61:
// rs1_val == 36028797018963968, 
// opcode: beq, op1:x10; op2:x11; op1val:36028797018963968; op2val:134217728; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 36028797018963968, 134217728, 128, 3f, x5, 328,0)

inst_62:
// rs1_val == 72057594037927936, rs2_val == -65537
// opcode: beq, op1:x10; op2:x11; op1val:72057594037927936; op2val:-65537; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 72057594037927936, -65537, 2, 3f, x5, 336,0)

inst_63:
// rs1_val == 144115188075855872, 
// opcode: beq, op1:x10; op2:x11; op1val:144115188075855872; op2val:64; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 144115188075855872, 64, 1024, 3f, x5, 344,0)

inst_64:
// rs1_val == 288230376151711744, rs2_val == 131072
// opcode: beq, op1:x10; op2:x11; op1val:288230376151711744; op2val:131072; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 288230376151711744, 131072, 4, 3f, x5, 352,0)

inst_65:
// rs1_val == 576460752303423488, 
// opcode: beq, op1:x10; op2:x11; op1val:576460752303423488; op2val:-129; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 576460752303423488, -129, 8, 3f, x5, 360,0)

inst_66:
// rs1_val == 1152921504606846976, rs2_val == 274877906944
// opcode: beq, op1:x10; op2:x11; op1val:1152921504606846976; op2val:274877906944; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 1152921504606846976, 274877906944, 128, 3f, x5, 368,0)

inst_67:
// rs1_val == 2305843009213693952, rs2_val == 67108864
// opcode: beq, op1:x10; op2:x11; op1val:2305843009213693952; op2val:67108864; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2305843009213693952, 67108864, 4, 3f, x5, 376,0)

inst_68:
// rs1_val == 4611686018427387904, rs2_val == -1152921504606846977
// opcode: beq, op1:x10; op2:x11; op1val:4611686018427387904; op2val:-1152921504606846977; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 4611686018427387904, -1152921504606846977, 128, 3f, x5, 384,0)

inst_69:
// rs1_val == -9223372036854775808, 
// opcode: beq, op1:x10; op2:x11; op1val:-9223372036854775808; op2val:64; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -9223372036854775808, 64, 0, 1b, x5, 392,0)

inst_70:
// rs1_val == -2, rs2_val == 2199023255552
// opcode: beq, op1:x10; op2:x11; op1val:-2; op2val:2199023255552; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2, 2199023255552, 8, 3f, x5, 400,0)

inst_71:
// rs1_val == -3, rs2_val == -9007199254740993
// opcode: beq, op1:x10; op2:x11; op1val:-3; op2val:-9007199254740993; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -3, -9007199254740993, 2, 1b, x5, 408,0)

inst_72:
// rs1_val == -5, 
// opcode: beq, op1:x10; op2:x11; op1val:-5; op2val:-4294967297; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -5, -4294967297, 16, 3f, x5, 416,0)

inst_73:
// rs1_val == -9, 
// opcode: beq, op1:x10; op2:x11; op1val:-9; op2val:2199023255552; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -9, 2199023255552, 4, 3f, x5, 424,0)

inst_74:
// rs1_val == -17, 
// opcode: beq, op1:x10; op2:x11; op1val:-17; op2val:-6148914691236517206; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -17, -6148914691236517206, 128, 3f, x5, 432,0)

inst_75:
// rs1_val == -33, rs2_val == 524288
// opcode: beq, op1:x10; op2:x11; op1val:-33; op2val:524288; immval:512; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -33, 524288, 512, 3f, x5, 440,0)

inst_76:
// rs1_val == -65, 
// opcode: beq, op1:x10; op2:x11; op1val:-65; op2val:-6; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -65, -6, 6, 3f, x5, 448,0)

inst_77:
// rs1_val == -129, 
// opcode: beq, op1:x10; op2:x11; op1val:-129; op2val:524288; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -129, 524288, 2, 3f, x5, 456,0)

inst_78:
// rs1_val == -257, rs2_val == 2147483648
// opcode: beq, op1:x10; op2:x11; op1val:-257; op2val:2147483648; immval:10; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -257, 2147483648, 10, 1b, x5, 464,0)

inst_79:
// rs1_val == -513, 
// opcode: beq, op1:x10; op2:x11; op1val:-513; op2val:-4611686018427387904; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -513, -4611686018427387904, 8, 1b, x5, 472,0)

inst_80:
// rs1_val == -1025, 
// opcode: beq, op1:x10; op2:x11; op1val:-1025; op2val:-562949953421313; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1025, -562949953421313, 8, 3f, x5, 480,0)

inst_81:
// rs1_val == -2049, 
// opcode: beq, op1:x10; op2:x11; op1val:-2049; op2val:5; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2049, 5, 2, 1b, x5, 488,0)

inst_82:
// rs1_val == -8193, rs2_val == -137438953473
// opcode: beq, op1:x10; op2:x11; op1val:-8193; op2val:-137438953473; immval:10; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -8193, -137438953473, 10, 1b, x5, 496,0)

inst_83:
// rs1_val == -16385, 
// opcode: beq, op1:x10; op2:x11; op1val:-16385; op2val:-144115188075855873; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -16385, -144115188075855873, 4, 1b, x5, 504,0)

inst_84:
// rs2_val == -4503599627370497, rs1_val == -34359738369
// opcode: beq, op1:x10; op2:x11; op1val:-34359738369; op2val:-4503599627370497; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -34359738369, -4503599627370497, 1366, 1b, x5, 512,0)

inst_85:
// rs2_val == -18014398509481985, 
// opcode: beq, op1:x10; op2:x11; op1val:549755813888; op2val:-18014398509481985; immval:512; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 549755813888, -18014398509481985, 512, 3f, x5, 520,0)

inst_86:
// rs2_val == -36028797018963969, rs1_val == 6148914691236517205
// opcode: beq, op1:x10; op2:x11; op1val:6148914691236517205; op2val:-36028797018963969; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 6148914691236517205, -36028797018963969, 1024, 1b, x5, 528,0)

inst_87:
// rs2_val == -72057594037927937, rs1_val == -16777217
// opcode: beq, op1:x10; op2:x11; op1val:-16777217; op2val:-72057594037927937; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -16777217, -72057594037927937, 0, 3f, x5, 536,0)

inst_88:
// rs2_val == -576460752303423489, 
// opcode: beq, op1:x10; op2:x11; op1val:2251799813685248; op2val:-576460752303423489; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2251799813685248, -576460752303423489, 1366, 1b, x5, 544,0)

inst_89:
// rs2_val == -2305843009213693953, 
// opcode: beq, op1:x10; op2:x11; op1val:-65; op2val:-2305843009213693953; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -65, -2305843009213693953, 4, 3f, x5, 552,0)

inst_90:
// rs2_val == -4611686018427387905, rs1_val == -1073741825
// opcode: beq, op1:x10; op2:x11; op1val:-1073741825; op2val:-4611686018427387905; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1073741825, -4611686018427387905, 1024, 3f, x5, 560,0)

inst_91:
// rs2_val == 9223372036854775807, 
// opcode: beq, op1:x10; op2:x11; op1val:8388608; op2val:9223372036854775807; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 8388608, 9223372036854775807, 6, 1b, x5, 568,0)

inst_92:
// rs2_val == 6148914691236517205, 
// opcode: beq, op1:x10; op2:x11; op1val:1152921504606846976; op2val:6148914691236517205; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 1152921504606846976, 6148914691236517205, 128, 3f, x5, 576,0)

inst_93:
// rs1_val == -32769, 
// opcode: beq, op1:x10; op2:x11; op1val:-32769; op2val:-70368744177665; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -32769, -70368744177665, 4, 3f, x5, 584,0)

inst_94:
// rs1_val == -65537, rs2_val == -4097
// opcode: beq, op1:x10; op2:x11; op1val:-65537; op2val:-4097; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -65537, -4097, 6, 1b, x5, 592,0)

inst_95:
// rs1_val == -131073, rs2_val == 1048576
// opcode: beq, op1:x10; op2:x11; op1val:-131073; op2val:1048576; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -131073, 1048576, 6, 1b, x5, 600,0)

inst_96:
// rs1_val == -262145, rs2_val == -9
// opcode: beq, op1:x10; op2:x11; op1val:-262145; op2val:-9; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -262145, -9, 16, 3f, x5, 608,0)

inst_97:
// rs1_val == -524289, rs2_val == 1099511627776
// opcode: beq, op1:x10; op2:x11; op1val:-524289; op2val:1099511627776; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -524289, 1099511627776, 8, 3f, x5, 616,0)

inst_98:
// rs1_val == -1048577, 
// opcode: beq, op1:x10; op2:x11; op1val:-1048577; op2val:9; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1048577, 9, 8, 3f, x5, 624,0)

inst_99:
// rs1_val == -2097153, rs2_val == 2097152
// opcode: beq, op1:x10; op2:x11; op1val:-2097153; op2val:2097152; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2097153, 2097152, 2, 1b, x5, 632,0)

inst_100:
// rs1_val == -4194305, rs2_val == 576460752303423488
// opcode: beq, op1:x10; op2:x11; op1val:-4194305; op2val:576460752303423488; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -4194305, 576460752303423488, 1024, 3f, x5, 640,0)

inst_101:
// rs1_val == -8388609, rs2_val == 4194304
// opcode: beq, op1:x10; op2:x11; op1val:-8388609; op2val:4194304; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -8388609, 4194304, 1366, 1b, x5, 648,0)

inst_102:
// rs1_val == -67108865, 
// opcode: beq, op1:x10; op2:x11; op1val:-67108865; op2val:6; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -67108865, 6, 1024, 1b, x5, 656,0)

inst_103:
// rs1_val == -134217729, 
// opcode: beq, op1:x10; op2:x11; op1val:-134217729; op2val:-17179869185; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -134217729, -17179869185, 1366, 1b, x5, 664,0)

inst_104:
// rs1_val == -268435457, 
// opcode: beq, op1:x10; op2:x11; op1val:-268435457; op2val:-2049; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -268435457, -2049, 6, 3f, x5, 672,0)

inst_105:
// rs1_val == -536870913, 
// opcode: beq, op1:x10; op2:x11; op1val:-536870913; op2val:2147483648; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -536870913, 2147483648, 0, 1b, x5, 680,0)

inst_106:
// rs1_val == -2147483649, 
// opcode: beq, op1:x10; op2:x11; op1val:-2147483649; op2val:-2305843009213693953; immval:32; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2147483649, -2305843009213693953, 32, 3f, x5, 688,0)

inst_107:
// rs1_val == -4294967297, rs2_val == 4398046511104
// opcode: beq, op1:x10; op2:x11; op1val:-4294967297; op2val:4398046511104; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -4294967297, 4398046511104, 16, 3f, x5, 696,0)

inst_108:
// rs1_val == -8589934593, rs2_val == 17592186044416
// opcode: beq, op1:x10; op2:x11; op1val:-8589934593; op2val:17592186044416; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -8589934593, 17592186044416, 2, 1b, x5, 704,0)

inst_109:
// rs1_val == -17179869185, rs2_val == -513
// opcode: beq, op1:x10; op2:x11; op1val:-17179869185; op2val:-513; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -17179869185, -513, 2, 1b, x5, 712,0)

inst_110:
// rs1_val == -68719476737, rs2_val == -268435457
// opcode: beq, op1:x10; op2:x11; op1val:-68719476737; op2val:-268435457; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -68719476737, -268435457, 1366, 1b, x5, 720,0)

inst_111:
// rs1_val == -137438953473, 
// opcode: beq, op1:x10; op2:x11; op1val:-137438953473; op2val:-4294967297; immval:256; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -137438953473, -4294967297, 256, 3f, x5, 728,0)

inst_112:
// rs1_val == -274877906945, 
// opcode: beq, op1:x10; op2:x11; op1val:-274877906945; op2val:9; immval:64; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -274877906945, 9, 64, 3f, x5, 736,0)

inst_113:
// rs1_val == -549755813889, 
// opcode: beq, op1:x10; op2:x11; op1val:-549755813889; op2val:-2049; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -549755813889, -2049, 6, 3f, x5, 744,0)

inst_114:
// rs1_val == -2199023255553, 
// opcode: beq, op1:x10; op2:x11; op1val:-2199023255553; op2val:2147483648; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2199023255553, 2147483648, 6, 1b, x5, 752,0)

inst_115:
// rs1_val == -4398046511105, 
// opcode: beq, op1:x10; op2:x11; op1val:-4398046511105; op2val:131072; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -4398046511105, 131072, 128, 3f, x5, 760,0)

inst_116:
// rs1_val == -8796093022209, rs2_val == 4294967296
// opcode: beq, op1:x10; op2:x11; op1val:-8796093022209; op2val:4294967296; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -8796093022209, 4294967296, 0, 1b, x5, 768,0)

inst_117:
// rs1_val == -35184372088833, 
// opcode: beq, op1:x10; op2:x11; op1val:-35184372088833; op2val:2; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -35184372088833, 2, 4, 3f, x5, 776,0)

inst_118:
// rs1_val == -70368744177665, rs2_val == 512
// opcode: beq, op1:x10; op2:x11; op1val:-70368744177665; op2val:512; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -70368744177665, 512, 1024, 3f, x5, 784,0)

inst_119:
// rs1_val == -140737488355329, 
// opcode: beq, op1:x10; op2:x11; op1val:-140737488355329; op2val:-16385; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -140737488355329, -16385, 2, 1b, x5, 792,0)

inst_120:
// rs1_val == -281474976710657, 
// opcode: beq, op1:x10; op2:x11; op1val:-281474976710657; op2val:-8; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -281474976710657, -8, 0, 3f, x5, 800,0)

inst_121:
// rs1_val == -562949953421313, rs2_val == 2251799813685248
// opcode: beq, op1:x10; op2:x11; op1val:-562949953421313; op2val:2251799813685248; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -562949953421313, 2251799813685248, 4, 1b, x5, 808,0)

inst_122:
// rs1_val == -1125899906842625, rs2_val == 9007199254740992
// opcode: beq, op1:x10; op2:x11; op1val:-1125899906842625; op2val:9007199254740992; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1125899906842625, 9007199254740992, 8, 3f, x5, 816,0)

inst_123:
// rs1_val == -2251799813685249, rs2_val == -8388609
// opcode: beq, op1:x10; op2:x11; op1val:-2251799813685249; op2val:-8388609; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2251799813685249, -8388609, 2, 1b, x5, 824,0)

inst_124:
// rs1_val == -4503599627370497, 
// opcode: beq, op1:x10; op2:x11; op1val:-4503599627370497; op2val:-67108865; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -4503599627370497, -67108865, 1366, 1b, x5, 832,0)

inst_125:
// rs1_val == -9007199254740993, rs2_val == 536870912
// opcode: beq, op1:x10; op2:x11; op1val:-9007199254740993; op2val:536870912; immval:32; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -9007199254740993, 536870912, 32, 3f, x5, 840,0)

inst_126:
// rs1_val == -18014398509481985, rs2_val == 16384
// opcode: beq, op1:x10; op2:x11; op1val:-18014398509481985; op2val:16384; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -18014398509481985, 16384, 16, 3f, x5, 848,0)

inst_127:
// rs1_val == -36028797018963969, rs2_val == -281474976710657
// opcode: beq, op1:x10; op2:x11; op1val:-36028797018963969; op2val:-281474976710657; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -36028797018963969, -281474976710657, 2, 3f, x5, 856,0)

inst_128:
// rs1_val == -72057594037927937, 
// opcode: beq, op1:x10; op2:x11; op1val:-72057594037927937; op2val:-281474976710657; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -72057594037927937, -281474976710657, 0, 1b, x5, 864,0)

inst_129:
// rs1_val == -144115188075855873, rs2_val == -33
// opcode: beq, op1:x10; op2:x11; op1val:-144115188075855873; op2val:-33; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -144115188075855873, -33, 8, 1b, x5, 872,0)

inst_130:
// rs1_val == -288230376151711745, 
// opcode: beq, op1:x10; op2:x11; op1val:-288230376151711745; op2val:-1152921504606846977; immval:512; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -288230376151711745, -1152921504606846977, 512, 3f, x5, 880,0)

inst_131:
// rs1_val == -576460752303423489, 
// opcode: beq, op1:x10; op2:x11; op1val:-576460752303423489; op2val:-4398046511105; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -576460752303423489, -4398046511105, 6, 3f, x5, 888,0)

inst_132:
// rs1_val == -1152921504606846977, rs2_val == 32
// opcode: beq, op1:x10; op2:x11; op1val:-1152921504606846977; op2val:32; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1152921504606846977, 32, 4, 3f, x5, 896,0)

inst_133:
// rs1_val == -4611686018427387905, 
// opcode: beq, op1:x10; op2:x11; op1val:-4611686018427387905; op2val:-17592186044417; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -4611686018427387905, -17592186044417, 4, 3f, x5, 904,0)

inst_134:
// rs1_val == 9223372036854775807, 
// opcode: beq, op1:x10; op2:x11; op1val:9223372036854775807; op2val:-4; immval:10; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 9223372036854775807, -4, 10, 1b, x5, 912,0)

inst_135:
// rs2_val == 1, 
// opcode: beq, op1:x10; op2:x11; op1val:-2305843009213693953; op2val:1; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2305843009213693953, 1, 16, 3f, x5, 920,0)

inst_136:
// rs2_val == 4, 
// opcode: beq, op1:x10; op2:x11; op1val:2048; op2val:4; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2048, 4, 8, 1b, x5, 928,0)

inst_137:
// rs2_val == 16, 
// opcode: beq, op1:x10; op2:x11; op1val:16384; op2val:16; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 16384, 16, 2, 3f, x5, 936,0)

inst_138:
// rs2_val == 256, 
// opcode: beq, op1:x10; op2:x11; op1val:-2199023255553; op2val:256; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2199023255553, 256, 8, 3f, x5, 944,0)

inst_139:
// rs2_val == 1024, 
// opcode: beq, op1:x10; op2:x11; op1val:262144; op2val:1024; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 262144, 1024, 1024, 1b, x5, 952,0)

inst_140:
// rs2_val == 4096, 
// opcode: beq, op1:x10; op2:x11; op1val:4; op2val:4096; immval:64; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 4, 4096, 64, 3f, x5, 960,0)

inst_141:
// rs2_val == 65536, 
// opcode: beq, op1:x10; op2:x11; op1val:140737488355328; op2val:65536; immval:64; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 140737488355328, 65536, 64, 3f, x5, 968,0)

inst_142:
// rs2_val == 262144, 
// opcode: beq, op1:x10; op2:x11; op1val:4; op2val:262144; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 4, 262144, 8, 1b, x5, 976,0)

inst_143:
// rs2_val == 8388608, 
// opcode: beq, op1:x10; op2:x11; op1val:-10; op2val:8388608; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -10, 8388608, 2, 3f, x5, 984,0)

inst_144:
// rs2_val == 16777216, 
// opcode: beq, op1:x10; op2:x11; op1val:-16777217; op2val:16777216; immval:256; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -16777217, 16777216, 256, 3f, x5, 992,0)

inst_145:
// rs2_val == 33554432, 
// opcode: beq, op1:x10; op2:x11; op1val:549755813888; op2val:33554432; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 549755813888, 33554432, 2, 3f, x5, 1000,0)

inst_146:
// rs2_val == 8589934592, 
// opcode: beq, op1:x10; op2:x11; op1val:-67108865; op2val:8589934592; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -67108865, 8589934592, 4, 1b, x5, 1008,0)

inst_147:
// rs2_val == 17179869184, 
// opcode: beq, op1:x10; op2:x11; op1val:-281474976710657; op2val:17179869184; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -281474976710657, 17179869184, 6, 1b, x5, 1016,0)

inst_148:
// rs2_val == 34359738368, 
// opcode: beq, op1:x10; op2:x11; op1val:-33; op2val:34359738368; immval:256; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -33, 34359738368, 256, 3f, x5, 1024,0)

inst_149:
// rs2_val == 68719476736, 
// opcode: beq, op1:x10; op2:x11; op1val:34359738368; op2val:68719476736; immval:256; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 34359738368, 68719476736, 256, 3f, x5, 1032,0)

inst_150:
// rs2_val == 549755813888, 
// opcode: beq, op1:x10; op2:x11; op1val:512; op2val:549755813888; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 512, 549755813888, 0, 1b, x5, 1040,0)

inst_151:
// rs2_val == 8796093022208, 
// opcode: beq, op1:x10; op2:x11; op1val:-36028797018963969; op2val:8796093022208; immval:10; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -36028797018963969, 8796093022208, 10, 1b, x5, 1048,0)

inst_152:
// rs2_val == 35184372088832, 
// opcode: beq, op1:x10; op2:x11; op1val:2199023255552; op2val:35184372088832; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2199023255552, 35184372088832, 6, 3f, x5, 1056,0)

inst_153:
// rs2_val == 70368744177664, 
// opcode: beq, op1:x10; op2:x11; op1val:268435456; op2val:70368744177664; immval:10; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 268435456, 70368744177664, 10, 1b, x5, 1064,0)

inst_154:
// rs2_val == 4503599627370496, 
// opcode: beq, op1:x10; op2:x11; op1val:2; op2val:4503599627370496; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2, 4503599627370496, 0, 1b, x5, 1072,0)

inst_155:
// rs2_val == 72057594037927936, 
// opcode: beq, op1:x10; op2:x11; op1val:-8589934593; op2val:72057594037927936; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -8589934593, 72057594037927936, 1366, 1b, x5, 1080,0)

inst_156:
// rs2_val == 288230376151711744, 
// opcode: beq, op1:x10; op2:x11; op1val:-1048577; op2val:288230376151711744; immval:10; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1048577, 288230376151711744, 10, 1b, x5, 1088,0)

inst_157:
// rs2_val == 1152921504606846976, 
// opcode: beq, op1:x10; op2:x11; op1val:-2147483649; op2val:1152921504606846976; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2147483649, 1152921504606846976, 2, 3f, x5, 1096,0)

inst_158:
// rs2_val == 2305843009213693952, 
// opcode: beq, op1:x10; op2:x11; op1val:549755813888; op2val:2305843009213693952; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 549755813888, 2305843009213693952, 128, 3f, x5, 1104,0)

inst_159:
// rs2_val == 4611686018427387904, 
// opcode: beq, op1:x10; op2:x11; op1val:536870912; op2val:4611686018427387904; immval:256; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 536870912, 4611686018427387904, 256, 3f, x5, 1112,0)

inst_160:
// rs2_val == -2, 
// opcode: beq, op1:x10; op2:x11; op1val:-1025; op2val:-2; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1025, -2, 2, 1b, x5, 1120,0)

inst_161:
// rs2_val == -3, 
// opcode: beq, op1:x10; op2:x11; op1val:-10; op2val:-3; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -10, -3, 6, 3f, x5, 1128,0)

inst_162:
// rs2_val == -5, 
// opcode: beq, op1:x10; op2:x11; op1val:131072; op2val:-5; immval:4; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 131072, -5, 4, 3f, x5, 1136,0)

inst_163:
// rs2_val == -65, 
// opcode: beq, op1:x10; op2:x11; op1val:-2199023255553; op2val:-65; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2199023255553, -65, 2, 3f, x5, 1144,0)

inst_164:
// rs2_val == -257, 
// opcode: beq, op1:x10; op2:x11; op1val:137438953472; op2val:-257; immval:64; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 137438953472, -257, 64, 3f, x5, 1152,0)

inst_165:
// rs2_val == -1025, 
// opcode: beq, op1:x10; op2:x11; op1val:34359738368; op2val:-1025; immval:16; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 34359738368, -1025, 16, 3f, x5, 1160,0)

inst_166:
// rs2_val == -1125899906842625, 
// opcode: beq, op1:x10; op2:x11; op1val:549755813888; op2val:-1125899906842625; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 549755813888, -1125899906842625, 8, 3f, x5, 1168,0)

inst_167:
// rs2_val == -8193, 
// opcode: beq, op1:x10; op2:x11; op1val:68719476736; op2val:-8193; immval:0; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 68719476736, -8193, 0, 1b, x5, 1176,0)

inst_168:
// rs2_val == -131073, 
// opcode: beq, op1:x10; op2:x11; op1val:2097152; op2val:-131073; immval:32; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 2097152, -131073, 32, 3f, x5, 1184,0)

inst_169:
// rs2_val == -524289, 
// opcode: beq, op1:x10; op2:x11; op1val:-2049; op2val:-524289; immval:1366; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -2049, -524289, 1366, 1b, x5, 1192,0)

inst_170:
// rs2_val == -2097153, 
// opcode: beq, op1:x10; op2:x11; op1val:-134217729; op2val:-2097153; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -134217729, -2097153, 8, 3f, x5, 1200,0)

inst_171:
// rs2_val == -16777217, 
// opcode: beq, op1:x10; op2:x11; op1val:-70368744177665; op2val:-16777217; immval:10; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -70368744177665, -16777217, 10, 1b, x5, 1208,0)

inst_172:
// rs2_val == -1073741825, 
// opcode: beq, op1:x10; op2:x11; op1val:-4; op2val:-1073741825; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -4, -1073741825, 8, 3f, x5, 1216,0)

inst_173:
// rs2_val == -2147483649, 
// opcode: beq, op1:x10; op2:x11; op1val:9223372036854775807; op2val:-2147483649; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 9223372036854775807, -2147483649, 128, 3f, x5, 1224,0)

inst_174:
// rs2_val == -68719476737, 
// opcode: beq, op1:x10; op2:x11; op1val:274877906944; op2val:-68719476737; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 274877906944, -68719476737, 8, 3f, x5, 1232,0)

inst_175:
// rs2_val == -274877906945, 
// opcode: beq, op1:x10; op2:x11; op1val:6; op2val:-274877906945; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 6, -274877906945, 2, 3f, x5, 1240,0)

inst_176:
// rs2_val == -549755813889, 
// opcode: beq, op1:x10; op2:x11; op1val:-262145; op2val:-549755813889; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -262145, -549755813889, 1024, 1b, x5, 1248,0)

inst_177:
// rs2_val == -2199023255553, 
// opcode: beq, op1:x10; op2:x11; op1val:-268435457; op2val:-2199023255553; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -268435457, -2199023255553, 8, 1b, x5, 1256,0)

inst_178:
// rs2_val == -8796093022209, 
// opcode: beq, op1:x10; op2:x11; op1val:5; op2val:-8796093022209; immval:32; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 5, -8796093022209, 32, 3f, x5, 1264,0)

inst_179:
// rs2_val == -35184372088833, 
// opcode: beq, op1:x10; op2:x11; op1val:4398046511104; op2val:-35184372088833; immval:6; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 4398046511104, -35184372088833, 6, 1b, x5, 1272,0)

inst_180:
// rs2_val == 140737488355328, 
// opcode: beq, op1:x10; op2:x11; op1val:-1073741825; op2val:140737488355328; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -1073741825, 140737488355328, 128, 3f, x5, 1280,0)

inst_181:
// rs2_val == 281474976710656, 
// opcode: beq, op1:x10; op2:x11; op1val:17592186044416; op2val:281474976710656; immval:1024; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 17592186044416, 281474976710656, 1024, 3f, x5, 1288,0)

inst_182:
// rs2_val == 562949953421312, 
// opcode: beq, op1:x10; op2:x11; op1val:-144115188075855873; op2val:562949953421312; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -144115188075855873, 562949953421312, 8, 3f, x5, 1296,0)

inst_183:
// rs2_val == 1125899906842624, 
// opcode: beq, op1:x10; op2:x11; op1val:274877906944; op2val:1125899906842624; immval:2; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 274877906944, 1125899906842624, 2, 3f, x5, 1304,0)

inst_184:
// rs2_val == -2251799813685249, 
// opcode: beq, op1:x10; op2:x11; op1val:-549755813889; op2val:-2251799813685249; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, -549755813889, -2251799813685249, 8, 1b, x5, 1312,0)

inst_185:
// rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs2_val == 1073741824, rs1_val == 8796093022208, rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0
// opcode: beq, op1:x10; op2:x11; op1val:8796093022208; op2val:1073741824; immval:8; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 8796093022208, 1073741824, 8, 3f, x5, 1320,0)

inst_186:
// rs1_val == 16777216, rs2_val == 64
// opcode: beq, op1:x10; op2:x11; op1val:16777216; op2val:64; immval:128; align:0
TEST_BRANCH_OP(beq, x9, x10, x11, 16777216, 64, 128, 3f, x5, 1328,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 167*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
