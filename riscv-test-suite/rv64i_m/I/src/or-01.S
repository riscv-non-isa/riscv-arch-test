 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the or instruction of the RISC-V I extension for the or covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",or)

RVTEST_SIGBASE( x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x17, rd==x3, rs1_val == (-2**(xlen-1)), rs2_val == 134217728, rs1_val < 0 and rs2_val > 0, rs1_val == -9223372036854775808, rs1_val != rs2_val
// opcode: or ; op1:x25; op2:x17; dest:x3; op1val:-9223372036854775808;  op2val:134217728
TEST_RR_OP(or, x3, x25, x17, 0x8000000008000000, -9223372036854775808, 134217728, x2, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x10, rs1_val == 0, rs2_val == -18014398509481985
// opcode: or ; op1:x1; op2:x1; dest:x10; op1val:0;  op2val:-18014398509481985
TEST_RR_OP(or, x10, x1, x1, 0xffbfffffffffffff, 0, -18014398509481985, x2, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x7, rs2==x13, rd==x7, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 9223372036854775807, rs2_val == 72057594037927936
// opcode: or ; op1:x7; op2:x13; dest:x7; op1val:9223372036854775807;  op2val:72057594037927936
TEST_RR_OP(or, x7, x7, x13, 0x7fffffffffffffff, 9223372036854775807, 72057594037927936, x2, 16, x5)

inst_3:
// rs2 == rd != rs1, rs1==x20, rs2==x31, rd==x31, rs1_val == 1, rs1_val > 0 and rs2_val < 0
// opcode: or ; op1:x20; op2:x31; dest:x31; op1val:1;  op2val:-8
TEST_RR_OP(or, x31, x20, x31, 0xfffffffffffffff9, 1, -8, x2, 24, x5)

inst_4:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs2_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs1_val == -1073741825, rs2_val == -9223372036854775808
// opcode: or ; op1:x24; op2:x24; dest:x24; op1val:-1073741825;  op2val:-9223372036854775808
TEST_RR_OP(or, x24, x24, x24, 0xffffffffbfffffff, -1073741825, -9223372036854775808, x2, 32, x5)

inst_5:
// rs1==x21, rs2==x0, rd==x30, rs2_val == 0, rs1_val == 33554432
// opcode: or ; op1:x21; op2:x0; dest:x30; op1val:33554432;  op2val:0
TEST_RR_OP(or, x30, x21, x0, 0x2000000, 33554432, 0, x2, 40, x5)

inst_6:
// rs1==x18, rs2==x8, rd==x0, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807, rs1_val == -3
// opcode: or ; op1:x18; op2:x8; dest:x0; op1val:-3;  op2val:9223372036854775807
TEST_RR_OP(or, x0, x18, x8, 0xffffffffffffffff, -3, 9223372036854775807, x2, 48, x5)

inst_7:
// rs1==x28, rs2==x14, rd==x6, rs2_val == 1, 
// opcode: or ; op1:x28; op2:x14; dest:x6; op1val:6;  op2val:1
TEST_RR_OP(or, x6, x28, x14, 0x7, 6, 1, x2, 56, x5)

inst_8:
// rs1==x31, rs2==x26, rd==x4, rs1_val == rs2_val, 
// opcode: or ; op1:x31; op2:x26; dest:x4; op1val:-8;  op2val:-8
TEST_RR_OP(or, x4, x31, x26, 0xfffffffffffffff8, -8, -8, x2, 64, x5)

inst_9:
// rs1==x13, rs2==x20, rd==x12, rs1_val == 2, rs2_val == -144115188075855873
// opcode: or ; op1:x13; op2:x20; dest:x12; op1val:2;  op2val:-144115188075855873
TEST_RR_OP(or, x12, x13, x20, 0xfdffffffffffffff, 2, -144115188075855873, x2, 72, x5)

inst_10:
// rs1==x15, rs2==x10, rd==x18, rs1_val == 4, 
// opcode: or ; op1:x15; op2:x10; dest:x18; op1val:4;  op2val:134217728
TEST_RR_OP(or, x18, x15, x10, 0x8000004, 4, 134217728, x2, 80, x5)

inst_11:
// rs1==x6, rs2==x18, rd==x27, rs1_val == 8, rs2_val == -1048577
// opcode: or ; op1:x6; op2:x18; dest:x27; op1val:8;  op2val:-1048577
TEST_RR_OP(or, x27, x6, x18, 0xffffffffffefffff, 8, -1048577, x2, 88, x5)

inst_12:
// rs1==x19, rs2==x27, rd==x29, rs1_val == 16, rs2_val == 68719476736
// opcode: or ; op1:x19; op2:x27; dest:x29; op1val:16;  op2val:68719476736
TEST_RR_OP(or, x29, x19, x27, 0x1000000010, 16, 68719476736, x2, 96, x5)

inst_13:
// rs1==x30, rs2==x23, rd==x13, rs1_val == 32, rs2_val == -2305843009213693953
// opcode: or ; op1:x30; op2:x23; dest:x13; op1val:32;  op2val:-2305843009213693953
TEST_RR_OP(or, x13, x30, x23, 0xdfffffffffffffff, 32, -2305843009213693953, x2, 104, x5)

inst_14:
// rs1==x0, rs2==x16, rd==x8, rs1_val == 64, rs2_val == 2199023255552
// opcode: or ; op1:x0; op2:x16; dest:x8; op1val:64;  op2val:2199023255552
TEST_RR_OP(or, x8, x0, x16, 0x20000000040, 64, 2199023255552, x2, 112, x5)

inst_15:
// rs1==x17, rs2==x3, rd==x16, rs1_val == 128, rs2_val == 1073741824
// opcode: or ; op1:x17; op2:x3; dest:x16; op1val:128;  op2val:1073741824
TEST_RR_OP(or, x16, x17, x3, 0x40000080, 128, 1073741824, x2, 120, x5)

inst_16:
// rs1==x27, rs2==x12, rd==x22, rs1_val == 256, rs2_val == -1025
// opcode: or ; op1:x27; op2:x12; dest:x22; op1val:256;  op2val:-1025
TEST_RR_OP(or, x22, x27, x12, 0xfffffffffffffbff, 256, -1025, x2, 128, x5)

inst_17:
// rs1==x9, rs2==x7, rd==x28, rs1_val == 512, rs2_val == -6148914691236517206
// opcode: or ; op1:x9; op2:x7; dest:x28; op1val:512;  op2val:-6148914691236517206
TEST_RR_OP(or, x28, x9, x7, 0xaaaaaaaaaaaaaaaa, 512, -6148914691236517206, x2, 136, x13)
RVTEST_SIGBASE( x7,signature_x7_0)

inst_18:
// rs1==x5, rs2==x11, rd==x9, rs1_val == 1024, rs2_val == 4503599627370496
// opcode: or ; op1:x5; op2:x11; dest:x9; op1val:1024;  op2val:4503599627370496
TEST_RR_OP(or, x9, x5, x11, 0x10000000000400, 1024, 4503599627370496, x7, 0, x13)

inst_19:
// rs1==x10, rs2==x15, rd==x23, rs1_val == 2048, rs2_val == 140737488355328
// opcode: or ; op1:x10; op2:x15; dest:x23; op1val:2048;  op2val:140737488355328
TEST_RR_OP(or, x23, x10, x15, 0x800000000800, 2048, 140737488355328, x7, 8, x13)

inst_20:
// rs1==x4, rs2==x5, rd==x15, rs1_val == 4096, rs2_val == -4611686018427387905
// opcode: or ; op1:x4; op2:x5; dest:x15; op1val:4096;  op2val:-4611686018427387905
TEST_RR_OP(or, x15, x4, x5, 0xbfffffffffffffff, 4096, -4611686018427387905, x7, 16, x13)

inst_21:
// rs1==x12, rs2==x21, rd==x1, rs1_val == 8192, rs2_val == -33554433
// opcode: or ; op1:x12; op2:x21; dest:x1; op1val:8192;  op2val:-33554433
TEST_RR_OP(or, x1, x12, x21, 0xfffffffffdffffff, 8192, -33554433, x7, 24, x13)

inst_22:
// rs1==x2, rs2==x29, rd==x25, rs1_val == 16384, rs2_val == -5
// opcode: or ; op1:x2; op2:x29; dest:x25; op1val:16384;  op2val:-5
TEST_RR_OP(or, x25, x2, x29, 0xfffffffffffffffb, 16384, -5, x7, 32, x13)

inst_23:
// rs1==x11, rs2==x19, rd==x21, rs1_val == 32768, rs2_val == 17592186044416
// opcode: or ; op1:x11; op2:x19; dest:x21; op1val:32768;  op2val:17592186044416
TEST_RR_OP(or, x21, x11, x19, 0x100000008000, 32768, 17592186044416, x7, 40, x13)

inst_24:
// rs1==x23, rs2==x30, rd==x14, rs1_val == 65536, rs2_val == -8589934593
// opcode: or ; op1:x23; op2:x30; dest:x14; op1val:65536;  op2val:-8589934593
TEST_RR_OP(or, x14, x23, x30, 0xfffffffdffffffff, 65536, -8589934593, x7, 48, x13)

inst_25:
// rs1==x22, rs2==x9, rd==x2, rs1_val == 131072, rs2_val == -281474976710657
// opcode: or ; op1:x22; op2:x9; dest:x2; op1val:131072;  op2val:-281474976710657
TEST_RR_OP(or, x2, x22, x9, 0xfffeffffffffffff, 131072, -281474976710657, x7, 56, x13)

inst_26:
// rs1==x8, rs2==x28, rd==x26, rs1_val == 262144, rs2_val == -36028797018963969
// opcode: or ; op1:x8; op2:x28; dest:x26; op1val:262144;  op2val:-36028797018963969
TEST_RR_OP(or, x26, x8, x28, 0xff7fffffffffffff, 262144, -36028797018963969, x7, 64, x13)

inst_27:
// rs1==x14, rs2==x2, rd==x19, rs1_val == 524288, rs2_val == 562949953421312
// opcode: or ; op1:x14; op2:x2; dest:x19; op1val:524288;  op2val:562949953421312
TEST_RR_OP(or, x19, x14, x2, 0x2000000080000, 524288, 562949953421312, x7, 72, x13)

inst_28:
// rs1==x3, rs2==x22, rd==x17, rs1_val == 1048576, 
// opcode: or ; op1:x3; op2:x22; dest:x17; op1val:1048576;  op2val:1073741824
TEST_RR_OP(or, x17, x3, x22, 0x40100000, 1048576, 1073741824, x7, 80, x13)

inst_29:
// rs1==x26, rs2==x6, rd==x11, rs1_val == 2097152, 
// opcode: or ; op1:x26; op2:x6; dest:x11; op1val:2097152;  op2val:-8
TEST_RR_OP(or, x11, x26, x6, 0xfffffffffffffff8, 2097152, -8, x7, 88, x13)

inst_30:
// rs1==x16, rs2==x25, rd==x20, rs1_val == 4194304, rs2_val == 137438953472
// opcode: or ; op1:x16; op2:x25; dest:x20; op1val:4194304;  op2val:137438953472
TEST_RR_OP(or, x20, x16, x25, 0x2000400000, 4194304, 137438953472, x7, 96, x13)

inst_31:
// rs1==x29, rs2==x4, rd==x5, rs1_val == 8388608, rs2_val == -17
// opcode: or ; op1:x29; op2:x4; dest:x5; op1val:8388608;  op2val:-17
TEST_RR_OP(or, x5, x29, x4, 0xffffffffffffffef, 8388608, -17, x7, 104, x13)

inst_32:
// rs1_val == 16777216, rs2_val == 33554432
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:33554432
TEST_RR_OP(or, x12, x10, x11, 0x3000000, 16777216, 33554432, x7, 112, x13)

inst_33:
// rs1_val == 67108864, rs2_val == -35184372088833
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:-35184372088833
TEST_RR_OP(or, x12, x10, x11, 0xffffdfffffffffff, 67108864, -35184372088833, x7, 120, x13)

inst_34:
// rs1_val == 134217728, rs2_val == 4
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:4
TEST_RR_OP(or, x12, x10, x11, 0x8000004, 134217728, 4, x7, 128, x13)

inst_35:
// rs1_val == 268435456, rs2_val == 32768
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:32768
TEST_RR_OP(or, x12, x10, x11, 0x10008000, 268435456, 32768, x7, 136, x13)

inst_36:
// rs1_val == 536870912, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:72057594037927936
TEST_RR_OP(or, x12, x10, x11, 0x100000020000000, 536870912, 72057594037927936, x7, 144, x13)

inst_37:
// rs1_val == 1073741824, rs2_val == -65537
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-65537
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffeffff, 1073741824, -65537, x7, 152, x13)

inst_38:
// rs1_val == 2147483648, rs2_val == 16384
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:16384
TEST_RR_OP(or, x12, x10, x11, 0x80004000, 2147483648, 16384, x7, 160, x13)

inst_39:
// rs1_val == 4294967296, rs2_val == -68719476737
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-68719476737
TEST_RR_OP(or, x12, x10, x11, 0xffffffefffffffff, 4294967296, -68719476737, x7, 168, x13)

inst_40:
// rs1_val == 8589934592, rs2_val == 2147483648
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:2147483648
TEST_RR_OP(or, x12, x10, x11, 0x280000000, 8589934592, 2147483648, x7, 176, x13)

inst_41:
// rs1_val == 17179869184, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:2147483648
TEST_RR_OP(or, x12, x10, x11, 0x480000000, 17179869184, 2147483648, x7, 184, x13)

inst_42:
// rs1_val == 34359738368, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:-68719476737
TEST_RR_OP(or, x12, x10, x11, 0xffffffefffffffff, 34359738368, -68719476737, x7, 192, x13)

inst_43:
// rs1_val == 68719476736, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:-68719476737
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, 68719476736, -68719476737, x7, 200, x13)

inst_44:
// rs1_val == 137438953472, rs2_val == -65
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:-65
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffbf, 137438953472, -65, x7, 208, x13)

inst_45:
// rs1_val == 274877906944, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:-8
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffff8, 274877906944, -8, x7, 216, x13)

inst_46:
// rs1_val == 549755813888, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:33554432
TEST_RR_OP(or, x12, x10, x11, 0x8002000000, 549755813888, 33554432, x7, 224, x13)

inst_47:
// rs1_val == 1099511627776, rs2_val == 36028797018963968
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:36028797018963968
TEST_RR_OP(or, x12, x10, x11, 0x80010000000000, 1099511627776, 36028797018963968, x7, 232, x13)

inst_48:
// rs1_val == 2199023255552, rs2_val == -1125899906842625
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:-1125899906842625
TEST_RR_OP(or, x12, x10, x11, 0xfffbffffffffffff, 2199023255552, -1125899906842625, x7, 240, x13)

inst_49:
// rs1_val == 4398046511104, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-281474976710657
TEST_RR_OP(or, x12, x10, x11, 0xfffeffffffffffff, 4398046511104, -281474976710657, x7, 248, x13)

inst_50:
// rs1_val == 8796093022208, rs2_val == 524288
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:524288
TEST_RR_OP(or, x12, x10, x11, 0x80000080000, 8796093022208, 524288, x7, 256, x13)

inst_51:
// rs1_val == 17592186044416, rs2_val == 1152921504606846976
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:1152921504606846976
TEST_RR_OP(or, x12, x10, x11, 0x1000100000000000, 17592186044416, 1152921504606846976, x7, 264, x13)

inst_52:
// rs1_val == 35184372088832, rs2_val == 256
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:256
TEST_RR_OP(or, x12, x10, x11, 0x200000000100, 35184372088832, 256, x7, 272, x13)

inst_53:
// rs1_val == 70368744177664, rs2_val == 70368744177664
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:70368744177664
TEST_RR_OP(or, x12, x10, x11, 0x400000000000, 70368744177664, 70368744177664, x7, 280, x13)

inst_54:
// rs1_val == 140737488355328, rs2_val == -2199023255553
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:-2199023255553
TEST_RR_OP(or, x12, x10, x11, 0xfffffdffffffffff, 140737488355328, -2199023255553, x7, 288, x13)

inst_55:
// rs1_val == 281474976710656, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:-7
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffff9, 281474976710656, -7, x7, 296, x13)

inst_56:
// rs1_val == 562949953421312, rs2_val == -8388609
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:-8388609
TEST_RR_OP(or, x12, x10, x11, 0xffffffffff7fffff, 562949953421312, -8388609, x7, 304, x13)

inst_57:
// rs1_val == 1125899906842624, rs2_val == -9
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:-9
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffff7, 1125899906842624, -9, x7, 312, x13)

inst_58:
// rs1_val == 2251799813685248, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:2199023255552
TEST_RR_OP(or, x12, x10, x11, 0x8020000000000, 2251799813685248, 2199023255552, x7, 320, x13)

inst_59:
// rs1_val == 4503599627370496, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:-1
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, 4503599627370496, -1, x7, 328, x13)

inst_60:
// rs1_val == 9007199254740992, rs2_val == 1099511627776
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:1099511627776
TEST_RR_OP(or, x12, x10, x11, 0x20010000000000, 9007199254740992, 1099511627776, x7, 336, x13)

inst_61:
// rs1_val == 18014398509481984, rs2_val == 2
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:2
TEST_RR_OP(or, x12, x10, x11, 0x40000000000002, 18014398509481984, 2, x7, 344, x13)

inst_62:
// rs1_val == 36028797018963968, rs2_val == 576460752303423488
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:576460752303423488
TEST_RR_OP(or, x12, x10, x11, 0x880000000000000, 36028797018963968, 576460752303423488, x7, 352, x13)

inst_63:
// rs1_val == 72057594037927936, rs2_val == 6148914691236517205
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:6148914691236517205
TEST_RR_OP(or, x12, x10, x11, 0x5555555555555555, 72057594037927936, 6148914691236517205, x7, 360, x13)

inst_64:
// rs1_val == 144115188075855872, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:36028797018963968
TEST_RR_OP(or, x12, x10, x11, 0x280000000000000, 144115188075855872, 36028797018963968, x7, 368, x13)

inst_65:
// rs1_val == 288230376151711744, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:0
TEST_RR_OP(or, x12, x10, x11, 0x400000000000000, 288230376151711744, 0, x7, 376, x13)

inst_66:
// rs1_val == 576460752303423488, rs2_val == -72057594037927937
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-72057594037927937
TEST_RR_OP(or, x12, x10, x11, 0xfeffffffffffffff, 576460752303423488, -72057594037927937, x7, 384, x13)

inst_67:
// rs1_val == 1152921504606846976, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:-4
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffffc, 1152921504606846976, -4, x7, 392, x13)

inst_68:
// rs1_val == 2305843009213693952, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-2199023255553
TEST_RR_OP(or, x12, x10, x11, 0xfffffdffffffffff, 2305843009213693952, -2199023255553, x7, 400, x13)

inst_69:
// rs1_val == 4611686018427387904, rs2_val == 268435456
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:268435456
TEST_RR_OP(or, x12, x10, x11, 0x4000000010000000, 4611686018427387904, 268435456, x7, 408, x13)

inst_70:
// rs1_val == -2, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-6
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffffe, -2, -6, x7, 416, x13)

inst_71:
// rs1_val == -5, rs2_val == 8796093022208
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:8796093022208
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffffb, -5, 8796093022208, x7, 424, x13)

inst_72:
// rs1_val == -9, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-68719476737
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -9, -68719476737, x7, 432, x13)

inst_73:
// rs1_val == -17, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:140737488355328
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffef, -17, 140737488355328, x7, 440, x13)

inst_74:
// rs1_val == -33, rs2_val == -140737488355329
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:-140737488355329
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -33, -140737488355329, x7, 448, x13)

inst_75:
// rs1_val == -65, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:6
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffbf, -65, 6, x7, 456, x13)

inst_76:
// rs1_val == -129, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:-4
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -129, -4, x7, 464, x13)

inst_77:
// rs1_val == -257, rs2_val == -8796093022209
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:-8796093022209
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -257, -8796093022209, x7, 472, x13)

inst_78:
// rs1_val == -513, rs2_val == -2147483649
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-2147483649
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -513, -2147483649, x7, 480, x13)

inst_79:
// rs1_val == -1025, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:5
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffbff, -1025, 5, x7, 488, x13)

inst_80:
// rs1_val == -2049, rs2_val == -576460752303423489
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:-576460752303423489
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -2049, -576460752303423489, x7, 496, x13)

inst_81:
// rs1_val == -4097, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:-72057594037927937
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -4097, -72057594037927937, x7, 504, x13)

inst_82:
// rs2_val == -2251799813685249, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:-2251799813685249
TEST_RR_OP(or, x12, x10, x11, 0xfff7ffffffffffff, 17592186044416, -2251799813685249, x7, 512, x13)

inst_83:
// rs2_val == -4503599627370497, rs1_val == -1099511627777
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:-4503599627370497
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -1099511627777, -4503599627370497, x7, 520, x13)

inst_84:
// rs2_val == -9007199254740993, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:-9007199254740993
TEST_RR_OP(or, x12, x10, x11, 0xffdfffffffffffff, 1048576, -9007199254740993, x7, 528, x13)

inst_85:
// rs2_val == -288230376151711745, rs1_val == -1125899906842625
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-288230376151711745
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -1125899906842625, -288230376151711745, x7, 536, x13)

inst_86:
// rs2_val == -1152921504606846977, rs1_val == -8388609
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:-1152921504606846977
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -8388609, -1152921504606846977, x7, 544, x13)

inst_87:
// rs1_val == -8193, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-1
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -8193, -1, x7, 552, x13)

inst_88:
// rs1_val == -16385, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:-1125899906842625
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -16385, -1125899906842625, x7, 560, x13)

inst_89:
// rs1_val == -32769, rs2_val == 16777216
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:16777216
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffff7fff, -32769, 16777216, x7, 568, x13)

inst_90:
// rs1_val == -65537, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:6148914691236517205
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -65537, 6148914691236517205, x7, 576, x13)

inst_91:
// rs1_val == -131073, rs2_val == 1024
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:1024
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffdffff, -131073, 1024, x7, 584, x13)

inst_92:
// rs1_val == -262145, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:6
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffbffff, -262145, 6, x7, 592, x13)

inst_93:
// rs1_val == -524289, rs2_val == -4294967297
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-4294967297
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -524289, -4294967297, x7, 600, x13)

inst_94:
// rs1_val == -1048577, rs2_val == -2097153
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:-2097153
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -1048577, -2097153, x7, 608, x13)

inst_95:
// rs1_val == -2097153, rs2_val == 288230376151711744
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:288230376151711744
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffdfffff, -2097153, 288230376151711744, x7, 616, x13)

inst_96:
// rs1_val == -4194305, rs2_val == -16385
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:-16385
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -4194305, -16385, x7, 624, x13)

inst_97:
// rs1_val == -16777217, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:4
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffeffffff, -16777217, 4, x7, 632, x13)

inst_98:
// rs1_val == -33554433, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-2097153
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -33554433, -2097153, x7, 640, x13)

inst_99:
// rs1_val == -67108865, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-4503599627370497
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -67108865, -4503599627370497, x7, 648, x13)

inst_100:
// rs1_val == -134217729, rs2_val == -70368744177665
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-70368744177665
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -134217729, -70368744177665, x7, 656, x13)

inst_101:
// rs1_val == -268435457, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:5
TEST_RR_OP(or, x12, x10, x11, 0xffffffffefffffff, -268435457, 5, x7, 664, x13)

inst_102:
// rs1_val == -536870913, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:9
TEST_RR_OP(or, x12, x10, x11, 0xffffffffdfffffff, -536870913, 9, x7, 672, x13)

inst_103:
// rs1_val == -2147483649, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:9
TEST_RR_OP(or, x12, x10, x11, 0xffffffff7fffffff, -2147483649, 9, x7, 680, x13)

inst_104:
// rs1_val == -4294967297, rs2_val == 2305843009213693952
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:2305843009213693952
TEST_RR_OP(or, x12, x10, x11, 0xfffffffeffffffff, -4294967297, 2305843009213693952, x7, 688, x13)

inst_105:
// rs1_val == -8589934593, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:137438953472
TEST_RR_OP(or, x12, x10, x11, 0xfffffffdffffffff, -8589934593, 137438953472, x7, 696, x13)

inst_106:
// rs1_val == -17179869185, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:1
TEST_RR_OP(or, x12, x10, x11, 0xfffffffbffffffff, -17179869185, 1, x7, 704, x13)

inst_107:
// rs1_val == -34359738369, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:-5
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -34359738369, -5, x7, 712, x13)

inst_108:
// rs1_val == -68719476737, rs2_val == 4611686018427387904
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:4611686018427387904
TEST_RR_OP(or, x12, x10, x11, 0xffffffefffffffff, -68719476737, 4611686018427387904, x7, 720, x13)

inst_109:
// rs1_val == -137438953473, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:-144115188075855873
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -137438953473, -144115188075855873, x7, 728, x13)

inst_110:
// rs1_val == -274877906945, rs2_val == 281474976710656
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:281474976710656
TEST_RR_OP(or, x12, x10, x11, 0xffffffbfffffffff, -274877906945, 281474976710656, x7, 736, x13)

inst_111:
// rs1_val == -549755813889, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:576460752303423488
TEST_RR_OP(or, x12, x10, x11, 0xffffff7fffffffff, -549755813889, 576460752303423488, x7, 744, x13)

inst_112:
// rs1_val == -2199023255553, rs2_val == 2251799813685248
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:2251799813685248
TEST_RR_OP(or, x12, x10, x11, 0xfffffdffffffffff, -2199023255553, 2251799813685248, x7, 752, x13)

inst_113:
// rs1_val == -4398046511105, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:-6148914691236517206
TEST_RR_OP(or, x12, x10, x11, 0xfffffbffffffffff, -4398046511105, -6148914691236517206, x7, 760, x13)

inst_114:
// rs1_val == -8796093022209, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:-8589934593
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -8796093022209, -8589934593, x7, 768, x13)

inst_115:
// rs1_val == -17592186044417, rs2_val == -67108865
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:-67108865
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -17592186044417, -67108865, x7, 776, x13)

inst_116:
// rs1_val == -35184372088833, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:-65
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -35184372088833, -65, x7, 784, x13)

inst_117:
// rs1_val == -70368744177665, rs2_val == -34359738369
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:-34359738369
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -70368744177665, -34359738369, x7, 792, x13)

inst_118:
// rs1_val == -140737488355329, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:-1048577
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -140737488355329, -1048577, x7, 800, x13)

inst_119:
// rs1_val == -281474976710657, rs2_val == -33
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:-33
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -281474976710657, -33, x7, 808, x13)

inst_120:
// rs1_val == -562949953421313, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:-1025
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -562949953421313, -1025, x7, 816, x13)

inst_121:
// rs1_val == -2251799813685249, rs2_val == 512
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:512
TEST_RR_OP(or, x12, x10, x11, 0xfff7ffffffffffff, -2251799813685249, 512, x7, 824, x13)

inst_122:
// rs1_val == -4503599627370497, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:6
TEST_RR_OP(or, x12, x10, x11, 0xffefffffffffffff, -4503599627370497, 6, x7, 832, x13)

inst_123:
// rs1_val == -9007199254740993, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:-10
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -9007199254740993, -10, x7, 840, x13)

inst_124:
// rs1_val == -18014398509481985, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:17592186044416
TEST_RR_OP(or, x12, x10, x11, 0xffbfffffffffffff, -18014398509481985, 17592186044416, x7, 848, x13)

inst_125:
// rs1_val == -36028797018963969, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:-6
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -36028797018963969, -6, x7, 856, x13)

inst_126:
// rs1_val == -72057594037927937, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:2
TEST_RR_OP(or, x12, x10, x11, 0xfeffffffffffffff, -72057594037927937, 2, x7, 864, x13)

inst_127:
// rs1_val == -144115188075855873, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-72057594037927937
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -144115188075855873, -72057594037927937, x7, 872, x13)

inst_128:
// rs1_val == -288230376151711745, rs2_val == -32769
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:-32769
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -288230376151711745, -32769, x7, 880, x13)

inst_129:
// rs1_val == -576460752303423489, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-4611686018427387904
TEST_RR_OP(or, x12, x10, x11, 0xf7ffffffffffffff, -576460752303423489, -4611686018427387904, x7, 888, x13)

inst_130:
// rs1_val == -1152921504606846977, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:3
TEST_RR_OP(or, x12, x10, x11, 0xefffffffffffffff, -1152921504606846977, 3, x7, 896, x13)

inst_131:
// rs1_val == -2305843009213693953, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:-8
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -2305843009213693953, -8, x7, 904, x13)

inst_132:
// rs1_val == -4611686018427387905, rs2_val == 4194304
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:4194304
TEST_RR_OP(or, x12, x10, x11, 0xbfffffffffffffff, -4611686018427387905, 4194304, x7, 912, x13)

inst_133:
// rs1_val == 6148914691236517205, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:137438953472
TEST_RR_OP(or, x12, x10, x11, 0x5555557555555555, 6148914691236517205, 137438953472, x7, 920, x13)

inst_134:
// rs1_val == -6148914691236517206, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-1025
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffbff, -6148914691236517206, -1025, x7, 928, x13)

inst_135:
// rs2_val == 8, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:8
TEST_RR_OP(or, x12, x10, x11, 0xfffffdffffffffff, -2199023255553, 8, x7, 936, x13)

inst_136:
// rs2_val == 16, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:16
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffeffffff, -16777217, 16, x7, 944, x13)

inst_137:
// rs2_val == 32, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:32
TEST_RR_OP(or, x12, x10, x11, 0xbfffffffffffffff, -4611686018427387905, 32, x7, 952, x13)

inst_138:
// rs2_val == 64, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:64
TEST_RR_OP(or, x12, x10, x11, 0x1000000000040, 281474976710656, 64, x7, 960, x13)

inst_139:
// rs2_val == 128, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:128
TEST_RR_OP(or, x12, x10, x11, 0x8000080, 134217728, 128, x7, 968, x13)

inst_140:
// rs2_val == 2048, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:2048
TEST_RR_OP(or, x12, x10, x11, 0x1000000000000800, 1152921504606846976, 2048, x7, 976, x13)

inst_141:
// rs2_val == 4096, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:4096
TEST_RR_OP(or, x12, x10, x11, 0x80000001000, 8796093022208, 4096, x7, 984, x13)

inst_142:
// rs2_val == 8192, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:8192
TEST_RR_OP(or, x12, x10, x11, 0xffffffff7fffffff, -2147483649, 8192, x7, 992, x13)

inst_143:
// rs2_val == 65536, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:65536
TEST_RR_OP(or, x12, x10, x11, 0xffffbfffffffffff, -70368744177665, 65536, x7, 1000, x13)

inst_144:
// rs2_val == 131072, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:131072
TEST_RR_OP(or, x12, x10, x11, 0x20005, 5, 131072, x7, 1008, x13)

inst_145:
// rs2_val == 262144, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:262144
TEST_RR_OP(or, x12, x10, x11, 0x4040000, 67108864, 262144, x7, 1016, x13)

inst_146:
// rs2_val == 1048576, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:1048576
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffbffffff, -67108865, 1048576, x7, 1024, x13)

inst_147:
// rs2_val == 2097152, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:2097152
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffff7ff, -2049, 2097152, x7, 1032, x13)

inst_148:
// rs2_val == 8388608, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:8388608
TEST_RR_OP(or, x12, x10, x11, 0x800200, 512, 8388608, x7, 1040, x13)

inst_149:
// rs2_val == 67108864, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:67108864
TEST_RR_OP(or, x12, x10, x11, 0x4000000004000000, 4611686018427387904, 67108864, x7, 1048, x13)

inst_150:
// rs2_val == 536870912, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:536870912
TEST_RR_OP(or, x12, x10, x11, 0x100020000000, 17592186044416, 536870912, x7, 1056, x13)

inst_151:
// rs2_val == 4294967296, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:4294967296
TEST_RR_OP(or, x12, x10, x11, 0xffffffffbfffffff, -1073741825, 4294967296, x7, 1064, x13)

inst_152:
// rs2_val == 8589934592, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:8589934592
TEST_RR_OP(or, x12, x10, x11, 0xfffff7ffffffffff, -8796093022209, 8589934592, x7, 1072, x13)

inst_153:
// rs2_val == 17179869184, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:17179869184
TEST_RR_OP(or, x12, x10, x11, 0x400000002, 2, 17179869184, x7, 1080, x13)

inst_154:
// rs2_val == 34359738368, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:34359738368
TEST_RR_OP(or, x12, x10, x11, 0x4000800000000, 1125899906842624, 34359738368, x7, 1088, x13)

inst_155:
// rs2_val == 274877906944, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:274877906944
TEST_RR_OP(or, x12, x10, x11, 0x4000010000, 65536, 274877906944, x7, 1096, x13)

inst_156:
// rs2_val == 549755813888, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:549755813888
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffeffffff, -16777217, 549755813888, x7, 1104, x13)

inst_157:
// rs2_val == 1125899906842624, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:1125899906842624
TEST_RR_OP(or, x12, x10, x11, 0x4100000000000, 17592186044416, 1125899906842624, x7, 1112, x13)

inst_158:
// rs2_val == 9007199254740992, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:9007199254740992
TEST_RR_OP(or, x12, x10, x11, 0xfffbffffffffffff, -1125899906842625, 9007199254740992, x7, 1120, x13)

inst_159:
// rs2_val == 18014398509481984, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:18014398509481984
TEST_RR_OP(or, x12, x10, x11, 0xfffdffffffffffff, -562949953421313, 18014398509481984, x7, 1128, x13)

inst_160:
// rs2_val == 144115188075855872, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:144115188075855872
TEST_RR_OP(or, x12, x10, x11, 0x7fffffffffffffff, 9223372036854775807, 144115188075855872, x7, 1136, x13)

inst_161:
// rs2_val == -2, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:-2
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -2199023255553, -2, x7, 1144, x13)

inst_162:
// rs2_val == -3, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-3
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffffd, 0, -3, x7, 1152, x13)

inst_163:
// rs2_val == -129, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:-129
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffff7f, 4611686018427387904, -129, x7, 1160, x13)

inst_164:
// rs2_val == -257, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:-257
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffffeff, 16, -257, x7, 1168, x13)

inst_165:
// rs2_val == -513, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:-513
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -2305843009213693953, -513, x7, 1176, x13)

inst_166:
// rs2_val == -2049, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:-2049
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -70368744177665, -2049, x7, 1184, x13)

inst_167:
// rs2_val == -4097, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-4097
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -4294967297, -4097, x7, 1192, x13)

inst_168:
// rs2_val == -8193, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-8193
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -134217729, -8193, x7, 1200, x13)

inst_169:
// rs2_val == -131073, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:-131073
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffdffff, 1152921504606846976, -131073, x7, 1208, x13)

inst_170:
// rs2_val == 4398046511104, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:4398046511104
TEST_RR_OP(or, x12, x10, x11, 0xffffffdfffffffff, -137438953473, 4398046511104, x7, 1216, x13)

inst_171:
// rs2_val == -262145, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-262145
TEST_RR_OP(or, x12, x10, x11, 0xfffffffffffbffff, 4294967296, -262145, x7, 1224, x13)

inst_172:
// rs2_val == -524289, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:-524289
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -262145, -524289, x7, 1232, x13)

inst_173:
// rs2_val == -4194305, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-4194305
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -8589934593, -4194305, x7, 1240, x13)

inst_174:
// rs2_val == -16777217, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:-16777217
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -2199023255553, -16777217, x7, 1248, x13)

inst_175:
// rs2_val == -134217729, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:-134217729
TEST_RR_OP(or, x12, x10, x11, 0xfffffffff7ffffff, 1024, -134217729, x7, 1256, x13)

inst_176:
// rs2_val == -268435457, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:-268435457
TEST_RR_OP(or, x12, x10, x11, 0xffffffffefffffff, 33554432, -268435457, x7, 1264, x13)

inst_177:
// rs2_val == -536870913, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:-536870913
TEST_RR_OP(or, x12, x10, x11, 0xffffffffdfffffff, 34359738368, -536870913, x7, 1272, x13)

inst_178:
// rs2_val == -1073741825, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:-1073741825
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -18014398509481985, -1073741825, x7, 1280, x13)

inst_179:
// rs2_val == -17179869185, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:-17179869185
TEST_RR_OP(or, x12, x10, x11, 0xfffffffbffffffff, 36028797018963968, -17179869185, x7, 1288, x13)

inst_180:
// rs2_val == -137438953473, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:-137438953473
TEST_RR_OP(or, x12, x10, x11, 0xffffffdfffffffff, 70368744177664, -137438953473, x7, 1296, x13)

inst_181:
// rs2_val == -274877906945, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-274877906945
TEST_RR_OP(or, x12, x10, x11, 0xffffffbfffffffff, 576460752303423488, -274877906945, x7, 1304, x13)

inst_182:
// rs2_val == -549755813889, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-549755813889
TEST_RR_OP(or, x12, x10, x11, 0xffffff7fffffffff, 576460752303423488, -549755813889, x7, 1312, x13)

inst_183:
// rs2_val == -1099511627777, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-1099511627777
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -3, -1099511627777, x7, 1320, x13)

inst_184:
// rs2_val == -4398046511105, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:-4398046511105
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -16777217, -4398046511105, x7, 1328, x13)

inst_185:
// rs2_val == -17592186044417, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-17592186044417
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -33554433, -17592186044417, x7, 1336, x13)

inst_186:
// rs2_val == 35184372088832, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:35184372088832
TEST_RR_OP(or, x12, x10, x11, 0xffffffffefffffff, -268435457, 35184372088832, x7, 1344, x13)

inst_187:
// rs2_val == -562949953421313, 
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:-562949953421313
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -137438953473, -562949953421313, x7, 1352, x13)

inst_188:
// rs1_val == 0, rs2_val == -18014398509481985
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-18014398509481985
TEST_RR_OP(or, x12, x10, x11, 0xffbfffffffffffff, 0, -18014398509481985, x7, 1360, x13)

inst_189:
// rs2_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs1_val == -1073741825, rs2_val == -9223372036854775808
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:-9223372036854775808
TEST_RR_OP(or, x12, x10, x11, 0xffffffffbfffffff, -1073741825, -9223372036854775808, x7, 1368, x13)

inst_190:
// rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807, rs1_val == -3
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:9223372036854775807
TEST_RR_OP(or, x12, x10, x11, 0xffffffffffffffff, -3, 9223372036854775807, x7, 1376, x13)

inst_191:
// rs1_val == 64, rs2_val == 2199023255552
// opcode: or ; op1:x10; op2:x11; dest:x12; op1val:64;  op2val:2199023255552
TEST_RR_OP(or, x12, x10, x11, 0x20000000040, 64, 2199023255552, x7, 1384, x13)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 174*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
