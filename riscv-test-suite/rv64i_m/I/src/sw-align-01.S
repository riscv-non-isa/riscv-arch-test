
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sw instruction of the RISC-V I extension for the sw-align covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sw-align)

RVTEST_SIGBASE( x16,signature_x16_1)

inst_0:
// rs1 != rs2, rs1==x15, rs2==x11, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, imm_val < 0, ea_align == 0 and (imm_val % 4) == 3
// opcode: sw; op1:x15; op2:x11; op2val:-9223372036854775808; immval:-17; align:0
TEST_STORE(x16,x5,0,x15,x11,-9223372036854775808,-17,0,sw,0)

inst_1:
// rs1==x27, rs2==x12, rs2_val == 0, ea_align == 0 and (imm_val % 4) == 2
// opcode: sw; op1:x27; op2:x12; op2val:0; immval:-1366; align:0
TEST_STORE(x16,x5,0,x27,x12,0,-1366,8,sw,0)

inst_2:
// rs1==x7, rs2==x8, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode: sw; op1:x7; op2:x8; op2val:9223372036854775807; immval:-1025; align:0
TEST_STORE(x16,x5,0,x7,x8,9223372036854775807,-1025,16,sw,0)

inst_3:
// rs1==x14, rs2==x20, rs2_val == 1, imm_val > 0, ea_align == 0 and (imm_val % 4) == 0
// opcode: sw; op1:x14; op2:x20; op2val:1; immval:128; align:0
TEST_STORE(x16,x5,0,x14,x20,1,128,24,sw,0)

inst_4:
// rs1==x20, rs2==x15, ea_align == 0 and (imm_val % 4) == 1, rs2_val == -17592186044417
// opcode: sw; op1:x20; op2:x15; op2val:-17592186044417; immval:-7; align:0
TEST_STORE(x16,x5,0,x20,x15,-17592186044417,-7,32,sw,0)

inst_5:
// rs1==x11, rs2==x26, imm_val == 0, rs2_val == 131072
// opcode: sw; op1:x11; op2:x26; op2val:131072; immval:0; align:0
TEST_STORE(x16,x5,0,x11,x26,131072,0,40,sw,0)

inst_6:
// rs1==x12, rs2==x23, rs2_val == 2, 
// opcode: sw; op1:x12; op2:x23; op2val:2; immval:-7; align:0
TEST_STORE(x16,x5,0,x12,x23,2,-7,48,sw,0)

inst_7:
// rs1==x22, rs2==x1, rs2_val == 4, 
// opcode: sw; op1:x22; op2:x1; op2val:4; immval:-1025; align:0
TEST_STORE(x16,x5,0,x22,x1,4,-1025,56,sw,0)

inst_8:
// rs1==x24, rs2==x19, rs2_val == 8, 
// opcode: sw; op1:x24; op2:x19; op2val:8; immval:256; align:0
TEST_STORE(x16,x5,0,x24,x19,8,256,64,sw,0)

inst_9:
// rs1==x9, rs2==x10, rs2_val == 16, 
// opcode: sw; op1:x9; op2:x10; op2val:16; immval:0; align:0
TEST_STORE(x16,x5,0,x9,x10,16,0,72,sw,0)

inst_10:
// rs1==x31, rs2==x3, rs2_val == 32, 
// opcode: sw; op1:x31; op2:x3; op2val:32; immval:2; align:0
TEST_STORE(x16,x5,0,x31,x3,32,2,80,sw,0)

inst_11:
// rs1==x2, rs2==x21, rs2_val == 64, 
// opcode: sw; op1:x2; op2:x21; op2val:64; immval:-4; align:0
TEST_STORE(x16,x5,0,x2,x21,64,-4,88,sw,0)

inst_12:
// rs1==x29, rs2==x2, rs2_val == 128, 
// opcode: sw; op1:x29; op2:x2; op2val:128; immval:1023; align:0
TEST_STORE(x16,x5,0,x29,x2,128,1023,96,sw,0)

inst_13:
// rs1==x10, rs2==x4, rs2_val == 256, 
// opcode: sw; op1:x10; op2:x4; op2val:256; immval:2047; align:0
TEST_STORE(x16,x5,0,x10,x4,256,2047,104,sw,0)

inst_14:
// rs1==x6, rs2==x18, rs2_val == 512, 
// opcode: sw; op1:x6; op2:x18; op2val:512; immval:6; align:0
TEST_STORE(x16,x5,0,x6,x18,512,6,112,sw,0)

inst_15:
// rs1==x1, rs2==x30, rs2_val == 1024, 
// opcode: sw; op1:x1; op2:x30; op2val:1024; immval:-513; align:0
TEST_STORE(x16,x5,0,x1,x30,1024,-513,120,sw,0)

inst_16:
// rs1==x8, rs2==x17, rs2_val == 2048, 
// opcode: sw; op1:x8; op2:x17; op2val:2048; immval:-4; align:0
TEST_STORE(x16,x5,0,x8,x17,2048,-4,128,sw,0)

inst_17:
// rs1==x17, rs2==x13, rs2_val == 4096, 
// opcode: sw; op1:x17; op2:x13; op2val:4096; immval:-129; align:0
TEST_STORE(x16,x5,0,x17,x13,4096,-129,136,sw,0)

inst_18:
// rs1==x5, rs2==x9, rs2_val == 8192, 
// opcode: sw; op1:x5; op2:x9; op2val:8192; immval:32; align:0
TEST_STORE(x16,x2,0,x5,x9,8192,32,144,sw,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_19:
// rs1==x23, rs2==x14, rs2_val == 16384, 
// opcode: sw; op1:x23; op2:x14; op2val:16384; immval:16; align:0
TEST_STORE(x1,x2,0,x23,x14,16384,16,0,sw,0)

inst_20:
// rs1==x13, rs2==x0, rs2_val == 32768, 
// opcode: sw; op1:x13; op2:x0; op2val:32768; immval:-9; align:0
TEST_STORE(x1,x2,0,x13,x0,32768,-9,8,sw,0)

inst_21:
// rs1==x21, rs2==x29, rs2_val == 65536, 
// opcode: sw; op1:x21; op2:x29; op2val:65536; immval:3; align:0
TEST_STORE(x1,x2,0,x21,x29,65536,3,16,sw,0)

inst_22:
// rs1==x26, rs2==x7, rs2_val == 262144, 
// opcode: sw; op1:x26; op2:x7; op2val:262144; immval:0; align:0
TEST_STORE(x1,x2,0,x26,x7,262144,0,24,sw,0)

inst_23:
// rs1==x4, rs2==x22, rs2_val == 524288, 
// opcode: sw; op1:x4; op2:x22; op2val:524288; immval:-513; align:0
TEST_STORE(x1,x2,0,x4,x22,524288,-513,32,sw,0)

inst_24:
// rs1==x19, rs2==x25, rs2_val == 1048576, 
// opcode: sw; op1:x19; op2:x25; op2val:1048576; immval:128; align:0
TEST_STORE(x1,x2,0,x19,x25,1048576,128,40,sw,0)

inst_25:
// rs1==x16, rs2==x24, rs2_val == 2097152, 
// opcode: sw; op1:x16; op2:x24; op2val:2097152; immval:-6; align:0
TEST_STORE(x1,x2,0,x16,x24,2097152,-6,48,sw,0)

inst_26:
// rs1==x30, rs2==x16, rs2_val == 4194304, 
// opcode: sw; op1:x30; op2:x16; op2val:4194304; immval:7; align:0
TEST_STORE(x1,x2,0,x30,x16,4194304,7,56,sw,0)

inst_27:
// rs1==x18, rs2==x27, rs2_val == 8388608, 
// opcode: sw; op1:x18; op2:x27; op2val:8388608; immval:-257; align:0
TEST_STORE(x1,x2,0,x18,x27,8388608,-257,64,sw,0)

inst_28:
// rs1==x28, rs2==x31, rs2_val == 16777216, 
// opcode: sw; op1:x28; op2:x31; op2val:16777216; immval:-2; align:0
TEST_STORE(x1,x2,0,x28,x31,16777216,-2,72,sw,0)

inst_29:
// rs1==x25, rs2==x5, rs2_val == 33554432, 
// opcode: sw; op1:x25; op2:x5; op2val:33554432; immval:-1366; align:0
TEST_STORE(x1,x2,0,x25,x5,33554432,-1366,80,sw,0)

inst_30:
// rs1==x3, rs2==x6, rs2_val == 67108864, 
// opcode: sw; op1:x3; op2:x6; op2val:67108864; immval:256; align:0
TEST_STORE(x1,x2,0,x3,x6,67108864,256,88,sw,0)

inst_31:
// rs2==x28, rs2_val == 134217728, 
// opcode: sw; op1:x3; op2:x28; op2val:134217728; immval:-4; align:0
TEST_STORE(x1,x2,0,x3,x28,134217728,-4,96,sw,0)

inst_32:
// rs2_val == 268435456, 
// opcode: sw; op1:x10; op2:x11; op2val:268435456; immval:512; align:0
TEST_STORE(x1,x2,0,x10,x11,268435456,512,104,sw,0)

inst_33:
// rs2_val == 536870912, 
// opcode: sw; op1:x10; op2:x11; op2val:536870912; immval:5; align:0
TEST_STORE(x1,x2,0,x10,x11,536870912,5,112,sw,0)

inst_34:
// rs2_val == 1073741824, 
// opcode: sw; op1:x10; op2:x11; op2val:1073741824; immval:7; align:0
TEST_STORE(x1,x2,0,x10,x11,1073741824,7,120,sw,0)

inst_35:
// rs2_val == 2147483648, 
// opcode: sw; op1:x10; op2:x11; op2val:2147483648; immval:-2; align:0
TEST_STORE(x1,x2,0,x10,x11,2147483648,-2,128,sw,0)

inst_36:
// rs2_val == 4294967296, 
// opcode: sw; op1:x10; op2:x11; op2val:4294967296; immval:5; align:0
TEST_STORE(x1,x2,0,x10,x11,4294967296,5,136,sw,0)

inst_37:
// rs2_val == 8589934592, 
// opcode: sw; op1:x10; op2:x11; op2val:8589934592; immval:-65; align:0
TEST_STORE(x1,x2,0,x10,x11,8589934592,-65,144,sw,0)

inst_38:
// rs2_val == 17179869184, 
// opcode: sw; op1:x10; op2:x11; op2val:17179869184; immval:-17; align:0
TEST_STORE(x1,x2,0,x10,x11,17179869184,-17,152,sw,0)

inst_39:
// rs2_val == 34359738368, 
// opcode: sw; op1:x10; op2:x11; op2val:34359738368; immval:-3; align:0
TEST_STORE(x1,x2,0,x10,x11,34359738368,-3,160,sw,0)

inst_40:
// rs2_val == 68719476736, 
// opcode: sw; op1:x10; op2:x11; op2val:68719476736; immval:1023; align:0
TEST_STORE(x1,x2,0,x10,x11,68719476736,1023,168,sw,0)

inst_41:
// rs2_val == 137438953472, 
// opcode: sw; op1:x10; op2:x11; op2val:137438953472; immval:-1; align:0
TEST_STORE(x1,x2,0,x10,x11,137438953472,-1,176,sw,0)

inst_42:
// rs2_val == 274877906944, 
// opcode: sw; op1:x10; op2:x11; op2val:274877906944; immval:-2048; align:0
TEST_STORE(x1,x2,0,x10,x11,274877906944,-2048,184,sw,0)

inst_43:
// rs2_val == 549755813888, 
// opcode: sw; op1:x10; op2:x11; op2val:549755813888; immval:1365; align:0
TEST_STORE(x1,x2,0,x10,x11,549755813888,1365,192,sw,0)

inst_44:
// rs2_val == 1099511627776, 
// opcode: sw; op1:x10; op2:x11; op2val:1099511627776; immval:16; align:0
TEST_STORE(x1,x2,0,x10,x11,1099511627776,16,200,sw,0)

inst_45:
// rs2_val == 2199023255552, 
// opcode: sw; op1:x10; op2:x11; op2val:2199023255552; immval:2047; align:0
TEST_STORE(x1,x2,0,x10,x11,2199023255552,2047,208,sw,0)

inst_46:
// rs2_val == 4398046511104, 
// opcode: sw; op1:x10; op2:x11; op2val:4398046511104; immval:-17; align:0
TEST_STORE(x1,x2,0,x10,x11,4398046511104,-17,216,sw,0)

inst_47:
// rs2_val == 8796093022208, 
// opcode: sw; op1:x10; op2:x11; op2val:8796093022208; immval:128; align:0
TEST_STORE(x1,x2,0,x10,x11,8796093022208,128,224,sw,0)

inst_48:
// rs2_val == 17592186044416, 
// opcode: sw; op1:x10; op2:x11; op2val:17592186044416; immval:-2; align:0
TEST_STORE(x1,x2,0,x10,x11,17592186044416,-2,232,sw,0)

inst_49:
// rs2_val == 35184372088832, 
// opcode: sw; op1:x10; op2:x11; op2val:35184372088832; immval:-5; align:0
TEST_STORE(x1,x2,0,x10,x11,35184372088832,-5,240,sw,0)

inst_50:
// rs2_val == 70368744177664, 
// opcode: sw; op1:x10; op2:x11; op2val:70368744177664; immval:256; align:0
TEST_STORE(x1,x2,0,x10,x11,70368744177664,256,248,sw,0)

inst_51:
// rs2_val == 140737488355328, 
// opcode: sw; op1:x10; op2:x11; op2val:140737488355328; immval:1365; align:0
TEST_STORE(x1,x2,0,x10,x11,140737488355328,1365,256,sw,0)

inst_52:
// rs2_val == 281474976710656, 
// opcode: sw; op1:x10; op2:x11; op2val:281474976710656; immval:-257; align:0
TEST_STORE(x1,x2,0,x10,x11,281474976710656,-257,264,sw,0)

inst_53:
// rs2_val == 562949953421312, 
// opcode: sw; op1:x10; op2:x11; op2val:562949953421312; immval:1024; align:0
TEST_STORE(x1,x2,0,x10,x11,562949953421312,1024,272,sw,0)

inst_54:
// rs2_val == 1125899906842624, 
// opcode: sw; op1:x10; op2:x11; op2val:1125899906842624; immval:512; align:0
TEST_STORE(x1,x2,0,x10,x11,1125899906842624,512,280,sw,0)

inst_55:
// rs2_val == 2251799813685248, 
// opcode: sw; op1:x10; op2:x11; op2val:2251799813685248; immval:-129; align:0
TEST_STORE(x1,x2,0,x10,x11,2251799813685248,-129,288,sw,0)

inst_56:
// rs2_val == 4503599627370496, 
// opcode: sw; op1:x10; op2:x11; op2val:4503599627370496; immval:-1366; align:0
TEST_STORE(x1,x2,0,x10,x11,4503599627370496,-1366,296,sw,0)

inst_57:
// rs2_val == 9007199254740992, 
// opcode: sw; op1:x10; op2:x11; op2val:9007199254740992; immval:-2048; align:0
TEST_STORE(x1,x2,0,x10,x11,9007199254740992,-2048,304,sw,0)

inst_58:
// rs2_val == 18014398509481984, 
// opcode: sw; op1:x10; op2:x11; op2val:18014398509481984; immval:-33; align:0
TEST_STORE(x1,x2,0,x10,x11,18014398509481984,-33,312,sw,0)

inst_59:
// rs2_val == 36028797018963968, 
// opcode: sw; op1:x10; op2:x11; op2val:36028797018963968; immval:7; align:0
TEST_STORE(x1,x2,0,x10,x11,36028797018963968,7,320,sw,0)

inst_60:
// rs2_val == 72057594037927936, 
// opcode: sw; op1:x10; op2:x11; op2val:72057594037927936; immval:-5; align:0
TEST_STORE(x1,x2,0,x10,x11,72057594037927936,-5,328,sw,0)

inst_61:
// rs2_val == 144115188075855872, 
// opcode: sw; op1:x10; op2:x11; op2val:144115188075855872; immval:-33; align:0
TEST_STORE(x1,x2,0,x10,x11,144115188075855872,-33,336,sw,0)

inst_62:
// rs2_val == 288230376151711744, 
// opcode: sw; op1:x10; op2:x11; op2val:288230376151711744; immval:-129; align:0
TEST_STORE(x1,x2,0,x10,x11,288230376151711744,-129,344,sw,0)

inst_63:
// rs2_val == 576460752303423488, 
// opcode: sw; op1:x10; op2:x11; op2val:576460752303423488; immval:2047; align:0
TEST_STORE(x1,x2,0,x10,x11,576460752303423488,2047,352,sw,0)

inst_64:
// rs2_val == 1152921504606846976, 
// opcode: sw; op1:x10; op2:x11; op2val:1152921504606846976; immval:1; align:0
TEST_STORE(x1,x2,0,x10,x11,1152921504606846976,1,360,sw,0)

inst_65:
// rs2_val == 2305843009213693952, 
// opcode: sw; op1:x10; op2:x11; op2val:2305843009213693952; immval:2047; align:0
TEST_STORE(x1,x2,0,x10,x11,2305843009213693952,2047,368,sw,0)

inst_66:
// rs2_val == 4611686018427387904, 
// opcode: sw; op1:x10; op2:x11; op2val:4611686018427387904; immval:7; align:0
TEST_STORE(x1,x2,0,x10,x11,4611686018427387904,7,376,sw,0)

inst_67:
// rs2_val == -2, 
// opcode: sw; op1:x10; op2:x11; op2val:-2; immval:16; align:0
TEST_STORE(x1,x2,0,x10,x11,-2,16,384,sw,0)

inst_68:
// rs2_val == -18014398509481985, 
// opcode: sw; op1:x10; op2:x11; op2val:-18014398509481985; immval:2047; align:0
TEST_STORE(x1,x2,0,x10,x11,-18014398509481985,2047,392,sw,0)

inst_69:
// rs2_val == -36028797018963969, 
// opcode: sw; op1:x10; op2:x11; op2val:-36028797018963969; immval:1023; align:0
TEST_STORE(x1,x2,0,x10,x11,-36028797018963969,1023,400,sw,0)

inst_70:
// rs2_val == -72057594037927937, 
// opcode: sw; op1:x10; op2:x11; op2val:-72057594037927937; immval:128; align:0
TEST_STORE(x1,x2,0,x10,x11,-72057594037927937,128,408,sw,0)

inst_71:
// rs2_val == -144115188075855873, 
// opcode: sw; op1:x10; op2:x11; op2val:-144115188075855873; immval:-3; align:0
TEST_STORE(x1,x2,0,x10,x11,-144115188075855873,-3,416,sw,0)

inst_72:
// rs2_val == -288230376151711745, 
// opcode: sw; op1:x10; op2:x11; op2val:-288230376151711745; immval:-9; align:0
TEST_STORE(x1,x2,0,x10,x11,-288230376151711745,-9,424,sw,0)

inst_73:
// rs2_val == -576460752303423489, 
// opcode: sw; op1:x10; op2:x11; op2val:-576460752303423489; immval:-9; align:0
TEST_STORE(x1,x2,0,x10,x11,-576460752303423489,-9,432,sw,0)

inst_74:
// rs2_val == -1152921504606846977, 
// opcode: sw; op1:x10; op2:x11; op2val:-1152921504606846977; immval:64; align:0
TEST_STORE(x1,x2,0,x10,x11,-1152921504606846977,64,440,sw,0)

inst_75:
// rs2_val == -2305843009213693953, 
// opcode: sw; op1:x10; op2:x11; op2val:-2305843009213693953; immval:-1024; align:0
TEST_STORE(x1,x2,0,x10,x11,-2305843009213693953,-1024,448,sw,0)

inst_76:
// rs2_val == -4611686018427387905, 
// opcode: sw; op1:x10; op2:x11; op2val:-4611686018427387905; immval:-33; align:0
TEST_STORE(x1,x2,0,x10,x11,-4611686018427387905,-33,456,sw,0)

inst_77:
// rs2_val == 6148914691236517205, 
// opcode: sw; op1:x10; op2:x11; op2val:6148914691236517205; immval:7; align:0
TEST_STORE(x1,x2,0,x10,x11,6148914691236517205,7,464,sw,0)

inst_78:
// rs2_val == -6148914691236517206, 
// opcode: sw; op1:x10; op2:x11; op2val:-6148914691236517206; immval:-129; align:0
TEST_STORE(x1,x2,0,x10,x11,-6148914691236517206,-129,472,sw,0)

inst_79:
// rs2_val == -3, 
// opcode: sw; op1:x10; op2:x11; op2val:-3; immval:-1366; align:0
TEST_STORE(x1,x2,0,x10,x11,-3,-1366,480,sw,0)

inst_80:
// rs2_val == -5, 
// opcode: sw; op1:x10; op2:x11; op2val:-5; immval:2047; align:0
TEST_STORE(x1,x2,0,x10,x11,-5,2047,488,sw,0)

inst_81:
// rs2_val == -9, 
// opcode: sw; op1:x10; op2:x11; op2val:-9; immval:-8; align:0
TEST_STORE(x1,x2,0,x10,x11,-9,-8,496,sw,0)

inst_82:
// rs2_val == -17, 
// opcode: sw; op1:x10; op2:x11; op2val:-17; immval:-1366; align:0
TEST_STORE(x1,x2,0,x10,x11,-17,-1366,504,sw,0)

inst_83:
// rs2_val == -33, 
// opcode: sw; op1:x10; op2:x11; op2val:-33; immval:3; align:0
TEST_STORE(x1,x2,0,x10,x11,-33,3,512,sw,0)

inst_84:
// rs2_val == -65, 
// opcode: sw; op1:x10; op2:x11; op2val:-65; immval:-8; align:0
TEST_STORE(x1,x2,0,x10,x11,-65,-8,520,sw,0)

inst_85:
// rs2_val == -129, 
// opcode: sw; op1:x10; op2:x11; op2val:-129; immval:-9; align:0
TEST_STORE(x1,x2,0,x10,x11,-129,-9,528,sw,0)

inst_86:
// rs2_val == -257, 
// opcode: sw; op1:x10; op2:x11; op2val:-257; immval:512; align:0
TEST_STORE(x1,x2,0,x10,x11,-257,512,536,sw,0)

inst_87:
// rs2_val == -513, 
// opcode: sw; op1:x10; op2:x11; op2val:-513; immval:256; align:0
TEST_STORE(x1,x2,0,x10,x11,-513,256,544,sw,0)

inst_88:
// rs2_val == -1025, 
// opcode: sw; op1:x10; op2:x11; op2val:-1025; immval:-3; align:0
TEST_STORE(x1,x2,0,x10,x11,-1025,-3,552,sw,0)

inst_89:
// rs2_val == -2049, 
// opcode: sw; op1:x10; op2:x11; op2val:-2049; immval:256; align:0
TEST_STORE(x1,x2,0,x10,x11,-2049,256,560,sw,0)

inst_90:
// rs2_val == -4097, 
// opcode: sw; op1:x10; op2:x11; op2val:-4097; immval:-10; align:0
TEST_STORE(x1,x2,0,x10,x11,-4097,-10,568,sw,0)

inst_91:
// rs2_val == -8193, 
// opcode: sw; op1:x10; op2:x11; op2val:-8193; immval:-257; align:0
TEST_STORE(x1,x2,0,x10,x11,-8193,-257,576,sw,0)

inst_92:
// rs2_val == -16385, 
// opcode: sw; op1:x10; op2:x11; op2val:-16385; immval:-8; align:0
TEST_STORE(x1,x2,0,x10,x11,-16385,-8,584,sw,0)

inst_93:
// rs2_val == -32769, 
// opcode: sw; op1:x10; op2:x11; op2val:-32769; immval:-65; align:0
TEST_STORE(x1,x2,0,x10,x11,-32769,-65,592,sw,0)

inst_94:
// rs2_val == -65537, 
// opcode: sw; op1:x10; op2:x11; op2val:-65537; immval:64; align:0
TEST_STORE(x1,x2,0,x10,x11,-65537,64,600,sw,0)

inst_95:
// rs2_val == -131073, 
// opcode: sw; op1:x10; op2:x11; op2val:-131073; immval:-513; align:0
TEST_STORE(x1,x2,0,x10,x11,-131073,-513,608,sw,0)

inst_96:
// rs2_val == -262145, 
// opcode: sw; op1:x10; op2:x11; op2val:-262145; immval:16; align:0
TEST_STORE(x1,x2,0,x10,x11,-262145,16,616,sw,0)

inst_97:
// rs2_val == -524289, 
// opcode: sw; op1:x10; op2:x11; op2val:-524289; immval:-257; align:0
TEST_STORE(x1,x2,0,x10,x11,-524289,-257,624,sw,0)

inst_98:
// rs2_val == -1048577, 
// opcode: sw; op1:x10; op2:x11; op2val:-1048577; immval:-1366; align:0
TEST_STORE(x1,x2,0,x10,x11,-1048577,-1366,632,sw,0)

inst_99:
// rs2_val == -2097153, 
// opcode: sw; op1:x10; op2:x11; op2val:-2097153; immval:2047; align:0
TEST_STORE(x1,x2,0,x10,x11,-2097153,2047,640,sw,0)

inst_100:
// rs2_val == -4194305, 
// opcode: sw; op1:x10; op2:x11; op2val:-4194305; immval:3; align:0
TEST_STORE(x1,x2,0,x10,x11,-4194305,3,648,sw,0)

inst_101:
// rs2_val == -8388609, 
// opcode: sw; op1:x10; op2:x11; op2val:-8388609; immval:8; align:0
TEST_STORE(x1,x2,0,x10,x11,-8388609,8,656,sw,0)

inst_102:
// rs2_val == -16777217, 
// opcode: sw; op1:x10; op2:x11; op2val:-16777217; immval:-33; align:0
TEST_STORE(x1,x2,0,x10,x11,-16777217,-33,664,sw,0)

inst_103:
// rs2_val == -33554433, 
// opcode: sw; op1:x10; op2:x11; op2val:-33554433; immval:9; align:0
TEST_STORE(x1,x2,0,x10,x11,-33554433,9,672,sw,0)

inst_104:
// rs2_val == -67108865, 
// opcode: sw; op1:x10; op2:x11; op2val:-67108865; immval:-8; align:0
TEST_STORE(x1,x2,0,x10,x11,-67108865,-8,680,sw,0)

inst_105:
// rs2_val == -134217729, 
// opcode: sw; op1:x10; op2:x11; op2val:-134217729; immval:512; align:0
TEST_STORE(x1,x2,0,x10,x11,-134217729,512,688,sw,0)

inst_106:
// rs2_val == -268435457, 
// opcode: sw; op1:x10; op2:x11; op2val:-268435457; immval:-10; align:0
TEST_STORE(x1,x2,0,x10,x11,-268435457,-10,696,sw,0)

inst_107:
// rs2_val == -536870913, 
// opcode: sw; op1:x10; op2:x11; op2val:-536870913; immval:-33; align:0
TEST_STORE(x1,x2,0,x10,x11,-536870913,-33,704,sw,0)

inst_108:
// rs2_val == -1073741825, 
// opcode: sw; op1:x10; op2:x11; op2val:-1073741825; immval:-65; align:0
TEST_STORE(x1,x2,0,x10,x11,-1073741825,-65,712,sw,0)

inst_109:
// rs2_val == -2147483649, 
// opcode: sw; op1:x10; op2:x11; op2val:-2147483649; immval:-4; align:0
TEST_STORE(x1,x2,0,x10,x11,-2147483649,-4,720,sw,0)

inst_110:
// rs2_val == -4294967297, 
// opcode: sw; op1:x10; op2:x11; op2val:-4294967297; immval:1; align:0
TEST_STORE(x1,x2,0,x10,x11,-4294967297,1,728,sw,0)

inst_111:
// rs2_val == -8589934593, 
// opcode: sw; op1:x10; op2:x11; op2val:-8589934593; immval:0; align:0
TEST_STORE(x1,x2,0,x10,x11,-8589934593,0,736,sw,0)

inst_112:
// rs2_val == -17179869185, 
// opcode: sw; op1:x10; op2:x11; op2val:-17179869185; immval:512; align:0
TEST_STORE(x1,x2,0,x10,x11,-17179869185,512,744,sw,0)

inst_113:
// rs2_val == -34359738369, 
// opcode: sw; op1:x10; op2:x11; op2val:-34359738369; immval:32; align:0
TEST_STORE(x1,x2,0,x10,x11,-34359738369,32,752,sw,0)

inst_114:
// rs2_val == -68719476737, 
// opcode: sw; op1:x10; op2:x11; op2val:-68719476737; immval:2; align:0
TEST_STORE(x1,x2,0,x10,x11,-68719476737,2,760,sw,0)

inst_115:
// rs2_val == -137438953473, 
// opcode: sw; op1:x10; op2:x11; op2val:-137438953473; immval:0; align:0
TEST_STORE(x1,x2,0,x10,x11,-137438953473,0,768,sw,0)

inst_116:
// rs2_val == -274877906945, 
// opcode: sw; op1:x10; op2:x11; op2val:-274877906945; immval:-1024; align:0
TEST_STORE(x1,x2,0,x10,x11,-274877906945,-1024,776,sw,0)

inst_117:
// rs2_val == -549755813889, 
// opcode: sw; op1:x10; op2:x11; op2val:-549755813889; immval:9; align:0
TEST_STORE(x1,x2,0,x10,x11,-549755813889,9,784,sw,0)

inst_118:
// rs2_val == -1099511627777, 
// opcode: sw; op1:x10; op2:x11; op2val:-1099511627777; immval:-2048; align:0
TEST_STORE(x1,x2,0,x10,x11,-1099511627777,-2048,792,sw,0)

inst_119:
// rs2_val == -2199023255553, 
// opcode: sw; op1:x10; op2:x11; op2val:-2199023255553; immval:6; align:0
TEST_STORE(x1,x2,0,x10,x11,-2199023255553,6,800,sw,0)

inst_120:
// rs2_val == -4398046511105, 
// opcode: sw; op1:x10; op2:x11; op2val:-4398046511105; immval:-1024; align:0
TEST_STORE(x1,x2,0,x10,x11,-4398046511105,-1024,808,sw,0)

inst_121:
// rs2_val == -8796093022209, 
// opcode: sw; op1:x10; op2:x11; op2val:-8796093022209; immval:-4; align:0
TEST_STORE(x1,x2,0,x10,x11,-8796093022209,-4,816,sw,0)

inst_122:
// rs2_val == -35184372088833, 
// opcode: sw; op1:x10; op2:x11; op2val:-35184372088833; immval:5; align:0
TEST_STORE(x1,x2,0,x10,x11,-35184372088833,5,824,sw,0)

inst_123:
// rs2_val == -70368744177665, 
// opcode: sw; op1:x10; op2:x11; op2val:-70368744177665; immval:-257; align:0
TEST_STORE(x1,x2,0,x10,x11,-70368744177665,-257,832,sw,0)

inst_124:
// rs2_val == -140737488355329, 
// opcode: sw; op1:x10; op2:x11; op2val:-140737488355329; immval:-129; align:0
TEST_STORE(x1,x2,0,x10,x11,-140737488355329,-129,840,sw,0)

inst_125:
// rs2_val == -281474976710657, 
// opcode: sw; op1:x10; op2:x11; op2val:-281474976710657; immval:1365; align:0
TEST_STORE(x1,x2,0,x10,x11,-281474976710657,1365,848,sw,0)

inst_126:
// rs2_val == -562949953421313, 
// opcode: sw; op1:x10; op2:x11; op2val:-562949953421313; immval:-1; align:0
TEST_STORE(x1,x2,0,x10,x11,-562949953421313,-1,856,sw,0)

inst_127:
// rs2_val == -1125899906842625, 
// opcode: sw; op1:x10; op2:x11; op2val:-1125899906842625; immval:16; align:0
TEST_STORE(x1,x2,0,x10,x11,-1125899906842625,16,864,sw,0)

inst_128:
// rs2_val == -2251799813685249, 
// opcode: sw; op1:x10; op2:x11; op2val:-2251799813685249; immval:-257; align:0
TEST_STORE(x1,x2,0,x10,x11,-2251799813685249,-257,872,sw,0)

inst_129:
// rs2_val == -4503599627370497, 
// opcode: sw; op1:x10; op2:x11; op2val:-4503599627370497; immval:-7; align:0
TEST_STORE(x1,x2,0,x10,x11,-4503599627370497,-7,880,sw,0)

inst_130:
// rs2_val == -9007199254740993, 
// opcode: sw; op1:x10; op2:x11; op2val:-9007199254740993; immval:-10; align:0
TEST_STORE(x1,x2,0,x10,x11,-9007199254740993,-10,888,sw,0)

inst_131:
// rs2_val == 32768, 
// opcode: sw; op1:x10; op2:x11; op2val:32768; immval:-9; align:0
TEST_STORE(x1,x2,0,x10,x11,32768,-9,896,sw,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 113*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
