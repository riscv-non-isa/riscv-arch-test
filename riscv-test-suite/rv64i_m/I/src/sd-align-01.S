 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sd instruction of the RISC-V I extension for the sd-align covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",sd-align)

RVTEST_SIGBASE( x11,signature_x11_1)

inst_0:
// rs1 != rs2, rs1==x17, rs2==x10, ea_align == 0 and (imm_val % 8) == 0, rs2_val == -262145, imm_val < 0
// opcode: sd; op1:x17; op2:x10; op2val:-262145; immval:-1024; align:0
TEST_STORE(x11,x15,0,x17,x10,-262145,-1024,0,sd,0)

inst_1:
// rs1==x1, rs2==x9, ea_align == 0 and (imm_val % 8) == 1, rs2_val == 144115188075855872
// opcode: sd; op1:x1; op2:x9; op2val:144115188075855872; immval:-7; align:0
TEST_STORE(x11,x15,0,x1,x9,144115188075855872,-7,8,sd,0)

inst_2:
// rs1==x6, rs2==x3, ea_align == 0 and (imm_val % 8) == 2, rs2_val == 1
// opcode: sd; op1:x6; op2:x3; op2val:1; immval:-1366; align:0
TEST_STORE(x11,x15,0,x6,x3,1,-1366,16,sd,0)

inst_3:
// rs1==x26, rs2==x2, ea_align == 0 and (imm_val % 8) == 3, imm_val > 0, rs2_val == -4398046511105
// opcode: sd; op1:x26; op2:x2; op2val:-4398046511105; immval:3; align:0
TEST_STORE(x11,x15,0,x26,x2,-4398046511105,3,24,sd,0)

inst_4:
// rs1==x13, rs2==x30, ea_align == 0 and (imm_val % 8) == 4, rs2_val == -68719476737
// opcode: sd; op1:x13; op2:x30; op2val:-68719476737; immval:-4; align:0
TEST_STORE(x11,x15,0,x13,x30,-68719476737,-4,32,sd,0)

inst_5:
// rs1==x20, rs2==x27, ea_align == 0 and (imm_val % 8) == 5, rs2_val == -131073
// opcode: sd; op1:x20; op2:x27; op2val:-131073; immval:1365; align:0
TEST_STORE(x11,x15,0,x20,x27,-131073,1365,40,sd,0)

inst_6:
// rs1==x8, rs2==x26, ea_align == 0 and (imm_val % 8) == 6, rs2_val == 8388608
// opcode: sd; op1:x8; op2:x26; op2val:8388608; immval:6; align:0
TEST_STORE(x11,x15,0,x8,x26,8388608,6,48,sd,0)

inst_7:
// rs1==x9, rs2==x19, ea_align == 0 and (imm_val % 8) == 7, rs2_val == 34359738368
// opcode: sd; op1:x9; op2:x19; op2val:34359738368; immval:7; align:0
TEST_STORE(x11,x15,0,x9,x19,34359738368,7,56,sd,0)

inst_8:
// rs1==x22, rs2==x5, imm_val == 0, rs2_val == -513
// opcode: sd; op1:x22; op2:x5; op2val:-513; immval:0; align:0
TEST_STORE(x11,x15,0,x22,x5,-513,0,64,sd,0)

inst_9:
// rs1==x27, rs2==x14, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808
// opcode: sd; op1:x27; op2:x14; op2val:-9223372036854775808; immval:6; align:0
TEST_STORE(x11,x15,0,x27,x14,-9223372036854775808,6,72,sd,0)

inst_10:
// rs1==x24, rs2==x18, rs2_val == 0, 
// opcode: sd; op1:x24; op2:x18; op2val:0; immval:1024; align:0
TEST_STORE(x11,x15,0,x24,x18,0,1024,80,sd,0)

inst_11:
// rs1==x29, rs2==x7, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode: sd; op1:x29; op2:x7; op2val:9223372036854775807; immval:0; align:0
TEST_STORE(x11,x15,0,x29,x7,9223372036854775807,0,88,sd,0)

inst_12:
// rs1==x12, rs2==x25, rs2_val == 2, 
// opcode: sd; op1:x12; op2:x25; op2val:2; immval:0; align:0
TEST_STORE(x11,x15,0,x12,x25,2,0,96,sd,0)

inst_13:
// rs1==x7, rs2==x17, rs2_val == 4, 
// opcode: sd; op1:x7; op2:x17; op2val:4; immval:-513; align:0
TEST_STORE(x11,x15,0,x7,x17,4,-513,104,sd,0)

inst_14:
// rs1==x4, rs2==x6, rs2_val == 8, 
// opcode: sd; op1:x4; op2:x6; op2val:8; immval:-33; align:0
TEST_STORE(x11,x15,0,x4,x6,8,-33,112,sd,0)

inst_15:
// rs1==x30, rs2==x24, rs2_val == 16, 
// opcode: sd; op1:x30; op2:x24; op2val:16; immval:-33; align:0
TEST_STORE(x11,x15,0,x30,x24,16,-33,120,sd,0)

inst_16:
// rs1==x21, rs2==x8, rs2_val == 32, 
// opcode: sd; op1:x21; op2:x8; op2val:32; immval:-65; align:0
TEST_STORE(x11,x15,0,x21,x8,32,-65,128,sd,0)

inst_17:
// rs1==x31, rs2==x1, rs2_val == 64, 
// opcode: sd; op1:x31; op2:x1; op2val:64; immval:-2048; align:0
TEST_STORE(x11,x15,0,x31,x1,64,-2048,136,sd,0)

inst_18:
// rs1==x23, rs2==x16, rs2_val == 128, 
// opcode: sd; op1:x23; op2:x16; op2val:128; immval:-65; align:0
TEST_STORE(x11,x15,0,x23,x16,128,-65,144,sd,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_19:
// rs1==x15, rs2==x12, rs2_val == 256, 
// opcode: sd; op1:x15; op2:x12; op2val:256; immval:-65; align:0
TEST_STORE(x1,x6,0,x15,x12,256,-65,0,sd,0)

inst_20:
// rs1==x2, rs2==x11, rs2_val == 512, 
// opcode: sd; op1:x2; op2:x11; op2val:512; immval:-3; align:0
TEST_STORE(x1,x6,0,x2,x11,512,-3,8,sd,0)

inst_21:
// rs1==x3, rs2==x0, rs2_val == 1024, 
// opcode: sd; op1:x3; op2:x0; op2val:1024; immval:1365; align:0
TEST_STORE(x1,x6,0,x3,x0,1024,1365,16,sd,0)

inst_22:
// rs1==x19, rs2==x4, rs2_val == 2048, 
// opcode: sd; op1:x19; op2:x4; op2val:2048; immval:256; align:0
TEST_STORE(x1,x6,0,x19,x4,2048,256,24,sd,0)

inst_23:
// rs1==x10, rs2==x21, rs2_val == 4096, 
// opcode: sd; op1:x10; op2:x21; op2val:4096; immval:-1; align:0
TEST_STORE(x1,x6,0,x10,x21,4096,-1,32,sd,0)

inst_24:
// rs1==x28, rs2==x23, rs2_val == 8192, 
// opcode: sd; op1:x28; op2:x23; op2val:8192; immval:-1024; align:0
TEST_STORE(x1,x6,0,x28,x23,8192,-1024,40,sd,0)

inst_25:
// rs1==x25, rs2==x31, rs2_val == 16384, 
// opcode: sd; op1:x25; op2:x31; op2val:16384; immval:32; align:0
TEST_STORE(x1,x6,0,x25,x31,16384,32,48,sd,0)

inst_26:
// rs1==x14, rs2==x13, rs2_val == 32768, 
// opcode: sd; op1:x14; op2:x13; op2val:32768; immval:-7; align:0
TEST_STORE(x1,x6,0,x14,x13,32768,-7,56,sd,0)

inst_27:
// rs1==x5, rs2==x29, rs2_val == 65536, 
// opcode: sd; op1:x5; op2:x29; op2val:65536; immval:32; align:0
TEST_STORE(x1,x6,0,x5,x29,65536,32,64,sd,0)

inst_28:
// rs1==x11, rs2==x15, rs2_val == 131072, 
// opcode: sd; op1:x11; op2:x15; op2val:131072; immval:256; align:0
TEST_STORE(x1,x6,0,x11,x15,131072,256,72,sd,0)

inst_29:
// rs1==x16, rs2==x28, rs2_val == 262144, 
// opcode: sd; op1:x16; op2:x28; op2val:262144; immval:-6; align:0
TEST_STORE(x1,x6,0,x16,x28,262144,-6,80,sd,0)

inst_30:
// rs1==x18, rs2==x20, rs2_val == 524288, 
// opcode: sd; op1:x18; op2:x20; op2val:524288; immval:3; align:0
TEST_STORE(x1,x6,0,x18,x20,524288,3,88,sd,0)

inst_31:
// rs2==x22, rs2_val == 1048576, 
// opcode: sd; op1:x13; op2:x22; op2val:1048576; immval:2047; align:0
TEST_STORE(x1,x6,0,x13,x22,1048576,2047,96,sd,0)

inst_32:
// rs2_val == 2097152, 
// opcode: sd; op1:x10; op2:x11; op2val:2097152; immval:-1366; align:0
TEST_STORE(x1,x6,0,x10,x11,2097152,-1366,104,sd,0)

inst_33:
// rs2_val == 4194304, 
// opcode: sd; op1:x10; op2:x11; op2val:4194304; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,4194304,-2,112,sd,0)

inst_34:
// rs2_val == 16777216, 
// opcode: sd; op1:x10; op2:x11; op2val:16777216; immval:-65; align:0
TEST_STORE(x1,x6,0,x10,x11,16777216,-65,120,sd,0)

inst_35:
// rs2_val == 33554432, 
// opcode: sd; op1:x10; op2:x11; op2val:33554432; immval:9; align:0
TEST_STORE(x1,x6,0,x10,x11,33554432,9,128,sd,0)

inst_36:
// rs2_val == 67108864, 
// opcode: sd; op1:x10; op2:x11; op2val:67108864; immval:-2048; align:0
TEST_STORE(x1,x6,0,x10,x11,67108864,-2048,136,sd,0)

inst_37:
// rs2_val == 134217728, 
// opcode: sd; op1:x10; op2:x11; op2val:134217728; immval:-9; align:0
TEST_STORE(x1,x6,0,x10,x11,134217728,-9,144,sd,0)

inst_38:
// rs2_val == 268435456, 
// opcode: sd; op1:x10; op2:x11; op2val:268435456; immval:3; align:0
TEST_STORE(x1,x6,0,x10,x11,268435456,3,152,sd,0)

inst_39:
// rs2_val == 536870912, 
// opcode: sd; op1:x10; op2:x11; op2val:536870912; immval:-257; align:0
TEST_STORE(x1,x6,0,x10,x11,536870912,-257,160,sd,0)

inst_40:
// rs2_val == 1073741824, 
// opcode: sd; op1:x10; op2:x11; op2val:1073741824; immval:-9; align:0
TEST_STORE(x1,x6,0,x10,x11,1073741824,-9,168,sd,0)

inst_41:
// rs2_val == 2147483648, 
// opcode: sd; op1:x10; op2:x11; op2val:2147483648; immval:2047; align:0
TEST_STORE(x1,x6,0,x10,x11,2147483648,2047,176,sd,0)

inst_42:
// rs2_val == 4294967296, 
// opcode: sd; op1:x10; op2:x11; op2val:4294967296; immval:256; align:0
TEST_STORE(x1,x6,0,x10,x11,4294967296,256,184,sd,0)

inst_43:
// rs2_val == 8589934592, 
// opcode: sd; op1:x10; op2:x11; op2val:8589934592; immval:1365; align:0
TEST_STORE(x1,x6,0,x10,x11,8589934592,1365,192,sd,0)

inst_44:
// rs2_val == 17179869184, 
// opcode: sd; op1:x10; op2:x11; op2val:17179869184; immval:1365; align:0
TEST_STORE(x1,x6,0,x10,x11,17179869184,1365,200,sd,0)

inst_45:
// rs2_val == 68719476736, 
// opcode: sd; op1:x10; op2:x11; op2val:68719476736; immval:16; align:0
TEST_STORE(x1,x6,0,x10,x11,68719476736,16,208,sd,0)

inst_46:
// rs2_val == 137438953472, 
// opcode: sd; op1:x10; op2:x11; op2val:137438953472; immval:4; align:0
TEST_STORE(x1,x6,0,x10,x11,137438953472,4,216,sd,0)

inst_47:
// rs2_val == 274877906944, 
// opcode: sd; op1:x10; op2:x11; op2val:274877906944; immval:9; align:0
TEST_STORE(x1,x6,0,x10,x11,274877906944,9,224,sd,0)

inst_48:
// rs2_val == 549755813888, 
// opcode: sd; op1:x10; op2:x11; op2val:549755813888; immval:-1024; align:0
TEST_STORE(x1,x6,0,x10,x11,549755813888,-1024,232,sd,0)

inst_49:
// rs2_val == 1099511627776, 
// opcode: sd; op1:x10; op2:x11; op2val:1099511627776; immval:0; align:0
TEST_STORE(x1,x6,0,x10,x11,1099511627776,0,240,sd,0)

inst_50:
// rs2_val == 2199023255552, 
// opcode: sd; op1:x10; op2:x11; op2val:2199023255552; immval:6; align:0
TEST_STORE(x1,x6,0,x10,x11,2199023255552,6,248,sd,0)

inst_51:
// rs2_val == 4398046511104, 
// opcode: sd; op1:x10; op2:x11; op2val:4398046511104; immval:8; align:0
TEST_STORE(x1,x6,0,x10,x11,4398046511104,8,256,sd,0)

inst_52:
// rs2_val == 8796093022208, 
// opcode: sd; op1:x10; op2:x11; op2val:8796093022208; immval:256; align:0
TEST_STORE(x1,x6,0,x10,x11,8796093022208,256,264,sd,0)

inst_53:
// rs2_val == 17592186044416, 
// opcode: sd; op1:x10; op2:x11; op2val:17592186044416; immval:-1; align:0
TEST_STORE(x1,x6,0,x10,x11,17592186044416,-1,272,sd,0)

inst_54:
// rs2_val == 35184372088832, 
// opcode: sd; op1:x10; op2:x11; op2val:35184372088832; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,35184372088832,-2,280,sd,0)

inst_55:
// rs2_val == 70368744177664, 
// opcode: sd; op1:x10; op2:x11; op2val:70368744177664; immval:5; align:0
TEST_STORE(x1,x6,0,x10,x11,70368744177664,5,288,sd,0)

inst_56:
// rs2_val == 140737488355328, 
// opcode: sd; op1:x10; op2:x11; op2val:140737488355328; immval:-4; align:0
TEST_STORE(x1,x6,0,x10,x11,140737488355328,-4,296,sd,0)

inst_57:
// rs2_val == 281474976710656, 
// opcode: sd; op1:x10; op2:x11; op2val:281474976710656; immval:-7; align:0
TEST_STORE(x1,x6,0,x10,x11,281474976710656,-7,304,sd,0)

inst_58:
// rs2_val == 562949953421312, 
// opcode: sd; op1:x10; op2:x11; op2val:562949953421312; immval:-6; align:0
TEST_STORE(x1,x6,0,x10,x11,562949953421312,-6,312,sd,0)

inst_59:
// rs2_val == 1125899906842624, 
// opcode: sd; op1:x10; op2:x11; op2val:1125899906842624; immval:-6; align:0
TEST_STORE(x1,x6,0,x10,x11,1125899906842624,-6,320,sd,0)

inst_60:
// rs2_val == 2251799813685248, 
// opcode: sd; op1:x10; op2:x11; op2val:2251799813685248; immval:-513; align:0
TEST_STORE(x1,x6,0,x10,x11,2251799813685248,-513,328,sd,0)

inst_61:
// rs2_val == 4503599627370496, 
// opcode: sd; op1:x10; op2:x11; op2val:4503599627370496; immval:0; align:0
TEST_STORE(x1,x6,0,x10,x11,4503599627370496,0,336,sd,0)

inst_62:
// rs2_val == 9007199254740992, 
// opcode: sd; op1:x10; op2:x11; op2val:9007199254740992; immval:4; align:0
TEST_STORE(x1,x6,0,x10,x11,9007199254740992,4,344,sd,0)

inst_63:
// rs2_val == 18014398509481984, 
// opcode: sd; op1:x10; op2:x11; op2val:18014398509481984; immval:-1025; align:0
TEST_STORE(x1,x6,0,x10,x11,18014398509481984,-1025,352,sd,0)

inst_64:
// rs2_val == 36028797018963968, 
// opcode: sd; op1:x10; op2:x11; op2val:36028797018963968; immval:-10; align:0
TEST_STORE(x1,x6,0,x10,x11,36028797018963968,-10,360,sd,0)

inst_65:
// rs2_val == 72057594037927936, 
// opcode: sd; op1:x10; op2:x11; op2val:72057594037927936; immval:9; align:0
TEST_STORE(x1,x6,0,x10,x11,72057594037927936,9,368,sd,0)

inst_66:
// rs2_val == 288230376151711744, 
// opcode: sd; op1:x10; op2:x11; op2val:288230376151711744; immval:512; align:0
TEST_STORE(x1,x6,0,x10,x11,288230376151711744,512,376,sd,0)

inst_67:
// rs2_val == 576460752303423488, 
// opcode: sd; op1:x10; op2:x11; op2val:576460752303423488; immval:-1024; align:0
TEST_STORE(x1,x6,0,x10,x11,576460752303423488,-1024,384,sd,0)

inst_68:
// rs2_val == -1125899906842625, 
// opcode: sd; op1:x10; op2:x11; op2val:-1125899906842625; immval:-3; align:0
TEST_STORE(x1,x6,0,x10,x11,-1125899906842625,-3,392,sd,0)

inst_69:
// rs2_val == -2251799813685249, 
// opcode: sd; op1:x10; op2:x11; op2val:-2251799813685249; immval:-10; align:0
TEST_STORE(x1,x6,0,x10,x11,-2251799813685249,-10,400,sd,0)

inst_70:
// rs2_val == -4503599627370497, 
// opcode: sd; op1:x10; op2:x11; op2val:-4503599627370497; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,-4503599627370497,-2,408,sd,0)

inst_71:
// rs2_val == -9007199254740993, 
// opcode: sd; op1:x10; op2:x11; op2val:-9007199254740993; immval:-1024; align:0
TEST_STORE(x1,x6,0,x10,x11,-9007199254740993,-1024,416,sd,0)

inst_72:
// rs2_val == -18014398509481985, 
// opcode: sd; op1:x10; op2:x11; op2val:-18014398509481985; immval:-257; align:0
TEST_STORE(x1,x6,0,x10,x11,-18014398509481985,-257,424,sd,0)

inst_73:
// rs2_val == -36028797018963969, 
// opcode: sd; op1:x10; op2:x11; op2val:-36028797018963969; immval:-2048; align:0
TEST_STORE(x1,x6,0,x10,x11,-36028797018963969,-2048,432,sd,0)

inst_74:
// rs2_val == -72057594037927937, 
// opcode: sd; op1:x10; op2:x11; op2val:-72057594037927937; immval:-1366; align:0
TEST_STORE(x1,x6,0,x10,x11,-72057594037927937,-1366,440,sd,0)

inst_75:
// rs2_val == -144115188075855873, 
// opcode: sd; op1:x10; op2:x11; op2val:-144115188075855873; immval:1024; align:0
TEST_STORE(x1,x6,0,x10,x11,-144115188075855873,1024,448,sd,0)

inst_76:
// rs2_val == -288230376151711745, 
// opcode: sd; op1:x10; op2:x11; op2val:-288230376151711745; immval:-5; align:0
TEST_STORE(x1,x6,0,x10,x11,-288230376151711745,-5,456,sd,0)

inst_77:
// rs2_val == -576460752303423489, 
// opcode: sd; op1:x10; op2:x11; op2val:-576460752303423489; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,-576460752303423489,-2,464,sd,0)

inst_78:
// rs2_val == -1152921504606846977, 
// opcode: sd; op1:x10; op2:x11; op2val:-1152921504606846977; immval:2; align:0
TEST_STORE(x1,x6,0,x10,x11,-1152921504606846977,2,472,sd,0)

inst_79:
// rs2_val == -2305843009213693953, 
// opcode: sd; op1:x10; op2:x11; op2val:-2305843009213693953; immval:-7; align:0
TEST_STORE(x1,x6,0,x10,x11,-2305843009213693953,-7,480,sd,0)

inst_80:
// rs2_val == -4611686018427387905, 
// opcode: sd; op1:x10; op2:x11; op2val:-4611686018427387905; immval:0; align:0
TEST_STORE(x1,x6,0,x10,x11,-4611686018427387905,0,488,sd,0)

inst_81:
// rs2_val == 6148914691236517205, 
// opcode: sd; op1:x10; op2:x11; op2val:6148914691236517205; immval:1024; align:0
TEST_STORE(x1,x6,0,x10,x11,6148914691236517205,1024,496,sd,0)

inst_82:
// rs2_val == -6148914691236517206, 
// opcode: sd; op1:x10; op2:x11; op2val:-6148914691236517206; immval:-513; align:0
TEST_STORE(x1,x6,0,x10,x11,-6148914691236517206,-513,504,sd,0)

inst_83:
// rs2_val == 1152921504606846976, 
// opcode: sd; op1:x10; op2:x11; op2val:1152921504606846976; immval:-513; align:0
TEST_STORE(x1,x6,0,x10,x11,1152921504606846976,-513,512,sd,0)

inst_84:
// rs2_val == 2305843009213693952, 
// opcode: sd; op1:x10; op2:x11; op2val:2305843009213693952; immval:-33; align:0
TEST_STORE(x1,x6,0,x10,x11,2305843009213693952,-33,520,sd,0)

inst_85:
// rs2_val == 4611686018427387904, 
// opcode: sd; op1:x10; op2:x11; op2val:4611686018427387904; immval:-2048; align:0
TEST_STORE(x1,x6,0,x10,x11,4611686018427387904,-2048,528,sd,0)

inst_86:
// rs2_val == -2, 
// opcode: sd; op1:x10; op2:x11; op2val:-2; immval:7; align:0
TEST_STORE(x1,x6,0,x10,x11,-2,7,536,sd,0)

inst_87:
// rs2_val == -3, 
// opcode: sd; op1:x10; op2:x11; op2val:-3; immval:4; align:0
TEST_STORE(x1,x6,0,x10,x11,-3,4,544,sd,0)

inst_88:
// rs2_val == -5, 
// opcode: sd; op1:x10; op2:x11; op2val:-5; immval:8; align:0
TEST_STORE(x1,x6,0,x10,x11,-5,8,552,sd,0)

inst_89:
// rs2_val == -9, 
// opcode: sd; op1:x10; op2:x11; op2val:-9; immval:-1025; align:0
TEST_STORE(x1,x6,0,x10,x11,-9,-1025,560,sd,0)

inst_90:
// rs2_val == -17, 
// opcode: sd; op1:x10; op2:x11; op2val:-17; immval:-257; align:0
TEST_STORE(x1,x6,0,x10,x11,-17,-257,568,sd,0)

inst_91:
// rs2_val == -33, 
// opcode: sd; op1:x10; op2:x11; op2val:-33; immval:-4; align:0
TEST_STORE(x1,x6,0,x10,x11,-33,-4,576,sd,0)

inst_92:
// rs2_val == -65, 
// opcode: sd; op1:x10; op2:x11; op2val:-65; immval:4; align:0
TEST_STORE(x1,x6,0,x10,x11,-65,4,584,sd,0)

inst_93:
// rs2_val == -129, 
// opcode: sd; op1:x10; op2:x11; op2val:-129; immval:2; align:0
TEST_STORE(x1,x6,0,x10,x11,-129,2,592,sd,0)

inst_94:
// rs2_val == -257, 
// opcode: sd; op1:x10; op2:x11; op2val:-257; immval:2047; align:0
TEST_STORE(x1,x6,0,x10,x11,-257,2047,600,sd,0)

inst_95:
// rs2_val == -1025, 
// opcode: sd; op1:x10; op2:x11; op2val:-1025; immval:-9; align:0
TEST_STORE(x1,x6,0,x10,x11,-1025,-9,608,sd,0)

inst_96:
// rs2_val == -2049, 
// opcode: sd; op1:x10; op2:x11; op2val:-2049; immval:2; align:0
TEST_STORE(x1,x6,0,x10,x11,-2049,2,616,sd,0)

inst_97:
// rs2_val == -4097, 
// opcode: sd; op1:x10; op2:x11; op2val:-4097; immval:1023; align:0
TEST_STORE(x1,x6,0,x10,x11,-4097,1023,624,sd,0)

inst_98:
// rs2_val == -8193, 
// opcode: sd; op1:x10; op2:x11; op2val:-8193; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,-8193,-2,632,sd,0)

inst_99:
// rs2_val == -16385, 
// opcode: sd; op1:x10; op2:x11; op2val:-16385; immval:-6; align:0
TEST_STORE(x1,x6,0,x10,x11,-16385,-6,640,sd,0)

inst_100:
// rs2_val == -32769, 
// opcode: sd; op1:x10; op2:x11; op2val:-32769; immval:3; align:0
TEST_STORE(x1,x6,0,x10,x11,-32769,3,648,sd,0)

inst_101:
// rs2_val == -65537, 
// opcode: sd; op1:x10; op2:x11; op2val:-65537; immval:-6; align:0
TEST_STORE(x1,x6,0,x10,x11,-65537,-6,656,sd,0)

inst_102:
// rs2_val == -524289, 
// opcode: sd; op1:x10; op2:x11; op2val:-524289; immval:-7; align:0
TEST_STORE(x1,x6,0,x10,x11,-524289,-7,664,sd,0)

inst_103:
// rs2_val == -1048577, 
// opcode: sd; op1:x10; op2:x11; op2val:-1048577; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,-1048577,-2,672,sd,0)

inst_104:
// rs2_val == -2097153, 
// opcode: sd; op1:x10; op2:x11; op2val:-2097153; immval:3; align:0
TEST_STORE(x1,x6,0,x10,x11,-2097153,3,680,sd,0)

inst_105:
// rs2_val == -4194305, 
// opcode: sd; op1:x10; op2:x11; op2val:-4194305; immval:-17; align:0
TEST_STORE(x1,x6,0,x10,x11,-4194305,-17,688,sd,0)

inst_106:
// rs2_val == -8388609, 
// opcode: sd; op1:x10; op2:x11; op2val:-8388609; immval:32; align:0
TEST_STORE(x1,x6,0,x10,x11,-8388609,32,696,sd,0)

inst_107:
// rs2_val == -16777217, 
// opcode: sd; op1:x10; op2:x11; op2val:-16777217; immval:1; align:0
TEST_STORE(x1,x6,0,x10,x11,-16777217,1,704,sd,0)

inst_108:
// rs2_val == -33554433, 
// opcode: sd; op1:x10; op2:x11; op2val:-33554433; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,-33554433,-2,712,sd,0)

inst_109:
// rs2_val == -67108865, 
// opcode: sd; op1:x10; op2:x11; op2val:-67108865; immval:5; align:0
TEST_STORE(x1,x6,0,x10,x11,-67108865,5,720,sd,0)

inst_110:
// rs2_val == -134217729, 
// opcode: sd; op1:x10; op2:x11; op2val:-134217729; immval:2; align:0
TEST_STORE(x1,x6,0,x10,x11,-134217729,2,728,sd,0)

inst_111:
// rs2_val == -268435457, 
// opcode: sd; op1:x10; op2:x11; op2val:-268435457; immval:-3; align:0
TEST_STORE(x1,x6,0,x10,x11,-268435457,-3,736,sd,0)

inst_112:
// rs2_val == -536870913, 
// opcode: sd; op1:x10; op2:x11; op2val:-536870913; immval:-2; align:0
TEST_STORE(x1,x6,0,x10,x11,-536870913,-2,744,sd,0)

inst_113:
// rs2_val == -1073741825, 
// opcode: sd; op1:x10; op2:x11; op2val:-1073741825; immval:5; align:0
TEST_STORE(x1,x6,0,x10,x11,-1073741825,5,752,sd,0)

inst_114:
// rs2_val == -2147483649, 
// opcode: sd; op1:x10; op2:x11; op2val:-2147483649; immval:3; align:0
TEST_STORE(x1,x6,0,x10,x11,-2147483649,3,760,sd,0)

inst_115:
// rs2_val == -4294967297, 
// opcode: sd; op1:x10; op2:x11; op2val:-4294967297; immval:256; align:0
TEST_STORE(x1,x6,0,x10,x11,-4294967297,256,768,sd,0)

inst_116:
// rs2_val == -8589934593, 
// opcode: sd; op1:x10; op2:x11; op2val:-8589934593; immval:-9; align:0
TEST_STORE(x1,x6,0,x10,x11,-8589934593,-9,776,sd,0)

inst_117:
// rs2_val == -17179869185, 
// opcode: sd; op1:x10; op2:x11; op2val:-17179869185; immval:-4; align:0
TEST_STORE(x1,x6,0,x10,x11,-17179869185,-4,784,sd,0)

inst_118:
// rs2_val == -34359738369, 
// opcode: sd; op1:x10; op2:x11; op2val:-34359738369; immval:6; align:0
TEST_STORE(x1,x6,0,x10,x11,-34359738369,6,792,sd,0)

inst_119:
// rs2_val == -137438953473, 
// opcode: sd; op1:x10; op2:x11; op2val:-137438953473; immval:-3; align:0
TEST_STORE(x1,x6,0,x10,x11,-137438953473,-3,800,sd,0)

inst_120:
// rs2_val == -274877906945, 
// opcode: sd; op1:x10; op2:x11; op2val:-274877906945; immval:7; align:0
TEST_STORE(x1,x6,0,x10,x11,-274877906945,7,808,sd,0)

inst_121:
// rs2_val == -549755813889, 
// opcode: sd; op1:x10; op2:x11; op2val:-549755813889; immval:512; align:0
TEST_STORE(x1,x6,0,x10,x11,-549755813889,512,816,sd,0)

inst_122:
// rs2_val == -1099511627777, 
// opcode: sd; op1:x10; op2:x11; op2val:-1099511627777; immval:2; align:0
TEST_STORE(x1,x6,0,x10,x11,-1099511627777,2,824,sd,0)

inst_123:
// rs2_val == -2199023255553, 
// opcode: sd; op1:x10; op2:x11; op2val:-2199023255553; immval:-7; align:0
TEST_STORE(x1,x6,0,x10,x11,-2199023255553,-7,832,sd,0)

inst_124:
// rs2_val == -8796093022209, 
// opcode: sd; op1:x10; op2:x11; op2val:-8796093022209; immval:-4; align:0
TEST_STORE(x1,x6,0,x10,x11,-8796093022209,-4,840,sd,0)

inst_125:
// rs2_val == -17592186044417, 
// opcode: sd; op1:x10; op2:x11; op2val:-17592186044417; immval:-1025; align:0
TEST_STORE(x1,x6,0,x10,x11,-17592186044417,-1025,848,sd,0)

inst_126:
// rs2_val == -35184372088833, 
// opcode: sd; op1:x10; op2:x11; op2val:-35184372088833; immval:-129; align:0
TEST_STORE(x1,x6,0,x10,x11,-35184372088833,-129,856,sd,0)

inst_127:
// rs2_val == -70368744177665, 
// opcode: sd; op1:x10; op2:x11; op2val:-70368744177665; immval:-9; align:0
TEST_STORE(x1,x6,0,x10,x11,-70368744177665,-9,864,sd,0)

inst_128:
// rs2_val == -140737488355329, 
// opcode: sd; op1:x10; op2:x11; op2val:-140737488355329; immval:512; align:0
TEST_STORE(x1,x6,0,x10,x11,-140737488355329,512,872,sd,0)

inst_129:
// rs2_val == -281474976710657, 
// opcode: sd; op1:x10; op2:x11; op2val:-281474976710657; immval:1023; align:0
TEST_STORE(x1,x6,0,x10,x11,-281474976710657,1023,880,sd,0)

inst_130:
// rs2_val == -562949953421313, 
// opcode: sd; op1:x10; op2:x11; op2val:-562949953421313; immval:512; align:0
TEST_STORE(x1,x6,0,x10,x11,-562949953421313,512,888,sd,0)

inst_131:
// rs2_val == 1024, 
// opcode: sd; op1:x10; op2:x11; op2val:1024; immval:1365; align:0
TEST_STORE(x1,x6,0,x10,x11,1024,1365,896,sd,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 113*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
