
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:23:49 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sd instruction of the RISC-V I extension for the sd-align covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",sd-align)

RVTEST_SIGBASE( x13,signature_x13_1)

inst_0:
// rs1 != rs2, rs1==x1, rs2==x16, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, ea_align == 0 and (imm_val % 8) == 0, imm_val > 0
// opcode: sd; op1:x1; op2:x16; op2val:-0x8000000000000000; immval:0x20; align:0
TEST_STORE(x13,x14,0,x1,x16,-0x8000000000000000,0x20,0,sd,0)

inst_1:
// rs1==x23, rs2==x7, rs2_val == 0, imm_val < 0
// opcode: sd; op1:x23; op2:x7; op2val:0x0; immval:-0x800; align:0
TEST_STORE(x13,x14,0,x23,x7,0x0,-0x800,8,sd,0)

inst_2:
// rs1==x6, rs2==x22, rs2_val == (2**(xlen-1)-1), ea_align == 0 and (imm_val % 8) == 5, rs2_val == 9223372036854775807
// opcode: sd; op1:x6; op2:x22; op2val:0x7fffffffffffffff; immval:0x555; align:0
TEST_STORE(x13,x14,0,x6,x22,0x7fffffffffffffff,0x555,16,sd,0)

inst_3:
// rs1==x18, rs2==x12, rs2_val == 1, 
// opcode: sd; op1:x18; op2:x12; op2val:0x1; immval:0x80; align:0
TEST_STORE(x13,x14,0,x18,x12,0x1,0x80,24,sd,0)

inst_4:
// rs1==x19, rs2==x11, ea_align == 0 and (imm_val % 8) == 1, rs2_val == -32769
// opcode: sd; op1:x19; op2:x11; op2val:-0x8001; immval:0x9; align:0
TEST_STORE(x13,x14,0,x19,x11,-0x8001,0x9,32,sd,0)

inst_5:
// rs1==x9, rs2==x30, ea_align == 0 and (imm_val % 8) == 2, 
// opcode: sd; op1:x9; op2:x30; op2val:0x3; immval:-0x556; align:0
TEST_STORE(x13,x14,0,x9,x30,0x3,-0x556,40,sd,0)

inst_6:
// rs1==x17, rs2==x25, ea_align == 0 and (imm_val % 8) == 3, rs2_val == -33
// opcode: sd; op1:x17; op2:x25; op2val:-0x21; immval:-0x5; align:0
TEST_STORE(x13,x14,0,x17,x25,-0x21,-0x5,48,sd,0)

inst_7:
// rs1==x12, rs2==x0, ea_align == 0 and (imm_val % 8) == 4, 
// opcode: sd; op1:x12; op2:x0; op2val:0x5; immval:-0x4; align:0
TEST_STORE(x13,x14,0,x12,x0,0x5,-0x4,56,sd,0)

inst_8:
// rs1==x5, rs2==x31, ea_align == 0 and (imm_val % 8) == 6, rs2_val == 4398046511104
// opcode: sd; op1:x5; op2:x31; op2val:0x40000000000; immval:0x6; align:0
TEST_STORE(x13,x14,0,x5,x31,0x40000000000,0x6,64,sd,0)

inst_9:
// rs1==x8, rs2==x18, ea_align == 0 and (imm_val % 8) == 7, rs2_val == 8796093022208
// opcode: sd; op1:x8; op2:x18; op2val:0x80000000000; immval:-0x11; align:0
TEST_STORE(x13,x14,0,x8,x18,0x80000000000,-0x11,72,sd,0)

inst_10:
// rs1==x20, rs2==x21, imm_val == 0, 
// opcode: sd; op1:x20; op2:x21; op2val:-0x1; immval:0x0; align:0
TEST_STORE(x13,x14,0,x20,x21,-0x1,0x0,80,sd,0)

inst_11:
// rs1==x28, rs2==x17, rs2_val == 2, 
// opcode: sd; op1:x28; op2:x17; op2val:0x2; immval:0x10; align:0
TEST_STORE(x13,x14,0,x28,x17,0x2,0x10,88,sd,0)

inst_12:
// rs1==x25, rs2==x26, rs2_val == 4, 
// opcode: sd; op1:x25; op2:x26; op2val:0x4; immval:0x5; align:0
TEST_STORE(x13,x14,0,x25,x26,0x4,0x5,96,sd,0)

inst_13:
// rs1==x26, rs2==x27, rs2_val == 8, 
// opcode: sd; op1:x26; op2:x27; op2val:0x8; immval:-0x21; align:0
TEST_STORE(x13,x14,0,x26,x27,0x8,-0x21,104,sd,0)

inst_14:
// rs1==x30, rs2==x19, rs2_val == 16, 
// opcode: sd; op1:x30; op2:x19; op2val:0x10; immval:-0x6; align:0
TEST_STORE(x13,x14,0,x30,x19,0x10,-0x6,112,sd,0)

inst_15:
// rs1==x24, rs2==x4, rs2_val == 32, 
// opcode: sd; op1:x24; op2:x4; op2val:0x20; immval:0x8; align:0
TEST_STORE(x13,x14,0,x24,x4,0x20,0x8,120,sd,0)

inst_16:
// rs1==x2, rs2==x10, rs2_val == 64, 
// opcode: sd; op1:x2; op2:x10; op2val:0x40; immval:-0x3; align:0
TEST_STORE(x13,x14,0,x2,x10,0x40,-0x3,128,sd,0)

inst_17:
// rs1==x4, rs2==x24, rs2_val == 128, 
// opcode: sd; op1:x4; op2:x24; op2val:0x80; immval:0x3ff; align:0
TEST_STORE(x13,x14,0,x4,x24,0x80,0x3ff,136,sd,0)

inst_18:
// rs1==x31, rs2==x3, rs2_val == 256, 
// opcode: sd; op1:x31; op2:x3; op2val:0x100; immval:-0x11; align:0
TEST_STORE(x13,x14,0,x31,x3,0x100,-0x11,144,sd,0)

inst_19:
// rs1==x7, rs2==x14, rs2_val == 512, 
// opcode: sd; op1:x7; op2:x14; op2val:0x200; immval:-0x800; align:0
TEST_STORE(x13,x12,0,x7,x14,0x200,-0x800,152,sd,0)
RVTEST_SIGBASE( x4,signature_x4_0)

inst_20:
// rs1==x10, rs2==x28, rs2_val == 1024, 
// opcode: sd; op1:x10; op2:x28; op2val:0x400; immval:-0x2; align:0
TEST_STORE(x4,x12,0,x10,x28,0x400,-0x2,0,sd,0)

inst_21:
// rs1==x22, rs2==x29, rs2_val == 2048, 
// opcode: sd; op1:x22; op2:x29; op2val:0x800; immval:0x6; align:0
TEST_STORE(x4,x12,0,x22,x29,0x800,0x6,8,sd,0)

inst_22:
// rs1==x15, rs2==x2, rs2_val == 4096, 
// opcode: sd; op1:x15; op2:x2; op2val:0x1000; immval:-0x401; align:0
TEST_STORE(x4,x12,0,x15,x2,0x1000,-0x401,16,sd,0)

inst_23:
// rs1==x13, rs2==x1, rs2_val == 8192, 
// opcode: sd; op1:x13; op2:x1; op2val:0x2000; immval:-0x1; align:0
TEST_STORE(x4,x12,0,x13,x1,0x2000,-0x1,24,sd,0)

inst_24:
// rs1==x3, rs2==x20, rs2_val == 16384, 
// opcode: sd; op1:x3; op2:x20; op2val:0x4000; immval:0x555; align:0
TEST_STORE(x4,x12,0,x3,x20,0x4000,0x555,32,sd,0)

inst_25:
// rs1==x16, rs2==x23, rs2_val == 32768, 
// opcode: sd; op1:x16; op2:x23; op2val:0x8000; immval:0x3ff; align:0
TEST_STORE(x4,x12,0,x16,x23,0x8000,0x3ff,40,sd,0)

inst_26:
// rs1==x11, rs2==x6, rs2_val == 65536, 
// opcode: sd; op1:x11; op2:x6; op2val:0x10000; immval:0x80; align:0
TEST_STORE(x4,x12,0,x11,x6,0x10000,0x80,48,sd,0)

inst_27:
// rs1==x29, rs2==x9, rs2_val == 131072, 
// opcode: sd; op1:x29; op2:x9; op2val:0x20000; immval:-0xa; align:0
TEST_STORE(x4,x12,0,x29,x9,0x20000,-0xa,56,sd,0)

inst_28:
// rs1==x27, rs2==x8, rs2_val == 262144, 
// opcode: sd; op1:x27; op2:x8; op2val:0x40000; immval:-0x11; align:0
TEST_STORE(x4,x12,0,x27,x8,0x40000,-0x11,64,sd,0)

inst_29:
// rs1==x21, rs2==x13, rs2_val == 524288, 
// opcode: sd; op1:x21; op2:x13; op2val:0x80000; immval:-0xa; align:0
TEST_STORE(x4,x12,0,x21,x13,0x80000,-0xa,72,sd,0)

inst_30:
// rs1==x14, rs2==x5, rs2_val == 1048576, 
// opcode: sd; op1:x14; op2:x5; op2val:0x100000; immval:0x400; align:0
TEST_STORE(x4,x12,0,x14,x5,0x100000,0x400,80,sd,0)

inst_31:
// rs2==x15, rs2_val == 2097152, 
// opcode: sd; op1:x10; op2:x15; op2val:0x200000; immval:-0x21; align:0
TEST_STORE(x4,x12,0,x10,x15,0x200000,-0x21,88,sd,0)

inst_32:
// rs2_val == 4194304, 
// opcode: sd; op1:x10; op2:x11; op2val:0x400000; immval:-0x800; align:0
TEST_STORE(x4,x12,0,x10,x11,0x400000,-0x800,96,sd,0)

inst_33:
// rs2_val == 8388608, 
// opcode: sd; op1:x10; op2:x11; op2val:0x800000; immval:-0x7; align:0
TEST_STORE(x4,x12,0,x10,x11,0x800000,-0x7,104,sd,0)

inst_34:
// rs2_val == 16777216, 
// opcode: sd; op1:x10; op2:x11; op2val:0x1000000; immval:-0x81; align:0
TEST_STORE(x4,x12,0,x10,x11,0x1000000,-0x81,112,sd,0)

inst_35:
// rs2_val == 33554432, 
// opcode: sd; op1:x10; op2:x11; op2val:0x2000000; immval:0x2; align:0
TEST_STORE(x4,x12,0,x10,x11,0x2000000,0x2,120,sd,0)

inst_36:
// rs2_val == 67108864, 
// opcode: sd; op1:x10; op2:x11; op2val:0x4000000; immval:-0x556; align:0
TEST_STORE(x4,x12,0,x10,x11,0x4000000,-0x556,128,sd,0)

inst_37:
// rs2_val == 134217728, 
// opcode: sd; op1:x10; op2:x11; op2val:0x8000000; immval:-0x9; align:0
TEST_STORE(x4,x12,0,x10,x11,0x8000000,-0x9,136,sd,0)

inst_38:
// rs2_val == 268435456, 
// opcode: sd; op1:x10; op2:x11; op2val:0x10000000; immval:0x80; align:0
TEST_STORE(x4,x12,0,x10,x11,0x10000000,0x80,144,sd,0)

inst_39:
// rs2_val == 536870912, 
// opcode: sd; op1:x10; op2:x11; op2val:0x20000000; immval:0x555; align:0
TEST_STORE(x4,x12,0,x10,x11,0x20000000,0x555,152,sd,0)

inst_40:
// rs2_val == 1073741824, 
// opcode: sd; op1:x10; op2:x11; op2val:0x40000000; immval:-0x7; align:0
TEST_STORE(x4,x12,0,x10,x11,0x40000000,-0x7,160,sd,0)

inst_41:
// rs2_val == 2147483648, 
// opcode: sd; op1:x10; op2:x11; op2val:0x80000000; immval:-0x6; align:0
TEST_STORE(x4,x12,0,x10,x11,0x80000000,-0x6,168,sd,0)

inst_42:
// rs2_val == 4294967296, 
// opcode: sd; op1:x10; op2:x11; op2val:0x100000000; immval:0x1; align:0
TEST_STORE(x4,x12,0,x10,x11,0x100000000,0x1,176,sd,0)

inst_43:
// rs2_val == 8589934592, 
// opcode: sd; op1:x10; op2:x11; op2val:0x200000000; immval:0x6; align:0
TEST_STORE(x4,x12,0,x10,x11,0x200000000,0x6,184,sd,0)

inst_44:
// rs2_val == 17179869184, 
// opcode: sd; op1:x10; op2:x11; op2val:0x400000000; immval:-0x101; align:0
TEST_STORE(x4,x12,0,x10,x11,0x400000000,-0x101,192,sd,0)

inst_45:
// rs2_val == 34359738368, 
// opcode: sd; op1:x10; op2:x11; op2val:0x800000000; immval:-0x401; align:0
TEST_STORE(x4,x12,0,x10,x11,0x800000000,-0x401,200,sd,0)

inst_46:
// rs2_val == 68719476736, 
// opcode: sd; op1:x10; op2:x11; op2val:0x1000000000; immval:0x7; align:0
TEST_STORE(x4,x12,0,x10,x11,0x1000000000,0x7,208,sd,0)

inst_47:
// rs2_val == 137438953472, 
// opcode: sd; op1:x10; op2:x11; op2val:0x2000000000; immval:-0x8; align:0
TEST_STORE(x4,x12,0,x10,x11,0x2000000000,-0x8,216,sd,0)

inst_48:
// rs2_val == 274877906944, 
// opcode: sd; op1:x10; op2:x11; op2val:0x4000000000; immval:0x400; align:0
TEST_STORE(x4,x12,0,x10,x11,0x4000000000,0x400,224,sd,0)

inst_49:
// rs2_val == 549755813888, 
// opcode: sd; op1:x10; op2:x11; op2val:0x8000000000; immval:0x80; align:0
TEST_STORE(x4,x12,0,x10,x11,0x8000000000,0x80,232,sd,0)

inst_50:
// rs2_val == 1099511627776, 
// opcode: sd; op1:x10; op2:x11; op2val:0x10000000000; immval:-0x556; align:0
TEST_STORE(x4,x12,0,x10,x11,0x10000000000,-0x556,240,sd,0)

inst_51:
// rs2_val == 2199023255552, 
// opcode: sd; op1:x10; op2:x11; op2val:0x20000000000; immval:0x20; align:0
TEST_STORE(x4,x12,0,x10,x11,0x20000000000,0x20,248,sd,0)

inst_52:
// rs2_val == 17592186044416, 
// opcode: sd; op1:x10; op2:x11; op2val:0x100000000000; immval:0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,0x100000000000,0x5,256,sd,0)

inst_53:
// rs2_val == 35184372088832, 
// opcode: sd; op1:x10; op2:x11; op2val:0x200000000000; immval:-0x2; align:0
TEST_STORE(x4,x12,0,x10,x11,0x200000000000,-0x2,264,sd,0)

inst_54:
// rs2_val == 70368744177664, 
// opcode: sd; op1:x10; op2:x11; op2val:0x400000000000; immval:-0x401; align:0
TEST_STORE(x4,x12,0,x10,x11,0x400000000000,-0x401,272,sd,0)

inst_55:
// rs2_val == 140737488355328, 
// opcode: sd; op1:x10; op2:x11; op2val:0x800000000000; immval:-0x400; align:0
TEST_STORE(x4,x12,0,x10,x11,0x800000000000,-0x400,280,sd,0)

inst_56:
// rs2_val == 281474976710656, 
// opcode: sd; op1:x10; op2:x11; op2val:0x1000000000000; immval:0x7; align:0
TEST_STORE(x4,x12,0,x10,x11,0x1000000000000,0x7,288,sd,0)

inst_57:
// rs2_val == 562949953421312, 
// opcode: sd; op1:x10; op2:x11; op2val:0x2000000000000; immval:0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,0x2000000000000,0x5,296,sd,0)

inst_58:
// rs2_val == 1125899906842624, 
// opcode: sd; op1:x10; op2:x11; op2val:0x4000000000000; immval:0x10; align:0
TEST_STORE(x4,x12,0,x10,x11,0x4000000000000,0x10,304,sd,0)

inst_59:
// rs2_val == 2251799813685248, 
// opcode: sd; op1:x10; op2:x11; op2val:0x8000000000000; immval:0x200; align:0
TEST_STORE(x4,x12,0,x10,x11,0x8000000000000,0x200,312,sd,0)

inst_60:
// rs2_val == 4503599627370496, 
// opcode: sd; op1:x10; op2:x11; op2val:0x10000000000000; immval:-0x4; align:0
TEST_STORE(x4,x12,0,x10,x11,0x10000000000000,-0x4,320,sd,0)

inst_61:
// rs2_val == 9007199254740992, 
// opcode: sd; op1:x10; op2:x11; op2val:0x20000000000000; immval:-0x400; align:0
TEST_STORE(x4,x12,0,x10,x11,0x20000000000000,-0x400,328,sd,0)

inst_62:
// rs2_val == 18014398509481984, 
// opcode: sd; op1:x10; op2:x11; op2val:0x40000000000000; immval:-0x101; align:0
TEST_STORE(x4,x12,0,x10,x11,0x40000000000000,-0x101,336,sd,0)

inst_63:
// rs2_val == 36028797018963968, 
// opcode: sd; op1:x10; op2:x11; op2val:0x80000000000000; immval:0x2; align:0
TEST_STORE(x4,x12,0,x10,x11,0x80000000000000,0x2,344,sd,0)

inst_64:
// rs2_val == 72057594037927936, 
// opcode: sd; op1:x10; op2:x11; op2val:0x100000000000000; immval:0x4; align:0
TEST_STORE(x4,x12,0,x10,x11,0x100000000000000,0x4,352,sd,0)

inst_65:
// rs2_val == 144115188075855872, 
// opcode: sd; op1:x10; op2:x11; op2val:0x200000000000000; immval:0x40; align:0
TEST_STORE(x4,x12,0,x10,x11,0x200000000000000,0x40,360,sd,0)

inst_66:
// rs2_val == 288230376151711744, 
// opcode: sd; op1:x10; op2:x11; op2val:0x400000000000000; immval:0x100; align:0
TEST_STORE(x4,x12,0,x10,x11,0x400000000000000,0x100,368,sd,0)

inst_67:
// rs2_val == 576460752303423488, 
// opcode: sd; op1:x10; op2:x11; op2val:0x800000000000000; immval:-0x556; align:0
TEST_STORE(x4,x12,0,x10,x11,0x800000000000000,-0x556,376,sd,0)

inst_68:
// rs2_val == 1152921504606846976, 
// opcode: sd; op1:x10; op2:x11; op2val:0x1000000000000000; immval:-0x7; align:0
TEST_STORE(x4,x12,0,x10,x11,0x1000000000000000,-0x7,384,sd,0)

inst_69:
// rs2_val == 2305843009213693952, 
// opcode: sd; op1:x10; op2:x11; op2val:0x2000000000000000; immval:0x9; align:0
TEST_STORE(x4,x12,0,x10,x11,0x2000000000000000,0x9,392,sd,0)

inst_70:
// rs2_val == 4611686018427387904, 
// opcode: sd; op1:x10; op2:x11; op2val:0x4000000000000000; immval:0x40; align:0
TEST_STORE(x4,x12,0,x10,x11,0x4000000000000000,0x40,400,sd,0)

inst_71:
// rs2_val == -1125899906842625, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x4000000000001; immval:-0x9; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x4000000000001,-0x9,408,sd,0)

inst_72:
// rs2_val == -2251799813685249, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x8000000000001; immval:0x100; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x8000000000001,0x100,416,sd,0)

inst_73:
// rs2_val == -4503599627370497, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x10000000000001; immval:0x10; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x10000000000001,0x10,424,sd,0)

inst_74:
// rs2_val == -9007199254740993, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x20000000000001; immval:0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x20000000000001,0x5,432,sd,0)

inst_75:
// rs2_val == -18014398509481985, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x40000000000001; immval:-0x2; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x40000000000001,-0x2,440,sd,0)

inst_76:
// rs2_val == -36028797018963969, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x80000000000001; immval:-0x81; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x80000000000001,-0x81,448,sd,0)

inst_77:
// rs2_val == -72057594037927937, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x100000000000001; immval:-0x201; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x100000000000001,-0x201,456,sd,0)

inst_78:
// rs2_val == -144115188075855873, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x200000000000001; immval:-0xa; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x200000000000001,-0xa,464,sd,0)

inst_79:
// rs2_val == -288230376151711745, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x400000000000001; immval:0x40; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x400000000000001,0x40,472,sd,0)

inst_80:
// rs2_val == -576460752303423489, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x800000000000001; immval:0x20; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x800000000000001,0x20,480,sd,0)

inst_81:
// rs2_val == -1152921504606846977, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x1000000000000001; immval:-0x401; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x1000000000000001,-0x401,488,sd,0)

inst_82:
// rs2_val == -2305843009213693953, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x2000000000000001; immval:-0x9; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x2000000000000001,-0x9,496,sd,0)

inst_83:
// rs2_val == -4611686018427387905, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x4000000000000001; immval:-0x4; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x4000000000000001,-0x4,504,sd,0)

inst_84:
// rs2_val == 6148914691236517205, 
// opcode: sd; op1:x10; op2:x11; op2val:0x5555555555555555; immval:-0x1; align:0
TEST_STORE(x4,x12,0,x10,x11,0x5555555555555555,-0x1,512,sd,0)

inst_85:
// rs2_val == -6148914691236517206, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x5555555555555556; immval:0x555; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x5555555555555556,0x555,520,sd,0)

inst_86:
// rs2_val == -2, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x2; immval:-0x800; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x2,-0x800,528,sd,0)

inst_87:
// rs2_val == -3, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x3; immval:-0x9; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x3,-0x9,536,sd,0)

inst_88:
// rs2_val == -5, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x5; immval:0x400; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x5,0x400,544,sd,0)

inst_89:
// rs2_val == -9, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x9; immval:-0x11; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x9,-0x11,552,sd,0)

inst_90:
// rs2_val == -17, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x11; immval:-0x7; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x11,-0x7,560,sd,0)

inst_91:
// rs2_val == -65, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x41; immval:-0xa; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x41,-0xa,568,sd,0)

inst_92:
// rs2_val == -129, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x81; immval:0x80; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x81,0x80,576,sd,0)

inst_93:
// rs2_val == -257, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x101; immval:-0x81; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x101,-0x81,584,sd,0)

inst_94:
// rs2_val == -513, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x201; immval:0x80; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x201,0x80,592,sd,0)

inst_95:
// rs2_val == -1025, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x401; immval:-0x2; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x401,-0x2,600,sd,0)

inst_96:
// rs2_val == -2049, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x801; immval:0x3; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x801,0x3,608,sd,0)

inst_97:
// rs2_val == -4097, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x1001; immval:0x9; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x1001,0x9,616,sd,0)

inst_98:
// rs2_val == -8193, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x2001; immval:-0x3; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x2001,-0x3,624,sd,0)

inst_99:
// rs2_val == -16385, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x4001; immval:-0x4; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x4001,-0x4,632,sd,0)

inst_100:
// rs2_val == -65537, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x10001; immval:0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x10001,0x5,640,sd,0)

inst_101:
// rs2_val == -131073, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x20001; immval:-0x41; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x20001,-0x41,648,sd,0)

inst_102:
// rs2_val == -262145, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x40001; immval:0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x40001,0x5,656,sd,0)

inst_103:
// rs2_val == -524289, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x80001; immval:-0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x80001,-0x5,664,sd,0)

inst_104:
// rs2_val == -1048577, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x100001; immval:-0x9; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x100001,-0x9,672,sd,0)

inst_105:
// rs2_val == -2097153, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x200001; immval:-0x400; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x200001,-0x400,680,sd,0)

inst_106:
// rs2_val == -4194305, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x400001; immval:0x555; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x400001,0x555,688,sd,0)

inst_107:
// rs2_val == -8388609, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x800001; immval:-0x3; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x800001,-0x3,696,sd,0)

inst_108:
// rs2_val == -16777217, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x1000001; immval:0x100; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x1000001,0x100,704,sd,0)

inst_109:
// rs2_val == -33554433, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x2000001; immval:-0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x2000001,-0x5,712,sd,0)

inst_110:
// rs2_val == -67108865, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x4000001; immval:-0x11; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x4000001,-0x11,720,sd,0)

inst_111:
// rs2_val == -134217729, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x8000001; immval:0x400; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x8000001,0x400,728,sd,0)

inst_112:
// rs2_val == -268435457, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x10000001; immval:-0x81; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x10000001,-0x81,736,sd,0)

inst_113:
// rs2_val == -536870913, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x20000001; immval:0x1; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x20000001,0x1,744,sd,0)

inst_114:
// rs2_val == -1073741825, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x40000001; immval:0x40; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x40000001,0x40,752,sd,0)

inst_115:
// rs2_val == -2147483649, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x80000001; immval:-0x4; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x80000001,-0x4,760,sd,0)

inst_116:
// rs2_val == -4294967297, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x100000001; immval:-0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x100000001,-0x5,768,sd,0)

inst_117:
// rs2_val == -8589934593, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x200000001; immval:-0x7; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x200000001,-0x7,776,sd,0)

inst_118:
// rs2_val == -17179869185, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x400000001; immval:0x4; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x400000001,0x4,784,sd,0)

inst_119:
// rs2_val == -34359738369, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x800000001; immval:-0x6; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x800000001,-0x6,792,sd,0)

inst_120:
// rs2_val == -68719476737, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x1000000001; immval:-0x201; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x1000000001,-0x201,800,sd,0)

inst_121:
// rs2_val == -137438953473, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x2000000001; immval:0x5; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x2000000001,0x5,808,sd,0)

inst_122:
// rs2_val == -274877906945, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x4000000001; immval:0x1; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x4000000001,0x1,816,sd,0)

inst_123:
// rs2_val == -549755813889, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x8000000001; immval:0x80; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x8000000001,0x80,824,sd,0)

inst_124:
// rs2_val == -1099511627777, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x10000000001; immval:-0x400; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x10000000001,-0x400,832,sd,0)

inst_125:
// rs2_val == -2199023255553, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x20000000001; immval:-0x4; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x20000000001,-0x4,840,sd,0)

inst_126:
// rs2_val == -4398046511105, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x40000000001; immval:-0x21; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x40000000001,-0x21,848,sd,0)

inst_127:
// rs2_val == -8796093022209, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x80000000001; immval:0x8; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x80000000001,0x8,856,sd,0)

inst_128:
// rs2_val == -17592186044417, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x100000000001; immval:-0x556; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x100000000001,-0x556,864,sd,0)

inst_129:
// rs2_val == -35184372088833, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x200000000001; immval:-0x21; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x200000000001,-0x21,872,sd,0)

inst_130:
// rs2_val == -70368744177665, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x400000000001; immval:0x100; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x400000000001,0x100,880,sd,0)

inst_131:
// rs2_val == -140737488355329, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x800000000001; immval:-0x3; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x800000000001,-0x3,888,sd,0)

inst_132:
// rs2_val == -281474976710657, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x1000000000001; immval:0x555; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x1000000000001,0x555,896,sd,0)

inst_133:
// rs2_val == -562949953421313, 
// opcode: sd; op1:x10; op2:x11; op2val:-0x2000000000001; immval:-0x2; align:0
TEST_STORE(x4,x12,0,x10,x11,-0x2000000000001,-0x2,904,sd,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 114*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
