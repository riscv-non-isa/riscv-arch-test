
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sltu instruction of the RISC-V I extension for the sltu covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltu)

RVTEST_SIGBASE( x18,signature_x18_1)

inst_0:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x2, rs1_val > 0 and rs2_val > 0, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0
// opcode: sltu ; op1:x15; op2:x15; dest:x2; op1val:5;  op2val:19
TEST_RR_OP(sltu, x2, x15, x15, 0x1, 5, 19, x18, 0, x26)

inst_1:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 18446744073675997183, rs1_val == 18446744073675997183
// opcode: sltu ; op1:x7; op2:x7; dest:x7; op1val:18446744073675997183;  op2val:18446744073675997183
TEST_RR_OP(sltu, x7, x7, x7, 0x0, 18446744073675997183, 18446744073675997183, x18, 8, x26)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x13, rd==x30, rs2_val == 0, rs1_val == 18442240474082181119
// opcode: sltu ; op1:x30; op2:x13; dest:x30; op1val:18442240474082181119;  op2val:0
TEST_RR_OP(sltu, x30, x30, x13, 0x0, 18442240474082181119, 0, x18, 16, x26)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x8, rd==x22, rs2_val == (2**(xlen)-1), rs1_val == 6148914691236517205
// opcode: sltu ; op1:x16; op2:x8; dest:x22; op1val:6148914691236517205;  op2val:18446744073709551615
TEST_RR_OP(sltu, x22, x16, x8, 0x1, 6148914691236517205, 18446744073709551615, x18, 24, x26)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x21, rd==x21, rs2_val == 1, rs1_val == 18446744073172680703
// opcode: sltu ; op1:x1; op2:x21; dest:x21; op1val:18446744073172680703;  op2val:1
TEST_RR_OP(sltu, x21, x1, x21, 0x0, 18446744073172680703, 1, x18, 32, x26)

inst_5:
// rs1==x14, rs2==x9, rd==x25, rs1_val == 0, rs2_val == 9223372036854775807
// opcode: sltu ; op1:x14; op2:x9; dest:x25; op1val:0;  op2val:9223372036854775807
TEST_RR_OP(sltu, x25, x14, x9, 0x1, 0, 9223372036854775807, x18, 40, x26)

inst_6:
// rs1==x13, rs2==x11, rd==x6, rs1_val == (2**(xlen)-1), rs2_val == 2
// opcode: sltu ; op1:x13; op2:x11; dest:x6; op1val:18446744073709551615;  op2val:2
TEST_RR_OP(sltu, x6, x13, x11, 0x0, 18446744073709551615, 2, x18, 48, x26)

inst_7:
// rs1==x10, rs2==x1, rd==x11, rs1_val == 1, rs2_val == 1125899906842624
// opcode: sltu ; op1:x10; op2:x1; dest:x11; op1val:1;  op2val:1125899906842624
TEST_RR_OP(sltu, x11, x10, x1, 0x1, 1, 1125899906842624, x18, 56, x26)

inst_8:
// rs1==x21, rs2==x23, rd==x19, rs2_val == 4, rs1_val == 18158513697557839871
// opcode: sltu ; op1:x21; op2:x23; dest:x19; op1val:18158513697557839871;  op2val:4
TEST_RR_OP(sltu, x19, x21, x23, 0x0, 18158513697557839871, 4, x18, 64, x26)

inst_9:
// rs1==x4, rs2==x17, rd==x13, rs2_val == 8, rs1_val == 18446741874686296063
// opcode: sltu ; op1:x4; op2:x17; dest:x13; op1val:18446741874686296063;  op2val:8
TEST_RR_OP(sltu, x13, x4, x17, 0x0, 18446741874686296063, 8, x18, 72, x26)

inst_10:
// rs1==x9, rs2==x5, rd==x14, rs2_val == 16, rs1_val == 268435456
// opcode: sltu ; op1:x9; op2:x5; dest:x14; op1val:268435456;  op2val:16
TEST_RR_OP(sltu, x14, x9, x5, 0x0, 268435456, 16, x18, 80, x26)

inst_11:
// rs1==x8, rs2==x24, rd==x31, rs2_val == 32, rs1_val == 18446744004990074879
// opcode: sltu ; op1:x8; op2:x24; dest:x31; op1val:18446744004990074879;  op2val:32
TEST_RR_OP(sltu, x31, x8, x24, 0x0, 18446744004990074879, 32, x18, 88, x26)

inst_12:
// rs1==x27, rs2==x12, rd==x20, rs2_val == 64, rs1_val == 18446744073709547519
// opcode: sltu ; op1:x27; op2:x12; dest:x20; op1val:18446744073709547519;  op2val:64
TEST_RR_OP(sltu, x20, x27, x12, 0x0, 18446744073709547519, 64, x18, 96, x26)

inst_13:
// rs1==x20, rs2==x3, rd==x10, rs2_val == 128, rs1_val == 140737488355328
// opcode: sltu ; op1:x20; op2:x3; dest:x10; op1val:140737488355328;  op2val:128
TEST_RR_OP(sltu, x10, x20, x3, 0x0, 140737488355328, 128, x18, 104, x26)

inst_14:
// rs1==x29, rs2==x22, rd==x1, rs2_val == 256, rs1_val == 18374686479671623679
// opcode: sltu ; op1:x29; op2:x22; dest:x1; op1val:18374686479671623679;  op2val:256
TEST_RR_OP(sltu, x1, x29, x22, 0x0, 18374686479671623679, 256, x18, 112, x7)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_15:
// rs1==x17, rs2==x25, rd==x26, rs2_val == 512, rs1_val == 18446744073709027327
// opcode: sltu ; op1:x17; op2:x25; dest:x26; op1val:18446744073709027327;  op2val:512
TEST_RR_OP(sltu, x26, x17, x25, 0x0, 18446744073709027327, 512, x1, 0, x7)

inst_16:
// rs1==x6, rs2==x26, rd==x8, rs2_val == 1024, rs1_val == 18444492273895866367
// opcode: sltu ; op1:x6; op2:x26; dest:x8; op1val:18444492273895866367;  op2val:1024
TEST_RR_OP(sltu, x8, x6, x26, 0x0, 18444492273895866367, 1024, x1, 8, x7)

inst_17:
// rs1==x2, rs2==x16, rd==x9, rs2_val == 2048, rs1_val == 2097152
// opcode: sltu ; op1:x2; op2:x16; dest:x9; op1val:2097152;  op2val:2048
TEST_RR_OP(sltu, x9, x2, x16, 0x0, 2097152, 2048, x1, 16, x7)

inst_18:
// rs1==x25, rs2==x0, rd==x17, rs2_val == 4096, rs1_val == 18446744071562067967
// opcode: sltu ; op1:x25; op2:x0; dest:x17; op1val:18446744071562067967;  op2val:4096
TEST_RR_OP(sltu, x17, x25, x0, 0x0, 18446744071562067967, 4096, x1, 24, x7)

inst_19:
// rs1==x26, rs2==x4, rd==x12, rs2_val == 8192, 
// opcode: sltu ; op1:x26; op2:x4; dest:x12; op1val:6148914691236517204;  op2val:8192
TEST_RR_OP(sltu, x12, x26, x4, 0x0, 6148914691236517204, 8192, x1, 32, x7)

inst_20:
// rs1==x22, rs2==x19, rd==x28, rs2_val == 16384, rs1_val == 274877906944
// opcode: sltu ; op1:x22; op2:x19; dest:x28; op1val:274877906944;  op2val:16384
TEST_RR_OP(sltu, x28, x22, x19, 0x0, 274877906944, 16384, x1, 40, x7)

inst_21:
// rs1==x11, rs2==x14, rd==x15, rs2_val == 32768, rs1_val == 18446744073441116159
// opcode: sltu ; op1:x11; op2:x14; dest:x15; op1val:18446744073441116159;  op2val:32768
TEST_RR_OP(sltu, x15, x11, x14, 0x0, 18446744073441116159, 32768, x1, 48, x7)

inst_22:
// rs1==x19, rs2==x28, rd==x29, rs2_val == 65536, rs1_val == 18446744073709550591
// opcode: sltu ; op1:x19; op2:x28; dest:x29; op1val:18446744073709550591;  op2val:65536
TEST_RR_OP(sltu, x29, x19, x28, 0x0, 18446744073709550591, 65536, x1, 56, x7)

inst_23:
// rs1==x31, rs2==x30, rd==x23, rs2_val == 131072, rs1_val == 4194304
// opcode: sltu ; op1:x31; op2:x30; dest:x23; op1val:4194304;  op2val:131072
TEST_RR_OP(sltu, x23, x31, x30, 0x0, 4194304, 131072, x1, 64, x7)

inst_24:
// rs1==x18, rs2==x20, rd==x27, rs2_val == 262144, rs1_val == 18446744073709289471
// opcode: sltu ; op1:x18; op2:x20; dest:x27; op1val:18446744073709289471;  op2val:262144
TEST_RR_OP(sltu, x27, x18, x20, 0x0, 18446744073709289471, 262144, x1, 72, x7)

inst_25:
// rs1==x24, rs2==x31, rd==x18, rs2_val == 524288, 
// opcode: sltu ; op1:x24; op2:x31; dest:x18; op1val:4194304;  op2val:524288
TEST_RR_OP(sltu, x18, x24, x31, 0x0, 4194304, 524288, x1, 80, x7)

inst_26:
// rs1==x23, rs2==x29, rd==x16, rs2_val == 1048576, rs1_val == 17179869184
// opcode: sltu ; op1:x23; op2:x29; dest:x16; op1val:17179869184;  op2val:1048576
TEST_RR_OP(sltu, x16, x23, x29, 0x0, 17179869184, 1048576, x1, 88, x7)

inst_27:
// rs1==x3, rs2==x10, rd==x5, rs2_val == 2097152, rs1_val == 18446744073709551359
// opcode: sltu ; op1:x3; op2:x10; dest:x5; op1val:18446744073709551359;  op2val:2097152
TEST_RR_OP(sltu, x5, x3, x10, 0x0, 18446744073709551359, 2097152, x1, 96, x7)

inst_28:
// rs1==x12, rs2==x2, rd==x3, rs2_val == 4194304, rs1_val == 18446744073709543423
// opcode: sltu ; op1:x12; op2:x2; dest:x3; op1val:18446744073709543423;  op2val:4194304
TEST_RR_OP(sltu, x3, x12, x2, 0x0, 18446744073709543423, 4194304, x1, 104, x7)

inst_29:
// rs1==x5, rs2==x6, rd==x4, rs2_val == 8388608, rs1_val == 18446744073709535231
// opcode: sltu ; op1:x5; op2:x6; dest:x4; op1val:18446744073709535231;  op2val:8388608
TEST_RR_OP(sltu, x4, x5, x6, 0x0, 18446744073709535231, 8388608, x1, 112, x7)

inst_30:
// rs1==x28, rs2==x27, rd==x0, rs2_val == 16777216, 
// opcode: sltu ; op1:x28; op2:x27; dest:x0; op1val:3037000500;  op2val:16777216
TEST_RR_OP(sltu, x0, x28, x27, 0x0, 3037000500, 16777216, x1, 120, x7)

inst_31:
// rs1==x0, rs2==x18, rd==x24, rs2_val == 33554432, rs1_val == 8
// opcode: sltu ; op1:x0; op2:x18; dest:x24; op1val:8;  op2val:33554432
TEST_RR_OP(sltu, x24, x0, x18, 0x1, 8, 33554432, x1, 128, x7)

inst_32:
// rs2_val == 67108864, rs1_val == 18446744065119617023
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744065119617023;  op2val:67108864
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744065119617023, 67108864, x1, 136, x7)

inst_33:
// rs2_val == 134217728, rs1_val == 4294967296
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:134217728
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 134217728, x1, 144, x7)

inst_34:
// rs2_val == 268435456, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709550591;  op2val:268435456
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709550591, 268435456, x1, 152, x7)

inst_35:
// rs2_val == 536870912, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:536870912
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8, 536870912, x1, 160, x7)

inst_36:
// rs2_val == 1073741824, rs1_val == 18446708889337462783
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446708889337462783;  op2val:1073741824
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446708889337462783, 1073741824, x1, 168, x7)

inst_37:
// rs2_val == 2147483648, rs1_val == 17870283321406128127
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17870283321406128127;  op2val:2147483648
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 17870283321406128127, 2147483648, x1, 176, x7)

inst_38:
// rs2_val == 4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:11;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 11, 4294967296, x1, 184, x7)

inst_39:
// rs2_val == 8589934592, rs1_val == 68719476736
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:8589934592
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 68719476736, 8589934592, x1, 192, x7)

inst_40:
// rs2_val == 17179869184, rs1_val == 18446744073701163007
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073701163007;  op2val:17179869184
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073701163007, 17179869184, x1, 200, x7)

inst_41:
// rs2_val == 34359738368, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073675997183;  op2val:34359738368
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073675997183, 34359738368, x1, 208, x7)

inst_42:
// rs2_val == 68719476736, rs1_val == 18445618173802708991
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18445618173802708991;  op2val:68719476736
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18445618173802708991, 68719476736, x1, 216, x7)

inst_43:
// rs2_val == 137438953472, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:137438953472
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 137438953472, x1, 224, x7)

inst_44:
// rs2_val == 274877906944, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:274877906944
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 274877906944, x1, 232, x7)

inst_45:
// rs2_val == 549755813888, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:549755813888
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 549755813888, x1, 240, x7)

inst_46:
// rs2_val == 1099511627776, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:1099511627776
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 1099511627776, x1, 248, x7)

inst_47:
// rs2_val == 2199023255552, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:2199023255552
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 2199023255552, x1, 256, x7)

inst_48:
// rs2_val == 4398046511104, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17870283321406128127;  op2val:4398046511104
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 17870283321406128127, 4398046511104, x1, 264, x7)

inst_49:
// rs2_val == 8796093022208, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:8796093022208
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7, 8796093022208, x1, 272, x7)

inst_50:
// rs2_val == 17592186044416, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:17592186044416
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 17592186044416, x1, 280, x7)

inst_51:
// rs2_val == 35184372088832, rs1_val == 18446744073709551613
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551613;  op2val:35184372088832
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551613, 35184372088832, x1, 288, x7)

inst_52:
// rs2_val == 70368744177664, rs1_val == 18446743523953737727
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743523953737727;  op2val:70368744177664
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446743523953737727, 70368744177664, x1, 296, x7)

inst_53:
// rs2_val == 140737488355328, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:140737488355328
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 140737488355328, x1, 304, x7)

inst_54:
// rs2_val == 281474976710656, rs1_val == 34359738368
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:281474976710656
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 34359738368, 281474976710656, x1, 312, x7)

inst_55:
// rs2_val == 562949953421312, rs1_val == 18446744073709551487
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551487;  op2val:562949953421312
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551487, 562949953421312, x1, 320, x7)

inst_56:
// rs2_val == 2251799813685248, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:2251799813685248
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 140737488355328, 2251799813685248, x1, 328, x7)

inst_57:
// rs2_val == 4503599627370496, rs1_val == 8388608
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:4503599627370496
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8388608, 4503599627370496, x1, 336, x7)

inst_58:
// rs2_val == 9007199254740992, rs1_val == 18446744073709549567
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709549567;  op2val:9007199254740992
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709549567, 9007199254740992, x1, 344, x7)

inst_59:
// rs2_val == 18014398509481984, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551359;  op2val:18014398509481984
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551359, 18014398509481984, x1, 352, x7)

inst_60:
// rs2_val == 36028797018963968, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:36028797018963968
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 274877906944, 36028797018963968, x1, 360, x7)

inst_61:
// rs2_val == 72057594037927936, rs1_val == 1073741824
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:72057594037927936
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1073741824, 72057594037927936, x1, 368, x7)

inst_62:
// rs2_val == 144115188075855872, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073675997183;  op2val:144115188075855872
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073675997183, 144115188075855872, x1, 376, x7)

inst_63:
// rs2_val == 288230376151711744, rs1_val == 18428729675200069631
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18428729675200069631;  op2val:288230376151711744
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18428729675200069631, 288230376151711744, x1, 384, x7)

inst_64:
// rs2_val == 576460752303423488, rs1_val == 4
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:576460752303423488
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 576460752303423488, x1, 392, x7)

inst_65:
// rs2_val == 1152921504606846976, rs1_val == 32768
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:32768;  op2val:1152921504606846976
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 32768, 1152921504606846976, x1, 400, x7)

inst_66:
// rs2_val == 2305843009213693952, rs1_val == 32
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:2305843009213693952
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 32, 2305843009213693952, x1, 408, x7)

inst_67:
// rs2_val == 4611686018427387904, rs1_val == 18302628885633695743
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18302628885633695743;  op2val:4611686018427387904
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18302628885633695743, 4611686018427387904, x1, 416, x7)

inst_68:
// rs2_val == 9223372036854775808, rs1_val == 13835058055282163711
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:13835058055282163711;  op2val:9223372036854775808
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 13835058055282163711, 9223372036854775808, x1, 424, x7)

inst_69:
// rs2_val == 18446744073709551614, rs1_val == 16384
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:18446744073709551614
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 16384, 18446744073709551614, x1, 432, x7)

inst_70:
// rs2_val == 18446744073709551613, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:18446744073709551613
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 68719476736, 18446744073709551613, x1, 440, x7)

inst_71:
// rs2_val == 18446744073709551611, rs1_val == 70368744177664
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:18446744073709551611
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 70368744177664, 18446744073709551611, x1, 448, x7)

inst_72:
// rs2_val == 18446744073709551607, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709535231;  op2val:18446744073709551607
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744073709535231, 18446744073709551607, x1, 456, x7)

inst_73:
// rs2_val == 18446744073709551599, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:18446744073709551599
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 18446744073709551599, x1, 464, x7)

inst_74:
// rs2_val == 18446744073709551583, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:18446744073709551583
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 18446744073709551583, x1, 472, x7)

inst_75:
// rs2_val == 18446744073709551551, rs1_val == 18446743798831644671
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743798831644671;  op2val:18446744073709551551
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446743798831644671, 18446744073709551551, x1, 480, x7)

inst_76:
// rs2_val == 18446744073709551487, rs1_val == 262144
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:18446744073709551487
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 262144, 18446744073709551487, x1, 488, x7)

inst_77:
// rs2_val == 18446744073709551359, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:18446744073709551359
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 18446744073709551359, x1, 496, x7)

inst_78:
// rs2_val == 18446744073709551103, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:18446744073709551103
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 18446744073709551103, x1, 504, x7)

inst_79:
// rs2_val == 18446744073709550591, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744004990074879;  op2val:18446744073709550591
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744004990074879, 18446744073709550591, x1, 512, x7)

inst_80:
// rs2_val == 18446744073709549567, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:18446744073709549567
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 18446744073709549567, x1, 520, x7)

inst_81:
// rs2_val == 18446744073709547519, rs1_val == 18446744073709551599
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551599;  op2val:18446744073709547519
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551599, 18446744073709547519, x1, 528, x7)

inst_82:
// rs2_val == 18446744073709543423, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:13;  op2val:18446744073709543423
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 13, 18446744073709543423, x1, 536, x7)

inst_83:
// rs2_val == 18446744073709535231, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:18446744073709535231
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1073741824, 18446744073709535231, x1, 544, x7)

inst_84:
// rs2_val == 18446744073709518847, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:18446744073709518847
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820646, 18446744073709518847, x1, 552, x7)

inst_85:
// rs2_val == 18446744073709486079, rs1_val == 8192
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:18446744073709486079
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8192, 18446744073709486079, x1, 560, x7)

inst_86:
// rs2_val == 18446744073709420543, rs1_val == 18446744073709518847
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709518847;  op2val:18446744073709420543
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709518847, 18446744073709420543, x1, 568, x7)

inst_87:
// rs2_val == 18446744073709289471, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:18446744073709289471
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4194304, 18446744073709289471, x1, 576, x7)

inst_88:
// rs2_val == 18446744073709027327, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709550591;  op2val:18446744073709027327
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709550591, 18446744073709027327, x1, 584, x7)

inst_89:
// rs2_val == 18446744073708503039, rs1_val == 18446744073709486079
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709486079;  op2val:18446744073708503039
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709486079, 18446744073708503039, x1, 592, x7)

inst_90:
// rs2_val == 18446744073707454463, rs1_val == 576460752303423488
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:18446744073707454463
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 576460752303423488, 18446744073707454463, x1, 600, x7)

inst_91:
// rs2_val == 18446744073705357311, rs1_val == 137438953472
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:18446744073705357311
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 137438953472, 18446744073705357311, x1, 608, x7)

inst_92:
// rs2_val == 18446744073701163007, rs1_val == 17592186044416
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:18446744073701163007
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 17592186044416, 18446744073701163007, x1, 616, x7)

inst_93:
// rs2_val == 18446744073692774399, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:18446744073692774399
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 18446744073692774399, x1, 624, x7)

inst_94:
// rs2_val == 18446744073642442751, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:13835058055282163711;  op2val:18446744073642442751
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 13835058055282163711, 18446744073642442751, x1, 632, x7)

inst_95:
// rs2_val == 18446744073575333887, rs1_val == 9223372036854775808
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775808;  op2val:18446744073575333887
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 9223372036854775808, 18446744073575333887, x1, 640, x7)

inst_96:
// rs2_val == 18446744073441116159, rs1_val == 256
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:256;  op2val:18446744073441116159
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 256, 18446744073441116159, x1, 648, x7)

inst_97:
// rs2_val == 18446744073172680703, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:18446744073172680703
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8192, 18446744073172680703, x1, 656, x7)

inst_98:
// rs2_val == 18446744072635809791, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:18446744072635809791
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 137438953472, 18446744072635809791, x1, 664, x7)

inst_99:
// rs2_val == 18446744071562067967, rs1_val == 16
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:18446744071562067967
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 16, 18446744071562067967, x1, 672, x7)

inst_100:
// rs2_val == 18446744069414584319, rs1_val == 18446462598732840959
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446462598732840959;  op2val:18446744069414584319
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446462598732840959, 18446744069414584319, x1, 680, x7)

inst_101:
// rs2_val == 18446744065119617023, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:18446744065119617023
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 18446744065119617023, x1, 688, x7)

inst_102:
// rs2_val == 18446744056529682431, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551487;  op2val:18446744056529682431
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551487, 18446744056529682431, x1, 696, x7)

inst_103:
// rs2_val == 18446744039349813247, rs1_val == 18446744073709551611
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551611;  op2val:18446744039349813247
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551611, 18446744039349813247, x1, 704, x7)

inst_104:
// rs2_val == 18446744004990074879, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073441116159;  op2val:18446744004990074879
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073441116159, 18446744004990074879, x1, 712, x7)

inst_105:
// rs2_val == 18446743936270598143, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18158513697557839871;  op2val:18446743936270598143
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18158513697557839871, 18446743936270598143, x1, 720, x7)

inst_106:
// rs2_val == 18446743798831644671, rs1_val == 281474976710656
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:18446743798831644671
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 281474976710656, 18446743798831644671, x1, 728, x7)

inst_107:
// rs2_val == 18446743523953737727, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446708889337462783;  op2val:18446743523953737727
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446708889337462783, 18446743523953737727, x1, 736, x7)

inst_108:
// rs2_val == 18446742974197923839, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:18446742974197923839
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820645, 18446742974197923839, x1, 744, x7)

inst_109:
// rs2_val == 18446741874686296063, rs1_val == 18446743936270598143
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743936270598143;  op2val:18446741874686296063
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446743936270598143, 18446741874686296063, x1, 752, x7)

inst_110:
// rs2_val == 18446739675663040511, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744004990074879;  op2val:18446739675663040511
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744004990074879, 18446739675663040511, x1, 760, x7)

inst_111:
// rs2_val == 18446735277616529407, rs1_val == 33554432
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:18446735277616529407
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 33554432, 18446735277616529407, x1, 768, x7)

inst_112:
// rs2_val == 18446726481523507199, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:18446726481523507199
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 18446726481523507199, x1, 776, x7)

inst_113:
// rs2_val == 18446708889337462783, rs1_val == 18446744073709551607
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551607;  op2val:18446708889337462783
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551607, 18446708889337462783, x1, 784, x7)

inst_114:
// rs2_val == 18446673704965373951, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18444492273895866367;  op2val:18446673704965373951
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18444492273895866367, 18446673704965373951, x1, 792, x7)

inst_115:
// rs2_val == 18446603336221196287, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:18446603336221196287
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 18446603336221196287, x1, 800, x7)

inst_116:
// rs2_val == 18446462598732840959, rs1_val == 134217728
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:18446462598732840959
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 134217728, 18446462598732840959, x1, 808, x7)

inst_117:
// rs2_val == 18446181123756130303, rs1_val == 8589934592
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:18446181123756130303
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8589934592, 18446181123756130303, x1, 816, x7)

inst_118:
// rs2_val == 18445618173802708991, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:18445618173802708991
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 18445618173802708991, x1, 824, x7)

inst_119:
// rs2_val == 18444492273895866367, rs1_val == 2
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:18444492273895866367
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 18444492273895866367, x1, 832, x7)

inst_120:
// rs2_val == 18442240474082181119, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:18442240474082181119
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 262144, 18442240474082181119, x1, 840, x7)

inst_121:
// rs2_val == 18437736874454810623, rs1_val == 1125899906842624
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:18437736874454810623
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1125899906842624, 18437736874454810623, x1, 848, x7)

inst_122:
// rs2_val == 18428729675200069631, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073675997183;  op2val:18428729675200069631
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073675997183, 18428729675200069631, x1, 856, x7)

inst_123:
// rs2_val == 18410715276690587647, rs1_val == 18446744073692774399
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073692774399;  op2val:18410715276690587647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073692774399, 18410715276690587647, x1, 864, x7)

inst_124:
// rs2_val == 18374686479671623679, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073172680703;  op2val:18374686479671623679
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073172680703, 18374686479671623679, x1, 872, x7)

inst_125:
// rs2_val == 18302628885633695743, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709549567;  op2val:18302628885633695743
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709549567, 18302628885633695743, x1, 880, x7)

inst_126:
// rs2_val == 18158513697557839871, rs1_val == 65536
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:18158513697557839871
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 65536, 18158513697557839871, x1, 888, x7)

inst_127:
// rs2_val == 17870283321406128127, rs1_val == 144115188075855872
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:17870283321406128127
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 144115188075855872, 17870283321406128127, x1, 896, x7)

inst_128:
// rs2_val == 17293822569102704639, rs1_val == 4096
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4096;  op2val:17293822569102704639
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4096, 17293822569102704639, x1, 904, x7)

inst_129:
// rs2_val == 16140901064495857663, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18442240474082181119;  op2val:16140901064495857663
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18442240474082181119, 16140901064495857663, x1, 912, x7)

inst_130:
// rs2_val == 13835058055282163711, rs1_val == 9223372036854775807
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:13835058055282163711
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 9223372036854775807, 13835058055282163711, x1, 920, x7)

inst_131:
// rs2_val == 6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709550591;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709550591, 6148914691236517205, x1, 928, x7)

inst_132:
// rs2_val == 12297829382473034410, rs1_val == 18446744073707454463
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073707454463;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073707454463, 12297829382473034410, x1, 936, x7)

inst_133:
// rs1_val == 64, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:64;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 64, 12297829382473034410, x1, 944, x7)

inst_134:
// rs1_val == 128, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:128;  op2val:8796093022208
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 128, 8796093022208, x1, 952, x7)

inst_135:
// rs1_val == 512, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:18446744073709027327
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 512, 18446744073709027327, x1, 960, x7)

inst_136:
// rs1_val == 1024, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:18446744073692774399
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1024, 18446744073692774399, x1, 968, x7)

inst_137:
// rs1_val == 2048, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2048, 3689348814741910324, x1, 976, x7)

inst_138:
// rs1_val == 131072, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:65536
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 131072, 65536, x1, 984, x7)

inst_139:
// rs1_val == 524288, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:512
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 524288, 512, x1, 992, x7)

inst_140:
// rs1_val == 1048576, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1048576, 12297829382473034410, x1, 1000, x7)

inst_141:
// rs1_val == 16777216, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:4503599627370496
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 16777216, 4503599627370496, x1, 1008, x7)

inst_142:
// rs1_val == 67108864, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:18446744073709551583
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 67108864, 18446744073709551583, x1, 1016, x7)

inst_143:
// rs1_val == 536870912, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:16140901064495857663
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 536870912, 16140901064495857663, x1, 1024, x7)

inst_144:
// rs1_val == 2147483648, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2147483648, 3037000498, x1, 1032, x7)

inst_145:
// rs1_val == 549755813888, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:13835058055282163711
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 549755813888, 13835058055282163711, x1, 1040, x7)

inst_146:
// rs1_val == 1099511627776, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1099511627776, 4, x1, 1048, x7)

inst_147:
// rs1_val == 2199023255552, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:18446744073709551359
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2199023255552, 18446744073709551359, x1, 1056, x7)

inst_148:
// rs1_val == 4398046511104, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:18446735277616529407
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4398046511104, 18446735277616529407, x1, 1064, x7)

inst_149:
// rs1_val == 8796093022208, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:18437736874454810623
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8796093022208, 18437736874454810623, x1, 1072, x7)

inst_150:
// rs1_val == 35184372088832, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 35184372088832, 5, x1, 1080, x7)

inst_151:
// rs1_val == 562949953421312, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:9007199254740992
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 562949953421312, 9007199254740992, x1, 1088, x7)

inst_152:
// rs1_val == 2251799813685248, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:512
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2251799813685248, 512, x1, 1096, x7)

inst_153:
// rs1_val == 4503599627370496, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:4611686018427387904
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4503599627370496, 4611686018427387904, x1, 1104, x7)

inst_154:
// rs1_val == 9007199254740992, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:18446744073692774399
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 9007199254740992, 18446744073692774399, x1, 1112, x7)

inst_155:
// rs1_val == 18014398509481984, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:18446741874686296063
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18014398509481984, 18446741874686296063, x1, 1120, x7)

inst_156:
// rs1_val == 36028797018963968, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:1073741824
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 36028797018963968, 1073741824, x1, 1128, x7)

inst_157:
// rs1_val == 72057594037927936, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 72057594037927936, 0, x1, 1136, x7)

inst_158:
// rs1_val == 288230376151711744, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:1073741824
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 288230376151711744, 1073741824, x1, 1144, x7)

inst_159:
// rs1_val == 1152921504606846976, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:140737488355328
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1152921504606846976, 140737488355328, x1, 1152, x7)

inst_160:
// rs1_val == 2305843009213693952, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:262144
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2305843009213693952, 262144, x1, 1160, x7)

inst_161:
// rs1_val == 4611686018427387904, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:16384
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4611686018427387904, 16384, x1, 1168, x7)

inst_162:
// rs1_val == 18446744073709551614, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551614;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551614, 7378697629483820646, x1, 1176, x7)

inst_163:
// rs1_val == 18446744073709551583, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551583;  op2val:18446744073709551103
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551583, 18446744073709551103, x1, 1184, x7)

inst_164:
// rs1_val == 18446744073709551551, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551551;  op2val:9223372036854775807
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551551, 9223372036854775807, x1, 1192, x7)

inst_165:
// rs1_val == 18446744073709551103, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551103;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551103, 3, x1, 1200, x7)

inst_166:
// rs1_val == 18446744073709420543, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709420543;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709420543, 3037000499, x1, 1208, x7)

inst_167:
// rs1_val == 18446744073708503039, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073708503039;  op2val:18446726481523507199
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073708503039, 18446726481523507199, x1, 1216, x7)

inst_168:
// rs1_val == 18446744073705357311, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073705357311;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073705357311, 3, x1, 1224, x7)

inst_169:
// rs1_val == 18446744073642442751, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073642442751;  op2val:18446708889337462783
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073642442751, 18446708889337462783, x1, 1232, x7)

inst_170:
// rs1_val == 18446744073575333887, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073575333887;  op2val:18444492273895866367
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073575333887, 18444492273895866367, x1, 1240, x7)

inst_171:
// rs1_val == 18446744072635809791, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744072635809791;  op2val:274877906944
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744072635809791, 274877906944, x1, 1248, x7)

inst_172:
// rs1_val == 18446744069414584319, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744069414584319;  op2val:18444492273895866367
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744069414584319, 18444492273895866367, x1, 1256, x7)

inst_173:
// rs1_val == 18446744056529682431, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744056529682431;  op2val:134217728
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744056529682431, 134217728, x1, 1264, x7)

inst_174:
// rs1_val == 18446744039349813247, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744039349813247;  op2val:128
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744039349813247, 128, x1, 1272, x7)

inst_175:
// rs1_val == 18446742974197923839, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446742974197923839;  op2val:16384
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446742974197923839, 16384, x1, 1280, x7)

inst_176:
// rs1_val == 18446739675663040511, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446739675663040511;  op2val:34359738368
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446739675663040511, 34359738368, x1, 1288, x7)

inst_177:
// rs1_val == 18446735277616529407, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446735277616529407;  op2val:18446744073709543423
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446735277616529407, 18446744073709543423, x1, 1296, x7)

inst_178:
// rs1_val == 18446726481523507199, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446726481523507199;  op2val:18446603336221196287
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446726481523507199, 18446603336221196287, x1, 1304, x7)

inst_179:
// rs1_val == 18446673704965373951, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446673704965373951;  op2val:137438953472
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446673704965373951, 137438953472, x1, 1312, x7)

inst_180:
// rs1_val == 18446603336221196287, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446603336221196287;  op2val:18442240474082181119
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446603336221196287, 18442240474082181119, x1, 1320, x7)

inst_181:
// rs1_val == 18446181123756130303, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446181123756130303;  op2val:33554432
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446181123756130303, 33554432, x1, 1328, x7)

inst_182:
// rs1_val == 18437736874454810623, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18437736874454810623;  op2val:18446744073709551614
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18437736874454810623, 18446744073709551614, x1, 1336, x7)

inst_183:
// rs1_val == 18410715276690587647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18410715276690587647;  op2val:8
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18410715276690587647, 8, x1, 1344, x7)

inst_184:
// rs1_val == 17293822569102704639, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17293822569102704639;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 17293822569102704639, 6148914691236517204, x1, 1352, x7)

inst_185:
// rs1_val == 16140901064495857663, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:16140901064495857663;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 16140901064495857663, 12297829382473034410, x1, 1360, x7)

inst_186:
// rs1_val == 12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:18446744072635809791
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 12297829382473034410, 18446744072635809791, x1, 1368, x7)

inst_187:
// rs1_val==3 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3, 3, x1, 1376, x7)

inst_188:
// rs1_val==3 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 6148914691236517205, x1, 1384, x7)

inst_189:
// rs1_val==3 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 12297829382473034410, x1, 1392, x7)

inst_190:
// rs1_val==3 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 5, x1, 1400, x7)

inst_191:
// rs1_val==3 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 3689348814741910323, x1, 1408, x7)

inst_192:
// rs1_val==3 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 7378697629483820646, x1, 1416, x7)

inst_193:
// rs1_val==3 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 3037000499, x1, 1424, x7)

inst_194:
// rs1_val==3 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3, 0, x1, 1432, x7)

inst_195:
// rs1_val==3 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 4294967296, x1, 1440, x7)

inst_196:
// rs1_val==3 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3, 2, x1, 1448, x7)

inst_197:
// rs1_val==3 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 6148914691236517204, x1, 1456, x7)

inst_198:
// rs1_val==3 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 12297829382473034409, x1, 1464, x7)

inst_199:
// rs1_val==3 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 4, x1, 1472, x7)

inst_200:
// rs1_val==3 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 3689348814741910322, x1, 1480, x7)

inst_201:
// rs1_val==3 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 7378697629483820645, x1, 1488, x7)

inst_202:
// rs1_val==3 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 3037000498, x1, 1496, x7)

inst_203:
// rs1_val==3 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 4294967295, x1, 1504, x7)

inst_204:
// rs1_val==3 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 6148914691236517206, x1, 1512, x7)

inst_205:
// rs1_val==3 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 12297829382473034411, x1, 1520, x7)

inst_206:
// rs1_val==3 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 6, x1, 1528, x7)

inst_207:
// rs1_val==3 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 3689348814741910324, x1, 1536, x7)

inst_208:
// rs1_val==3 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 7378697629483820647, x1, 1544, x7)

inst_209:
// rs1_val==3 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 3037000500, x1, 1552, x7)

inst_210:
// rs1_val==3 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3, 1, x1, 1560, x7)

inst_211:
// rs1_val==3 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 4294967297, x1, 1568, x7)

inst_212:
// rs1_val==6148914691236517205 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 3, x1, 1576, x7)

inst_213:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 6148914691236517205, x1, 1584, x7)

inst_214:
// rs1_val==6148914691236517205 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 12297829382473034410, x1, 1592, x7)

inst_215:
// rs1_val==6148914691236517205 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 5, x1, 1600, x7)

inst_216:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 3689348814741910323, x1, 1608, x7)

inst_217:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 7378697629483820646, x1, 1616, x7)

inst_218:
// rs1_val==6148914691236517205 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 3037000499, x1, 1624, x7)

inst_219:
// rs1_val==6148914691236517205 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 0, x1, 1632, x7)

inst_220:
// rs1_val==6148914691236517205 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 4294967296, x1, 1640, x7)

inst_221:
// rs1_val==6148914691236517205 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 2, x1, 1648, x7)

inst_222:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 6148914691236517204, x1, 1656, x7)

inst_223:
// rs1_val==6148914691236517205 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 12297829382473034409, x1, 1664, x7)

inst_224:
// rs1_val==6148914691236517205 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 4, x1, 1672, x7)

inst_225:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 3689348814741910322, x1, 1680, x7)

inst_226:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 7378697629483820645, x1, 1688, x7)

inst_227:
// rs1_val==6148914691236517205 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 3037000498, x1, 1696, x7)

inst_228:
// rs1_val==6148914691236517205 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 4294967295, x1, 1704, x7)

inst_229:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 6148914691236517206, x1, 1712, x7)

inst_230:
// rs1_val==6148914691236517205 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 12297829382473034411, x1, 1720, x7)

inst_231:
// rs1_val==6148914691236517205 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 6, x1, 1728, x7)

inst_232:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 3689348814741910324, x1, 1736, x7)

inst_233:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 7378697629483820647, x1, 1744, x7)

inst_234:
// rs1_val==6148914691236517205 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 3037000500, x1, 1752, x7)

inst_235:
// rs1_val==6148914691236517205 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 1, x1, 1760, x7)

inst_236:
// rs1_val==6148914691236517205 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517205, 4294967297, x1, 1768, x7)

inst_237:
// rs1_val==12297829382473034410 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 3, x1, 1776, x7)

inst_238:
// rs1_val==12297829382473034410 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 6148914691236517205, x1, 1784, x7)

inst_239:
// rs1_val==12297829382473034410 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 12297829382473034410, x1, 1792, x7)

inst_240:
// rs1_val==12297829382473034410 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 5, x1, 1800, x7)

inst_241:
// rs1_val==12297829382473034410 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 3689348814741910323, x1, 1808, x7)

inst_242:
// rs1_val==12297829382473034410 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 7378697629483820646, x1, 1816, x7)

inst_243:
// rs1_val==12297829382473034410 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 3037000499, x1, 1824, x7)

inst_244:
// rs1_val==12297829382473034410 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 0, x1, 1832, x7)

inst_245:
// rs1_val==12297829382473034410 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 4294967296, x1, 1840, x7)

inst_246:
// rs1_val==12297829382473034410 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 2, x1, 1848, x7)

inst_247:
// rs1_val==12297829382473034410 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 6148914691236517204, x1, 1856, x7)

inst_248:
// rs1_val==12297829382473034410 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 12297829382473034409, x1, 1864, x7)

inst_249:
// rs1_val==12297829382473034410 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 4, x1, 1872, x7)

inst_250:
// rs1_val==12297829382473034410 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 3689348814741910322, x1, 1880, x7)

inst_251:
// rs1_val==12297829382473034410 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 7378697629483820645, x1, 1888, x7)

inst_252:
// rs1_val==12297829382473034410 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 3037000498, x1, 1896, x7)

inst_253:
// rs1_val==12297829382473034410 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 4294967295, x1, 1904, x7)

inst_254:
// rs1_val==12297829382473034410 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 6148914691236517206, x1, 1912, x7)

inst_255:
// rs1_val==12297829382473034410 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 12297829382473034410, 12297829382473034411, x1, 1920, x7)

inst_256:
// rs1_val==12297829382473034410 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 6, x1, 1928, x7)

inst_257:
// rs1_val==12297829382473034410 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 3689348814741910324, x1, 1936, x7)

inst_258:
// rs1_val==12297829382473034410 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 7378697629483820647, x1, 1944, x7)

inst_259:
// rs1_val==12297829382473034410 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 3037000500, x1, 1952, x7)

inst_260:
// rs1_val==12297829382473034410 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 1, x1, 1960, x7)

inst_261:
// rs1_val==12297829382473034410 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034410, 4294967297, x1, 1968, x7)

inst_262:
// rs1_val==5 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 5, 3, x1, 1976, x7)

inst_263:
// rs1_val==5 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 6148914691236517205, x1, 1984, x7)

inst_264:
// rs1_val==5 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 12297829382473034410, x1, 1992, x7)

inst_265:
// rs1_val==5 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 5, 5, x1, 2000, x7)

inst_266:
// rs1_val==5 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 3689348814741910323, x1, 2008, x7)

inst_267:
// rs1_val==5 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 7378697629483820646, x1, 2016, x7)

inst_268:
// rs1_val==5 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 3037000499, x1, 2024, x7)

inst_269:
// rs1_val==5 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 5, 0, x1, 2032, x7)

inst_270:
// rs1_val==5 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 4294967296, x1, 2040, x7)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_271:
// rs1_val==5 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 5, 2, x1, 0, x7)

inst_272:
// rs1_val==5 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 6148914691236517204, x1, 8, x7)

inst_273:
// rs1_val==5 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 12297829382473034409, x1, 16, x7)

inst_274:
// rs1_val==5 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 5, 4, x1, 24, x7)

inst_275:
// rs1_val==5 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 3689348814741910322, x1, 32, x7)

inst_276:
// rs1_val==5 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 7378697629483820645, x1, 40, x7)

inst_277:
// rs1_val==5 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 3037000498, x1, 48, x7)

inst_278:
// rs1_val==5 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 4294967295, x1, 56, x7)

inst_279:
// rs1_val==5 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 6148914691236517206, x1, 64, x7)

inst_280:
// rs1_val==5 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 12297829382473034411, x1, 72, x7)

inst_281:
// rs1_val==5 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 6, x1, 80, x7)

inst_282:
// rs1_val==5 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 3689348814741910324, x1, 88, x7)

inst_283:
// rs1_val==5 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 7378697629483820647, x1, 96, x7)

inst_284:
// rs1_val==5 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 3037000500, x1, 104, x7)

inst_285:
// rs1_val==5 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 5, 1, x1, 112, x7)

inst_286:
// rs1_val==5 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 4294967297, x1, 120, x7)

inst_287:
// rs1_val==3689348814741910323 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 3, x1, 128, x7)

inst_288:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 6148914691236517205, x1, 136, x7)

inst_289:
// rs1_val==3689348814741910323 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 12297829382473034410, x1, 144, x7)

inst_290:
// rs1_val==3689348814741910323 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 5, x1, 152, x7)

inst_291:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 3689348814741910323, x1, 160, x7)

inst_292:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 7378697629483820646, x1, 168, x7)

inst_293:
// rs1_val==3689348814741910323 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 3037000499, x1, 176, x7)

inst_294:
// rs1_val==3689348814741910323 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 0, x1, 184, x7)

inst_295:
// rs1_val==3689348814741910323 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 4294967296, x1, 192, x7)

inst_296:
// rs1_val==3689348814741910323 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 2, x1, 200, x7)

inst_297:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 6148914691236517204, x1, 208, x7)

inst_298:
// rs1_val==3689348814741910323 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 12297829382473034409, x1, 216, x7)

inst_299:
// rs1_val==3689348814741910323 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 4, x1, 224, x7)

inst_300:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 3689348814741910322, x1, 232, x7)

inst_301:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 7378697629483820645, x1, 240, x7)

inst_302:
// rs1_val==3689348814741910323 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 3037000498, x1, 248, x7)

inst_303:
// rs1_val==3689348814741910323 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 4294967295, x1, 256, x7)

inst_304:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 6148914691236517206, x1, 264, x7)

inst_305:
// rs1_val==3689348814741910323 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 12297829382473034411, x1, 272, x7)

inst_306:
// rs1_val==3689348814741910323 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 6, x1, 280, x7)

inst_307:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 3689348814741910324, x1, 288, x7)

inst_308:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910323, 7378697629483820647, x1, 296, x7)

inst_309:
// rs1_val==3689348814741910323 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 3037000500, x1, 304, x7)

inst_310:
// rs1_val==3689348814741910323 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 1, x1, 312, x7)

inst_311:
// rs1_val==3689348814741910323 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910323, 4294967297, x1, 320, x7)

inst_312:
// rs1_val==7378697629483820646 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 3, x1, 328, x7)

inst_313:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 6148914691236517205, x1, 336, x7)

inst_314:
// rs1_val==7378697629483820646 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820646, 12297829382473034410, x1, 344, x7)

inst_315:
// rs1_val==7378697629483820646 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 5, x1, 352, x7)

inst_316:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 3689348814741910323, x1, 360, x7)

inst_317:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 7378697629483820646, x1, 368, x7)

inst_318:
// rs1_val==7378697629483820646 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 3037000499, x1, 376, x7)

inst_319:
// rs1_val==7378697629483820646 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 0, x1, 384, x7)

inst_320:
// rs1_val==7378697629483820646 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 4294967296, x1, 392, x7)

inst_321:
// rs1_val==7378697629483820646 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 2, x1, 400, x7)

inst_322:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 6148914691236517204, x1, 408, x7)

inst_323:
// rs1_val==7378697629483820646 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820646, 12297829382473034409, x1, 416, x7)

inst_324:
// rs1_val==7378697629483820646 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 4, x1, 424, x7)

inst_325:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 3689348814741910322, x1, 432, x7)

inst_326:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 7378697629483820645, x1, 440, x7)

inst_327:
// rs1_val==7378697629483820646 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 3037000498, x1, 448, x7)

inst_328:
// rs1_val==7378697629483820646 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 4294967295, x1, 456, x7)

inst_329:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 6148914691236517206, x1, 464, x7)

inst_330:
// rs1_val==7378697629483820646 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820646, 12297829382473034411, x1, 472, x7)

inst_331:
// rs1_val==7378697629483820646 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 6, x1, 480, x7)

inst_332:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 3689348814741910324, x1, 488, x7)

inst_333:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820646, 7378697629483820647, x1, 496, x7)

inst_334:
// rs1_val==7378697629483820646 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 3037000500, x1, 504, x7)

inst_335:
// rs1_val==7378697629483820646 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 1, x1, 512, x7)

inst_336:
// rs1_val==7378697629483820646 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820646, 4294967297, x1, 520, x7)

inst_337:
// rs1_val==3037000499 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 3, x1, 528, x7)

inst_338:
// rs1_val==3037000499 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 6148914691236517205, x1, 536, x7)

inst_339:
// rs1_val==3037000499 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 12297829382473034410, x1, 544, x7)

inst_340:
// rs1_val==3037000499 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 5, x1, 552, x7)

inst_341:
// rs1_val==3037000499 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 3689348814741910323, x1, 560, x7)

inst_342:
// rs1_val==3037000499 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 7378697629483820646, x1, 568, x7)

inst_343:
// rs1_val==3037000499 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 3037000499, x1, 576, x7)

inst_344:
// rs1_val==3037000499 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 0, x1, 584, x7)

inst_345:
// rs1_val==3037000499 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 4294967296, x1, 592, x7)

inst_346:
// rs1_val==3037000499 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 2, x1, 600, x7)

inst_347:
// rs1_val==3037000499 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 6148914691236517204, x1, 608, x7)

inst_348:
// rs1_val==3037000499 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 12297829382473034409, x1, 616, x7)

inst_349:
// rs1_val==3037000499 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 4, x1, 624, x7)

inst_350:
// rs1_val==3037000499 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 3689348814741910322, x1, 632, x7)

inst_351:
// rs1_val==3037000499 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 7378697629483820645, x1, 640, x7)

inst_352:
// rs1_val==3037000499 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 3037000498, x1, 648, x7)

inst_353:
// rs1_val==3037000499 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 4294967295, x1, 656, x7)

inst_354:
// rs1_val==3037000499 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 6148914691236517206, x1, 664, x7)

inst_355:
// rs1_val==3037000499 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 12297829382473034411, x1, 672, x7)

inst_356:
// rs1_val==3037000499 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 6, x1, 680, x7)

inst_357:
// rs1_val==3037000499 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 3689348814741910324, x1, 688, x7)

inst_358:
// rs1_val==3037000499 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 7378697629483820647, x1, 696, x7)

inst_359:
// rs1_val==3037000499 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 3037000500, x1, 704, x7)

inst_360:
// rs1_val==3037000499 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000499, 1, x1, 712, x7)

inst_361:
// rs1_val==3037000499 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000499, 4294967297, x1, 720, x7)

inst_362:
// rs1_val==0 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 3, x1, 728, x7)

inst_363:
// rs1_val==0 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 6148914691236517205, x1, 736, x7)

inst_364:
// rs1_val==0 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 12297829382473034410, x1, 744, x7)

inst_365:
// rs1_val==0 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 5, x1, 752, x7)

inst_366:
// rs1_val==0 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 3689348814741910323, x1, 760, x7)

inst_367:
// rs1_val==0 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 7378697629483820646, x1, 768, x7)

inst_368:
// rs1_val==0 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 3037000499, x1, 776, x7)

inst_369:
// rs1_val==0 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 0, 0, x1, 784, x7)

inst_370:
// rs1_val==0 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 4294967296, x1, 792, x7)

inst_371:
// rs1_val==0 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 2, x1, 800, x7)

inst_372:
// rs1_val==0 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 6148914691236517204, x1, 808, x7)

inst_373:
// rs1_val==0 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 12297829382473034409, x1, 816, x7)

inst_374:
// rs1_val==0 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 4, x1, 824, x7)

inst_375:
// rs1_val==0 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 3689348814741910322, x1, 832, x7)

inst_376:
// rs1_val==0 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 7378697629483820645, x1, 840, x7)

inst_377:
// rs1_val==0 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 3037000498, x1, 848, x7)

inst_378:
// rs1_val==0 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 4294967295, x1, 856, x7)

inst_379:
// rs1_val==0 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 6148914691236517206, x1, 864, x7)

inst_380:
// rs1_val==0 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 12297829382473034411, x1, 872, x7)

inst_381:
// rs1_val==0 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 6, x1, 880, x7)

inst_382:
// rs1_val==0 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 3689348814741910324, x1, 888, x7)

inst_383:
// rs1_val==0 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 7378697629483820647, x1, 896, x7)

inst_384:
// rs1_val==0 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 3037000500, x1, 904, x7)

inst_385:
// rs1_val==0 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 1, x1, 912, x7)

inst_386:
// rs1_val==0 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 0, 4294967297, x1, 920, x7)

inst_387:
// rs1_val==4294967296 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 3, x1, 928, x7)

inst_388:
// rs1_val==4294967296 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 6148914691236517205, x1, 936, x7)

inst_389:
// rs1_val==4294967296 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 12297829382473034410, x1, 944, x7)

inst_390:
// rs1_val==4294967296 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 5, x1, 952, x7)

inst_391:
// rs1_val==4294967296 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 3689348814741910323, x1, 960, x7)

inst_392:
// rs1_val==4294967296 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 7378697629483820646, x1, 968, x7)

inst_393:
// rs1_val==4294967296 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 3037000499, x1, 976, x7)

inst_394:
// rs1_val==4294967296 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 0, x1, 984, x7)

inst_395:
// rs1_val==4294967296 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 4294967296, x1, 992, x7)

inst_396:
// rs1_val==4294967296 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 2, x1, 1000, x7)

inst_397:
// rs1_val==4294967296 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 6148914691236517204, x1, 1008, x7)

inst_398:
// rs1_val==4294967296 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 12297829382473034409, x1, 1016, x7)

inst_399:
// rs1_val==4294967296 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 4, x1, 1024, x7)

inst_400:
// rs1_val==4294967296 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 3689348814741910322, x1, 1032, x7)

inst_401:
// rs1_val==4294967296 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 7378697629483820645, x1, 1040, x7)

inst_402:
// rs1_val==4294967296 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 3037000498, x1, 1048, x7)

inst_403:
// rs1_val==4294967296 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 4294967295, x1, 1056, x7)

inst_404:
// rs1_val==4294967296 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 6148914691236517206, x1, 1064, x7)

inst_405:
// rs1_val==4294967296 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 12297829382473034411, x1, 1072, x7)

inst_406:
// rs1_val==4294967296 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 6, x1, 1080, x7)

inst_407:
// rs1_val==4294967296 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 3689348814741910324, x1, 1088, x7)

inst_408:
// rs1_val==4294967296 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 7378697629483820647, x1, 1096, x7)

inst_409:
// rs1_val==4294967296 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 3037000500, x1, 1104, x7)

inst_410:
// rs1_val==4294967296 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 1, x1, 1112, x7)

inst_411:
// rs1_val==4294967296 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 4294967297, x1, 1120, x7)

inst_412:
// rs1_val==2 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 3, x1, 1128, x7)

inst_413:
// rs1_val==2 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 6148914691236517205, x1, 1136, x7)

inst_414:
// rs1_val==2 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 12297829382473034410, x1, 1144, x7)

inst_415:
// rs1_val==2 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 5, x1, 1152, x7)

inst_416:
// rs1_val==2 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 3689348814741910323, x1, 1160, x7)

inst_417:
// rs1_val==2 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 7378697629483820646, x1, 1168, x7)

inst_418:
// rs1_val==2 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 3037000499, x1, 1176, x7)

inst_419:
// rs1_val==2 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2, 0, x1, 1184, x7)

inst_420:
// rs1_val==2 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 4294967296, x1, 1192, x7)

inst_421:
// rs1_val==2 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2, 2, x1, 1200, x7)

inst_422:
// rs1_val==2 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 6148914691236517204, x1, 1208, x7)

inst_423:
// rs1_val==2 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 12297829382473034409, x1, 1216, x7)

inst_424:
// rs1_val==2 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 4, x1, 1224, x7)

inst_425:
// rs1_val==2 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 3689348814741910322, x1, 1232, x7)

inst_426:
// rs1_val==2 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 7378697629483820645, x1, 1240, x7)

inst_427:
// rs1_val==2 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 3037000498, x1, 1248, x7)

inst_428:
// rs1_val==2 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 4294967295, x1, 1256, x7)

inst_429:
// rs1_val==2 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 6148914691236517206, x1, 1264, x7)

inst_430:
// rs1_val==2 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 12297829382473034411, x1, 1272, x7)

inst_431:
// rs1_val==2 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 6, x1, 1280, x7)

inst_432:
// rs1_val==2 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 3689348814741910324, x1, 1288, x7)

inst_433:
// rs1_val==2 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 7378697629483820647, x1, 1296, x7)

inst_434:
// rs1_val==2 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 3037000500, x1, 1304, x7)

inst_435:
// rs1_val==2 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2, 1, x1, 1312, x7)

inst_436:
// rs1_val==2 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 4294967297, x1, 1320, x7)

inst_437:
// rs1_val==6148914691236517204 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 3, x1, 1328, x7)

inst_438:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 6148914691236517205, x1, 1336, x7)

inst_439:
// rs1_val==6148914691236517204 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 12297829382473034410, x1, 1344, x7)

inst_440:
// rs1_val==6148914691236517204 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 5, x1, 1352, x7)

inst_441:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 3689348814741910323, x1, 1360, x7)

inst_442:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 7378697629483820646, x1, 1368, x7)

inst_443:
// rs1_val==6148914691236517204 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 3037000499, x1, 1376, x7)

inst_444:
// rs1_val==6148914691236517204 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 0, x1, 1384, x7)

inst_445:
// rs1_val==6148914691236517204 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 4294967296, x1, 1392, x7)

inst_446:
// rs1_val==6148914691236517204 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 2, x1, 1400, x7)

inst_447:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 6148914691236517204, x1, 1408, x7)

inst_448:
// rs1_val==6148914691236517204 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 12297829382473034409, x1, 1416, x7)

inst_449:
// rs1_val==6148914691236517204 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 4, x1, 1424, x7)

inst_450:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 3689348814741910322, x1, 1432, x7)

inst_451:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 7378697629483820645, x1, 1440, x7)

inst_452:
// rs1_val==6148914691236517204 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 3037000498, x1, 1448, x7)

inst_453:
// rs1_val==6148914691236517204 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 4294967295, x1, 1456, x7)

inst_454:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 6148914691236517206, x1, 1464, x7)

inst_455:
// rs1_val==6148914691236517204 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 12297829382473034411, x1, 1472, x7)

inst_456:
// rs1_val==6148914691236517204 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 6, x1, 1480, x7)

inst_457:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 3689348814741910324, x1, 1488, x7)

inst_458:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517204, 7378697629483820647, x1, 1496, x7)

inst_459:
// rs1_val==6148914691236517204 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 3037000500, x1, 1504, x7)

inst_460:
// rs1_val==6148914691236517204 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 1, x1, 1512, x7)

inst_461:
// rs1_val==6148914691236517204 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517204, 4294967297, x1, 1520, x7)

inst_462:
// rs1_val==12297829382473034409 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 3, x1, 1528, x7)

inst_463:
// rs1_val==12297829382473034409 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 6148914691236517205, x1, 1536, x7)

inst_464:
// rs1_val==12297829382473034409 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 12297829382473034409, 12297829382473034410, x1, 1544, x7)

inst_465:
// rs1_val==12297829382473034409 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 5, x1, 1552, x7)

inst_466:
// rs1_val==12297829382473034409 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 3689348814741910323, x1, 1560, x7)

inst_467:
// rs1_val==12297829382473034409 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 7378697629483820646, x1, 1568, x7)

inst_468:
// rs1_val==12297829382473034409 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 3037000499, x1, 1576, x7)

inst_469:
// rs1_val==12297829382473034409 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 0, x1, 1584, x7)

inst_470:
// rs1_val==12297829382473034409 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 4294967296, x1, 1592, x7)

inst_471:
// rs1_val==12297829382473034409 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 2, x1, 1600, x7)

inst_472:
// rs1_val==12297829382473034409 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 6148914691236517204, x1, 1608, x7)

inst_473:
// rs1_val==12297829382473034409 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 12297829382473034409, x1, 1616, x7)

inst_474:
// rs1_val==12297829382473034409 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 4, x1, 1624, x7)

inst_475:
// rs1_val==12297829382473034409 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 3689348814741910322, x1, 1632, x7)

inst_476:
// rs1_val==12297829382473034409 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 7378697629483820645, x1, 1640, x7)

inst_477:
// rs1_val==12297829382473034409 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 3037000498, x1, 1648, x7)

inst_478:
// rs1_val==12297829382473034409 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 4294967295, x1, 1656, x7)

inst_479:
// rs1_val==12297829382473034409 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 6148914691236517206, x1, 1664, x7)

inst_480:
// rs1_val==12297829382473034409 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 12297829382473034409, 12297829382473034411, x1, 1672, x7)

inst_481:
// rs1_val==12297829382473034409 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 6, x1, 1680, x7)

inst_482:
// rs1_val==12297829382473034409 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 3689348814741910324, x1, 1688, x7)

inst_483:
// rs1_val==12297829382473034409 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 7378697629483820647, x1, 1696, x7)

inst_484:
// rs1_val==12297829382473034409 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 3037000500, x1, 1704, x7)

inst_485:
// rs1_val==12297829382473034409 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 1, x1, 1712, x7)

inst_486:
// rs1_val==12297829382473034409 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034409;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034409, 4294967297, x1, 1720, x7)

inst_487:
// rs1_val==4 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4, 3, x1, 1728, x7)

inst_488:
// rs1_val==4 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 6148914691236517205, x1, 1736, x7)

inst_489:
// rs1_val==4 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 12297829382473034410, x1, 1744, x7)

inst_490:
// rs1_val==4 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 5, x1, 1752, x7)

inst_491:
// rs1_val==4 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 3689348814741910323, x1, 1760, x7)

inst_492:
// rs1_val==4 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 7378697629483820646, x1, 1768, x7)

inst_493:
// rs1_val==4 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 3037000499, x1, 1776, x7)

inst_494:
// rs1_val==4 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4, 0, x1, 1784, x7)

inst_495:
// rs1_val==4 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 4294967296, x1, 1792, x7)

inst_496:
// rs1_val==4 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4, 2, x1, 1800, x7)

inst_497:
// rs1_val==4 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 6148914691236517204, x1, 1808, x7)

inst_498:
// rs1_val==4 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 12297829382473034409, x1, 1816, x7)

inst_499:
// rs1_val==4 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4, 4, x1, 1824, x7)

inst_500:
// rs1_val==4 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 3689348814741910322, x1, 1832, x7)

inst_501:
// rs1_val==4 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 7378697629483820645, x1, 1840, x7)

inst_502:
// rs1_val==4 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 3037000498, x1, 1848, x7)

inst_503:
// rs1_val==4 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 4294967295, x1, 1856, x7)

inst_504:
// rs1_val==4 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 6148914691236517206, x1, 1864, x7)

inst_505:
// rs1_val==4 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 12297829382473034411, x1, 1872, x7)

inst_506:
// rs1_val==4 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 6, x1, 1880, x7)

inst_507:
// rs1_val==4 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 3689348814741910324, x1, 1888, x7)

inst_508:
// rs1_val==4 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 7378697629483820647, x1, 1896, x7)

inst_509:
// rs1_val==4 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 3037000500, x1, 1904, x7)

inst_510:
// rs1_val==4 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4, 1, x1, 1912, x7)

inst_511:
// rs1_val==4 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 4294967297, x1, 1920, x7)

inst_512:
// rs1_val==3689348814741910322 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 3, x1, 1928, x7)

inst_513:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 6148914691236517205, x1, 1936, x7)

inst_514:
// rs1_val==3689348814741910322 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 12297829382473034410, x1, 1944, x7)

inst_515:
// rs1_val==3689348814741910322 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 5, x1, 1952, x7)

inst_516:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 3689348814741910323, x1, 1960, x7)

inst_517:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 7378697629483820646, x1, 1968, x7)

inst_518:
// rs1_val==3689348814741910322 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 3037000499, x1, 1976, x7)

inst_519:
// rs1_val==3689348814741910322 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 0, x1, 1984, x7)

inst_520:
// rs1_val==3689348814741910322 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 4294967296, x1, 1992, x7)

inst_521:
// rs1_val==3689348814741910322 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 2, x1, 2000, x7)

inst_522:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 6148914691236517204, x1, 2008, x7)

inst_523:
// rs1_val==3689348814741910322 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 12297829382473034409, x1, 2016, x7)

inst_524:
// rs1_val==3689348814741910322 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 4, x1, 2024, x7)

inst_525:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 3689348814741910322, x1, 2032, x7)

inst_526:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 7378697629483820645, x1, 2040, x7)
RVTEST_SIGBASE( x1,signature_x1_2)

inst_527:
// rs1_val==3689348814741910322 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 3037000498, x1, 0, x7)

inst_528:
// rs1_val==3689348814741910322 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 4294967295, x1, 8, x7)

inst_529:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 6148914691236517206, x1, 16, x7)

inst_530:
// rs1_val==3689348814741910322 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 12297829382473034411, x1, 24, x7)

inst_531:
// rs1_val==3689348814741910322 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 6, x1, 32, x7)

inst_532:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 3689348814741910324, x1, 40, x7)

inst_533:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910322, 7378697629483820647, x1, 48, x7)

inst_534:
// rs1_val==3689348814741910322 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 3037000500, x1, 56, x7)

inst_535:
// rs1_val==3689348814741910322 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 1, x1, 64, x7)

inst_536:
// rs1_val==3689348814741910322 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910322, 4294967297, x1, 72, x7)

inst_537:
// rs1_val==7378697629483820645 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 3, x1, 80, x7)

inst_538:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 6148914691236517205, x1, 88, x7)

inst_539:
// rs1_val==7378697629483820645 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820645, 12297829382473034410, x1, 96, x7)

inst_540:
// rs1_val==7378697629483820645 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 5, x1, 104, x7)

inst_541:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 3689348814741910323, x1, 112, x7)

inst_542:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820645, 7378697629483820646, x1, 120, x7)

inst_543:
// rs1_val==7378697629483820645 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 3037000499, x1, 128, x7)

inst_544:
// rs1_val==7378697629483820645 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 0, x1, 136, x7)

inst_545:
// rs1_val==7378697629483820645 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 4294967296, x1, 144, x7)

inst_546:
// rs1_val==7378697629483820645 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 2, x1, 152, x7)

inst_547:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 6148914691236517204, x1, 160, x7)

inst_548:
// rs1_val==7378697629483820645 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820645, 12297829382473034409, x1, 168, x7)

inst_549:
// rs1_val==7378697629483820645 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 4, x1, 176, x7)

inst_550:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 3689348814741910322, x1, 184, x7)

inst_551:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 7378697629483820645, x1, 192, x7)

inst_552:
// rs1_val==7378697629483820645 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 3037000498, x1, 200, x7)

inst_553:
// rs1_val==7378697629483820645 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 4294967295, x1, 208, x7)

inst_554:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 6148914691236517206, x1, 216, x7)

inst_555:
// rs1_val==7378697629483820645 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820645, 12297829382473034411, x1, 224, x7)

inst_556:
// rs1_val==7378697629483820645 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 6, x1, 232, x7)

inst_557:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 3689348814741910324, x1, 240, x7)

inst_558:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820645, 7378697629483820647, x1, 248, x7)

inst_559:
// rs1_val==7378697629483820645 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 3037000500, x1, 256, x7)

inst_560:
// rs1_val==7378697629483820645 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 1, x1, 264, x7)

inst_561:
// rs1_val==7378697629483820645 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820645, 4294967297, x1, 272, x7)

inst_562:
// rs1_val==3037000498 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 3, x1, 280, x7)

inst_563:
// rs1_val==3037000498 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 6148914691236517205, x1, 288, x7)

inst_564:
// rs1_val==3037000498 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 12297829382473034410, x1, 296, x7)

inst_565:
// rs1_val==3037000498 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 5, x1, 304, x7)

inst_566:
// rs1_val==3037000498 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 3689348814741910323, x1, 312, x7)

inst_567:
// rs1_val==3037000498 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 7378697629483820646, x1, 320, x7)

inst_568:
// rs1_val==3037000498 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 3037000499, x1, 328, x7)

inst_569:
// rs1_val==3037000498 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 0, x1, 336, x7)

inst_570:
// rs1_val==3037000498 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 4294967296, x1, 344, x7)

inst_571:
// rs1_val==3037000498 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 2, x1, 352, x7)

inst_572:
// rs1_val==3037000498 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 6148914691236517204, x1, 360, x7)

inst_573:
// rs1_val==3037000498 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 12297829382473034409, x1, 368, x7)

inst_574:
// rs1_val==3037000498 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 4, x1, 376, x7)

inst_575:
// rs1_val==3037000498 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 3689348814741910322, x1, 384, x7)

inst_576:
// rs1_val==3037000498 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 7378697629483820645, x1, 392, x7)

inst_577:
// rs1_val==3037000498 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 3037000498, x1, 400, x7)

inst_578:
// rs1_val==3037000498 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 4294967295, x1, 408, x7)

inst_579:
// rs1_val==3037000498 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 6148914691236517206, x1, 416, x7)

inst_580:
// rs1_val==3037000498 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 12297829382473034411, x1, 424, x7)

inst_581:
// rs1_val==3037000498 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 6, x1, 432, x7)

inst_582:
// rs1_val==3037000498 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 3689348814741910324, x1, 440, x7)

inst_583:
// rs1_val==3037000498 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 7378697629483820647, x1, 448, x7)

inst_584:
// rs1_val==3037000498 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 3037000500, x1, 456, x7)

inst_585:
// rs1_val==3037000498 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000498, 1, x1, 464, x7)

inst_586:
// rs1_val==3037000498 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000498, 4294967297, x1, 472, x7)

inst_587:
// rs1_val==4294967295 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 3, x1, 480, x7)

inst_588:
// rs1_val==4294967295 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 6148914691236517205, x1, 488, x7)

inst_589:
// rs1_val==4294967295 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 12297829382473034410, x1, 496, x7)

inst_590:
// rs1_val==4294967295 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 5, x1, 504, x7)

inst_591:
// rs1_val==4294967295 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 3689348814741910323, x1, 512, x7)

inst_592:
// rs1_val==4294967295 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 7378697629483820646, x1, 520, x7)

inst_593:
// rs1_val==4294967295 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 3037000499, x1, 528, x7)

inst_594:
// rs1_val==4294967295 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 0, x1, 536, x7)

inst_595:
// rs1_val==4294967295 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 4294967296, x1, 544, x7)

inst_596:
// rs1_val==4294967295 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 2, x1, 552, x7)

inst_597:
// rs1_val==4294967295 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 6148914691236517204, x1, 560, x7)

inst_598:
// rs1_val==4294967295 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 12297829382473034409, x1, 568, x7)

inst_599:
// rs1_val==4294967295 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 4, x1, 576, x7)

inst_600:
// rs1_val==4294967295 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 3689348814741910322, x1, 584, x7)

inst_601:
// rs1_val==4294967295 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 7378697629483820645, x1, 592, x7)

inst_602:
// rs1_val==4294967295 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 3037000498, x1, 600, x7)

inst_603:
// rs1_val==4294967295 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 4294967295, x1, 608, x7)

inst_604:
// rs1_val==4294967295 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 6148914691236517206, x1, 616, x7)

inst_605:
// rs1_val==4294967295 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 12297829382473034411, x1, 624, x7)

inst_606:
// rs1_val==4294967295 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 6, x1, 632, x7)

inst_607:
// rs1_val==4294967295 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 3689348814741910324, x1, 640, x7)

inst_608:
// rs1_val==4294967295 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 7378697629483820647, x1, 648, x7)

inst_609:
// rs1_val==4294967295 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 3037000500, x1, 656, x7)

inst_610:
// rs1_val==4294967295 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967295, 1, x1, 664, x7)

inst_611:
// rs1_val==4294967295 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967295;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967295, 4294967297, x1, 672, x7)

inst_612:
// rs1_val==6148914691236517206 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 3, x1, 680, x7)

inst_613:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 6148914691236517205, x1, 688, x7)

inst_614:
// rs1_val==6148914691236517206 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517206, 12297829382473034410, x1, 696, x7)

inst_615:
// rs1_val==6148914691236517206 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 5, x1, 704, x7)

inst_616:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 3689348814741910323, x1, 712, x7)

inst_617:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517206, 7378697629483820646, x1, 720, x7)

inst_618:
// rs1_val==6148914691236517206 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 3037000499, x1, 728, x7)

inst_619:
// rs1_val==6148914691236517206 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 0, x1, 736, x7)

inst_620:
// rs1_val==6148914691236517206 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 4294967296, x1, 744, x7)

inst_621:
// rs1_val==6148914691236517206 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 2, x1, 752, x7)

inst_622:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 6148914691236517204, x1, 760, x7)

inst_623:
// rs1_val==6148914691236517206 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517206, 12297829382473034409, x1, 768, x7)

inst_624:
// rs1_val==6148914691236517206 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 4, x1, 776, x7)

inst_625:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 3689348814741910322, x1, 784, x7)

inst_626:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517206, 7378697629483820645, x1, 792, x7)

inst_627:
// rs1_val==6148914691236517206 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 3037000498, x1, 800, x7)

inst_628:
// rs1_val==6148914691236517206 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 4294967295, x1, 808, x7)

inst_629:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 6148914691236517206, x1, 816, x7)

inst_630:
// rs1_val==6148914691236517206 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517206, 12297829382473034411, x1, 824, x7)

inst_631:
// rs1_val==6148914691236517206 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 6, x1, 832, x7)

inst_632:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 3689348814741910324, x1, 840, x7)

inst_633:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517206, 7378697629483820647, x1, 848, x7)

inst_634:
// rs1_val==6148914691236517206 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 3037000500, x1, 856, x7)

inst_635:
// rs1_val==6148914691236517206 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 1, x1, 864, x7)

inst_636:
// rs1_val==6148914691236517206 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6148914691236517206, 4294967297, x1, 872, x7)

inst_637:
// rs1_val==12297829382473034411 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 3, x1, 880, x7)

inst_638:
// rs1_val==12297829382473034411 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 6148914691236517205, x1, 888, x7)

inst_639:
// rs1_val==12297829382473034411 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 12297829382473034410, x1, 896, x7)

inst_640:
// rs1_val==12297829382473034411 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 5, x1, 904, x7)

inst_641:
// rs1_val==12297829382473034411 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 3689348814741910323, x1, 912, x7)

inst_642:
// rs1_val==12297829382473034411 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 7378697629483820646, x1, 920, x7)

inst_643:
// rs1_val==12297829382473034411 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 3037000499, x1, 928, x7)

inst_644:
// rs1_val==12297829382473034411 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 0, x1, 936, x7)

inst_645:
// rs1_val==12297829382473034411 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 4294967296, x1, 944, x7)

inst_646:
// rs1_val==12297829382473034411 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 2, x1, 952, x7)

inst_647:
// rs1_val==12297829382473034411 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 6148914691236517204, x1, 960, x7)

inst_648:
// rs1_val==12297829382473034411 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 12297829382473034409, x1, 968, x7)

inst_649:
// rs1_val==12297829382473034411 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 4, x1, 976, x7)

inst_650:
// rs1_val==12297829382473034411 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 3689348814741910322, x1, 984, x7)

inst_651:
// rs1_val==12297829382473034411 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 7378697629483820645, x1, 992, x7)

inst_652:
// rs1_val==12297829382473034411 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 3037000498, x1, 1000, x7)

inst_653:
// rs1_val==12297829382473034411 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 4294967295, x1, 1008, x7)

inst_654:
// rs1_val==12297829382473034411 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 6148914691236517206, x1, 1016, x7)

inst_655:
// rs1_val==12297829382473034411 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 12297829382473034411, x1, 1024, x7)

inst_656:
// rs1_val==12297829382473034411 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 6, x1, 1032, x7)

inst_657:
// rs1_val==12297829382473034411 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 3689348814741910324, x1, 1040, x7)

inst_658:
// rs1_val==12297829382473034411 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 7378697629483820647, x1, 1048, x7)

inst_659:
// rs1_val==12297829382473034411 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 3037000500, x1, 1056, x7)

inst_660:
// rs1_val==12297829382473034411 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 1, x1, 1064, x7)

inst_661:
// rs1_val==12297829382473034411 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034411;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 12297829382473034411, 4294967297, x1, 1072, x7)

inst_662:
// rs1_val==6 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6, 3, x1, 1080, x7)

inst_663:
// rs1_val==6 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 6148914691236517205, x1, 1088, x7)

inst_664:
// rs1_val==6 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 12297829382473034410, x1, 1096, x7)

inst_665:
// rs1_val==6 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6, 5, x1, 1104, x7)

inst_666:
// rs1_val==6 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 3689348814741910323, x1, 1112, x7)

inst_667:
// rs1_val==6 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 7378697629483820646, x1, 1120, x7)

inst_668:
// rs1_val==6 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 3037000499, x1, 1128, x7)

inst_669:
// rs1_val==6 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6, 0, x1, 1136, x7)

inst_670:
// rs1_val==6 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 4294967296, x1, 1144, x7)

inst_671:
// rs1_val==6 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6, 2, x1, 1152, x7)

inst_672:
// rs1_val==6 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 6148914691236517204, x1, 1160, x7)

inst_673:
// rs1_val==6 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 12297829382473034409, x1, 1168, x7)

inst_674:
// rs1_val==6 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6, 4, x1, 1176, x7)

inst_675:
// rs1_val==6 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 3689348814741910322, x1, 1184, x7)

inst_676:
// rs1_val==6 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 7378697629483820645, x1, 1192, x7)

inst_677:
// rs1_val==6 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 3037000498, x1, 1200, x7)

inst_678:
// rs1_val==6 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 4294967295, x1, 1208, x7)

inst_679:
// rs1_val==6 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 6148914691236517206, x1, 1216, x7)

inst_680:
// rs1_val==6 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 12297829382473034411, x1, 1224, x7)

inst_681:
// rs1_val==6 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6, 6, x1, 1232, x7)

inst_682:
// rs1_val==6 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 3689348814741910324, x1, 1240, x7)

inst_683:
// rs1_val==6 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 7378697629483820647, x1, 1248, x7)

inst_684:
// rs1_val==6 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 3037000500, x1, 1256, x7)

inst_685:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 6148914691236517205, x1, 1264, x7)

inst_686:
// rs1_val==3689348814741910324 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 12297829382473034410, x1, 1272, x7)

inst_687:
// rs1_val==3689348814741910324 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 5, x1, 1280, x7)

inst_688:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 3689348814741910323, x1, 1288, x7)

inst_689:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 7378697629483820646, x1, 1296, x7)

inst_690:
// rs1_val==3689348814741910324 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 3037000499, x1, 1304, x7)

inst_691:
// rs1_val==3689348814741910324 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 0, x1, 1312, x7)

inst_692:
// rs1_val==3689348814741910324 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 4294967296, x1, 1320, x7)

inst_693:
// rs1_val==3689348814741910324 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 2, x1, 1328, x7)

inst_694:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 6148914691236517204, x1, 1336, x7)

inst_695:
// rs1_val==3689348814741910324 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 12297829382473034409, x1, 1344, x7)

inst_696:
// rs1_val==3689348814741910324 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 4, x1, 1352, x7)

inst_697:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 3689348814741910322, x1, 1360, x7)

inst_698:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 7378697629483820645, x1, 1368, x7)

inst_699:
// rs1_val==3689348814741910324 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 3037000498, x1, 1376, x7)

inst_700:
// rs1_val==3689348814741910324 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 4294967295, x1, 1384, x7)

inst_701:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 6148914691236517206, x1, 1392, x7)

inst_702:
// rs1_val==3689348814741910324 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 12297829382473034411, x1, 1400, x7)

inst_703:
// rs1_val==3689348814741910324 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 6, x1, 1408, x7)

inst_704:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 3689348814741910324, x1, 1416, x7)

inst_705:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3689348814741910324, 7378697629483820647, x1, 1424, x7)

inst_706:
// rs1_val==3689348814741910324 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 3037000500, x1, 1432, x7)

inst_707:
// rs1_val==3689348814741910324 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 1, x1, 1440, x7)

inst_708:
// rs1_val==3689348814741910324 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 4294967297, x1, 1448, x7)

inst_709:
// rs1_val==7378697629483820647 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 3, x1, 1456, x7)

inst_710:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 6148914691236517205, x1, 1464, x7)

inst_711:
// rs1_val==7378697629483820647 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820647, 12297829382473034410, x1, 1472, x7)

inst_712:
// rs1_val==7378697629483820647 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 5, x1, 1480, x7)

inst_713:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 3689348814741910323, x1, 1488, x7)

inst_714:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 7378697629483820646, x1, 1496, x7)

inst_715:
// rs1_val==7378697629483820647 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 3037000499, x1, 1504, x7)

inst_716:
// rs1_val==7378697629483820647 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 0, x1, 1512, x7)

inst_717:
// rs1_val==7378697629483820647 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 4294967296, x1, 1520, x7)

inst_718:
// rs1_val==7378697629483820647 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 2, x1, 1528, x7)

inst_719:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 6148914691236517204, x1, 1536, x7)

inst_720:
// rs1_val==7378697629483820647 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820647, 12297829382473034409, x1, 1544, x7)

inst_721:
// rs1_val==7378697629483820647 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 4, x1, 1552, x7)

inst_722:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 3689348814741910322, x1, 1560, x7)

inst_723:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 7378697629483820645, x1, 1568, x7)

inst_724:
// rs1_val==7378697629483820647 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 3037000498, x1, 1576, x7)

inst_725:
// rs1_val==7378697629483820647 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 4294967295, x1, 1584, x7)

inst_726:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 6148914691236517206, x1, 1592, x7)

inst_727:
// rs1_val==7378697629483820647 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7378697629483820647, 12297829382473034411, x1, 1600, x7)

inst_728:
// rs1_val==7378697629483820647 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 6, x1, 1608, x7)

inst_729:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 3689348814741910324, x1, 1616, x7)

inst_730:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 7378697629483820647, x1, 1624, x7)

inst_731:
// rs1_val==7378697629483820647 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 3037000500, x1, 1632, x7)

inst_732:
// rs1_val==7378697629483820647 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 1, x1, 1640, x7)

inst_733:
// rs1_val==7378697629483820647 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 7378697629483820647, 4294967297, x1, 1648, x7)

inst_734:
// rs1_val==3037000500 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 3, x1, 1656, x7)

inst_735:
// rs1_val==3037000500 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 6148914691236517205, x1, 1664, x7)

inst_736:
// rs1_val==3037000500 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 12297829382473034410, x1, 1672, x7)

inst_737:
// rs1_val==3037000500 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 5, x1, 1680, x7)

inst_738:
// rs1_val==3037000500 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 3689348814741910323, x1, 1688, x7)

inst_739:
// rs1_val==3037000500 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 7378697629483820646, x1, 1696, x7)

inst_740:
// rs1_val==3037000500 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 3037000499, x1, 1704, x7)

inst_741:
// rs1_val==3037000500 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 0, x1, 1712, x7)

inst_742:
// rs1_val==3037000500 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 4294967296, x1, 1720, x7)

inst_743:
// rs1_val==3037000500 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 2, x1, 1728, x7)

inst_744:
// rs1_val==3037000500 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 6148914691236517204, x1, 1736, x7)

inst_745:
// rs1_val==3037000500 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 12297829382473034409, x1, 1744, x7)

inst_746:
// rs1_val==3037000500 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 4, x1, 1752, x7)

inst_747:
// rs1_val==3037000500 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 3689348814741910322, x1, 1760, x7)

inst_748:
// rs1_val==3037000500 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 7378697629483820645, x1, 1768, x7)

inst_749:
// rs1_val==3037000500 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 3037000498, x1, 1776, x7)

inst_750:
// rs1_val==3037000500 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 4294967295, x1, 1784, x7)

inst_751:
// rs1_val==3037000500 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 6148914691236517206, x1, 1792, x7)

inst_752:
// rs1_val==3037000500 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 12297829382473034411, x1, 1800, x7)

inst_753:
// rs1_val==3037000500 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 6, x1, 1808, x7)

inst_754:
// rs1_val==3037000500 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 3689348814741910324, x1, 1816, x7)

inst_755:
// rs1_val==3037000500 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 7378697629483820647, x1, 1824, x7)

inst_756:
// rs1_val==3037000500 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 3037000500, x1, 1832, x7)

inst_757:
// rs1_val==3037000500 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 1, x1, 1840, x7)

inst_758:
// rs1_val==3037000500 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3037000500, 4294967297, x1, 1848, x7)

inst_759:
// rs1_val==1 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 3, x1, 1856, x7)

inst_760:
// rs1_val==1 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 6148914691236517205, x1, 1864, x7)

inst_761:
// rs1_val==1 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 12297829382473034410, x1, 1872, x7)

inst_762:
// rs1_val==1 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 5, x1, 1880, x7)

inst_763:
// rs1_val==1 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 3689348814741910323, x1, 1888, x7)

inst_764:
// rs1_val==1 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 7378697629483820646, x1, 1896, x7)

inst_765:
// rs1_val==1 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 3037000499, x1, 1904, x7)

inst_766:
// rs1_val==1 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1, 0, x1, 1912, x7)

inst_767:
// rs1_val==1 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 4294967296, x1, 1920, x7)

inst_768:
// rs1_val==1 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 2, x1, 1928, x7)

inst_769:
// rs1_val==1 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 6148914691236517204, x1, 1936, x7)

inst_770:
// rs1_val==1 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 12297829382473034409, x1, 1944, x7)

inst_771:
// rs1_val==1 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 4, x1, 1952, x7)

inst_772:
// rs1_val==1 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 3689348814741910322, x1, 1960, x7)

inst_773:
// rs1_val==1 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 7378697629483820645, x1, 1968, x7)

inst_774:
// rs1_val==1 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 3037000498, x1, 1976, x7)

inst_775:
// rs1_val==1 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 4294967295, x1, 1984, x7)

inst_776:
// rs1_val==1 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 6148914691236517206, x1, 1992, x7)

inst_777:
// rs1_val==1 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 12297829382473034411, x1, 2000, x7)

inst_778:
// rs1_val==1 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 6, x1, 2008, x7)

inst_779:
// rs1_val==1 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 3689348814741910324, x1, 2016, x7)

inst_780:
// rs1_val==1 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 7378697629483820647, x1, 2024, x7)

inst_781:
// rs1_val==1 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 3037000500, x1, 2032, x7)

inst_782:
// rs1_val==1 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1, 1, x1, 2040, x7)
RVTEST_SIGBASE( x1,signature_x1_3)

inst_783:
// rs1_val==1 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 4294967297, x1, 0, x7)

inst_784:
// rs1_val==4294967297 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 3, x1, 8, x7)

inst_785:
// rs1_val==4294967297 and rs2_val==6148914691236517205, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 6148914691236517205, x1, 16, x7)

inst_786:
// rs1_val==4294967297 and rs2_val==12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 12297829382473034410, x1, 24, x7)

inst_787:
// rs1_val==4294967297 and rs2_val==5, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 5, x1, 32, x7)

inst_788:
// rs1_val==4294967297 and rs2_val==3689348814741910323, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:3689348814741910323
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 3689348814741910323, x1, 40, x7)

inst_789:
// rs1_val==4294967297 and rs2_val==7378697629483820646, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:7378697629483820646
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 7378697629483820646, x1, 48, x7)

inst_790:
// rs1_val==4294967297 and rs2_val==3037000499, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:3037000499
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 3037000499, x1, 56, x7)

inst_791:
// rs1_val==4294967297 and rs2_val==0, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 0, x1, 64, x7)

inst_792:
// rs1_val==4294967297 and rs2_val==4294967296, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 4294967296, x1, 72, x7)

inst_793:
// rs1_val==4294967297 and rs2_val==2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 2, x1, 80, x7)

inst_794:
// rs1_val==4294967297 and rs2_val==6148914691236517204, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:6148914691236517204
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 6148914691236517204, x1, 88, x7)

inst_795:
// rs1_val==4294967297 and rs2_val==12297829382473034409, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:12297829382473034409
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 12297829382473034409, x1, 96, x7)

inst_796:
// rs1_val==4294967297 and rs2_val==4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 4, x1, 104, x7)

inst_797:
// rs1_val==4294967297 and rs2_val==3689348814741910322, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:3689348814741910322
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 3689348814741910322, x1, 112, x7)

inst_798:
// rs1_val==4294967297 and rs2_val==7378697629483820645, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:7378697629483820645
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 7378697629483820645, x1, 120, x7)

inst_799:
// rs1_val==4294967297 and rs2_val==3037000498, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:3037000498
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 3037000498, x1, 128, x7)

inst_800:
// rs1_val==4294967297 and rs2_val==4294967295, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 4294967295, x1, 136, x7)

inst_801:
// rs1_val==4294967297 and rs2_val==6148914691236517206, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:6148914691236517206
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 6148914691236517206, x1, 144, x7)

inst_802:
// rs1_val==4294967297 and rs2_val==12297829382473034411, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:12297829382473034411
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 12297829382473034411, x1, 152, x7)

inst_803:
// rs1_val==4294967297 and rs2_val==6, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 6, x1, 160, x7)

inst_804:
// rs1_val==4294967297 and rs2_val==3689348814741910324, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:3689348814741910324
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 3689348814741910324, x1, 168, x7)

inst_805:
// rs1_val==4294967297 and rs2_val==7378697629483820647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:7378697629483820647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967297, 7378697629483820647, x1, 176, x7)

inst_806:
// rs1_val==4294967297 and rs2_val==3037000500, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:3037000500
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 3037000500, x1, 184, x7)

inst_807:
// rs1_val==4294967297 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 1, x1, 192, x7)

inst_808:
// rs1_val==4294967297 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967297;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967297, 4294967297, x1, 200, x7)

inst_809:
// rs1_val==6 and rs2_val==1, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 6, 1, x1, 208, x7)

inst_810:
// rs1_val==6 and rs2_val==4294967297, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:4294967297
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 4294967297, x1, 216, x7)

inst_811:
// rs1_val==3689348814741910324 and rs2_val==3, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:3
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3689348814741910324, 3, x1, 224, x7)

inst_812:
// rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 18446744073675997183, rs1_val == 18446744073675997183
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073675997183;  op2val:18446744073675997183
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073675997183, 18446744073675997183, x1, 232, x7)

inst_813:
// rs2_val == 4096, rs1_val == 18446744071562067967
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744071562067967;  op2val:4096
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744071562067967, 4096, x1, 240, x7)

inst_814:
// rs2_val == 16777216, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:16777216
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3037000500, 16777216, x1, 248, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_3:
    .fill 32*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
