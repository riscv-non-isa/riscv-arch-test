 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sltu instruction of the RISC-V I extension for the sltu covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltu)

RVTEST_SIGBASE( x11,signature_x11_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x15, rd==x18, rs1_val == 0, 
// opcode: sltu ; op1:x17; op2:x15; dest:x18; op1val:0;  op2val:11
TEST_RR_OP(sltu, x18, x17, x15, 0x1, 0, 11, x11, 0, x2)

inst_1:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x29, rs1_val == (2**(xlen)-1), rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 18446744056529682431, rs1_val > 0 and rs2_val > 0
// opcode: sltu ; op1:x1; op2:x1; dest:x29; op1val:18446744073709551615;  op2val:18446744056529682431
TEST_RR_OP(sltu, x29, x1, x1, 0x0, 18446744073709551615, 18446744056529682431, x11, 8, x2)

inst_2:
// rs1 == rd != rs2, rs1==x19, rs2==x22, rd==x19, rs1_val == 1, rs2_val == 18442240474082181119
// opcode: sltu ; op1:x19; op2:x22; dest:x19; op1val:1;  op2val:18442240474082181119
TEST_RR_OP(sltu, x19, x19, x22, 0x1, 1, 18442240474082181119, x11, 16, x2)

inst_3:
// rs2 == rd != rs1, rs1==x18, rs2==x14, rd==x14, rs2_val == 0, rs1_val == 288230376151711744
// opcode: sltu ; op1:x18; op2:x14; dest:x14; op1val:288230376151711744;  op2val:0
TEST_RR_OP(sltu, x14, x18, x14, 0x0, 288230376151711744, 0, x11, 24, x2)

inst_4:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs2_val == (2**(xlen)-1), rs1_val == 9223372036854775808
// opcode: sltu ; op1:x30; op2:x30; dest:x30; op1val:9223372036854775808;  op2val:18446744073709551615
TEST_RR_OP(sltu, x30, x30, x30, 0x1, 9223372036854775808, 18446744073709551615, x11, 32, x2)

inst_5:
// rs1==x26, rs2==x12, rd==x25, rs2_val == 1, rs1_val == 18446744073709551551
// opcode: sltu ; op1:x26; op2:x12; dest:x25; op1val:18446744073709551551;  op2val:1
TEST_RR_OP(sltu, x25, x26, x12, 0x0, 18446744073709551551, 1, x11, 40, x2)

inst_6:
// rs1==x0, rs2==x21, rd==x7, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 18446181123756130303, rs2_val == 18446181123756130303
// opcode: sltu ; op1:x0; op2:x21; dest:x7; op1val:18446181123756130303;  op2val:18446181123756130303
TEST_RR_OP(sltu, x7, x0, x21, 0x0, 18446181123756130303, 18446181123756130303, x11, 48, x2)

inst_7:
// rs1==x15, rs2==x10, rd==x6, rs1_val == 2, rs2_val == 1024
// opcode: sltu ; op1:x15; op2:x10; dest:x6; op1val:2;  op2val:1024
TEST_RR_OP(sltu, x6, x15, x10, 0x1, 2, 1024, x11, 56, x2)

inst_8:
// rs1==x3, rs2==x4, rd==x9, rs1_val == 4, rs2_val == 18446744073709551359
// opcode: sltu ; op1:x3; op2:x4; dest:x9; op1val:4;  op2val:18446744073709551359
TEST_RR_OP(sltu, x9, x3, x4, 0x1, 4, 18446744073709551359, x11, 64, x2)

inst_9:
// rs1==x5, rs2==x29, rd==x3, rs1_val == 8, rs2_val == 1099511627776
// opcode: sltu ; op1:x5; op2:x29; dest:x3; op1val:8;  op2val:1099511627776
TEST_RR_OP(sltu, x3, x5, x29, 0x1, 8, 1099511627776, x11, 72, x2)

inst_10:
// rs1==x20, rs2==x26, rd==x31, rs1_val == 16, rs2_val == 18446744073709486079
// opcode: sltu ; op1:x20; op2:x26; dest:x31; op1val:16;  op2val:18446744073709486079
TEST_RR_OP(sltu, x31, x20, x26, 0x1, 16, 18446744073709486079, x11, 80, x2)

inst_11:
// rs1==x8, rs2==x17, rd==x16, rs1_val == 32, rs2_val == 18446744073709551614
// opcode: sltu ; op1:x8; op2:x17; dest:x16; op1val:32;  op2val:18446744073709551614
TEST_RR_OP(sltu, x16, x8, x17, 0x1, 32, 18446744073709551614, x11, 88, x2)

inst_12:
// rs1==x24, rs2==x19, rd==x4, rs1_val == 64, rs2_val == 144115188075855872
// opcode: sltu ; op1:x24; op2:x19; dest:x4; op1val:64;  op2val:144115188075855872
TEST_RR_OP(sltu, x4, x24, x19, 0x1, 64, 144115188075855872, x11, 96, x2)

inst_13:
// rs1==x28, rs2==x5, rd==x13, rs1_val == 128, rs2_val == 536870912
// opcode: sltu ; op1:x28; op2:x5; dest:x13; op1val:128;  op2val:536870912
TEST_RR_OP(sltu, x13, x28, x5, 0x1, 128, 536870912, x11, 104, x2)

inst_14:
// rs1==x14, rs2==x2, rd==x10, rs1_val == 256, 
// opcode: sltu ; op1:x14; op2:x2; dest:x10; op1val:256;  op2val:19
TEST_RR_OP(sltu, x10, x14, x2, 0x0, 256, 19, x11, 112, x19)
RVTEST_SIGBASE( x14,signature_x14_0)

inst_15:
// rs1==x16, rs2==x27, rd==x17, rs1_val == 512, rs2_val == 8796093022208
// opcode: sltu ; op1:x16; op2:x27; dest:x17; op1val:512;  op2val:8796093022208
TEST_RR_OP(sltu, x17, x16, x27, 0x1, 512, 8796093022208, x14, 0, x19)

inst_16:
// rs1==x22, rs2==x0, rd==x1, rs1_val == 1024, rs2_val == 17592186044416
// opcode: sltu ; op1:x22; op2:x0; dest:x1; op1val:1024;  op2val:17592186044416
TEST_RR_OP(sltu, x1, x22, x0, 0x1, 1024, 17592186044416, x14, 8, x19)

inst_17:
// rs1==x2, rs2==x31, rd==x22, rs1_val == 2048, rs2_val == 18446744073441116159
// opcode: sltu ; op1:x2; op2:x31; dest:x22; op1val:2048;  op2val:18446744073441116159
TEST_RR_OP(sltu, x22, x2, x31, 0x1, 2048, 18446744073441116159, x14, 16, x19)

inst_18:
// rs1==x10, rs2==x24, rd==x2, rs1_val == 4096, 
// opcode: sltu ; op1:x10; op2:x24; dest:x2; op1val:4096;  op2val:18442240474082181119
TEST_RR_OP(sltu, x2, x10, x24, 0x1, 4096, 18442240474082181119, x14, 24, x19)

inst_19:
// rs1==x9, rs2==x3, rd==x27, rs1_val == 8192, rs2_val == 18446462598732840959
// opcode: sltu ; op1:x9; op2:x3; dest:x27; op1val:8192;  op2val:18446462598732840959
TEST_RR_OP(sltu, x27, x9, x3, 0x1, 8192, 18446462598732840959, x14, 32, x19)

inst_20:
// rs1==x4, rs2==x23, rd==x26, rs1_val == 16384, rs2_val == 18446743936270598143
// opcode: sltu ; op1:x4; op2:x23; dest:x26; op1val:16384;  op2val:18446743936270598143
TEST_RR_OP(sltu, x26, x4, x23, 0x1, 16384, 18446743936270598143, x14, 40, x19)

inst_21:
// rs1==x6, rs2==x18, rd==x12, rs1_val == 32768, rs2_val == 18446744073709420543
// opcode: sltu ; op1:x6; op2:x18; dest:x12; op1val:32768;  op2val:18446744073709420543
TEST_RR_OP(sltu, x12, x6, x18, 0x1, 32768, 18446744073709420543, x14, 48, x19)

inst_22:
// rs1==x12, rs2==x16, rd==x5, rs1_val == 65536, rs2_val == 16140901064495857663
// opcode: sltu ; op1:x12; op2:x16; dest:x5; op1val:65536;  op2val:16140901064495857663
TEST_RR_OP(sltu, x5, x12, x16, 0x1, 65536, 16140901064495857663, x14, 56, x19)

inst_23:
// rs1==x23, rs2==x8, rd==x24, rs1_val == 131072, rs2_val == 137438953472
// opcode: sltu ; op1:x23; op2:x8; dest:x24; op1val:131072;  op2val:137438953472
TEST_RR_OP(sltu, x24, x23, x8, 0x1, 131072, 137438953472, x14, 64, x19)

inst_24:
// rs1==x27, rs2==x28, rd==x0, rs1_val == 262144, rs2_val == 18446744069414584319
// opcode: sltu ; op1:x27; op2:x28; dest:x0; op1val:262144;  op2val:18446744069414584319
TEST_RR_OP(sltu, x0, x27, x28, 0x1, 262144, 18446744069414584319, x14, 72, x19)

inst_25:
// rs1==x11, rs2==x6, rd==x23, rs1_val == 524288, rs2_val == 18446744039349813247
// opcode: sltu ; op1:x11; op2:x6; dest:x23; op1val:524288;  op2val:18446744039349813247
TEST_RR_OP(sltu, x23, x11, x6, 0x1, 524288, 18446744039349813247, x14, 80, x19)

inst_26:
// rs1==x7, rs2==x25, rd==x11, rs1_val == 1048576, rs2_val == 18446741874686296063
// opcode: sltu ; op1:x7; op2:x25; dest:x11; op1val:1048576;  op2val:18446741874686296063
TEST_RR_OP(sltu, x11, x7, x25, 0x1, 1048576, 18446741874686296063, x14, 88, x19)

inst_27:
// rs1==x13, rs2==x7, rd==x15, rs1_val == 2097152, rs2_val == 18446744073709518847
// opcode: sltu ; op1:x13; op2:x7; dest:x15; op1val:2097152;  op2val:18446744073709518847
TEST_RR_OP(sltu, x15, x13, x7, 0x1, 2097152, 18446744073709518847, x14, 96, x19)

inst_28:
// rs1==x31, rs2==x9, rd==x8, rs1_val == 4194304, rs2_val == 18446739675663040511
// opcode: sltu ; op1:x31; op2:x9; dest:x8; op1val:4194304;  op2val:18446739675663040511
TEST_RR_OP(sltu, x8, x31, x9, 0x1, 4194304, 18446739675663040511, x14, 104, x19)

inst_29:
// rs1==x25, rs2==x13, rd==x28, rs1_val == 8388608, 
// opcode: sltu ; op1:x25; op2:x13; dest:x28; op1val:8388608;  op2val:10
TEST_RR_OP(sltu, x28, x25, x13, 0x0, 8388608, 10, x14, 112, x19)

inst_30:
// rs1==x29, rs2==x11, rd==x20, rs1_val == 16777216, 
// opcode: sltu ; op1:x29; op2:x11; dest:x20; op1val:16777216;  op2val:18446744056529682431
TEST_RR_OP(sltu, x20, x29, x11, 0x1, 16777216, 18446744056529682431, x14, 120, x19)

inst_31:
// rs1==x21, rs1_val == 33554432, 
// opcode: sltu ; op1:x21; op2:x13; dest:x5; op1val:33554432;  op2val:14
TEST_RR_OP(sltu, x5, x21, x13, 0x0, 33554432, 14, x14, 128, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_32:
// rs2==x20, rs1_val == 67108864, 
// opcode: sltu ; op1:x19; op2:x20; dest:x30; op1val:67108864;  op2val:18446741874686296063
TEST_RR_OP(sltu, x30, x19, x20, 0x1, 67108864, 18446741874686296063, x1, 0, x2)

inst_33:
// rd==x21, rs1_val == 134217728, rs2_val == 8192
// opcode: sltu ; op1:x10; op2:x24; dest:x21; op1val:134217728;  op2val:8192
TEST_RR_OP(sltu, x21, x10, x24, 0x0, 134217728, 8192, x1, 8, x2)

inst_34:
// rs1_val == 268435456, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:137438953472
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 268435456, 137438953472, x1, 16, x2)

inst_35:
// rs1_val == 536870912, rs2_val == 18446744073692774399
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:18446744073692774399
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 536870912, 18446744073692774399, x1, 24, x2)

inst_36:
// rs1_val == 1073741824, rs2_val == 18446744073709535231
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:18446744073709535231
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1073741824, 18446744073709535231, x1, 32, x2)

inst_37:
// rs1_val == 2147483648, rs2_val == 34359738368
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:34359738368
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2147483648, 34359738368, x1, 40, x2)

inst_38:
// rs1_val == 4294967296, rs2_val == 64
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:64
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967296, 64, x1, 48, x2)

inst_39:
// rs1_val == 8589934592, rs2_val == 18446744073709543423
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:18446744073709543423
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8589934592, 18446744073709543423, x1, 56, x2)

inst_40:
// rs1_val == 17179869184, rs2_val == 18446744073705357311
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:18446744073705357311
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 17179869184, 18446744073705357311, x1, 64, x2)

inst_41:
// rs1_val == 34359738368, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:17
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 34359738368, 17, x1, 72, x2)

inst_42:
// rs1_val == 68719476736, rs2_val == 32768
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:32768
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 68719476736, 32768, x1, 80, x2)

inst_43:
// rs1_val == 137438953472, rs2_val == 17870283321406128127
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:17870283321406128127
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 137438953472, 17870283321406128127, x1, 88, x2)

inst_44:
// rs1_val == 274877906944, rs2_val == 2251799813685248
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:2251799813685248
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 274877906944, 2251799813685248, x1, 96, x2)

inst_45:
// rs1_val == 549755813888, rs2_val == 36028797018963968
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:36028797018963968
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 549755813888, 36028797018963968, x1, 104, x2)

inst_46:
// rs1_val == 1099511627776, rs2_val == 18446744073709549567
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:18446744073709549567
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1099511627776, 18446744073709549567, x1, 112, x2)

inst_47:
// rs1_val == 2199023255552, rs2_val == 4611686018427387904
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:4611686018427387904
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2199023255552, 4611686018427387904, x1, 120, x2)

inst_48:
// rs1_val == 4398046511104, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:17
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4398046511104, 17, x1, 128, x2)

inst_49:
// rs1_val == 8796093022208, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:1099511627776
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 8796093022208, 1099511627776, x1, 136, x2)

inst_50:
// rs1_val == 17592186044416, rs2_val == 18446744073709547519
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:18446744073709547519
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 17592186044416, 18446744073709547519, x1, 144, x2)

inst_51:
// rs1_val == 35184372088832, rs2_val == 18445618173802708991
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:18445618173802708991
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 35184372088832, 18445618173802708991, x1, 152, x2)

inst_52:
// rs1_val == 70368744177664, rs2_val == 18410715276690587647
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:18410715276690587647
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 70368744177664, 18410715276690587647, x1, 160, x2)

inst_53:
// rs1_val == 140737488355328, rs2_val == 17293822569102704639
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:17293822569102704639
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 140737488355328, 17293822569102704639, x1, 168, x2)

inst_54:
// rs1_val == 281474976710656, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:14
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 281474976710656, 14, x1, 176, x2)

inst_55:
// rs1_val == 562949953421312, rs2_val == 4398046511104
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:4398046511104
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 562949953421312, 4398046511104, x1, 184, x2)

inst_56:
// rs1_val == 1125899906842624, rs2_val == 134217728
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:134217728
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1125899906842624, 134217728, x1, 192, x2)

inst_57:
// rs1_val == 2251799813685248, rs2_val == 6148914691236517205
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:6148914691236517205
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2251799813685248, 6148914691236517205, x1, 200, x2)

inst_58:
// rs1_val == 4503599627370496, rs2_val == 18446744073709027327
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:18446744073709027327
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4503599627370496, 18446744073709027327, x1, 208, x2)

inst_59:
// rs1_val == 9007199254740992, rs2_val == 4294967296
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 9007199254740992, 4294967296, x1, 216, x2)

inst_60:
// rs1_val == 18014398509481984, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:18446462598732840959
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18014398509481984, 18446462598732840959, x1, 224, x2)

inst_61:
// rs1_val == 36028797018963968, rs2_val == 67108864
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:67108864
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 36028797018963968, 67108864, x1, 232, x2)

inst_62:
// rs1_val == 72057594037927936, rs2_val == 18446744004990074879
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:18446744004990074879
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 72057594037927936, 18446744004990074879, x1, 240, x2)

inst_63:
// rs1_val == 144115188075855872, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:18446744073709518847
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 144115188075855872, 18446744073709518847, x1, 248, x2)

inst_64:
// rs1_val == 576460752303423488, rs2_val == 18446744072635809791
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:18446744072635809791
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 576460752303423488, 18446744072635809791, x1, 256, x2)

inst_65:
// rs1_val == 1152921504606846976, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:4398046511104
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1152921504606846976, 4398046511104, x1, 264, x2)

inst_66:
// rs1_val == 2305843009213693952, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:18446744073441116159
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2305843009213693952, 18446744073441116159, x1, 272, x2)

inst_67:
// rs1_val == 4611686018427387904, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:15
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4611686018427387904, 15, x1, 280, x2)

inst_68:
// rs1_val == 18446744073709551614, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551614;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551614, 4294967296, x1, 288, x2)

inst_69:
// rs1_val == 18446744073709551613, rs2_val == 1125899906842624
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551613;  op2val:1125899906842624
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551613, 1125899906842624, x1, 296, x2)

inst_70:
// rs1_val == 18446744073709551611, rs2_val == 32
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551611;  op2val:32
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551611, 32, x1, 304, x2)

inst_71:
// rs1_val == 18446744073709551607, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551607;  op2val:64
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551607, 64, x1, 312, x2)

inst_72:
// rs1_val == 18446744073709551599, rs2_val == 18446744073709551487
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551599;  op2val:18446744073709551487
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551599, 18446744073709551487, x1, 320, x2)

inst_73:
// rs1_val == 18446744073709551583, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551583;  op2val:4398046511104
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551583, 4398046511104, x1, 328, x2)

inst_74:
// rs1_val == 18446744073709551487, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551487;  op2val:1099511627776
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551487, 1099511627776, x1, 336, x2)

inst_75:
// rs1_val == 18446744073709551359, rs2_val == 65536
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551359;  op2val:65536
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551359, 65536, x1, 344, x2)

inst_76:
// rs1_val == 18446744073709551103, rs2_val == 2048
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551103;  op2val:2048
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551103, 2048, x1, 352, x2)

inst_77:
// rs1_val == 18446744073709550591, rs2_val == 128
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709550591;  op2val:128
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709550591, 128, x1, 360, x2)

inst_78:
// rs1_val == 18446744073709549567, rs2_val == 18446735277616529407
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709549567;  op2val:18446735277616529407
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709549567, 18446735277616529407, x1, 368, x2)

inst_79:
// rs1_val == 18446744073709547519, rs2_val == 16777216
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709547519;  op2val:16777216
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709547519, 16777216, x1, 376, x2)

inst_80:
// rs2_val == 18374686479671623679, rs1_val == 18428729675200069631
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18428729675200069631;  op2val:18374686479671623679
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18428729675200069631, 18374686479671623679, x1, 384, x2)

inst_81:
// rs2_val == 18302628885633695743, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:18302628885633695743
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 36028797018963968, 18302628885633695743, x1, 392, x2)

inst_82:
// rs2_val == 18158513697557839871, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:18158513697557839871
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 131072, 18158513697557839871, x1, 400, x2)

inst_83:
// rs2_val == 13835058055282163711, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:13835058055282163711
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 13835058055282163711, x1, 408, x2)

inst_84:
// rs2_val == 9223372036854775807, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:9223372036854775807
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 137438953472, 9223372036854775807, x1, 416, x2)

inst_85:
// rs2_val == 12297829382473034410, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551599;  op2val:12297829382473034410
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551599, 12297829382473034410, x1, 424, x2)

inst_86:
// rs1_val == 18446744073709543423, rs2_val == 18446744073172680703
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709543423;  op2val:18446744073172680703
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709543423, 18446744073172680703, x1, 432, x2)

inst_87:
// rs1_val == 18446744073709535231, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709535231;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709535231, 4294967296, x1, 440, x2)

inst_88:
// rs1_val == 18446744073709518847, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709518847;  op2val:9
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709518847, 9, x1, 448, x2)

inst_89:
// rs1_val == 18446744073709486079, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709486079;  op2val:64
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709486079, 64, x1, 456, x2)

inst_90:
// rs1_val == 18446744073709420543, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709420543;  op2val:14
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709420543, 14, x1, 464, x2)

inst_91:
// rs1_val == 18446744073709289471, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709289471;  op2val:18446181123756130303
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709289471, 18446181123756130303, x1, 472, x2)

inst_92:
// rs1_val == 18446744073709027327, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709027327;  op2val:8796093022208
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709027327, 8796093022208, x1, 480, x2)

inst_93:
// rs1_val == 18446744073708503039, rs2_val == 18446744073709551599
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073708503039;  op2val:18446744073709551599
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744073708503039, 18446744073709551599, x1, 488, x2)

inst_94:
// rs1_val == 18446744073707454463, rs2_val == 131072
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073707454463;  op2val:131072
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073707454463, 131072, x1, 496, x2)

inst_95:
// rs1_val == 18446744073705357311, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073705357311;  op2val:18446462598732840959
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073705357311, 18446462598732840959, x1, 504, x2)

inst_96:
// rs1_val == 18446744073701163007, rs2_val == 281474976710656
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073701163007;  op2val:281474976710656
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073701163007, 281474976710656, x1, 512, x2)

inst_97:
// rs1_val == 18446744073692774399, rs2_val == 16384
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073692774399;  op2val:16384
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073692774399, 16384, x1, 520, x2)

inst_98:
// rs1_val == 18446744073675997183, rs2_val == 256
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073675997183;  op2val:256
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073675997183, 256, x1, 528, x2)

inst_99:
// rs1_val == 18446744073642442751, rs2_val == 18446744065119617023
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073642442751;  op2val:18446744065119617023
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073642442751, 18446744065119617023, x1, 536, x2)

inst_100:
// rs1_val == 18446744073575333887, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073575333887;  op2val:14
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073575333887, 14, x1, 544, x2)

inst_101:
// rs1_val == 18446744073441116159, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073441116159;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073441116159, 1, x1, 552, x2)

inst_102:
// rs1_val == 18446744073172680703, rs2_val == 562949953421312
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073172680703;  op2val:562949953421312
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073172680703, 562949953421312, x1, 560, x2)

inst_103:
// rs1_val == 18446744072635809791, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744072635809791;  op2val:9223372036854775807
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744072635809791, 9223372036854775807, x1, 568, x2)

inst_104:
// rs1_val == 18446744071562067967, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744071562067967;  op2val:18446744056529682431
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744071562067967, 18446744056529682431, x1, 576, x2)

inst_105:
// rs1_val == 18446744069414584319, rs2_val == 18446744073575333887
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744069414584319;  op2val:18446744073575333887
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744069414584319, 18446744073575333887, x1, 584, x2)

inst_106:
// rs1_val == 18446744065119617023, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744065119617023;  op2val:134217728
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744065119617023, 134217728, x1, 592, x2)

inst_107:
// rs1_val == 18446744056529682431, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744056529682431;  op2val:18446744073709551599
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744056529682431, 18446744073709551599, x1, 600, x2)

inst_108:
// rs1_val == 18446744039349813247, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744039349813247;  op2val:4294967296
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744039349813247, 4294967296, x1, 608, x2)

inst_109:
// rs1_val == 18446744004990074879, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744004990074879;  op2val:18446744039349813247
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744004990074879, 18446744039349813247, x1, 616, x2)

inst_110:
// rs1_val == 18446743936270598143, rs2_val == 18446744073709551613
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743936270598143;  op2val:18446744073709551613
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446743936270598143, 18446744073709551613, x1, 624, x2)

inst_111:
// rs1_val == 18446743798831644671, rs2_val == 2147483648
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743798831644671;  op2val:2147483648
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446743798831644671, 2147483648, x1, 632, x2)

inst_112:
// rs1_val == 18446743523953737727, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743523953737727;  op2val:18446744069414584319
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446743523953737727, 18446744069414584319, x1, 640, x2)

inst_113:
// rs1_val == 18446742974197923839, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446742974197923839;  op2val:18446744073709547519
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446742974197923839, 18446744073709547519, x1, 648, x2)

inst_114:
// rs1_val == 18446741874686296063, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446741874686296063;  op2val:18446744073709551599
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446741874686296063, 18446744073709551599, x1, 656, x2)

inst_115:
// rs1_val == 18446739675663040511, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446739675663040511;  op2val:18446744073709551614
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446739675663040511, 18446744073709551614, x1, 664, x2)

inst_116:
// rs1_val == 18446735277616529407, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446735277616529407;  op2val:18446744073709027327
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446735277616529407, 18446744073709027327, x1, 672, x2)

inst_117:
// rs1_val == 18446726481523507199, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446726481523507199;  op2val:17293822569102704639
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446726481523507199, 17293822569102704639, x1, 680, x2)

inst_118:
// rs1_val == 18446708889337462783, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446708889337462783;  op2val:6
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446708889337462783, 6, x1, 688, x2)

inst_119:
// rs1_val == 18446673704965373951, rs2_val == 4096
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446673704965373951;  op2val:4096
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446673704965373951, 4096, x1, 696, x2)

inst_120:
// rs1_val == 18446603336221196287, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446603336221196287;  op2val:16384
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446603336221196287, 16384, x1, 704, x2)

inst_121:
// rs1_val == 18446462598732840959, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446462598732840959;  op2val:536870912
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446462598732840959, 536870912, x1, 712, x2)

inst_122:
// rs1_val == 18445618173802708991, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18445618173802708991;  op2val:18446744073709535231
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18445618173802708991, 18446744073709535231, x1, 720, x2)

inst_123:
// rs1_val == 18444492273895866367, rs2_val == 18437736874454810623
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18444492273895866367;  op2val:18437736874454810623
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18444492273895866367, 18437736874454810623, x1, 728, x2)

inst_124:
// rs1_val == 18442240474082181119, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18442240474082181119;  op2val:34359738368
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18442240474082181119, 34359738368, x1, 736, x2)

inst_125:
// rs1_val == 18437736874454810623, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18437736874454810623;  op2val:18446743936270598143
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18437736874454810623, 18446743936270598143, x1, 744, x2)

inst_126:
// rs1_val == 18410715276690587647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18410715276690587647;  op2val:18446744039349813247
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18410715276690587647, 18446744039349813247, x1, 752, x2)

inst_127:
// rs1_val == 18374686479671623679, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18374686479671623679;  op2val:536870912
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18374686479671623679, 536870912, x1, 760, x2)

inst_128:
// rs1_val == 18302628885633695743, rs2_val == 18446744073709550591
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18302628885633695743;  op2val:18446744073709550591
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18302628885633695743, 18446744073709550591, x1, 768, x2)

inst_129:
// rs1_val == 18158513697557839871, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18158513697557839871;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18158513697557839871, 1, x1, 776, x2)

inst_130:
// rs1_val == 17870283321406128127, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17870283321406128127;  op2val:18446744073709551613
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 17870283321406128127, 18446744073709551613, x1, 784, x2)

inst_131:
// rs1_val == 17293822569102704639, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17293822569102704639;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 17293822569102704639, 5, x1, 792, x2)

inst_132:
// rs1_val == 16140901064495857663, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:16140901064495857663;  op2val:18446744073709551359
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 16140901064495857663, 18446744073709551359, x1, 800, x2)

inst_133:
// rs1_val == 13835058055282163711, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:13835058055282163711;  op2val:8192
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 13835058055282163711, 8192, x1, 808, x2)

inst_134:
// rs1_val == 9223372036854775807, rs2_val == 549755813888
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:549755813888
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 9223372036854775807, 549755813888, x1, 816, x2)

inst_135:
// rs1_val == 6148914691236517205, rs2_val == 18446744071562067967
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:18446744071562067967
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6148914691236517205, 18446744071562067967, x1, 824, x2)

inst_136:
// rs1_val == 12297829382473034410, rs2_val == 18446744073701163007
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12297829382473034410;  op2val:18446744073701163007
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 12297829382473034410, 18446744073701163007, x1, 832, x2)

inst_137:
// rs2_val == 2, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18158513697557839871;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18158513697557839871, 2, x1, 840, x2)

inst_138:
// rs2_val == 4, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709549567;  op2val:4
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709549567, 4, x1, 848, x2)

inst_139:
// rs2_val == 8, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743936270598143;  op2val:8
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446743936270598143, 8, x1, 856, x2)

inst_140:
// rs2_val == 16, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709420543;  op2val:16
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709420543, 16, x1, 864, x2)

inst_141:
// rs2_val == 512, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073701163007;  op2val:512
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073701163007, 512, x1, 872, x2)

inst_142:
// rs2_val == 262144, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:262144
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 33554432, 262144, x1, 880, x2)

inst_143:
// rs2_val == 524288, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:524288
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 8796093022208, 524288, x1, 888, x2)

inst_144:
// rs2_val == 1048576, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17;  op2val:1048576
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 17, 1048576, x1, 896, x2)

inst_145:
// rs2_val == 2097152, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709518847;  op2val:2097152
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709518847, 2097152, x1, 904, x2)

inst_146:
// rs2_val == 4194304, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709547519;  op2val:4194304
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709547519, 4194304, x1, 912, x2)

inst_147:
// rs2_val == 8388608, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:8388608
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 536870912, 8388608, x1, 920, x2)

inst_148:
// rs2_val == 33554432, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709547519;  op2val:33554432
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709547519, 33554432, x1, 928, x2)

inst_149:
// rs2_val == 268435456, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17870283321406128127;  op2val:268435456
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 17870283321406128127, 268435456, x1, 936, x2)

inst_150:
// rs2_val == 1073741824, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073692774399;  op2val:1073741824
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073692774399, 1073741824, x1, 944, x2)

inst_151:
// rs2_val == 8589934592, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:8589934592
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 8589934592, x1, 952, x2)

inst_152:
// rs2_val == 17179869184, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:15;  op2val:17179869184
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 15, 17179869184, x1, 960, x2)

inst_153:
// rs2_val == 68719476736, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:68719476736
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2305843009213693952, 68719476736, x1, 968, x2)

inst_154:
// rs2_val == 274877906944, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:274877906944
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294967296, 274877906944, x1, 976, x2)

inst_155:
// rs2_val == 2199023255552, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:2199023255552
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 562949953421312, 2199023255552, x1, 984, x2)

inst_156:
// rs2_val == 72057594037927936, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:72057594037927936
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 140737488355328, 72057594037927936, x1, 992, x2)

inst_157:
// rs2_val == 18014398509481984, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:18014398509481984
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 8589934592, 18014398509481984, x1, 1000, x2)

inst_158:
// rs2_val == 288230376151711744, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551607;  op2val:288230376151711744
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551607, 288230376151711744, x1, 1008, x2)

inst_159:
// rs2_val == 576460752303423488, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:576460752303423488
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1152921504606846976, 576460752303423488, x1, 1016, x2)

inst_160:
// rs2_val == 1152921504606846976, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:17870283321406128127;  op2val:1152921504606846976
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 17870283321406128127, 1152921504606846976, x1, 1024, x2)

inst_161:
// rs2_val == 2305843009213693952, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:13;  op2val:2305843009213693952
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 13, 2305843009213693952, x1, 1032, x2)

inst_162:
// rs2_val == 9223372036854775808, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:9223372036854775808
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 9223372036854775808, x1, 1040, x2)

inst_163:
// rs2_val == 18446744073709551611, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:11;  op2val:18446744073709551611
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 11, 18446744073709551611, x1, 1048, x2)

inst_164:
// rs2_val == 18446744073709551607, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:18446744073709551607
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 18446744073709551607, x1, 1056, x2)

inst_165:
// rs2_val == 18446744073709551583, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073707454463;  op2val:18446744073709551583
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744073707454463, 18446744073709551583, x1, 1064, x2)

inst_166:
// rs2_val == 18446744073709551551, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:18446744073709551551
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 9223372036854775807, 18446744073709551551, x1, 1072, x2)

inst_167:
// rs2_val == 18446744073709551103, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:18446744073709551103
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 16777216, 18446744073709551103, x1, 1080, x2)

inst_168:
// rs2_val == 18446744073709289471, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744069414584319;  op2val:18446744073709289471
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 18446744069414584319, 18446744073709289471, x1, 1088, x2)

inst_169:
// rs2_val == 70368744177664, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073575333887;  op2val:70368744177664
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073575333887, 70368744177664, x1, 1096, x2)

inst_170:
// rs2_val == 18446744073708503039, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709486079;  op2val:18446744073708503039
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709486079, 18446744073708503039, x1, 1104, x2)

inst_171:
// rs2_val == 18446744073707454463, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:11;  op2val:18446744073707454463
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 11, 18446744073707454463, x1, 1112, x2)

inst_172:
// rs2_val == 18446603336221196287, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709550591;  op2val:18446603336221196287
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709550591, 18446603336221196287, x1, 1120, x2)

inst_173:
// rs2_val == 18446744073675997183, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551583;  op2val:18446744073675997183
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551583, 18446744073675997183, x1, 1128, x2)

inst_174:
// rs2_val == 18446744073642442751, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:18446744073642442751
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 5, 18446744073642442751, x1, 1136, x2)

inst_175:
// rs2_val == 18446743798831644671, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:18446743798831644671
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2199023255552, 18446743798831644671, x1, 1144, x2)

inst_176:
// rs2_val == 18446743523953737727, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:18446743523953737727
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4, 18446743523953737727, x1, 1152, x2)

inst_177:
// rs2_val == 18446742974197923839, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:13;  op2val:18446742974197923839
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 13, 18446742974197923839, x1, 1160, x2)

inst_178:
// rs2_val == 18446726481523507199, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:13;  op2val:18446726481523507199
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 13, 18446726481523507199, x1, 1168, x2)

inst_179:
// rs2_val == 35184372088832, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446743936270598143;  op2val:35184372088832
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446743936270598143, 35184372088832, x1, 1176, x2)

inst_180:
// rs2_val == 18446708889337462783, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:18446708889337462783
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 288230376151711744, 18446708889337462783, x1, 1184, x2)

inst_181:
// rs2_val == 18446673704965373951, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:18446673704965373951
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2147483648, 18446673704965373951, x1, 1192, x2)

inst_182:
// rs2_val == 140737488355328, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:140737488355328
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3, 140737488355328, x1, 1200, x2)

inst_183:
// rs2_val == 18444492273895866367, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:18444492273895866367
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 68719476736, 18444492273895866367, x1, 1208, x2)

inst_184:
// rs2_val == 4503599627370496, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446744073709551615;  op2val:4503599627370496
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446744073709551615, 4503599627370496, x1, 1216, x2)

inst_185:
// rs2_val == 9007199254740992, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:9007199254740992
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 512, 9007199254740992, x1, 1224, x2)

inst_186:
// rs2_val == 18428729675200069631, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:18428729675200069631
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 288230376151711744, 18428729675200069631, x1, 1232, x2)

inst_187:
// rs2_val == (2**(xlen)-1), rs1_val == 9223372036854775808
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775808;  op2val:18446744073709551615
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 9223372036854775808, 18446744073709551615, x1, 1240, x2)

inst_188:
// rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 18446181123756130303, rs2_val == 18446181123756130303
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:18446181123756130303;  op2val:18446181123756130303
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 18446181123756130303, 18446181123756130303, x1, 1248, x2)

inst_189:
// rs1_val == 1024, rs2_val == 17592186044416
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:17592186044416
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1024, 17592186044416, x1, 1256, x2)

inst_190:
// rs1_val == 262144, rs2_val == 18446744069414584319
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:18446744069414584319
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 262144, 18446744069414584319, x1, 1264, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x14_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 159*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
