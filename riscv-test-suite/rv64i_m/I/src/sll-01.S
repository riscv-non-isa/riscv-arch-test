
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sll instruction of the RISC-V i extension for the sll covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64i")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sll)

RVTEST_SIGBASE( x6,signature_x6_1)

inst_0:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x7, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == -549755813889, rs2_val == 2
// opcode: sll ; op1:x16; op2:x16; dest:x7; op1val:-549755813889;  op2val:2
TEST_RR_OP(sll, x7, x16, x16, 0xfffffdfffffffffc, -549755813889, 2, x6, 0, x20)

inst_1:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 17179869184, rs2_val == 31
// opcode: sll ; op1:x27; op2:x27; dest:x27; op1val:17179869184;  op2val:31
TEST_RR_OP(sll, x27, x27, x27, 0x0, 17179869184, 31, x6, 8, x20)

inst_2:
// rs1 == rd != rs2, rs1==x22, rs2==x31, rd==x22, rs1_val < 0 and rs2_val == 0, rs1_val == -262145
// opcode: sll ; op1:x22; op2:x31; dest:x22; op1val:-262145;  op2val:0
TEST_RR_OP(sll, x22, x22, x31, 0xfffffffffffbffff, -262145, 0, x6, 16, x20)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x19, rd==x14, rs1_val > 0 and rs2_val == 0, rs1_val == 67108864
// opcode: sll ; op1:x23; op2:x19; dest:x14; op1val:67108864;  op2val:0
TEST_RR_OP(sll, x14, x23, x19, 0x4000000, 67108864, 0, x6, 24, x20)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x21, rd==x21, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, rs1_val == 4, rs2_val == 4, rs1_val==4
// opcode: sll ; op1:x0; op2:x21; dest:x21; op1val:4;  op2val:4
TEST_RR_OP(sll, x21, x0, x21, 0x40, 4, 4, x6, 32, x20)

inst_5:
// rs1==x1, rs2==x10, rd==x18, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -9223372036854775808
// opcode: sll ; op1:x1; op2:x10; dest:x18; op1val:-9223372036854775808;  op2val:63
TEST_RR_OP(sll, x18, x1, x10, 0x0, -9223372036854775808, 63, x6, 40, x20)

inst_6:
// rs1==x3, rs2==x25, rd==x24, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs1_val==0
// opcode: sll ; op1:x3; op2:x25; dest:x24; op1val:0;  op2val:4
TEST_RR_OP(sll, x24, x3, x25, 0x0, 0, 4, x6, 48, x20)

inst_7:
// rs1==x31, rs2==x17, rd==x23, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 9223372036854775807
// opcode: sll ; op1:x31; op2:x17; dest:x23; op1val:9223372036854775807;  op2val:18
TEST_RR_OP(sll, x23, x31, x17, 0xfffffffffffc0000, 9223372036854775807, 18, x6, 56, x20)

inst_8:
// rs1==x21, rs2==x13, rd==x11, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1
// opcode: sll ; op1:x21; op2:x13; dest:x11; op1val:1;  op2val:31
TEST_RR_OP(sll, x11, x21, x13, 0x80000000, 1, 31, x6, 64, x20)

inst_9:
// rs1==x2, rs2==x28, rd==x19, rs1_val == 2, rs1_val==2
// opcode: sll ; op1:x2; op2:x28; dest:x19; op1val:2;  op2val:17
TEST_RR_OP(sll, x19, x2, x28, 0x40000, 2, 17, x6, 72, x20)

inst_10:
// rs1==x5, rs2==x23, rd==x4, rs1_val == 8, 
// opcode: sll ; op1:x5; op2:x23; dest:x4; op1val:8;  op2val:19
TEST_RR_OP(sll, x4, x5, x23, 0x400000, 8, 19, x6, 80, x20)

inst_11:
// rs1==x18, rs2==x0, rd==x1, rs1_val == 16, 
// opcode: sll ; op1:x18; op2:x0; dest:x1; op1val:16;  op2val:4
TEST_RR_OP(sll, x1, x18, x0, 0x100, 16, 4, x6, 88, x20)

inst_12:
// rs1==x7, rs2==x12, rd==x3, rs1_val == 32, 
// opcode: sll ; op1:x7; op2:x12; dest:x3; op1val:32;  op2val:17
TEST_RR_OP(sll, x3, x7, x12, 0x400000, 32, 17, x6, 96, x20)

inst_13:
// rs1==x19, rs2==x24, rd==x25, rs1_val == 64, 
// opcode: sll ; op1:x19; op2:x24; dest:x25; op1val:64;  op2val:14
TEST_RR_OP(sll, x25, x19, x24, 0x100000, 64, 14, x6, 104, x20)

inst_14:
// rs1==x14, rs2==x11, rd==x31, rs1_val == 128, rs2_val == 47
// opcode: sll ; op1:x14; op2:x11; dest:x31; op1val:128;  op2val:47
TEST_RR_OP(sll, x31, x14, x11, 0x400000, 128, 47, x6, 112, x20)

inst_15:
// rs1==x24, rs2==x26, rd==x12, rs1_val == 256, 
// opcode: sll ; op1:x24; op2:x26; dest:x12; op1val:256;  op2val:5
TEST_RR_OP(sll, x12, x24, x26, 0x2000, 256, 5, x6, 120, x20)

inst_16:
// rs1==x10, rs2==x22, rd==x9, rs1_val == 512, rs2_val == 32
// opcode: sll ; op1:x10; op2:x22; dest:x9; op1val:512;  op2val:32
TEST_RR_OP(sll, x9, x10, x22, 0x200, 512, 32, x6, 128, x20)

inst_17:
// rs1==x4, rs2==x9, rd==x30, rs1_val == 1024, 
// opcode: sll ; op1:x4; op2:x9; dest:x30; op1val:1024;  op2val:7
TEST_RR_OP(sll, x30, x4, x9, 0x20000, 1024, 7, x6, 136, x20)

inst_18:
// rs1==x28, rs2==x8, rd==x15, rs1_val == 2048, 
// opcode: sll ; op1:x28; op2:x8; dest:x15; op1val:2048;  op2val:63
TEST_RR_OP(sll, x15, x28, x8, 0x40000000000, 2048, 63, x6, 144, x20)
RVTEST_SIGBASE( x19,signature_x19_0)

inst_19:
// rs1==x29, rs2==x2, rd==x6, rs1_val == 4096, rs2_val == 61
// opcode: sll ; op1:x29; op2:x2; dest:x6; op1val:4096;  op2val:61
TEST_RR_OP(sll, x6, x29, x2, 0x20000000000, 4096, 61, x19, 0, x21)

inst_20:
// rs1==x6, rs2==x20, rd==x5, rs1_val == 8192, 
// opcode: sll ; op1:x6; op2:x20; dest:x5; op1val:8192;  op2val:61
TEST_RR_OP(sll, x5, x6, x20, 0x40000000000, 8192, 61, x19, 8, x21)

inst_21:
// rs1==x11, rs2==x14, rd==x29, rs1_val == 16384, rs2_val == 55
// opcode: sll ; op1:x11; op2:x14; dest:x29; op1val:16384;  op2val:55
TEST_RR_OP(sll, x29, x11, x14, 0x2000000000, 16384, 55, x19, 16, x21)

inst_22:
// rs1==x15, rs2==x1, rd==x17, rs1_val == 32768, 
// opcode: sll ; op1:x15; op2:x1; dest:x17; op1val:32768;  op2val:15
TEST_RR_OP(sll, x17, x15, x1, 0x40000000, 32768, 15, x19, 24, x21)

inst_23:
// rs1==x9, rs2==x30, rd==x26, rs1_val == 65536, rs2_val == 1
// opcode: sll ; op1:x9; op2:x30; dest:x26; op1val:65536;  op2val:1
TEST_RR_OP(sll, x26, x9, x30, 0x20000, 65536, 1, x19, 32, x21)

inst_24:
// rs1==x12, rs2==x18, rd==x0, rs1_val == 131072, 
// opcode: sll ; op1:x12; op2:x18; dest:x0; op1val:131072;  op2val:0
TEST_RR_OP(sll, x0, x12, x18, 0x20000, 131072, 0, x19, 40, x21)

inst_25:
// rs1==x17, rs2==x29, rd==x20, rs1_val == 262144, 
// opcode: sll ; op1:x17; op2:x29; dest:x20; op1val:262144;  op2val:47
TEST_RR_OP(sll, x20, x17, x29, 0x200000000, 262144, 47, x19, 48, x21)

inst_26:
// rs1==x25, rs2==x6, rd==x28, rs1_val == 524288, rs2_val == 16
// opcode: sll ; op1:x25; op2:x6; dest:x28; op1val:524288;  op2val:16
TEST_RR_OP(sll, x28, x25, x6, 0x800000000, 524288, 16, x19, 56, x21)

inst_27:
// rs1==x26, rs2==x7, rd==x16, rs1_val == 1048576, 
// opcode: sll ; op1:x26; op2:x7; dest:x16; op1val:1048576;  op2val:13
TEST_RR_OP(sll, x16, x26, x7, 0x200000000, 1048576, 13, x19, 64, x21)

inst_28:
// rs1==x20, rs2==x3, rd==x13, rs1_val == 2097152, 
// opcode: sll ; op1:x20; op2:x3; dest:x13; op1val:2097152;  op2val:2
TEST_RR_OP(sll, x13, x20, x3, 0x800000, 2097152, 2, x19, 72, x21)

inst_29:
// rs1==x13, rs2==x15, rd==x2, rs1_val == 4194304, 
// opcode: sll ; op1:x13; op2:x15; dest:x2; op1val:4194304;  op2val:9
TEST_RR_OP(sll, x2, x13, x15, 0x80000000, 4194304, 9, x19, 80, x21)

inst_30:
// rs1==x8, rs2==x4, rd==x10, rs1_val == 8388608, 
// opcode: sll ; op1:x8; op2:x4; dest:x10; op1val:8388608;  op2val:7
TEST_RR_OP(sll, x10, x8, x4, 0x40000000, 8388608, 7, x19, 88, x21)

inst_31:
// rs1==x30, rs2==x5, rd==x8, rs1_val == 16777216, 
// opcode: sll ; op1:x30; op2:x5; dest:x8; op1val:16777216;  op2val:19
TEST_RR_OP(sll, x8, x30, x5, 0x80000000000, 16777216, 19, x19, 96, x21)

inst_32:
// rs1_val == 33554432, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0x4000000000, 33554432, 13, x19, 104, x21)

inst_33:
// rs1_val == 134217728, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:31
TEST_RR_OP(sll, x12, x10, x11, 0x400000000000000, 134217728, 31, x19, 112, x21)

inst_34:
// rs1_val == 268435456, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:2
TEST_RR_OP(sll, x12, x10, x11, 0x40000000, 268435456, 2, x19, 120, x21)

inst_35:
// rs1_val == 536870912, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:32
TEST_RR_OP(sll, x12, x10, x11, 0x20000000, 536870912, 32, x19, 128, x21)

inst_36:
// rs1_val == 1073741824, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:5
TEST_RR_OP(sll, x12, x10, x11, 0x800000000, 1073741824, 5, x19, 136, x21)

inst_37:
// rs1_val == 2147483648, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:2
TEST_RR_OP(sll, x12, x10, x11, 0x200000000, 2147483648, 2, x19, 144, x21)

inst_38:
// rs1_val == 4294967296, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:15
TEST_RR_OP(sll, x12, x10, x11, 0x800000000000, 4294967296, 15, x19, 152, x21)

inst_39:
// rs1_val == 8589934592, rs2_val == 62
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:62
TEST_RR_OP(sll, x12, x10, x11, 0x8000000000000000, 8589934592, 62, x19, 160, x21)

inst_40:
// rs1_val == 34359738368, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:6
TEST_RR_OP(sll, x12, x10, x11, 0x20000000000, 34359738368, 6, x19, 168, x21)

inst_41:
// rs1_val == 68719476736, rs2_val == 21
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:21
TEST_RR_OP(sll, x12, x10, x11, 0x200000000000000, 68719476736, 21, x19, 176, x21)

inst_42:
// rs1_val == 137438953472, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:32
TEST_RR_OP(sll, x12, x10, x11, 0x2000000000, 137438953472, 32, x19, 184, x21)

inst_43:
// rs1_val == 274877906944, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:17
TEST_RR_OP(sll, x12, x10, x11, 0x80000000000000, 274877906944, 17, x19, 192, x21)

inst_44:
// rs1_val == 549755813888, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:5
TEST_RR_OP(sll, x12, x10, x11, 0x100000000000, 549755813888, 5, x19, 200, x21)

inst_45:
// rs1_val == 1099511627776, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:32
TEST_RR_OP(sll, x12, x10, x11, 0x10000000000, 1099511627776, 32, x19, 208, x21)

inst_46:
// rs1_val == 2199023255552, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:32
TEST_RR_OP(sll, x12, x10, x11, 0x20000000000, 2199023255552, 32, x19, 216, x21)

inst_47:
// rs1_val == 4398046511104, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:7
TEST_RR_OP(sll, x12, x10, x11, 0x2000000000000, 4398046511104, 7, x19, 224, x21)

inst_48:
// rs1_val == 8796093022208, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:31
TEST_RR_OP(sll, x12, x10, x11, 0x0, 8796093022208, 31, x19, 232, x21)

inst_49:
// rs1_val == 17592186044416, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:12
TEST_RR_OP(sll, x12, x10, x11, 0x100000000000000, 17592186044416, 12, x19, 240, x21)

inst_50:
// rs1_val == 35184372088832, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:19
TEST_RR_OP(sll, x12, x10, x11, 0x0, 35184372088832, 19, x19, 248, x21)

inst_51:
// rs1_val == 70368744177664, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:31
TEST_RR_OP(sll, x12, x10, x11, 0x0, 70368744177664, 31, x19, 256, x21)

inst_52:
// rs1_val == 140737488355328, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:5
TEST_RR_OP(sll, x12, x10, x11, 0x10000000000000, 140737488355328, 5, x19, 264, x21)

inst_53:
// rs1_val == 281474976710656, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:7
TEST_RR_OP(sll, x12, x10, x11, 0x80000000000000, 281474976710656, 7, x19, 272, x21)

inst_54:
// rs1_val == 562949953421312, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:62
TEST_RR_OP(sll, x12, x10, x11, 0x0, 562949953421312, 62, x19, 280, x21)

inst_55:
// rs1_val == 1125899906842624, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:10
TEST_RR_OP(sll, x12, x10, x11, 0x1000000000000000, 1125899906842624, 10, x19, 288, x21)

inst_56:
// rs1_val == 2251799813685248, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:61
TEST_RR_OP(sll, x12, x10, x11, 0x0, 2251799813685248, 61, x19, 296, x21)

inst_57:
// rs1_val == 4503599627370496, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:47
TEST_RR_OP(sll, x12, x10, x11, 0x0, 4503599627370496, 47, x19, 304, x21)

inst_58:
// rs1_val == 9007199254740992, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:19
TEST_RR_OP(sll, x12, x10, x11, 0x0, 9007199254740992, 19, x19, 312, x21)

inst_59:
// rs1_val == 18014398509481984, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:47
TEST_RR_OP(sll, x12, x10, x11, 0x0, 18014398509481984, 47, x19, 320, x21)

inst_60:
// rs1_val == 36028797018963968, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0x0, 36028797018963968, 13, x19, 328, x21)

inst_61:
// rs1_val == 72057594037927936, rs2_val == 42
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:42
TEST_RR_OP(sll, x12, x10, x11, 0x0, 72057594037927936, 42, x19, 336, x21)

inst_62:
// rs1_val == 144115188075855872, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:19
TEST_RR_OP(sll, x12, x10, x11, 0x0, 144115188075855872, 19, x19, 344, x21)

inst_63:
// rs1_val == 288230376151711744, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:6
TEST_RR_OP(sll, x12, x10, x11, 0x0, 288230376151711744, 6, x19, 352, x21)

inst_64:
// rs1_val == 576460752303423488, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:32
TEST_RR_OP(sll, x12, x10, x11, 0x800000000000000, 576460752303423488, 32, x19, 360, x21)

inst_65:
// rs1_val == 1152921504606846976, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:61
TEST_RR_OP(sll, x12, x10, x11, 0x0, 1152921504606846976, 61, x19, 368, x21)

inst_66:
// rs1_val == 2305843009213693952, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:17
TEST_RR_OP(sll, x12, x10, x11, 0x0, 2305843009213693952, 17, x19, 376, x21)

inst_67:
// rs1_val == 4611686018427387904, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:6
TEST_RR_OP(sll, x12, x10, x11, 0x0, 4611686018427387904, 6, x19, 384, x21)

inst_68:
// rs1_val == -2, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:1
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffffffffc, -2, 1, x19, 392, x21)

inst_69:
// rs1_val == -3, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:11
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffffe800, -3, 11, x19, 400, x21)

inst_70:
// rs1_val == -5, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:62
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffec0000000, -5, 62, x19, 408, x21)

inst_71:
// rs1_val == -9, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:63
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffb80000000, -9, 63, x19, 416, x21)

inst_72:
// rs1_val == -17, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:4
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffffffef0, -17, 4, x19, 424, x21)

inst_73:
// rs1_val == -33, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:11
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffffef800, -33, 11, x19, 432, x21)

inst_74:
// rs1_val == -65, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:0
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffffffbf, -65, 0, x19, 440, x21)

inst_75:
// rs1_val == -129, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:47
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffbf8000, -129, 47, x19, 448, x21)

inst_76:
// rs1_val == -257, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:10
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffffbfc00, -257, 10, x19, 456, x21)

inst_77:
// rs1_val == -513, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:31
TEST_RR_OP(sll, x12, x10, x11, 0xfffffeff80000000, -513, 31, x19, 464, x21)

inst_78:
// rs1_val == -1025, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffff7fe000, -1025, 13, x19, 472, x21)

inst_79:
// rs1_val == -2049, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:11
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffbff800, -2049, 11, x19, 480, x21)

inst_80:
// rs1_val == -4097, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:21
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffdffe00000, -4097, 21, x19, 488, x21)

inst_81:
// rs1_val == -8193, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:2
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffff7ffc, -8193, 2, x19, 496, x21)

inst_82:
// rs1_val == -16385, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:14
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffefffc000, -16385, 14, x19, 504, x21)

inst_83:
// rs1_val == -32769, rs2_val == 59
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:59
TEST_RR_OP(sll, x12, x10, x11, 0xfffffbfff8000000, -32769, 59, x19, 512, x21)

inst_84:
// rs1_val == -65537, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:6
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffbfffc0, -65537, 6, x19, 520, x21)

inst_85:
// rs1_val == -131073, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:63
TEST_RR_OP(sll, x12, x10, x11, 0xfffeffff80000000, -131073, 63, x19, 528, x21)

inst_86:
// rs1_val == -524289, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:31
TEST_RR_OP(sll, x12, x10, x11, 0xfffbffff80000000, -524289, 31, x19, 536, x21)

inst_87:
// rs1_val == -1048577, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:5
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffdffffe0, -1048577, 5, x19, 544, x21)

inst_88:
// rs1_val == -36028797018963969, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:61
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffe0000000, -36028797018963969, 61, x19, 552, x21)

inst_89:
// rs1_val == -72057594037927937, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:14
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffffc000, -72057594037927937, 14, x19, 560, x21)

inst_90:
// rs1_val == -144115188075855873, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:9
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffffffe00, -144115188075855873, 9, x19, 568, x21)

inst_91:
// rs1_val == -288230376151711745, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:3
TEST_RR_OP(sll, x12, x10, x11, 0xdffffffffffffff8, -288230376151711745, 3, x19, 576, x21)

inst_92:
// rs1_val == -576460752303423489, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:62
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffc0000000, -576460752303423489, 62, x19, 584, x21)

inst_93:
// rs1_val == -1152921504606846977, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:7
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffffff80, -1152921504606846977, 7, x19, 592, x21)

inst_94:
// rs1_val == -2305843009213693953, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:3
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffffffff8, -2305843009213693953, 3, x19, 600, x21)

inst_95:
// rs1_val == -4611686018427387905, rs2_val == 8
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:8
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffffff00, -4611686018427387905, 8, x19, 608, x21)

inst_96:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:12
TEST_RR_OP(sll, x12, x10, x11, 0x5555555555555000, 6148914691236517205, 12, x19, 616, x21)

inst_97:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0x5555555555554000, -6148914691236517206, 13, x19, 624, x21)

inst_98:
// rs1_val==3, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:15
TEST_RR_OP(sll, x12, x10, x11, 0x18000, 3, 15, x19, 632, x21)

inst_99:
// rs1_val==5, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:42
TEST_RR_OP(sll, x12, x10, x11, 0x1400, 5, 42, x19, 640, x21)

inst_100:
// rs1_val==3689348814741910323, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:15
TEST_RR_OP(sll, x12, x10, x11, 0x9999999999998000, 3689348814741910323, 15, x19, 648, x21)

inst_101:
// rs1_val==7378697629483820646, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:59
TEST_RR_OP(sll, x12, x10, x11, 0x3333333330000000, 7378697629483820646, 59, x19, 656, x21)

inst_102:
// rs1_val==-3037000499, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:2
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffd2bec3334, -3037000499, 2, x19, 664, x21)

inst_103:
// rs1_val==3037000499, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:10
TEST_RR_OP(sll, x12, x10, x11, 0x2d413cccc00, 3037000499, 10, x19, 672, x21)

inst_104:
// rs1_val==6148914691236517204, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:3
TEST_RR_OP(sll, x12, x10, x11, 0xaaaaaaaaaaaaaaa0, 6148914691236517204, 3, x19, 680, x21)

inst_105:
// rs1_val==3689348814741910322, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0x6666666666664000, 3689348814741910322, 13, x19, 688, x21)

inst_106:
// rs1_val==7378697629483820645, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:3
TEST_RR_OP(sll, x12, x10, x11, 0x3333333333333328, 7378697629483820645, 3, x19, 696, x21)

inst_107:
// rs1_val==3037000498, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:32
TEST_RR_OP(sll, x12, x10, x11, 0xb504f332, 3037000498, 32, x19, 704, x21)

inst_108:
// rs1_val==6148914691236517206, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:1
TEST_RR_OP(sll, x12, x10, x11, 0xaaaaaaaaaaaaaaac, 6148914691236517206, 1, x19, 712, x21)

inst_109:
// rs1_val==-6148914691236517205, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:59
TEST_RR_OP(sll, x12, x10, x11, 0x5555555558000000, -6148914691236517205, 59, x19, 720, x21)

inst_110:
// rs1_val==6, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0xc000, 6, 13, x19, 728, x21)

inst_111:
// rs1_val==3689348814741910324, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:0
TEST_RR_OP(sll, x12, x10, x11, 0x3333333333333334, 3689348814741910324, 0, x19, 736, x21)

inst_112:
// rs1_val==7378697629483820647, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:17
TEST_RR_OP(sll, x12, x10, x11, 0xccccccccccce0000, 7378697629483820647, 17, x19, 744, x21)

inst_113:
// rs1_val==-3037000498, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:3
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffa57d86670, -3037000498, 3, x19, 752, x21)

inst_114:
// rs1_val==3037000500, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:3
TEST_RR_OP(sll, x12, x10, x11, 0x5a82799a0, 3037000500, 3, x19, 760, x21)

inst_115:
// rs1_val == -2097153, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:17
TEST_RR_OP(sll, x12, x10, x11, 0xffffffbffffe0000, -2097153, 17, x19, 768, x21)

inst_116:
// rs1_val == -4194305, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:14
TEST_RR_OP(sll, x12, x10, x11, 0xffffffefffffc000, -4194305, 14, x19, 776, x21)

inst_117:
// rs1_val == -8388609, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:10
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffdfffffc00, -8388609, 10, x19, 784, x21)

inst_118:
// rs1_val == -16777217, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:2
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffbfffffc, -16777217, 2, x19, 792, x21)

inst_119:
// rs1_val == -33554433, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:62
TEST_RR_OP(sll, x12, x10, x11, 0xff7fffffc0000000, -33554433, 62, x19, 800, x21)

inst_120:
// rs1_val == -67108865, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:32
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffffbffffff, -67108865, 32, x19, 808, x21)

inst_121:
// rs1_val == -134217729, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:18
TEST_RR_OP(sll, x12, x10, x11, 0xffffdffffffc0000, -134217729, 18, x19, 816, x21)

inst_122:
// rs1_val == -268435457, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0xfffffdffffffe000, -268435457, 13, x19, 824, x21)

inst_123:
// rs1_val == -536870913, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:61
TEST_RR_OP(sll, x12, x10, x11, 0xfbffffffe0000000, -536870913, 61, x19, 832, x21)

inst_124:
// rs1_val == -1073741825, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:59
TEST_RR_OP(sll, x12, x10, x11, 0xfdfffffff8000000, -1073741825, 59, x19, 840, x21)

inst_125:
// rs1_val == -2147483649, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:61
TEST_RR_OP(sll, x12, x10, x11, 0xefffffffe0000000, -2147483649, 61, x19, 848, x21)

inst_126:
// rs1_val == -4294967297, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:21
TEST_RR_OP(sll, x12, x10, x11, 0xffdfffffffe00000, -4294967297, 21, x19, 856, x21)

inst_127:
// rs1_val == -8589934593, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:42
TEST_RR_OP(sll, x12, x10, x11, 0xfffff7fffffffc00, -8589934593, 42, x19, 864, x21)

inst_128:
// rs1_val == -17179869185, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:6
TEST_RR_OP(sll, x12, x10, x11, 0xfffffeffffffffc0, -17179869185, 6, x19, 872, x21)

inst_129:
// rs1_val == -34359738369, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:8
TEST_RR_OP(sll, x12, x10, x11, 0xfffff7ffffffff00, -34359738369, 8, x19, 880, x21)

inst_130:
// rs1_val == -68719476737, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:16
TEST_RR_OP(sll, x12, x10, x11, 0xffefffffffff0000, -68719476737, 16, x19, 888, x21)

inst_131:
// rs1_val == -137438953473, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:7
TEST_RR_OP(sll, x12, x10, x11, 0xffffefffffffff80, -137438953473, 7, x19, 896, x21)

inst_132:
// rs1_val == -274877906945, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:2
TEST_RR_OP(sll, x12, x10, x11, 0xfffffefffffffffc, -274877906945, 2, x19, 904, x21)

inst_133:
// rs1_val == -1099511627777, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:4
TEST_RR_OP(sll, x12, x10, x11, 0xffffeffffffffff0, -1099511627777, 4, x19, 912, x21)

inst_134:
// rs1_val == -2199023255553, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:13
TEST_RR_OP(sll, x12, x10, x11, 0xffbfffffffffe000, -2199023255553, 13, x19, 920, x21)

inst_135:
// rs1_val == -4398046511105, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:12
TEST_RR_OP(sll, x12, x10, x11, 0xffbffffffffff000, -4398046511105, 12, x19, 928, x21)

inst_136:
// rs1_val == -8796093022209, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:61
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffe0000000, -8796093022209, 61, x19, 936, x21)

inst_137:
// rs1_val == -17592186044417, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:3
TEST_RR_OP(sll, x12, x10, x11, 0xffff7ffffffffff8, -17592186044417, 3, x19, 944, x21)

inst_138:
// rs1_val == -35184372088833, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:1
TEST_RR_OP(sll, x12, x10, x11, 0xffffbffffffffffe, -35184372088833, 1, x19, 952, x21)

inst_139:
// rs1_val == -70368744177665, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:59
TEST_RR_OP(sll, x12, x10, x11, 0xfffffffff8000000, -70368744177665, 59, x19, 960, x21)

inst_140:
// rs1_val == -140737488355329, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:12
TEST_RR_OP(sll, x12, x10, x11, 0xf7fffffffffff000, -140737488355329, 12, x19, 968, x21)

inst_141:
// rs1_val == -281474976710657, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:15
TEST_RR_OP(sll, x12, x10, x11, 0x7fffffffffff8000, -281474976710657, 15, x19, 976, x21)

inst_142:
// rs1_val == -562949953421313, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:7
TEST_RR_OP(sll, x12, x10, x11, 0xfeffffffffffff80, -562949953421313, 7, x19, 984, x21)

inst_143:
// rs1_val == -1125899906842625, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:47
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffff8000, -1125899906842625, 47, x19, 992, x21)

inst_144:
// rs1_val == -2251799813685249, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:21
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffffe00000, -2251799813685249, 21, x19, 1000, x21)

inst_145:
// rs1_val == -4503599627370497, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:63
TEST_RR_OP(sll, x12, x10, x11, 0xffffffff80000000, -4503599627370497, 63, x19, 1008, x21)

inst_146:
// rs1_val == -9007199254740993, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:4
TEST_RR_OP(sll, x12, x10, x11, 0xfdfffffffffffff0, -9007199254740993, 4, x19, 1016, x21)

inst_147:
// rs1_val == -18014398509481985, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:62
TEST_RR_OP(sll, x12, x10, x11, 0xffffffffc0000000, -18014398509481985, 62, x19, 1024, x21)

inst_148:
// rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == -549755813889, rs2_val == 2
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:2
TEST_RR_OP(sll, x12, x10, x11, 0xfffffdfffffffffc, -549755813889, 2, x19, 1032, x21)

inst_149:
// rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 17179869184, rs2_val == 31
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:31
TEST_RR_OP(sll, x12, x10, x11, 0x0, 17179869184, 31, x19, 1040, x21)

inst_150:
// rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, rs1_val == 4, rs2_val == 4, rs1_val==4
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:4
TEST_RR_OP(sll, x12, x10, x11, 0x40, 4, 4, x19, 1048, x21)

inst_151:
// rs1_val == 16, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:4
TEST_RR_OP(sll, x12, x10, x11, 0x100, 16, 4, x19, 1056, x21)

inst_152:
// rs1_val == 131072, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:0
TEST_RR_OP(sll, x12, x10, x11, 0x20000, 131072, 0, x19, 1064, x21)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 134*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
