 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:23 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slliw instruction of the RISC-V I extension for the slliw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",slliw)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x31, rd==x31, rs1_val < 0 and imm_val > 0 and imm_val < 32, imm_val == 8, rs1_val == -16777217
// opcode: slliw ; op1:x31; dest:x31; op1val:-16777217;  immval:8
TEST_IMM_OP( slliw, x31, x31, 0xfffffffeffffff00, -16777217, 8, x1, 0, x4)

inst_1:
// rs1 != rd, rs1==x30, rd==x0, rs1_val > 0 and imm_val > 0 and imm_val < 32, rs1_val == 34359738368, rs1_val > 0 and imm_val == 31
// opcode: slliw ; op1:x30; dest:x0; op1val:34359738368;  immval:31
TEST_IMM_OP( slliw, x0, x30, 0x0, 34359738368, 31, x1, 8, x4)

inst_2:
// rs1==x2, rd==x15, rs1_val < 0 and imm_val == 0, rs1_val == -562949953421313
// opcode: slliw ; op1:x2; dest:x15; op1val:-562949953421313;  immval:0
TEST_IMM_OP( slliw, x15, x2, 0xfffdffffffffffff, -562949953421313, 0, x1, 16, x4)

inst_3:
// rs1==x13, rd==x16, rs1_val > 0 and imm_val == 0, rs1_val == 18014398509481984
// opcode: slliw ; op1:x13; dest:x16; op1val:18014398509481984;  immval:0
TEST_IMM_OP( slliw, x16, x13, 0x40000000000000, 18014398509481984, 0, x1, 24, x4)

inst_4:
// rs1==x28, rd==x14, rs1_val < 0 and imm_val == 31, rs1_val == -2251799813685249
// opcode: slliw ; op1:x28; dest:x14; op1val:-2251799813685249;  immval:31
TEST_IMM_OP( slliw, x14, x28, 0xffffffff80000000, -2251799813685249, 31, x1, 32, x4)

inst_5:
// rs1==x25, rd==x29, rs1_val == imm_val and imm_val > 0 and imm_val < 32, 
// opcode: slliw ; op1:x25; dest:x29; op1val:5;  immval:5
TEST_IMM_OP( slliw, x29, x25, 0xa0, 5, 5, x1, 40, x4)

inst_6:
// rs1==x26, rd==x8, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < 32, rs1_val == -9223372036854775808
// opcode: slliw ; op1:x26; dest:x8; op1val:-9223372036854775808;  immval:14
TEST_IMM_OP( slliw, x8, x26, 0x0, -9223372036854775808, 14, x1, 48, x4)

inst_7:
// rs1==x23, rd==x17, rs1_val == 0 and imm_val >= 0 and imm_val < 32, imm_val == 4
// opcode: slliw ; op1:x23; dest:x17; op1val:0;  immval:4
TEST_IMM_OP( slliw, x17, x23, 0x0, 0, 4, x1, 56, x4)

inst_8:
// rs1==x12, rd==x3, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < 32, rs1_val == 9223372036854775807
// opcode: slliw ; op1:x12; dest:x3; op1val:9223372036854775807;  immval:7
TEST_IMM_OP( slliw, x3, x12, 0xffffffffffffff80, 9223372036854775807, 7, x1, 64, x4)

inst_9:
// rs1==x17, rd==x24, rs1_val == 1 and imm_val >= 0 and imm_val < 32, imm_val == 1, rs1_val == 1
// opcode: slliw ; op1:x17; dest:x24; op1val:1;  immval:1
TEST_IMM_OP( slliw, x24, x17, 0x2, 1, 1, x1, 72, x4)

inst_10:
// rs1==x20, rd==x6, imm_val == 2, rs1_val == -9007199254740993
// opcode: slliw ; op1:x20; dest:x6; op1val:-9007199254740993;  immval:2
TEST_IMM_OP( slliw, x6, x20, 0xff7ffffffffffffc, -9007199254740993, 2, x1, 80, x4)

inst_11:
// rs1==x22, rd==x27, imm_val == 16, rs1_val == 1152921504606846976
// opcode: slliw ; op1:x22; dest:x27; op1val:1152921504606846976;  immval:16
TEST_IMM_OP( slliw, x27, x22, 0x0, 1152921504606846976, 16, x1, 88, x4)

inst_12:
// rs1==x11, rd==x18, imm_val == 30, rs1_val == 1073741824
// opcode: slliw ; op1:x11; dest:x18; op1val:1073741824;  immval:30
TEST_IMM_OP( slliw, x18, x11, 0x1000000000000000, 1073741824, 30, x1, 96, x4)

inst_13:
// rs1==x0, rd==x21, imm_val == 29, rs1_val == 524288
// opcode: slliw ; op1:x0; dest:x21; op1val:524288;  immval:29
TEST_IMM_OP( slliw, x21, x0, 0x1000000000000, 524288, 29, x1, 104, x4)

inst_14:
// rs1==x15, rd==x9, imm_val == 27, rs1_val == -65
// opcode: slliw ; op1:x15; dest:x9; op1val:-65;  immval:27
TEST_IMM_OP( slliw, x9, x15, 0xfffffffdf8000000, -65, 27, x1, 112, x4)

inst_15:
// rs1==x6, rd==x5, imm_val == 23, rs1_val == -262145
// opcode: slliw ; op1:x6; dest:x5; op1val:-262145;  immval:23
TEST_IMM_OP( slliw, x5, x6, 0xfffffdffff800000, -262145, 23, x1, 120, x4)

inst_16:
// rs1==x29, rd==x23, imm_val == 15, rs1_val == -268435457
// opcode: slliw ; op1:x29; dest:x23; op1val:-268435457;  immval:15
TEST_IMM_OP( slliw, x23, x29, 0xfffff7ffffff8000, -268435457, 15, x1, 128, x4)

inst_17:
// rs1==x16, rd==x25, imm_val == 21, rs1_val == -35184372088833
// opcode: slliw ; op1:x16; dest:x25; op1val:-35184372088833;  immval:21
TEST_IMM_OP( slliw, x25, x16, 0xffffffffffe00000, -35184372088833, 21, x1, 136, x4)

inst_18:
// rs1==x21, rd==x10, imm_val == 10, rs1_val == -17592186044417
// opcode: slliw ; op1:x21; dest:x10; op1val:-17592186044417;  immval:10
TEST_IMM_OP( slliw, x10, x21, 0xffbffffffffffc00, -17592186044417, 10, x1, 144, x4)

inst_19:
// rs1==x3, rd==x22, rs1_val == 2, 
// opcode: slliw ; op1:x3; dest:x22; op1val:2;  immval:29
TEST_IMM_OP( slliw, x22, x3, 0x40000000, 2, 29, x1, 152, x6)

inst_20:
// rs1==x5, rd==x30, rs1_val == 4, 
// opcode: slliw ; op1:x5; dest:x30; op1val:4;  immval:0
TEST_IMM_OP( slliw, x30, x5, 0x4, 4, 0, x1, 160, x6)

inst_21:
// rs1==x19, rd==x11, rs1_val == 8, 
// opcode: slliw ; op1:x19; dest:x11; op1val:8;  immval:31
TEST_IMM_OP( slliw, x11, x19, 0x400000000, 8, 31, x1, 168, x6)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_22:
// rs1==x18, rd==x4, rs1_val == 16, 
// opcode: slliw ; op1:x18; dest:x4; op1val:16;  immval:15
TEST_IMM_OP( slliw, x4, x18, 0x80000, 16, 15, x3, 0, x6)

inst_23:
// rs1==x10, rd==x12, rs1_val == 32, 
// opcode: slliw ; op1:x10; dest:x12; op1val:32;  immval:5
TEST_IMM_OP( slliw, x12, x10, 0x400, 32, 5, x3, 8, x6)

inst_24:
// rs1==x14, rd==x13, rs1_val == 64, 
// opcode: slliw ; op1:x14; dest:x13; op1val:64;  immval:16
TEST_IMM_OP( slliw, x13, x14, 0x400000, 64, 16, x3, 16, x6)

inst_25:
// rs1==x9, rd==x1, rs1_val == 128, 
// opcode: slliw ; op1:x9; dest:x1; op1val:128;  immval:1
TEST_IMM_OP( slliw, x1, x9, 0x100, 128, 1, x3, 24, x6)

inst_26:
// rs1==x4, rd==x26, rs1_val == 256, 
// opcode: slliw ; op1:x4; dest:x26; op1val:256;  immval:19
TEST_IMM_OP( slliw, x26, x4, 0x8000000, 256, 19, x3, 32, x6)

inst_27:
// rs1==x24, rd==x20, rs1_val == 512, 
// opcode: slliw ; op1:x24; dest:x20; op1val:512;  immval:19
TEST_IMM_OP( slliw, x20, x24, 0x10000000, 512, 19, x3, 40, x6)

inst_28:
// rs1==x27, rd==x7, rs1_val == 1024, 
// opcode: slliw ; op1:x27; dest:x7; op1val:1024;  immval:4
TEST_IMM_OP( slliw, x7, x27, 0x4000, 1024, 4, x3, 48, x6)

inst_29:
// rs1==x8, rd==x28, rs1_val == 2048, 
// opcode: slliw ; op1:x8; dest:x28; op1val:2048;  immval:27
TEST_IMM_OP( slliw, x28, x8, 0x4000000000, 2048, 27, x3, 56, x6)

inst_30:
// rs1==x1, rd==x2, rs1_val == 4096, 
// opcode: slliw ; op1:x1; dest:x2; op1val:4096;  immval:5
TEST_IMM_OP( slliw, x2, x1, 0x20000, 4096, 5, x3, 64, x6)

inst_31:
// rs1==x7, rd==x19, rs1_val == 8192, 
// opcode: slliw ; op1:x7; dest:x19; op1val:8192;  immval:11
TEST_IMM_OP( slliw, x19, x7, 0x1000000, 8192, 11, x3, 72, x6)

inst_32:
// rs1_val == 16384, 
// opcode: slliw ; op1:x10; dest:x11; op1val:16384;  immval:8
TEST_IMM_OP( slliw, x11, x10, 0x400000, 16384, 8, x3, 80, x6)

inst_33:
// rs1_val == 32768, 
// opcode: slliw ; op1:x10; dest:x11; op1val:32768;  immval:15
TEST_IMM_OP( slliw, x11, x10, 0x40000000, 32768, 15, x3, 88, x6)

inst_34:
// rs1_val == 65536, 
// opcode: slliw ; op1:x10; dest:x11; op1val:65536;  immval:4
TEST_IMM_OP( slliw, x11, x10, 0x100000, 65536, 4, x3, 96, x6)

inst_35:
// rs1_val == 131072, 
// opcode: slliw ; op1:x10; dest:x11; op1val:131072;  immval:7
TEST_IMM_OP( slliw, x11, x10, 0x1000000, 131072, 7, x3, 104, x6)

inst_36:
// rs1_val == 262144, 
// opcode: slliw ; op1:x10; dest:x11; op1val:262144;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0x8000000000, 262144, 21, x3, 112, x6)

inst_37:
// rs1_val == 1048576, 
// opcode: slliw ; op1:x10; dest:x11; op1val:1048576;  immval:0
TEST_IMM_OP( slliw, x11, x10, 0x100000, 1048576, 0, x3, 120, x6)

inst_38:
// rs1_val == 2097152, 
// opcode: slliw ; op1:x10; dest:x11; op1val:2097152;  immval:8
TEST_IMM_OP( slliw, x11, x10, 0x20000000, 2097152, 8, x3, 128, x6)

inst_39:
// rs1_val == 4194304, 
// opcode: slliw ; op1:x10; dest:x11; op1val:4194304;  immval:9
TEST_IMM_OP( slliw, x11, x10, 0x80000000, 4194304, 9, x3, 136, x6)

inst_40:
// rs1_val == 8388608, 
// opcode: slliw ; op1:x10; dest:x11; op1val:8388608;  immval:9
TEST_IMM_OP( slliw, x11, x10, 0x100000000, 8388608, 9, x3, 144, x6)

inst_41:
// rs1_val == 16777216, 
// opcode: slliw ; op1:x10; dest:x11; op1val:16777216;  immval:16
TEST_IMM_OP( slliw, x11, x10, 0x10000000000, 16777216, 16, x3, 152, x6)

inst_42:
// rs1_val == 33554432, 
// opcode: slliw ; op1:x10; dest:x11; op1val:33554432;  immval:30
TEST_IMM_OP( slliw, x11, x10, 0x80000000000000, 33554432, 30, x3, 160, x6)

inst_43:
// rs1_val == 67108864, 
// opcode: slliw ; op1:x10; dest:x11; op1val:67108864;  immval:1
TEST_IMM_OP( slliw, x11, x10, 0x8000000, 67108864, 1, x3, 168, x6)

inst_44:
// rs1_val == 134217728, 
// opcode: slliw ; op1:x10; dest:x11; op1val:134217728;  immval:2
TEST_IMM_OP( slliw, x11, x10, 0x20000000, 134217728, 2, x3, 176, x6)

inst_45:
// rs1_val == 268435456, 
// opcode: slliw ; op1:x10; dest:x11; op1val:268435456;  immval:16
TEST_IMM_OP( slliw, x11, x10, 0x100000000000, 268435456, 16, x3, 184, x6)

inst_46:
// rs1_val == 536870912, 
// opcode: slliw ; op1:x10; dest:x11; op1val:536870912;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0x100000000, 536870912, 3, x3, 192, x6)

inst_47:
// rs1_val == 2147483648, 
// opcode: slliw ; op1:x10; dest:x11; op1val:2147483648;  immval:19
TEST_IMM_OP( slliw, x11, x10, 0x4000000000000, 2147483648, 19, x3, 200, x6)

inst_48:
// rs1_val == 4294967296, 
// opcode: slliw ; op1:x10; dest:x11; op1val:4294967296;  immval:14
TEST_IMM_OP( slliw, x11, x10, 0x400000000000, 4294967296, 14, x3, 208, x6)

inst_49:
// rs1_val == 8589934592, 
// opcode: slliw ; op1:x10; dest:x11; op1val:8589934592;  immval:7
TEST_IMM_OP( slliw, x11, x10, 0x10000000000, 8589934592, 7, x3, 216, x6)

inst_50:
// rs1_val == 17179869184, 
// opcode: slliw ; op1:x10; dest:x11; op1val:17179869184;  immval:1
TEST_IMM_OP( slliw, x11, x10, 0x800000000, 17179869184, 1, x3, 224, x6)

inst_51:
// rs1_val == 68719476736, 
// opcode: slliw ; op1:x10; dest:x11; op1val:68719476736;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0x200000000000000, 68719476736, 21, x3, 232, x6)

inst_52:
// rs1_val == 137438953472, 
// opcode: slliw ; op1:x10; dest:x11; op1val:137438953472;  immval:31
TEST_IMM_OP( slliw, x11, x10, 0x0, 137438953472, 31, x3, 240, x6)

inst_53:
// rs1_val == 274877906944, 
// opcode: slliw ; op1:x10; dest:x11; op1val:274877906944;  immval:31
TEST_IMM_OP( slliw, x11, x10, 0x0, 274877906944, 31, x3, 248, x6)

inst_54:
// rs1_val == 549755813888, 
// opcode: slliw ; op1:x10; dest:x11; op1val:549755813888;  immval:23
TEST_IMM_OP( slliw, x11, x10, 0x4000000000000000, 549755813888, 23, x3, 256, x6)

inst_55:
// rs1_val == 1099511627776, 
// opcode: slliw ; op1:x10; dest:x11; op1val:1099511627776;  immval:12
TEST_IMM_OP( slliw, x11, x10, 0x10000000000000, 1099511627776, 12, x3, 264, x6)

inst_56:
// rs1_val == 2199023255552, 
// opcode: slliw ; op1:x10; dest:x11; op1val:2199023255552;  immval:27
TEST_IMM_OP( slliw, x11, x10, 0x0, 2199023255552, 27, x3, 272, x6)

inst_57:
// rs1_val == 4398046511104, 
// opcode: slliw ; op1:x10; dest:x11; op1val:4398046511104;  immval:6
TEST_IMM_OP( slliw, x11, x10, 0x1000000000000, 4398046511104, 6, x3, 280, x6)

inst_58:
// rs1_val == 8796093022208, 
// opcode: slliw ; op1:x10; dest:x11; op1val:8796093022208;  immval:19
TEST_IMM_OP( slliw, x11, x10, 0x4000000000000000, 8796093022208, 19, x3, 288, x6)

inst_59:
// rs1_val == 17592186044416, 
// opcode: slliw ; op1:x10; dest:x11; op1val:17592186044416;  immval:16
TEST_IMM_OP( slliw, x11, x10, 0x1000000000000000, 17592186044416, 16, x3, 296, x6)

inst_60:
// rs1_val == 35184372088832, 
// opcode: slliw ; op1:x10; dest:x11; op1val:35184372088832;  immval:2
TEST_IMM_OP( slliw, x11, x10, 0x800000000000, 35184372088832, 2, x3, 304, x6)

inst_61:
// rs1_val == 70368744177664, 
// opcode: slliw ; op1:x10; dest:x11; op1val:70368744177664;  immval:18
TEST_IMM_OP( slliw, x11, x10, 0x0, 70368744177664, 18, x3, 312, x6)

inst_62:
// rs1_val == 140737488355328, 
// opcode: slliw ; op1:x10; dest:x11; op1val:140737488355328;  immval:11
TEST_IMM_OP( slliw, x11, x10, 0x400000000000000, 140737488355328, 11, x3, 320, x6)

inst_63:
// rs1_val == 281474976710656, 
// opcode: slliw ; op1:x10; dest:x11; op1val:281474976710656;  immval:8
TEST_IMM_OP( slliw, x11, x10, 0x100000000000000, 281474976710656, 8, x3, 328, x6)

inst_64:
// rs1_val == 562949953421312, 
// opcode: slliw ; op1:x10; dest:x11; op1val:562949953421312;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0x10000000000000, 562949953421312, 3, x3, 336, x6)

inst_65:
// rs1_val == 1125899906842624, 
// opcode: slliw ; op1:x10; dest:x11; op1val:1125899906842624;  immval:14
TEST_IMM_OP( slliw, x11, x10, 0x0, 1125899906842624, 14, x3, 344, x6)

inst_66:
// rs1_val == 2251799813685248, 
// opcode: slliw ; op1:x10; dest:x11; op1val:2251799813685248;  immval:29
TEST_IMM_OP( slliw, x11, x10, 0x0, 2251799813685248, 29, x3, 352, x6)

inst_67:
// rs1_val == 4503599627370496, 
// opcode: slliw ; op1:x10; dest:x11; op1val:4503599627370496;  immval:13
TEST_IMM_OP( slliw, x11, x10, 0x0, 4503599627370496, 13, x3, 360, x6)

inst_68:
// rs1_val == 9007199254740992, 
// opcode: slliw ; op1:x10; dest:x11; op1val:9007199254740992;  immval:5
TEST_IMM_OP( slliw, x11, x10, 0x400000000000000, 9007199254740992, 5, x3, 368, x6)

inst_69:
// rs1_val == -2199023255553, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-2199023255553;  immval:31
TEST_IMM_OP( slliw, x11, x10, 0xffffffff80000000, -2199023255553, 31, x3, 376, x6)

inst_70:
// rs1_val == -4398046511105, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-4398046511105;  immval:1
TEST_IMM_OP( slliw, x11, x10, 0xfffff7fffffffffe, -4398046511105, 1, x3, 384, x6)

inst_71:
// rs1_val == -8796093022209, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-8796093022209;  immval:18
TEST_IMM_OP( slliw, x11, x10, 0xdffffffffffc0000, -8796093022209, 18, x3, 392, x6)

inst_72:
// rs1_val == -70368744177665, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-70368744177665;  immval:12
TEST_IMM_OP( slliw, x11, x10, 0xfbfffffffffff000, -70368744177665, 12, x3, 400, x6)

inst_73:
// rs1_val == -140737488355329, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-140737488355329;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffe00000, -140737488355329, 21, x3, 408, x6)

inst_74:
// rs1_val == -281474976710657, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-281474976710657;  immval:15
TEST_IMM_OP( slliw, x11, x10, 0x7fffffffffff8000, -281474976710657, 15, x3, 416, x6)

inst_75:
// rs1_val == -1125899906842625, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-1125899906842625;  immval:18
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffffc0000, -1125899906842625, 18, x3, 424, x6)

inst_76:
// rs1_val == -4503599627370497, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-4503599627370497;  immval:6
TEST_IMM_OP( slliw, x11, x10, 0xfbffffffffffffc0, -4503599627370497, 6, x3, 432, x6)

inst_77:
// rs1_val == -18014398509481985, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-18014398509481985;  immval:27
TEST_IMM_OP( slliw, x11, x10, 0xfffffffff8000000, -18014398509481985, 27, x3, 440, x6)

inst_78:
// rs1_val == -36028797018963969, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-36028797018963969;  immval:10
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffffffc00, -36028797018963969, 10, x3, 448, x6)

inst_79:
// rs1_val == -72057594037927937, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-72057594037927937;  immval:14
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffffc000, -72057594037927937, 14, x3, 456, x6)

inst_80:
// rs1_val == -144115188075855873, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-144115188075855873;  immval:11
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffffff800, -144115188075855873, 11, x3, 464, x6)

inst_81:
// rs1_val == -288230376151711745, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-288230376151711745;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffe00000, -288230376151711745, 21, x3, 472, x6)

inst_82:
// rs1_val == -576460752303423489, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-576460752303423489;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffe00000, -576460752303423489, 21, x3, 480, x6)

inst_83:
// rs1_val == -1152921504606846977, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-1152921504606846977;  immval:8
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffffff00, -1152921504606846977, 8, x3, 488, x6)

inst_84:
// rs1_val == -2305843009213693953, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-2305843009213693953;  immval:9
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffffffe00, -2305843009213693953, 9, x3, 496, x6)

inst_85:
// rs1_val == -4611686018427387905, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-4611686018427387905;  immval:6
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffffffc0, -4611686018427387905, 6, x3, 504, x6)

inst_86:
// rs1_val == 6148914691236517205, 
// opcode: slliw ; op1:x10; dest:x11; op1val:6148914691236517205;  immval:23
TEST_IMM_OP( slliw, x11, x10, 0xaaaaaaaaaa800000, 6148914691236517205, 23, x3, 512, x6)

inst_87:
// rs1_val == -6148914691236517206, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-6148914691236517206;  immval:18
TEST_IMM_OP( slliw, x11, x10, 0xaaaaaaaaaaa80000, -6148914691236517206, 18, x3, 520, x6)

inst_88:
// rs1_val == 36028797018963968, 
// opcode: slliw ; op1:x10; dest:x11; op1val:36028797018963968;  immval:0
TEST_IMM_OP( slliw, x11, x10, 0x80000000000000, 36028797018963968, 0, x3, 528, x6)

inst_89:
// rs1_val == 72057594037927936, 
// opcode: slliw ; op1:x10; dest:x11; op1val:72057594037927936;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0x800000000000000, 72057594037927936, 3, x3, 536, x6)

inst_90:
// rs1_val == 144115188075855872, 
// opcode: slliw ; op1:x10; dest:x11; op1val:144115188075855872;  immval:17
TEST_IMM_OP( slliw, x11, x10, 0x0, 144115188075855872, 17, x3, 544, x6)

inst_91:
// rs1_val == 288230376151711744, 
// opcode: slliw ; op1:x10; dest:x11; op1val:288230376151711744;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0x0, 288230376151711744, 21, x3, 552, x6)

inst_92:
// rs1_val == 576460752303423488, 
// opcode: slliw ; op1:x10; dest:x11; op1val:576460752303423488;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0x0, 576460752303423488, 21, x3, 560, x6)

inst_93:
// rs1_val == 2305843009213693952, 
// opcode: slliw ; op1:x10; dest:x11; op1val:2305843009213693952;  immval:30
TEST_IMM_OP( slliw, x11, x10, 0x0, 2305843009213693952, 30, x3, 568, x6)

inst_94:
// rs1_val == 4611686018427387904, 
// opcode: slliw ; op1:x10; dest:x11; op1val:4611686018427387904;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0x0, 4611686018427387904, 3, x3, 576, x6)

inst_95:
// rs1_val == -2, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-2;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffc00000, -2, 21, x3, 584, x6)

inst_96:
// rs1_val == -3, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-3;  immval:29
TEST_IMM_OP( slliw, x11, x10, 0xffffffffa0000000, -3, 29, x3, 592, x6)

inst_97:
// rs1_val == -5, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-5;  immval:19
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffd80000, -5, 19, x3, 600, x6)

inst_98:
// rs1_val == -9, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-9;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffffffb8, -9, 3, x3, 608, x6)

inst_99:
// rs1_val == -17, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-17;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffffff78, -17, 3, x3, 616, x6)

inst_100:
// rs1_val == -33, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-33;  immval:17
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffbe0000, -33, 17, x3, 624, x6)

inst_101:
// rs1_val == -129, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-129;  immval:30
TEST_IMM_OP( slliw, x11, x10, 0xffffffdfc0000000, -129, 30, x3, 632, x6)

inst_102:
// rs1_val == -257, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-257;  immval:16
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffeff0000, -257, 16, x3, 640, x6)

inst_103:
// rs1_val == -513, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-513;  immval:1
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffffffbfe, -513, 1, x3, 648, x6)

inst_104:
// rs1_val == -1025, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-1025;  immval:16
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffbff0000, -1025, 16, x3, 656, x6)

inst_105:
// rs1_val == -2049, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-2049;  immval:19
TEST_IMM_OP( slliw, x11, x10, 0xffffffffbff80000, -2049, 19, x3, 664, x6)

inst_106:
// rs1_val == -4097, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-4097;  immval:0
TEST_IMM_OP( slliw, x11, x10, 0xffffffffffffefff, -4097, 0, x3, 672, x6)

inst_107:
// rs1_val == -8193, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-8193;  immval:4
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffffdfff0, -8193, 4, x3, 680, x6)

inst_108:
// rs1_val == -16385, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-16385;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffffdfff8, -16385, 3, x3, 688, x6)

inst_109:
// rs1_val == -32769, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-32769;  immval:10
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffdfffc00, -32769, 10, x3, 696, x6)

inst_110:
// rs1_val == -65537, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-65537;  immval:27
TEST_IMM_OP( slliw, x11, x10, 0xfffff7fff8000000, -65537, 27, x3, 704, x6)

inst_111:
// rs1_val == -131073, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-131073;  immval:9
TEST_IMM_OP( slliw, x11, x10, 0xfffffffffbfffe00, -131073, 9, x3, 712, x6)

inst_112:
// rs1_val == -524289, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-524289;  immval:19
TEST_IMM_OP( slliw, x11, x10, 0xffffffbffff80000, -524289, 19, x3, 720, x6)

inst_113:
// rs1_val == -1048577, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-1048577;  immval:13
TEST_IMM_OP( slliw, x11, x10, 0xfffffffdffffe000, -1048577, 13, x3, 728, x6)

inst_114:
// rs1_val == -2097153, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-2097153;  immval:30
TEST_IMM_OP( slliw, x11, x10, 0xfff7ffffc0000000, -2097153, 30, x3, 736, x6)

inst_115:
// rs1_val == -4194305, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-4194305;  immval:12
TEST_IMM_OP( slliw, x11, x10, 0xfffffffbfffff000, -4194305, 12, x3, 744, x6)

inst_116:
// rs1_val == -8388609, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-8388609;  immval:8
TEST_IMM_OP( slliw, x11, x10, 0xffffffff7fffff00, -8388609, 8, x3, 752, x6)

inst_117:
// rs1_val == -33554433, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-33554433;  immval:29
TEST_IMM_OP( slliw, x11, x10, 0xffbfffffe0000000, -33554433, 29, x3, 760, x6)

inst_118:
// rs1_val == -67108865, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-67108865;  immval:4
TEST_IMM_OP( slliw, x11, x10, 0xffffffffbffffff0, -67108865, 4, x3, 768, x6)

inst_119:
// rs1_val == -134217729, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-134217729;  immval:14
TEST_IMM_OP( slliw, x11, x10, 0xfffffdffffffc000, -134217729, 14, x3, 776, x6)

inst_120:
// rs1_val == -536870913, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-536870913;  immval:29
TEST_IMM_OP( slliw, x11, x10, 0xfbffffffe0000000, -536870913, 29, x3, 784, x6)

inst_121:
// rs1_val == -1073741825, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-1073741825;  immval:21
TEST_IMM_OP( slliw, x11, x10, 0xfff7ffffffe00000, -1073741825, 21, x3, 792, x6)

inst_122:
// rs1_val == -2147483649, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-2147483649;  immval:3
TEST_IMM_OP( slliw, x11, x10, 0xfffffffbfffffff8, -2147483649, 3, x3, 800, x6)

inst_123:
// rs1_val == -4294967297, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-4294967297;  immval:31
TEST_IMM_OP( slliw, x11, x10, 0x7fffffff80000000, -4294967297, 31, x3, 808, x6)

inst_124:
// rs1_val == -8589934593, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-8589934593;  immval:8
TEST_IMM_OP( slliw, x11, x10, 0xfffffdffffffff00, -8589934593, 8, x3, 816, x6)

inst_125:
// rs1_val == -17179869185, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-17179869185;  immval:10
TEST_IMM_OP( slliw, x11, x10, 0xffffeffffffffc00, -17179869185, 10, x3, 824, x6)

inst_126:
// rs1_val == -34359738369, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-34359738369;  immval:10
TEST_IMM_OP( slliw, x11, x10, 0xffffdffffffffc00, -34359738369, 10, x3, 832, x6)

inst_127:
// rs1_val == -68719476737, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-68719476737;  immval:17
TEST_IMM_OP( slliw, x11, x10, 0xffdffffffffe0000, -68719476737, 17, x3, 840, x6)

inst_128:
// rs1_val == -137438953473, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-137438953473;  immval:15
TEST_IMM_OP( slliw, x11, x10, 0xffefffffffff8000, -137438953473, 15, x3, 848, x6)

inst_129:
// rs1_val == -274877906945, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-274877906945;  immval:1
TEST_IMM_OP( slliw, x11, x10, 0xffffff7ffffffffe, -274877906945, 1, x3, 856, x6)

inst_130:
// rs1_val == -549755813889, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-549755813889;  immval:10
TEST_IMM_OP( slliw, x11, x10, 0xfffdfffffffffc00, -549755813889, 10, x3, 864, x6)

inst_131:
// rs1_val == -1099511627777, 
// opcode: slliw ; op1:x10; dest:x11; op1val:-1099511627777;  immval:10
TEST_IMM_OP( slliw, x11, x10, 0xfffbfffffffffc00, -1099511627777, 10, x3, 872, x6)

inst_132:
// rs1_val > 0 and imm_val > 0 and imm_val < 32, rs1_val == 34359738368, rs1_val > 0 and imm_val == 31
// opcode: slliw ; op1:x10; dest:x11; op1val:34359738368;  immval:31
TEST_IMM_OP( slliw, x11, x10, 0x0, 34359738368, 31, x3, 880, x6)

inst_133:
// imm_val == 29, rs1_val == 524288
// opcode: slliw ; op1:x10; dest:x11; op1val:524288;  immval:29
TEST_IMM_OP( slliw, x11, x10, 0x1000000000000, 524288, 29, x3, 888, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
