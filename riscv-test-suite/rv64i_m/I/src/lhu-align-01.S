 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:20:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the lhu instruction of the RISC-V I extension for the lhu-align covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",lhu-align)

RVTEST_SIGBASE( x13,signature_x13_1)

// rs1 != rd, rs1==x3, rd==x10, ea_align == 0 and (imm_val % 4) == 0, imm_val > 0
// opcode:lhu op1:x3; dest:x10; immval:8; align:0
TEST_LOAD(x13,x15,0,x3,x10,8,0,lhu,0)

// rs1 == rd, rs1==x29, rd==x29, ea_align == 0 and (imm_val % 4) == 1, 
// opcode:lhu op1:x29; dest:x29; immval:1365; align:0
TEST_LOAD(x13,x15,0,x29,x29,1365,8,lhu,0)

// rs1==x25, rd==x24, ea_align == 0 and (imm_val % 4) == 2, imm_val < 0
// opcode:lhu op1:x25; dest:x24; immval:-10; align:0
TEST_LOAD(x13,x15,0,x25,x24,-10,16,lhu,0)

// rs1==x12, rd==x8, ea_align == 0 and (imm_val % 4) == 3, 
// opcode:lhu op1:x12; dest:x8; immval:2047; align:0
TEST_LOAD(x13,x15,0,x12,x8,2047,24,lhu,0)

// rs1==x30, rd==x1, ea_align == 2 and (imm_val % 4) == 0, 
// opcode:lhu op1:x30; dest:x1; immval:8; align:2
TEST_LOAD(x13,x15,0,x30,x1,8,32,lhu,2)

// rs1==x7, rd==x5, imm_val == 0, 
// opcode:lhu op1:x7; dest:x5; immval:0; align:0
TEST_LOAD(x13,x15,0,x7,x5,0,40,lhu,0)

// rs1==x26, rd==x11, ea_align == 2 and (imm_val % 4) == 1, 
// opcode:lhu op1:x26; dest:x11; immval:9; align:2
TEST_LOAD(x13,x15,0,x26,x11,9,48,lhu,2)

// rs1==x22, rd==x9, ea_align == 2 and (imm_val % 4) == 2, 
// opcode:lhu op1:x22; dest:x9; immval:-2; align:2
TEST_LOAD(x13,x15,0,x22,x9,-2,56,lhu,2)

// rs1==x17, rd==x26, ea_align == 2 and (imm_val % 4) == 3, 
// opcode:lhu op1:x17; dest:x26; immval:-65; align:2
TEST_LOAD(x13,x15,0,x17,x26,-65,64,lhu,2)

// rs1==x24, rd==x28, 
// opcode:lhu op1:x24; dest:x28; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x24,x28,-2048,72,lhu,0)

// rs1==x10, rd==x23, 
// opcode:lhu op1:x10; dest:x23; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x10,x23,-2048,80,lhu,0)

// rs1==x28, rd==x17, 
// opcode:lhu op1:x28; dest:x17; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x28,x17,-2048,88,lhu,0)

// rs1==x4, rd==x20, 
// opcode:lhu op1:x4; dest:x20; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x4,x20,-2048,96,lhu,0)

// rs1==x5, rd==x25, 
// opcode:lhu op1:x5; dest:x25; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x5,x25,-2048,104,lhu,0)

// rs1==x21, rd==x27, 
// opcode:lhu op1:x21; dest:x27; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x21,x27,-2048,112,lhu,0)

// rs1==x14, rd==x3, 
// opcode:lhu op1:x14; dest:x3; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x14,x3,-2048,120,lhu,0)

// rs1==x2, rd==x4, 
// opcode:lhu op1:x2; dest:x4; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x2,x4,-2048,128,lhu,0)

// rs1==x31, rd==x12, 
// opcode:lhu op1:x31; dest:x12; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x31,x12,-2048,136,lhu,0)

// rs1==x6, rd==x31, 
// opcode:lhu op1:x6; dest:x31; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x6,x31,-2048,144,lhu,0)

// rs1==x19, rd==x16, 
// opcode:lhu op1:x19; dest:x16; immval:-2048; align:0
TEST_LOAD(x13,x15,0,x19,x16,-2048,152,lhu,0)
RVTEST_SIGBASE( x3,signature_x3_0)

// rs1==x15, rd==x30, 
// opcode:lhu op1:x15; dest:x30; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x15,x30,-2048,0,lhu,0)

// rs1==x27, rd==x19, 
// opcode:lhu op1:x27; dest:x19; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x27,x19,-2048,8,lhu,0)

// rs1==x11, rd==x13, 
// opcode:lhu op1:x11; dest:x13; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x11,x13,-2048,16,lhu,0)

// rs1==x8, rd==x22, 
// opcode:lhu op1:x8; dest:x22; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x8,x22,-2048,24,lhu,0)

// rs1==x23, rd==x7, 
// opcode:lhu op1:x23; dest:x7; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x23,x7,-2048,32,lhu,0)

// rs1==x16, rd==x15, 
// opcode:lhu op1:x16; dest:x15; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x16,x15,-2048,40,lhu,0)

// rs1==x13, rd==x18, 
// opcode:lhu op1:x13; dest:x18; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x13,x18,-2048,48,lhu,0)

// rs1==x1, rd==x0, 
// opcode:lhu op1:x1; dest:x0; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x1,x0,-2048,56,lhu,0)

// rs1==x20, rd==x6, 
// opcode:lhu op1:x20; dest:x6; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x20,x6,-2048,64,lhu,0)

// rs1==x18, rd==x21, 
// opcode:lhu op1:x18; dest:x21; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x18,x21,-2048,72,lhu,0)

// rs1==x9, rd==x2, 
// opcode:lhu op1:x9; dest:x2; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x9,x2,-2048,80,lhu,0)

// rd==x14, 
// opcode:lhu op1:x29; dest:x14; immval:-2048; align:0
TEST_LOAD(x3,x4,0,x29,x14,-2048,88,lhu,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 12*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
