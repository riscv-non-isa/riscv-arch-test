 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Mon Nov  9 11:54:31 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the subw instruction of the RISC-V I extension for the subw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*);def TEST_CASE_1=True;",subw)

RVTEST_SIGBASE( x18,signature_x18_1)

inst_0:
// rs2 == rd != rs1, rs1==x28, rs2==x16, rd==x16, rs1_val == (-2**(xlen-1)), rs2_val == 274877906944, rs1_val < 0 and rs2_val > 0, rs1_val == -9223372036854775808, rs1_val != rs2_val
// opcode: subw ; op1:x28; op2:x16; dest:x16; op1val:-9223372036854775808;  op2val:274877906944
TEST_RR_OP(subw, x16, x28, x16, 0x0, -9223372036854775808, 274877906944, x18, 0, x19)

inst_1:
// rs1 == rd != rs2, rs1==x14, rs2==x5, rd==x14, rs1_val == 0, rs2_val == -562949953421313
// opcode: subw ; op1:x14; op2:x5; dest:x14; op1val:0;  op2val:-562949953421313
TEST_RR_OP(subw, x14, x14, x5, 0xffffffff00000001, 0, -562949953421313, x18, 8, x19)

inst_2:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 9223372036854775807, rs2_val == 131072
// opcode: subw ; op1:x6; op2:x6; dest:x6; op1val:9223372036854775807;  op2val:131072
TEST_RR_OP(subw, x6, x6, x6, 0xfffdffff, 9223372036854775807, 131072, x18, 16, x19)

inst_3:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x7, rs1_val == 1, rs1_val > 0 and rs2_val < 0, rs2_val == -17
// opcode: subw ; op1:x9; op2:x9; dest:x7; op1val:1;  op2val:-17
TEST_RR_OP(subw, x7, x9, x9, 0xffffffff00000012, 1, -17, x18, 24, x19)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x15, rd==x8, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, rs1_val == 1024
// opcode: subw ; op1:x16; op2:x15; dest:x8; op1val:1024;  op2val:-9223372036854775808
TEST_RR_OP(subw, x8, x16, x15, 0x400, 1024, -9223372036854775808, x18, 32, x19)

inst_5:
// rs1==x22, rs2==x12, rd==x5, rs2_val == 0, rs1_val == 1152921504606846976
// opcode: subw ; op1:x22; op2:x12; dest:x5; op1val:1152921504606846976;  op2val:0
TEST_RR_OP(subw, x5, x22, x12, 0x0, 1152921504606846976, 0, x18, 40, x19)

inst_6:
// rs1==x5, rs2==x25, rd==x24, rs2_val == (2**(xlen-1)-1), rs1_val == 274877906944, rs2_val == 9223372036854775807
// opcode: subw ; op1:x5; op2:x25; dest:x24; op1val:274877906944;  op2val:9223372036854775807
TEST_RR_OP(subw, x24, x5, x25, 0xffffffff00000001, 274877906944, 9223372036854775807, x18, 48, x19)

inst_7:
// rs1==x0, rs2==x23, rd==x17, rs2_val == 1, rs1_val == 2147483648
// opcode: subw ; op1:x0; op2:x23; dest:x17; op1val:2147483648;  op2val:1
TEST_RR_OP(subw, x17, x0, x23, 0x7fffffff, 2147483648, 1, x18, 56, x19)

inst_8:
// rs1==x2, rs2==x14, rd==x12, rs1_val < 0 and rs2_val < 0, rs1_val == -4611686018427387905, rs2_val == -549755813889
// opcode: subw ; op1:x2; op2:x14; dest:x12; op1val:-4611686018427387905;  op2val:-549755813889
TEST_RR_OP(subw, x12, x2, x14, 0x0, -4611686018427387905, -549755813889, x18, 64, x19)

inst_9:
// rs1==x11, rs2==x20, rd==x1, rs1_val == rs2_val, rs1_val == -140737488355329, rs2_val == -140737488355329
// opcode: subw ; op1:x11; op2:x20; dest:x1; op1val:-140737488355329;  op2val:-140737488355329
TEST_RR_OP(subw, x1, x11, x20, 0x0, -140737488355329, -140737488355329, x18, 72, x19)

inst_10:
// rs1==x15, rs2==x0, rd==x23, rs1_val == 2, rs2_val == 34359738368
// opcode: subw ; op1:x15; op2:x0; dest:x23; op1val:2;  op2val:34359738368
TEST_RR_OP(subw, x23, x15, x0, 0x2, 2, 34359738368, x18, 80, x19)

inst_11:
// rs1==x27, rs2==x8, rd==x31, rs1_val == 4, rs2_val == 16
// opcode: subw ; op1:x27; op2:x8; dest:x31; op1val:4;  op2val:16
TEST_RR_OP(subw, x31, x27, x8, 0xfffffffffffffff4, 4, 16, x18, 88, x19)

inst_12:
// rs1==x20, rs2==x10, rd==x22, rs1_val == 8, rs2_val == -8796093022209
// opcode: subw ; op1:x20; op2:x10; dest:x22; op1val:8;  op2val:-8796093022209
TEST_RR_OP(subw, x22, x20, x10, 0xffffffff00000009, 8, -8796093022209, x18, 96, x19)

inst_13:
// rs1==x13, rs2==x31, rd==x25, rs1_val == 16, 
// opcode: subw ; op1:x13; op2:x31; dest:x25; op1val:16;  op2val:1
TEST_RR_OP(subw, x25, x13, x31, 0xf, 16, 1, x18, 104, x19)

inst_14:
// rs1==x30, rs2==x21, rd==x9, rs1_val == 32, rs2_val == 2147483648
// opcode: subw ; op1:x30; op2:x21; dest:x9; op1val:32;  op2val:2147483648
TEST_RR_OP(subw, x9, x30, x21, 0xffffffff80000020, 32, 2147483648, x18, 112, x19)

inst_15:
// rs1==x4, rs2==x24, rd==x3, rs1_val == 64, 
// opcode: subw ; op1:x4; op2:x24; dest:x3; op1val:64;  op2val:3
TEST_RR_OP(subw, x3, x4, x24, 0x3d, 64, 3, x18, 120, x19)

inst_16:
// rs1==x31, rs2==x27, rd==x2, rs1_val == 128, rs2_val == -72057594037927937
// opcode: subw ; op1:x31; op2:x27; dest:x2; op1val:128;  op2val:-72057594037927937
TEST_RR_OP(subw, x2, x31, x27, 0xffffffff00000081, 128, -72057594037927937, x18, 128, x6)

inst_17:
// rs1==x12, rs2==x4, rd==x21, rs1_val == 256, rs2_val == -16777217
// opcode: subw ; op1:x12; op2:x4; dest:x21; op1val:256;  op2val:-16777217
TEST_RR_OP(subw, x21, x12, x4, 0xffffffff01000101, 256, -16777217, x18, 136, x6)

inst_18:
// rs1==x1, rs2==x29, rd==x0, rs1_val == 512, rs2_val == -70368744177665
// opcode: subw ; op1:x1; op2:x29; dest:x0; op1val:512;  op2val:-70368744177665
TEST_RR_OP(subw, x0, x1, x29, 0xffffffff00000201, 512, -70368744177665, x18, 144, x6)
RVTEST_SIGBASE( x5,signature_x5_0)

inst_19:
// rs1==x19, rs2==x17, rd==x28, rs1_val == 2048, rs2_val == -2199023255553
// opcode: subw ; op1:x19; op2:x17; dest:x28; op1val:2048;  op2val:-2199023255553
TEST_RR_OP(subw, x28, x19, x17, 0xffffffff00000801, 2048, -2199023255553, x5, 0, x6)

inst_20:
// rs1==x29, rs2==x3, rd==x30, rs1_val == 4096, rs2_val == 4294967296
// opcode: subw ; op1:x29; op2:x3; dest:x30; op1val:4096;  op2val:4294967296
TEST_RR_OP(subw, x30, x29, x3, 0x1000, 4096, 4294967296, x5, 8, x6)

inst_21:
// rs1==x25, rs2==x26, rd==x18, rs1_val == 8192, rs2_val == 2097152
// opcode: subw ; op1:x25; op2:x26; dest:x18; op1val:8192;  op2val:2097152
TEST_RR_OP(subw, x18, x25, x26, 0xffffffffffe02000, 8192, 2097152, x5, 16, x6)

inst_22:
// rs1==x24, rs2==x28, rd==x27, rs1_val == 16384, rs2_val == 128
// opcode: subw ; op1:x24; op2:x28; dest:x27; op1val:16384;  op2val:128
TEST_RR_OP(subw, x27, x24, x28, 0x3f80, 16384, 128, x5, 24, x6)

inst_23:
// rs1==x18, rs2==x19, rd==x26, rs1_val == 32768, rs2_val == -2251799813685249
// opcode: subw ; op1:x18; op2:x19; dest:x26; op1val:32768;  op2val:-2251799813685249
TEST_RR_OP(subw, x26, x18, x19, 0xffffffff00008001, 32768, -2251799813685249, x5, 32, x6)

inst_24:
// rs1==x26, rs2==x30, rd==x19, rs1_val == 65536, rs2_val == 8388608
// opcode: subw ; op1:x26; op2:x30; dest:x19; op1val:65536;  op2val:8388608
TEST_RR_OP(subw, x19, x26, x30, 0xffffffffff810000, 65536, 8388608, x5, 40, x6)

inst_25:
// rs1==x10, rs2==x1, rd==x13, rs1_val == 131072, rs2_val == 1024
// opcode: subw ; op1:x10; op2:x1; dest:x13; op1val:131072;  op2val:1024
TEST_RR_OP(subw, x13, x10, x1, 0x1fc00, 131072, 1024, x5, 48, x6)

inst_26:
// rs1==x21, rs2==x18, rd==x29, rs1_val == 262144, rs2_val == 1048576
// opcode: subw ; op1:x21; op2:x18; dest:x29; op1val:262144;  op2val:1048576
TEST_RR_OP(subw, x29, x21, x18, 0xfffffffffff40000, 262144, 1048576, x5, 56, x6)

inst_27:
// rs1==x8, rs2==x13, rd==x15, rs1_val == 524288, rs2_val == 16777216
// opcode: subw ; op1:x8; op2:x13; dest:x15; op1val:524288;  op2val:16777216
TEST_RR_OP(subw, x15, x8, x13, 0xffffffffff080000, 524288, 16777216, x5, 64, x6)

inst_28:
// rs1==x17, rs2==x22, rd==x11, rs1_val == 1048576, 
// opcode: subw ; op1:x17; op2:x22; dest:x11; op1val:1048576;  op2val:16777216
TEST_RR_OP(subw, x11, x17, x22, 0xffffffffff100000, 1048576, 16777216, x5, 72, x6)

inst_29:
// rs1==x23, rs2==x11, rd==x4, rs1_val == 2097152, 
// opcode: subw ; op1:x23; op2:x11; dest:x4; op1val:2097152;  op2val:16
TEST_RR_OP(subw, x4, x23, x11, 0x1ffff0, 2097152, 16, x5, 80, x6)

inst_30:
// rs1==x3, rs2==x7, rd==x20, rs1_val == 4194304, 
// opcode: subw ; op1:x3; op2:x7; dest:x20; op1val:4194304;  op2val:1
TEST_RR_OP(subw, x20, x3, x7, 0x3fffff, 4194304, 1, x5, 88, x6)

inst_31:
// rs1==x7, rs2==x2, rd==x10, rs1_val == 8388608, 
// opcode: subw ; op1:x7; op2:x2; dest:x10; op1val:8388608;  op2val:9223372036854775807
TEST_RR_OP(subw, x10, x7, x2, 0xffffffff00800001, 8388608, 9223372036854775807, x5, 96, x6)

inst_32:
// rs1_val == 16777216, rs2_val == -16385
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:-16385
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff01004001, 16777216, -16385, x5, 104, x6)

inst_33:
// rs1_val == 33554432, rs2_val == -1099511627777
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:-1099511627777
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff02000001, 33554432, -1099511627777, x5, 112, x6)

inst_34:
// rs1_val == 67108864, rs2_val == 32768
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:32768
TEST_RR_OP(subw, x12, x10, x11, 0x3ff8000, 67108864, 32768, x5, 120, x6)

inst_35:
// rs1_val == 134217728, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-9223372036854775808
TEST_RR_OP(subw, x12, x10, x11, 0x8000000, 134217728, -9223372036854775808, x5, 128, x6)

inst_36:
// rs1_val == 268435456, rs2_val == -144115188075855873
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:-144115188075855873
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff10000001, 268435456, -144115188075855873, x5, 136, x6)

inst_37:
// rs1_val == 536870912, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:8388608
TEST_RR_OP(subw, x12, x10, x11, 0x1f800000, 536870912, 8388608, x5, 144, x6)

inst_38:
// rs1_val == 1073741824, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:8388608
TEST_RR_OP(subw, x12, x10, x11, 0x3f800000, 1073741824, 8388608, x5, 152, x6)

inst_39:
// rs1_val == 4294967296, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:4294967296
TEST_RR_OP(subw, x12, x10, x11, 0x0, 4294967296, 4294967296, x5, 160, x6)

inst_40:
// rs1_val == 8589934592, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:-16385
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00004001, 8589934592, -16385, x5, 168, x6)

inst_41:
// rs1_val == 17179869184, rs2_val == -513
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:-513
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000201, 17179869184, -513, x5, 176, x6)

inst_42:
// rs1_val == 34359738368, rs2_val == 8192
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:8192
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffffe000, 34359738368, 8192, x5, 184, x6)

inst_43:
// rs1_val == 68719476736, rs2_val == 281474976710656
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:281474976710656
TEST_RR_OP(subw, x12, x10, x11, 0x0, 68719476736, 281474976710656, x5, 192, x6)

inst_44:
// rs1_val == 137438953472, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:-17
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000011, 137438953472, -17, x5, 200, x6)

inst_45:
// rs1_val == 549755813888, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:-8
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000008, 549755813888, -8, x5, 208, x6)

inst_46:
// rs1_val == 1099511627776, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:8192
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffffe000, 1099511627776, 8192, x5, 216, x6)

inst_47:
// rs1_val == 2199023255552, rs2_val == 68719476736
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:68719476736
TEST_RR_OP(subw, x12, x10, x11, 0x0, 2199023255552, 68719476736, x5, 224, x6)

inst_48:
// rs1_val == 4398046511104, rs2_val == -2305843009213693953
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-2305843009213693953
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000001, 4398046511104, -2305843009213693953, x5, 232, x6)

inst_49:
// rs1_val == 8796093022208, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:0
TEST_RR_OP(subw, x12, x10, x11, 0x0, 8796093022208, 0, x5, 240, x6)

inst_50:
// rs1_val == 17592186044416, rs2_val == -1048577
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:-1048577
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00100001, 17592186044416, -1048577, x5, 248, x6)

inst_51:
// rs1_val == 35184372088832, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:-16385
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00004001, 35184372088832, -16385, x5, 256, x6)

inst_52:
// rs1_val == 70368744177664, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:0
TEST_RR_OP(subw, x12, x10, x11, 0x0, 70368744177664, 0, x5, 264, x6)

inst_53:
// rs1_val == 140737488355328, rs2_val == -65
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:-65
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000041, 140737488355328, -65, x5, 272, x6)

inst_54:
// rs1_val == 281474976710656, rs2_val == 16384
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:16384
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffffc000, 281474976710656, 16384, x5, 280, x6)

inst_55:
// rs1_val == 562949953421312, rs2_val == 67108864
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:67108864
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffc000000, 562949953421312, 67108864, x5, 288, x6)

inst_56:
// rs1_val == 1125899906842624, rs2_val == 576460752303423488
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:576460752303423488
TEST_RR_OP(subw, x12, x10, x11, 0x0, 1125899906842624, 576460752303423488, x5, 296, x6)

inst_57:
// rs1_val == 2251799813685248, rs2_val == 2251799813685248
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:2251799813685248
TEST_RR_OP(subw, x12, x10, x11, 0x0, 2251799813685248, 2251799813685248, x5, 304, x6)

inst_58:
// rs1_val == 4503599627370496, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:16
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffff0, 4503599627370496, 16, x5, 312, x6)

inst_59:
// rs1_val == 9007199254740992, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:-4
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000004, 9007199254740992, -4, x5, 320, x6)

inst_60:
// rs1_val == 18014398509481984, rs2_val == -524289
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-524289
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00080001, 18014398509481984, -524289, x5, 328, x6)

inst_61:
// rs1_val == 36028797018963968, rs2_val == -9007199254740993
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:-9007199254740993
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000001, 36028797018963968, -9007199254740993, x5, 336, x6)

inst_62:
// rs1_val == 72057594037927936, rs2_val == 6148914691236517205
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:6148914691236517205
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffaaaaaaab, 72057594037927936, 6148914691236517205, x5, 344, x6)

inst_63:
// rs1_val == 144115188075855872, rs2_val == -6148914691236517206
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:-6148914691236517206
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff55555556, 144115188075855872, -6148914691236517206, x5, 352, x6)

inst_64:
// rs1_val == 288230376151711744, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-549755813889
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000001, 288230376151711744, -549755813889, x5, 360, x6)

inst_65:
// rs1_val == 576460752303423488, rs2_val == -129
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-129
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000081, 576460752303423488, -129, x5, 368, x6)

inst_66:
// rs1_val == 2305843009213693952, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-16385
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00004001, 2305843009213693952, -16385, x5, 376, x6)

inst_67:
// rs1_val == 4611686018427387904, rs2_val == 288230376151711744
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:288230376151711744
TEST_RR_OP(subw, x12, x10, x11, 0x0, 4611686018427387904, 288230376151711744, x5, 384, x6)

inst_68:
// rs1_val == -2, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-72057594037927937
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffffffff, -2, -72057594037927937, x5, 392, x6)

inst_69:
// rs1_val == -3, rs2_val == -4398046511105
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-4398046511105
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffffe, -3, -4398046511105, x5, 400, x6)

inst_70:
// rs1_val == -5, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-70368744177665
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffffc, -5, -70368744177665, x5, 408, x6)

inst_71:
// rs1_val == -9, rs2_val == 64
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:64
TEST_RR_OP(subw, x12, x10, x11, 0xffffffb7, -9, 64, x5, 416, x6)

inst_72:
// rs1_val == -17, rs2_val == -67108865
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-67108865
TEST_RR_OP(subw, x12, x10, x11, 0x3fffff0, -17, -67108865, x5, 424, x6)

inst_73:
// rs1_val == -33, rs2_val == 4194304
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:4194304
TEST_RR_OP(subw, x12, x10, x11, 0xffbfffdf, -33, 4194304, x5, 432, x6)

inst_74:
// rs1_val == -65, rs2_val == 268435456
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:268435456
TEST_RR_OP(subw, x12, x10, x11, 0xefffffbf, -65, 268435456, x5, 440, x6)

inst_75:
// rs1_val == -129, rs2_val == 70368744177664
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:70368744177664
TEST_RR_OP(subw, x12, x10, x11, 0xffffff7f, -129, 70368744177664, x5, 448, x6)

inst_76:
// rs1_val == -257, rs2_val == -288230376151711745
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:-288230376151711745
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffffff00, -257, -288230376151711745, x5, 456, x6)

inst_77:
// rs1_val == -513, rs2_val == -35184372088833
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-35184372088833
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffe00, -513, -35184372088833, x5, 464, x6)

inst_78:
// rs1_val == -1025, rs2_val == 8589934592
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:8589934592
TEST_RR_OP(subw, x12, x10, x11, 0xfffffbff, -1025, 8589934592, x5, 472, x6)

inst_79:
// rs1_val == -2049, rs2_val == -1152921504606846977
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:-1152921504606846977
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffff800, -2049, -1152921504606846977, x5, 480, x6)

inst_80:
// rs2_val == -1125899906842625, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-1125899906842625
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffffe, -3, -1125899906842625, x5, 488, x6)

inst_81:
// rs2_val == -4503599627370497, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-4503599627370497
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff08000001, 134217728, -4503599627370497, x5, 496, x6)

inst_82:
// rs2_val == -18014398509481985, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:-18014398509481985
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000401, 1024, -18014398509481985, x5, 504, x6)

inst_83:
// rs2_val == -36028797018963969, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:-36028797018963969
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000001, 4611686018427387904, -36028797018963969, x5, 512, x6)

inst_84:
// rs2_val == -576460752303423489, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:-576460752303423489
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffffff80, -129, -576460752303423489, x5, 520, x6)

inst_85:
// rs2_val == -4611686018427387905, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:-4611686018427387905
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff01000001, 16777216, -4611686018427387905, x5, 528, x6)

inst_86:
// rs1_val == -4097, rs2_val == -1025
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:-1025
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffff400, -4097, -1025, x5, 536, x6)

inst_87:
// rs1_val == -8193, rs2_val == 18014398509481984
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:18014398509481984
TEST_RR_OP(subw, x12, x10, x11, 0xffffdfff, -8193, 18014398509481984, x5, 544, x6)

inst_88:
// rs1_val == -16385, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:-10
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffffc009, -16385, -10, x5, 552, x6)

inst_89:
// rs1_val == -32769, rs2_val == 512
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:512
TEST_RR_OP(subw, x12, x10, x11, 0xffff7dff, -32769, 512, x5, 560, x6)

inst_90:
// rs1_val == -65537, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:67108864
TEST_RR_OP(subw, x12, x10, x11, 0xfbfeffff, -65537, 67108864, x5, 568, x6)

inst_91:
// rs1_val == -131073, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:-562949953421313
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffe0000, -131073, -562949953421313, x5, 576, x6)

inst_92:
// rs1_val == -262145, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:512
TEST_RR_OP(subw, x12, x10, x11, 0xfffbfdff, -262145, 512, x5, 584, x6)

inst_93:
// rs1_val == -524289, rs2_val == -68719476737
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-68719476737
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffff80000, -524289, -68719476737, x5, 592, x6)

inst_94:
// rs1_val == -1048577, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:-6148914691236517206
TEST_RR_OP(subw, x12, x10, x11, 0x55455555, -1048577, -6148914691236517206, x5, 600, x6)

inst_95:
// rs1_val == -2097153, rs2_val == 549755813888
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:549755813888
TEST_RR_OP(subw, x12, x10, x11, 0xffdfffff, -2097153, 549755813888, x5, 608, x6)

inst_96:
// rs1_val == -4194305, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:-8
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffc00007, -4194305, -8, x5, 616, x6)

inst_97:
// rs1_val == -8388609, rs2_val == 9007199254740992
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:9007199254740992
TEST_RR_OP(subw, x12, x10, x11, 0xff7fffff, -8388609, 9007199254740992, x5, 624, x6)

inst_98:
// rs1_val == -16777217, rs2_val == 2
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:2
TEST_RR_OP(subw, x12, x10, x11, 0xfefffffd, -16777217, 2, x5, 632, x6)

inst_99:
// rs1_val == -33554433, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:64
TEST_RR_OP(subw, x12, x10, x11, 0xfdffffbf, -33554433, 64, x5, 640, x6)

inst_100:
// rs1_val == -67108865, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-17
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffc000010, -67108865, -17, x5, 648, x6)

inst_101:
// rs1_val == -134217729, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-1099511627777
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffff8000000, -134217729, -1099511627777, x5, 656, x6)

inst_102:
// rs1_val == -268435457, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:-6148914691236517206
TEST_RR_OP(subw, x12, x10, x11, 0x45555555, -268435457, -6148914691236517206, x5, 664, x6)

inst_103:
// rs1_val == -536870913, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:6148914691236517205
TEST_RR_OP(subw, x12, x10, x11, 0x8aaaaaaa, -536870913, 6148914691236517205, x5, 672, x6)

inst_104:
// rs1_val == -1073741825, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:2147483648
TEST_RR_OP(subw, x12, x10, x11, 0x3fffffff, -1073741825, 2147483648, x5, 680, x6)

inst_105:
// rs1_val == -2147483649, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:16384
TEST_RR_OP(subw, x12, x10, x11, 0x7fffbfff, -2147483649, 16384, x5, 688, x6)

inst_106:
// rs1_val == -4294967297, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-8796093022209
TEST_RR_OP(subw, x12, x10, x11, 0x0, -4294967297, -8796093022209, x5, 696, x6)

inst_107:
// rs1_val == -8589934593, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-6
TEST_RR_OP(subw, x12, x10, x11, 0x5, -8589934593, -6, x5, 704, x6)

inst_108:
// rs1_val == -17179869185, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:2147483648
TEST_RR_OP(subw, x12, x10, x11, 0x7fffffff, -17179869185, 2147483648, x5, 712, x6)

inst_109:
// rs1_val == -34359738369, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:32768
TEST_RR_OP(subw, x12, x10, x11, 0xffff7fff, -34359738369, 32768, x5, 720, x6)

inst_110:
// rs1_val == -68719476737, rs2_val == 1073741824
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:1073741824
TEST_RR_OP(subw, x12, x10, x11, 0xbfffffff, -68719476737, 1073741824, x5, 728, x6)

inst_111:
// rs1_val == -137438953473, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:6
TEST_RR_OP(subw, x12, x10, x11, 0xfffffff9, -137438953473, 6, x5, 736, x6)

inst_112:
// rs1_val == -274877906945, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:-7
TEST_RR_OP(subw, x12, x10, x11, 0x6, -274877906945, -7, x5, 744, x6)

inst_113:
// rs1_val == -549755813889, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:8388608
TEST_RR_OP(subw, x12, x10, x11, 0xff7fffff, -549755813889, 8388608, x5, 752, x6)

inst_114:
// rs1_val == -1099511627777, rs2_val == 262144
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:262144
TEST_RR_OP(subw, x12, x10, x11, 0xfffbffff, -1099511627777, 262144, x5, 760, x6)

inst_115:
// rs1_val == -2199023255553, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:2
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffd, -2199023255553, 2, x5, 768, x6)

inst_116:
// rs1_val == -4398046511105, rs2_val == -33554433
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:-33554433
TEST_RR_OP(subw, x12, x10, x11, 0x2000000, -4398046511105, -33554433, x5, 776, x6)

inst_117:
// rs1_val == -8796093022209, rs2_val == 17592186044416
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:17592186044416
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -8796093022209, 17592186044416, x5, 784, x6)

inst_118:
// rs1_val == -17592186044417, rs2_val == 256
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:256
TEST_RR_OP(subw, x12, x10, x11, 0xfffffeff, -17592186044417, 256, x5, 792, x6)

inst_119:
// rs1_val == -35184372088833, rs2_val == 35184372088832
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:35184372088832
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -35184372088833, 35184372088832, x5, 800, x6)

inst_120:
// rs1_val == -70368744177665, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:1
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffe, -70368744177665, 1, x5, 808, x6)

inst_121:
// rs1_val == -281474976710657, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:-68719476737
TEST_RR_OP(subw, x12, x10, x11, 0x0, -281474976710657, -68719476737, x5, 816, x6)

inst_122:
// rs1_val == -562949953421313, rs2_val == 2305843009213693952
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:2305843009213693952
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -562949953421313, 2305843009213693952, x5, 824, x6)

inst_123:
// rs1_val == -1125899906842625, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-4503599627370497
TEST_RR_OP(subw, x12, x10, x11, 0x0, -1125899906842625, -4503599627370497, x5, 832, x6)

inst_124:
// rs1_val == -2251799813685249, rs2_val == 1099511627776
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:1099511627776
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -2251799813685249, 1099511627776, x5, 840, x6)

inst_125:
// rs1_val == -4503599627370497, rs2_val == -131073
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:-131073
TEST_RR_OP(subw, x12, x10, x11, 0x20000, -4503599627370497, -131073, x5, 848, x6)

inst_126:
// rs1_val == -9007199254740993, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:5
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffa, -9007199254740993, 5, x5, 856, x6)

inst_127:
// rs1_val == -18014398509481985, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:8589934592
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -18014398509481985, 8589934592, x5, 864, x6)

inst_128:
// rs1_val == -36028797018963969, rs2_val == -134217729
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:-134217729
TEST_RR_OP(subw, x12, x10, x11, 0x8000000, -36028797018963969, -134217729, x5, 872, x6)

inst_129:
// rs1_val == -72057594037927937, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:2
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffd, -72057594037927937, 2, x5, 880, x6)

inst_130:
// rs1_val == -144115188075855873, rs2_val == -17179869185
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-17179869185
TEST_RR_OP(subw, x12, x10, x11, 0x0, -144115188075855873, -17179869185, x5, 888, x6)

inst_131:
// rs1_val == -288230376151711745, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:3
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffc, -288230376151711745, 3, x5, 896, x6)

inst_132:
// rs1_val == -576460752303423489, rs2_val == 4
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:4
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffb, -576460752303423489, 4, x5, 904, x6)

inst_133:
// rs1_val == -1152921504606846977, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:549755813888
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -1152921504606846977, 549755813888, x5, 912, x6)

inst_134:
// rs1_val == -2305843009213693953, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:2
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffd, -2305843009213693953, 2, x5, 920, x6)

inst_135:
// rs1_val == 6148914691236517205, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:-140737488355329
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff55555556, 6148914691236517205, -140737488355329, x5, 928, x6)

inst_136:
// rs1_val == -6148914691236517206, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-513
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffaaaaacab, -6148914691236517206, -513, x5, 936, x6)

inst_137:
// rs2_val == 8, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:8
TEST_RR_OP(subw, x12, x10, x11, 0xfffffff7, -1125899906842625, 8, x5, 944, x6)

inst_138:
// rs2_val == 32, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:32
TEST_RR_OP(subw, x12, x10, x11, 0xefffffdf, -268435457, 32, x5, 952, x6)

inst_139:
// rs2_val == 2048, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:2048
TEST_RR_OP(subw, x12, x10, x11, 0x3f800, 262144, 2048, x5, 960, x6)

inst_140:
// rs2_val == 4096, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:4096
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffff000, 9007199254740992, 4096, x5, 968, x6)

inst_141:
// rs2_val == 65536, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:65536
TEST_RR_OP(subw, x12, x10, x11, 0xfffeffff, -68719476737, 65536, x5, 976, x6)

inst_142:
// rs2_val == 524288, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:524288
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffff90000, 65536, 524288, x5, 984, x6)

inst_143:
// rs2_val == 33554432, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:33554432
TEST_RR_OP(subw, x12, x10, x11, 0xfdffffff, -8796093022209, 33554432, x5, 992, x6)

inst_144:
// rs2_val == 134217728, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:134217728
TEST_RR_OP(subw, x12, x10, x11, 0xb7ffffff, -1073741825, 134217728, x5, 1000, x6)

inst_145:
// rs2_val == 536870912, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:4096;  op2val:536870912
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffe0001000, 4096, 536870912, x5, 1008, x6)

inst_146:
// rs2_val == 17179869184, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:17179869184
TEST_RR_OP(subw, x12, x10, x11, 0x0, 4398046511104, 17179869184, x5, 1016, x6)

inst_147:
// rs2_val == 137438953472, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:137438953472
TEST_RR_OP(subw, x12, x10, x11, 0x10000000, 268435456, 137438953472, x5, 1024, x6)

inst_148:
// rs2_val == 2199023255552, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:2199023255552
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -68719476737, 2199023255552, x5, 1032, x6)

inst_149:
// rs2_val == 4398046511104, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:4398046511104
TEST_RR_OP(subw, x12, x10, x11, 0x0, 274877906944, 4398046511104, x5, 1040, x6)

inst_150:
// rs2_val == 8796093022208, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:8796093022208
TEST_RR_OP(subw, x12, x10, x11, 0x0, 68719476736, 8796093022208, x5, 1048, x6)

inst_151:
// rs2_val == 140737488355328, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:140737488355328
TEST_RR_OP(subw, x12, x10, x11, 0x0, 8589934592, 140737488355328, x5, 1056, x6)

inst_152:
// rs2_val == 562949953421312, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:562949953421312
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -36028797018963969, 562949953421312, x5, 1064, x6)

inst_153:
// rs2_val == 1125899906842624, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:1125899906842624
TEST_RR_OP(subw, x12, x10, x11, 0xfffffff7, -9, 1125899906842624, x5, 1072, x6)

inst_154:
// rs2_val == 4503599627370496, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:4503599627370496
TEST_RR_OP(subw, x12, x10, x11, 0xfffff7ff, -2049, 4503599627370496, x5, 1080, x6)

inst_155:
// rs2_val == 36028797018963968, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:36028797018963968
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -8589934593, 36028797018963968, x5, 1088, x6)

inst_156:
// rs2_val == 72057594037927936, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:72057594037927936
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -4503599627370497, 72057594037927936, x5, 1096, x6)

inst_157:
// rs2_val == 144115188075855872, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:144115188075855872
TEST_RR_OP(subw, x12, x10, x11, 0x0, 1152921504606846976, 144115188075855872, x5, 1104, x6)

inst_158:
// rs2_val == 1152921504606846976, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4;  op2val:1152921504606846976
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffc, -4, 1152921504606846976, x5, 1112, x6)

inst_159:
// rs2_val == 4611686018427387904, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:4611686018427387904
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff, -1125899906842625, 4611686018427387904, x5, 1120, x6)

inst_160:
// rs2_val == -2, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:-2
TEST_RR_OP(subw, x12, x10, x11, 0x1, -17179869185, -2, x5, 1128, x6)

inst_161:
// rs2_val == -3, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-3
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000003, 288230376151711744, -3, x5, 1136, x6)

inst_162:
// rs2_val == -5, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8;  op2val:-5
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffffd, -8, -5, x5, 1144, x6)

inst_163:
// rs2_val == -9, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-9
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffe00008, -2097153, -9, x5, 1152, x6)

inst_164:
// rs2_val == -33, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:-33
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000221, 512, -33, x5, 1160, x6)

inst_165:
// rs2_val == -257, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:-257
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00100101, 1048576, -257, x5, 1168, x6)

inst_166:
// rs2_val == -2049, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:-2049
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffc00800, -4194305, -2049, x5, 1176, x6)

inst_167:
// rs2_val == -4097, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-6;  op2val:-4097
TEST_RR_OP(subw, x12, x10, x11, 0xffb, -6, -4097, x5, 1184, x6)

inst_168:
// rs2_val == -8193, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:-8193
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00102001, 1048576, -8193, x5, 1192, x6)

inst_169:
// rs2_val == -32769, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:-32769
TEST_RR_OP(subw, x12, x10, x11, 0x7f00, -257, -32769, x5, 1200, x6)

inst_170:
// rs2_val == -65537, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-65537
TEST_RR_OP(subw, x12, x10, x11, 0x10000, -4294967297, -65537, x5, 1208, x6)

inst_171:
// rs2_val == -262145, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:256;  op2val:-262145
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00040101, 256, -262145, x5, 1216, x6)

inst_172:
// rs2_val == -2097153, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:-2097153
TEST_RR_OP(subw, x12, x10, x11, 0x1f8000, -32769, -2097153, x5, 1224, x6)

inst_173:
// rs2_val == -4194305, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:-4194305
TEST_RR_OP(subw, x12, x10, x11, 0x3fffc0, -65, -4194305, x5, 1232, x6)

inst_174:
// rs2_val == -8388609, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:-8388609
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00900001, 1048576, -8388609, x5, 1240, x6)

inst_175:
// rs2_val == -268435457, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:-268435457
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff10020001, 131072, -268435457, x5, 1248, x6)

inst_176:
// rs2_val == -536870913, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:-536870913
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff20000801, 2048, -536870913, x5, 1256, x6)

inst_177:
// rs2_val == -1073741825, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:-1073741825
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff40080001, 524288, -1073741825, x5, 1264, x6)

inst_178:
// rs2_val == -2147483649, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-2147483649
TEST_RR_OP(subw, x12, x10, x11, 0x7ff80000, -524289, -2147483649, x5, 1272, x6)

inst_179:
// rs2_val == -34359738369, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:-34359738369
TEST_RR_OP(subw, x12, x10, x11, 0x0, -70368744177665, -34359738369, x5, 1280, x6)

inst_180:
// rs2_val == -137438953473, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-10;  op2val:-137438953473
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffff7, -10, -137438953473, x5, 1288, x6)

inst_181:
// rs2_val == -274877906945, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-274877906945
TEST_RR_OP(subw, x12, x10, x11, 0x0, -1152921504606846977, -274877906945, x5, 1296, x6)

inst_182:
// rs2_val == -17592186044417, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-8;  op2val:-17592186044417
TEST_RR_OP(subw, x12, x10, x11, 0xfffffffffffffff9, -8, -17592186044417, x5, 1304, x6)

inst_183:
// rs2_val == -4294967297, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-4294967297
TEST_RR_OP(subw, x12, x10, x11, 0xffffffffffff0000, -65537, -4294967297, x5, 1312, x6)

inst_184:
// rs2_val == -281474976710657, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-281474976710657
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000007, 6, -281474976710657, x5, 1320, x6)

inst_185:
// rs2_val == -8589934593, 
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:-8589934593
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00004001, 16384, -8589934593, x5, 1328, x6)

inst_186:
// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 9223372036854775807, rs2_val == 131072
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:131072
TEST_RR_OP(subw, x12, x10, x11, 0xfffdffff, 9223372036854775807, 131072, x5, 1336, x6)

inst_187:
// rs1_val == 1, rs1_val > 0 and rs2_val < 0, rs2_val == -17
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:-17
TEST_RR_OP(subw, x12, x10, x11, 0xffffffff00000012, 1, -17, x5, 1344, x6)

inst_188:
// rs2_val == 1, rs1_val == 2147483648
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:1
TEST_RR_OP(subw, x12, x10, x11, 0x7fffffff, 2147483648, 1, x5, 1352, x6)

inst_189:
// rs1_val == 2, rs2_val == 34359738368
// opcode: subw ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:34359738368
TEST_RR_OP(subw, x12, x10, x11, 0x2, 2, 34359738368, x5, 1360, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 171*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
