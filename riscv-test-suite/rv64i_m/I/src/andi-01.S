 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:20:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the andi instruction of the RISC-V I extension for the andi covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",andi)

RVTEST_SIGBASE( x18,signature_x18_1)

// rs1 != rd, rs1==x9, rd==x2, rs1_val == imm_val, rs1_val == 8, imm_val == 8, rs1_val > 0 and imm_val > 0
// opcode: andi ; op1:x9; dest:x2; op1val:0x0000000000000008;  immval:8
TEST_IMM_OP( andi, x2, x9, 0x8, 0x0000000000000008, 8, x18, 0, x20)

// rs1 == rd, rs1==x4, rd==x4, rs1_val != imm_val, rs1_val < 0 and imm_val > 0, rs1_val == -1099511627777, imm_val == 128
// opcode: andi ; op1:x4; dest:x4; op1val:0xfffffeffffffffff;  immval:128
TEST_IMM_OP( andi, x4, x4, 0x80, 0xfffffeffffffffff, 128, x18, 8, x20)

// rs1==x28, rd==x9, rs1_val > 0 and imm_val < 0, rs1_val == 70368744177664, imm_val == -513
// opcode: andi ; op1:x28; dest:x9; op1val:0x0000400000000000;  immval:-513
TEST_IMM_OP( andi, x9, x28, 0x400000000000, 0x0000400000000000, -513, x18, 16, x20)

// rs1==x30, rd==x0, rs1_val < 0 and imm_val < 0, rs1_val == -1152921504606846977
// opcode: andi ; op1:x30; dest:x0; op1val:0xefffffffffffffff;  immval:-4
TEST_IMM_OP( andi, x0, x30, 0xeffffffffffffffc, 0xefffffffffffffff, -4, x18, 24, x20)

// rs1==x22, rd==x24, rs1_val == (-2**(xlen-1)), rs1_val == -9223372036854775808, imm_val == 256
// opcode: andi ; op1:x22; dest:x24; op1val:0x8000000000000000;  immval:256
TEST_IMM_OP( andi, x24, x22, 0x0, 0x8000000000000000, 256, x18, 32, x20)

// rs1==x15, rd==x16, rs1_val == 0, imm_val == (2**(12-1)-1), imm_val == 2047
// opcode: andi ; op1:x15; dest:x16; op1val:0x0000000000000000;  immval:2047
TEST_IMM_OP( andi, x16, x15, 0x0, 0x0000000000000000, 2047, x18, 40, x20)

// rs1==x5, rd==x12, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807
// opcode: andi ; op1:x5; dest:x12; op1val:0x7fffffffffffffff;  immval:3
TEST_IMM_OP( andi, x12, x5, 0x3, 0x7fffffffffffffff, 3, x18, 48, x20)

// rs1==x11, rd==x30, rs1_val == 1, 
// opcode: andi ; op1:x11; dest:x30; op1val:0x0000000000000001;  immval:-7
TEST_IMM_OP( andi, x30, x11, 0x1, 0x0000000000000001, -7, x18, 56, x20)

// rs1==x10, rd==x17, imm_val == (-2**(12-1)), rs1_val == -4097, imm_val == -2048
// opcode: andi ; op1:x10; dest:x17; op1val:0xffffffffffffefff;  immval:-2048
TEST_IMM_OP( andi, x17, x10, 0xffffffffffffe800, 0xffffffffffffefff, -2048, x18, 64, x20)

// rs1==x6, rd==x22, imm_val == 0, rs1_val == 4611686018427387904
// opcode: andi ; op1:x6; dest:x22; op1val:0x4000000000000000;  immval:0
TEST_IMM_OP( andi, x22, x6, 0x0, 0x4000000000000000, 0, x18, 72, x20)

// rs1==x29, rd==x26, imm_val == 1, rs1_val == 562949953421312
// opcode: andi ; op1:x29; dest:x26; op1val:0x0002000000000000;  immval:1
TEST_IMM_OP( andi, x26, x29, 0x0, 0x0002000000000000, 1, x18, 80, x20)

// rs1==x12, rd==x8, rs1_val == 2, 
// opcode: andi ; op1:x12; dest:x8; op1val:0x0000000000000002;  immval:-6
TEST_IMM_OP( andi, x8, x12, 0x2, 0x0000000000000002, -6, x18, 88, x20)

// rs1==x0, rd==x14, rs1_val == 4, 
// opcode: andi ; op1:x0; dest:x14; op1val:0x0000000000000004;  immval:3
TEST_IMM_OP( andi, x14, x0, 0x0, 0x0000000000000004, 3, x18, 96, x20)

// rs1==x8, rd==x28, rs1_val == 16, 
// opcode: andi ; op1:x8; dest:x28; op1val:0x0000000000000010;  immval:-513
TEST_IMM_OP( andi, x28, x8, 0x10, 0x0000000000000010, -513, x18, 104, x20)

// rs1==x26, rd==x1, rs1_val == 32, 
// opcode: andi ; op1:x26; dest:x1; op1val:0x0000000000000020;  immval:3
TEST_IMM_OP( andi, x1, x26, 0x0, 0x0000000000000020, 3, x18, 112, x20)

// rs1==x13, rd==x10, rs1_val == 64, 
// opcode: andi ; op1:x13; dest:x10; op1val:0x0000000000000040;  immval:-1024
TEST_IMM_OP( andi, x10, x13, 0x0, 0x0000000000000040, -1024, x18, 120, x20)

// rs1==x7, rd==x15, rs1_val == 128, 
// opcode: andi ; op1:x7; dest:x15; op1val:0x0000000000000080;  immval:-8
TEST_IMM_OP( andi, x15, x7, 0x80, 0x0000000000000080, -8, x18, 128, x20)

// rs1==x25, rd==x5, rs1_val == 256, imm_val == -33
// opcode: andi ; op1:x25; dest:x5; op1val:0x0000000000000100;  immval:-33
TEST_IMM_OP( andi, x5, x25, 0x100, 0x0000000000000100, -33, x18, 136, x20)

// rs1==x17, rd==x25, rs1_val == 512, imm_val == -257
// opcode: andi ; op1:x17; dest:x25; op1val:0x0000000000000200;  immval:-257
TEST_IMM_OP( andi, x25, x17, 0x200, 0x0000000000000200, -257, x18, 144, x20)

// rs1==x31, rd==x3, rs1_val == 1024, 
// opcode: andi ; op1:x31; dest:x3; op1val:0x0000000000000400;  immval:8
TEST_IMM_OP( andi, x3, x31, 0x0, 0x0000000000000400, 8, x18, 152, x20)

// rs1==x21, rd==x31, rs1_val == 2048, 
// opcode: andi ; op1:x21; dest:x31; op1val:0x0000000000000800;  immval:2047
TEST_IMM_OP( andi, x31, x21, 0x0, 0x0000000000000800, 2047, x18, 160, x20)

// rs1==x3, rd==x6, rs1_val == 4096, 
// opcode: andi ; op1:x3; dest:x6; op1val:0x0000000000001000;  immval:-1024
TEST_IMM_OP( andi, x6, x3, 0x1000, 0x0000000000001000, -1024, x18, 168, x20)

// rs1==x24, rd==x19, rs1_val == 8192, imm_val == 1365
// opcode: andi ; op1:x24; dest:x19; op1val:0x0000000000002000;  immval:1365
TEST_IMM_OP( andi, x19, x24, 0x0, 0x0000000000002000, 1365, x18, 176, x20)

// rs1==x19, rd==x29, rs1_val == 16384, 
// opcode: andi ; op1:x19; dest:x29; op1val:0x0000000000004000;  immval:256
TEST_IMM_OP( andi, x29, x19, 0x0, 0x0000000000004000, 256, x18, 184, x4)

// rs1==x23, rd==x7, rs1_val == 32768, 
// opcode: andi ; op1:x23; dest:x7; op1val:0x0000000000008000;  immval:-1
TEST_IMM_OP( andi, x7, x23, 0x8000, 0x0000000000008000, -1, x18, 192, x4)
RVTEST_SIGBASE( x3,signature_x3_0)

// rs1==x2, rd==x27, rs1_val == 65536, imm_val == -9
// opcode: andi ; op1:x2; dest:x27; op1val:0x0000000000010000;  immval:-9
TEST_IMM_OP( andi, x27, x2, 0x10000, 0x0000000000010000, -9, x3, 0, x4)

// rs1==x27, rd==x21, rs1_val == 131072, 
// opcode: andi ; op1:x27; dest:x21; op1val:0x0000000000020000;  immval:-1024
TEST_IMM_OP( andi, x21, x27, 0x20000, 0x0000000000020000, -1024, x3, 8, x4)

// rs1==x1, rd==x23, rs1_val == 262144, 
// opcode: andi ; op1:x1; dest:x23; op1val:0x0000000000040000;  immval:3
TEST_IMM_OP( andi, x23, x1, 0x0, 0x0000000000040000, 3, x3, 16, x4)

// rs1==x18, rd==x20, rs1_val == 524288, 
// opcode: andi ; op1:x18; dest:x20; op1val:0x0000000000080000;  immval:-8
TEST_IMM_OP( andi, x20, x18, 0x80000, 0x0000000000080000, -8, x3, 24, x4)

// rs1==x16, rd==x13, rs1_val == 1048576, imm_val == 64
// opcode: andi ; op1:x16; dest:x13; op1val:0x0000000000100000;  immval:64
TEST_IMM_OP( andi, x13, x16, 0x0, 0x0000000000100000, 64, x3, 32, x4)

// rs1==x20, rd==x18, rs1_val == 2097152, imm_val == 32
// opcode: andi ; op1:x20; dest:x18; op1val:0x0000000000200000;  immval:32
TEST_IMM_OP( andi, x18, x20, 0x0, 0x0000000000200000, 32, x3, 40, x4)

// rs1==x14, rd==x11, rs1_val == 4194304, 
// opcode: andi ; op1:x14; dest:x11; op1val:0x0000000000400000;  immval:-1
TEST_IMM_OP( andi, x11, x14, 0x400000, 0x0000000000400000, -1, x3, 48, x4)

// rs1_val == 8388608, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000000800000;  immval:-2048
TEST_IMM_OP( andi, x11, x10, 0x800000, 0x0000000000800000, -2048, x3, 56, x4)

// rs1_val == 16777216, imm_val == 16
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000001000000;  immval:16
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000001000000, 16, x3, 64, x4)

// rs1_val == 33554432, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000002000000;  immval:-1
TEST_IMM_OP( andi, x11, x10, 0x2000000, 0x0000000002000000, -1, x3, 72, x4)

// rs1_val == 67108864, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000004000000;  immval:9
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000004000000, 9, x3, 80, x4)

// rs1_val == 134217728, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000008000000;  immval:6
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000008000000, 6, x3, 88, x4)

// rs1_val == 268435456, imm_val == 512
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000010000000;  immval:512
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000010000000, 512, x3, 96, x4)

// rs1_val == 536870912, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000020000000;  immval:-1024
TEST_IMM_OP( andi, x11, x10, 0x20000000, 0x0000000020000000, -1024, x3, 104, x4)

// rs1_val == 1073741824, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000040000000;  immval:-7
TEST_IMM_OP( andi, x11, x10, 0x40000000, 0x0000000040000000, -7, x3, 112, x4)

// rs1_val == 2147483648, imm_val == 1024
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000080000000;  immval:1024
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000080000000, 1024, x3, 120, x4)

// rs1_val == 4294967296, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000100000000;  immval:6
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000100000000, 6, x3, 128, x4)

// rs1_val == 8589934592, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000200000000;  immval:1023
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000200000000, 1023, x3, 136, x4)

// rs1_val == 17179869184, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000400000000;  immval:-6
TEST_IMM_OP( andi, x11, x10, 0x400000000, 0x0000000400000000, -6, x3, 144, x4)

// rs1_val == 34359738368, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000800000000;  immval:1365
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000800000000, 1365, x3, 152, x4)

// rs1_val == 68719476736, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000001000000000;  immval:1024
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000001000000000, 1024, x3, 160, x4)

// rs1_val == 137438953472, imm_val == -17
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000002000000000;  immval:-17
TEST_IMM_OP( andi, x11, x10, 0x2000000000, 0x0000002000000000, -17, x3, 168, x4)

// rs1_val == 274877906944, imm_val == -1366
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000004000000000;  immval:-1366
TEST_IMM_OP( andi, x11, x10, 0x4000000000, 0x0000004000000000, -1366, x3, 176, x4)

// rs1_val == 549755813888, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000008000000000;  immval:128
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000008000000000, 128, x3, 184, x4)

// rs1_val == 1099511627776, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000010000000000;  immval:1
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000010000000000, 1, x3, 192, x4)

// rs1_val == 2199023255552, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000020000000000;  immval:128
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000020000000000, 128, x3, 200, x4)

// rs1_val == 4398046511104, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000040000000000;  immval:-1024
TEST_IMM_OP( andi, x11, x10, 0x40000000000, 0x0000040000000000, -1024, x3, 208, x4)

// rs1_val == 8796093022208, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000080000000000;  immval:-6
TEST_IMM_OP( andi, x11, x10, 0x80000000000, 0x0000080000000000, -6, x3, 216, x4)

// rs1_val == 17592186044416, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000100000000000;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000100000000000, 2047, x3, 224, x4)

// rs1_val == 35184372088832, imm_val == -2
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000200000000000;  immval:-2
TEST_IMM_OP( andi, x11, x10, 0x200000000000, 0x0000200000000000, -2, x3, 232, x4)

// rs1_val == 140737488355328, imm_val == -65
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000800000000000;  immval:-65
TEST_IMM_OP( andi, x11, x10, 0x800000000000, 0x0000800000000000, -65, x3, 240, x4)

// rs1_val == 281474976710656, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0001000000000000;  immval:0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0001000000000000, 0, x3, 248, x4)

// rs1_val == 1125899906842624, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0004000000000000;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0004000000000000, 2047, x3, 256, x4)

// rs1_val == 2251799813685248, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0008000000000000;  immval:1
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0008000000000000, 1, x3, 264, x4)

// rs1_val == 4503599627370496, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0010000000000000;  immval:-1024
TEST_IMM_OP( andi, x11, x10, 0x10000000000000, 0x0010000000000000, -1024, x3, 272, x4)

// rs1_val == 9007199254740992, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0020000000000000;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0020000000000000, 2047, x3, 280, x4)

// rs1_val == 18014398509481984, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0040000000000000;  immval:-1024
TEST_IMM_OP( andi, x11, x10, 0x40000000000000, 0x0040000000000000, -1024, x3, 288, x4)

// rs1_val == 36028797018963968, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0080000000000000;  immval:-65
TEST_IMM_OP( andi, x11, x10, 0x80000000000000, 0x0080000000000000, -65, x3, 296, x4)

// rs1_val == 72057594037927936, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0100000000000000;  immval:-513
TEST_IMM_OP( andi, x11, x10, 0x100000000000000, 0x0100000000000000, -513, x3, 304, x4)

// rs1_val == 144115188075855872, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0200000000000000;  immval:-1366
TEST_IMM_OP( andi, x11, x10, 0x200000000000000, 0x0200000000000000, -1366, x3, 312, x4)

// rs1_val == 288230376151711744, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0400000000000000;  immval:1024
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0400000000000000, 1024, x3, 320, x4)

// rs1_val == 576460752303423488, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0800000000000000;  immval:-1366
TEST_IMM_OP( andi, x11, x10, 0x800000000000000, 0x0800000000000000, -1366, x3, 328, x4)

// rs1_val == 1152921504606846976, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000000000000000;  immval:-8
TEST_IMM_OP( andi, x11, x10, 0x1000000000000000, 0x1000000000000000, -8, x3, 336, x4)

// rs1_val == 2305843009213693952, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000000000000000;  immval:1023
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2000000000000000, 1023, x3, 344, x4)

// rs1_val == -2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffffffe;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x7fe, 0xfffffffffffffffe, 2047, x3, 352, x4)

// rs1_val == -3, imm_val == -1025
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffffffd;  immval:-1025
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffbfd, 0xfffffffffffffffd, -1025, x3, 360, x4)

// rs1_val == -5, imm_val == 2
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffffffb;  immval:2
TEST_IMM_OP( andi, x11, x10, 0x2, 0xfffffffffffffffb, 2, x3, 368, x4)

// rs1_val == -9, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffffff7;  immval:6
TEST_IMM_OP( andi, x11, x10, 0x6, 0xfffffffffffffff7, 6, x3, 376, x4)

// rs1_val == -2251799813685249, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfff7ffffffffffff;  immval:128
TEST_IMM_OP( andi, x11, x10, 0x80, 0xfff7ffffffffffff, 128, x3, 384, x4)

// rs1_val == -4503599627370497, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffefffffffffffff;  immval:8
TEST_IMM_OP( andi, x11, x10, 0x8, 0xffefffffffffffff, 8, x3, 392, x4)

// rs1_val == -9007199254740993, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffdfffffffffffff;  immval:7
TEST_IMM_OP( andi, x11, x10, 0x7, 0xffdfffffffffffff, 7, x3, 400, x4)

// rs1_val == -18014398509481985, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffbfffffffffffff;  immval:256
TEST_IMM_OP( andi, x11, x10, 0x100, 0xffbfffffffffffff, 256, x3, 408, x4)

// rs1_val == -36028797018963969, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xff7fffffffffffff;  immval:-6
TEST_IMM_OP( andi, x11, x10, 0xff7ffffffffffffa, 0xff7fffffffffffff, -6, x3, 416, x4)

// rs1_val == -72057594037927937, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfeffffffffffffff;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x7ff, 0xfeffffffffffffff, 2047, x3, 424, x4)

// rs1_val == -144115188075855873, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfdffffffffffffff;  immval:-1025
TEST_IMM_OP( andi, x11, x10, 0xfdfffffffffffbff, 0xfdffffffffffffff, -1025, x3, 432, x4)

// rs1_val == -288230376151711745, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfbffffffffffffff;  immval:1365
TEST_IMM_OP( andi, x11, x10, 0x555, 0xfbffffffffffffff, 1365, x3, 440, x4)

// rs1_val == -576460752303423489, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xf7ffffffffffffff;  immval:128
TEST_IMM_OP( andi, x11, x10, 0x80, 0xf7ffffffffffffff, 128, x3, 448, x4)

// rs1_val == -2305843009213693953, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xdfffffffffffffff;  immval:64
TEST_IMM_OP( andi, x11, x10, 0x40, 0xdfffffffffffffff, 64, x3, 456, x4)

// rs1_val == -4611686018427387905, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xbfffffffffffffff;  immval:5
TEST_IMM_OP( andi, x11, x10, 0x5, 0xbfffffffffffffff, 5, x3, 464, x4)

// rs1_val == 6148914691236517205, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:32
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5555555555555555, 32, x3, 472, x4)

// rs1_val == -6148914691236517206, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xaaaaaaaaaaaaaaaa;  immval:1365
TEST_IMM_OP( andi, x11, x10, 0x0, 0xaaaaaaaaaaaaaaaa, 1365, x3, 480, x4)

// imm_val == 4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfeffffffffffffff;  immval:4
TEST_IMM_OP( andi, x11, x10, 0x4, 0xfeffffffffffffff, 4, x3, 488, x4)

// imm_val == -3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000002000000;  immval:-3
TEST_IMM_OP( andi, x11, x10, 0x2000000, 0x0000000002000000, -3, x3, 496, x4)

// imm_val == -5, rs1_val == -131073
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffdffff;  immval:-5
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffdfffb, 0xfffffffffffdffff, -5, x3, 504, x4)

// imm_val == -129, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000000000005;  immval:-129
TEST_IMM_OP( andi, x11, x10, 0x5, 0x0000000000000005, -129, x3, 512, x4)

// rs1_val == -17, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffffffef;  immval:-5
TEST_IMM_OP( andi, x11, x10, 0xffffffffffffffeb, 0xffffffffffffffef, -5, x3, 520, x4)

// rs1_val == -33, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffffffdf;  immval:-7
TEST_IMM_OP( andi, x11, x10, 0xffffffffffffffd9, 0xffffffffffffffdf, -7, x3, 528, x4)

// rs1_val == -65, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffffffbf;  immval:32
TEST_IMM_OP( andi, x11, x10, 0x20, 0xffffffffffffffbf, 32, x3, 536, x4)

// rs1_val == -129, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffffff7f;  immval:16
TEST_IMM_OP( andi, x11, x10, 0x10, 0xffffffffffffff7f, 16, x3, 544, x4)

// rs1_val == -257, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffffeff;  immval:1
TEST_IMM_OP( andi, x11, x10, 0x1, 0xfffffffffffffeff, 1, x3, 552, x4)

// rs1_val == -513, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffffdff;  immval:-17
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffdef, 0xfffffffffffffdff, -17, x3, 560, x4)

// rs1_val == -1025, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffffbff;  immval:-129
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffb7f, 0xfffffffffffffbff, -129, x3, 568, x4)

// rs1_val == -2049, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffff7ff;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x7ff, 0xfffffffffffff7ff, 2047, x3, 576, x4)

// rs1_val == -8193, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffffdfff;  immval:2
TEST_IMM_OP( andi, x11, x10, 0x2, 0xffffffffffffdfff, 2, x3, 584, x4)

// rs1_val == -16385, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffffbfff;  immval:-8
TEST_IMM_OP( andi, x11, x10, 0xffffffffffffbff8, 0xffffffffffffbfff, -8, x3, 592, x4)

// rs1_val == -32769, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffff7fff;  immval:-2048
TEST_IMM_OP( andi, x11, x10, 0xffffffffffff7800, 0xffffffffffff7fff, -2048, x3, 600, x4)

// rs1_val == -65537, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffeffff;  immval:3
TEST_IMM_OP( andi, x11, x10, 0x3, 0xfffffffffffeffff, 3, x3, 608, x4)

// rs1_val == -262145, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffffbffff;  immval:-17
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffbffef, 0xfffffffffffbffff, -17, x3, 616, x4)

// rs1_val == -524289, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffff7ffff;  immval:-4
TEST_IMM_OP( andi, x11, x10, 0xfffffffffff7fffc, 0xfffffffffff7ffff, -4, x3, 624, x4)

// rs1_val == -1048577, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffefffff;  immval:64
TEST_IMM_OP( andi, x11, x10, 0x40, 0xffffffffffefffff, 64, x3, 632, x4)

// rs1_val == -2097153, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffdfffff;  immval:-257
TEST_IMM_OP( andi, x11, x10, 0xffffffffffdffeff, 0xffffffffffdfffff, -257, x3, 640, x4)

// rs1_val == -4194305, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffffbfffff;  immval:4
TEST_IMM_OP( andi, x11, x10, 0x4, 0xffffffffffbfffff, 4, x3, 648, x4)

// rs1_val == -8388609, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffff7fffff;  immval:3
TEST_IMM_OP( andi, x11, x10, 0x3, 0xffffffffff7fffff, 3, x3, 656, x4)

// rs1_val == -16777217, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffeffffff;  immval:5
TEST_IMM_OP( andi, x11, x10, 0x5, 0xfffffffffeffffff, 5, x3, 664, x4)

// rs1_val == -33554433, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffdffffff;  immval:1023
TEST_IMM_OP( andi, x11, x10, 0x3ff, 0xfffffffffdffffff, 1023, x3, 672, x4)

// rs1_val == -67108865, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffffbffffff;  immval:-9
TEST_IMM_OP( andi, x11, x10, 0xfffffffffbfffff7, 0xfffffffffbffffff, -9, x3, 680, x4)

// rs1_val == -134217729, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffff7ffffff;  immval:-257
TEST_IMM_OP( andi, x11, x10, 0xfffffffff7fffeff, 0xfffffffff7ffffff, -257, x3, 688, x4)

// rs1_val == -268435457, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffefffffff;  immval:-65
TEST_IMM_OP( andi, x11, x10, 0xffffffffefffffbf, 0xffffffffefffffff, -65, x3, 696, x4)

// rs1_val == -536870913, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffdfffffff;  immval:-2048
TEST_IMM_OP( andi, x11, x10, 0xffffffffdffff800, 0xffffffffdfffffff, -2048, x3, 704, x4)

// rs1_val == -1073741825, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffffbfffffff;  immval:-1
TEST_IMM_OP( andi, x11, x10, 0xffffffffbfffffff, 0xffffffffbfffffff, -1, x3, 712, x4)

// rs1_val == -2147483649, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffff7fffffff;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x7ff, 0xffffffff7fffffff, 2047, x3, 720, x4)

// rs1_val == -4294967297, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffeffffffff;  immval:-4
TEST_IMM_OP( andi, x11, x10, 0xfffffffefffffffc, 0xfffffffeffffffff, -4, x3, 728, x4)

// rs1_val == -8589934593, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffdffffffff;  immval:1023
TEST_IMM_OP( andi, x11, x10, 0x3ff, 0xfffffffdffffffff, 1023, x3, 736, x4)

// rs1_val == -17179869185, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffffbffffffff;  immval:-33
TEST_IMM_OP( andi, x11, x10, 0xfffffffbffffffdf, 0xfffffffbffffffff, -33, x3, 744, x4)

// rs1_val == -34359738369, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffff7ffffffff;  immval:-2
TEST_IMM_OP( andi, x11, x10, 0xfffffff7fffffffe, 0xfffffff7ffffffff, -2, x3, 752, x4)

// rs1_val == -68719476737, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffefffffffff;  immval:8
TEST_IMM_OP( andi, x11, x10, 0x8, 0xffffffefffffffff, 8, x3, 760, x4)

// rs1_val == -137438953473, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffdfffffffff;  immval:-2
TEST_IMM_OP( andi, x11, x10, 0xffffffdffffffffe, 0xffffffdfffffffff, -2, x3, 768, x4)

// rs1_val == -274877906945, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffffbfffffffff;  immval:-7
TEST_IMM_OP( andi, x11, x10, 0xffffffbffffffff9, 0xffffffbfffffffff, -7, x3, 776, x4)

// rs1_val == -549755813889, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffff7fffffffff;  immval:-17
TEST_IMM_OP( andi, x11, x10, 0xffffff7fffffffef, 0xffffff7fffffffff, -17, x3, 784, x4)

// rs1_val == -2199023255553, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffdffffffffff;  immval:-7
TEST_IMM_OP( andi, x11, x10, 0xfffffdfffffffff9, 0xfffffdffffffffff, -7, x3, 792, x4)

// rs1_val == -4398046511105, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffffbffffffffff;  immval:128
TEST_IMM_OP( andi, x11, x10, 0x80, 0xfffffbffffffffff, 128, x3, 800, x4)

// rs1_val == -8796093022209, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffff7ffffffffff;  immval:3
TEST_IMM_OP( andi, x11, x10, 0x3, 0xfffff7ffffffffff, 3, x3, 808, x4)

// rs1_val == -17592186044417, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffefffffffffff;  immval:-10
TEST_IMM_OP( andi, x11, x10, 0xffffeffffffffff6, 0xffffefffffffffff, -10, x3, 816, x4)

// rs1_val == -35184372088833, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffdfffffffffff;  immval:32
TEST_IMM_OP( andi, x11, x10, 0x20, 0xffffdfffffffffff, 32, x3, 824, x4)

// rs1_val == -70368744177665, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffffbfffffffffff;  immval:-3
TEST_IMM_OP( andi, x11, x10, 0xffffbffffffffffd, 0xffffbfffffffffff, -3, x3, 832, x4)

// rs1_val == -140737488355329, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xffff7fffffffffff;  immval:-1
TEST_IMM_OP( andi, x11, x10, 0xffff7fffffffffff, 0xffff7fffffffffff, -1, x3, 840, x4)

// rs1_val == -281474976710657, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffeffffffffffff;  immval:5
TEST_IMM_OP( andi, x11, x10, 0x5, 0xfffeffffffffffff, 5, x3, 848, x4)

// rs1_val == -562949953421313, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffdffffffffffff;  immval:-10
TEST_IMM_OP( andi, x11, x10, 0xfffdfffffffffff6, 0xfffdffffffffffff, -10, x3, 856, x4)

// rs1_val == -1125899906842625, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xfffbffffffffffff;  immval:-1024
TEST_IMM_OP( andi, x11, x10, 0xfffbfffffffffc00, 0xfffbffffffffffff, -1024, x3, 864, x4)

// rs1_val < 0 and imm_val < 0, rs1_val == -1152921504606846977
// opcode: andi ; op1:x10; dest:x11; op1val:0xefffffffffffffff;  immval:-4
TEST_IMM_OP( andi, x11, x10, 0xeffffffffffffffc, 0xefffffffffffffff, -4, x3, 872, x4)

// rs1_val == 4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0000000000000004;  immval:3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0000000000000004, 3, x3, 880, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 111*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
