
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:23:49 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the andi instruction of the RISC-V I extension for the andi covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",andi)

RVTEST_SIGBASE( x4,signature_x4_1)

inst_0:
// rs1 == rd, rs1==x30, rd==x30, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val < 0 and imm_val < 0
// opcode: andi ; op1:x30; dest:x30; op1val:-0x4000000000000000;  immval:-0x800
TEST_IMM_OP( andi, x30, x30, 0xc000000000000000, -0x4000000000000000, -0x800, x4, 0, x7)

inst_1:
// rs1 != rd, rs1==x19, rd==x22, imm_val == 0, rs1_val==7378697629483820647 and imm_val==0
// opcode: andi ; op1:x19; dest:x22; op1val:0x6666666666666667;  immval:0x0
TEST_IMM_OP( andi, x22, x19, 0x0, 0x6666666666666667, 0x0, x4, 8, x7)

inst_2:
// rs1==x31, rd==x16, imm_val == (2**(12-1)-1), rs1_val > 0 and imm_val > 0, imm_val == 2047
// opcode: andi ; op1:x31; dest:x16; op1val:0x5;  immval:0x7ff
TEST_IMM_OP( andi, x16, x31, 0x5, 0x5, 0x7ff, x4, 16, x7)

inst_3:
// rs1==x25, rd==x9, imm_val == 1, rs1_val < 0 and imm_val > 0, rs1_val == -562949953421313
// opcode: andi ; op1:x25; dest:x9; op1val:-0x2000000000001;  immval:0x1
TEST_IMM_OP( andi, x9, x25, 0x1, -0x2000000000001, 0x1, x4, 24, x7)

inst_4:
// rs1==x0, rd==x24, rs1_val == (-2**(xlen-1)), imm_val == -513, rs1_val == -9223372036854775808
// opcode: andi ; op1:x0; dest:x24; op1val:-0x8000000000000000;  immval:-0x201
TEST_IMM_OP( andi, x24, x0, 0x8000000000000000, -0x8000000000000000, -0x201, x4, 32, x7)

inst_5:
// rs1==x8, rd==x5, rs1_val == 0, rs1_val==0 and imm_val==-1365
// opcode: andi ; op1:x8; dest:x5; op1val:0x0;  immval:-0x555
TEST_IMM_OP( andi, x5, x8, 0x0, 0x0, -0x555, x4, 40, x7)

inst_6:
// rs1==x21, rd==x10, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and imm_val < 0, imm_val == -9, rs1_val == 9223372036854775807
// opcode: andi ; op1:x21; dest:x10; op1val:0x7fffffffffffffff;  immval:-0x9
TEST_IMM_OP( andi, x10, x21, 0x7ffffffffffffff7, 0x7fffffffffffffff, -0x9, x4, 48, x7)

inst_7:
// rs1==x14, rd==x23, rs1_val == 1, 
// opcode: andi ; op1:x14; dest:x23; op1val:0x1;  immval:-0x8
TEST_IMM_OP( andi, x23, x14, 0x0, 0x1, -0x8, x4, 56, x7)

inst_8:
// rs1==x6, rd==x8, rs1_val == imm_val, rs1_val == -9
// opcode: andi ; op1:x6; dest:x8; op1val:-0x9;  immval:-0x9
TEST_IMM_OP( andi, x8, x6, 0xfffffffffffffff7, -0x9, -0x9, x4, 64, x7)

inst_9:
// rs1==x17, rd==x18, imm_val == 2, rs1_val == -68719476737
// opcode: andi ; op1:x17; dest:x18; op1val:-0x1000000001;  immval:0x2
TEST_IMM_OP( andi, x18, x17, 0x2, -0x1000000001, 0x2, x4, 72, x7)

inst_10:
// rs1==x27, rd==x25, imm_val == 4, rs1_val == 4503599627370496
// opcode: andi ; op1:x27; dest:x25; op1val:0x10000000000000;  immval:0x4
TEST_IMM_OP( andi, x25, x27, 0x0, 0x10000000000000, 0x4, x4, 80, x7)

inst_11:
// rs1==x5, rd==x17, imm_val == 8, rs1_val == -140737488355329
// opcode: andi ; op1:x5; dest:x17; op1val:-0x800000000001;  immval:0x8
TEST_IMM_OP( andi, x17, x5, 0x8, -0x800000000001, 0x8, x4, 88, x7)

inst_12:
// rs1==x2, rd==x19, imm_val == 16, rs1_val == 35184372088832
// opcode: andi ; op1:x2; dest:x19; op1val:0x200000000000;  immval:0x10
TEST_IMM_OP( andi, x19, x2, 0x0, 0x200000000000, 0x10, x4, 96, x7)

inst_13:
// rs1==x12, rd==x20, imm_val == 32, rs1_val == -18014398509481985
// opcode: andi ; op1:x12; dest:x20; op1val:-0x40000000000001;  immval:0x20
TEST_IMM_OP( andi, x20, x12, 0x20, -0x40000000000001, 0x20, x4, 104, x7)

inst_14:
// rs1==x11, rd==x3, imm_val == 64, rs1_val == 8589934592
// opcode: andi ; op1:x11; dest:x3; op1val:0x200000000;  immval:0x40
TEST_IMM_OP( andi, x3, x11, 0x0, 0x200000000, 0x40, x4, 112, x7)

inst_15:
// rs1==x24, rd==x12, imm_val == 128, 
// opcode: andi ; op1:x24; dest:x12; op1val:-0x7;  immval:0x80
TEST_IMM_OP( andi, x12, x24, 0x80, -0x7, 0x80, x4, 120, x7)

inst_16:
// rs1==x16, rd==x1, imm_val == 256, 
// opcode: andi ; op1:x16; dest:x1; op1val:0x200000000000;  immval:0x100
TEST_IMM_OP( andi, x1, x16, 0x0, 0x200000000000, 0x100, x4, 128, x7)

inst_17:
// rs1==x3, rd==x13, imm_val == 512, rs1_val == -6148914691236517206
// opcode: andi ; op1:x3; dest:x13; op1val:-0x5555555555555556;  immval:0x200
TEST_IMM_OP( andi, x13, x3, 0x200, -0x5555555555555556, 0x200, x4, 136, x7)

inst_18:
// rs1==x13, rd==x27, imm_val == 1024, rs1_val == 288230376151711744
// opcode: andi ; op1:x13; dest:x27; op1val:0x400000000000000;  immval:0x400
TEST_IMM_OP( andi, x27, x13, 0x0, 0x400000000000000, 0x400, x4, 144, x7)

inst_19:
// rs1==x23, rd==x6, imm_val == -2, 
// opcode: andi ; op1:x23; dest:x6; op1val:-0x4;  immval:-0x2
TEST_IMM_OP( andi, x6, x23, 0xfffffffffffffffc, -0x4, -0x2, x4, 152, x7)

inst_20:
// rs1==x28, rd==x26, imm_val == -3, rs1_val == 576460752303423488
// opcode: andi ; op1:x28; dest:x26; op1val:0x800000000000000;  immval:-0x3
TEST_IMM_OP( andi, x26, x28, 0x800000000000000, 0x800000000000000, -0x3, x4, 160, x7)

inst_21:
// rs1==x18, rd==x14, imm_val == -5, rs1_val == -274877906945
// opcode: andi ; op1:x18; dest:x14; op1val:-0x4000000001;  immval:-0x5
TEST_IMM_OP( andi, x14, x18, 0xffffffbffffffffb, -0x4000000001, -0x5, x4, 168, x5)

inst_22:
// rs1==x15, rd==x7, imm_val == -17, rs1_val == 70368744177664
// opcode: andi ; op1:x15; dest:x7; op1val:0x400000000000;  immval:-0x11
TEST_IMM_OP( andi, x7, x15, 0x400000000000, 0x400000000000, -0x11, x4, 176, x5)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_23:
// rs1==x4, rd==x2, imm_val == -33, 
// opcode: andi ; op1:x4; dest:x2; op1val:-0x5555555555555556;  immval:-0x21
TEST_IMM_OP( andi, x2, x4, 0xaaaaaaaaaaaaaa8a, -0x5555555555555556, -0x21, x3, 0, x5)

inst_24:
// rs1==x26, rd==x31, imm_val == -65, 
// opcode: andi ; op1:x26; dest:x31; op1val:-0x5555555555555556;  immval:-0x41
TEST_IMM_OP( andi, x31, x26, 0xaaaaaaaaaaaaaaaa, -0x5555555555555556, -0x41, x3, 8, x5)

inst_25:
// rs1==x1, rd==x15, imm_val == -129, 
// opcode: andi ; op1:x1; dest:x15; op1val:0x5;  immval:-0x81
TEST_IMM_OP( andi, x15, x1, 0x5, 0x5, -0x81, x3, 16, x5)

inst_26:
// rs1==x22, rd==x29, imm_val == -257, 
// opcode: andi ; op1:x22; dest:x29; op1val:-0xa;  immval:-0x101
TEST_IMM_OP( andi, x29, x22, 0xfffffffffffffef6, -0xa, -0x101, x3, 24, x5)

inst_27:
// rs1==x9, rd==x11, imm_val == -1025, rs1_val == 2147483648
// opcode: andi ; op1:x9; dest:x11; op1val:0x80000000;  immval:-0x401
TEST_IMM_OP( andi, x11, x9, 0x80000000, 0x80000000, -0x401, x3, 32, x5)

inst_28:
// rs1==x10, rd==x21, imm_val == 1365, rs1_val==-3037000498 and imm_val==1365
// opcode: andi ; op1:x10; dest:x21; op1val:-0xb504f332;  immval:0x555
TEST_IMM_OP( andi, x21, x10, 0x444, -0xb504f332, 0x555, x3, 40, x5)

inst_29:
// rs1==x29, rd==x28, imm_val == -1366, rs1_val==6148914691236517204 and imm_val==-1366
// opcode: andi ; op1:x29; dest:x28; op1val:0x5555555555555554;  immval:-0x556
TEST_IMM_OP( andi, x28, x29, 0x5555555555555000, 0x5555555555555554, -0x556, x3, 48, x5)

inst_30:
// rs1==x20, rd==x4, rs1_val == 2, rs1_val==2 and imm_val==-45
// opcode: andi ; op1:x20; dest:x4; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( andi, x4, x20, 0x2, 0x2, -0x2d, x3, 56, x5)

inst_31:
// rs1==x7, rd==x0, rs1_val == 4, 
// opcode: andi ; op1:x7; dest:x0; op1val:0x4;  immval:0x400
TEST_IMM_OP( andi, x0, x7, 0x0, 0x4, 0x400, x3, 64, x5)

inst_32:
// rs1_val == 8, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8;  immval:-0xa
TEST_IMM_OP( andi, x11, x10, 0x0, 0x8, -0xa, x3, 72, x5)

inst_33:
// rs1_val == 16, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10;  immval:-0x9
TEST_IMM_OP( andi, x11, x10, 0x10, 0x10, -0x9, x3, 80, x5)

inst_34:
// rs1_val == 32, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20, 0x0, x3, 88, x5)

inst_35:
// rs1_val == 64, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x40;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x40, 0x0, x3, 96, x5)

inst_36:
// rs1_val == 128, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x80;  immval:0x7ff
TEST_IMM_OP( andi, x11, x10, 0x80, 0x80, 0x7ff, x3, 104, x5)

inst_37:
// rs1_val == 256, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x100;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0x100, 0x100, -0x3, x3, 112, x5)

inst_38:
// rs1_val == 512, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x200;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x200, 0x554, x3, 120, x5)

inst_39:
// rs1_val == 1024, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x400;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x400, 0x3, x3, 128, x5)

inst_40:
// rs1_val == 2048, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x800, 0x332, x3, 136, x5)

inst_41:
// rs1_val == 4096, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000, 0x0, x3, 144, x5)

inst_42:
// rs1_val == 8192, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000;  immval:0x7ff
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2000, 0x7ff, x3, 152, x5)

inst_43:
// rs1_val == 16384, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4000;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x4000, 0x4000, -0x555, x3, 160, x5)

inst_44:
// rs1_val == 32768, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x8000, 0x8000, -0x2d, x3, 168, x5)

inst_45:
// rs1_val == 65536, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10000;  immval:0x7
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10000, 0x7, x3, 176, x5)

inst_46:
// rs1_val == 131072, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20000, 0x0, x3, 184, x5)

inst_47:
// rs1_val == 262144, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x40000;  immval:-0x8
TEST_IMM_OP( andi, x11, x10, 0x40000, 0x40000, -0x8, x3, 192, x5)

inst_48:
// rs1_val == 524288, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x80000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x80000, 0x4, x3, 200, x5)

inst_49:
// rs1_val == 1048576, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x100000;  immval:-0x6
TEST_IMM_OP( andi, x11, x10, 0x100000, 0x100000, -0x6, x3, 208, x5)

inst_50:
// rs1_val == 2097152, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x200000;  immval:0x40
TEST_IMM_OP( andi, x11, x10, 0x0, 0x200000, 0x40, x3, 216, x5)

inst_51:
// rs1_val == 4194304, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x400000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x400000, 0x0, x3, 224, x5)

inst_52:
// rs1_val == 8388608, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800000;  immval:-0x81
TEST_IMM_OP( andi, x11, x10, 0x800000, 0x800000, -0x81, x3, 232, x5)

inst_53:
// rs1_val == 16777216, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000000, 0x0, x3, 240, x5)

inst_54:
// rs1_val == 33554432, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000000;  immval:0x20
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2000000, 0x20, x3, 248, x5)

inst_55:
// rs1_val == 67108864, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4000000, 0x666, x3, 256, x5)

inst_56:
// rs1_val == 134217728, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000000;  immval:-0x800
TEST_IMM_OP( andi, x11, x10, 0x8000000, 0x8000000, -0x800, x3, 264, x5)

inst_57:
// rs1_val == 268435456, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10000000, 0x666, x3, 272, x5)

inst_58:
// rs1_val == 536870912, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000000;  immval:-0x1
TEST_IMM_OP( andi, x11, x10, 0x20000000, 0x20000000, -0x1, x3, 280, x5)

inst_59:
// rs1_val == 1073741824, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x40000000;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x40000000, 0x5, x3, 288, x5)

inst_60:
// rs1_val == 4294967296, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x100000000;  immval:0x7
TEST_IMM_OP( andi, x11, x10, 0x0, 0x100000000, 0x7, x3, 296, x5)

inst_61:
// rs1_val == 17179869184, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x400000000;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0x400000000, 0x400000000, -0x3, x3, 304, x5)

inst_62:
// rs1_val == 34359738368, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800000000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x800000000, 0x4, x3, 312, x5)

inst_63:
// rs1_val == 68719476736, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000000000;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000000000, 0x554, x3, 320, x5)

inst_64:
// rs1_val == 137438953472, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000000000;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2000000000, 0x2c, x3, 328, x5)

inst_65:
// rs1_val == 274877906944, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4000000000;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4000000000, 0x555, x3, 336, x5)

inst_66:
// rs1_val == 549755813888, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000000000;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x8000000000, 0x8000000000, -0x555, x3, 344, x5)

inst_67:
// rs1_val == 1099511627776, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10000000000;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10000000000, 0x2, x3, 352, x5)

inst_68:
// rs1_val == 2199023255552, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000000000;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20000000000, 0x332, x3, 360, x5)

inst_69:
// rs1_val == 4398046511104, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x40000000000;  immval:0x100
TEST_IMM_OP( andi, x11, x10, 0x0, 0x40000000000, 0x100, x3, 368, x5)

inst_70:
// rs1_val == 8796093022208, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x80000000000;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x80000000000, 0x555, x3, 376, x5)

inst_71:
// rs1_val == 17592186044416, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x100000000000;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x100000000000, 0x100000000000, -0x2c, x3, 384, x5)

inst_72:
// rs1_val == 140737488355328, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800000000000;  immval:-0x1
TEST_IMM_OP( andi, x11, x10, 0x800000000000, 0x800000000000, -0x1, x3, 392, x5)

inst_73:
// rs1_val == 281474976710656, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000000000000;  immval:-0x4
TEST_IMM_OP( andi, x11, x10, 0x1000000000000, 0x1000000000000, -0x4, x3, 400, x5)

inst_74:
// rs1_val == 562949953421312, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000000000000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2000000000000, 0x4, x3, 408, x5)

inst_75:
// rs1_val == 1125899906842624, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4000000000000;  immval:-0x400
TEST_IMM_OP( andi, x11, x10, 0x4000000000000, 0x4000000000000, -0x400, x3, 416, x5)

inst_76:
// rs1_val == 2251799813685248, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000000000000;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x8000000000000, 0x555, x3, 424, x5)

inst_77:
// rs1_val == 9007199254740992, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000000000000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20000000000000, 0x4, x3, 432, x5)

inst_78:
// rs1_val == 18014398509481984, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x40000000000000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x40000000000000, 0x4, x3, 440, x5)

inst_79:
// rs1_val == 36028797018963968, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x80000000000000;  immval:-0x41
TEST_IMM_OP( andi, x11, x10, 0x80000000000000, 0x80000000000000, -0x41, x3, 448, x5)

inst_80:
// rs1_val == 72057594037927936, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x100000000000000;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x0, 0x100000000000000, 0x665, x3, 456, x5)

inst_81:
// rs1_val == 144115188075855872, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x200000000000000;  immval:0x7ff
TEST_IMM_OP( andi, x11, x10, 0x0, 0x200000000000000, 0x7ff, x3, 464, x5)

inst_82:
// rs1_val == 1152921504606846976, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000000000000000;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000000000000000, 0x2e, x3, 472, x5)

inst_83:
// rs1_val == 2305843009213693952, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000000000000000;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2000000000000000, 0x666, x3, 480, x5)

inst_84:
// rs1_val == 4611686018427387904, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4000000000000000;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4000000000000000, 0x555, x3, 488, x5)

inst_85:
// rs1_val == -2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x2;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffaaa, -0x2, -0x556, x3, 496, x5)

inst_86:
// rs1_val == -3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x3;  immval:0x8
TEST_IMM_OP( andi, x11, x10, 0x8, -0x3, 0x8, x3, 504, x5)

inst_87:
// rs1_val == -5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5;  immval:-0x5
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffffb, -0x5, -0x5, x3, 512, x5)

inst_88:
// rs1_val == -17, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x11;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x11, 0x2, x3, 520, x5)

inst_89:
// rs1_val == -33, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x21;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x555, -0x21, 0x555, x3, 528, x5)

inst_90:
// rs1_val == -65, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x41;  immval:0x9
TEST_IMM_OP( andi, x11, x10, 0x9, -0x41, 0x9, x3, 536, x5)

inst_91:
// rs1_val == -129, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x81;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffa2a, -0x81, -0x556, x3, 544, x5)

inst_92:
// rs1_val == -257, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x101;  immval:-0x5
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffefb, -0x101, -0x5, x3, 552, x5)

inst_93:
// rs1_val == -513, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x201;  immval:-0x400
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffffc00, -0x201, -0x400, x3, 560, x5)

inst_94:
// rs1_val == -1025, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x401;  immval:0x80
TEST_IMM_OP( andi, x11, x10, 0x80, -0x401, 0x80, x3, 568, x5)

inst_95:
// rs1_val == -2049, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x801;  immval:0x8
TEST_IMM_OP( andi, x11, x10, 0x8, -0x801, 0x8, x3, 576, x5)

inst_96:
// rs1_val == -4097, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x1001;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0x1001, 0x5, x3, 584, x5)

inst_97:
// rs1_val == -8193, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x667, -0x2001, 0x667, x3, 592, x5)

inst_98:
// rs1_val == -16385, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x4001;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xffffffffffffbaaa, -0x4001, -0x556, x3, 600, x5)

inst_99:
// rs1_val == -32769, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2e, -0x8001, 0x2e, x3, 608, x5)

inst_100:
// rs1_val == -65537, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10001;  immval:-0x41
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffeffbf, -0x10001, -0x41, x3, 616, x5)

inst_101:
// rs1_val == -131073, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x20001;  immval:-0x9
TEST_IMM_OP( andi, x11, x10, 0xfffffffffffdfff7, -0x20001, -0x9, x3, 624, x5)

inst_102:
// rs1_val == -262145, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x40001;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x40001, 0x0, x3, 632, x5)

inst_103:
// rs1_val == -524289, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x80001;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xfffffffffff7ffd3, -0x80001, -0x2d, x3, 640, x5)

inst_104:
// rs1_val == -1048577, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x100001;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x555, -0x100001, 0x555, x3, 648, x5)

inst_105:
// rs1_val == -2097153, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, -0x200001, 0x332, x3, 656, x5)

inst_106:
// rs1_val == -4194305, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x80
TEST_IMM_OP( andi, x11, x10, 0x80, -0x400001, 0x80, x3, 664, x5)

inst_107:
// rs1_val == -8388609, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0x800001, 0x4, x3, 672, x5)

inst_108:
// rs1_val == -16777217, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x1000001;  immval:-0x400
TEST_IMM_OP( andi, x11, x10, 0xfffffffffefffc00, -0x1000001, -0x400, x3, 680, x5)

inst_109:
// rs1_val == -33554433, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x2000001;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xfffffffffdffffd4, -0x2000001, -0x2c, x3, 688, x5)

inst_110:
// rs1_val == -67108865, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x4000001;  immval:-0x400
TEST_IMM_OP( andi, x11, x10, 0xfffffffffbfffc00, -0x4000001, -0x400, x3, 696, x5)

inst_111:
// rs1_val == -134217729, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x2d, -0x8000001, 0x2d, x3, 704, x5)

inst_112:
// rs1_val == -268435457, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10000001;  immval:-0x201
TEST_IMM_OP( andi, x11, x10, 0xffffffffeffffdff, -0x10000001, -0x201, x3, 712, x5)

inst_113:
// rs1_val == -536870913, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x20000001;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0x20000001, 0x5, x3, 720, x5)

inst_114:
// rs1_val == -1073741825, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x40000001;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x40000001, 0x0, x3, 728, x5)

inst_115:
// rs1_val == -2147483649, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x80000001;  immval:0x80
TEST_IMM_OP( andi, x11, x10, 0x80, -0x80000001, 0x80, x3, 736, x5)

inst_116:
// rs1_val == -4294967297, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x100000001;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0xfffffffefffffffd, -0x100000001, -0x3, x3, 744, x5)

inst_117:
// rs1_val == -8589934593, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x200000001;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x333, -0x200000001, 0x333, x3, 752, x5)

inst_118:
// rs1_val == -17179869185, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x400000001;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x333, -0x400000001, 0x333, x3, 760, x5)

inst_119:
// rs1_val == -34359738369, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x800000001;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0xfffffff7fffffffd, -0x800000001, -0x3, x3, 768, x5)

inst_120:
// rs1_val == -137438953473, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x2000000001;  immval:-0x401
TEST_IMM_OP( andi, x11, x10, 0xffffffdffffffbff, -0x2000000001, -0x401, x3, 776, x5)

inst_121:
// rs1_val == -549755813889, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x8000000001;  immval:0x7ff
TEST_IMM_OP( andi, x11, x10, 0x7ff, -0x8000000001, 0x7ff, x3, 784, x5)

inst_122:
// rs1_val == -1099511627777, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10000000001;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x333, -0x10000000001, 0x333, x3, 792, x5)

inst_123:
// rs1_val == -2199023255553, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x20000000001;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xfffffdfffffffaab, -0x20000000001, -0x555, x3, 800, x5)

inst_124:
// rs1_val == -4398046511105, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x40000000001;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, -0x40000000001, 0x6, x3, 808, x5)

inst_125:
// rs1_val == -8796093022209, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x80000000001;  immval:-0x5
TEST_IMM_OP( andi, x11, x10, 0xfffff7fffffffffb, -0x80000000001, -0x5, x3, 816, x5)

inst_126:
// rs1_val == -17592186044417, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x100000000001;  immval:-0x6
TEST_IMM_OP( andi, x11, x10, 0xffffeffffffffffa, -0x100000000001, -0x6, x3, 824, x5)

inst_127:
// rs1_val == -35184372088833, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x200000000001;  immval:-0x800
TEST_IMM_OP( andi, x11, x10, 0xffffdffffffff800, -0x200000000001, -0x800, x3, 832, x5)

inst_128:
// rs1_val == -70368744177665, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x400000000001;  immval:-0x800
TEST_IMM_OP( andi, x11, x10, 0xffffbffffffff800, -0x400000000001, -0x800, x3, 840, x5)

inst_129:
// rs1_val == -281474976710657, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x1000000000001;  immval:0x200
TEST_IMM_OP( andi, x11, x10, 0x200, -0x1000000000001, 0x200, x3, 848, x5)

inst_130:
// rs1_val == -1125899906842625, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x4000000000001;  immval:-0x9
TEST_IMM_OP( andi, x11, x10, 0xfffbfffffffffff7, -0x4000000000001, -0x9, x3, 856, x5)

inst_131:
// rs1_val == -2251799813685249, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x8000000000001;  immval:-0x5
TEST_IMM_OP( andi, x11, x10, 0xfff7fffffffffffb, -0x8000000000001, -0x5, x3, 864, x5)

inst_132:
// rs1_val == -4503599627370497, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10000000000001;  immval:0x100
TEST_IMM_OP( andi, x11, x10, 0x100, -0x10000000000001, 0x100, x3, 872, x5)

inst_133:
// rs1_val == -9007199254740993, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x20000000000001;  immval:0x1
TEST_IMM_OP( andi, x11, x10, 0x1, -0x20000000000001, 0x1, x3, 880, x5)

inst_134:
// rs1_val == -36028797018963969, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x80000000000001;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xff7ffffffffffaaa, -0x80000000000001, -0x556, x3, 888, x5)

inst_135:
// rs1_val == -72057594037927937, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x100000000000001;  immval:-0x800
TEST_IMM_OP( andi, x11, x10, 0xfefffffffffff800, -0x100000000000001, -0x800, x3, 896, x5)

inst_136:
// rs1_val == -144115188075855873, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x200000000000001;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0x200000000000001, 0x5, x3, 904, x5)

inst_137:
// rs1_val == -288230376151711745, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x400000000000001;  immval:-0x4
TEST_IMM_OP( andi, x11, x10, 0xfbfffffffffffffc, -0x400000000000001, -0x4, x3, 912, x5)

inst_138:
// rs1_val == -576460752303423489, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x800000000000001;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x800000000000001, 0x2, x3, 920, x5)

inst_139:
// rs1_val == -1152921504606846977, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x1000000000000001;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xefffffffffffffd3, -0x1000000000000001, -0x2d, x3, 928, x5)

inst_140:
// rs1_val == -2305843009213693953, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x2000000000000001;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x2000000000000001, 0x2, x3, 936, x5)

inst_141:
// rs1_val == -4611686018427387905, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x4000000000000001;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0x4000000000000001, 0x5, x3, 944, x5)

inst_142:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205 and imm_val==46
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555555, 0x2e, x3, 952, x5)

inst_143:
// rs1_val==3 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x3, x3, 960, x5)

inst_144:
// rs1_val==3 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x555, x3, 968, x5)

inst_145:
// rs1_val==3 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, -0x556, x3, 976, x5)

inst_146:
// rs1_val==3 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x5, x3, 984, x5)

inst_147:
// rs1_val==3 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x333, x3, 992, x5)

inst_148:
// rs1_val==3 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x666, x3, 1000, x5)

inst_149:
// rs1_val==3 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, -0x2d, x3, 1008, x5)

inst_150:
// rs1_val==3 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x2d, x3, 1016, x5)

inst_151:
// rs1_val==3 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x2, x3, 1024, x5)

inst_152:
// rs1_val==3 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x554, x3, 1032, x5)

inst_153:
// rs1_val==3 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x0, x3, 1040, x5)

inst_154:
// rs1_val==3 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x4, x3, 1048, x5)

inst_155:
// rs1_val==3 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x332, x3, 1056, x5)

inst_156:
// rs1_val==3 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x665, x3, 1064, x5)

inst_157:
// rs1_val==3 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x2c, x3, 1072, x5)

inst_158:
// rs1_val==3 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x556, x3, 1080, x5)

inst_159:
// rs1_val==3 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, -0x555, x3, 1088, x5)

inst_160:
// rs1_val==3 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x6, x3, 1096, x5)

inst_161:
// rs1_val==3 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x334, x3, 1104, x5)

inst_162:
// rs1_val==3 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x667, x3, 1112, x5)

inst_163:
// rs1_val==3 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, -0x2c, x3, 1120, x5)

inst_164:
// rs1_val==3 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x2e, x3, 1128, x5)

inst_165:
// rs1_val==6148914691236517205 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5555555555555555, 0x3, x3, 1136, x5)

inst_166:
// rs1_val==6148914691236517205 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x555, 0x5555555555555555, 0x555, x3, 1144, x5)

inst_167:
// rs1_val==6148914691236517205 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x5555555555555000, 0x5555555555555555, -0x556, x3, 1152, x5)

inst_168:
// rs1_val==6148914691236517205 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5555555555555555, 0x5, x3, 1160, x5)

inst_169:
// rs1_val==6148914691236517205 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x111, 0x5555555555555555, 0x333, x3, 1168, x5)

inst_170:
// rs1_val==6148914691236517205 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x444, 0x5555555555555555, 0x666, x3, 1176, x5)

inst_171:
// rs1_val==6148914691236517205 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x5555555555555551, 0x5555555555555555, -0x2d, x3, 1184, x5)

inst_172:
// rs1_val==6148914691236517205 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5555555555555555, 0x2d, x3, 1192, x5)

inst_173:
// rs1_val==6148914691236517205 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5555555555555555, 0x2, x3, 1200, x5)

inst_174:
// rs1_val==6148914691236517205 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x5555555555555555, 0x554, x3, 1208, x5)

inst_175:
// rs1_val==6148914691236517205 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5555555555555555, 0x0, x3, 1216, x5)

inst_176:
// rs1_val==6148914691236517205 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555555, 0x4, x3, 1224, x5)

inst_177:
// rs1_val==6148914691236517205 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x110, 0x5555555555555555, 0x332, x3, 1232, x5)

inst_178:
// rs1_val==6148914691236517205 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x445, 0x5555555555555555, 0x665, x3, 1240, x5)

inst_179:
// rs1_val==6148914691236517205 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555555, 0x2c, x3, 1248, x5)

inst_180:
// rs1_val==6148914691236517205 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x554, 0x5555555555555555, 0x556, x3, 1256, x5)

inst_181:
// rs1_val==6148914691236517205 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x5555555555555001, 0x5555555555555555, -0x555, x3, 1264, x5)

inst_182:
// rs1_val==6148914691236517205 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555555, 0x6, x3, 1272, x5)

inst_183:
// rs1_val==6148914691236517205 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x5555555555555555, 0x334, x3, 1280, x5)

inst_184:
// rs1_val==6148914691236517205 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x445, 0x5555555555555555, 0x667, x3, 1288, x5)

inst_185:
// rs1_val==6148914691236517205 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555555;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x5555555555555554, 0x5555555555555555, -0x2c, x3, 1296, x5)

inst_186:
// rs1_val==-6148914691236517206 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, -0x5555555555555556, 0x3, x3, 1304, x5)

inst_187:
// rs1_val==-6148914691236517206 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555556, 0x555, x3, 1312, x5)

inst_188:
// rs1_val==-6148914691236517206 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaaaa, -0x5555555555555556, -0x556, x3, 1320, x5)

inst_189:
// rs1_val==-6148914691236517206 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555556, 0x5, x3, 1328, x5)

inst_190:
// rs1_val==-6148914691236517206 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x222, -0x5555555555555556, 0x333, x3, 1336, x5)

inst_191:
// rs1_val==-6148914691236517206 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, -0x5555555555555556, 0x666, x3, 1344, x5)

inst_192:
// rs1_val==-6148914691236517206 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaa82, -0x5555555555555556, -0x2d, x3, 1352, x5)

inst_193:
// rs1_val==-6148914691236517206 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x28, -0x5555555555555556, 0x2d, x3, 1360, x5)

inst_194:
// rs1_val==-6148914691236517206 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x5555555555555556, 0x2, x3, 1368, x5)

inst_195:
// rs1_val==-6148914691236517206 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555556, 0x554, x3, 1376, x5)

inst_196:
// rs1_val==-6148914691236517206 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555556, 0x0, x3, 1384, x5)

inst_197:
// rs1_val==-6148914691236517206 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555556, 0x4, x3, 1392, x5)

inst_198:
// rs1_val==-6148914691236517206 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, -0x5555555555555556, 0x332, x3, 1400, x5)

inst_199:
// rs1_val==-6148914691236517206 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x220, -0x5555555555555556, 0x665, x3, 1408, x5)

inst_200:
// rs1_val==-6148914691236517206 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x28, -0x5555555555555556, 0x2c, x3, 1416, x5)

inst_201:
// rs1_val==-6148914691236517206 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, -0x5555555555555556, 0x556, x3, 1424, x5)

inst_202:
// rs1_val==-6148914691236517206 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaaaa, -0x5555555555555556, -0x555, x3, 1432, x5)

inst_203:
// rs1_val==-6148914691236517206 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, -0x5555555555555556, 0x6, x3, 1440, x5)

inst_204:
// rs1_val==-6148914691236517206 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x220, -0x5555555555555556, 0x334, x3, 1448, x5)

inst_205:
// rs1_val==-6148914691236517206 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x222, -0x5555555555555556, 0x667, x3, 1456, x5)

inst_206:
// rs1_val==-6148914691236517206 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaa80, -0x5555555555555556, -0x2c, x3, 1464, x5)

inst_207:
// rs1_val==-6148914691236517206 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555556;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2a, -0x5555555555555556, 0x2e, x3, 1472, x5)

inst_208:
// rs1_val==5 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, 0x3, x3, 1480, x5)

inst_209:
// rs1_val==5 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x555, x3, 1488, x5)

inst_210:
// rs1_val==5 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, -0x556, x3, 1496, x5)

inst_211:
// rs1_val==5 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x5, x3, 1504, x5)

inst_212:
// rs1_val==5 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, 0x333, x3, 1512, x5)

inst_213:
// rs1_val==5 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x666, x3, 1520, x5)

inst_214:
// rs1_val==5 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, -0x2d, x3, 1528, x5)

inst_215:
// rs1_val==5 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x2d, x3, 1536, x5)

inst_216:
// rs1_val==5 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x2, x3, 1544, x5)

inst_217:
// rs1_val==5 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x554, x3, 1552, x5)

inst_218:
// rs1_val==5 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x0, x3, 1560, x5)

inst_219:
// rs1_val==5 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x4, x3, 1568, x5)

inst_220:
// rs1_val==5 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x332, x3, 1576, x5)

inst_221:
// rs1_val==5 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x665, x3, 1584, x5)

inst_222:
// rs1_val==5 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x2c, x3, 1592, x5)

inst_223:
// rs1_val==5 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x556, x3, 1600, x5)

inst_224:
// rs1_val==5 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, -0x555, x3, 1608, x5)

inst_225:
// rs1_val==5 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x6, x3, 1616, x5)

inst_226:
// rs1_val==5 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x334, x3, 1624, x5)

inst_227:
// rs1_val==5 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x667, x3, 1632, x5)

inst_228:
// rs1_val==5 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, -0x2c, x3, 1640, x5)

inst_229:
// rs1_val==5 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x2e, x3, 1648, x5)

inst_230:
// rs1_val==3689348814741910323 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3333333333333333, 0x3, x3, 1656, x5)

inst_231:
// rs1_val==3689348814741910323 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x111, 0x3333333333333333, 0x555, x3, 1664, x5)

inst_232:
// rs1_val==3689348814741910323 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x3333333333333222, 0x3333333333333333, -0x556, x3, 1672, x5)

inst_233:
// rs1_val==3689348814741910323 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3333333333333333, 0x5, x3, 1680, x5)

inst_234:
// rs1_val==3689348814741910323 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x333, 0x3333333333333333, 0x333, x3, 1688, x5)

inst_235:
// rs1_val==3689348814741910323 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0x3333333333333333, 0x666, x3, 1696, x5)

inst_236:
// rs1_val==3689348814741910323 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x3333333333333313, 0x3333333333333333, -0x2d, x3, 1704, x5)

inst_237:
// rs1_val==3689348814741910323 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x21, 0x3333333333333333, 0x2d, x3, 1712, x5)

inst_238:
// rs1_val==3689348814741910323 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3333333333333333, 0x2, x3, 1720, x5)

inst_239:
// rs1_val==3689348814741910323 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0x3333333333333333, 0x554, x3, 1728, x5)

inst_240:
// rs1_val==3689348814741910323 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333333, 0x0, x3, 1736, x5)

inst_241:
// rs1_val==3689348814741910323 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333333, 0x4, x3, 1744, x5)

inst_242:
// rs1_val==3689348814741910323 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0x3333333333333333, 0x332, x3, 1752, x5)

inst_243:
// rs1_val==3689348814741910323 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x221, 0x3333333333333333, 0x665, x3, 1760, x5)

inst_244:
// rs1_val==3689348814741910323 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0x3333333333333333, 0x2c, x3, 1768, x5)

inst_245:
// rs1_val==3689348814741910323 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0x3333333333333333, 0x556, x3, 1776, x5)

inst_246:
// rs1_val==3689348814741910323 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x3333333333333223, 0x3333333333333333, -0x555, x3, 1784, x5)

inst_247:
// rs1_val==3689348814741910323 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3333333333333333, 0x6, x3, 1792, x5)

inst_248:
// rs1_val==3689348814741910323 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0x3333333333333333, 0x334, x3, 1800, x5)

inst_249:
// rs1_val==3689348814741910323 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x223, 0x3333333333333333, 0x667, x3, 1808, x5)

inst_250:
// rs1_val==3689348814741910323 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x3333333333333310, 0x3333333333333333, -0x2c, x3, 1816, x5)

inst_251:
// rs1_val==3689348814741910323 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333333;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0x3333333333333333, 0x2e, x3, 1824, x5)

inst_252:
// rs1_val==7378697629483820646 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6666666666666666, 0x3, x3, 1832, x5)

inst_253:
// rs1_val==7378697629483820646 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x444, 0x6666666666666666, 0x555, x3, 1840, x5)

inst_254:
// rs1_val==7378697629483820646 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x6666666666666222, 0x6666666666666666, -0x556, x3, 1848, x5)

inst_255:
// rs1_val==7378697629483820646 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6666666666666666, 0x5, x3, 1856, x5)

inst_256:
// rs1_val==7378697629483820646 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x222, 0x6666666666666666, 0x333, x3, 1864, x5)

inst_257:
// rs1_val==7378697629483820646 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x666, 0x6666666666666666, 0x666, x3, 1872, x5)

inst_258:
// rs1_val==7378697629483820646 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x6666666666666642, 0x6666666666666666, -0x2d, x3, 1880, x5)

inst_259:
// rs1_val==7378697629483820646 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x24, 0x6666666666666666, 0x2d, x3, 1888, x5)

inst_260:
// rs1_val==7378697629483820646 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6666666666666666, 0x2, x3, 1896, x5)

inst_261:
// rs1_val==7378697629483820646 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x6666666666666666, 0x554, x3, 1904, x5)

inst_262:
// rs1_val==7378697629483820646 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x6666666666666666, 0x0, x3, 1912, x5)

inst_263:
// rs1_val==7378697629483820646 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6666666666666666, 0x4, x3, 1920, x5)

inst_264:
// rs1_val==7378697629483820646 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, 0x6666666666666666, 0x332, x3, 1928, x5)

inst_265:
// rs1_val==7378697629483820646 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x664, 0x6666666666666666, 0x665, x3, 1936, x5)

inst_266:
// rs1_val==7378697629483820646 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x6666666666666666, 0x2c, x3, 1944, x5)

inst_267:
// rs1_val==7378697629483820646 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x446, 0x6666666666666666, 0x556, x3, 1952, x5)

inst_268:
// rs1_val==7378697629483820646 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x6666666666666222, 0x6666666666666666, -0x555, x3, 1960, x5)

inst_269:
// rs1_val==7378697629483820646 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6666666666666666, 0x6, x3, 1968, x5)

inst_270:
// rs1_val==7378697629483820646 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x6666666666666666, 0x334, x3, 1976, x5)

inst_271:
// rs1_val==7378697629483820646 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x666, 0x6666666666666666, 0x667, x3, 1984, x5)

inst_272:
// rs1_val==7378697629483820646 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x6666666666666644, 0x6666666666666666, -0x2c, x3, 1992, x5)

inst_273:
// rs1_val==7378697629483820646 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666666;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x26, 0x6666666666666666, 0x2e, x3, 2000, x5)

inst_274:
// rs1_val==-3037000499 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, -0xb504f333, 0x3, x3, 2008, x5)

inst_275:
// rs1_val==-3037000499 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x445, -0xb504f333, 0x555, x3, 2016, x5)

inst_276:
// rs1_val==-3037000499 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb0888, -0xb504f333, -0x556, x3, 2024, x5)

inst_277:
// rs1_val==-3037000499 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0xb504f333, 0x5, x3, 2032, x5)

inst_278:
// rs1_val==-3037000499 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x1, -0xb504f333, 0x333, x3, 2040, x5)
RVTEST_SIGBASE( x3,signature_x3_1)

inst_279:
// rs1_val==-3037000499 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x444, -0xb504f333, 0x666, x3, 0, x5)

inst_280:
// rs1_val==-3037000499 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb0cc1, -0xb504f333, -0x2d, x3, 8, x5)

inst_281:
// rs1_val==-3037000499 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0xd, -0xb504f333, 0x2d, x3, 16, x5)

inst_282:
// rs1_val==-3037000499 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504f333, 0x2, x3, 24, x5)

inst_283:
// rs1_val==-3037000499 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, -0xb504f333, 0x554, x3, 32, x5)

inst_284:
// rs1_val==-3037000499 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504f333, 0x0, x3, 40, x5)

inst_285:
// rs1_val==-3037000499 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504f333, 0x4, x3, 48, x5)

inst_286:
// rs1_val==-3037000499 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504f333, 0x332, x3, 56, x5)

inst_287:
// rs1_val==-3037000499 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x445, -0xb504f333, 0x665, x3, 64, x5)

inst_288:
// rs1_val==-3037000499 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0xc, -0xb504f333, 0x2c, x3, 72, x5)

inst_289:
// rs1_val==-3037000499 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x444, -0xb504f333, 0x556, x3, 80, x5)

inst_290:
// rs1_val==-3037000499 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb0889, -0xb504f333, -0x555, x3, 88, x5)

inst_291:
// rs1_val==-3037000499 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504f333, 0x6, x3, 96, x5)

inst_292:
// rs1_val==-3037000499 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504f333, 0x334, x3, 104, x5)

inst_293:
// rs1_val==-3037000499 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x445, -0xb504f333, 0x667, x3, 112, x5)

inst_294:
// rs1_val==-3037000499 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb0cc4, -0xb504f333, -0x2c, x3, 120, x5)

inst_295:
// rs1_val==-3037000499 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f333;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0xc, -0xb504f333, 0x2e, x3, 128, x5)

inst_296:
// rs1_val==3037000499 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0xb504f333, 0x3, x3, 136, x5)

inst_297:
// rs1_val==3037000499 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x111, 0xb504f333, 0x555, x3, 144, x5)

inst_298:
// rs1_val==3037000499 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb504f222, 0xb504f333, -0x556, x3, 152, x5)

inst_299:
// rs1_val==3037000499 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0xb504f333, 0x5, x3, 160, x5)

inst_300:
// rs1_val==3037000499 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x333, 0xb504f333, 0x333, x3, 168, x5)

inst_301:
// rs1_val==3037000499 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0xb504f333, 0x666, x3, 176, x5)

inst_302:
// rs1_val==3037000499 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb504f313, 0xb504f333, -0x2d, x3, 184, x5)

inst_303:
// rs1_val==3037000499 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x21, 0xb504f333, 0x2d, x3, 192, x5)

inst_304:
// rs1_val==3037000499 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb504f333, 0x2, x3, 200, x5)

inst_305:
// rs1_val==3037000499 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0xb504f333, 0x554, x3, 208, x5)

inst_306:
// rs1_val==3037000499 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f333, 0x0, x3, 216, x5)

inst_307:
// rs1_val==3037000499 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f333, 0x4, x3, 224, x5)

inst_308:
// rs1_val==3037000499 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0xb504f333, 0x332, x3, 232, x5)

inst_309:
// rs1_val==3037000499 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x221, 0xb504f333, 0x665, x3, 240, x5)

inst_310:
// rs1_val==3037000499 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0xb504f333, 0x2c, x3, 248, x5)

inst_311:
// rs1_val==3037000499 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0xb504f333, 0x556, x3, 256, x5)

inst_312:
// rs1_val==3037000499 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb504f223, 0xb504f333, -0x555, x3, 264, x5)

inst_313:
// rs1_val==3037000499 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb504f333, 0x6, x3, 272, x5)

inst_314:
// rs1_val==3037000499 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0xb504f333, 0x334, x3, 280, x5)

inst_315:
// rs1_val==3037000499 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x223, 0xb504f333, 0x667, x3, 288, x5)

inst_316:
// rs1_val==3037000499 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb504f310, 0xb504f333, -0x2c, x3, 296, x5)

inst_317:
// rs1_val==3037000499 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f333;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0xb504f333, 0x2e, x3, 304, x5)

inst_318:
// rs1_val==2 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x3, x3, 312, x5)

inst_319:
// rs1_val==2 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x555, x3, 320, x5)

inst_320:
// rs1_val==2 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x556, x3, 328, x5)

inst_321:
// rs1_val==2 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x5, x3, 336, x5)

inst_322:
// rs1_val==2 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x333, x3, 344, x5)

inst_323:
// rs1_val==2 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x666, x3, 352, x5)

inst_324:
// rs1_val==2 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x2d, x3, 360, x5)

inst_325:
// rs1_val==2 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x2, x3, 368, x5)

inst_326:
// rs1_val==2 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x554, x3, 376, x5)

inst_327:
// rs1_val==2 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x0, x3, 384, x5)

inst_328:
// rs1_val==2 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x4, x3, 392, x5)

inst_329:
// rs1_val==2 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x332, x3, 400, x5)

inst_330:
// rs1_val==2 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x665, x3, 408, x5)

inst_331:
// rs1_val==2 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x2c, x3, 416, x5)

inst_332:
// rs1_val==2 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x556, x3, 424, x5)

inst_333:
// rs1_val==2 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x555, x3, 432, x5)

inst_334:
// rs1_val==2 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x6, x3, 440, x5)

inst_335:
// rs1_val==2 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x334, x3, 448, x5)

inst_336:
// rs1_val==2 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x667, x3, 456, x5)

inst_337:
// rs1_val==2 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, -0x2c, x3, 464, x5)

inst_338:
// rs1_val==2 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x2e, x3, 472, x5)

inst_339:
// rs1_val==6148914691236517204 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5555555555555554, 0x3, x3, 480, x5)

inst_340:
// rs1_val==6148914691236517204 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x554, 0x5555555555555554, 0x555, x3, 488, x5)

inst_341:
// rs1_val==6148914691236517204 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555554, 0x5, x3, 496, x5)

inst_342:
// rs1_val==6148914691236517204 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x110, 0x5555555555555554, 0x333, x3, 504, x5)

inst_343:
// rs1_val==6148914691236517204 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x444, 0x5555555555555554, 0x666, x3, 512, x5)

inst_344:
// rs1_val==6148914691236517204 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x5555555555555550, 0x5555555555555554, -0x2d, x3, 520, x5)

inst_345:
// rs1_val==6148914691236517204 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555554, 0x2d, x3, 528, x5)

inst_346:
// rs1_val==6148914691236517204 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5555555555555554, 0x2, x3, 536, x5)

inst_347:
// rs1_val==6148914691236517204 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x5555555555555554, 0x554, x3, 544, x5)

inst_348:
// rs1_val==6148914691236517204 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5555555555555554, 0x0, x3, 552, x5)

inst_349:
// rs1_val==6148914691236517204 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555554, 0x4, x3, 560, x5)

inst_350:
// rs1_val==6148914691236517204 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x110, 0x5555555555555554, 0x332, x3, 568, x5)

inst_351:
// rs1_val==6148914691236517204 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x444, 0x5555555555555554, 0x665, x3, 576, x5)

inst_352:
// rs1_val==6148914691236517204 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555554, 0x2c, x3, 584, x5)

inst_353:
// rs1_val==6148914691236517204 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x554, 0x5555555555555554, 0x556, x3, 592, x5)

inst_354:
// rs1_val==6148914691236517204 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x5555555555555000, 0x5555555555555554, -0x555, x3, 600, x5)

inst_355:
// rs1_val==6148914691236517204 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555554, 0x6, x3, 608, x5)

inst_356:
// rs1_val==6148914691236517204 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x5555555555555554, 0x334, x3, 616, x5)

inst_357:
// rs1_val==6148914691236517204 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x444, 0x5555555555555554, 0x667, x3, 624, x5)

inst_358:
// rs1_val==6148914691236517204 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x5555555555555554, 0x5555555555555554, -0x2c, x3, 632, x5)

inst_359:
// rs1_val==6148914691236517204 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555554;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555554, 0x2e, x3, 640, x5)

inst_360:
// rs1_val==0 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x3, x3, 648, x5)

inst_361:
// rs1_val==0 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x555, x3, 656, x5)

inst_362:
// rs1_val==0 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x556, x3, 664, x5)

inst_363:
// rs1_val==0 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x5, x3, 672, x5)

inst_364:
// rs1_val==0 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x333, x3, 680, x5)

inst_365:
// rs1_val==0 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x666, x3, 688, x5)

inst_366:
// rs1_val==6148914691236517206 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555556, 0x2c, x3, 696, x5)

inst_367:
// rs1_val==6148914691236517206 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x556, 0x5555555555555556, 0x556, x3, 704, x5)

inst_368:
// rs1_val==6148914691236517206 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x5555555555555002, 0x5555555555555556, -0x555, x3, 712, x5)

inst_369:
// rs1_val==6148914691236517206 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x5555555555555556, 0x6, x3, 720, x5)

inst_370:
// rs1_val==6148914691236517206 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x5555555555555556, 0x334, x3, 728, x5)

inst_371:
// rs1_val==6148914691236517206 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x446, 0x5555555555555556, 0x667, x3, 736, x5)

inst_372:
// rs1_val==6148914691236517206 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x5555555555555554, 0x5555555555555556, -0x2c, x3, 744, x5)

inst_373:
// rs1_val==6148914691236517206 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x6, 0x5555555555555556, 0x2e, x3, 752, x5)

inst_374:
// rs1_val==-6148914691236517205 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, -0x5555555555555555, 0x3, x3, 760, x5)

inst_375:
// rs1_val==-6148914691236517205 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x1, -0x5555555555555555, 0x555, x3, 768, x5)

inst_376:
// rs1_val==-6148914691236517205 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaaaa, -0x5555555555555555, -0x556, x3, 776, x5)

inst_377:
// rs1_val==-6148914691236517205 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, -0x5555555555555555, 0x5, x3, 784, x5)

inst_378:
// rs1_val==-6148914691236517205 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x223, -0x5555555555555555, 0x333, x3, 792, x5)

inst_379:
// rs1_val==-6148914691236517205 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, -0x5555555555555555, 0x666, x3, 800, x5)

inst_380:
// rs1_val==-6148914691236517205 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaa83, -0x5555555555555555, -0x2d, x3, 808, x5)

inst_381:
// rs1_val==-6148914691236517205 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x29, -0x5555555555555555, 0x2d, x3, 816, x5)

inst_382:
// rs1_val==-6148914691236517205 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x5555555555555555, 0x2, x3, 824, x5)

inst_383:
// rs1_val==-6148914691236517205 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555555, 0x554, x3, 832, x5)

inst_384:
// rs1_val==-6148914691236517205 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555555, 0x0, x3, 840, x5)

inst_385:
// rs1_val==-6148914691236517205 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, -0x5555555555555555, 0x4, x3, 848, x5)

inst_386:
// rs1_val==-6148914691236517205 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, -0x5555555555555555, 0x332, x3, 856, x5)

inst_387:
// rs1_val==-6148914691236517205 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x221, -0x5555555555555555, 0x665, x3, 864, x5)

inst_388:
// rs1_val==-6148914691236517205 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x28, -0x5555555555555555, 0x2c, x3, 872, x5)

inst_389:
// rs1_val==-6148914691236517205 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, -0x5555555555555555, 0x556, x3, 880, x5)

inst_390:
// rs1_val==-6148914691236517205 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaaab, -0x5555555555555555, -0x555, x3, 888, x5)

inst_391:
// rs1_val==-6148914691236517205 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, -0x5555555555555555, 0x6, x3, 896, x5)

inst_392:
// rs1_val==-6148914691236517205 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x220, -0x5555555555555555, 0x334, x3, 904, x5)

inst_393:
// rs1_val==-6148914691236517205 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x223, -0x5555555555555555, 0x667, x3, 912, x5)

inst_394:
// rs1_val==-6148914691236517205 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaaaaaaaa80, -0x5555555555555555, -0x2c, x3, 920, x5)

inst_395:
// rs1_val==-6148914691236517205 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x5555555555555555;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2a, -0x5555555555555555, 0x2e, x3, 928, x5)

inst_396:
// rs1_val==6 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x3, x3, 936, x5)

inst_397:
// rs1_val==6 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x555, x3, 944, x5)

inst_398:
// rs1_val==6 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x556, x3, 952, x5)

inst_399:
// rs1_val==6 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x5, x3, 960, x5)

inst_400:
// rs1_val==6 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x333, x3, 968, x5)

inst_401:
// rs1_val==6 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x666, x3, 976, x5)

inst_402:
// rs1_val==6 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x2d, x3, 984, x5)

inst_403:
// rs1_val==6 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x2d, x3, 992, x5)

inst_404:
// rs1_val==6 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x2, x3, 1000, x5)

inst_405:
// rs1_val==6 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x554, x3, 1008, x5)

inst_406:
// rs1_val==6 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x6, 0x0, x3, 1016, x5)

inst_407:
// rs1_val==6 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x4, x3, 1024, x5)

inst_408:
// rs1_val==6 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x332, x3, 1032, x5)

inst_409:
// rs1_val==6 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x665, x3, 1040, x5)

inst_410:
// rs1_val==6 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x2c, x3, 1048, x5)

inst_411:
// rs1_val==6 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x556, x3, 1056, x5)

inst_412:
// rs1_val==6 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x555, x3, 1064, x5)

inst_413:
// rs1_val==6 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x6, x3, 1072, x5)

inst_414:
// rs1_val==6 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x334, x3, 1080, x5)

inst_415:
// rs1_val==6 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x667, x3, 1088, x5)

inst_416:
// rs1_val==6 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, -0x2c, x3, 1096, x5)

inst_417:
// rs1_val==6 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x2e, x3, 1104, x5)

inst_418:
// rs1_val==3689348814741910324 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333334, 0x3, x3, 1112, x5)

inst_419:
// rs1_val==3689348814741910324 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x114, 0x3333333333333334, 0x555, x3, 1120, x5)

inst_420:
// rs1_val==3689348814741910324 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x3333333333333220, 0x3333333333333334, -0x556, x3, 1128, x5)

inst_421:
// rs1_val==3689348814741910324 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x3333333333333334, 0x5, x3, 1136, x5)

inst_422:
// rs1_val==3689348814741910324 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x330, 0x3333333333333334, 0x333, x3, 1144, x5)

inst_423:
// rs1_val==3689348814741910324 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x224, 0x3333333333333334, 0x666, x3, 1152, x5)

inst_424:
// rs1_val==3689348814741910324 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x3333333333333310, 0x3333333333333334, -0x2d, x3, 1160, x5)

inst_425:
// rs1_val==3689348814741910324 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x24, 0x3333333333333334, 0x2d, x3, 1168, x5)

inst_426:
// rs1_val==3689348814741910324 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333334, 0x2, x3, 1176, x5)

inst_427:
// rs1_val==3689348814741910324 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x114, 0x3333333333333334, 0x554, x3, 1184, x5)

inst_428:
// rs1_val==3689348814741910324 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333334, 0x0, x3, 1192, x5)

inst_429:
// rs1_val==3689348814741910324 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x3333333333333334, 0x4, x3, 1200, x5)

inst_430:
// rs1_val==3689348814741910324 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x330, 0x3333333333333334, 0x332, x3, 1208, x5)

inst_431:
// rs1_val==3689348814741910324 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x224, 0x3333333333333334, 0x665, x3, 1216, x5)

inst_432:
// rs1_val==3689348814741910324 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x3333333333333334, 0x2c, x3, 1224, x5)

inst_433:
// rs1_val==3689348814741910324 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x114, 0x3333333333333334, 0x556, x3, 1232, x5)

inst_434:
// rs1_val==3689348814741910324 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x3333333333333220, 0x3333333333333334, -0x555, x3, 1240, x5)

inst_435:
// rs1_val==3689348814741910324 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x3333333333333334, 0x6, x3, 1248, x5)

inst_436:
// rs1_val==3689348814741910324 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x334, 0x3333333333333334, 0x334, x3, 1256, x5)

inst_437:
// rs1_val==3689348814741910324 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x224, 0x3333333333333334, 0x667, x3, 1264, x5)

inst_438:
// rs1_val==3689348814741910324 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x3333333333333314, 0x3333333333333334, -0x2c, x3, 1272, x5)

inst_439:
// rs1_val==3689348814741910324 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333334;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x24, 0x3333333333333334, 0x2e, x3, 1280, x5)

inst_440:
// rs1_val==7378697629483820647 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x6666666666666667, 0x3, x3, 1288, x5)

inst_441:
// rs1_val==7378697629483820647 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x445, 0x6666666666666667, 0x555, x3, 1296, x5)

inst_442:
// rs1_val==7378697629483820647 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x6666666666666222, 0x6666666666666667, -0x556, x3, 1304, x5)

inst_443:
// rs1_val==7378697629483820647 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x6666666666666667, 0x5, x3, 1312, x5)

inst_444:
// rs1_val==7378697629483820647 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x223, 0x6666666666666667, 0x333, x3, 1320, x5)

inst_445:
// rs1_val==7378697629483820647 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x666, 0x6666666666666667, 0x666, x3, 1328, x5)

inst_446:
// rs1_val==7378697629483820647 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x6666666666666643, 0x6666666666666667, -0x2d, x3, 1336, x5)

inst_447:
// rs1_val==7378697629483820647 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x25, 0x6666666666666667, 0x2d, x3, 1344, x5)

inst_448:
// rs1_val==7378697629483820647 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6666666666666667, 0x2, x3, 1352, x5)

inst_449:
// rs1_val==7378697629483820647 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x6666666666666667, 0x554, x3, 1360, x5)

inst_450:
// rs1_val==7378697629483820647 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6666666666666667, 0x4, x3, 1368, x5)

inst_451:
// rs1_val==7378697629483820647 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, 0x6666666666666667, 0x332, x3, 1376, x5)

inst_452:
// rs1_val==7378697629483820647 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x665, 0x6666666666666667, 0x665, x3, 1384, x5)

inst_453:
// rs1_val==7378697629483820647 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x6666666666666667, 0x2c, x3, 1392, x5)

inst_454:
// rs1_val==7378697629483820647 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x446, 0x6666666666666667, 0x556, x3, 1400, x5)

inst_455:
// rs1_val==7378697629483820647 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x6666666666666223, 0x6666666666666667, -0x555, x3, 1408, x5)

inst_456:
// rs1_val==7378697629483820647 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6666666666666667, 0x6, x3, 1416, x5)

inst_457:
// rs1_val==7378697629483820647 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x6666666666666667, 0x334, x3, 1424, x5)

inst_458:
// rs1_val==7378697629483820647 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x667, 0x6666666666666667, 0x667, x3, 1432, x5)

inst_459:
// rs1_val==7378697629483820647 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x6666666666666644, 0x6666666666666667, -0x2c, x3, 1440, x5)

inst_460:
// rs1_val==7378697629483820647 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666667;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x26, 0x6666666666666667, 0x2e, x3, 1448, x5)

inst_461:
// rs1_val==-3037000498 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, -0xb504f332, 0x3, x3, 1456, x5)

inst_462:
// rs1_val==-3037000498 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb088a, -0xb504f332, -0x556, x3, 1464, x5)

inst_463:
// rs1_val==-3037000498 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504f332, 0x5, x3, 1472, x5)

inst_464:
// rs1_val==-3037000498 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x2, -0xb504f332, 0x333, x3, 1480, x5)

inst_465:
// rs1_val==-3037000498 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x446, -0xb504f332, 0x666, x3, 1488, x5)

inst_466:
// rs1_val==-3037000498 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb0cc2, -0xb504f332, -0x2d, x3, 1496, x5)

inst_467:
// rs1_val==-3037000498 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0xc, -0xb504f332, 0x2d, x3, 1504, x5)

inst_468:
// rs1_val==-3037000498 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0xb504f332, 0x2, x3, 1512, x5)

inst_469:
// rs1_val==-3037000498 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, -0xb504f332, 0x554, x3, 1520, x5)

inst_470:
// rs1_val==-3037000498 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504f332, 0x0, x3, 1528, x5)

inst_471:
// rs1_val==-3037000498 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504f332, 0x4, x3, 1536, x5)

inst_472:
// rs1_val==-3037000498 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, -0xb504f332, 0x332, x3, 1544, x5)

inst_473:
// rs1_val==-3037000498 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x444, -0xb504f332, 0x665, x3, 1552, x5)

inst_474:
// rs1_val==-3037000498 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0xc, -0xb504f332, 0x2c, x3, 1560, x5)

inst_475:
// rs1_val==-3037000498 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x446, -0xb504f332, 0x556, x3, 1568, x5)

inst_476:
// rs1_val==-3037000498 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb088a, -0xb504f332, -0x555, x3, 1576, x5)

inst_477:
// rs1_val==-3037000498 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, -0xb504f332, 0x6, x3, 1584, x5)

inst_478:
// rs1_val==-3037000498 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504f332, 0x334, x3, 1592, x5)

inst_479:
// rs1_val==-3037000498 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x446, -0xb504f332, 0x667, x3, 1600, x5)

inst_480:
// rs1_val==-3037000498 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffffffff4afb0cc4, -0xb504f332, -0x2c, x3, 1608, x5)

inst_481:
// rs1_val==-3037000498 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504f332;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0xe, -0xb504f332, 0x2e, x3, 1616, x5)

inst_482:
// rs1_val==3037000500 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f334, 0x3, x3, 1624, x5)

inst_483:
// rs1_val==3037000500 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x114, 0xb504f334, 0x555, x3, 1632, x5)

inst_484:
// rs1_val==3037000500 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb504f220, 0xb504f334, -0x556, x3, 1640, x5)

inst_485:
// rs1_val==3037000500 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504f334, 0x5, x3, 1648, x5)

inst_486:
// rs1_val==3037000500 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x330, 0xb504f334, 0x333, x3, 1656, x5)

inst_487:
// rs1_val==3037000500 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x224, 0xb504f334, 0x666, x3, 1664, x5)

inst_488:
// rs1_val==3037000500 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb504f310, 0xb504f334, -0x2d, x3, 1672, x5)

inst_489:
// rs1_val==3037000500 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x24, 0xb504f334, 0x2d, x3, 1680, x5)

inst_490:
// rs1_val==3037000500 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f334, 0x2, x3, 1688, x5)

inst_491:
// rs1_val==3037000500 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x114, 0xb504f334, 0x554, x3, 1696, x5)

inst_492:
// rs1_val==3037000500 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f334, 0x0, x3, 1704, x5)

inst_493:
// rs1_val==3037000500 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504f334, 0x4, x3, 1712, x5)

inst_494:
// rs1_val==6148914691236517206 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x446, 0x5555555555555556, 0x666, x3, 1720, x5)

inst_495:
// rs1_val==3037000500 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x330, 0xb504f334, 0x332, x3, 1728, x5)

inst_496:
// rs1_val==3037000500 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x224, 0xb504f334, 0x665, x3, 1736, x5)

inst_497:
// rs1_val==3037000500 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0xb504f334, 0x2c, x3, 1744, x5)

inst_498:
// rs1_val==3037000500 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x114, 0xb504f334, 0x556, x3, 1752, x5)

inst_499:
// rs1_val==3037000500 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb504f220, 0xb504f334, -0x555, x3, 1760, x5)

inst_500:
// rs1_val==3037000500 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504f334, 0x6, x3, 1768, x5)

inst_501:
// rs1_val==3037000500 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x334, 0xb504f334, 0x334, x3, 1776, x5)

inst_502:
// rs1_val==3037000500 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x224, 0xb504f334, 0x667, x3, 1784, x5)

inst_503:
// rs1_val==3037000500 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb504f314, 0xb504f334, -0x2c, x3, 1792, x5)

inst_504:
// rs1_val==0 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x2d, x3, 1800, x5)

inst_505:
// rs1_val==3037000500 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f334;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x24, 0xb504f334, 0x2e, x3, 1808, x5)

inst_506:
// rs1_val==0 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2d, x3, 1816, x5)

inst_507:
// rs1_val==0 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2, x3, 1824, x5)

inst_508:
// rs1_val==0 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x554, x3, 1832, x5)

inst_509:
// rs1_val==0 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x0, x3, 1840, x5)

inst_510:
// rs1_val==0 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x4, x3, 1848, x5)

inst_511:
// rs1_val==0 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x332, x3, 1856, x5)

inst_512:
// rs1_val==0 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x665, x3, 1864, x5)

inst_513:
// rs1_val==0 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2c, x3, 1872, x5)

inst_514:
// rs1_val==0 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x556, x3, 1880, x5)

inst_515:
// rs1_val==0 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x6, x3, 1888, x5)

inst_516:
// rs1_val==0 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x334, x3, 1896, x5)

inst_517:
// rs1_val==0 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x667, x3, 1904, x5)

inst_518:
// rs1_val==0 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x2c, x3, 1912, x5)

inst_519:
// rs1_val==0 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2e, x3, 1920, x5)

inst_520:
// rs1_val==4 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x3, x3, 1928, x5)

inst_521:
// rs1_val==4 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x555, x3, 1936, x5)

inst_522:
// rs1_val==4 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x556, x3, 1944, x5)

inst_523:
// rs1_val==4 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x5, x3, 1952, x5)

inst_524:
// rs1_val==4 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x333, x3, 1960, x5)

inst_525:
// rs1_val==4 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x666, x3, 1968, x5)

inst_526:
// rs1_val==4 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x2d, x3, 1976, x5)

inst_527:
// rs1_val==4 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2d, x3, 1984, x5)

inst_528:
// rs1_val==4 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x2, x3, 1992, x5)

inst_529:
// rs1_val==4 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x554, x3, 2000, x5)

inst_530:
// rs1_val==4 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x0, x3, 2008, x5)

inst_531:
// rs1_val==4 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x4, x3, 2016, x5)

inst_532:
// rs1_val==4 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x332, x3, 2024, x5)

inst_533:
// rs1_val==4 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x665, x3, 2032, x5)

inst_534:
// rs1_val==4 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2c, x3, 2040, x5)
RVTEST_SIGBASE( x3,signature_x3_2)

inst_535:
// rs1_val==4 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x556, x3, 0, x5)

inst_536:
// rs1_val==4 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x555, x3, 8, x5)

inst_537:
// rs1_val==4 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x6, x3, 16, x5)

inst_538:
// rs1_val==4 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x334, x3, 24, x5)

inst_539:
// rs1_val==4 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x667, x3, 32, x5)

inst_540:
// rs1_val==4 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, -0x2c, x3, 40, x5)

inst_541:
// rs1_val==4 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2e, x3, 48, x5)

inst_542:
// rs1_val==3689348814741910322 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3333333333333332, 0x3, x3, 56, x5)

inst_543:
// rs1_val==3689348814741910322 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x110, 0x3333333333333332, 0x555, x3, 64, x5)

inst_544:
// rs1_val==3689348814741910322 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x3333333333333222, 0x3333333333333332, -0x556, x3, 72, x5)

inst_545:
// rs1_val==3689348814741910322 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333332, 0x5, x3, 80, x5)

inst_546:
// rs1_val==3689348814741910322 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x332, 0x3333333333333332, 0x333, x3, 88, x5)

inst_547:
// rs1_val==3689348814741910322 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0x3333333333333332, 0x666, x3, 96, x5)

inst_548:
// rs1_val==3689348814741910322 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x3333333333333312, 0x3333333333333332, -0x2d, x3, 104, x5)

inst_549:
// rs1_val==3689348814741910322 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x20, 0x3333333333333332, 0x2d, x3, 112, x5)

inst_550:
// rs1_val==3689348814741910322 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3333333333333332, 0x2, x3, 120, x5)

inst_551:
// rs1_val==3689348814741910322 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0x3333333333333332, 0x554, x3, 128, x5)

inst_552:
// rs1_val==3689348814741910322 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333332, 0x0, x3, 136, x5)

inst_553:
// rs1_val==3689348814741910322 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3333333333333332, 0x4, x3, 144, x5)

inst_554:
// rs1_val==3689348814741910322 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0x3333333333333332, 0x332, x3, 152, x5)

inst_555:
// rs1_val==3689348814741910322 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x220, 0x3333333333333332, 0x665, x3, 160, x5)

inst_556:
// rs1_val==3689348814741910322 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0x3333333333333332, 0x2c, x3, 168, x5)

inst_557:
// rs1_val==3689348814741910322 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0x3333333333333332, 0x556, x3, 176, x5)

inst_558:
// rs1_val==3689348814741910322 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x3333333333333222, 0x3333333333333332, -0x555, x3, 184, x5)

inst_559:
// rs1_val==3689348814741910322 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3333333333333332, 0x6, x3, 192, x5)

inst_560:
// rs1_val==3689348814741910322 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0x3333333333333332, 0x334, x3, 200, x5)

inst_561:
// rs1_val==3689348814741910322 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x222, 0x3333333333333332, 0x667, x3, 208, x5)

inst_562:
// rs1_val==3689348814741910322 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x3333333333333310, 0x3333333333333332, -0x2c, x3, 216, x5)

inst_563:
// rs1_val==3689348814741910322 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3333333333333332;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0x3333333333333332, 0x2e, x3, 224, x5)

inst_564:
// rs1_val==7378697629483820645 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x6666666666666665, 0x3, x3, 232, x5)

inst_565:
// rs1_val==7378697629483820645 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x445, 0x6666666666666665, 0x555, x3, 240, x5)

inst_566:
// rs1_val==7378697629483820645 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x6666666666666220, 0x6666666666666665, -0x556, x3, 248, x5)

inst_567:
// rs1_val==7378697629483820645 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x6666666666666665, 0x5, x3, 256, x5)

inst_568:
// rs1_val==7378697629483820645 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x221, 0x6666666666666665, 0x333, x3, 264, x5)

inst_569:
// rs1_val==7378697629483820645 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x664, 0x6666666666666665, 0x666, x3, 272, x5)

inst_570:
// rs1_val==7378697629483820645 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x6666666666666641, 0x6666666666666665, -0x2d, x3, 280, x5)

inst_571:
// rs1_val==7378697629483820645 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x25, 0x6666666666666665, 0x2d, x3, 288, x5)

inst_572:
// rs1_val==7378697629483820645 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x6666666666666665, 0x2, x3, 296, x5)

inst_573:
// rs1_val==7378697629483820645 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x6666666666666665, 0x554, x3, 304, x5)

inst_574:
// rs1_val==7378697629483820645 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x6666666666666665, 0x0, x3, 312, x5)

inst_575:
// rs1_val==7378697629483820645 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6666666666666665, 0x4, x3, 320, x5)

inst_576:
// rs1_val==7378697629483820645 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x220, 0x6666666666666665, 0x332, x3, 328, x5)

inst_577:
// rs1_val==7378697629483820645 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x665, 0x6666666666666665, 0x665, x3, 336, x5)

inst_578:
// rs1_val==7378697629483820645 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x6666666666666665, 0x2c, x3, 344, x5)

inst_579:
// rs1_val==7378697629483820645 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x444, 0x6666666666666665, 0x556, x3, 352, x5)

inst_580:
// rs1_val==7378697629483820645 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x6666666666666221, 0x6666666666666665, -0x555, x3, 360, x5)

inst_581:
// rs1_val==7378697629483820645 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6666666666666665, 0x6, x3, 368, x5)

inst_582:
// rs1_val==7378697629483820645 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x6666666666666665, 0x334, x3, 376, x5)

inst_583:
// rs1_val==7378697629483820645 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x665, 0x6666666666666665, 0x667, x3, 384, x5)

inst_584:
// rs1_val==7378697629483820645 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x6666666666666644, 0x6666666666666665, -0x2c, x3, 392, x5)

inst_585:
// rs1_val==7378697629483820645 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6666666666666665;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x24, 0x6666666666666665, 0x2e, x3, 400, x5)

inst_586:
// rs1_val==3037000498 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb504f332, 0x3, x3, 408, x5)

inst_587:
// rs1_val==3037000498 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x110, 0xb504f332, 0x555, x3, 416, x5)

inst_588:
// rs1_val==3037000498 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb504f222, 0xb504f332, -0x556, x3, 424, x5)

inst_589:
// rs1_val==3037000498 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f332, 0x5, x3, 432, x5)

inst_590:
// rs1_val==3037000498 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x332, 0xb504f332, 0x333, x3, 440, x5)

inst_591:
// rs1_val==3037000498 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0xb504f332, 0x666, x3, 448, x5)

inst_592:
// rs1_val==3037000498 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb504f312, 0xb504f332, -0x2d, x3, 456, x5)

inst_593:
// rs1_val==3037000498 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x20, 0xb504f332, 0x2d, x3, 464, x5)

inst_594:
// rs1_val==3037000498 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb504f332, 0x2, x3, 472, x5)

inst_595:
// rs1_val==3037000498 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0xb504f332, 0x554, x3, 480, x5)

inst_596:
// rs1_val==3037000498 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f332, 0x0, x3, 488, x5)

inst_597:
// rs1_val==3037000498 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504f332, 0x4, x3, 496, x5)

inst_598:
// rs1_val==3037000498 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0xb504f332, 0x332, x3, 504, x5)

inst_599:
// rs1_val==3037000498 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x220, 0xb504f332, 0x665, x3, 512, x5)

inst_600:
// rs1_val==3037000498 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0xb504f332, 0x2c, x3, 520, x5)

inst_601:
// rs1_val==3037000498 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0xb504f332, 0x556, x3, 528, x5)

inst_602:
// rs1_val==3037000498 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb504f222, 0xb504f332, -0x555, x3, 536, x5)

inst_603:
// rs1_val==3037000498 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb504f332, 0x6, x3, 544, x5)

inst_604:
// rs1_val==3037000498 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0xb504f332, 0x334, x3, 552, x5)

inst_605:
// rs1_val==3037000498 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x222, 0xb504f332, 0x667, x3, 560, x5)

inst_606:
// rs1_val==3037000498 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb504f310, 0xb504f332, -0x2c, x3, 568, x5)

inst_607:
// rs1_val==3037000498 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504f332;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0xb504f332, 0x2e, x3, 576, x5)

inst_608:
// rs1_val==6148914691236517206 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x5555555555555556, 0x3, x3, 584, x5)

inst_609:
// rs1_val==6148914691236517206 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x554, 0x5555555555555556, 0x555, x3, 592, x5)

inst_610:
// rs1_val==6148914691236517206 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x5555555555555002, 0x5555555555555556, -0x556, x3, 600, x5)

inst_611:
// rs1_val==6148914691236517206 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555556, 0x5, x3, 608, x5)

inst_612:
// rs1_val==6148914691236517206 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x112, 0x5555555555555556, 0x333, x3, 616, x5)

inst_613:
// rs1_val==6148914691236517206 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x5555555555555552, 0x5555555555555556, -0x2d, x3, 624, x5)

inst_614:
// rs1_val==6148914691236517206 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555556, 0x2d, x3, 632, x5)

inst_615:
// rs1_val==6148914691236517206 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x5555555555555556, 0x2, x3, 640, x5)

inst_616:
// rs1_val==6148914691236517206 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x5555555555555556, 0x554, x3, 648, x5)

inst_617:
// rs1_val==6148914691236517206 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5555555555555556, 0x0, x3, 656, x5)

inst_618:
// rs1_val==6148914691236517206 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5555555555555556, 0x4, x3, 664, x5)

inst_619:
// rs1_val==6148914691236517206 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x112, 0x5555555555555556, 0x332, x3, 672, x5)

inst_620:
// rs1_val==6148914691236517206 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5555555555555556;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x444, 0x5555555555555556, 0x665, x3, 680, x5)

inst_621:
// rs1_val == (-2**(xlen-1)), imm_val == -513, rs1_val == -9223372036854775808
// opcode: andi ; op1:x10; dest:x11; op1val:-0x8000000000000000;  immval:-0x201
TEST_IMM_OP( andi, x11, x10, 0x8000000000000000, -0x8000000000000000, -0x201, x3, 688, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x3_2:
    .fill 87*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
