 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Mon Nov  9 11:54:31 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the and instruction of the RISC-V I extension for the and covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",and)

RVTEST_SIGBASE( x11,signature_x11_1)

inst_0:
// rs2 == rd != rs1, rs1==x10, rs2==x30, rd==x30, rs1_val == (-2**(xlen-1)), rs2_val == 1152921504606846976, rs1_val < 0 and rs2_val > 0, rs1_val == -9223372036854775808, rs1_val != rs2_val
// opcode: and ; op1:x10; op2:x30; dest:x30; op1val:-9223372036854775808;  op2val:1152921504606846976
TEST_RR_OP(and, x30, x10, x30, 0x0, -9223372036854775808, 1152921504606846976, x11, 0, x12)

inst_1:
// rs1 == rd != rs2, rs1==x15, rs2==x29, rd==x15, rs1_val == 0, rs2_val == 1125899906842624
// opcode: and ; op1:x15; op2:x29; dest:x15; op1val:0;  op2val:1125899906842624
TEST_RR_OP(and, x15, x15, x29, 0x0, 0, 1125899906842624, x11, 8, x12)

inst_2:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val < 0, rs1_val == 9223372036854775807, rs2_val == -134217729
// opcode: and ; op1:x9; op2:x9; dest:x9; op1val:9223372036854775807;  op2val:-134217729
TEST_RR_OP(and, x9, x9, x9, 0x7ffffffff7ffffff, 9223372036854775807, -134217729, x11, 16, x12)

inst_3:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x29, rs1_val == 1, rs1_val > 0 and rs2_val > 0, rs2_val == 549755813888
// opcode: and ; op1:x26; op2:x26; dest:x29; op1val:1;  op2val:549755813888
TEST_RR_OP(and, x29, x26, x26, 0x0, 1, 549755813888, x11, 24, x12)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x24, rd==x5, rs2_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs1_val == rs2_val, rs2_val == -9223372036854775808
// opcode: and ; op1:x16; op2:x24; dest:x5; op1val:-9223372036854775808;  op2val:-9223372036854775808
TEST_RR_OP(and, x5, x16, x24, 0x8000000000000000, -9223372036854775808, -9223372036854775808, x11, 32, x12)

inst_5:
// rs1==x20, rs2==x19, rd==x27, rs2_val == 0, rs1_val == 34359738368
// opcode: and ; op1:x20; op2:x19; dest:x27; op1val:34359738368;  op2val:0
TEST_RR_OP(and, x27, x20, x19, 0x0, 34359738368, 0, x11, 40, x12)

inst_6:
// rs1==x0, rs2==x25, rd==x24, rs2_val == (2**(xlen-1)-1), rs1_val == 274877906944, rs2_val == 9223372036854775807
// opcode: and ; op1:x0; op2:x25; dest:x24; op1val:274877906944;  op2val:9223372036854775807
TEST_RR_OP(and, x24, x0, x25, 0x4000000000, 274877906944, 9223372036854775807, x11, 48, x12)

inst_7:
// rs1==x24, rs2==x17, rd==x23, rs2_val == 1, rs1_val == -288230376151711745
// opcode: and ; op1:x24; op2:x17; dest:x23; op1val:-288230376151711745;  op2val:1
TEST_RR_OP(and, x23, x24, x17, 0x1, -288230376151711745, 1, x11, 56, x12)

inst_8:
// rs1==x3, rs2==x21, rd==x1, rs1_val == 2, rs2_val == 17592186044416
// opcode: and ; op1:x3; op2:x21; dest:x1; op1val:2;  op2val:17592186044416
TEST_RR_OP(and, x1, x3, x21, 0x0, 2, 17592186044416, x11, 64, x12)

inst_9:
// rs1==x21, rs2==x27, rd==x26, rs1_val == 4, rs2_val == -36028797018963969
// opcode: and ; op1:x21; op2:x27; dest:x26; op1val:4;  op2val:-36028797018963969
TEST_RR_OP(and, x26, x21, x27, 0x4, 4, -36028797018963969, x11, 72, x12)

inst_10:
// rs1==x22, rs2==x14, rd==x2, rs1_val == 8, rs2_val == 2199023255552
// opcode: and ; op1:x22; op2:x14; dest:x2; op1val:8;  op2val:2199023255552
TEST_RR_OP(and, x2, x22, x14, 0x0, 8, 2199023255552, x11, 80, x12)

inst_11:
// rs1==x13, rs2==x10, rd==x17, rs1_val == 16, rs2_val == -576460752303423489
// opcode: and ; op1:x13; op2:x10; dest:x17; op1val:16;  op2val:-576460752303423489
TEST_RR_OP(and, x17, x13, x10, 0x10, 16, -576460752303423489, x11, 88, x12)

inst_12:
// rs1==x18, rs2==x2, rd==x3, rs1_val == 32, 
// opcode: and ; op1:x18; op2:x2; dest:x3; op1val:32;  op2val:-8
TEST_RR_OP(and, x3, x18, x2, 0x20, 32, -8, x11, 96, x12)

inst_13:
// rs1==x7, rs2==x4, rd==x0, rs1_val == 64, rs2_val == 32768
// opcode: and ; op1:x7; op2:x4; dest:x0; op1val:64;  op2val:32768
TEST_RR_OP(and, x0, x7, x4, 0x0, 64, 32768, x11, 104, x12)

inst_14:
// rs1==x19, rs2==x8, rd==x14, rs1_val == 128, rs2_val == 2251799813685248
// opcode: and ; op1:x19; op2:x8; dest:x14; op1val:128;  op2val:2251799813685248
TEST_RR_OP(and, x14, x19, x8, 0x0, 128, 2251799813685248, x11, 112, x12)

inst_15:
// rs1==x1, rs2==x5, rd==x4, rs1_val == 256, rs2_val == -34359738369
// opcode: and ; op1:x1; op2:x5; dest:x4; op1val:256;  op2val:-34359738369
TEST_RR_OP(and, x4, x1, x5, 0x100, 256, -34359738369, x11, 120, x12)

inst_16:
// rs1==x31, rs2==x13, rd==x6, rs1_val == 512, rs2_val == 72057594037927936
// opcode: and ; op1:x31; op2:x13; dest:x6; op1val:512;  op2val:72057594037927936
TEST_RR_OP(and, x6, x31, x13, 0x0, 512, 72057594037927936, x11, 128, x12)
RVTEST_SIGBASE( x9,signature_x9_0)

inst_17:
// rs1==x28, rs2==x18, rd==x22, rs1_val == 1024, rs2_val == 4398046511104
// opcode: and ; op1:x28; op2:x18; dest:x22; op1val:1024;  op2val:4398046511104
TEST_RR_OP(and, x22, x28, x18, 0x0, 1024, 4398046511104, x9, 0, x1)

inst_18:
// rs1==x27, rs2==x7, rd==x20, rs1_val == 2048, rs2_val == -17
// opcode: and ; op1:x27; op2:x7; dest:x20; op1val:2048;  op2val:-17
TEST_RR_OP(and, x20, x27, x7, 0x800, 2048, -17, x9, 8, x1)

inst_19:
// rs1==x8, rs2==x28, rd==x21, rs1_val == 4096, rs2_val == -2
// opcode: and ; op1:x8; op2:x28; dest:x21; op1val:4096;  op2val:-2
TEST_RR_OP(and, x21, x8, x28, 0x1000, 4096, -2, x9, 16, x1)

inst_20:
// rs1==x5, rs2==x23, rd==x16, rs1_val == 8192, rs2_val == 8796093022208
// opcode: and ; op1:x5; op2:x23; dest:x16; op1val:8192;  op2val:8796093022208
TEST_RR_OP(and, x16, x5, x23, 0x0, 8192, 8796093022208, x9, 24, x1)

inst_21:
// rs1==x11, rs2==x16, rd==x13, rs1_val == 16384, rs2_val == -2199023255553
// opcode: and ; op1:x11; op2:x16; dest:x13; op1val:16384;  op2val:-2199023255553
TEST_RR_OP(and, x13, x11, x16, 0x4000, 16384, -2199023255553, x9, 32, x1)

inst_22:
// rs1==x25, rs2==x6, rd==x28, rs1_val == 32768, rs2_val == -268435457
// opcode: and ; op1:x25; op2:x6; dest:x28; op1val:32768;  op2val:-268435457
TEST_RR_OP(and, x28, x25, x6, 0x8000, 32768, -268435457, x9, 40, x1)

inst_23:
// rs1==x6, rs2==x3, rd==x19, rs1_val == 65536, rs2_val == 512
// opcode: and ; op1:x6; op2:x3; dest:x19; op1val:65536;  op2val:512
TEST_RR_OP(and, x19, x6, x3, 0x0, 65536, 512, x9, 48, x1)

inst_24:
// rs1==x30, rs2==x15, rd==x7, rs1_val == 131072, rs2_val == -549755813889
// opcode: and ; op1:x30; op2:x15; dest:x7; op1val:131072;  op2val:-549755813889
TEST_RR_OP(and, x7, x30, x15, 0x20000, 131072, -549755813889, x9, 56, x1)

inst_25:
// rs1==x17, rs2==x22, rd==x11, rs1_val == 262144, rs2_val == 64
// opcode: and ; op1:x17; op2:x22; dest:x11; op1val:262144;  op2val:64
TEST_RR_OP(and, x11, x17, x22, 0x0, 262144, 64, x9, 64, x1)

inst_26:
// rs1==x14, rs2==x20, rd==x12, rs1_val == 524288, 
// opcode: and ; op1:x14; op2:x20; dest:x12; op1val:524288;  op2val:5
TEST_RR_OP(and, x12, x14, x20, 0x0, 524288, 5, x9, 72, x1)

inst_27:
// rs1==x23, rs2==x31, rd==x8, rs1_val == 1048576, rs2_val == 16384
// opcode: and ; op1:x23; op2:x31; dest:x8; op1val:1048576;  op2val:16384
TEST_RR_OP(and, x8, x23, x31, 0x0, 1048576, 16384, x9, 80, x1)

inst_28:
// rs1==x29, rs2==x11, rd==x18, rs1_val == 2097152, rs2_val == 4611686018427387904
// opcode: and ; op1:x29; op2:x11; dest:x18; op1val:2097152;  op2val:4611686018427387904
TEST_RR_OP(and, x18, x29, x11, 0x0, 2097152, 4611686018427387904, x9, 88, x1)

inst_29:
// rs1==x4, rs2==x12, rd==x31, rs1_val == 4194304, 
// opcode: and ; op1:x4; op2:x12; dest:x31; op1val:4194304;  op2val:-268435457
TEST_RR_OP(and, x31, x4, x12, 0x400000, 4194304, -268435457, x9, 96, x1)

inst_30:
// rs1==x2, rs2==x0, rd==x10, rs1_val == 8388608, rs2_val == 2048
// opcode: and ; op1:x2; op2:x0; dest:x10; op1val:8388608;  op2val:2048
TEST_RR_OP(and, x10, x2, x0, 0x0, 8388608, 2048, x9, 104, x1)

inst_31:
// rs1==x12, rs2==x1, rd==x25, rs1_val == 16777216, rs2_val == 70368744177664
// opcode: and ; op1:x12; op2:x1; dest:x25; op1val:16777216;  op2val:70368744177664
TEST_RR_OP(and, x25, x12, x1, 0x0, 16777216, 70368744177664, x9, 112, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_32:
// rs1_val == 33554432, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:-268435457
TEST_RR_OP(and, x12, x10, x11, 0x2000000, 33554432, -268435457, x1, 0, x2)

inst_33:
// rs1_val == 67108864, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:70368744177664
TEST_RR_OP(and, x12, x10, x11, 0x0, 67108864, 70368744177664, x1, 8, x2)

inst_34:
// rs1_val == 134217728, rs2_val == -2097153
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-2097153
TEST_RR_OP(and, x12, x10, x11, 0x8000000, 134217728, -2097153, x1, 16, x2)

inst_35:
// rs1_val == 268435456, rs2_val == 36028797018963968
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:36028797018963968
TEST_RR_OP(and, x12, x10, x11, 0x0, 268435456, 36028797018963968, x1, 24, x2)

inst_36:
// rs1_val == 536870912, rs2_val == 128
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:128
TEST_RR_OP(and, x12, x10, x11, 0x0, 536870912, 128, x1, 32, x2)

inst_37:
// rs1_val == 1073741824, rs2_val == -4398046511105
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-4398046511105
TEST_RR_OP(and, x12, x10, x11, 0x40000000, 1073741824, -4398046511105, x1, 40, x2)

inst_38:
// rs1_val == 2147483648, rs2_val == -1025
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:-1025
TEST_RR_OP(and, x12, x10, x11, 0x80000000, 2147483648, -1025, x1, 48, x2)

inst_39:
// rs1_val == 4294967296, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-34359738369
TEST_RR_OP(and, x12, x10, x11, 0x100000000, 4294967296, -34359738369, x1, 56, x2)

inst_40:
// rs1_val == 8589934592, rs2_val == 140737488355328
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:140737488355328
TEST_RR_OP(and, x12, x10, x11, 0x0, 8589934592, 140737488355328, x1, 64, x2)

inst_41:
// rs1_val == 17179869184, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:7
TEST_RR_OP(and, x12, x10, x11, 0x0, 17179869184, 7, x1, 72, x2)

inst_42:
// rs1_val == 68719476736, rs2_val == 4
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:4
TEST_RR_OP(and, x12, x10, x11, 0x0, 68719476736, 4, x1, 80, x2)

inst_43:
// rs1_val == 137438953472, rs2_val == 16777216
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:16777216
TEST_RR_OP(and, x12, x10, x11, 0x0, 137438953472, 16777216, x1, 88, x2)

inst_44:
// rs1_val == 549755813888, rs2_val == 33554432
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:33554432
TEST_RR_OP(and, x12, x10, x11, 0x0, 549755813888, 33554432, x1, 96, x2)

inst_45:
// rs1_val == 1099511627776, rs2_val == -9
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:-9
TEST_RR_OP(and, x12, x10, x11, 0x10000000000, 1099511627776, -9, x1, 104, x2)

inst_46:
// rs1_val == 2199023255552, rs2_val == 262144
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:262144
TEST_RR_OP(and, x12, x10, x11, 0x0, 2199023255552, 262144, x1, 112, x2)

inst_47:
// rs1_val == 4398046511104, rs2_val == -17179869185
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-17179869185
TEST_RR_OP(and, x12, x10, x11, 0x40000000000, 4398046511104, -17179869185, x1, 120, x2)

inst_48:
// rs1_val == 8796093022208, rs2_val == 144115188075855872
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:144115188075855872
TEST_RR_OP(and, x12, x10, x11, 0x0, 8796093022208, 144115188075855872, x1, 128, x2)

inst_49:
// rs1_val == 17592186044416, rs2_val == 68719476736
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:68719476736
TEST_RR_OP(and, x12, x10, x11, 0x0, 17592186044416, 68719476736, x1, 136, x2)

inst_50:
// rs1_val == 35184372088832, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:1
TEST_RR_OP(and, x12, x10, x11, 0x0, 35184372088832, 1, x1, 144, x2)

inst_51:
// rs1_val == 70368744177664, rs2_val == 4096
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:4096
TEST_RR_OP(and, x12, x10, x11, 0x0, 70368744177664, 4096, x1, 152, x2)

inst_52:
// rs1_val == 140737488355328, rs2_val == -2305843009213693953
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:-2305843009213693953
TEST_RR_OP(and, x12, x10, x11, 0x800000000000, 140737488355328, -2305843009213693953, x1, 160, x2)

inst_53:
// rs1_val == 281474976710656, rs2_val == 2147483648
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:2147483648
TEST_RR_OP(and, x12, x10, x11, 0x0, 281474976710656, 2147483648, x1, 168, x2)

inst_54:
// rs1_val == 562949953421312, rs2_val == -68719476737
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:-68719476737
TEST_RR_OP(and, x12, x10, x11, 0x2000000000000, 562949953421312, -68719476737, x1, 176, x2)

inst_55:
// rs1_val == 1125899906842624, rs2_val == -281474976710657
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:-281474976710657
TEST_RR_OP(and, x12, x10, x11, 0x4000000000000, 1125899906842624, -281474976710657, x1, 184, x2)

inst_56:
// rs1_val == 2251799813685248, rs2_val == 6148914691236517205
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:6148914691236517205
TEST_RR_OP(and, x12, x10, x11, 0x0, 2251799813685248, 6148914691236517205, x1, 192, x2)

inst_57:
// rs1_val == 4503599627370496, rs2_val == -33554433
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:-33554433
TEST_RR_OP(and, x12, x10, x11, 0x10000000000000, 4503599627370496, -33554433, x1, 200, x2)

inst_58:
// rs1_val == 9007199254740992, rs2_val == -144115188075855873
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:-144115188075855873
TEST_RR_OP(and, x12, x10, x11, 0x20000000000000, 9007199254740992, -144115188075855873, x1, 208, x2)

inst_59:
// rs1_val == 18014398509481984, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-10
TEST_RR_OP(and, x12, x10, x11, 0x40000000000000, 18014398509481984, -10, x1, 216, x2)

inst_60:
// rs1_val == 36028797018963968, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:17592186044416
TEST_RR_OP(and, x12, x10, x11, 0x0, 36028797018963968, 17592186044416, x1, 224, x2)

inst_61:
// rs1_val == 72057594037927936, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-68719476737
TEST_RR_OP(and, x12, x10, x11, 0x100000000000000, 72057594037927936, -68719476737, x1, 232, x2)

inst_62:
// rs1_val == 144115188075855872, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:-134217729
TEST_RR_OP(and, x12, x10, x11, 0x200000000000000, 144115188075855872, -134217729, x1, 240, x2)

inst_63:
// rs1_val == 288230376151711744, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-10
TEST_RR_OP(and, x12, x10, x11, 0x400000000000000, 288230376151711744, -10, x1, 248, x2)

inst_64:
// rs1_val == 576460752303423488, rs2_val == -129
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-129
TEST_RR_OP(and, x12, x10, x11, 0x800000000000000, 576460752303423488, -129, x1, 256, x2)

inst_65:
// rs1_val == 1152921504606846976, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:128
TEST_RR_OP(and, x12, x10, x11, 0x0, 1152921504606846976, 128, x1, 264, x2)

inst_66:
// rs1_val == 2305843009213693952, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-4611686018427387904
TEST_RR_OP(and, x12, x10, x11, 0x0, 2305843009213693952, -4611686018427387904, x1, 272, x2)

inst_67:
// rs1_val == 4611686018427387904, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:140737488355328
TEST_RR_OP(and, x12, x10, x11, 0x0, 4611686018427387904, 140737488355328, x1, 280, x2)

inst_68:
// rs1_val == -2, rs2_val == -1099511627777
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-1099511627777
TEST_RR_OP(and, x12, x10, x11, 0xfffffefffffffffe, -2, -1099511627777, x1, 288, x2)

inst_69:
// rs1_val == -3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:32768
TEST_RR_OP(and, x12, x10, x11, 0x8000, -3, 32768, x1, 296, x2)

inst_70:
// rs1_val == -5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:4
TEST_RR_OP(and, x12, x10, x11, 0x0, -5, 4, x1, 304, x2)

inst_71:
// rs1_val == -9, rs2_val == -16777217
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-16777217
TEST_RR_OP(and, x12, x10, x11, 0xfffffffffefffff7, -9, -16777217, x1, 312, x2)

inst_72:
// rs1_val == -17, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-17179869185
TEST_RR_OP(and, x12, x10, x11, 0xfffffffbffffffef, -17, -17179869185, x1, 320, x2)

inst_73:
// rs1_val == -33, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:2251799813685248
TEST_RR_OP(and, x12, x10, x11, 0x8000000000000, -33, 2251799813685248, x1, 328, x2)

inst_74:
// rs1_val == -65, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:70368744177664
TEST_RR_OP(and, x12, x10, x11, 0x400000000000, -65, 70368744177664, x1, 336, x2)

inst_75:
// rs1_val == -129, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:-8
TEST_RR_OP(and, x12, x10, x11, 0xffffffffffffff78, -129, -8, x1, 344, x2)

inst_76:
// rs1_val == -257, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:-4398046511105
TEST_RR_OP(and, x12, x10, x11, 0xfffffbfffffffeff, -257, -4398046511105, x1, 352, x2)

inst_77:
// rs1_val == -513, rs2_val == 268435456
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:268435456
TEST_RR_OP(and, x12, x10, x11, 0x10000000, -513, 268435456, x1, 360, x2)

inst_78:
// rs1_val == -1025, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:64
TEST_RR_OP(and, x12, x10, x11, 0x40, -1025, 64, x1, 368, x2)

inst_79:
// rs1_val == -2049, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:-268435457
TEST_RR_OP(and, x12, x10, x11, 0xffffffffeffff7ff, -2049, -268435457, x1, 376, x2)

inst_80:
// rs1_val == -4097, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:1125899906842624
TEST_RR_OP(and, x12, x10, x11, 0x4000000000000, -4097, 1125899906842624, x1, 384, x2)

inst_81:
// rs2_val == -1125899906842625, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:-1125899906842625
TEST_RR_OP(and, x12, x10, x11, 0x800000000, 34359738368, -1125899906842625, x1, 392, x2)

inst_82:
// rs2_val == -2251799813685249, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:-2251799813685249
TEST_RR_OP(and, x12, x10, x11, 0x200000000000, 35184372088832, -2251799813685249, x1, 400, x2)

inst_83:
// rs2_val == -4503599627370497, rs1_val == -65537
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-4503599627370497
TEST_RR_OP(and, x12, x10, x11, 0xffeffffffffeffff, -65537, -4503599627370497, x1, 408, x2)

inst_84:
// rs2_val == -9007199254740993, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:-9007199254740993
TEST_RR_OP(and, x12, x10, x11, 0x8000000000, 549755813888, -9007199254740993, x1, 416, x2)

inst_85:
// rs2_val == -18014398509481985, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-18014398509481985
TEST_RR_OP(and, x12, x10, x11, 0xffbfffffffffffef, -17, -18014398509481985, x1, 424, x2)

inst_86:
// rs2_val == -72057594037927937, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-72057594037927937
TEST_RR_OP(and, x12, x10, x11, 0x400000000000000, 288230376151711744, -72057594037927937, x1, 432, x2)

inst_87:
// rs2_val == -288230376151711745, rs1_val == -576460752303423489
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-288230376151711745
TEST_RR_OP(and, x12, x10, x11, 0xf3ffffffffffffff, -576460752303423489, -288230376151711745, x1, 440, x2)

inst_88:
// rs2_val == -1152921504606846977, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-1152921504606846977
TEST_RR_OP(and, x12, x10, x11, 0x100000000000000, 72057594037927936, -1152921504606846977, x1, 448, x2)

inst_89:
// rs2_val == -4611686018427387905, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:-4611686018427387905
TEST_RR_OP(and, x12, x10, x11, 0x800000000, 34359738368, -4611686018427387905, x1, 456, x2)

inst_90:
// rs2_val == -6148914691236517206, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:-6148914691236517206
TEST_RR_OP(and, x12, x10, x11, 0x2000000000000000, 2305843009213693952, -6148914691236517206, x1, 464, x2)

inst_91:
// rs1_val == -8193, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-9223372036854775808
TEST_RR_OP(and, x12, x10, x11, 0x8000000000000000, -8193, -9223372036854775808, x1, 472, x2)

inst_92:
// rs1_val == -16385, rs2_val == 4194304
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:4194304
TEST_RR_OP(and, x12, x10, x11, 0x400000, -16385, 4194304, x1, 480, x2)

inst_93:
// rs1_val == -32769, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:-129
TEST_RR_OP(and, x12, x10, x11, 0xffffffffffff7f7f, -32769, -129, x1, 488, x2)

inst_94:
// rs1_val == -131073, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:-1152921504606846977
TEST_RR_OP(and, x12, x10, x11, 0xeffffffffffdffff, -131073, -1152921504606846977, x1, 496, x2)

inst_95:
// rs1_val == -262145, rs2_val == 35184372088832
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:35184372088832
TEST_RR_OP(and, x12, x10, x11, 0x200000000000, -262145, 35184372088832, x1, 504, x2)

inst_96:
// rs1_val == -524289, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-18014398509481985
TEST_RR_OP(and, x12, x10, x11, 0xffbffffffff7ffff, -524289, -18014398509481985, x1, 512, x2)

inst_97:
// rs1_val == -1048577, rs2_val == 524288
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:524288
TEST_RR_OP(and, x12, x10, x11, 0x80000, -1048577, 524288, x1, 520, x2)

inst_98:
// rs1_val == -2097153, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-288230376151711745
TEST_RR_OP(and, x12, x10, x11, 0xfbffffffffdfffff, -2097153, -288230376151711745, x1, 528, x2)

inst_99:
// rs1_val == -4194305, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:3
TEST_RR_OP(and, x12, x10, x11, 0x3, -4194305, 3, x1, 536, x2)

inst_100:
// rs1_val == -8388609, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:4
TEST_RR_OP(and, x12, x10, x11, 0x4, -8388609, 4, x1, 544, x2)

inst_101:
// rs1_val == -16777217, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:-36028797018963969
TEST_RR_OP(and, x12, x10, x11, 0xff7ffffffeffffff, -16777217, -36028797018963969, x1, 552, x2)

inst_102:
// rs1_val == -33554433, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-281474976710657
TEST_RR_OP(and, x12, x10, x11, 0xfffefffffdffffff, -33554433, -281474976710657, x1, 560, x2)

inst_103:
// rs1_val == -67108865, rs2_val == -8388609
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-8388609
TEST_RR_OP(and, x12, x10, x11, 0xfffffffffb7fffff, -67108865, -8388609, x1, 568, x2)

inst_104:
// rs1_val == -134217729, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-17
TEST_RR_OP(and, x12, x10, x11, 0xfffffffff7ffffef, -134217729, -17, x1, 576, x2)

inst_105:
// rs1_val == -268435457, rs2_val == 16
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:16
TEST_RR_OP(and, x12, x10, x11, 0x10, -268435457, 16, x1, 584, x2)

inst_106:
// rs1_val == -536870913, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:-10
TEST_RR_OP(and, x12, x10, x11, 0xffffffffdffffff6, -536870913, -10, x1, 592, x2)

inst_107:
// rs1_val == -1073741825, rs2_val == -65537
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:-65537
TEST_RR_OP(and, x12, x10, x11, 0xffffffffbffeffff, -1073741825, -65537, x1, 600, x2)

inst_108:
// rs1_val == -2147483649, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:9
TEST_RR_OP(and, x12, x10, x11, 0x9, -2147483649, 9, x1, 608, x2)

inst_109:
// rs1_val == -4294967297, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:33554432
TEST_RR_OP(and, x12, x10, x11, 0x2000000, -4294967297, 33554432, x1, 616, x2)

inst_110:
// rs1_val == -8589934593, rs2_val == -536870913
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:-536870913
TEST_RR_OP(and, x12, x10, x11, 0xfffffffddfffffff, -8589934593, -536870913, x1, 624, x2)

inst_111:
// rs1_val == -17179869185, rs2_val == 131072
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:131072
TEST_RR_OP(and, x12, x10, x11, 0x20000, -17179869185, 131072, x1, 632, x2)

inst_112:
// rs1_val == -34359738369, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:-17
TEST_RR_OP(and, x12, x10, x11, 0xfffffff7ffffffef, -34359738369, -17, x1, 640, x2)

inst_113:
// rs1_val == -68719476737, rs2_val == 134217728
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:134217728
TEST_RR_OP(and, x12, x10, x11, 0x8000000, -68719476737, 134217728, x1, 648, x2)

inst_114:
// rs1_val == -137438953473, rs2_val == -524289
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:-524289
TEST_RR_OP(and, x12, x10, x11, 0xffffffdffff7ffff, -137438953473, -524289, x1, 656, x2)

inst_115:
// rs1_val == -274877906945, rs2_val == 18014398509481984
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:18014398509481984
TEST_RR_OP(and, x12, x10, x11, 0x40000000000000, -274877906945, 18014398509481984, x1, 664, x2)

inst_116:
// rs1_val == -549755813889, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:-524289
TEST_RR_OP(and, x12, x10, x11, 0xffffff7ffff7ffff, -549755813889, -524289, x1, 672, x2)

inst_117:
// rs1_val == -1099511627777, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:-72057594037927937
TEST_RR_OP(and, x12, x10, x11, 0xfefffeffffffffff, -1099511627777, -72057594037927937, x1, 680, x2)

inst_118:
// rs1_val == -2199023255553, rs2_val == 2097152
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:2097152
TEST_RR_OP(and, x12, x10, x11, 0x200000, -2199023255553, 2097152, x1, 688, x2)

inst_119:
// rs1_val == -4398046511105, rs2_val == -140737488355329
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:-140737488355329
TEST_RR_OP(and, x12, x10, x11, 0xffff7bffffffffff, -4398046511105, -140737488355329, x1, 696, x2)

inst_120:
// rs1_val == -8796093022209, rs2_val == 274877906944
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:274877906944
TEST_RR_OP(and, x12, x10, x11, 0x4000000000, -8796093022209, 274877906944, x1, 704, x2)

inst_121:
// rs1_val == -17592186044417, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:9223372036854775807
TEST_RR_OP(and, x12, x10, x11, 0x7fffefffffffffff, -17592186044417, 9223372036854775807, x1, 712, x2)

inst_122:
// rs1_val == -35184372088833, rs2_val == -2049
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:-2049
TEST_RR_OP(and, x12, x10, x11, 0xffffdffffffff7ff, -35184372088833, -2049, x1, 720, x2)

inst_123:
// rs1_val == -70368744177665, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:-6148914691236517206
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, -70368744177665, -6148914691236517206, x1, 728, x2)

inst_124:
// rs1_val == -140737488355329, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:8796093022208
TEST_RR_OP(and, x12, x10, x11, 0x80000000000, -140737488355329, 8796093022208, x1, 736, x2)

inst_125:
// rs1_val == -281474976710657, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:7
TEST_RR_OP(and, x12, x10, x11, 0x7, -281474976710657, 7, x1, 744, x2)

inst_126:
// rs1_val == -562949953421313, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:262144
TEST_RR_OP(and, x12, x10, x11, 0x40000, -562949953421313, 262144, x1, 752, x2)

inst_127:
// rs1_val == -1125899906842625, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:262144
TEST_RR_OP(and, x12, x10, x11, 0x40000, -1125899906842625, 262144, x1, 760, x2)

inst_128:
// rs1_val == -2251799813685249, rs2_val == -5
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:-5
TEST_RR_OP(and, x12, x10, x11, 0xfff7fffffffffffb, -2251799813685249, -5, x1, 768, x2)

inst_129:
// rs1_val == -4503599627370497, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:18014398509481984
TEST_RR_OP(and, x12, x10, x11, 0x40000000000000, -4503599627370497, 18014398509481984, x1, 776, x2)

inst_130:
// rs1_val == -9007199254740993, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:-5
TEST_RR_OP(and, x12, x10, x11, 0xffdffffffffffffb, -9007199254740993, -5, x1, 784, x2)

inst_131:
// rs1_val == -18014398509481985, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:-17179869185
TEST_RR_OP(and, x12, x10, x11, 0xffbffffbffffffff, -18014398509481985, -17179869185, x1, 792, x2)

inst_132:
// rs1_val == -36028797018963969, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:524288
TEST_RR_OP(and, x12, x10, x11, 0x80000, -36028797018963969, 524288, x1, 800, x2)

inst_133:
// rs1_val == -72057594037927937, rs2_val == -8589934593
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:-8589934593
TEST_RR_OP(and, x12, x10, x11, 0xfefffffdffffffff, -72057594037927937, -8589934593, x1, 808, x2)

inst_134:
// rs1_val == -144115188075855873, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-9
TEST_RR_OP(and, x12, x10, x11, 0xfdfffffffffffff7, -144115188075855873, -9, x1, 816, x2)

inst_135:
// rs1_val == -1152921504606846977, rs2_val == 4503599627370496
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:4503599627370496
TEST_RR_OP(and, x12, x10, x11, 0x10000000000000, -1152921504606846977, 4503599627370496, x1, 824, x2)

inst_136:
// rs1_val == -2305843009213693953, rs2_val == 2
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:2
TEST_RR_OP(and, x12, x10, x11, 0x2, -2305843009213693953, 2, x1, 832, x2)

inst_137:
// rs1_val == -4611686018427387905, rs2_val == 1048576
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:1048576
TEST_RR_OP(and, x12, x10, x11, 0x100000, -4611686018427387905, 1048576, x1, 840, x2)

inst_138:
// rs1_val == 6148914691236517205, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:-4611686018427387905
TEST_RR_OP(and, x12, x10, x11, 0x1555555555555555, 6148914691236517205, -4611686018427387905, x1, 848, x2)

inst_139:
// rs1_val == -6148914691236517206, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-6148914691236517206
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaaaaaaaaaaa, -6148914691236517206, -6148914691236517206, x1, 856, x2)

inst_140:
// rs2_val == 8, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:8
TEST_RR_OP(and, x12, x10, x11, 0x0, 70368744177664, 8, x1, 864, x2)

inst_141:
// rs2_val == 32, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:32
TEST_RR_OP(and, x12, x10, x11, 0x20, -513, 32, x1, 872, x2)

inst_142:
// rs2_val == 256, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:256
TEST_RR_OP(and, x12, x10, x11, 0x0, 70368744177664, 256, x1, 880, x2)

inst_143:
// rs2_val == 1024, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:1024
TEST_RR_OP(and, x12, x10, x11, 0x400, -524289, 1024, x1, 888, x2)

inst_144:
// rs2_val == 8192, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:8192
TEST_RR_OP(and, x12, x10, x11, 0x0, 281474976710656, 8192, x1, 896, x2)

inst_145:
// rs2_val == 65536, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:65536
TEST_RR_OP(and, x12, x10, x11, 0x0, 7, 65536, x1, 904, x2)

inst_146:
// rs2_val == 8388608, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:8388608
TEST_RR_OP(and, x12, x10, x11, 0x0, 4611686018427387904, 8388608, x1, 912, x2)

inst_147:
// rs2_val == 67108864, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:67108864
TEST_RR_OP(and, x12, x10, x11, 0x4000000, -524289, 67108864, x1, 920, x2)

inst_148:
// rs2_val == 536870912, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:536870912
TEST_RR_OP(and, x12, x10, x11, 0x0, 8589934592, 536870912, x1, 928, x2)

inst_149:
// rs2_val == 1073741824, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387904;  op2val:1073741824
TEST_RR_OP(and, x12, x10, x11, 0x0, -4611686018427387904, 1073741824, x1, 936, x2)

inst_150:
// rs2_val == 4294967296, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:4294967296
TEST_RR_OP(and, x12, x10, x11, 0x100000000, -281474976710657, 4294967296, x1, 944, x2)

inst_151:
// rs2_val == 8589934592, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:8589934592
TEST_RR_OP(and, x12, x10, x11, 0x200000000, -5, 8589934592, x1, 952, x2)

inst_152:
// rs2_val == 17179869184, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:17179869184
TEST_RR_OP(and, x12, x10, x11, 0x400000000, -1073741825, 17179869184, x1, 960, x2)

inst_153:
// rs2_val == 34359738368, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:34359738368
TEST_RR_OP(and, x12, x10, x11, 0x0, 4503599627370496, 34359738368, x1, 968, x2)

inst_154:
// rs2_val == 137438953472, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:137438953472
TEST_RR_OP(and, x12, x10, x11, 0x0, 70368744177664, 137438953472, x1, 976, x2)

inst_155:
// rs2_val == 9007199254740992, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:9007199254740992
TEST_RR_OP(and, x12, x10, x11, 0x0, 1152921504606846976, 9007199254740992, x1, 984, x2)

inst_156:
// rs2_val == 562949953421312, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:562949953421312
TEST_RR_OP(and, x12, x10, x11, 0x2000000000000, -36028797018963969, 562949953421312, x1, 992, x2)

inst_157:
// rs2_val == 288230376151711744, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:288230376151711744
TEST_RR_OP(and, x12, x10, x11, 0x400000000000000, -17592186044417, 288230376151711744, x1, 1000, x2)

inst_158:
// rs2_val == 576460752303423488, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1;  op2val:576460752303423488
TEST_RR_OP(and, x12, x10, x11, 0x800000000000000, -1, 576460752303423488, x1, 1008, x2)

inst_159:
// rs2_val == 2305843009213693952, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:2305843009213693952
TEST_RR_OP(and, x12, x10, x11, 0x2000000000000000, -67108865, 2305843009213693952, x1, 1016, x2)

inst_160:
// rs2_val == -3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:-3
TEST_RR_OP(and, x12, x10, x11, 0x400000000000, 70368744177664, -3, x1, 1024, x2)

inst_161:
// rs2_val == -33, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-33
TEST_RR_OP(and, x12, x10, x11, 0x40000000000, 4398046511104, -33, x1, 1032, x2)

inst_162:
// rs2_val == -65, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-65
TEST_RR_OP(and, x12, x10, x11, 0xffffffffffdfffbf, -2097153, -65, x1, 1040, x2)

inst_163:
// rs2_val == -257, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-257
TEST_RR_OP(and, x12, x10, x11, 0xfffffffefffffeff, -4294967297, -257, x1, 1048, x2)

inst_164:
// rs2_val == -513, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:-513
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaaaaaaaa8aa, -6148914691236517206, -513, x1, 1056, x2)

inst_165:
// rs2_val == -4097, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2048;  op2val:-4097
TEST_RR_OP(and, x12, x10, x11, 0x800, 2048, -4097, x1, 1064, x2)

inst_166:
// rs2_val == -8193, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:-8193
TEST_RR_OP(and, x12, x10, x11, 0x80000000, 2147483648, -8193, x1, 1072, x2)

inst_167:
// rs2_val == -16385, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:-16385
TEST_RR_OP(and, x12, x10, x11, 0x1, 1, -16385, x1, 1080, x2)

inst_168:
// rs2_val == -32769, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-32769
TEST_RR_OP(and, x12, x10, x11, 0x4, 4, -32769, x1, 1088, x2)

inst_169:
// rs2_val == -131073, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:-131073
TEST_RR_OP(and, x12, x10, x11, 0xfffffffffffdffff, -131073, -131073, x1, 1096, x2)

inst_170:
// rs2_val == -262145, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:-262145
TEST_RR_OP(and, x12, x10, x11, 0xff7ffffffffbffff, -36028797018963969, -262145, x1, 1104, x2)

inst_171:
// rs2_val == -1048577, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:-1048577
TEST_RR_OP(and, x12, x10, x11, 0x200000, 2097152, -1048577, x1, 1112, x2)

inst_172:
// rs2_val == -4194305, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-1;  op2val:-4194305
TEST_RR_OP(and, x12, x10, x11, 0xffffffffffbfffff, -1, -4194305, x1, 1120, x2)

inst_173:
// rs2_val == -67108865, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-7;  op2val:-67108865
TEST_RR_OP(and, x12, x10, x11, 0xfffffffffbfffff9, -7, -67108865, x1, 1128, x2)

inst_174:
// rs2_val == -1073741825, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:-1073741825
TEST_RR_OP(and, x12, x10, x11, 0x10000, 65536, -1073741825, x1, 1136, x2)

inst_175:
// rs2_val == -2147483649, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:-2147483649
TEST_RR_OP(and, x12, x10, x11, 0x200, 512, -2147483649, x1, 1144, x2)

inst_176:
// rs2_val == -4294967297, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-9223372036854775808;  op2val:-4294967297
TEST_RR_OP(and, x12, x10, x11, 0x8000000000000000, -9223372036854775808, -4294967297, x1, 1152, x2)

inst_177:
// rs2_val == -137438953473, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:-137438953473
TEST_RR_OP(and, x12, x10, x11, 0x20000, 131072, -137438953473, x1, 1160, x2)

inst_178:
// rs2_val == -274877906945, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:-274877906945
TEST_RR_OP(and, x12, x10, x11, 0x200, 512, -274877906945, x1, 1168, x2)

inst_179:
// rs2_val == 1099511627776, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:1099511627776
TEST_RR_OP(and, x12, x10, x11, 0x0, 1048576, 1099511627776, x1, 1176, x2)

inst_180:
// rs2_val == -8796093022209, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:-8796093022209
TEST_RR_OP(and, x12, x10, x11, 0xfffff7fffffbffff, -262145, -8796093022209, x1, 1184, x2)

inst_181:
// rs2_val == -17592186044417, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-17592186044417
TEST_RR_OP(and, x12, x10, x11, 0xffffeffffffffffb, -5, -17592186044417, x1, 1192, x2)

inst_182:
// rs2_val == -35184372088833, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:-35184372088833
TEST_RR_OP(and, x12, x10, x11, 0xffffdffffffbffff, -262145, -35184372088833, x1, 1200, x2)

inst_183:
// rs2_val == -70368744177665, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-70368744177665
TEST_RR_OP(and, x12, x10, x11, 0xf7ffbfffffffffff, -576460752303423489, -70368744177665, x1, 1208, x2)

inst_184:
// rs2_val == 281474976710656, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:281474976710656
TEST_RR_OP(and, x12, x10, x11, 0x0, 1, 281474976710656, x1, 1216, x2)

inst_185:
// rs2_val == -562949953421313, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-562949953421313
TEST_RR_OP(and, x12, x10, x11, 0x0, 0, -562949953421313, x1, 1224, x2)

inst_186:
// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val < 0, rs1_val == 9223372036854775807, rs2_val == -134217729
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:-134217729
TEST_RR_OP(and, x12, x10, x11, 0x7ffffffff7ffffff, 9223372036854775807, -134217729, x1, 1232, x2)

inst_187:
// rs1_val == 1, rs1_val > 0 and rs2_val > 0, rs2_val == 549755813888
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:549755813888
TEST_RR_OP(and, x12, x10, x11, 0x0, 1, 549755813888, x1, 1240, x2)

inst_188:
// rs2_val == (2**(xlen-1)-1), rs1_val == 274877906944, rs2_val == 9223372036854775807
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:9223372036854775807
TEST_RR_OP(and, x12, x10, x11, 0x4000000000, 274877906944, 9223372036854775807, x1, 1248, x2)

inst_189:
// rs1_val == 64, rs2_val == 32768
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:64;  op2val:32768
TEST_RR_OP(and, x12, x10, x11, 0x0, 64, 32768, x1, 1256, x2)

inst_190:
// rs1_val == 8388608, rs2_val == 2048
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:2048
TEST_RR_OP(and, x12, x10, x11, 0x0, 8388608, 2048, x1, 1264, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 159*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
