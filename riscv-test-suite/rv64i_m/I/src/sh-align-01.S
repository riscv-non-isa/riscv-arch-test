
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sh instruction of the RISC-V I extension for the sh-align covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sh-align)

RVTEST_SIGBASE( x16,signature_x16_1)

inst_0:
// rs1 != rs2, rs1==x30, rs2==x28, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, ea_align == 0 and (imm_val % 4) == 0, imm_val > 0
// opcode: sh; op1:x30; op2:x28; op2val:-9223372036854775808; immval:128; align:0
TEST_STORE(x16,x9,0,x30,x28,-9223372036854775808,128,0,sh,0)

inst_1:
// rs1==x8, rs2==x4, rs2_val == 0, imm_val < 0, ea_align == 0 and (imm_val % 4) == 1
// opcode: sh; op1:x8; op2:x4; op2val:0; immval:-3; align:0
TEST_STORE(x16,x9,0,x8,x4,0,-3,8,sh,0)

inst_2:
// rs1==x12, rs2==x3, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode: sh; op1:x12; op2:x3; op2val:9223372036854775807; immval:256; align:0
TEST_STORE(x16,x9,0,x12,x3,9223372036854775807,256,16,sh,0)

inst_3:
// rs1==x19, rs2==x30, rs2_val == 1, ea_align == 0 and (imm_val % 4) == 3
// opcode: sh; op1:x19; op2:x30; op2val:1; immval:-257; align:0
TEST_STORE(x16,x9,0,x19,x30,1,-257,24,sh,0)

inst_4:
// rs1==x5, rs2==x15, ea_align == 0 and (imm_val % 4) == 2, rs2_val == 131072
// opcode: sh; op1:x5; op2:x15; op2val:131072; immval:-1366; align:0
TEST_STORE(x16,x9,0,x5,x15,131072,-1366,32,sh,0)

inst_5:
// rs1==x29, rs2==x25, ea_align == 2 and (imm_val % 4) == 0, rs2_val == -4097
// opcode: sh; op1:x29; op2:x25; op2val:-4097; immval:1024; align:2
TEST_STORE(x16,x9,0,x29,x25,-4097,1024,40,sh,2)

inst_6:
// rs1==x7, rs2==x11, ea_align == 2 and (imm_val % 4) == 1, rs2_val == 562949953421312
// opcode: sh; op1:x7; op2:x11; op2val:562949953421312; immval:9; align:2
TEST_STORE(x16,x9,0,x7,x11,562949953421312,9,48,sh,2)

inst_7:
// rs1==x3, rs2==x8, ea_align == 2 and (imm_val % 4) == 2, rs2_val == 8192
// opcode: sh; op1:x3; op2:x8; op2val:8192; immval:-6; align:2
TEST_STORE(x16,x9,0,x3,x8,8192,-6,56,sh,2)

inst_8:
// rs1==x21, rs2==x13, ea_align == 2 and (imm_val % 4) == 3, rs2_val == 8388608
// opcode: sh; op1:x21; op2:x13; op2val:8388608; immval:-1; align:2
TEST_STORE(x16,x9,0,x21,x13,8388608,-1,64,sh,2)

inst_9:
// rs1==x22, rs2==x7, imm_val == 0, rs2_val == -129
// opcode: sh; op1:x22; op2:x7; op2val:-129; immval:0; align:0
TEST_STORE(x16,x9,0,x22,x7,-129,0,72,sh,0)

inst_10:
// rs1==x18, rs2==x1, rs2_val == 2, 
// opcode: sh; op1:x18; op2:x1; op2val:2; immval:-4; align:0
TEST_STORE(x16,x9,0,x18,x1,2,-4,80,sh,0)

inst_11:
// rs1==x20, rs2==x2, rs2_val == 4, 
// opcode: sh; op1:x20; op2:x2; op2val:4; immval:-17; align:0
TEST_STORE(x16,x9,0,x20,x2,4,-17,88,sh,0)

inst_12:
// rs1==x14, rs2==x27, rs2_val == 8, 
// opcode: sh; op1:x14; op2:x27; op2val:8; immval:512; align:0
TEST_STORE(x16,x9,0,x14,x27,8,512,96,sh,0)

inst_13:
// rs1==x2, rs2==x0, rs2_val == 16, 
// opcode: sh; op1:x2; op2:x0; op2val:16; immval:7; align:0
TEST_STORE(x16,x9,0,x2,x0,16,7,104,sh,0)

inst_14:
// rs1==x4, rs2==x24, rs2_val == 32, 
// opcode: sh; op1:x4; op2:x24; op2val:32; immval:-1366; align:0
TEST_STORE(x16,x9,0,x4,x24,32,-1366,112,sh,0)

inst_15:
// rs1==x13, rs2==x14, rs2_val == 64, 
// opcode: sh; op1:x13; op2:x14; op2val:64; immval:6; align:0
TEST_STORE(x16,x9,0,x13,x14,64,6,120,sh,0)

inst_16:
// rs1==x28, rs2==x26, rs2_val == 128, 
// opcode: sh; op1:x28; op2:x26; op2val:128; immval:-1; align:0
TEST_STORE(x16,x9,0,x28,x26,128,-1,128,sh,0)

inst_17:
// rs1==x15, rs2==x10, rs2_val == 256, 
// opcode: sh; op1:x15; op2:x10; op2val:256; immval:-2; align:0
TEST_STORE(x16,x9,0,x15,x10,256,-2,136,sh,0)

inst_18:
// rs1==x6, rs2==x12, rs2_val == 512, 
// opcode: sh; op1:x6; op2:x12; op2val:512; immval:-4; align:0
TEST_STORE(x16,x9,0,x6,x12,512,-4,144,sh,0)

inst_19:
// rs1==x17, rs2==x29, rs2_val == 1024, 
// opcode: sh; op1:x17; op2:x29; op2val:1024; immval:-2; align:0
TEST_STORE(x16,x9,0,x17,x29,1024,-2,152,sh,0)

inst_20:
// rs1==x10, rs2==x18, rs2_val == 2048, 
// opcode: sh; op1:x10; op2:x18; op2val:2048; immval:32; align:0
TEST_STORE(x16,x3,0,x10,x18,2048,32,160,sh,0)

inst_21:
// rs1==x11, rs2==x6, rs2_val == 4096, 
// opcode: sh; op1:x11; op2:x6; op2val:4096; immval:-2048; align:0
TEST_STORE(x16,x3,0,x11,x6,4096,-2048,168,sh,0)

inst_22:
// rs1==x26, rs2==x9, rs2_val == 16384, 
// opcode: sh; op1:x26; op2:x9; op2val:16384; immval:1023; align:0
TEST_STORE(x16,x3,0,x26,x9,16384,1023,176,sh,0)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_23:
// rs1==x16, rs2==x19, rs2_val == 32768, 
// opcode: sh; op1:x16; op2:x19; op2val:32768; immval:2047; align:0
TEST_STORE(x2,x3,0,x16,x19,32768,2047,0,sh,0)

inst_24:
// rs1==x25, rs2==x31, rs2_val == 65536, 
// opcode: sh; op1:x25; op2:x31; op2val:65536; immval:1365; align:0
TEST_STORE(x2,x3,0,x25,x31,65536,1365,8,sh,0)

inst_25:
// rs1==x27, rs2==x17, rs2_val == 262144, 
// opcode: sh; op1:x27; op2:x17; op2val:262144; immval:-129; align:0
TEST_STORE(x2,x3,0,x27,x17,262144,-129,16,sh,0)

inst_26:
// rs1==x1, rs2==x16, rs2_val == 524288, 
// opcode: sh; op1:x1; op2:x16; op2val:524288; immval:-2; align:0
TEST_STORE(x2,x3,0,x1,x16,524288,-2,24,sh,0)

inst_27:
// rs1==x9, rs2==x20, rs2_val == 1048576, 
// opcode: sh; op1:x9; op2:x20; op2val:1048576; immval:8; align:0
TEST_STORE(x2,x3,0,x9,x20,1048576,8,32,sh,0)

inst_28:
// rs1==x23, rs2==x5, rs2_val == 2097152, 
// opcode: sh; op1:x23; op2:x5; op2val:2097152; immval:0; align:0
TEST_STORE(x2,x3,0,x23,x5,2097152,0,40,sh,0)

inst_29:
// rs1==x31, rs2==x22, rs2_val == 4194304, 
// opcode: sh; op1:x31; op2:x22; op2val:4194304; immval:-9; align:0
TEST_STORE(x2,x3,0,x31,x22,4194304,-9,48,sh,0)

inst_30:
// rs1==x24, rs2==x23, rs2_val == 16777216, 
// opcode: sh; op1:x24; op2:x23; op2val:16777216; immval:-2; align:0
TEST_STORE(x2,x3,0,x24,x23,16777216,-2,56,sh,0)

inst_31:
// rs2==x21, rs2_val == 33554432, 
// opcode: sh; op1:x24; op2:x21; op2val:33554432; immval:2; align:0
TEST_STORE(x2,x3,0,x24,x21,33554432,2,64,sh,0)

inst_32:
// rs2_val == 67108864, 
// opcode: sh; op1:x10; op2:x11; op2val:67108864; immval:-4; align:0
TEST_STORE(x2,x3,0,x10,x11,67108864,-4,72,sh,0)

inst_33:
// rs2_val == 134217728, 
// opcode: sh; op1:x10; op2:x11; op2val:134217728; immval:-1025; align:0
TEST_STORE(x2,x3,0,x10,x11,134217728,-1025,80,sh,0)

inst_34:
// rs2_val == 268435456, 
// opcode: sh; op1:x10; op2:x11; op2val:268435456; immval:1365; align:0
TEST_STORE(x2,x3,0,x10,x11,268435456,1365,88,sh,0)

inst_35:
// rs2_val == 536870912, 
// opcode: sh; op1:x10; op2:x11; op2val:536870912; immval:-1024; align:0
TEST_STORE(x2,x3,0,x10,x11,536870912,-1024,96,sh,0)

inst_36:
// rs2_val == 1073741824, 
// opcode: sh; op1:x10; op2:x11; op2val:1073741824; immval:64; align:0
TEST_STORE(x2,x3,0,x10,x11,1073741824,64,104,sh,0)

inst_37:
// rs2_val == 2147483648, 
// opcode: sh; op1:x10; op2:x11; op2val:2147483648; immval:-7; align:0
TEST_STORE(x2,x3,0,x10,x11,2147483648,-7,112,sh,0)

inst_38:
// rs2_val == 4294967296, 
// opcode: sh; op1:x10; op2:x11; op2val:4294967296; immval:-1024; align:0
TEST_STORE(x2,x3,0,x10,x11,4294967296,-1024,120,sh,0)

inst_39:
// rs2_val == 8589934592, 
// opcode: sh; op1:x10; op2:x11; op2val:8589934592; immval:512; align:0
TEST_STORE(x2,x3,0,x10,x11,8589934592,512,128,sh,0)

inst_40:
// rs2_val == 17179869184, 
// opcode: sh; op1:x10; op2:x11; op2val:17179869184; immval:7; align:0
TEST_STORE(x2,x3,0,x10,x11,17179869184,7,136,sh,0)

inst_41:
// rs2_val == 34359738368, 
// opcode: sh; op1:x10; op2:x11; op2val:34359738368; immval:9; align:0
TEST_STORE(x2,x3,0,x10,x11,34359738368,9,144,sh,0)

inst_42:
// rs2_val == 68719476736, 
// opcode: sh; op1:x10; op2:x11; op2val:68719476736; immval:512; align:0
TEST_STORE(x2,x3,0,x10,x11,68719476736,512,152,sh,0)

inst_43:
// rs2_val == 137438953472, 
// opcode: sh; op1:x10; op2:x11; op2val:137438953472; immval:9; align:0
TEST_STORE(x2,x3,0,x10,x11,137438953472,9,160,sh,0)

inst_44:
// rs2_val == 274877906944, 
// opcode: sh; op1:x10; op2:x11; op2val:274877906944; immval:-129; align:0
TEST_STORE(x2,x3,0,x10,x11,274877906944,-129,168,sh,0)

inst_45:
// rs2_val == 549755813888, 
// opcode: sh; op1:x10; op2:x11; op2val:549755813888; immval:-257; align:0
TEST_STORE(x2,x3,0,x10,x11,549755813888,-257,176,sh,0)

inst_46:
// rs2_val == 1099511627776, 
// opcode: sh; op1:x10; op2:x11; op2val:1099511627776; immval:0; align:0
TEST_STORE(x2,x3,0,x10,x11,1099511627776,0,184,sh,0)

inst_47:
// rs2_val == 2199023255552, 
// opcode: sh; op1:x10; op2:x11; op2val:2199023255552; immval:-9; align:0
TEST_STORE(x2,x3,0,x10,x11,2199023255552,-9,192,sh,0)

inst_48:
// rs2_val == 4398046511104, 
// opcode: sh; op1:x10; op2:x11; op2val:4398046511104; immval:2047; align:0
TEST_STORE(x2,x3,0,x10,x11,4398046511104,2047,200,sh,0)

inst_49:
// rs2_val == 8796093022208, 
// opcode: sh; op1:x10; op2:x11; op2val:8796093022208; immval:-33; align:0
TEST_STORE(x2,x3,0,x10,x11,8796093022208,-33,208,sh,0)

inst_50:
// rs2_val == 17592186044416, 
// opcode: sh; op1:x10; op2:x11; op2val:17592186044416; immval:3; align:0
TEST_STORE(x2,x3,0,x10,x11,17592186044416,3,216,sh,0)

inst_51:
// rs2_val == 35184372088832, 
// opcode: sh; op1:x10; op2:x11; op2val:35184372088832; immval:1023; align:0
TEST_STORE(x2,x3,0,x10,x11,35184372088832,1023,224,sh,0)

inst_52:
// rs2_val == 70368744177664, 
// opcode: sh; op1:x10; op2:x11; op2val:70368744177664; immval:5; align:0
TEST_STORE(x2,x3,0,x10,x11,70368744177664,5,232,sh,0)

inst_53:
// rs2_val == 140737488355328, 
// opcode: sh; op1:x10; op2:x11; op2val:140737488355328; immval:-10; align:0
TEST_STORE(x2,x3,0,x10,x11,140737488355328,-10,240,sh,0)

inst_54:
// rs2_val == 281474976710656, 
// opcode: sh; op1:x10; op2:x11; op2val:281474976710656; immval:-33; align:0
TEST_STORE(x2,x3,0,x10,x11,281474976710656,-33,248,sh,0)

inst_55:
// rs2_val == 1125899906842624, 
// opcode: sh; op1:x10; op2:x11; op2val:1125899906842624; immval:-33; align:0
TEST_STORE(x2,x3,0,x10,x11,1125899906842624,-33,256,sh,0)

inst_56:
// rs2_val == 2251799813685248, 
// opcode: sh; op1:x10; op2:x11; op2val:2251799813685248; immval:6; align:0
TEST_STORE(x2,x3,0,x10,x11,2251799813685248,6,264,sh,0)

inst_57:
// rs2_val == 4503599627370496, 
// opcode: sh; op1:x10; op2:x11; op2val:4503599627370496; immval:128; align:0
TEST_STORE(x2,x3,0,x10,x11,4503599627370496,128,272,sh,0)

inst_58:
// rs2_val == 9007199254740992, 
// opcode: sh; op1:x10; op2:x11; op2val:9007199254740992; immval:-8; align:0
TEST_STORE(x2,x3,0,x10,x11,9007199254740992,-8,280,sh,0)

inst_59:
// rs2_val == 18014398509481984, 
// opcode: sh; op1:x10; op2:x11; op2val:18014398509481984; immval:6; align:0
TEST_STORE(x2,x3,0,x10,x11,18014398509481984,6,288,sh,0)

inst_60:
// rs2_val == 36028797018963968, 
// opcode: sh; op1:x10; op2:x11; op2val:36028797018963968; immval:-1024; align:0
TEST_STORE(x2,x3,0,x10,x11,36028797018963968,-1024,296,sh,0)

inst_61:
// rs2_val == 72057594037927936, 
// opcode: sh; op1:x10; op2:x11; op2val:72057594037927936; immval:-2048; align:0
TEST_STORE(x2,x3,0,x10,x11,72057594037927936,-2048,304,sh,0)

inst_62:
// rs2_val == 144115188075855872, 
// opcode: sh; op1:x10; op2:x11; op2val:144115188075855872; immval:-33; align:0
TEST_STORE(x2,x3,0,x10,x11,144115188075855872,-33,312,sh,0)

inst_63:
// rs2_val == 288230376151711744, 
// opcode: sh; op1:x10; op2:x11; op2val:288230376151711744; immval:-1025; align:0
TEST_STORE(x2,x3,0,x10,x11,288230376151711744,-1025,320,sh,0)

inst_64:
// rs2_val == 576460752303423488, 
// opcode: sh; op1:x10; op2:x11; op2val:576460752303423488; immval:128; align:0
TEST_STORE(x2,x3,0,x10,x11,576460752303423488,128,328,sh,0)

inst_65:
// rs2_val == 1152921504606846976, 
// opcode: sh; op1:x10; op2:x11; op2val:1152921504606846976; immval:3; align:0
TEST_STORE(x2,x3,0,x10,x11,1152921504606846976,3,336,sh,0)

inst_66:
// rs2_val == 2305843009213693952, 
// opcode: sh; op1:x10; op2:x11; op2val:2305843009213693952; immval:64; align:0
TEST_STORE(x2,x3,0,x10,x11,2305843009213693952,64,344,sh,0)

inst_67:
// rs2_val == 4611686018427387904, 
// opcode: sh; op1:x10; op2:x11; op2val:4611686018427387904; immval:2047; align:0
TEST_STORE(x2,x3,0,x10,x11,4611686018427387904,2047,352,sh,0)

inst_68:
// rs2_val == -1125899906842625, 
// opcode: sh; op1:x10; op2:x11; op2val:-1125899906842625; immval:5; align:0
TEST_STORE(x2,x3,0,x10,x11,-1125899906842625,5,360,sh,0)

inst_69:
// rs2_val == -2251799813685249, 
// opcode: sh; op1:x10; op2:x11; op2val:-2251799813685249; immval:-17; align:0
TEST_STORE(x2,x3,0,x10,x11,-2251799813685249,-17,368,sh,0)

inst_70:
// rs2_val == -4503599627370497, 
// opcode: sh; op1:x10; op2:x11; op2val:-4503599627370497; immval:-10; align:0
TEST_STORE(x2,x3,0,x10,x11,-4503599627370497,-10,376,sh,0)

inst_71:
// rs2_val == -9007199254740993, 
// opcode: sh; op1:x10; op2:x11; op2val:-9007199254740993; immval:-257; align:0
TEST_STORE(x2,x3,0,x10,x11,-9007199254740993,-257,384,sh,0)

inst_72:
// rs2_val == -18014398509481985, 
// opcode: sh; op1:x10; op2:x11; op2val:-18014398509481985; immval:0; align:0
TEST_STORE(x2,x3,0,x10,x11,-18014398509481985,0,392,sh,0)

inst_73:
// rs2_val == -36028797018963969, 
// opcode: sh; op1:x10; op2:x11; op2val:-36028797018963969; immval:4; align:0
TEST_STORE(x2,x3,0,x10,x11,-36028797018963969,4,400,sh,0)

inst_74:
// rs2_val == -72057594037927937, 
// opcode: sh; op1:x10; op2:x11; op2val:-72057594037927937; immval:8; align:0
TEST_STORE(x2,x3,0,x10,x11,-72057594037927937,8,408,sh,0)

inst_75:
// rs2_val == -144115188075855873, 
// opcode: sh; op1:x10; op2:x11; op2val:-144115188075855873; immval:-8; align:0
TEST_STORE(x2,x3,0,x10,x11,-144115188075855873,-8,416,sh,0)

inst_76:
// rs2_val == -288230376151711745, 
// opcode: sh; op1:x10; op2:x11; op2val:-288230376151711745; immval:-257; align:0
TEST_STORE(x2,x3,0,x10,x11,-288230376151711745,-257,424,sh,0)

inst_77:
// rs2_val == -576460752303423489, 
// opcode: sh; op1:x10; op2:x11; op2val:-576460752303423489; immval:1; align:0
TEST_STORE(x2,x3,0,x10,x11,-576460752303423489,1,432,sh,0)

inst_78:
// rs2_val == -1152921504606846977, 
// opcode: sh; op1:x10; op2:x11; op2val:-1152921504606846977; immval:-2048; align:0
TEST_STORE(x2,x3,0,x10,x11,-1152921504606846977,-2048,440,sh,0)

inst_79:
// rs2_val == -2305843009213693953, 
// opcode: sh; op1:x10; op2:x11; op2val:-2305843009213693953; immval:-33; align:0
TEST_STORE(x2,x3,0,x10,x11,-2305843009213693953,-33,448,sh,0)

inst_80:
// rs2_val == -4611686018427387905, 
// opcode: sh; op1:x10; op2:x11; op2val:-4611686018427387905; immval:32; align:0
TEST_STORE(x2,x3,0,x10,x11,-4611686018427387905,32,456,sh,0)

inst_81:
// rs2_val == 6148914691236517205, 
// opcode: sh; op1:x10; op2:x11; op2val:6148914691236517205; immval:-129; align:0
TEST_STORE(x2,x3,0,x10,x11,6148914691236517205,-129,464,sh,0)

inst_82:
// rs2_val == -6148914691236517206, 
// opcode: sh; op1:x10; op2:x11; op2val:-6148914691236517206; immval:8; align:0
TEST_STORE(x2,x3,0,x10,x11,-6148914691236517206,8,472,sh,0)

inst_83:
// rs2_val == -2, 
// opcode: sh; op1:x10; op2:x11; op2val:-2; immval:5; align:0
TEST_STORE(x2,x3,0,x10,x11,-2,5,480,sh,0)

inst_84:
// rs2_val == -3, 
// opcode: sh; op1:x10; op2:x11; op2val:-3; immval:256; align:0
TEST_STORE(x2,x3,0,x10,x11,-3,256,488,sh,0)

inst_85:
// rs2_val == -5, 
// opcode: sh; op1:x10; op2:x11; op2val:-5; immval:-1; align:0
TEST_STORE(x2,x3,0,x10,x11,-5,-1,496,sh,0)

inst_86:
// rs2_val == -9, 
// opcode: sh; op1:x10; op2:x11; op2val:-9; immval:-8; align:0
TEST_STORE(x2,x3,0,x10,x11,-9,-8,504,sh,0)

inst_87:
// rs2_val == -17, 
// opcode: sh; op1:x10; op2:x11; op2val:-17; immval:128; align:0
TEST_STORE(x2,x3,0,x10,x11,-17,128,512,sh,0)

inst_88:
// rs2_val == -33, 
// opcode: sh; op1:x10; op2:x11; op2val:-33; immval:6; align:0
TEST_STORE(x2,x3,0,x10,x11,-33,6,520,sh,0)

inst_89:
// rs2_val == -65, 
// opcode: sh; op1:x10; op2:x11; op2val:-65; immval:-3; align:0
TEST_STORE(x2,x3,0,x10,x11,-65,-3,528,sh,0)

inst_90:
// rs2_val == -257, 
// opcode: sh; op1:x10; op2:x11; op2val:-257; immval:-1024; align:0
TEST_STORE(x2,x3,0,x10,x11,-257,-1024,536,sh,0)

inst_91:
// rs2_val == -513, 
// opcode: sh; op1:x10; op2:x11; op2val:-513; immval:5; align:0
TEST_STORE(x2,x3,0,x10,x11,-513,5,544,sh,0)

inst_92:
// rs2_val == -1025, 
// opcode: sh; op1:x10; op2:x11; op2val:-1025; immval:16; align:0
TEST_STORE(x2,x3,0,x10,x11,-1025,16,552,sh,0)

inst_93:
// rs2_val == -2049, 
// opcode: sh; op1:x10; op2:x11; op2val:-2049; immval:-2048; align:0
TEST_STORE(x2,x3,0,x10,x11,-2049,-2048,560,sh,0)

inst_94:
// rs2_val == -8193, 
// opcode: sh; op1:x10; op2:x11; op2val:-8193; immval:1023; align:0
TEST_STORE(x2,x3,0,x10,x11,-8193,1023,568,sh,0)

inst_95:
// rs2_val == -16385, 
// opcode: sh; op1:x10; op2:x11; op2val:-16385; immval:3; align:0
TEST_STORE(x2,x3,0,x10,x11,-16385,3,576,sh,0)

inst_96:
// rs2_val == -32769, 
// opcode: sh; op1:x10; op2:x11; op2val:-32769; immval:4; align:0
TEST_STORE(x2,x3,0,x10,x11,-32769,4,584,sh,0)

inst_97:
// rs2_val == -65537, 
// opcode: sh; op1:x10; op2:x11; op2val:-65537; immval:1; align:0
TEST_STORE(x2,x3,0,x10,x11,-65537,1,592,sh,0)

inst_98:
// rs2_val == -131073, 
// opcode: sh; op1:x10; op2:x11; op2val:-131073; immval:-10; align:0
TEST_STORE(x2,x3,0,x10,x11,-131073,-10,600,sh,0)

inst_99:
// rs2_val == -262145, 
// opcode: sh; op1:x10; op2:x11; op2val:-262145; immval:4; align:0
TEST_STORE(x2,x3,0,x10,x11,-262145,4,608,sh,0)

inst_100:
// rs2_val == -524289, 
// opcode: sh; op1:x10; op2:x11; op2val:-524289; immval:9; align:0
TEST_STORE(x2,x3,0,x10,x11,-524289,9,616,sh,0)

inst_101:
// rs2_val == -1048577, 
// opcode: sh; op1:x10; op2:x11; op2val:-1048577; immval:-2048; align:0
TEST_STORE(x2,x3,0,x10,x11,-1048577,-2048,624,sh,0)

inst_102:
// rs2_val == -2097153, 
// opcode: sh; op1:x10; op2:x11; op2val:-2097153; immval:9; align:0
TEST_STORE(x2,x3,0,x10,x11,-2097153,9,632,sh,0)

inst_103:
// rs2_val == -4194305, 
// opcode: sh; op1:x10; op2:x11; op2val:-4194305; immval:-129; align:0
TEST_STORE(x2,x3,0,x10,x11,-4194305,-129,640,sh,0)

inst_104:
// rs2_val == -8388609, 
// opcode: sh; op1:x10; op2:x11; op2val:-8388609; immval:-129; align:0
TEST_STORE(x2,x3,0,x10,x11,-8388609,-129,648,sh,0)

inst_105:
// rs2_val == -16777217, 
// opcode: sh; op1:x10; op2:x11; op2val:-16777217; immval:1024; align:0
TEST_STORE(x2,x3,0,x10,x11,-16777217,1024,656,sh,0)

inst_106:
// rs2_val == -33554433, 
// opcode: sh; op1:x10; op2:x11; op2val:-33554433; immval:-2048; align:0
TEST_STORE(x2,x3,0,x10,x11,-33554433,-2048,664,sh,0)

inst_107:
// rs2_val == -67108865, 
// opcode: sh; op1:x10; op2:x11; op2val:-67108865; immval:-513; align:0
TEST_STORE(x2,x3,0,x10,x11,-67108865,-513,672,sh,0)

inst_108:
// rs2_val == -134217729, 
// opcode: sh; op1:x10; op2:x11; op2val:-134217729; immval:1023; align:0
TEST_STORE(x2,x3,0,x10,x11,-134217729,1023,680,sh,0)

inst_109:
// rs2_val == -268435457, 
// opcode: sh; op1:x10; op2:x11; op2val:-268435457; immval:2; align:0
TEST_STORE(x2,x3,0,x10,x11,-268435457,2,688,sh,0)

inst_110:
// rs2_val == -536870913, 
// opcode: sh; op1:x10; op2:x11; op2val:-536870913; immval:-2048; align:0
TEST_STORE(x2,x3,0,x10,x11,-536870913,-2048,696,sh,0)

inst_111:
// rs2_val == -1073741825, 
// opcode: sh; op1:x10; op2:x11; op2val:-1073741825; immval:1365; align:0
TEST_STORE(x2,x3,0,x10,x11,-1073741825,1365,704,sh,0)

inst_112:
// rs2_val == -2147483649, 
// opcode: sh; op1:x10; op2:x11; op2val:-2147483649; immval:1023; align:0
TEST_STORE(x2,x3,0,x10,x11,-2147483649,1023,712,sh,0)

inst_113:
// rs2_val == -4294967297, 
// opcode: sh; op1:x10; op2:x11; op2val:-4294967297; immval:2; align:0
TEST_STORE(x2,x3,0,x10,x11,-4294967297,2,720,sh,0)

inst_114:
// rs2_val == -8589934593, 
// opcode: sh; op1:x10; op2:x11; op2val:-8589934593; immval:-33; align:0
TEST_STORE(x2,x3,0,x10,x11,-8589934593,-33,728,sh,0)

inst_115:
// rs2_val == -17179869185, 
// opcode: sh; op1:x10; op2:x11; op2val:-17179869185; immval:1024; align:0
TEST_STORE(x2,x3,0,x10,x11,-17179869185,1024,736,sh,0)

inst_116:
// rs2_val == -34359738369, 
// opcode: sh; op1:x10; op2:x11; op2val:-34359738369; immval:-8; align:0
TEST_STORE(x2,x3,0,x10,x11,-34359738369,-8,744,sh,0)

inst_117:
// rs2_val == -68719476737, 
// opcode: sh; op1:x10; op2:x11; op2val:-68719476737; immval:0; align:0
TEST_STORE(x2,x3,0,x10,x11,-68719476737,0,752,sh,0)

inst_118:
// rs2_val == -137438953473, 
// opcode: sh; op1:x10; op2:x11; op2val:-137438953473; immval:-5; align:0
TEST_STORE(x2,x3,0,x10,x11,-137438953473,-5,760,sh,0)

inst_119:
// rs2_val == -274877906945, 
// opcode: sh; op1:x10; op2:x11; op2val:-274877906945; immval:2; align:0
TEST_STORE(x2,x3,0,x10,x11,-274877906945,2,768,sh,0)

inst_120:
// rs2_val == -549755813889, 
// opcode: sh; op1:x10; op2:x11; op2val:-549755813889; immval:8; align:0
TEST_STORE(x2,x3,0,x10,x11,-549755813889,8,776,sh,0)

inst_121:
// rs2_val == -1099511627777, 
// opcode: sh; op1:x10; op2:x11; op2val:-1099511627777; immval:-5; align:0
TEST_STORE(x2,x3,0,x10,x11,-1099511627777,-5,784,sh,0)

inst_122:
// rs2_val == -2199023255553, 
// opcode: sh; op1:x10; op2:x11; op2val:-2199023255553; immval:4; align:0
TEST_STORE(x2,x3,0,x10,x11,-2199023255553,4,792,sh,0)

inst_123:
// rs2_val == -4398046511105, 
// opcode: sh; op1:x10; op2:x11; op2val:-4398046511105; immval:3; align:0
TEST_STORE(x2,x3,0,x10,x11,-4398046511105,3,800,sh,0)

inst_124:
// rs2_val == -8796093022209, 
// opcode: sh; op1:x10; op2:x11; op2val:-8796093022209; immval:-4; align:0
TEST_STORE(x2,x3,0,x10,x11,-8796093022209,-4,808,sh,0)

inst_125:
// rs2_val == -17592186044417, 
// opcode: sh; op1:x10; op2:x11; op2val:-17592186044417; immval:1023; align:0
TEST_STORE(x2,x3,0,x10,x11,-17592186044417,1023,816,sh,0)

inst_126:
// rs2_val == -35184372088833, 
// opcode: sh; op1:x10; op2:x11; op2val:-35184372088833; immval:2; align:0
TEST_STORE(x2,x3,0,x10,x11,-35184372088833,2,824,sh,0)

inst_127:
// rs2_val == -70368744177665, 
// opcode: sh; op1:x10; op2:x11; op2val:-70368744177665; immval:7; align:0
TEST_STORE(x2,x3,0,x10,x11,-70368744177665,7,832,sh,0)

inst_128:
// rs2_val == -140737488355329, 
// opcode: sh; op1:x10; op2:x11; op2val:-140737488355329; immval:1; align:0
TEST_STORE(x2,x3,0,x10,x11,-140737488355329,1,840,sh,0)

inst_129:
// rs2_val == -281474976710657, 
// opcode: sh; op1:x10; op2:x11; op2val:-281474976710657; immval:5; align:0
TEST_STORE(x2,x3,0,x10,x11,-281474976710657,5,848,sh,0)

inst_130:
// rs2_val == -562949953421313, 
// opcode: sh; op1:x10; op2:x11; op2val:-562949953421313; immval:-1366; align:0
TEST_STORE(x2,x3,0,x10,x11,-562949953421313,-1366,856,sh,0)

inst_131:
// rs2_val == 16, 
// opcode: sh; op1:x10; op2:x11; op2val:16; immval:7; align:0
TEST_STORE(x2,x3,0,x10,x11,16,7,864,sh,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 109*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
