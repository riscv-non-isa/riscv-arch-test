
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 07:37:26 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64i.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srl instruction of the RISC-V i extension for the srl covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64i")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",srl)

RVTEST_SIGBASE( x3,signature_x3_1)

inst_0:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x21, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val==-3037000499
// opcode: srl ; op1:x12; op2:x12; dest:x21; op1val:-3037000499;  op2val:14
TEST_RR_OP(srl, x21, x12, x12, 0x12bec, -3037000499, 14, x3, 0, x13)

inst_1:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 17592186044416
// opcode: srl ; op1:x17; op2:x17; dest:x17; op1val:17592186044416;  op2val:10
TEST_RR_OP(srl, x17, x17, x17, 0x0, 17592186044416, 10, x3, 8, x13)

inst_2:
// rs1 == rd != rs2, rs1==x26, rs2==x25, rd==x26, rs1_val < 0 and rs2_val == 0, rs1_val == -131073
// opcode: srl ; op1:x26; op2:x25; dest:x26; op1val:-131073;  op2val:0
TEST_RR_OP(srl, x26, x26, x25, 0xfffdffff, -131073, 0, x3, 16, x13)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x6, rd==x30, rs1_val > 0 and rs2_val == 0, rs1_val == 134217728
// opcode: srl ; op1:x25; op2:x6; dest:x30; op1val:134217728;  op2val:0
TEST_RR_OP(srl, x30, x25, x6, 0x8000000, 134217728, 0, x3, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x8, rd==x8, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, 
// opcode: srl ; op1:x4; op2:x8; dest:x8; op1val:7;  op2val:7
TEST_RR_OP(srl, x8, x4, x8, 0x0, 7, 7, x3, 32, x13)

inst_5:
// rs1==x6, rs2==x1, rd==x10, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -9223372036854775808, rs2_val == 16
// opcode: srl ; op1:x6; op2:x1; dest:x10; op1val:-9223372036854775808;  op2val:16
TEST_RR_OP(srl, x10, x6, x1, 0x0, -9223372036854775808, 16, x3, 40, x13)

inst_6:
// rs1==x14, rs2==x9, rd==x22, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs2_val == 47, rs1_val==0
// opcode: srl ; op1:x14; op2:x9; dest:x22; op1val:0;  op2val:47
TEST_RR_OP(srl, x22, x14, x9, 0x0, 0, 47, x3, 48, x13)

inst_7:
// rs1==x16, rs2==x24, rd==x28, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 9223372036854775807, rs2_val == 8
// opcode: srl ; op1:x16; op2:x24; dest:x28; op1val:9223372036854775807;  op2val:8
TEST_RR_OP(srl, x28, x16, x24, 0xffffff, 9223372036854775807, 8, x3, 56, x13)

inst_8:
// rs1==x18, rs2==x7, rd==x27, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1
// opcode: srl ; op1:x18; op2:x7; dest:x27; op1val:1;  op2val:17
TEST_RR_OP(srl, x27, x18, x7, 0x0, 1, 17, x3, 64, x13)

inst_9:
// rs1==x30, rs2==x19, rd==x2, rs1_val == 2, rs1_val==2
// opcode: srl ; op1:x30; op2:x19; dest:x2; op1val:2;  op2val:18
TEST_RR_OP(srl, x2, x30, x19, 0x0, 2, 18, x3, 72, x13)

inst_10:
// rs1==x23, rs2==x16, rd==x24, rs1_val == 4, rs2_val == 2, rs1_val==4
// opcode: srl ; op1:x23; op2:x16; dest:x24; op1val:4;  op2val:2
TEST_RR_OP(srl, x24, x23, x16, 0x1, 4, 2, x3, 80, x13)

inst_11:
// rs1==x29, rs2==x5, rd==x11, rs1_val == 8, 
// opcode: srl ; op1:x29; op2:x5; dest:x11; op1val:8;  op2val:13
TEST_RR_OP(srl, x11, x29, x5, 0x0, 8, 13, x3, 88, x13)

inst_12:
// rs1==x22, rs2==x10, rd==x20, rs1_val == 16, 
// opcode: srl ; op1:x22; op2:x10; dest:x20; op1val:16;  op2val:0
TEST_RR_OP(srl, x20, x22, x10, 0x10, 16, 0, x3, 96, x13)

inst_13:
// rs1==x21, rs2==x28, rd==x9, rs1_val == 32, 
// opcode: srl ; op1:x21; op2:x28; dest:x9; op1val:32;  op2val:13
TEST_RR_OP(srl, x9, x21, x28, 0x0, 32, 13, x3, 104, x17)

inst_14:
// rs1==x19, rs2==x4, rd==x29, rs1_val == 64, 
// opcode: srl ; op1:x19; op2:x4; dest:x29; op1val:64;  op2val:14
TEST_RR_OP(srl, x29, x19, x4, 0x0, 64, 14, x3, 112, x17)

inst_15:
// rs1==x9, rs2==x27, rd==x13, rs1_val == 128, 
// opcode: srl ; op1:x9; op2:x27; dest:x13; op1val:128;  op2val:9
TEST_RR_OP(srl, x13, x9, x27, 0x0, 128, 9, x3, 120, x17)
RVTEST_SIGBASE( x9,signature_x9_0)

inst_16:
// rs1==x28, rs2==x2, rd==x7, rs1_val == 256, 
// opcode: srl ; op1:x28; op2:x2; dest:x7; op1val:256;  op2val:0
TEST_RR_OP(srl, x7, x28, x2, 0x100, 256, 0, x9, 0, x17)

inst_17:
// rs1==x11, rs2==x31, rd==x14, rs1_val == 512, 
// opcode: srl ; op1:x11; op2:x31; dest:x14; op1val:512;  op2val:10
TEST_RR_OP(srl, x14, x11, x31, 0x0, 512, 10, x9, 8, x17)

inst_18:
// rs1==x27, rs2==x0, rd==x3, rs1_val == 1024, rs2_val == 59
// opcode: srl ; op1:x27; op2:x0; dest:x3; op1val:1024;  op2val:59
TEST_RR_OP(srl, x3, x27, x0, 0x0, 1024, 59, x9, 16, x17)

inst_19:
// rs1==x2, rs2==x30, rd==x18, rs1_val == 2048, 
// opcode: srl ; op1:x2; op2:x30; dest:x18; op1val:2048;  op2val:47
TEST_RR_OP(srl, x18, x2, x30, 0x0, 2048, 47, x9, 24, x17)

inst_20:
// rs1==x13, rs2==x18, rd==x1, rs1_val == 4096, rs2_val == 62
// opcode: srl ; op1:x13; op2:x18; dest:x1; op1val:4096;  op2val:62
TEST_RR_OP(srl, x1, x13, x18, 0x0, 4096, 62, x9, 32, x17)

inst_21:
// rs1==x3, rs2==x14, rd==x16, rs1_val == 8192, 
// opcode: srl ; op1:x3; op2:x14; dest:x16; op1val:8192;  op2val:5
TEST_RR_OP(srl, x16, x3, x14, 0x100, 8192, 5, x9, 40, x17)

inst_22:
// rs1==x7, rs2==x23, rd==x0, rs1_val == 16384, 
// opcode: srl ; op1:x7; op2:x23; dest:x0; op1val:16384;  op2val:11
TEST_RR_OP(srl, x0, x7, x23, 0x8, 16384, 11, x9, 48, x17)

inst_23:
// rs1==x5, rs2==x22, rd==x4, rs1_val == 32768, 
// opcode: srl ; op1:x5; op2:x22; dest:x4; op1val:32768;  op2val:18
TEST_RR_OP(srl, x4, x5, x22, 0x0, 32768, 18, x9, 56, x17)

inst_24:
// rs1==x0, rs2==x29, rd==x15, rs1_val == 65536, 
// opcode: srl ; op1:x0; op2:x29; dest:x15; op1val:65536;  op2val:17
TEST_RR_OP(srl, x15, x0, x29, 0x0, 65536, 17, x9, 64, x17)

inst_25:
// rs1==x24, rs2==x13, rd==x19, rs1_val == 131072, 
// opcode: srl ; op1:x24; op2:x13; dest:x19; op1val:131072;  op2val:16
TEST_RR_OP(srl, x19, x24, x13, 0x2, 131072, 16, x9, 72, x17)

inst_26:
// rs1==x8, rs2==x21, rd==x23, rs1_val == 262144, 
// opcode: srl ; op1:x8; op2:x21; dest:x23; op1val:262144;  op2val:11
TEST_RR_OP(srl, x23, x8, x21, 0x80, 262144, 11, x9, 80, x17)

inst_27:
// rs1==x1, rs2==x11, rd==x12, rs1_val == 524288, 
// opcode: srl ; op1:x1; op2:x11; dest:x12; op1val:524288;  op2val:62
TEST_RR_OP(srl, x12, x1, x11, 0x0, 524288, 62, x9, 88, x17)

inst_28:
// rs1==x15, rs2==x26, rd==x6, rs1_val == 1048576, 
// opcode: srl ; op1:x15; op2:x26; dest:x6; op1val:1048576;  op2val:14
TEST_RR_OP(srl, x6, x15, x26, 0x40, 1048576, 14, x9, 96, x17)

inst_29:
// rs1==x10, rs2==x15, rd==x5, rs1_val == 2097152, 
// opcode: srl ; op1:x10; op2:x15; dest:x5; op1val:2097152;  op2val:5
TEST_RR_OP(srl, x5, x10, x15, 0x10000, 2097152, 5, x9, 104, x17)

inst_30:
// rs1==x31, rs2==x20, rd==x25, rs1_val == 4194304, 
// opcode: srl ; op1:x31; op2:x20; dest:x25; op1val:4194304;  op2val:7
TEST_RR_OP(srl, x25, x31, x20, 0x8000, 4194304, 7, x9, 112, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_31:
// rs1==x20, rs2==x3, rd==x31, rs1_val == 8388608, 
// opcode: srl ; op1:x20; op2:x3; dest:x31; op1val:8388608;  op2val:15
TEST_RR_OP(srl, x31, x20, x3, 0x100, 8388608, 15, x1, 0, x2)

inst_32:
// rs1_val == 16777216, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:5
TEST_RR_OP(srl, x12, x10, x11, 0x80000, 16777216, 5, x1, 8, x2)

inst_33:
// rs1_val == 33554432, rs2_val == 4
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0x200000, 33554432, 4, x1, 16, x2)

inst_34:
// rs1_val == 67108864, rs2_val == 1
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x2000000, 67108864, 1, x1, 24, x2)

inst_35:
// rs1_val == 268435456, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x200000, 268435456, 7, x1, 32, x2)

inst_36:
// rs1_val == 536870912, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:15
TEST_RR_OP(srl, x12, x10, x11, 0x4000, 536870912, 15, x1, 40, x2)

inst_37:
// rs1_val == 1073741824, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:5
TEST_RR_OP(srl, x12, x10, x11, 0x2000000, 1073741824, 5, x1, 48, x2)

inst_38:
// rs1_val == 2147483648, rs2_val == 55
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:55
TEST_RR_OP(srl, x12, x10, x11, 0x100, 2147483648, 55, x1, 56, x2)

inst_39:
// rs1_val == 4294967296, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x0, 4294967296, 19, x1, 64, x2)

inst_40:
// rs1_val == 8589934592, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:16
TEST_RR_OP(srl, x12, x10, x11, 0x0, 8589934592, 16, x1, 72, x2)

inst_41:
// rs1_val == 17179869184, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:47
TEST_RR_OP(srl, x12, x10, x11, 0x0, 17179869184, 47, x1, 80, x2)

inst_42:
// rs1_val == 34359738368, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:15
TEST_RR_OP(srl, x12, x10, x11, 0x0, 34359738368, 15, x1, 88, x2)

inst_43:
// rs1_val == 68719476736, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:13
TEST_RR_OP(srl, x12, x10, x11, 0x0, 68719476736, 13, x1, 96, x2)

inst_44:
// rs1_val == 137438953472, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x0, 137438953472, 11, x1, 104, x2)

inst_45:
// rs1_val == 274877906944, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:16
TEST_RR_OP(srl, x12, x10, x11, 0x0, 274877906944, 16, x1, 112, x2)

inst_46:
// rs1_val == 549755813888, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:5
TEST_RR_OP(srl, x12, x10, x11, 0x0, 549755813888, 5, x1, 120, x2)

inst_47:
// rs1_val == 1099511627776, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x0, 1099511627776, 19, x1, 128, x2)

inst_48:
// rs1_val == 2199023255552, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x0, 2199023255552, 11, x1, 136, x2)

inst_49:
// rs1_val == 4398046511104, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:47
TEST_RR_OP(srl, x12, x10, x11, 0x0, 4398046511104, 47, x1, 144, x2)

inst_50:
// rs1_val == 8796093022208, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x0, 8796093022208, 19, x1, 152, x2)

inst_51:
// rs1_val == 35184372088832, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x0, 35184372088832, 7, x1, 160, x2)

inst_52:
// rs1_val == 70368744177664, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:14
TEST_RR_OP(srl, x12, x10, x11, 0x0, 70368744177664, 14, x1, 168, x2)

inst_53:
// rs1_val == 140737488355328, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0x0, 140737488355328, 4, x1, 176, x2)

inst_54:
// rs1_val == 281474976710656, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0x0, 281474976710656, 4, x1, 184, x2)

inst_55:
// rs1_val == 562949953421312, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:62
TEST_RR_OP(srl, x12, x10, x11, 0x0, 562949953421312, 62, x1, 192, x2)

inst_56:
// rs1_val == 1125899906842624, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:3
TEST_RR_OP(srl, x12, x10, x11, 0x0, 1125899906842624, 3, x1, 200, x2)

inst_57:
// rs1_val == 2251799813685248, rs2_val == 32
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:32
TEST_RR_OP(srl, x12, x10, x11, 0x0, 2251799813685248, 32, x1, 208, x2)

inst_58:
// rs1_val == 4503599627370496, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:47
TEST_RR_OP(srl, x12, x10, x11, 0x0, 4503599627370496, 47, x1, 216, x2)

inst_59:
// rs1_val == 9007199254740992, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:47
TEST_RR_OP(srl, x12, x10, x11, 0x0, 9007199254740992, 47, x1, 224, x2)

inst_60:
// rs1_val == 18014398509481984, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x0, 18014398509481984, 2, x1, 232, x2)

inst_61:
// rs1_val == 36028797018963968, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x0, 36028797018963968, 1, x1, 240, x2)

inst_62:
// rs1_val == 72057594037927936, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x0, 72057594037927936, 19, x1, 248, x2)

inst_63:
// rs1_val == 144115188075855872, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:18
TEST_RR_OP(srl, x12, x10, x11, 0x0, 144115188075855872, 18, x1, 256, x2)

inst_64:
// rs1_val == 288230376151711744, rs2_val == 42
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:42
TEST_RR_OP(srl, x12, x10, x11, 0x0, 288230376151711744, 42, x1, 264, x2)

inst_65:
// rs1_val == 576460752303423488, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x0, 576460752303423488, 17, x1, 272, x2)

inst_66:
// rs1_val == 1152921504606846976, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:18
TEST_RR_OP(srl, x12, x10, x11, 0x0, 1152921504606846976, 18, x1, 280, x2)

inst_67:
// rs1_val == 2305843009213693952, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:42
TEST_RR_OP(srl, x12, x10, x11, 0x0, 2305843009213693952, 42, x1, 288, x2)

inst_68:
// rs1_val == 4611686018427387904, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x0, 4611686018427387904, 17, x1, 296, x2)

inst_69:
// rs1_val == -2, rs2_val == 21
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:21
TEST_RR_OP(srl, x12, x10, x11, 0x7ff, -2, 21, x1, 304, x2)

inst_70:
// rs1_val == -3, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:9
TEST_RR_OP(srl, x12, x10, x11, 0x7fffff, -3, 9, x1, 312, x2)

inst_71:
// rs1_val == -5, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:18
TEST_RR_OP(srl, x12, x10, x11, 0x3fff, -5, 18, x1, 320, x2)

inst_72:
// rs1_val == -9, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x1fff, -9, 19, x1, 328, x2)

inst_73:
// rs1_val == -17, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x1fff, -17, 19, x1, 336, x2)

inst_74:
// rs1_val == -33, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:3
TEST_RR_OP(srl, x12, x10, x11, 0x1ffffffb, -33, 3, x1, 344, x2)

inst_75:
// rs1_val == -65, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:16
TEST_RR_OP(srl, x12, x10, x11, 0xffff, -65, 16, x1, 352, x2)

inst_76:
// rs1_val == -129, rs2_val == 31
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:31
TEST_RR_OP(srl, x12, x10, x11, 0x1, -129, 31, x1, 360, x2)

inst_77:
// rs1_val == -257, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x1fff, -257, 19, x1, 368, x2)

inst_78:
// rs1_val == -513, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:8
TEST_RR_OP(srl, x12, x10, x11, 0xfffffd, -513, 8, x1, 376, x2)

inst_79:
// rs1_val == -1025, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x1fffff, -1025, 11, x1, 384, x2)

inst_80:
// rs1_val == -2049, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:14
TEST_RR_OP(srl, x12, x10, x11, 0x3ffff, -2049, 14, x1, 392, x2)

inst_81:
// rs1_val == -4097, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:8
TEST_RR_OP(srl, x12, x10, x11, 0xffffef, -4097, 8, x1, 400, x2)

inst_82:
// rs1_val == -8193, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:59
TEST_RR_OP(srl, x12, x10, x11, 0x1f, -8193, 59, x1, 408, x2)

inst_83:
// rs1_val == -16385, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0xffffbff, -16385, 4, x1, 416, x2)

inst_84:
// rs1_val == -32769, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:31
TEST_RR_OP(srl, x12, x10, x11, 0x1, -32769, 31, x1, 424, x2)

inst_85:
// rs1_val == -65537, rs2_val == 61
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:61
TEST_RR_OP(srl, x12, x10, x11, 0x7, -65537, 61, x1, 432, x2)

inst_86:
// rs1_val == -262145, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:8
TEST_RR_OP(srl, x12, x10, x11, 0xfffbff, -262145, 8, x1, 440, x2)

inst_87:
// rs1_val == -524289, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:62
TEST_RR_OP(srl, x12, x10, x11, 0x3, -524289, 62, x1, 448, x2)

inst_88:
// rs1_val == -36028797018963969, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:62
TEST_RR_OP(srl, x12, x10, x11, 0x3, -36028797018963969, 62, x1, 456, x2)

inst_89:
// rs1_val == -72057594037927937, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:59
TEST_RR_OP(srl, x12, x10, x11, 0x1f, -72057594037927937, 59, x1, 464, x2)

inst_90:
// rs1_val == -144115188075855873, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x3fffffff, -144115188075855873, 2, x1, 472, x2)

inst_91:
// rs1_val == -288230376151711745, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:10
TEST_RR_OP(srl, x12, x10, x11, 0x3fffff, -288230376151711745, 10, x1, 480, x2)

inst_92:
// rs1_val == -576460752303423489, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:61
TEST_RR_OP(srl, x12, x10, x11, 0x7, -576460752303423489, 61, x1, 488, x2)

inst_93:
// rs1_val == -1152921504606846977, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:6
TEST_RR_OP(srl, x12, x10, x11, 0x3ffffff, -1152921504606846977, 6, x1, 496, x2)

inst_94:
// rs1_val == -2305843009213693953, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:15
TEST_RR_OP(srl, x12, x10, x11, 0x1ffff, -2305843009213693953, 15, x1, 504, x2)

inst_95:
// rs1_val == -4611686018427387905, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0xfffffff, -4611686018427387905, 4, x1, 512, x2)

inst_96:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:31
TEST_RR_OP(srl, x12, x10, x11, 0x0, 6148914691236517205, 31, x1, 520, x2)

inst_97:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:16
TEST_RR_OP(srl, x12, x10, x11, 0xaaaa, -6148914691236517206, 16, x1, 528, x2)

inst_98:
// rs1_val==3, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x0, 3, 7, x1, 536, x2)

inst_99:
// rs1_val==5, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:59
TEST_RR_OP(srl, x12, x10, x11, 0x0, 5, 59, x1, 544, x2)

inst_100:
// rs1_val==3689348814741910323, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910323;  op2val:61
TEST_RR_OP(srl, x12, x10, x11, 0x1, 3689348814741910323, 61, x1, 552, x2)

inst_101:
// rs1_val==7378697629483820646, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820646;  op2val:6
TEST_RR_OP(srl, x12, x10, x11, 0x1999999, 7378697629483820646, 6, x1, 560, x2)

inst_102:
// rs1_val==3037000499, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:3037000499;  op2val:62
TEST_RR_OP(srl, x12, x10, x11, 0x2, 3037000499, 62, x1, 568, x2)

inst_103:
// rs1_val==6148914691236517204, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517204;  op2val:47
TEST_RR_OP(srl, x12, x10, x11, 0xaaaa, 6148914691236517204, 47, x1, 576, x2)

inst_104:
// rs1_val==3689348814741910322, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910322;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0x3333333, 3689348814741910322, 4, x1, 584, x2)

inst_105:
// rs1_val==7378697629483820645, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820645;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x3333, 7378697629483820645, 17, x1, 592, x2)

inst_106:
// rs1_val==3037000498, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:3037000498;  op2val:15
TEST_RR_OP(srl, x12, x10, x11, 0x16a09, 3037000498, 15, x1, 600, x2)

inst_107:
// rs1_val==6148914691236517206, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517206;  op2val:6
TEST_RR_OP(srl, x12, x10, x11, 0x1555555, 6148914691236517206, 6, x1, 608, x2)

inst_108:
// rs1_val==-6148914691236517205, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517205;  op2val:55
TEST_RR_OP(srl, x12, x10, x11, 0x155, -6148914691236517205, 55, x1, 616, x2)

inst_109:
// rs1_val==6, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:32
TEST_RR_OP(srl, x12, x10, x11, 0x6, 6, 32, x1, 624, x2)

inst_110:
// rs1_val==3689348814741910324, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:3689348814741910324;  op2val:15
TEST_RR_OP(srl, x12, x10, x11, 0x6666, 3689348814741910324, 15, x1, 632, x2)

inst_111:
// rs1_val==7378697629483820647, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:7378697629483820647;  op2val:18
TEST_RR_OP(srl, x12, x10, x11, 0x1999, 7378697629483820647, 18, x1, 640, x2)

inst_112:
// rs1_val==-3037000498, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-3037000498;  op2val:21
TEST_RR_OP(srl, x12, x10, x11, 0x257, -3037000498, 21, x1, 648, x2)

inst_113:
// rs1_val==3037000500, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:3037000500;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0xb504f33, 3037000500, 4, x1, 656, x2)

inst_114:
// rs1_val == -1048577, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:12
TEST_RR_OP(srl, x12, x10, x11, 0xffeff, -1048577, 12, x1, 664, x2)

inst_115:
// rs1_val == -2097153, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x1ffb, -2097153, 19, x1, 672, x2)

inst_116:
// rs1_val == -4194305, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x1ff7fff, -4194305, 7, x1, 680, x2)

inst_117:
// rs1_val == -8388609, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:21
TEST_RR_OP(srl, x12, x10, x11, 0x7fb, -8388609, 21, x1, 688, x2)

inst_118:
// rs1_val == -16777217, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:14
TEST_RR_OP(srl, x12, x10, x11, 0x3fbff, -16777217, 14, x1, 696, x2)

inst_119:
// rs1_val == -33554433, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:5
TEST_RR_OP(srl, x12, x10, x11, 0x7efffff, -33554433, 5, x1, 704, x2)

inst_120:
// rs1_val == -67108865, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:55
TEST_RR_OP(srl, x12, x10, x11, 0x1f7, -67108865, 55, x1, 712, x2)

inst_121:
// rs1_val == -134217729, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:8
TEST_RR_OP(srl, x12, x10, x11, 0xf7ffff, -134217729, 8, x1, 720, x2)

inst_122:
// rs1_val == -268435457, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:14
TEST_RR_OP(srl, x12, x10, x11, 0x3bfff, -268435457, 14, x1, 728, x2)

inst_123:
// rs1_val == -536870913, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:6
TEST_RR_OP(srl, x12, x10, x11, 0x37fffff, -536870913, 6, x1, 736, x2)

inst_124:
// rs1_val == -1073741825, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:14
TEST_RR_OP(srl, x12, x10, x11, 0x2ffff, -1073741825, 14, x1, 744, x2)

inst_125:
// rs1_val == -2147483649, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0xfffff, -2147483649, 11, x1, 752, x2)

inst_126:
// rs1_val == -4294967297, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:6
TEST_RR_OP(srl, x12, x10, x11, 0x3ffffff, -4294967297, 6, x1, 760, x2)

inst_127:
// rs1_val == -8589934593, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:21
TEST_RR_OP(srl, x12, x10, x11, 0x7ff, -8589934593, 21, x1, 768, x2)

inst_128:
// rs1_val == -17179869185, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x1fffff, -17179869185, 11, x1, 776, x2)

inst_129:
// rs1_val == -34359738369, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x1ffffff, -34359738369, 7, x1, 784, x2)

inst_130:
// rs1_val == -68719476737, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:15
TEST_RR_OP(srl, x12, x10, x11, 0x1ffff, -68719476737, 15, x1, 792, x2)

inst_131:
// rs1_val == -137438953473, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:12
TEST_RR_OP(srl, x12, x10, x11, 0xfffff, -137438953473, 12, x1, 800, x2)

inst_132:
// rs1_val == -274877906945, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:32
TEST_RR_OP(srl, x12, x10, x11, 0xffffffff, -274877906945, 32, x1, 808, x2)

inst_133:
// rs1_val == -549755813889, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:21
TEST_RR_OP(srl, x12, x10, x11, 0x7ff, -549755813889, 21, x1, 816, x2)

inst_134:
// rs1_val == -1099511627777, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:3
TEST_RR_OP(srl, x12, x10, x11, 0x1fffffff, -1099511627777, 3, x1, 824, x2)

inst_135:
// rs1_val == -2199023255553, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x7fff, -2199023255553, 17, x1, 832, x2)

inst_136:
// rs1_val == -4398046511105, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:55
TEST_RR_OP(srl, x12, x10, x11, 0x1ff, -4398046511105, 55, x1, 840, x2)

inst_137:
// rs1_val == -8796093022209, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:31
TEST_RR_OP(srl, x12, x10, x11, 0x1, -8796093022209, 31, x1, 848, x2)

inst_138:
// rs1_val == -17592186044417, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:9
TEST_RR_OP(srl, x12, x10, x11, 0x7fffff, -17592186044417, 9, x1, 856, x2)

inst_139:
// rs1_val == -35184372088833, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:59
TEST_RR_OP(srl, x12, x10, x11, 0x1f, -35184372088833, 59, x1, 864, x2)

inst_140:
// rs1_val == -70368744177665, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x3fffffff, -70368744177665, 2, x1, 872, x2)

inst_141:
// rs1_val == -140737488355329, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:3
TEST_RR_OP(srl, x12, x10, x11, 0x1fffffff, -140737488355329, 3, x1, 880, x2)

inst_142:
// rs1_val == -281474976710657, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:9
TEST_RR_OP(srl, x12, x10, x11, 0x7fffff, -281474976710657, 9, x1, 888, x2)

inst_143:
// rs1_val == -562949953421313, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x7fffffff, -562949953421313, 1, x1, 896, x2)

inst_144:
// rs1_val == -1125899906842625, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x1fff, -1125899906842625, 19, x1, 904, x2)

inst_145:
// rs1_val == -2251799813685249, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x3fffffff, -2251799813685249, 2, x1, 912, x2)

inst_146:
// rs1_val == -4503599627370497, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x7fffffff, -4503599627370497, 1, x1, 920, x2)

inst_147:
// rs1_val == -9007199254740993, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x3fffffff, -9007199254740993, 2, x1, 928, x2)

inst_148:
// rs1_val == -18014398509481985, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:55
TEST_RR_OP(srl, x12, x10, x11, 0x1ff, -18014398509481985, 55, x1, 936, x2)

inst_149:
// rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val==-3037000499
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-3037000499;  op2val:14
TEST_RR_OP(srl, x12, x10, x11, 0x12bec, -3037000499, 14, x1, 944, x2)

inst_150:
// rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 17592186044416
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:10
TEST_RR_OP(srl, x12, x10, x11, 0x0, 17592186044416, 10, x1, 952, x2)

inst_151:
// rs1_val == 1024, rs2_val == 59
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:59
TEST_RR_OP(srl, x12, x10, x11, 0x0, 1024, 59, x1, 960, x2)

inst_152:
// rs1_val == 16384, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x8, 16384, 11, x1, 968, x2)

inst_153:
// rs1_val == 65536, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x0, 65536, 17, x1, 976, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 123*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
