 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:29 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64im.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the div instruction of the RISC-V M extension for the div covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64IM")

.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*M.*);def TEST_CASE_1=True;",div)

RVTEST_SIGBASE( x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x5, rs2==x28, rd==x5, rs1_val == (-2**(xlen-1)), rs2_val == 18014398509481984, rs1_val < 0 and rs2_val > 0, rs1_val == -9223372036854775808, rs1_val != rs2_val
// opcode: div ; op1:x5; op2:x28; dest:x5; op1val:-9223372036854775808;  op2val:18014398509481984
TEST_RR_OP(div, x5, x5, x28, 0x0000000000000000, -9223372036854775808, 18014398509481984, x12, 0, x14)

inst_1:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x22, rs1_val == 0, rs2_val == 549755813888
// opcode: div ; op1:x23; op2:x23; dest:x22; op1val:0;  op2val:549755813888
TEST_RR_OP(div, x22, x23, x23, 0x0000000000000000, 0, 549755813888, x12, 8, x14)

inst_2:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs2_val == 16, rs1_val == 9223372036854775807
// opcode: div ; op1:x1; op2:x1; dest:x1; op1val:9223372036854775807;  op2val:16
TEST_RR_OP(div, x1, x1, x1, 0x0000000000000000, 9223372036854775807, 16, x12, 16, x14)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x19, rd==x26, rs1_val == 1, rs1_val > 0 and rs2_val < 0, rs2_val == -6148914691236517206
// opcode: div ; op1:x20; op2:x19; dest:x26; op1val:1;  op2val:-6148914691236517206
TEST_RR_OP(div, x26, x20, x19, 0x0000000000000000, 1, -6148914691236517206, x12, 24, x14)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x13, rd==x13, rs2_val == (-2**(xlen-1)), rs1_val == -4097, rs1_val < 0 and rs2_val < 0, rs2_val == -9223372036854775808
// opcode: div ; op1:x9; op2:x13; dest:x13; op1val:-4097;  op2val:-9223372036854775808
TEST_RR_OP(div, x13, x9, x13, 0x0000000000000000, -4097, -9223372036854775808, x12, 32, x14)

inst_5:
// rs1==x29, rs2==x16, rd==x6, rs2_val == 0, rs1_val == -513
// opcode: div ; op1:x29; op2:x16; dest:x6; op1val:-513;  op2val:0
TEST_RR_OP(div, x6, x29, x16, 0x0000000000000000, -513, 0, x12, 40, x14)

inst_6:
// rs1==x22, rs2==x8, rd==x3, rs2_val == (2**(xlen-1)-1), rs1_val == 4096, rs2_val == 9223372036854775807
// opcode: div ; op1:x22; op2:x8; dest:x3; op1val:4096;  op2val:9223372036854775807
TEST_RR_OP(div, x3, x22, x8, 0x0000000000000000, 4096, 9223372036854775807, x12, 48, x14)

inst_7:
// rs1==x19, rs2==x18, rd==x28, rs2_val == 1, rs1_val == 4194304
// opcode: div ; op1:x19; op2:x18; dest:x28; op1val:4194304;  op2val:1
TEST_RR_OP(div, x28, x19, x18, 0x0000000000000000, 4194304, 1, x12, 56, x14)

inst_8:
// rs1==x31, rs2==x2, rd==x20, rs1_val == rs2_val, rs1_val == 4294967296, rs2_val == 4294967296
// opcode: div ; op1:x31; op2:x2; dest:x20; op1val:4294967296;  op2val:4294967296
TEST_RR_OP(div, x20, x31, x2, 0x0000000000000000, 4294967296, 4294967296, x12, 64, x14)

inst_9:
// rs1==x24, rs2==x10, rd==x27, rs1_val == 2, rs2_val == -288230376151711745
// opcode: div ; op1:x24; op2:x10; dest:x27; op1val:2;  op2val:-288230376151711745
TEST_RR_OP(div, x27, x24, x10, 0x0000000000000000, 2, -288230376151711745, x12, 72, x14)

inst_10:
// rs1==x11, rs2==x21, rd==x24, rs1_val == 4, rs2_val == 274877906944
// opcode: div ; op1:x11; op2:x21; dest:x24; op1val:4;  op2val:274877906944
TEST_RR_OP(div, x24, x11, x21, 0x0000000000000000, 4, 274877906944, x12, 80, x14)

inst_11:
// rs1==x27, rs2==x7, rd==x0, rs1_val == 8, 
// opcode: div ; op1:x27; op2:x7; dest:x0; op1val:8;  op2val:-1
TEST_RR_OP(div, x0, x27, x7, 0x0000000000000000, 8, -1, x12, 88, x14)

inst_12:
// rs1==x4, rs2==x20, rd==x7, rs1_val == 16, rs2_val == 137438953472
// opcode: div ; op1:x4; op2:x20; dest:x7; op1val:16;  op2val:137438953472
TEST_RR_OP(div, x7, x4, x20, 0x0000000000000000, 16, 137438953472, x12, 96, x14)

inst_13:
// rs1==x28, rs2==x17, rd==x29, rs1_val == 32, rs2_val == -5
// opcode: div ; op1:x28; op2:x17; dest:x29; op1val:32;  op2val:-5
TEST_RR_OP(div, x29, x28, x17, 0x0000000000000000, 32, -5, x12, 104, x14)

inst_14:
// rs1==x17, rs2==x25, rd==x9, rs1_val == 64, rs2_val == 268435456
// opcode: div ; op1:x17; op2:x25; dest:x9; op1val:64;  op2val:268435456
TEST_RR_OP(div, x9, x17, x25, 0x0000000000000000, 64, 268435456, x12, 112, x14)

inst_15:
// rs1==x16, rs2==x3, rd==x31, rs1_val == 128, 
// opcode: div ; op1:x16; op2:x3; dest:x31; op1val:128;  op2val:3
TEST_RR_OP(div, x31, x16, x3, 0x0000000000000000, 128, 3, x12, 120, x19)

inst_16:
// rs1==x13, rs2==x30, rd==x4, rs1_val == 256, rs2_val == -2147483649
// opcode: div ; op1:x13; op2:x30; dest:x4; op1val:256;  op2val:-2147483649
TEST_RR_OP(div, x4, x13, x30, 0x0000000000000000, 256, -2147483649, x12, 128, x19)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_17:
// rs1==x3, rs2==x5, rd==x11, rs1_val == 512, rs2_val == -2097153
// opcode: div ; op1:x3; op2:x5; dest:x11; op1val:512;  op2val:-2097153
TEST_RR_OP(div, x11, x3, x5, 0x0000000000000000, 512, -2097153, x1, 0, x19)

inst_18:
// rs1==x7, rs2==x31, rd==x18, rs1_val == 1024, 
// opcode: div ; op1:x7; op2:x31; dest:x18; op1val:1024;  op2val:-1
TEST_RR_OP(div, x18, x7, x31, 0x0000000000000000, 1024, -1, x1, 8, x19)

inst_19:
// rs1==x12, rs2==x9, rd==x23, rs1_val == 2048, rs2_val == -35184372088833
// opcode: div ; op1:x12; op2:x9; dest:x23; op1val:2048;  op2val:-35184372088833
TEST_RR_OP(div, x23, x12, x9, 0x0000000000000000, 2048, -35184372088833, x1, 16, x19)

inst_20:
// rs1==x26, rs2==x14, rd==x25, rs1_val == 8192, rs2_val == 6148914691236517205
// opcode: div ; op1:x26; op2:x14; dest:x25; op1val:8192;  op2val:6148914691236517205
TEST_RR_OP(div, x25, x26, x14, 0x0000000000000000, 8192, 6148914691236517205, x1, 24, x19)

inst_21:
// rs1==x6, rs2==x27, rd==x30, rs1_val == 16384, rs2_val == -32769
// opcode: div ; op1:x6; op2:x27; dest:x30; op1val:16384;  op2val:-32769
TEST_RR_OP(div, x30, x6, x27, 0x0000000000000000, 16384, -32769, x1, 32, x19)

inst_22:
// rs1==x18, rs2==x11, rd==x17, rs1_val == 32768, rs2_val == -2049
// opcode: div ; op1:x18; op2:x11; dest:x17; op1val:32768;  op2val:-2049
TEST_RR_OP(div, x17, x18, x11, 0x0000000000000000, 32768, -2049, x1, 40, x19)

inst_23:
// rs1==x0, rs2==x22, rd==x2, rs1_val == 65536, rs2_val == 36028797018963968
// opcode: div ; op1:x0; op2:x22; dest:x2; op1val:65536;  op2val:36028797018963968
TEST_RR_OP(div, x2, x0, x22, 0x0000000000000000, 65536, 36028797018963968, x1, 48, x19)

inst_24:
// rs1==x30, rs2==x6, rd==x10, rs1_val == 131072, rs2_val == 4398046511104
// opcode: div ; op1:x30; op2:x6; dest:x10; op1val:131072;  op2val:4398046511104
TEST_RR_OP(div, x10, x30, x6, 0x0000000000000000, 131072, 4398046511104, x1, 56, x19)

inst_25:
// rs1==x14, rs2==x29, rd==x15, rs1_val == 262144, rs2_val == -16777217
// opcode: div ; op1:x14; op2:x29; dest:x15; op1val:262144;  op2val:-16777217
TEST_RR_OP(div, x15, x14, x29, 0x0000000000000000, 262144, -16777217, x1, 64, x19)

inst_26:
// rs1==x2, rs2==x0, rd==x21, rs1_val == 524288, rs2_val == 512
// opcode: div ; op1:x2; op2:x0; dest:x21; op1val:524288;  op2val:512
TEST_RR_OP(div, x21, x2, x0, 0x0000000000000000, 524288, 512, x1, 72, x19)

inst_27:
// rs1==x21, rs2==x24, rd==x8, rs1_val == 1048576, rs2_val == -4611686018427387905
// opcode: div ; op1:x21; op2:x24; dest:x8; op1val:1048576;  op2val:-4611686018427387905
TEST_RR_OP(div, x8, x21, x24, 0x0000000000000000, 1048576, -4611686018427387905, x1, 80, x19)

inst_28:
// rs1==x25, rs2==x4, rd==x12, rs1_val == 2097152, rs2_val == 35184372088832
// opcode: div ; op1:x25; op2:x4; dest:x12; op1val:2097152;  op2val:35184372088832
TEST_RR_OP(div, x12, x25, x4, 0x0000000000000000, 2097152, 35184372088832, x1, 88, x2)

inst_29:
// rs1==x8, rs2==x15, rd==x14, rs1_val == 8388608, rs2_val == -65
// opcode: div ; op1:x8; op2:x15; dest:x14; op1val:8388608;  op2val:-65
TEST_RR_OP(div, x14, x8, x15, 0x0000000000000000, 8388608, -65, x1, 96, x2)

inst_30:
// rs1==x10, rs2==x12, rd==x19, rs1_val == 16777216, rs2_val == 2097152
// opcode: div ; op1:x10; op2:x12; dest:x19; op1val:16777216;  op2val:2097152
TEST_RR_OP(div, x19, x10, x12, 0x0000000000000000, 16777216, 2097152, x1, 104, x2)

inst_31:
// rs1==x15, rs2==x26, rd==x16, rs1_val == 33554432, 
// opcode: div ; op1:x15; op2:x26; dest:x16; op1val:33554432;  op2val:-6148914691236517206
TEST_RR_OP(div, x16, x15, x26, 0x0000000000000000, 33554432, -6148914691236517206, x1, 112, x2)

inst_32:
// rs1_val == 67108864, rs2_val == 68719476736
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:68719476736
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 67108864, 68719476736, x1, 120, x2)

inst_33:
// rs1_val == 134217728, rs2_val == 72057594037927936
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:72057594037927936
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 134217728, 72057594037927936, x1, 128, x2)

inst_34:
// rs1_val == 268435456, rs2_val == -576460752303423489
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:-576460752303423489
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 268435456, -576460752303423489, x1, 136, x2)

inst_35:
// rs1_val == 536870912, rs2_val == -8193
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:-8193
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 536870912, -8193, x1, 144, x2)

inst_36:
// rs1_val == 1073741824, rs2_val == -274877906945
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-274877906945
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 1073741824, -274877906945, x1, 152, x2)

inst_37:
// rs1_val == 2147483648, rs2_val == 576460752303423488
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:576460752303423488
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 2147483648, 576460752303423488, x1, 160, x2)

inst_38:
// rs1_val == 8589934592, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:3
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 8589934592, 3, x1, 168, x2)

inst_39:
// rs1_val == 17179869184, rs2_val == -68719476737
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:17179869184;  op2val:-68719476737
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 17179869184, -68719476737, x1, 176, x2)

inst_40:
// rs1_val == 34359738368, rs2_val == 67108864
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:34359738368;  op2val:67108864
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 34359738368, 67108864, x1, 184, x2)

inst_41:
// rs1_val == 68719476736, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:-10
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 68719476736, -10, x1, 192, x2)

inst_42:
// rs1_val == 137438953472, rs2_val == 131072
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:137438953472;  op2val:131072
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 137438953472, 131072, x1, 200, x2)

inst_43:
// rs1_val == 274877906944, rs2_val == -9007199254740993
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:274877906944;  op2val:-9007199254740993
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 274877906944, -9007199254740993, x1, 208, x2)

inst_44:
// rs1_val == 549755813888, rs2_val == 1125899906842624
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:549755813888;  op2val:1125899906842624
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 549755813888, 1125899906842624, x1, 216, x2)

inst_45:
// rs1_val == 1099511627776, rs2_val == -257
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:1099511627776;  op2val:-257
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 1099511627776, -257, x1, 224, x2)

inst_46:
// rs1_val == 2199023255552, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:-4611686018427387905
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 2199023255552, -4611686018427387905, x1, 232, x2)

inst_47:
// rs1_val == 4398046511104, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:4398046511104;  op2val:-32769
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 4398046511104, -32769, x1, 240, x2)

inst_48:
// rs1_val == 8796093022208, rs2_val == -134217729
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:8796093022208;  op2val:-134217729
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 8796093022208, -134217729, x1, 248, x2)

inst_49:
// rs1_val == 17592186044416, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:17592186044416;  op2val:-8193
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 17592186044416, -8193, x1, 256, x2)

inst_50:
// rs1_val == 35184372088832, rs2_val == 536870912
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:35184372088832;  op2val:536870912
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 35184372088832, 536870912, x1, 264, x2)

inst_51:
// rs1_val == 70368744177664, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:18014398509481984
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 70368744177664, 18014398509481984, x1, 272, x2)

inst_52:
// rs1_val == 140737488355328, rs2_val == 8388608
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:8388608
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 140737488355328, 8388608, x1, 280, x2)

inst_53:
// rs1_val == 281474976710656, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:8388608
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 281474976710656, 8388608, x1, 288, x2)

inst_54:
// rs1_val == 562949953421312, rs2_val == 134217728
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:562949953421312;  op2val:134217728
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 562949953421312, 134217728, x1, 296, x2)

inst_55:
// rs1_val == 1125899906842624, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:1125899906842624;  op2val:1
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 1125899906842624, 1, x1, 304, x2)

inst_56:
// rs1_val == 2251799813685248, rs2_val == -8388609
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:2251799813685248;  op2val:-8388609
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 2251799813685248, -8388609, x1, 312, x2)

inst_57:
// rs1_val == 4503599627370496, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:6148914691236517205
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 4503599627370496, 6148914691236517205, x1, 320, x2)

inst_58:
// rs1_val == 9007199254740992, rs2_val == 128
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:9007199254740992;  op2val:128
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 9007199254740992, 128, x1, 328, x2)

inst_59:
// rs1_val == 18014398509481984, rs2_val == -129
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-129
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 18014398509481984, -129, x1, 336, x2)

inst_60:
// rs1_val == 36028797018963968, rs2_val == -4194305
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:36028797018963968;  op2val:-4194305
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 36028797018963968, -4194305, x1, 344, x2)

inst_61:
// rs1_val == 72057594037927936, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-8
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 72057594037927936, -8, x1, 352, x2)

inst_62:
// rs1_val == 144115188075855872, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:144115188075855872;  op2val:549755813888
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 144115188075855872, 549755813888, x1, 360, x2)

inst_63:
// rs1_val == 288230376151711744, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:288230376151711744;  op2val:-2049
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 288230376151711744, -2049, x1, 368, x2)

inst_64:
// rs1_val == 576460752303423488, rs2_val == -33
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:576460752303423488;  op2val:-33
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 576460752303423488, -33, x1, 376, x2)

inst_65:
// rs1_val == 1152921504606846976, rs2_val == -524289
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:1152921504606846976;  op2val:-524289
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 1152921504606846976, -524289, x1, 384, x2)

inst_66:
// rs1_val == 2305843009213693952, rs2_val == 2147483648
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:2305843009213693952;  op2val:2147483648
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 2305843009213693952, 2147483648, x1, 392, x2)

inst_67:
// rs1_val == 4611686018427387904, rs2_val == -144115188075855873
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:-144115188075855873
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 4611686018427387904, -144115188075855873, x1, 400, x2)

inst_68:
// rs1_val == -2, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-2049
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2, -2049, x1, 408, x2)

inst_69:
// rs1_val == -3, rs2_val == -4398046511105
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-4398046511105
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -3, -4398046511105, x1, 416, x2)

inst_70:
// rs1_val == -5, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:35184372088832
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -5, 35184372088832, x1, 424, x2)

inst_71:
// rs1_val == -9, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-8388609
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -9, -8388609, x1, 432, x2)

inst_72:
// rs1_val == -17, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:9223372036854775807
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -17, 9223372036854775807, x1, 440, x2)

inst_73:
// rs1_val == -33, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:-5
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -33, -5, x1, 448, x2)

inst_74:
// rs1_val == -65, rs2_val == -65537
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:-65537
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -65, -65537, x1, 456, x2)

inst_75:
// rs1_val == -129, rs2_val == -1152921504606846977
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:-1152921504606846977
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -129, -1152921504606846977, x1, 464, x2)

inst_76:
// rs1_val == -257, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:549755813888
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -257, 549755813888, x1, 472, x2)

inst_77:
// rs1_val == -1025, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:-524289
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1025, -524289, x1, 480, x2)

inst_78:
// rs1_val == -2049, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:512
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2049, 512, x1, 488, x2)

inst_79:
// rs1_val == -8193, rs2_val == 281474976710656
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:281474976710656
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -8193, 281474976710656, x1, 496, x2)

inst_80:
// rs2_val == -1125899906842625, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:140737488355328;  op2val:-1125899906842625
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 140737488355328, -1125899906842625, x1, 504, x2)

inst_81:
// rs2_val == -2251799813685249, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:128;  op2val:-2251799813685249
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 128, -2251799813685249, x1, 512, x2)

inst_82:
// rs2_val == -4503599627370497, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:-4503599627370497
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 512, -4503599627370497, x1, 520, x2)

inst_83:
// rs2_val == -18014398509481985, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:-18014398509481985
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -33, -18014398509481985, x1, 528, x2)

inst_84:
// rs2_val == -36028797018963969, rs1_val == -274877906945
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:-36028797018963969
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -274877906945, -36028797018963969, x1, 536, x2)

inst_85:
// rs2_val == -72057594037927937, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-8;  op2val:-72057594037927937
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -8, -72057594037927937, x1, 544, x2)

inst_86:
// rs2_val == -2305843009213693953, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-2305843009213693953
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 18014398509481984, -2305843009213693953, x1, 552, x2)

inst_87:
// rs1_val == -16385, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:-2049
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -16385, -2049, x1, 560, x2)

inst_88:
// rs1_val == -32769, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:-65537
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -32769, -65537, x1, 568, x2)

inst_89:
// rs1_val == -65537, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-35184372088833
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -65537, -35184372088833, x1, 576, x2)

inst_90:
// rs1_val == -131073, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:9
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -131073, 9, x1, 584, x2)

inst_91:
// rs1_val == -262145, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:4398046511104
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -262145, 4398046511104, x1, 592, x2)

inst_92:
// rs1_val == -524289, rs2_val == -34359738369
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-34359738369
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -524289, -34359738369, x1, 600, x2)

inst_93:
// rs1_val == -1048577, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:36028797018963968
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1048577, 36028797018963968, x1, 608, x2)

inst_94:
// rs1_val == -2097153, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:-72057594037927937
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2097153, -72057594037927937, x1, 616, x2)

inst_95:
// rs1_val == -4194305, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:1
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4194305, 1, x1, 624, x2)

inst_96:
// rs1_val == -8388609, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:549755813888
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -8388609, 549755813888, x1, 632, x2)

inst_97:
// rs1_val == -16777217, rs2_val == 256
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:256
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -16777217, 256, x1, 640, x2)

inst_98:
// rs1_val == -33554433, rs2_val == -2
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-2
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -33554433, -2, x1, 648, x2)

inst_99:
// rs1_val == -67108865, rs2_val == -268435457
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-268435457
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -67108865, -268435457, x1, 656, x2)

inst_100:
// rs1_val == -134217729, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:2147483648
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -134217729, 2147483648, x1, 664, x2)

inst_101:
// rs1_val == -268435457, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:9223372036854775807
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -268435457, 9223372036854775807, x1, 672, x2)

inst_102:
// rs1_val == -536870913, rs2_val == 4611686018427387904
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:4611686018427387904
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -536870913, 4611686018427387904, x1, 680, x2)

inst_103:
// rs1_val == -1073741825, rs2_val == 288230376151711744
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:288230376151711744
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1073741825, 288230376151711744, x1, 688, x2)

inst_104:
// rs1_val == -2147483649, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2147483649;  op2val:268435456
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2147483649, 268435456, x1, 696, x2)

inst_105:
// rs1_val == -4294967297, rs2_val == -281474976710657
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:-281474976710657
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4294967297, -281474976710657, x1, 704, x2)

inst_106:
// rs1_val == -8589934593, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-8589934593;  op2val:549755813888
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -8589934593, 549755813888, x1, 712, x2)

inst_107:
// rs1_val == -17179869185, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-17179869185;  op2val:-6
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -17179869185, -6, x1, 720, x2)

inst_108:
// rs1_val == -34359738369, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-34359738369;  op2val:-5
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -34359738369, -5, x1, 728, x2)

inst_109:
// rs1_val == -68719476737, rs2_val == 4096
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-68719476737;  op2val:4096
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -68719476737, 4096, x1, 736, x2)

inst_110:
// rs1_val == -137438953473, rs2_val == -1025
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:-1025
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -137438953473, -1025, x1, 744, x2)

inst_111:
// rs1_val == -549755813889, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-549755813889;  op2val:-257
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -549755813889, -257, x1, 752, x2)

inst_112:
// rs1_val == -1099511627777, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1099511627777;  op2val:-2305843009213693953
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1099511627777, -2305843009213693953, x1, 760, x2)

inst_113:
// rs1_val == -2199023255553, rs2_val == 17179869184
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:17179869184
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2199023255553, 17179869184, x1, 768, x2)

inst_114:
// rs1_val == -4398046511105, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4398046511105;  op2val:-9007199254740993
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4398046511105, -9007199254740993, x1, 776, x2)

inst_115:
// rs1_val == -8796093022209, rs2_val == -8589934593
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-8796093022209;  op2val:-8589934593
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -8796093022209, -8589934593, x1, 784, x2)

inst_116:
// rs1_val == -17592186044417, rs2_val == 1152921504606846976
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-17592186044417;  op2val:1152921504606846976
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -17592186044417, 1152921504606846976, x1, 792, x2)

inst_117:
// rs1_val == -35184372088833, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:-65
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -35184372088833, -65, x1, 800, x2)

inst_118:
// rs1_val == -70368744177665, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:9
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -70368744177665, 9, x1, 808, x2)

inst_119:
// rs1_val == -140737488355329, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-140737488355329;  op2val:4096
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -140737488355329, 4096, x1, 816, x2)

inst_120:
// rs1_val == -281474976710657, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:1125899906842624
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -281474976710657, 1125899906842624, x1, 824, x2)

inst_121:
// rs1_val == -562949953421313, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-562949953421313;  op2val:35184372088832
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -562949953421313, 35184372088832, x1, 832, x2)

inst_122:
// rs1_val == -1125899906842625, rs2_val == 262144
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:262144
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1125899906842625, 262144, x1, 840, x2)

inst_123:
// rs1_val == -2251799813685249, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2251799813685249;  op2val:-65537
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2251799813685249, -65537, x1, 848, x2)

inst_124:
// rs1_val == -4503599627370497, rs2_val == 1073741824
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4503599627370497;  op2val:1073741824
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4503599627370497, 1073741824, x1, 856, x2)

inst_125:
// rs1_val == -9007199254740993, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-9007199254740993;  op2val:512
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -9007199254740993, 512, x1, 864, x2)

inst_126:
// rs1_val == -18014398509481985, rs2_val == -33554433
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:-33554433
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -18014398509481985, -33554433, x1, 872, x2)

inst_127:
// rs1_val == -36028797018963969, rs2_val == 144115188075855872
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-36028797018963969;  op2val:144115188075855872
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -36028797018963969, 144115188075855872, x1, 880, x2)

inst_128:
// rs1_val == -72057594037927937, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:0
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -72057594037927937, 0, x1, 888, x2)

inst_129:
// rs1_val == -144115188075855873, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-144115188075855873;  op2val:-9007199254740993
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -144115188075855873, -9007199254740993, x1, 896, x2)

inst_130:
// rs1_val == -288230376151711745, rs2_val == 4
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:4
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -288230376151711745, 4, x1, 904, x2)

inst_131:
// rs1_val == -576460752303423489, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:512
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -576460752303423489, 512, x1, 912, x2)

inst_132:
// rs1_val == -1152921504606846977, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1152921504606846977;  op2val:-72057594037927937
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1152921504606846977, -72057594037927937, x1, 920, x2)

inst_133:
// rs1_val == -2305843009213693953, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2305843009213693953;  op2val:268435456
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2305843009213693953, 268435456, x1, 928, x2)

inst_134:
// rs1_val == -4611686018427387905, rs2_val == -4294967297
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387905;  op2val:-4294967297
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4611686018427387905, -4294967297, x1, 936, x2)

inst_135:
// rs1_val == 6148914691236517205, rs2_val == 524288
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:6148914691236517205;  op2val:524288
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 6148914691236517205, 524288, x1, 944, x2)

inst_136:
// rs1_val == -6148914691236517206, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-6148914691236517206;  op2val:4398046511104
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -6148914691236517206, 4398046511104, x1, 952, x2)

inst_137:
// rs2_val == 2, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:2
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 131072, 2, x1, 960, x2)

inst_138:
// rs2_val == 8, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:8
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4294967297, 8, x1, 968, x2)

inst_139:
// rs2_val == 32, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-10;  op2val:32
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -10, 32, x1, 976, x2)

inst_140:
// rs2_val == 64, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:64
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 0, 64, x1, 984, x2)

inst_141:
// rs2_val == 1024, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2199023255553;  op2val:1024
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2199023255553, 1024, x1, 992, x2)

inst_142:
// rs2_val == 2048, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:4503599627370496;  op2val:2048
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 4503599627370496, 2048, x1, 1000, x2)

inst_143:
// rs2_val == 8192, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:8192
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -8193, 8192, x1, 1008, x2)

inst_144:
// rs2_val == 16384, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-274877906945;  op2val:16384
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -274877906945, 16384, x1, 1016, x2)

inst_145:
// rs2_val == 32768, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:32768
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -8193, 32768, x1, 1024, x2)

inst_146:
// rs2_val == 65536, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-70368744177665;  op2val:65536
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -70368744177665, 65536, x1, 1032, x2)

inst_147:
// rs2_val == 1048576, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387904;  op2val:1048576
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4611686018427387904, 1048576, x1, 1040, x2)

inst_148:
// rs2_val == 4194304, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:68719476736;  op2val:4194304
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 68719476736, 4194304, x1, 1048, x2)

inst_149:
// rs2_val == 16777216, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:2199023255552;  op2val:16777216
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 2199023255552, 16777216, x1, 1056, x2)

inst_150:
// rs2_val == 33554432, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-137438953473;  op2val:33554432
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -137438953473, 33554432, x1, 1064, x2)

inst_151:
// rs2_val == 8589934592, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:8589934592
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -129, 8589934592, x1, 1072, x2)

inst_152:
// rs2_val == 34359738368, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:34359738368
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1125899906842625, 34359738368, x1, 1080, x2)

inst_153:
// rs2_val == 1099511627776, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:1099511627776
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4294967297, 1099511627776, x1, 1088, x2)

inst_154:
// rs2_val == 2199023255552, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:281474976710656;  op2val:2199023255552
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 281474976710656, 2199023255552, x1, 1096, x2)

inst_155:
// rs2_val == 2251799813685248, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:2251799813685248
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -129, 2251799813685248, x1, 1104, x2)

inst_156:
// rs2_val == 562949953421312, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:562949953421312
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 1073741824, 562949953421312, x1, 1112, x2)

inst_157:
// rs2_val == 4503599627370496, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4294967297;  op2val:4503599627370496
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4294967297, 4503599627370496, x1, 1120, x2)

inst_158:
// rs2_val == 9007199254740992, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-288230376151711745;  op2val:9007199254740992
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -288230376151711745, 9007199254740992, x1, 1128, x2)

inst_159:
// rs2_val == 2305843009213693952, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:2305843009213693952
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 65536, 2305843009213693952, x1, 1136, x2)

inst_160:
// rs2_val == -3, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-3
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -5, -3, x1, 1144, x2)

inst_161:
// rs2_val == -9, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-4611686018427387904;  op2val:-9
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -4611686018427387904, -9, x1, 1152, x2)

inst_162:
// rs2_val == -17, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-17
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -9, -17, x1, 1160, x2)

inst_163:
// rs2_val == -513, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:-513
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 32, -513, x1, 1168, x2)

inst_164:
// rs2_val == 140737488355328, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-35184372088833;  op2val:140737488355328
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -35184372088833, 140737488355328, x1, 1176, x2)

inst_165:
// rs2_val == -4097, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:70368744177664;  op2val:-4097
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 70368744177664, -4097, x1, 1184, x2)

inst_166:
// rs2_val == -16385, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-18014398509481985;  op2val:-16385
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -18014398509481985, -16385, x1, 1192, x2)

inst_167:
// rs2_val == -131073, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-131073
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -134217729, -131073, x1, 1200, x2)

inst_168:
// rs2_val == -262145, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-262145
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -17, -262145, x1, 1208, x2)

inst_169:
// rs2_val == -1048577, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1125899906842625;  op2val:-1048577
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1125899906842625, -1048577, x1, 1216, x2)

inst_170:
// rs2_val == 8796093022208, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:4611686018427387904;  op2val:8796093022208
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 4611686018427387904, 8796093022208, x1, 1224, x2)

inst_171:
// rs2_val == -67108865, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:-67108865
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 8192, -67108865, x1, 1232, x2)

inst_172:
// rs2_val == 17592186044416, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:17592186044416
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -2049, 17592186044416, x1, 1240, x2)

inst_173:
// rs2_val == -536870913, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-536870913
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -513, -536870913, x1, 1248, x2)

inst_174:
// rs2_val == -1073741825, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-1073741825
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 4, -1073741825, x1, 1256, x2)

inst_175:
// rs2_val == -17179869185, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:72057594037927936;  op2val:-17179869185
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 72057594037927936, -17179869185, x1, 1264, x2)

inst_176:
// rs2_val == 70368744177664, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:8589934592;  op2val:70368744177664
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 8589934592, 70368744177664, x1, 1272, x2)

inst_177:
// rs2_val == -137438953473, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-281474976710657;  op2val:-137438953473
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -281474976710657, -137438953473, x1, 1280, x2)

inst_178:
// rs2_val == -549755813889, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-549755813889
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 6, -549755813889, x1, 1288, x2)

inst_179:
// rs2_val == -1099511627777, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:4294967296;  op2val:-1099511627777
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 4294967296, -1099511627777, x1, 1296, x2)

inst_180:
// rs2_val == -2199023255553, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:-2199023255553
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 268435456, -2199023255553, x1, 1304, x2)

inst_181:
// rs2_val == -8796093022209, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-72057594037927937;  op2val:-8796093022209
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -72057594037927937, -8796093022209, x1, 1312, x2)

inst_182:
// rs2_val == -17592186044417, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:18014398509481984;  op2val:-17592186044417
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 18014398509481984, -17592186044417, x1, 1320, x2)

inst_183:
// rs2_val == -70368744177665, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-576460752303423489;  op2val:-70368744177665
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -576460752303423489, -70368744177665, x1, 1328, x2)

inst_184:
// rs2_val == -140737488355329, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:-140737488355329
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, -1048577, -140737488355329, x1, 1336, x2)

inst_185:
// rs2_val == -562949953421313, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:128;  op2val:-562949953421313
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 128, -562949953421313, x1, 1344, x2)

inst_186:
// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs2_val == 16, rs1_val == 9223372036854775807
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:9223372036854775807;  op2val:16
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 9223372036854775807, 16, x1, 1352, x2)

inst_187:
// rs1_val == 8, 
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:-1
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 8, -1, x1, 1360, x2)

inst_188:
// rs1_val == 524288, rs2_val == 512
// opcode: div ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:512
TEST_RR_OP(div, x12, x10, x11, 0x0000000000000000, 524288, 512, x1, 1368, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 172*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
