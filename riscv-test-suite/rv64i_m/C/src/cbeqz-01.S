
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 08:16:37 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.beqz instruction of the RISC-V C extension for the cbeqz covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cbeqz)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1==x10, rs1_val == (-2**(xlen-1)), rs1_val < 0 and imm_val < 0, rs1_val == -9223372036854775808
// opcode:c.beqz; op1:x10; op1val:-9223372036854775808; immval:34
TEST_CBRANCH_OP(c.beqz, x2, x10, -9223372036854775808, 34, 1b, x1, 0)

inst_1:
// rs1==x14, rs1_val == 0, rs1_val == 0 and imm_val < 0, rs1_val==0
// opcode:c.beqz; op1:x14; op1val:0; immval:20
TEST_CBRANCH_OP(c.beqz, x2, x14, 0, 20, 1b, x1, 8)

inst_2:
// rs1==x9, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807, rs1_val > 0 and imm_val < 0
// opcode:c.beqz; op1:x9; op1val:9223372036854775807; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x9, 9223372036854775807, 10, 1b, x1, 16)

inst_3:
// rs1==x12, rs1_val == 1, rs1_val > 0 and imm_val > 0
// opcode:c.beqz; op1:x12; op1val:1; immval:126
TEST_CBRANCH_OP(c.beqz, x2, x12, 1, 126, 3f, x1, 24)

inst_4:
// rs1==x11, rs1_val < 0 and imm_val > 0, 
// opcode:c.beqz; op1:x11; op1val:-10; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x11, -10, 14, 3f, x1, 32)

inst_5:
// rs1==x15, rs1_val == 0 and imm_val > 0, 
// opcode:c.beqz; op1:x15; op1val:0; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x15, 0, 4, 3f, x1, 40)

inst_6:
// rs1==x8, rs1_val == 2, rs1_val==2
// opcode:c.beqz; op1:x8; op1val:2; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x8, 2, 8, 3f, x1, 48)

inst_7:
// rs1==x13, rs1_val == 4, rs1_val==4
// opcode:c.beqz; op1:x13; op1val:4; immval:130
TEST_CBRANCH_OP(c.beqz, x2, x13, 4, 130, 1b, x1, 56)

inst_8:
// rs1_val == 8, 
// opcode:c.beqz; op1:x10; op1val:8; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, 8, 18, 1b, x1, 64)

inst_9:
// rs1_val == 16, 
// opcode:c.beqz; op1:x10; op1val:16; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 16, 16, 1b, x1, 72)

inst_10:
// rs1_val == 32, 
// opcode:c.beqz; op1:x10; op1val:32; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 32, 8, 3f, x1, 80)

inst_11:
// rs1_val == 64, 
// opcode:c.beqz; op1:x10; op1val:64; immval:130
TEST_CBRANCH_OP(c.beqz, x2, x10, 64, 130, 1b, x1, 88)

inst_12:
// rs1_val == 128, 
// opcode:c.beqz; op1:x10; op1val:128; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 128, 8, 1b, x1, 96)

inst_13:
// rs1_val == 256, 
// opcode:c.beqz; op1:x10; op1val:256; immval:32
TEST_CBRANCH_OP(c.beqz, x2, x10, 256, 32, 3f, x1, 104)

inst_14:
// rs1_val == 512, 
// opcode:c.beqz; op1:x10; op1val:512; immval:12
TEST_CBRANCH_OP(c.beqz, x2, x10, 512, 12, 3f, x1, 112)

inst_15:
// rs1_val == 1024, 
// opcode:c.beqz; op1:x10; op1val:1024; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, 1024, 64, 3f, x1, 120)

inst_16:
// rs1_val == 2048, 
// opcode:c.beqz; op1:x10; op1val:2048; immval:126
TEST_CBRANCH_OP(c.beqz, x2, x10, 2048, 126, 3f, x1, 128)

inst_17:
// rs1_val == 4096, 
// opcode:c.beqz; op1:x10; op1val:4096; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, 4096, 170, 3f, x1, 136)

inst_18:
// rs1_val == 8192, 
// opcode:c.beqz; op1:x10; op1val:8192; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 8192, 128, 3f, x1, 144)

inst_19:
// rs1_val == 16384, 
// opcode:c.beqz; op1:x10; op1val:16384; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, 16384, 6, 1b, x1, 152)

inst_20:
// rs1_val == 32768, 
// opcode:c.beqz; op1:x10; op1val:32768; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, 32768, 4, 1b, x1, 160)

inst_21:
// rs1_val == 65536, 
// opcode:c.beqz; op1:x10; op1val:65536; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 65536, 8, 1b, x1, 168)

inst_22:
// rs1_val == 131072, 
// opcode:c.beqz; op1:x10; op1val:131072; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 131072, 128, 1b, x1, 176)

inst_23:
// rs1_val == 262144, 
// opcode:c.beqz; op1:x10; op1val:262144; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 262144, 8, 3f, x1, 184)

inst_24:
// rs1_val == 524288, 
// opcode:c.beqz; op1:x10; op1val:524288; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 524288, 128, 1b, x1, 192)

inst_25:
// rs1_val == 1048576, 
// opcode:c.beqz; op1:x10; op1val:1048576; immval:126
TEST_CBRANCH_OP(c.beqz, x2, x10, 1048576, 126, 3f, x1, 200)

inst_26:
// rs1_val == 2097152, 
// opcode:c.beqz; op1:x10; op1val:2097152; immval:172
TEST_CBRANCH_OP(c.beqz, x2, x10, 2097152, 172, 1b, x1, 208)

inst_27:
// rs1_val == 4194304, 
// opcode:c.beqz; op1:x10; op1val:4194304; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, 4194304, 14, 1b, x1, 216)

inst_28:
// rs1_val == 8388608, 
// opcode:c.beqz; op1:x10; op1val:8388608; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, 8388608, 14, 3f, x1, 224)

inst_29:
// rs1_val == 16777216, 
// opcode:c.beqz; op1:x10; op1val:16777216; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, 16777216, 6, 3f, x1, 232)

inst_30:
// rs1_val == 33554432, 
// opcode:c.beqz; op1:x10; op1val:33554432; immval:130
TEST_CBRANCH_OP(c.beqz, x2, x10, 33554432, 130, 1b, x1, 240)

inst_31:
// rs1_val == 67108864, 
// opcode:c.beqz; op1:x10; op1val:67108864; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, 67108864, 4, 3f, x1, 248)

inst_32:
// rs1_val == 134217728, 
// opcode:c.beqz; op1:x10; op1val:134217728; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 134217728, 128, 3f, x1, 256)

inst_33:
// rs1_val == 268435456, 
// opcode:c.beqz; op1:x10; op1val:268435456; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, 268435456, 64, 3f, x1, 264)

inst_34:
// rs1_val == 536870912, 
// opcode:c.beqz; op1:x10; op1val:536870912; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 536870912, 16, 1b, x1, 272)

inst_35:
// rs1_val == 1073741824, 
// opcode:c.beqz; op1:x10; op1val:1073741824; immval:130
TEST_CBRANCH_OP(c.beqz, x2, x10, 1073741824, 130, 1b, x1, 280)

inst_36:
// rs1_val == 2147483648, 
// opcode:c.beqz; op1:x10; op1val:2147483648; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, 2147483648, 170, 3f, x1, 288)

inst_37:
// rs1_val == 4294967296, 
// opcode:c.beqz; op1:x10; op1val:4294967296; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, 4294967296, 10, 1b, x1, 296)

inst_38:
// rs1_val == 8589934592, 
// opcode:c.beqz; op1:x10; op1val:8589934592; immval:172
TEST_CBRANCH_OP(c.beqz, x2, x10, 8589934592, 172, 1b, x1, 304)

inst_39:
// rs1_val == 17179869184, 
// opcode:c.beqz; op1:x10; op1val:17179869184; immval:12
TEST_CBRANCH_OP(c.beqz, x2, x10, 17179869184, 12, 1b, x1, 312)

inst_40:
// rs1_val == 34359738368, 
// opcode:c.beqz; op1:x10; op1val:34359738368; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 34359738368, 16, 1b, x1, 320)

inst_41:
// rs1_val == 68719476736, 
// opcode:c.beqz; op1:x10; op1val:68719476736; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, 68719476736, 64, 3f, x1, 328)

inst_42:
// rs1_val == 137438953472, 
// opcode:c.beqz; op1:x10; op1val:137438953472; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 137438953472, 16, 1b, x1, 336)

inst_43:
// rs1_val == 274877906944, 
// opcode:c.beqz; op1:x10; op1val:274877906944; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 274877906944, 128, 1b, x1, 344)

inst_44:
// rs1_val == 549755813888, 
// opcode:c.beqz; op1:x10; op1val:549755813888; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, 549755813888, 14, 1b, x1, 352)

inst_45:
// rs1_val == 1099511627776, 
// opcode:c.beqz; op1:x10; op1val:1099511627776; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, 1099511627776, 10, 3f, x1, 360)

inst_46:
// rs1_val == 2199023255552, 
// opcode:c.beqz; op1:x10; op1val:2199023255552; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 2199023255552, 8, 3f, x1, 368)

inst_47:
// rs1_val == 4398046511104, 
// opcode:c.beqz; op1:x10; op1val:4398046511104; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, 4398046511104, 4, 1b, x1, 376)

inst_48:
// rs1_val == 8796093022208, 
// opcode:c.beqz; op1:x10; op1val:8796093022208; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, 8796093022208, 4, 1b, x1, 384)

inst_49:
// rs1_val == 17592186044416, 
// opcode:c.beqz; op1:x10; op1val:17592186044416; immval:126
TEST_CBRANCH_OP(c.beqz, x2, x10, 17592186044416, 126, 3f, x1, 392)

inst_50:
// rs1_val == 35184372088832, 
// opcode:c.beqz; op1:x10; op1val:35184372088832; immval:66
TEST_CBRANCH_OP(c.beqz, x2, x10, 35184372088832, 66, 1b, x1, 400)

inst_51:
// rs1_val == 70368744177664, 
// opcode:c.beqz; op1:x10; op1val:70368744177664; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, 70368744177664, 6, 3f, x1, 408)

inst_52:
// rs1_val == 140737488355328, 
// opcode:c.beqz; op1:x10; op1val:140737488355328; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 140737488355328, 16, 1b, x1, 416)

inst_53:
// rs1_val == 281474976710656, 
// opcode:c.beqz; op1:x10; op1val:281474976710656; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 281474976710656, 8, 3f, x1, 424)

inst_54:
// rs1_val == 562949953421312, 
// opcode:c.beqz; op1:x10; op1val:562949953421312; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, 562949953421312, 170, 3f, x1, 432)

inst_55:
// rs1_val == 1125899906842624, 
// opcode:c.beqz; op1:x10; op1val:1125899906842624; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 1125899906842624, 128, 1b, x1, 440)

inst_56:
// rs1_val == 2251799813685248, 
// opcode:c.beqz; op1:x10; op1val:2251799813685248; immval:32
TEST_CBRANCH_OP(c.beqz, x2, x10, 2251799813685248, 32, 3f, x1, 448)

inst_57:
// rs1_val == 4503599627370496, 
// opcode:c.beqz; op1:x10; op1val:4503599627370496; immval:12
TEST_CBRANCH_OP(c.beqz, x2, x10, 4503599627370496, 12, 3f, x1, 456)

inst_58:
// rs1_val == 9007199254740992, 
// opcode:c.beqz; op1:x10; op1val:9007199254740992; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 9007199254740992, 128, 1b, x1, 464)

inst_59:
// rs1_val == 18014398509481984, 
// opcode:c.beqz; op1:x10; op1val:18014398509481984; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, 18014398509481984, 18, 3f, x1, 472)

inst_60:
// rs1_val == 36028797018963968, 
// opcode:c.beqz; op1:x10; op1val:36028797018963968; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, 36028797018963968, 18, 1b, x1, 480)

inst_61:
// rs1_val == 72057594037927936, 
// opcode:c.beqz; op1:x10; op1val:72057594037927936; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, 72057594037927936, 14, 1b, x1, 488)

inst_62:
// rs1_val == 144115188075855872, 
// opcode:c.beqz; op1:x10; op1val:144115188075855872; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, 144115188075855872, 6, 1b, x1, 496)

inst_63:
// rs1_val == 288230376151711744, 
// opcode:c.beqz; op1:x10; op1val:288230376151711744; immval:172
TEST_CBRANCH_OP(c.beqz, x2, x10, 288230376151711744, 172, 1b, x1, 504)

inst_64:
// rs1_val == 576460752303423488, 
// opcode:c.beqz; op1:x10; op1val:576460752303423488; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, 576460752303423488, 4, 1b, x1, 512)

inst_65:
// rs1_val == 1152921504606846976, 
// opcode:c.beqz; op1:x10; op1val:1152921504606846976; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 1152921504606846976, 16, 3f, x1, 520)

inst_66:
// rs1_val == 2305843009213693952, 
// opcode:c.beqz; op1:x10; op1val:2305843009213693952; immval:32
TEST_CBRANCH_OP(c.beqz, x2, x10, 2305843009213693952, 32, 3f, x1, 528)

inst_67:
// rs1_val == 4611686018427387904, 
// opcode:c.beqz; op1:x10; op1val:4611686018427387904; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 4611686018427387904, 8, 3f, x1, 536)

inst_68:
// rs1_val == -2, 
// opcode:c.beqz; op1:x10; op1val:-2; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, -2, 16, 1b, x1, 544)

inst_69:
// rs1_val == -3, 
// opcode:c.beqz; op1:x10; op1val:-3; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, -3, 16, 1b, x1, 552)

inst_70:
// rs1_val == -5, 
// opcode:c.beqz; op1:x10; op1val:-5; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, -5, 128, 3f, x1, 560)

inst_71:
// rs1_val == -9, 
// opcode:c.beqz; op1:x10; op1val:-9; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, -9, 170, 3f, x1, 568)

inst_72:
// rs1_val == -17, 
// opcode:c.beqz; op1:x10; op1val:-17; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, -17, 18, 1b, x1, 576)

inst_73:
// rs1_val == -33, 
// opcode:c.beqz; op1:x10; op1val:-33; immval:12
TEST_CBRANCH_OP(c.beqz, x2, x10, -33, 12, 3f, x1, 584)

inst_74:
// rs1_val == -65, 
// opcode:c.beqz; op1:x10; op1val:-65; immval:130
TEST_CBRANCH_OP(c.beqz, x2, x10, -65, 130, 1b, x1, 592)

inst_75:
// rs1_val == -129, 
// opcode:c.beqz; op1:x10; op1val:-129; immval:172
TEST_CBRANCH_OP(c.beqz, x2, x10, -129, 172, 1b, x1, 600)

inst_76:
// rs1_val == -257, 
// opcode:c.beqz; op1:x10; op1val:-257; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, -257, 16, 3f, x1, 608)

inst_77:
// rs1_val == -513, 
// opcode:c.beqz; op1:x10; op1val:-513; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -513, 10, 3f, x1, 616)

inst_78:
// rs1_val == -1025, 
// opcode:c.beqz; op1:x10; op1val:-1025; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -1025, 10, 3f, x1, 624)

inst_79:
// rs1_val == -2049, 
// opcode:c.beqz; op1:x10; op1val:-2049; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, -2049, 64, 3f, x1, 632)

inst_80:
// rs1_val == -4097, 
// opcode:c.beqz; op1:x10; op1val:-4097; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, -4097, 14, 3f, x1, 640)

inst_81:
// rs1_val == -8193, 
// opcode:c.beqz; op1:x10; op1val:-8193; immval:34
TEST_CBRANCH_OP(c.beqz, x2, x10, -8193, 34, 1b, x1, 648)

inst_82:
// rs1_val == -16385, 
// opcode:c.beqz; op1:x10; op1val:-16385; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -16385, 10, 3f, x1, 656)

inst_83:
// rs1_val == -32769, 
// opcode:c.beqz; op1:x10; op1val:-32769; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, -32769, 6, 1b, x1, 664)

inst_84:
// rs1_val == -65537, 
// opcode:c.beqz; op1:x10; op1val:-65537; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, -65537, 8, 3f, x1, 672)

inst_85:
// rs1_val == -131073, 
// opcode:c.beqz; op1:x10; op1val:-131073; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, -131073, 4, 3f, x1, 680)

inst_86:
// rs1_val == -262145, 
// opcode:c.beqz; op1:x10; op1val:-262145; immval:20
TEST_CBRANCH_OP(c.beqz, x2, x10, -262145, 20, 1b, x1, 688)

inst_87:
// rs1_val == -524289, 
// opcode:c.beqz; op1:x10; op1val:-524289; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, -524289, 64, 3f, x1, 696)

inst_88:
// rs1_val == -1048577, 
// opcode:c.beqz; op1:x10; op1val:-1048577; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, -1048577, 128, 1b, x1, 704)

inst_89:
// rs1_val == -36028797018963969, 
// opcode:c.beqz; op1:x10; op1val:-36028797018963969; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, -36028797018963969, 6, 3f, x1, 712)

inst_90:
// rs1_val == -72057594037927937, 
// opcode:c.beqz; op1:x10; op1val:-72057594037927937; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, -72057594037927937, 170, 3f, x1, 720)

inst_91:
// rs1_val == -144115188075855873, 
// opcode:c.beqz; op1:x10; op1val:-144115188075855873; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, -144115188075855873, 18, 3f, x1, 728)

inst_92:
// rs1_val == -288230376151711745, 
// opcode:c.beqz; op1:x10; op1val:-288230376151711745; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, -288230376151711745, 14, 3f, x1, 736)

inst_93:
// rs1_val == -576460752303423489, 
// opcode:c.beqz; op1:x10; op1val:-576460752303423489; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, -576460752303423489, 8, 3f, x1, 744)

inst_94:
// rs1_val == -1152921504606846977, 
// opcode:c.beqz; op1:x10; op1val:-1152921504606846977; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, -1152921504606846977, 4, 1b, x1, 752)

inst_95:
// rs1_val == -2305843009213693953, 
// opcode:c.beqz; op1:x10; op1val:-2305843009213693953; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, -2305843009213693953, 18, 3f, x1, 760)

inst_96:
// rs1_val == -4611686018427387905, 
// opcode:c.beqz; op1:x10; op1val:-4611686018427387905; immval:34
TEST_CBRANCH_OP(c.beqz, x2, x10, -4611686018427387905, 34, 1b, x1, 768)

inst_97:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205
// opcode:c.beqz; op1:x10; op1val:6148914691236517205; immval:126
TEST_CBRANCH_OP(c.beqz, x2, x10, 6148914691236517205, 126, 3f, x1, 776)

inst_98:
// rs1_val == -6148914691236517206, rs1_val==-6148914691236517206
// opcode:c.beqz; op1:x10; op1val:-6148914691236517206; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, -6148914691236517206, 14, 1b, x1, 784)

inst_99:
// rs1_val==3, 
// opcode:c.beqz; op1:x10; op1val:3; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 3, 16, 3f, x1, 792)

inst_100:
// rs1_val==5, 
// opcode:c.beqz; op1:x10; op1val:5; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 5, 16, 1b, x1, 800)

inst_101:
// rs1_val==3689348814741910323, 
// opcode:c.beqz; op1:x10; op1val:3689348814741910323; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 3689348814741910323, 128, 3f, x1, 808)

inst_102:
// rs1_val==7378697629483820646, 
// opcode:c.beqz; op1:x10; op1val:7378697629483820646; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 7378697629483820646, 16, 3f, x1, 816)

inst_103:
// rs1_val==-3037000499, 
// opcode:c.beqz; op1:x10; op1val:-3037000499; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, -3037000499, 4, 1b, x1, 824)

inst_104:
// rs1_val==3037000499, 
// opcode:c.beqz; op1:x10; op1val:3037000499; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, 3037000499, 10, 1b, x1, 832)

inst_105:
// rs1_val==6148914691236517204, 
// opcode:c.beqz; op1:x10; op1val:6148914691236517204; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, 6148914691236517204, 6, 1b, x1, 840)

inst_106:
// rs1_val==3689348814741910322, 
// opcode:c.beqz; op1:x10; op1val:3689348814741910322; immval:20
TEST_CBRANCH_OP(c.beqz, x2, x10, 3689348814741910322, 20, 1b, x1, 848)

inst_107:
// rs1_val==7378697629483820645, 
// opcode:c.beqz; op1:x10; op1val:7378697629483820645; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 7378697629483820645, 16, 3f, x1, 856)

inst_108:
// rs1_val==3037000498, 
// opcode:c.beqz; op1:x10; op1val:3037000498; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, 3037000498, 10, 3f, x1, 864)

inst_109:
// rs1_val==6148914691236517206, 
// opcode:c.beqz; op1:x10; op1val:6148914691236517206; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, 6148914691236517206, 16, 3f, x1, 872)

inst_110:
// rs1_val==-6148914691236517205, 
// opcode:c.beqz; op1:x10; op1val:-6148914691236517205; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, -6148914691236517205, 8, 1b, x1, 880)

inst_111:
// rs1_val==6, 
// opcode:c.beqz; op1:x10; op1val:6; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, 6, 64, 3f, x1, 888)

inst_112:
// rs1_val==3689348814741910324, 
// opcode:c.beqz; op1:x10; op1val:3689348814741910324; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, 3689348814741910324, 8, 1b, x1, 896)

inst_113:
// rs1_val==7378697629483820647, 
// opcode:c.beqz; op1:x10; op1val:7378697629483820647; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, 7378697629483820647, 10, 1b, x1, 904)

inst_114:
// rs1_val==-3037000498, 
// opcode:c.beqz; op1:x10; op1val:-3037000498; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, -3037000498, 16, 1b, x1, 912)

inst_115:
// rs1_val==3037000500, 
// opcode:c.beqz; op1:x10; op1val:3037000500; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, 3037000500, 128, 1b, x1, 920)

inst_116:
// rs1_val == -2097153, 
// opcode:c.beqz; op1:x10; op1val:-2097153; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -2097153, 10, 1b, x1, 928)

inst_117:
// rs1_val == -4194305, 
// opcode:c.beqz; op1:x10; op1val:-4194305; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, -4194305, 170, 3f, x1, 936)

inst_118:
// rs1_val == -8388609, 
// opcode:c.beqz; op1:x10; op1val:-8388609; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, -8388609, 8, 3f, x1, 944)

inst_119:
// rs1_val == -16777217, 
// opcode:c.beqz; op1:x10; op1val:-16777217; immval:20
TEST_CBRANCH_OP(c.beqz, x2, x10, -16777217, 20, 1b, x1, 952)

inst_120:
// rs1_val == -33554433, 
// opcode:c.beqz; op1:x10; op1val:-33554433; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -33554433, 10, 1b, x1, 960)

inst_121:
// rs1_val == -67108865, 
// opcode:c.beqz; op1:x10; op1val:-67108865; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -67108865, 10, 1b, x1, 968)

inst_122:
// rs1_val == -134217729, 
// opcode:c.beqz; op1:x10; op1val:-134217729; immval:66
TEST_CBRANCH_OP(c.beqz, x2, x10, -134217729, 66, 1b, x1, 976)

inst_123:
// rs1_val == -268435457, 
// opcode:c.beqz; op1:x10; op1val:-268435457; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, -268435457, 64, 3f, x1, 984)

inst_124:
// rs1_val == -536870913, 
// opcode:c.beqz; op1:x10; op1val:-536870913; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, -536870913, 128, 1b, x1, 992)

inst_125:
// rs1_val == -1073741825, 
// opcode:c.beqz; op1:x10; op1val:-1073741825; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -1073741825, 10, 3f, x1, 1000)

inst_126:
// rs1_val == -2147483649, 
// opcode:c.beqz; op1:x10; op1val:-2147483649; immval:66
TEST_CBRANCH_OP(c.beqz, x2, x10, -2147483649, 66, 1b, x1, 1008)

inst_127:
// rs1_val == -4294967297, 
// opcode:c.beqz; op1:x10; op1val:-4294967297; immval:4
TEST_CBRANCH_OP(c.beqz, x2, x10, -4294967297, 4, 3f, x1, 1016)

inst_128:
// rs1_val == -8589934593, 
// opcode:c.beqz; op1:x10; op1val:-8589934593; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, -8589934593, 128, 1b, x1, 1024)

inst_129:
// rs1_val == -17179869185, 
// opcode:c.beqz; op1:x10; op1val:-17179869185; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, -17179869185, 64, 3f, x1, 1032)

inst_130:
// rs1_val == -34359738369, 
// opcode:c.beqz; op1:x10; op1val:-34359738369; immval:10
TEST_CBRANCH_OP(c.beqz, x2, x10, -34359738369, 10, 3f, x1, 1040)

inst_131:
// rs1_val == -68719476737, 
// opcode:c.beqz; op1:x10; op1val:-68719476737; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, -68719476737, 8, 3f, x1, 1048)

inst_132:
// rs1_val == -137438953473, 
// opcode:c.beqz; op1:x10; op1val:-137438953473; immval:12
TEST_CBRANCH_OP(c.beqz, x2, x10, -137438953473, 12, 3f, x1, 1056)

inst_133:
// rs1_val == -274877906945, 
// opcode:c.beqz; op1:x10; op1val:-274877906945; immval:34
TEST_CBRANCH_OP(c.beqz, x2, x10, -274877906945, 34, 1b, x1, 1064)

inst_134:
// rs1_val == -549755813889, 
// opcode:c.beqz; op1:x10; op1val:-549755813889; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, -549755813889, 170, 3f, x1, 1072)

inst_135:
// rs1_val == -1099511627777, 
// opcode:c.beqz; op1:x10; op1val:-1099511627777; immval:130
TEST_CBRANCH_OP(c.beqz, x2, x10, -1099511627777, 130, 1b, x1, 1080)

inst_136:
// rs1_val == -2199023255553, 
// opcode:c.beqz; op1:x10; op1val:-2199023255553; immval:34
TEST_CBRANCH_OP(c.beqz, x2, x10, -2199023255553, 34, 1b, x1, 1088)

inst_137:
// rs1_val == -4398046511105, 
// opcode:c.beqz; op1:x10; op1val:-4398046511105; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, -4398046511105, 14, 3f, x1, 1096)

inst_138:
// rs1_val == -8796093022209, 
// opcode:c.beqz; op1:x10; op1val:-8796093022209; immval:128
TEST_CBRANCH_OP(c.beqz, x2, x10, -8796093022209, 128, 1b, x1, 1104)

inst_139:
// rs1_val == -17592186044417, 
// opcode:c.beqz; op1:x10; op1val:-17592186044417; immval:6
TEST_CBRANCH_OP(c.beqz, x2, x10, -17592186044417, 6, 1b, x1, 1112)

inst_140:
// rs1_val == -35184372088833, 
// opcode:c.beqz; op1:x10; op1val:-35184372088833; immval:12
TEST_CBRANCH_OP(c.beqz, x2, x10, -35184372088833, 12, 1b, x1, 1120)

inst_141:
// rs1_val == -70368744177665, 
// opcode:c.beqz; op1:x10; op1val:-70368744177665; immval:14
TEST_CBRANCH_OP(c.beqz, x2, x10, -70368744177665, 14, 3f, x1, 1128)

inst_142:
// rs1_val == -140737488355329, 
// opcode:c.beqz; op1:x10; op1val:-140737488355329; immval:170
TEST_CBRANCH_OP(c.beqz, x2, x10, -140737488355329, 170, 3f, x1, 1136)

inst_143:
// rs1_val == -281474976710657, 
// opcode:c.beqz; op1:x10; op1val:-281474976710657; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, -281474976710657, 18, 3f, x1, 1144)

inst_144:
// rs1_val == -562949953421313, 
// opcode:c.beqz; op1:x10; op1val:-562949953421313; immval:18
TEST_CBRANCH_OP(c.beqz, x2, x10, -562949953421313, 18, 3f, x1, 1152)

inst_145:
// rs1_val == -1125899906842625, 
// opcode:c.beqz; op1:x10; op1val:-1125899906842625; immval:64
TEST_CBRANCH_OP(c.beqz, x2, x10, -1125899906842625, 64, 3f, x1, 1160)

inst_146:
// rs1_val == -2251799813685249, 
// opcode:c.beqz; op1:x10; op1val:-2251799813685249; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, -2251799813685249, 16, 1b, x1, 1168)

inst_147:
// rs1_val == -4503599627370497, 
// opcode:c.beqz; op1:x10; op1val:-4503599627370497; immval:16
TEST_CBRANCH_OP(c.beqz, x2, x10, -4503599627370497, 16, 1b, x1, 1176)

inst_148:
// rs1_val == -9007199254740993, 
// opcode:c.beqz; op1:x10; op1val:-9007199254740993; immval:126
TEST_CBRANCH_OP(c.beqz, x2, x10, -9007199254740993, 126, 3f, x1, 1184)

inst_149:
// rs1_val == -18014398509481985, 
// opcode:c.beqz; op1:x10; op1val:-18014398509481985; immval:8
TEST_CBRANCH_OP(c.beqz, x2, x10, -18014398509481985, 8, 1b, x1, 1192)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
