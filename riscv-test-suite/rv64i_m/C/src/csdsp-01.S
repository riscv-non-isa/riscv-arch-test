 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sdsp instruction of the RISC-V C extension for the csdsp covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64IC")

RVTEST_CODE_BEGIN
RVMODEL_BOOT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*C.*);def TEST_CASE_1=True;",csdsp)

RVTEST_SIGBASE( x21,signature_x21_1)

inst_0:
// rs2==x15, imm_val > 0, rs2_val == 33554432
// opcode:c.sdsp; op1:x2; op2:x15; op2val:33554432; immval:112
TEST_STORE(x21,x20,0,x2,x15,33554432,112,0,c.sdsp,0)

inst_1:
// rs2==x18, imm_val == 0, rs2_val == 281474976710656
// opcode:c.sdsp; op1:x2; op2:x18; op2val:281474976710656; immval:0
TEST_STORE(x21,x20,0,x2,x18,281474976710656,0,8,c.sdsp,0)

inst_2:
// rs2==x22, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808
// opcode:c.sdsp; op1:x2; op2:x22; op2val:-9223372036854775808; immval:136
TEST_STORE(x21,x20,0,x2,x22,-9223372036854775808,136,16,c.sdsp,0)

inst_3:
// rs2==x24, rs2_val == 0, 
// opcode:c.sdsp; op1:x2; op2:x24; op2val:0; immval:504
TEST_STORE(x21,x20,0,x2,x24,0,504,24,c.sdsp,0)

inst_4:
// rs2==x14, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode:c.sdsp; op1:x2; op2:x14; op2val:9223372036854775807; immval:88
TEST_STORE(x21,x20,0,x2,x14,9223372036854775807,88,32,c.sdsp,0)

inst_5:
// rs2==x3, rs2_val == 1, 
// opcode:c.sdsp; op1:x2; op2:x3; op2val:1; immval:152
TEST_STORE(x21,x20,0,x2,x3,1,152,40,c.sdsp,0)

inst_6:
// rs2==x1, imm_val == 8, rs2_val == 2048
// opcode:c.sdsp; op1:x2; op2:x1; op2val:2048; immval:8
TEST_STORE(x21,x20,0,x2,x1,2048,8,48,c.sdsp,0)

inst_7:
// rs2==x11, imm_val == 16, 
// opcode:c.sdsp; op1:x2; op2:x11; op2val:7; immval:16
TEST_STORE(x21,x20,0,x2,x11,7,16,56,c.sdsp,0)

inst_8:
// rs2==x0, imm_val == 32, rs2_val == 9007199254740992
// opcode:c.sdsp; op1:x2; op2:x0; op2val:9007199254740992; immval:32
TEST_STORE(x21,x20,0,x2,x0,9007199254740992,32,64,c.sdsp,0)

inst_9:
// rs2==x30, imm_val == 64, rs2_val == 16
// opcode:c.sdsp; op1:x2; op2:x30; op2val:16; immval:64
TEST_STORE(x21,x20,0,x2,x30,16,64,72,c.sdsp,0)

inst_10:
// rs2==x6, imm_val == 128, 
// opcode:c.sdsp; op1:x2; op2:x6; op2val:9; immval:128
TEST_STORE(x21,x20,0,x2,x6,9,128,80,c.sdsp,0)

inst_11:
// rs2==x9, imm_val == 256, rs2_val == 4503599627370496
// opcode:c.sdsp; op1:x2; op2:x9; op2val:4503599627370496; immval:256
TEST_STORE(x21,x20,0,x2,x9,4503599627370496,256,88,c.sdsp,0)

inst_12:
// rs2==x7, imm_val == 496, rs2_val == 8589934592
// opcode:c.sdsp; op1:x2; op2:x7; op2val:8589934592; immval:496
TEST_STORE(x21,x20,0,x2,x7,8589934592,496,96,c.sdsp,0)

inst_13:
// rs2==x28, imm_val == 488, rs2_val == 1073741824
// opcode:c.sdsp; op1:x2; op2:x28; op2val:1073741824; immval:488
TEST_STORE(x21,x20,0,x2,x28,1073741824,488,104,c.sdsp,0)

inst_14:
// rs2==x25, imm_val == 472, rs2_val == 2097152
// opcode:c.sdsp; op1:x2; op2:x25; op2val:2097152; immval:472
TEST_STORE(x21,x20,0,x2,x25,2097152,472,112,c.sdsp,0)

inst_15:
// rs2==x27, imm_val == 440, rs2_val == -17
// opcode:c.sdsp; op1:x2; op2:x27; op2val:-17; immval:440
TEST_STORE(x21,x20,0,x2,x27,-17,440,120,c.sdsp,0)

inst_16:
// rs2==x2, imm_val == 376, 
// opcode:c.sdsp; op1:x2; op2:x2; op2val:281474976710656; immval:376
TEST_STORE(x21,x20,0,x2,x2,281474976710656,376,128,c.sdsp,0)

inst_17:
// rs2==x17, imm_val == 248, rs2_val == -16385
// opcode:c.sdsp; op1:x2; op2:x17; op2val:-16385; immval:248
TEST_STORE(x21,x20,0,x2,x17,-16385,248,136,c.sdsp,0)

inst_18:
// rs2==x26, imm_val == 168, rs2_val == 4
// opcode:c.sdsp; op1:x2; op2:x26; op2val:4; immval:168
TEST_STORE(x21,x20,0,x2,x26,4,168,144,c.sdsp,0)

inst_19:
// rs2==x16, imm_val == 336, rs2_val == -129
// opcode:c.sdsp; op1:x2; op2:x16; op2val:-129; immval:336
TEST_STORE(x21,x20,0,x2,x16,-129,336,152,c.sdsp,0)

inst_20:
// rs2==x5, rs2_val == 2, 
// opcode:c.sdsp; op1:x2; op2:x5; op2val:2; immval:104
TEST_STORE(x21,x20,0,x2,x5,2,104,160,c.sdsp,0)

inst_21:
// rs2==x13, rs2_val == 8, 
// opcode:c.sdsp; op1:x2; op2:x13; op2val:8; immval:64
TEST_STORE(x21,x20,0,x2,x13,8,64,168,c.sdsp,0)

inst_22:
// rs2==x31, rs2_val == 32, 
// opcode:c.sdsp; op1:x2; op2:x31; op2val:32; immval:40
TEST_STORE(x21,x20,0,x2,x31,32,40,176,c.sdsp,0)

inst_23:
// rs2==x8, rs2_val == 64, 
// opcode:c.sdsp; op1:x2; op2:x8; op2val:64; immval:80
TEST_STORE(x21,x20,0,x2,x8,64,80,184,c.sdsp,0)

inst_24:
// rs2==x10, rs2_val == 128, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:128; immval:248
TEST_STORE(x21,x20,0,x2,x10,128,248,192,c.sdsp,0)

inst_25:
// rs2==x4, rs2_val == 256, 
// opcode:c.sdsp; op1:x2; op2:x4; op2val:256; immval:8
TEST_STORE(x21,x20,0,x2,x4,256,8,200,c.sdsp,0)

inst_26:
// rs2==x19, rs2_val == 512, 
// opcode:c.sdsp; op1:x2; op2:x19; op2val:512; immval:248
TEST_STORE(x21,x20,0,x2,x19,512,248,208,c.sdsp,0)

inst_27:
// rs2==x12, rs2_val == 1024, 
// opcode:c.sdsp; op1:x2; op2:x12; op2val:1024; immval:496
TEST_STORE(x21,x20,0,x2,x12,1024,496,216,c.sdsp,0)

inst_28:
// rs2==x20, rs2_val == 4096, 
// opcode:c.sdsp; op1:x2; op2:x20; op2val:4096; immval:104
TEST_STORE(x21,x3,0,x2,x20,4096,104,224,c.sdsp,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_29:
// rs2==x21, rs2_val == 8192, 
// opcode:c.sdsp; op1:x2; op2:x21; op2val:8192; immval:136
TEST_STORE(x1,x3,0,x2,x21,8192,136,0,c.sdsp,0)

inst_30:
// rs2==x23, rs2_val == 16384, 
// opcode:c.sdsp; op1:x2; op2:x23; op2val:16384; immval:0
TEST_STORE(x1,x3,0,x2,x23,16384,0,8,c.sdsp,0)

inst_31:
// rs2==x29, rs2_val == 32768, 
// opcode:c.sdsp; op1:x2; op2:x29; op2val:32768; immval:472
TEST_STORE(x1,x3,0,x2,x29,32768,472,16,c.sdsp,0)

inst_32:
// rs2_val == 65536, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:65536; immval:248
TEST_STORE(x1,x3,0,x2,x10,65536,248,24,c.sdsp,0)

inst_33:
// rs2_val == 131072, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:131072; immval:440
TEST_STORE(x1,x3,0,x2,x10,131072,440,32,c.sdsp,0)

inst_34:
// rs2_val == 262144, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:262144; immval:32
TEST_STORE(x1,x3,0,x2,x10,262144,32,40,c.sdsp,0)

inst_35:
// rs2_val == 524288, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:524288; immval:88
TEST_STORE(x1,x3,0,x2,x10,524288,88,48,c.sdsp,0)

inst_36:
// rs2_val == 1048576, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:1048576; immval:496
TEST_STORE(x1,x3,0,x2,x10,1048576,496,56,c.sdsp,0)

inst_37:
// rs2_val == 4194304, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:4194304; immval:376
TEST_STORE(x1,x3,0,x2,x10,4194304,376,64,c.sdsp,0)

inst_38:
// rs2_val == 8388608, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:8388608; immval:472
TEST_STORE(x1,x3,0,x2,x10,8388608,472,72,c.sdsp,0)

inst_39:
// rs2_val == 16777216, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:16777216; immval:376
TEST_STORE(x1,x3,0,x2,x10,16777216,376,80,c.sdsp,0)

inst_40:
// rs2_val == 67108864, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:67108864; immval:8
TEST_STORE(x1,x3,0,x2,x10,67108864,8,88,c.sdsp,0)

inst_41:
// rs2_val == 134217728, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:134217728; immval:120
TEST_STORE(x1,x3,0,x2,x10,134217728,120,96,c.sdsp,0)

inst_42:
// rs2_val == 268435456, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:268435456; immval:24
TEST_STORE(x1,x3,0,x2,x10,268435456,24,104,c.sdsp,0)

inst_43:
// rs2_val == 536870912, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:536870912; immval:440
TEST_STORE(x1,x3,0,x2,x10,536870912,440,112,c.sdsp,0)

inst_44:
// rs2_val == 2147483648, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:2147483648; immval:16
TEST_STORE(x1,x3,0,x2,x10,2147483648,16,120,c.sdsp,0)

inst_45:
// rs2_val == 4294967296, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:4294967296; immval:0
TEST_STORE(x1,x3,0,x2,x10,4294967296,0,128,c.sdsp,0)

inst_46:
// rs2_val == 17179869184, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:17179869184; immval:336
TEST_STORE(x1,x3,0,x2,x10,17179869184,336,136,c.sdsp,0)

inst_47:
// rs2_val == 34359738368, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:34359738368; immval:504
TEST_STORE(x1,x3,0,x2,x10,34359738368,504,144,c.sdsp,0)

inst_48:
// rs2_val == 68719476736, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:68719476736; immval:72
TEST_STORE(x1,x3,0,x2,x10,68719476736,72,152,c.sdsp,0)

inst_49:
// rs2_val == 137438953472, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:137438953472; immval:488
TEST_STORE(x1,x3,0,x2,x10,137438953472,488,160,c.sdsp,0)

inst_50:
// rs2_val == 274877906944, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:274877906944; immval:24
TEST_STORE(x1,x3,0,x2,x10,274877906944,24,168,c.sdsp,0)

inst_51:
// rs2_val == 549755813888, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:549755813888; immval:496
TEST_STORE(x1,x3,0,x2,x10,549755813888,496,176,c.sdsp,0)

inst_52:
// rs2_val == 1099511627776, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:1099511627776; immval:16
TEST_STORE(x1,x3,0,x2,x10,1099511627776,16,184,c.sdsp,0)

inst_53:
// rs2_val == 2199023255552, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:2199023255552; immval:248
TEST_STORE(x1,x3,0,x2,x10,2199023255552,248,192,c.sdsp,0)

inst_54:
// rs2_val == 4398046511104, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:4398046511104; immval:64
TEST_STORE(x1,x3,0,x2,x10,4398046511104,64,200,c.sdsp,0)

inst_55:
// rs2_val == 8796093022208, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:8796093022208; immval:256
TEST_STORE(x1,x3,0,x2,x10,8796093022208,256,208,c.sdsp,0)

inst_56:
// rs2_val == 17592186044416, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:17592186044416; immval:496
TEST_STORE(x1,x3,0,x2,x10,17592186044416,496,216,c.sdsp,0)

inst_57:
// rs2_val == 35184372088832, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:35184372088832; immval:16
TEST_STORE(x1,x3,0,x2,x10,35184372088832,16,224,c.sdsp,0)

inst_58:
// rs2_val == 70368744177664, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:70368744177664; immval:336
TEST_STORE(x1,x3,0,x2,x10,70368744177664,336,232,c.sdsp,0)

inst_59:
// rs2_val == 140737488355328, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:140737488355328; immval:24
TEST_STORE(x1,x3,0,x2,x10,140737488355328,24,240,c.sdsp,0)

inst_60:
// rs2_val == 562949953421312, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:562949953421312; immval:88
TEST_STORE(x1,x3,0,x2,x10,562949953421312,88,248,c.sdsp,0)

inst_61:
// rs2_val == 1125899906842624, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:1125899906842624; immval:48
TEST_STORE(x1,x3,0,x2,x10,1125899906842624,48,256,c.sdsp,0)

inst_62:
// rs2_val == 2251799813685248, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:2251799813685248; immval:96
TEST_STORE(x1,x3,0,x2,x10,2251799813685248,96,264,c.sdsp,0)

inst_63:
// rs2_val == 18014398509481984, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:18014398509481984; immval:88
TEST_STORE(x1,x3,0,x2,x10,18014398509481984,88,272,c.sdsp,0)

inst_64:
// rs2_val == 36028797018963968, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:36028797018963968; immval:168
TEST_STORE(x1,x3,0,x2,x10,36028797018963968,168,280,c.sdsp,0)

inst_65:
// rs2_val == 72057594037927936, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:72057594037927936; immval:488
TEST_STORE(x1,x3,0,x2,x10,72057594037927936,488,288,c.sdsp,0)

inst_66:
// rs2_val == 144115188075855872, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:144115188075855872; immval:48
TEST_STORE(x1,x3,0,x2,x10,144115188075855872,48,296,c.sdsp,0)

inst_67:
// rs2_val == 288230376151711744, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:288230376151711744; immval:16
TEST_STORE(x1,x3,0,x2,x10,288230376151711744,16,304,c.sdsp,0)

inst_68:
// rs2_val == 576460752303423488, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:576460752303423488; immval:72
TEST_STORE(x1,x3,0,x2,x10,576460752303423488,72,312,c.sdsp,0)

inst_69:
// rs2_val == 1152921504606846976, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:1152921504606846976; immval:248
TEST_STORE(x1,x3,0,x2,x10,1152921504606846976,248,320,c.sdsp,0)

inst_70:
// rs2_val == 2305843009213693952, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:2305843009213693952; immval:376
TEST_STORE(x1,x3,0,x2,x10,2305843009213693952,376,328,c.sdsp,0)

inst_71:
// rs2_val == -35184372088833, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-35184372088833; immval:48
TEST_STORE(x1,x3,0,x2,x10,-35184372088833,48,336,c.sdsp,0)

inst_72:
// rs2_val == -70368744177665, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-70368744177665; immval:256
TEST_STORE(x1,x3,0,x2,x10,-70368744177665,256,344,c.sdsp,0)

inst_73:
// rs2_val == -140737488355329, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-140737488355329; immval:112
TEST_STORE(x1,x3,0,x2,x10,-140737488355329,112,352,c.sdsp,0)

inst_74:
// rs2_val == -281474976710657, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-281474976710657; immval:88
TEST_STORE(x1,x3,0,x2,x10,-281474976710657,88,360,c.sdsp,0)

inst_75:
// rs2_val == -562949953421313, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-562949953421313; immval:32
TEST_STORE(x1,x3,0,x2,x10,-562949953421313,32,368,c.sdsp,0)

inst_76:
// rs2_val == -1125899906842625, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-1125899906842625; immval:248
TEST_STORE(x1,x3,0,x2,x10,-1125899906842625,248,376,c.sdsp,0)

inst_77:
// rs2_val == -2251799813685249, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-2251799813685249; immval:48
TEST_STORE(x1,x3,0,x2,x10,-2251799813685249,48,384,c.sdsp,0)

inst_78:
// rs2_val == -4503599627370497, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-4503599627370497; immval:88
TEST_STORE(x1,x3,0,x2,x10,-4503599627370497,88,392,c.sdsp,0)

inst_79:
// rs2_val == -9007199254740993, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-9007199254740993; immval:472
TEST_STORE(x1,x3,0,x2,x10,-9007199254740993,472,400,c.sdsp,0)

inst_80:
// rs2_val == -18014398509481985, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-18014398509481985; immval:144
TEST_STORE(x1,x3,0,x2,x10,-18014398509481985,144,408,c.sdsp,0)

inst_81:
// rs2_val == -36028797018963969, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-36028797018963969; immval:24
TEST_STORE(x1,x3,0,x2,x10,-36028797018963969,24,416,c.sdsp,0)

inst_82:
// rs2_val == -72057594037927937, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-72057594037927937; immval:376
TEST_STORE(x1,x3,0,x2,x10,-72057594037927937,376,424,c.sdsp,0)

inst_83:
// rs2_val == -144115188075855873, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-144115188075855873; immval:72
TEST_STORE(x1,x3,0,x2,x10,-144115188075855873,72,432,c.sdsp,0)

inst_84:
// rs2_val == -288230376151711745, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-288230376151711745; immval:104
TEST_STORE(x1,x3,0,x2,x10,-288230376151711745,104,440,c.sdsp,0)

inst_85:
// rs2_val == -576460752303423489, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-576460752303423489; immval:168
TEST_STORE(x1,x3,0,x2,x10,-576460752303423489,168,448,c.sdsp,0)

inst_86:
// rs2_val == -1152921504606846977, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-1152921504606846977; immval:32
TEST_STORE(x1,x3,0,x2,x10,-1152921504606846977,32,456,c.sdsp,0)

inst_87:
// rs2_val == -2305843009213693953, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-2305843009213693953; immval:440
TEST_STORE(x1,x3,0,x2,x10,-2305843009213693953,440,464,c.sdsp,0)

inst_88:
// rs2_val == -4611686018427387905, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-4611686018427387905; immval:376
TEST_STORE(x1,x3,0,x2,x10,-4611686018427387905,376,472,c.sdsp,0)

inst_89:
// rs2_val == 6148914691236517205, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:6148914691236517205; immval:48
TEST_STORE(x1,x3,0,x2,x10,6148914691236517205,48,480,c.sdsp,0)

inst_90:
// rs2_val == -6148914691236517206, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-6148914691236517206; immval:40
TEST_STORE(x1,x3,0,x2,x10,-6148914691236517206,40,488,c.sdsp,0)

inst_91:
// rs2_val == 4611686018427387904, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:4611686018427387904; immval:40
TEST_STORE(x1,x3,0,x2,x10,4611686018427387904,40,496,c.sdsp,0)

inst_92:
// rs2_val == -2, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-2; immval:256
TEST_STORE(x1,x3,0,x2,x10,-2,256,504,c.sdsp,0)

inst_93:
// rs2_val == -3, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-3; immval:48
TEST_STORE(x1,x3,0,x2,x10,-3,48,512,c.sdsp,0)

inst_94:
// rs2_val == -5, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-5; immval:120
TEST_STORE(x1,x3,0,x2,x10,-5,120,520,c.sdsp,0)

inst_95:
// rs2_val == -9, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-9; immval:72
TEST_STORE(x1,x3,0,x2,x10,-9,72,528,c.sdsp,0)

inst_96:
// rs2_val == -33, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-33; immval:256
TEST_STORE(x1,x3,0,x2,x10,-33,256,536,c.sdsp,0)

inst_97:
// rs2_val == -65, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-65; immval:496
TEST_STORE(x1,x3,0,x2,x10,-65,496,544,c.sdsp,0)

inst_98:
// rs2_val == -257, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-257; immval:16
TEST_STORE(x1,x3,0,x2,x10,-257,16,552,c.sdsp,0)

inst_99:
// rs2_val == -513, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-513; immval:56
TEST_STORE(x1,x3,0,x2,x10,-513,56,560,c.sdsp,0)

inst_100:
// rs2_val == -1025, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-1025; immval:0
TEST_STORE(x1,x3,0,x2,x10,-1025,0,568,c.sdsp,0)

inst_101:
// rs2_val == -2049, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-2049; immval:336
TEST_STORE(x1,x3,0,x2,x10,-2049,336,576,c.sdsp,0)

inst_102:
// rs2_val == -4097, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-4097; immval:56
TEST_STORE(x1,x3,0,x2,x10,-4097,56,584,c.sdsp,0)

inst_103:
// rs2_val == -8193, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-8193; immval:64
TEST_STORE(x1,x3,0,x2,x10,-8193,64,592,c.sdsp,0)

inst_104:
// rs2_val == -32769, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-32769; immval:40
TEST_STORE(x1,x3,0,x2,x10,-32769,40,600,c.sdsp,0)

inst_105:
// rs2_val == -65537, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-65537; immval:56
TEST_STORE(x1,x3,0,x2,x10,-65537,56,608,c.sdsp,0)

inst_106:
// rs2_val == -131073, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-131073; immval:472
TEST_STORE(x1,x3,0,x2,x10,-131073,472,616,c.sdsp,0)

inst_107:
// rs2_val == -262145, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-262145; immval:152
TEST_STORE(x1,x3,0,x2,x10,-262145,152,624,c.sdsp,0)

inst_108:
// rs2_val == -524289, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-524289; immval:168
TEST_STORE(x1,x3,0,x2,x10,-524289,168,632,c.sdsp,0)

inst_109:
// rs2_val == -1048577, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-1048577; immval:80
TEST_STORE(x1,x3,0,x2,x10,-1048577,80,640,c.sdsp,0)

inst_110:
// rs2_val == -2097153, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-2097153; immval:112
TEST_STORE(x1,x3,0,x2,x10,-2097153,112,648,c.sdsp,0)

inst_111:
// rs2_val == -4194305, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-4194305; immval:472
TEST_STORE(x1,x3,0,x2,x10,-4194305,472,656,c.sdsp,0)

inst_112:
// rs2_val == -8388609, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-8388609; immval:248
TEST_STORE(x1,x3,0,x2,x10,-8388609,248,664,c.sdsp,0)

inst_113:
// rs2_val == -16777217, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-16777217; immval:128
TEST_STORE(x1,x3,0,x2,x10,-16777217,128,672,c.sdsp,0)

inst_114:
// rs2_val == -33554433, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-33554433; immval:96
TEST_STORE(x1,x3,0,x2,x10,-33554433,96,680,c.sdsp,0)

inst_115:
// rs2_val == -67108865, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-67108865; immval:112
TEST_STORE(x1,x3,0,x2,x10,-67108865,112,688,c.sdsp,0)

inst_116:
// rs2_val == -134217729, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-134217729; immval:168
TEST_STORE(x1,x3,0,x2,x10,-134217729,168,696,c.sdsp,0)

inst_117:
// rs2_val == -268435457, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-268435457; immval:24
TEST_STORE(x1,x3,0,x2,x10,-268435457,24,704,c.sdsp,0)

inst_118:
// rs2_val == -536870913, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-536870913; immval:440
TEST_STORE(x1,x3,0,x2,x10,-536870913,440,712,c.sdsp,0)

inst_119:
// rs2_val == -1073741825, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-1073741825; immval:8
TEST_STORE(x1,x3,0,x2,x10,-1073741825,8,720,c.sdsp,0)

inst_120:
// rs2_val == -2147483649, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-2147483649; immval:136
TEST_STORE(x1,x3,0,x2,x10,-2147483649,136,728,c.sdsp,0)

inst_121:
// rs2_val == -4294967297, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-4294967297; immval:136
TEST_STORE(x1,x3,0,x2,x10,-4294967297,136,736,c.sdsp,0)

inst_122:
// rs2_val == -8589934593, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-8589934593; immval:248
TEST_STORE(x1,x3,0,x2,x10,-8589934593,248,744,c.sdsp,0)

inst_123:
// rs2_val == -17179869185, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-17179869185; immval:136
TEST_STORE(x1,x3,0,x2,x10,-17179869185,136,752,c.sdsp,0)

inst_124:
// rs2_val == -34359738369, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-34359738369; immval:504
TEST_STORE(x1,x3,0,x2,x10,-34359738369,504,760,c.sdsp,0)

inst_125:
// rs2_val == -68719476737, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-68719476737; immval:80
TEST_STORE(x1,x3,0,x2,x10,-68719476737,80,768,c.sdsp,0)

inst_126:
// rs2_val == -137438953473, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-137438953473; immval:488
TEST_STORE(x1,x3,0,x2,x10,-137438953473,488,776,c.sdsp,0)

inst_127:
// rs2_val == -274877906945, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-274877906945; immval:440
TEST_STORE(x1,x3,0,x2,x10,-274877906945,440,784,c.sdsp,0)

inst_128:
// rs2_val == -549755813889, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-549755813889; immval:112
TEST_STORE(x1,x3,0,x2,x10,-549755813889,112,792,c.sdsp,0)

inst_129:
// rs2_val == -1099511627777, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-1099511627777; immval:128
TEST_STORE(x1,x3,0,x2,x10,-1099511627777,128,800,c.sdsp,0)

inst_130:
// rs2_val == -2199023255553, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-2199023255553; immval:168
TEST_STORE(x1,x3,0,x2,x10,-2199023255553,168,808,c.sdsp,0)

inst_131:
// rs2_val == -4398046511105, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-4398046511105; immval:256
TEST_STORE(x1,x3,0,x2,x10,-4398046511105,256,816,c.sdsp,0)

inst_132:
// rs2_val == -8796093022209, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-8796093022209; immval:152
TEST_STORE(x1,x3,0,x2,x10,-8796093022209,152,824,c.sdsp,0)

inst_133:
// rs2_val == -17592186044417, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-17592186044417; immval:96
TEST_STORE(x1,x3,0,x2,x10,-17592186044417,96,832,c.sdsp,0)

inst_134:
// imm_val == 32, rs2_val == 9007199254740992
// opcode:c.sdsp; op1:x2; op2:x10; op2val:9007199254740992; immval:32
TEST_STORE(x1,x3,0,x2,x10,9007199254740992,32,840,c.sdsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 29*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 106*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
