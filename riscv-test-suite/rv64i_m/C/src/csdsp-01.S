
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:43:09 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sdsp instruction of the RISC-V C extension for the csdsp covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*C.*);def TEST_CASE_1=True;",csdsp)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs2==x20, rs2_val == (-2**(xlen-1)), imm_val == 248, imm_val > 0, rs2_val == -9223372036854775808
// opcode:c.sdsp; op1:x2; op2:x20; op2val:-0x8000000000000000; immval:0xf8
TEST_STORE(x1,x5,0,x2,x20,-0x8000000000000000,0xf8,0,c.sdsp,0)

inst_1:
// rs2==x10, rs2_val == 0, imm_val == 256
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x0; immval:0x100
TEST_STORE(x1,x5,0,x2,x10,0x0,0x100,8,c.sdsp,0)

inst_2:
// rs2==x23, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode:c.sdsp; op1:x2; op2:x23; op2val:0x7fffffffffffffff; immval:0x78
TEST_STORE(x1,x5,0,x2,x23,0x7fffffffffffffff,0x78,16,c.sdsp,0)

inst_3:
// rs2==x25, rs2_val == 1, imm_val == 168
// opcode:c.sdsp; op1:x2; op2:x25; op2val:0x1; immval:0xa8
TEST_STORE(x1,x5,0,x2,x25,0x1,0xa8,24,c.sdsp,0)

inst_4:
// rs2==x11, imm_val == 0, rs2_val == -36028797018963969
// opcode:c.sdsp; op1:x2; op2:x11; op2val:-0x80000000000001; immval:0x0
TEST_STORE(x1,x5,0,x2,x11,-0x80000000000001,0x0,32,c.sdsp,0)

inst_5:
// rs2==x30, rs2_val == 2, 
// opcode:c.sdsp; op1:x2; op2:x30; op2val:0x2; immval:0x50
TEST_STORE(x1,x5,0,x2,x30,0x2,0x50,40,c.sdsp,0)

inst_6:
// rs2==x6, rs2_val == 4, imm_val == 128
// opcode:c.sdsp; op1:x2; op2:x6; op2val:0x4; immval:0x80
TEST_STORE(x1,x5,0,x2,x6,0x4,0x80,48,c.sdsp,0)

inst_7:
// rs2==x8, rs2_val == 8, 
// opcode:c.sdsp; op1:x2; op2:x8; op2val:0x8; immval:0x38
TEST_STORE(x1,x5,0,x2,x8,0x8,0x38,56,c.sdsp,0)

inst_8:
// rs2==x26, rs2_val == 16, imm_val == 440
// opcode:c.sdsp; op1:x2; op2:x26; op2val:0x10; immval:0x1b8
TEST_STORE(x1,x5,0,x2,x26,0x10,0x1b8,64,c.sdsp,0)

inst_9:
// rs2==x24, rs2_val == 32, 
// opcode:c.sdsp; op1:x2; op2:x24; op2val:0x20; immval:0x48
TEST_STORE(x1,x5,0,x2,x24,0x20,0x48,72,c.sdsp,0)

inst_10:
// rs2==x15, rs2_val == 64, 
// opcode:c.sdsp; op1:x2; op2:x15; op2val:0x40; immval:0x58
TEST_STORE(x1,x5,0,x2,x15,0x40,0x58,80,c.sdsp,0)

inst_11:
// rs2==x31, rs2_val == 128, 
// opcode:c.sdsp; op1:x2; op2:x31; op2val:0x80; immval:0x38
TEST_STORE(x1,x5,0,x2,x31,0x80,0x38,88,c.sdsp,0)

inst_12:
// rs2==x3, rs2_val == 256, imm_val == 64
// opcode:c.sdsp; op1:x2; op2:x3; op2val:0x100; immval:0x40
TEST_STORE(x1,x5,0,x2,x3,0x100,0x40,96,c.sdsp,0)

inst_13:
// rs2==x4, rs2_val == 512, 
// opcode:c.sdsp; op1:x2; op2:x4; op2val:0x200; immval:0x78
TEST_STORE(x1,x5,0,x2,x4,0x200,0x78,104,c.sdsp,0)

inst_14:
// rs2==x14, rs2_val == 1024, imm_val == 488
// opcode:c.sdsp; op1:x2; op2:x14; op2val:0x400; immval:0x1e8
TEST_STORE(x1,x5,0,x2,x14,0x400,0x1e8,112,c.sdsp,0)

inst_15:
// rs2==x7, rs2_val == 2048, 
// opcode:c.sdsp; op1:x2; op2:x7; op2val:0x800; immval:0x70
TEST_STORE(x1,x5,0,x2,x7,0x800,0x70,120,c.sdsp,0)

inst_16:
// rs2==x19, rs2_val == 4096, 
// opcode:c.sdsp; op1:x2; op2:x19; op2val:0x1000; immval:0x1b8
TEST_STORE(x1,x5,0,x2,x19,0x1000,0x1b8,128,c.sdsp,0)

inst_17:
// rs2==x17, rs2_val == 8192, 
// opcode:c.sdsp; op1:x2; op2:x17; op2val:0x2000; immval:0x90
TEST_STORE(x1,x5,0,x2,x17,0x2000,0x90,136,c.sdsp,0)

inst_18:
// rs2==x27, rs2_val == 16384, 
// opcode:c.sdsp; op1:x2; op2:x27; op2val:0x4000; immval:0x68
TEST_STORE(x1,x5,0,x2,x27,0x4000,0x68,144,c.sdsp,0)

inst_19:
// rs2==x12, rs2_val == 32768, 
// opcode:c.sdsp; op1:x2; op2:x12; op2val:0x8000; immval:0x100
TEST_STORE(x1,x5,0,x2,x12,0x8000,0x100,152,c.sdsp,0)

inst_20:
// rs2==x29, rs2_val == 65536, 
// opcode:c.sdsp; op1:x2; op2:x29; op2val:0x10000; immval:0x30
TEST_STORE(x1,x5,0,x2,x29,0x10000,0x30,160,c.sdsp,0)

inst_21:
// rs2==x9, rs2_val == 131072, imm_val == 496
// opcode:c.sdsp; op1:x2; op2:x9; op2val:0x20000; immval:0x1f0
TEST_STORE(x1,x5,0,x2,x9,0x20000,0x1f0,168,c.sdsp,0)

inst_22:
// rs2==x18, rs2_val == 262144, 
// opcode:c.sdsp; op1:x2; op2:x18; op2val:0x40000; immval:0x1b8
TEST_STORE(x1,x5,0,x2,x18,0x40000,0x1b8,176,c.sdsp,0)

inst_23:
// rs2==x16, rs2_val == 524288, 
// opcode:c.sdsp; op1:x2; op2:x16; op2val:0x80000; immval:0x1e8
TEST_STORE(x1,x5,0,x2,x16,0x80000,0x1e8,184,c.sdsp,0)

inst_24:
// rs2==x22, rs2_val == 1048576, imm_val == 32
// opcode:c.sdsp; op1:x2; op2:x22; op2val:0x100000; immval:0x20
TEST_STORE(x1,x5,0,x2,x22,0x100000,0x20,192,c.sdsp,0)

inst_25:
// rs2==x13, rs2_val == 2097152, 
// opcode:c.sdsp; op1:x2; op2:x13; op2val:0x200000; immval:0x20
TEST_STORE(x1,x5,0,x2,x13,0x200000,0x20,200,c.sdsp,0)

inst_26:
// rs2==x21, rs2_val == 4194304, 
// opcode:c.sdsp; op1:x2; op2:x21; op2val:0x400000; immval:0x20
TEST_STORE(x1,x4,0,x2,x21,0x400000,0x20,208,c.sdsp,0)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_27:
// rs2==x1, rs2_val == 8388608, 
// opcode:c.sdsp; op1:x2; op2:x1; op2val:0x800000; immval:0x80
TEST_STORE(x3,x4,0,x2,x1,0x800000,0x80,0,c.sdsp,0)

inst_28:
// rs2==x5, rs2_val == 16777216, 
// opcode:c.sdsp; op1:x2; op2:x5; op2val:0x1000000; immval:0x100
TEST_STORE(x3,x4,0,x2,x5,0x1000000,0x100,8,c.sdsp,0)

inst_29:
// rs2==x28, rs2_val == 33554432, 
// opcode:c.sdsp; op1:x2; op2:x28; op2val:0x2000000; immval:0x18
TEST_STORE(x3,x4,0,x2,x28,0x2000000,0x18,16,c.sdsp,0)

inst_30:
// rs2_val == 67108864, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x4000000; immval:0x98
TEST_STORE(x3,x4,0,x2,x10,0x4000000,0x98,24,c.sdsp,0)

inst_31:
// rs2_val == 134217728, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x8000000; immval:0x58
TEST_STORE(x3,x4,0,x2,x10,0x8000000,0x58,32,c.sdsp,0)

inst_32:
// rs2_val == 268435456, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x10000000; immval:0x68
TEST_STORE(x3,x4,0,x2,x10,0x10000000,0x68,40,c.sdsp,0)

inst_33:
// rs2_val == 536870912, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x20000000; immval:0x1f8
TEST_STORE(x3,x4,0,x2,x10,0x20000000,0x1f8,48,c.sdsp,0)

inst_34:
// rs2_val == 1073741824, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x40000000; immval:0x1f8
TEST_STORE(x3,x4,0,x2,x10,0x40000000,0x1f8,56,c.sdsp,0)

inst_35:
// rs2_val == 2147483648, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x80000000; immval:0xa8
TEST_STORE(x3,x4,0,x2,x10,0x80000000,0xa8,64,c.sdsp,0)

inst_36:
// rs2_val == 4294967296, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x100000000; immval:0x68
TEST_STORE(x3,x4,0,x2,x10,0x100000000,0x68,72,c.sdsp,0)

inst_37:
// rs2_val == 8589934592, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x200000000; immval:0x100
TEST_STORE(x3,x4,0,x2,x10,0x200000000,0x100,80,c.sdsp,0)

inst_38:
// rs2_val == 17179869184, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x400000000; immval:0x60
TEST_STORE(x3,x4,0,x2,x10,0x400000000,0x60,88,c.sdsp,0)

inst_39:
// rs2_val == 34359738368, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x800000000; immval:0x50
TEST_STORE(x3,x4,0,x2,x10,0x800000000,0x50,96,c.sdsp,0)

inst_40:
// rs2_val == 68719476736, imm_val == 8
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x1000000000; immval:0x8
TEST_STORE(x3,x4,0,x2,x10,0x1000000000,0x8,104,c.sdsp,0)

inst_41:
// rs2_val == 137438953472, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x2000000000; immval:0x1f8
TEST_STORE(x3,x4,0,x2,x10,0x2000000000,0x1f8,112,c.sdsp,0)

inst_42:
// rs2_val == 274877906944, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x4000000000; immval:0x80
TEST_STORE(x3,x4,0,x2,x10,0x4000000000,0x80,120,c.sdsp,0)

inst_43:
// rs2_val == 549755813888, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x8000000000; immval:0x1e8
TEST_STORE(x3,x4,0,x2,x10,0x8000000000,0x1e8,128,c.sdsp,0)

inst_44:
// rs2_val == 1099511627776, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x10000000000; immval:0x0
TEST_STORE(x3,x4,0,x2,x10,0x10000000000,0x0,136,c.sdsp,0)

inst_45:
// rs2_val == 2199023255552, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x20000000000; immval:0x70
TEST_STORE(x3,x4,0,x2,x10,0x20000000000,0x70,144,c.sdsp,0)

inst_46:
// rs2_val == 4398046511104, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x40000000000; immval:0x70
TEST_STORE(x3,x4,0,x2,x10,0x40000000000,0x70,152,c.sdsp,0)

inst_47:
// rs2_val == 8796093022208, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x80000000000; immval:0x1e8
TEST_STORE(x3,x4,0,x2,x10,0x80000000000,0x1e8,160,c.sdsp,0)

inst_48:
// rs2_val == 17592186044416, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x100000000000; immval:0x1e8
TEST_STORE(x3,x4,0,x2,x10,0x100000000000,0x1e8,168,c.sdsp,0)

inst_49:
// rs2_val == 35184372088832, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x200000000000; immval:0x28
TEST_STORE(x3,x4,0,x2,x10,0x200000000000,0x28,176,c.sdsp,0)

inst_50:
// rs2_val == 70368744177664, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x400000000000; immval:0x58
TEST_STORE(x3,x4,0,x2,x10,0x400000000000,0x58,184,c.sdsp,0)

inst_51:
// rs2_val == 140737488355328, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x800000000000; immval:0x18
TEST_STORE(x3,x4,0,x2,x10,0x800000000000,0x18,192,c.sdsp,0)

inst_52:
// rs2_val == 281474976710656, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x1000000000000; immval:0x90
TEST_STORE(x3,x4,0,x2,x10,0x1000000000000,0x90,200,c.sdsp,0)

inst_53:
// rs2_val == 562949953421312, imm_val == 472
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x2000000000000; immval:0x1d8
TEST_STORE(x3,x4,0,x2,x10,0x2000000000000,0x1d8,208,c.sdsp,0)

inst_54:
// rs2_val == 1125899906842624, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x4000000000000; immval:0x1b8
TEST_STORE(x3,x4,0,x2,x10,0x4000000000000,0x1b8,216,c.sdsp,0)

inst_55:
// rs2_val == 2251799813685248, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x8000000000000; immval:0x20
TEST_STORE(x3,x4,0,x2,x10,0x8000000000000,0x20,224,c.sdsp,0)

inst_56:
// rs2_val == 4503599627370496, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x10000000000000; immval:0xa8
TEST_STORE(x3,x4,0,x2,x10,0x10000000000000,0xa8,232,c.sdsp,0)

inst_57:
// rs2_val == 9007199254740992, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x20000000000000; immval:0x98
TEST_STORE(x3,x4,0,x2,x10,0x20000000000000,0x98,240,c.sdsp,0)

inst_58:
// rs2_val == 18014398509481984, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x40000000000000; immval:0x1e8
TEST_STORE(x3,x4,0,x2,x10,0x40000000000000,0x1e8,248,c.sdsp,0)

inst_59:
// rs2_val == 36028797018963968, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x80000000000000; immval:0x60
TEST_STORE(x3,x4,0,x2,x10,0x80000000000000,0x60,256,c.sdsp,0)

inst_60:
// rs2_val == 72057594037927936, imm_val == 16
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x100000000000000; immval:0x10
TEST_STORE(x3,x4,0,x2,x10,0x100000000000000,0x10,264,c.sdsp,0)

inst_61:
// rs2_val == 144115188075855872, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x200000000000000; immval:0x1f8
TEST_STORE(x3,x4,0,x2,x10,0x200000000000000,0x1f8,272,c.sdsp,0)

inst_62:
// rs2_val == 288230376151711744, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x400000000000000; immval:0x48
TEST_STORE(x3,x4,0,x2,x10,0x400000000000000,0x48,280,c.sdsp,0)

inst_63:
// rs2_val == 576460752303423488, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x800000000000000; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,0x800000000000000,0x30,288,c.sdsp,0)

inst_64:
// rs2_val == 1152921504606846976, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x1000000000000000; immval:0xa8
TEST_STORE(x3,x4,0,x2,x10,0x1000000000000000,0xa8,296,c.sdsp,0)

inst_65:
// rs2_val == 2305843009213693952, imm_val == 336
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x2000000000000000; immval:0x150
TEST_STORE(x3,x4,0,x2,x10,0x2000000000000000,0x150,304,c.sdsp,0)

inst_66:
// rs2_val == 4611686018427387904, imm_val == 376
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x4000000000000000; immval:0x178
TEST_STORE(x3,x4,0,x2,x10,0x4000000000000000,0x178,312,c.sdsp,0)

inst_67:
// rs2_val == -2, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x2; immval:0x70
TEST_STORE(x3,x4,0,x2,x10,-0x2,0x70,320,c.sdsp,0)

inst_68:
// rs2_val == -576460752303423489, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x800000000000001; immval:0x28
TEST_STORE(x3,x4,0,x2,x10,-0x800000000000001,0x28,328,c.sdsp,0)

inst_69:
// rs2_val == -1152921504606846977, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x1000000000000001; immval:0x80
TEST_STORE(x3,x4,0,x2,x10,-0x1000000000000001,0x80,336,c.sdsp,0)

inst_70:
// rs2_val == -2305843009213693953, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x2000000000000001; immval:0xa8
TEST_STORE(x3,x4,0,x2,x10,-0x2000000000000001,0xa8,344,c.sdsp,0)

inst_71:
// rs2_val == -4611686018427387905, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x4000000000000001; immval:0x80
TEST_STORE(x3,x4,0,x2,x10,-0x4000000000000001,0x80,352,c.sdsp,0)

inst_72:
// rs2_val == 6148914691236517205, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:0x5555555555555555; immval:0x70
TEST_STORE(x3,x4,0,x2,x10,0x5555555555555555,0x70,360,c.sdsp,0)

inst_73:
// rs2_val == -6148914691236517206, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x5555555555555556; immval:0xa8
TEST_STORE(x3,x4,0,x2,x10,-0x5555555555555556,0xa8,368,c.sdsp,0)

inst_74:
// rs2_val == -3, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x3; immval:0xf8
TEST_STORE(x3,x4,0,x2,x10,-0x3,0xf8,376,c.sdsp,0)

inst_75:
// rs2_val == -5, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x5; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,-0x5,0x30,384,c.sdsp,0)

inst_76:
// rs2_val == -9, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x9; immval:0x18
TEST_STORE(x3,x4,0,x2,x10,-0x9,0x18,392,c.sdsp,0)

inst_77:
// rs2_val == -17, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x11; immval:0x40
TEST_STORE(x3,x4,0,x2,x10,-0x11,0x40,400,c.sdsp,0)

inst_78:
// rs2_val == -33, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x21; immval:0x50
TEST_STORE(x3,x4,0,x2,x10,-0x21,0x50,408,c.sdsp,0)

inst_79:
// rs2_val == -65, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x41; immval:0x40
TEST_STORE(x3,x4,0,x2,x10,-0x41,0x40,416,c.sdsp,0)

inst_80:
// rs2_val == -129, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x81; immval:0x90
TEST_STORE(x3,x4,0,x2,x10,-0x81,0x90,424,c.sdsp,0)

inst_81:
// rs2_val == -257, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x101; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,-0x101,0x30,432,c.sdsp,0)

inst_82:
// rs2_val == -513, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x201; immval:0x0
TEST_STORE(x3,x4,0,x2,x10,-0x201,0x0,440,c.sdsp,0)

inst_83:
// rs2_val == -1025, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x401; immval:0x18
TEST_STORE(x3,x4,0,x2,x10,-0x401,0x18,448,c.sdsp,0)

inst_84:
// rs2_val == -2049, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x801; immval:0x1e8
TEST_STORE(x3,x4,0,x2,x10,-0x801,0x1e8,456,c.sdsp,0)

inst_85:
// rs2_val == -4097, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x1001; immval:0x60
TEST_STORE(x3,x4,0,x2,x10,-0x1001,0x60,464,c.sdsp,0)

inst_86:
// rs2_val == -8193, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x2001; immval:0x58
TEST_STORE(x3,x4,0,x2,x10,-0x2001,0x58,472,c.sdsp,0)

inst_87:
// rs2_val == -16385, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x4001; immval:0x38
TEST_STORE(x3,x4,0,x2,x10,-0x4001,0x38,480,c.sdsp,0)

inst_88:
// rs2_val == -32769, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x8001; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,-0x8001,0x30,488,c.sdsp,0)

inst_89:
// rs2_val == -65537, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x10001; immval:0x60
TEST_STORE(x3,x4,0,x2,x10,-0x10001,0x60,496,c.sdsp,0)

inst_90:
// rs2_val == -131073, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x20001; immval:0x50
TEST_STORE(x3,x4,0,x2,x10,-0x20001,0x50,504,c.sdsp,0)

inst_91:
// rs2_val == -262145, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x40001; immval:0x1d8
TEST_STORE(x3,x4,0,x2,x10,-0x40001,0x1d8,512,c.sdsp,0)

inst_92:
// rs2_val == -524289, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x80001; immval:0x98
TEST_STORE(x3,x4,0,x2,x10,-0x80001,0x98,520,c.sdsp,0)

inst_93:
// rs2_val == -1048577, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x100001; immval:0x1f8
TEST_STORE(x3,x4,0,x2,x10,-0x100001,0x1f8,528,c.sdsp,0)

inst_94:
// rs2_val == -2097153, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x200001; immval:0x98
TEST_STORE(x3,x4,0,x2,x10,-0x200001,0x98,536,c.sdsp,0)

inst_95:
// rs2_val == -4194305, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x400001; immval:0x0
TEST_STORE(x3,x4,0,x2,x10,-0x400001,0x0,544,c.sdsp,0)

inst_96:
// rs2_val == -8388609, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x800001; immval:0x1b8
TEST_STORE(x3,x4,0,x2,x10,-0x800001,0x1b8,552,c.sdsp,0)

inst_97:
// rs2_val == -16777217, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x1000001; immval:0x68
TEST_STORE(x3,x4,0,x2,x10,-0x1000001,0x68,560,c.sdsp,0)

inst_98:
// rs2_val == -33554433, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x2000001; immval:0x50
TEST_STORE(x3,x4,0,x2,x10,-0x2000001,0x50,568,c.sdsp,0)

inst_99:
// rs2_val == -67108865, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x4000001; immval:0x48
TEST_STORE(x3,x4,0,x2,x10,-0x4000001,0x48,576,c.sdsp,0)

inst_100:
// rs2_val == -134217729, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x8000001; immval:0x60
TEST_STORE(x3,x4,0,x2,x10,-0x8000001,0x60,584,c.sdsp,0)

inst_101:
// rs2_val == -268435457, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x10000001; immval:0x88
TEST_STORE(x3,x4,0,x2,x10,-0x10000001,0x88,592,c.sdsp,0)

inst_102:
// rs2_val == -536870913, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x20000001; immval:0x38
TEST_STORE(x3,x4,0,x2,x10,-0x20000001,0x38,600,c.sdsp,0)

inst_103:
// rs2_val == -1073741825, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x40000001; immval:0x1b8
TEST_STORE(x3,x4,0,x2,x10,-0x40000001,0x1b8,608,c.sdsp,0)

inst_104:
// rs2_val == -2147483649, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x80000001; immval:0x20
TEST_STORE(x3,x4,0,x2,x10,-0x80000001,0x20,616,c.sdsp,0)

inst_105:
// rs2_val == -4294967297, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x100000001; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,-0x100000001,0x30,624,c.sdsp,0)

inst_106:
// rs2_val == -8589934593, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x200000001; immval:0x98
TEST_STORE(x3,x4,0,x2,x10,-0x200000001,0x98,632,c.sdsp,0)

inst_107:
// rs2_val == -17179869185, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x400000001; immval:0x1f8
TEST_STORE(x3,x4,0,x2,x10,-0x400000001,0x1f8,640,c.sdsp,0)

inst_108:
// rs2_val == -34359738369, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x800000001; immval:0x0
TEST_STORE(x3,x4,0,x2,x10,-0x800000001,0x0,648,c.sdsp,0)

inst_109:
// rs2_val == -68719476737, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x1000000001; immval:0x88
TEST_STORE(x3,x4,0,x2,x10,-0x1000000001,0x88,656,c.sdsp,0)

inst_110:
// rs2_val == -137438953473, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x2000000001; immval:0xa8
TEST_STORE(x3,x4,0,x2,x10,-0x2000000001,0xa8,664,c.sdsp,0)

inst_111:
// rs2_val == -274877906945, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x4000000001; immval:0x1d8
TEST_STORE(x3,x4,0,x2,x10,-0x4000000001,0x1d8,672,c.sdsp,0)

inst_112:
// rs2_val == -549755813889, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x8000000001; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,-0x8000000001,0x30,680,c.sdsp,0)

inst_113:
// rs2_val == -1099511627777, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x10000000001; immval:0xa8
TEST_STORE(x3,x4,0,x2,x10,-0x10000000001,0xa8,688,c.sdsp,0)

inst_114:
// rs2_val == -2199023255553, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x20000000001; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,-0x20000000001,0x30,696,c.sdsp,0)

inst_115:
// rs2_val == -4398046511105, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x40000000001; immval:0xf8
TEST_STORE(x3,x4,0,x2,x10,-0x40000000001,0xf8,704,c.sdsp,0)

inst_116:
// rs2_val == -8796093022209, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x80000000001; immval:0x88
TEST_STORE(x3,x4,0,x2,x10,-0x80000000001,0x88,712,c.sdsp,0)

inst_117:
// rs2_val == -17592186044417, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x100000000001; immval:0x98
TEST_STORE(x3,x4,0,x2,x10,-0x100000000001,0x98,720,c.sdsp,0)

inst_118:
// rs2_val == -35184372088833, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x200000000001; immval:0x1f0
TEST_STORE(x3,x4,0,x2,x10,-0x200000000001,0x1f0,728,c.sdsp,0)

inst_119:
// rs2_val == -70368744177665, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x400000000001; immval:0x20
TEST_STORE(x3,x4,0,x2,x10,-0x400000000001,0x20,736,c.sdsp,0)

inst_120:
// rs2_val == -140737488355329, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x800000000001; immval:0x1e8
TEST_STORE(x3,x4,0,x2,x10,-0x800000000001,0x1e8,744,c.sdsp,0)

inst_121:
// rs2_val == -281474976710657, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x1000000000001; immval:0x1e8
TEST_STORE(x3,x4,0,x2,x10,-0x1000000000001,0x1e8,752,c.sdsp,0)

inst_122:
// rs2_val == -562949953421313, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x2000000000001; immval:0x50
TEST_STORE(x3,x4,0,x2,x10,-0x2000000000001,0x50,760,c.sdsp,0)

inst_123:
// rs2_val == -1125899906842625, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x4000000000001; immval:0x100
TEST_STORE(x3,x4,0,x2,x10,-0x4000000000001,0x100,768,c.sdsp,0)

inst_124:
// rs2_val == -2251799813685249, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x8000000000001; immval:0x30
TEST_STORE(x3,x4,0,x2,x10,-0x8000000000001,0x30,776,c.sdsp,0)

inst_125:
// rs2_val == -4503599627370497, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x10000000000001; immval:0x38
TEST_STORE(x3,x4,0,x2,x10,-0x10000000000001,0x38,784,c.sdsp,0)

inst_126:
// rs2_val == -9007199254740993, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x20000000000001; immval:0x90
TEST_STORE(x3,x4,0,x2,x10,-0x20000000000001,0x90,792,c.sdsp,0)

inst_127:
// rs2_val == -18014398509481985, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x40000000000001; immval:0x88
TEST_STORE(x3,x4,0,x2,x10,-0x40000000000001,0x88,800,c.sdsp,0)

inst_128:
// rs2_val == -72057594037927937, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x100000000000001; immval:0x88
TEST_STORE(x3,x4,0,x2,x10,-0x100000000000001,0x88,808,c.sdsp,0)

inst_129:
// rs2_val == -144115188075855873, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x200000000000001; immval:0x8
TEST_STORE(x3,x4,0,x2,x10,-0x200000000000001,0x8,816,c.sdsp,0)

inst_130:
// rs2_val == -288230376151711745, 
// opcode:c.sdsp; op1:x2; op2:x10; op2val:-0x400000000000001; immval:0x20
TEST_STORE(x3,x4,0,x2,x10,-0x400000000000001,0x20,824,c.sdsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 27*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
