 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.lui instruction of the RISC-V C extension for the clui covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",clui)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rd==x23, rs1_val > 0 and imm_val > 32, 
// opcode:c.lui; op1:x23; dest:x23 op1val:512; immval:1048575
TEST_CI_OP( c.lui, x23, 0x0000000000000000, 512, 1048575, x1, 0, x2)

inst_1:
// rd==x17, rs1_val > 0 and imm_val < 32 and imm_val !=0 , 
// opcode:c.lui; op1:x17; dest:x17 op1val:134217728; immval:13
TEST_CI_OP( c.lui, x17, 0x0000000000000000, 134217728, 13, x1, 8, x2)

inst_2:
// rd==x15, rs1_val < 0 and imm_val > 32, imm_val == 55
// opcode:c.lui; op1:x15; dest:x15 op1val:-1025; immval:1048567
TEST_CI_OP( c.lui, x15, 0x0000000000000000, -1025, 1048567, x1, 16, x2)

inst_3:
// rd==x19, rs1_val < 0 and imm_val < 32 and imm_val !=0 , imm_val == 1
// opcode:c.lui; op1:x19; dest:x19 op1val:-576460752303423489; immval:1
TEST_CI_OP( c.lui, x19, 0x0000000000000000, -576460752303423489, 1, x1, 24, x2)

inst_4:
// rd==x3, imm_val == 2, 
// opcode:c.lui; op1:x3; dest:x3 op1val:-4294967297; immval:2
TEST_CI_OP( c.lui, x3, 0x0000000000000000, -4294967297, 2, x1, 32, x2)

inst_5:
// rd==x27, imm_val == 4, 
// opcode:c.lui; op1:x27; dest:x27 op1val:18014398509481984; immval:4
TEST_CI_OP( c.lui, x27, 0x0000000000000000, 18014398509481984, 4, x1, 40, x2)

inst_6:
// rd==x8, imm_val == 8, 
// opcode:c.lui; op1:x8; dest:x8 op1val:262144; immval:8
TEST_CI_OP( c.lui, x8, 0x0000000000000000, 262144, 8, x1, 48, x2)

inst_7:
// rd==x24, imm_val == 16, 
// opcode:c.lui; op1:x24; dest:x24 op1val:6; immval:16
TEST_CI_OP( c.lui, x24, 0x0000000000000000, 6, 16, x1, 56, x2)

inst_8:
// rd==x26, imm_val == 32, 
// opcode:c.lui; op1:x26; dest:x26 op1val:-2199023255553; immval:1048544
TEST_CI_OP( c.lui, x26, 0x0000000000000000, -2199023255553, 1048544, x1, 64, x2)

inst_9:
// rd==x4, imm_val == 21, 
// opcode:c.lui; op1:x4; dest:x4 op1val:-33; immval:21
TEST_CI_OP( c.lui, x4, 0x0000000000000000, -33, 21, x1, 72, x2)

inst_10:
// rd==x31, imm_val == 42, 
// opcode:c.lui; op1:x31; dest:x31 op1val:-65537; immval:1048554
TEST_CI_OP( c.lui, x31, 0x0000000000000000, -65537, 1048554, x1, 80, x2)

inst_11:
// rd==x20, imm_val == 62, 
// opcode:c.lui; op1:x20; dest:x20 op1val:2048; immval:1048574
TEST_CI_OP( c.lui, x20, 0x0000000000000000, 2048, 1048574, x1, 88, x2)

inst_12:
// rd==x25, imm_val == 61, 
// opcode:c.lui; op1:x25; dest:x25 op1val:-36028797018963969; immval:1048573
TEST_CI_OP( c.lui, x25, 0x0000000000000000, -36028797018963969, 1048573, x1, 96, x2)

inst_13:
// rd==x5, imm_val == 59, 
// opcode:c.lui; op1:x5; dest:x5 op1val:1073741824; immval:1048571
TEST_CI_OP( c.lui, x5, 0x0000000000000000, 1073741824, 1048571, x1, 104, x2)

inst_14:
// rd==x12, imm_val == 47, 
// opcode:c.lui; op1:x12; dest:x12 op1val:2251799813685248; immval:1048559
TEST_CI_OP( c.lui, x12, 0x0000000000000000, 2251799813685248, 1048559, x1, 112, x2)

inst_15:
// rd==x11, imm_val == 31, 
// opcode:c.lui; op1:x11; dest:x11 op1val:-576460752303423489; immval:31
TEST_CI_OP( c.lui, x11, 0x0000000000000000, -576460752303423489, 31, x1, 120, x2)

inst_16:
// rd==x10, 
// opcode:c.lui; op1:x10; dest:x10 op1val:0; immval:16
TEST_CI_OP( c.lui, x10, 0x0000000000000000, 0, 16, x1, 128, x2)

inst_17:
// rd==x9, 
// opcode:c.lui; op1:x9; dest:x9 op1val:0; immval:16
TEST_CI_OP( c.lui, x9, 0x0000000000000000, 0, 16, x1, 136, x2)

inst_18:
// rd==x13, 
// opcode:c.lui; op1:x13; dest:x13 op1val:0; immval:16
TEST_CI_OP( c.lui, x13, 0x0000000000000000, 0, 16, x1, 144, x2)

inst_19:
// rd==x18, 
// opcode:c.lui; op1:x18; dest:x18 op1val:0; immval:16
TEST_CI_OP( c.lui, x18, 0x0000000000000000, 0, 16, x1, 152, x2)

inst_20:
// rd==x29, 
// opcode:c.lui; op1:x29; dest:x29 op1val:0; immval:16
TEST_CI_OP( c.lui, x29, 0x0000000000000000, 0, 16, x1, 160, x2)

inst_21:
// rd==x16, 
// opcode:c.lui; op1:x16; dest:x16 op1val:0; immval:16
TEST_CI_OP( c.lui, x16, 0x0000000000000000, 0, 16, x1, 168, x2)

inst_22:
// rd==x30, 
// opcode:c.lui; op1:x30; dest:x30 op1val:0; immval:16
TEST_CI_OP( c.lui, x30, 0x0000000000000000, 0, 16, x1, 176, x2)

inst_23:
// rd==x22, 
// opcode:c.lui; op1:x22; dest:x22 op1val:0; immval:16
TEST_CI_OP( c.lui, x22, 0x0000000000000000, 0, 16, x1, 184, x2)

inst_24:
// rd==x28, 
// opcode:c.lui; op1:x28; dest:x28 op1val:0; immval:16
TEST_CI_OP( c.lui, x28, 0x0000000000000000, 0, 16, x1, 192, x2)

inst_25:
// rd==x0, 
// opcode:c.lui; op1:x0; dest:x0 op1val:0; immval:16
TEST_CI_OP( c.lui, x0, 0x0000000000000000, 0, 16, x1, 200, x2)

inst_26:
// rd==x6, 
// opcode:c.lui; op1:x6; dest:x6 op1val:0; immval:16
TEST_CI_OP( c.lui, x6, 0x0000000000000000, 0, 16, x1, 208, x2)

inst_27:
// rd==x21, 
// opcode:c.lui; op1:x21; dest:x21 op1val:0; immval:16
TEST_CI_OP( c.lui, x21, 0x0000000000000000, 0, 16, x1, 216, x2)

inst_28:
// rd==x14, 
// opcode:c.lui; op1:x14; dest:x14 op1val:0; immval:16
TEST_CI_OP( c.lui, x14, 0x0000000000000000, 0, 16, x1, 224, x3)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_29:
// rd==x1, 
// opcode:c.lui; op1:x1; dest:x1 op1val:0; immval:16
TEST_CI_OP( c.lui, x1, 0x0000000000000000, 0, 16, x2, 0, x3)

inst_30:
// rd==x7, 
// opcode:c.lui; op1:x7; dest:x7 op1val:0; immval:16
TEST_CI_OP( c.lui, x7, 0x0000000000000000, 0, 16, x2, 8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 29*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 2*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
