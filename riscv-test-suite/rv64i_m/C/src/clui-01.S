
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 08:16:37 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.lui instruction of the RISC-V C extension for the clui covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",clui)

RVTEST_SIGBASE( x2,signature_x2_1)

inst_0:
// rd==x19, rs1_val > 0 and imm_val > 32, imm_val == 62
// opcode:c.lui; op1:x19; dest:x19 op1val:68719476736; immval:1048574
TEST_CI_OP( c.lui, x19, 0x0000000000000000, 68719476736, 1048574, x2, 0, x11)

inst_1:
// rd==x5, rs1_val > 0 and imm_val < 32 and imm_val !=0 , 
// opcode:c.lui; op1:x5; dest:x5 op1val:2305843009213693952; immval:14
TEST_CI_OP( c.lui, x5, 0x0000000000000000, 2305843009213693952, 14, x2, 8, x11)

inst_2:
// rd==x6, rs1_val < 0 and imm_val > 32, imm_val == 42
// opcode:c.lui; op1:x6; dest:x6 op1val:-9223372036854775808; immval:1048554
TEST_CI_OP( c.lui, x6, 0x0000000000000000, -9223372036854775808, 1048554, x2, 16, x11)

inst_3:
// rd==x25, rs1_val < 0 and imm_val < 32 and imm_val !=0 , imm_val == 2
// opcode:c.lui; op1:x25; dest:x25 op1val:-65537; immval:2
TEST_CI_OP( c.lui, x25, 0x0000000000000000, -65537, 2, x2, 24, x11)

inst_4:
// rd==x7, imm_val == 1, 
// opcode:c.lui; op1:x7; dest:x7 op1val:-9223372036854775808; immval:1
TEST_CI_OP( c.lui, x7, 0x0000000000000000, -9223372036854775808, 1, x2, 32, x11)

inst_5:
// rd==x18, imm_val == 4, 
// opcode:c.lui; op1:x18; dest:x18 op1val:-4; immval:4
TEST_CI_OP( c.lui, x18, 0x0000000000000000, -4, 4, x2, 40, x11)

inst_6:
// rd==x13, imm_val == 8, 
// opcode:c.lui; op1:x13; dest:x13 op1val:-2; immval:8
TEST_CI_OP( c.lui, x13, 0x0000000000000000, -2, 8, x2, 48, x11)

inst_7:
// rd==x14, imm_val == 16, 
// opcode:c.lui; op1:x14; dest:x14 op1val:-1099511627777; immval:16
TEST_CI_OP( c.lui, x14, 0x0000000000000000, -1099511627777, 16, x2, 56, x11)

inst_8:
// rd==x21, imm_val == 21, 
// opcode:c.lui; op1:x21; dest:x21 op1val:-513; immval:21
TEST_CI_OP( c.lui, x21, 0x0000000000000000, -513, 21, x2, 64, x11)

inst_9:
// rd==x1, imm_val == 32, 
// opcode:c.lui; op1:x1; dest:x1 op1val:-4611686018427387904; immval:1048544
TEST_CI_OP( c.lui, x1, 0x0000000000000000, -4611686018427387904, 1048544, x2, 72, x11)

inst_10:
// rd==x9, imm_val == 61, 
// opcode:c.lui; op1:x9; dest:x9 op1val:140737488355328; immval:1048573
TEST_CI_OP( c.lui, x9, 0x0000000000000000, 140737488355328, 1048573, x2, 80, x11)

inst_11:
// rd==x24, imm_val == 59, 
// opcode:c.lui; op1:x24; dest:x24 op1val:8796093022208; immval:1048571
TEST_CI_OP( c.lui, x24, 0x0000000000000000, 8796093022208, 1048571, x2, 88, x11)

inst_12:
// rd==x3, imm_val == 55, 
// opcode:c.lui; op1:x3; dest:x3 op1val:-68719476737; immval:1048567
TEST_CI_OP( c.lui, x3, 0x0000000000000000, -68719476737, 1048567, x2, 96, x11)

inst_13:
// rd==x23, imm_val == 47, 
// opcode:c.lui; op1:x23; dest:x23 op1val:4503599627370496; immval:1048559
TEST_CI_OP( c.lui, x23, 0x0000000000000000, 4503599627370496, 1048559, x2, 104, x11)

inst_14:
// rd==x17, imm_val == 31, 
// opcode:c.lui; op1:x17; dest:x17 op1val:7; immval:31
TEST_CI_OP( c.lui, x17, 0x0000000000000000, 7, 31, x2, 112, x11)

inst_15:
// rd==x8, 
// opcode:c.lui; op1:x8; dest:x8 op1val:0; immval:16
TEST_CI_OP( c.lui, x8, 0x0000000000000000, 0, 16, x2, 120, x11)

inst_16:
// rd==x27, 
// opcode:c.lui; op1:x27; dest:x27 op1val:0; immval:16
TEST_CI_OP( c.lui, x27, 0x0000000000000000, 0, 16, x2, 128, x11)

inst_17:
// rd==x20, 
// opcode:c.lui; op1:x20; dest:x20 op1val:0; immval:16
TEST_CI_OP( c.lui, x20, 0x0000000000000000, 0, 16, x2, 136, x11)

inst_18:
// rd==x26, 
// opcode:c.lui; op1:x26; dest:x26 op1val:0; immval:16
TEST_CI_OP( c.lui, x26, 0x0000000000000000, 0, 16, x2, 144, x11)

inst_19:
// rd==x4, 
// opcode:c.lui; op1:x4; dest:x4 op1val:0; immval:16
TEST_CI_OP( c.lui, x4, 0x0000000000000000, 0, 16, x2, 152, x11)

inst_20:
// rd==x30, 
// opcode:c.lui; op1:x30; dest:x30 op1val:0; immval:16
TEST_CI_OP( c.lui, x30, 0x0000000000000000, 0, 16, x2, 160, x11)

inst_21:
// rd==x29, 
// opcode:c.lui; op1:x29; dest:x29 op1val:0; immval:16
TEST_CI_OP( c.lui, x29, 0x0000000000000000, 0, 16, x2, 168, x11)

inst_22:
// rd==x22, 
// opcode:c.lui; op1:x22; dest:x22 op1val:0; immval:16
TEST_CI_OP( c.lui, x22, 0x0000000000000000, 0, 16, x2, 176, x11)

inst_23:
// rd==x15, 
// opcode:c.lui; op1:x15; dest:x15 op1val:0; immval:16
TEST_CI_OP( c.lui, x15, 0x0000000000000000, 0, 16, x2, 184, x11)

inst_24:
// rd==x12, 
// opcode:c.lui; op1:x12; dest:x12 op1val:0; immval:16
TEST_CI_OP( c.lui, x12, 0x0000000000000000, 0, 16, x2, 192, x11)

inst_25:
// rd==x31, 
// opcode:c.lui; op1:x31; dest:x31 op1val:0; immval:16
TEST_CI_OP( c.lui, x31, 0x0000000000000000, 0, 16, x2, 200, x11)

inst_26:
// rd==x10, 
// opcode:c.lui; op1:x10; dest:x10 op1val:0; immval:16
TEST_CI_OP( c.lui, x10, 0x0000000000000000, 0, 16, x2, 208, x11)

inst_27:
// rd==x28, 
// opcode:c.lui; op1:x28; dest:x28 op1val:0; immval:16
TEST_CI_OP( c.lui, x28, 0x0000000000000000, 0, 16, x2, 216, x3)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_28:
// rd==x16, 
// opcode:c.lui; op1:x16; dest:x16 op1val:0; immval:16
TEST_CI_OP( c.lui, x16, 0x0000000000000000, 0, 16, x1, 0, x3)

inst_29:
// rd==x11, 
// opcode:c.lui; op1:x11; dest:x11 op1val:0; immval:16
TEST_CI_OP( c.lui, x11, 0x0000000000000000, 0, 16, x1, 8, x3)

inst_30:
// rd==x0, 
// opcode:c.lui; op1:x0; dest:x0 op1val:0; immval:16
TEST_CI_OP( c.lui, x0, 0x0000000000000000, 0, 16, x1, 16, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 3*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
