
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 08:16:37 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.addiw instruction of the RISC-V C extension for the caddiw covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*C.*);def TEST_CASE_1=True;",caddiw)

RVTEST_SIGBASE( x4,signature_x4_1)

inst_0:
// rd==x23, rs1_val == imm_val, rs1_val > 0 and imm_val > 0
// opcode:c.addiw; op1:x23; dest:x23 op1val:7; immval:7
TEST_CI_OP( c.addiw, x23, 0x0000000000000000, 7, 7, x4, 0, x7)

inst_1:
// rd==x16, rs1_val != imm_val, rs1_val == -262145, rs1_val < 0 and imm_val < 0
// opcode:c.addiw; op1:x16; dest:x16 op1val:-262145; immval:-10
TEST_CI_OP( c.addiw, x16, 0x0000000000000000, -262145, -10, x4, 8, x7)

inst_2:
// rd==x17, rs1_val > 0 and imm_val < 0, rs1_val == 134217728
// opcode:c.addiw; op1:x17; dest:x17 op1val:134217728; immval:-7
TEST_CI_OP( c.addiw, x17, 0x0000000000000000, 134217728, -7, x4, 16, x7)

inst_3:
// rd==x12, rs1_val < 0 and imm_val > 0, rs1_val == -524289
// opcode:c.addiw; op1:x12; dest:x12 op1val:-524289; immval:5
TEST_CI_OP( c.addiw, x12, 0x0000000000000000, -524289, 5, x4, 24, x7)

inst_4:
// rd==x3, imm_val == (-2**(6-1)), rs1_val == 2251799813685248, imm_val == -32
// opcode:c.addiw; op1:x3; dest:x3 op1val:2251799813685248; immval:-32
TEST_CI_OP( c.addiw, x3, 0x0000000000000000, 2251799813685248, -32, x4, 32, x7)

inst_5:
// rd==x25, imm_val == 0, rs1_val == -3
// opcode:c.addiw; op1:x25; dest:x25 op1val:-3; immval:0
TEST_CI_OP( c.addiw, x25, 0x0000000000000000, -3, 0, x4, 40, x7)

inst_6:
// rd==x29, imm_val == (2**(6-1)-1), imm_val == 31, rs1_val == -4503599627370497
// opcode:c.addiw; op1:x29; dest:x29 op1val:-4503599627370497; immval:31
TEST_CI_OP( c.addiw, x29, 0x0000000000000000, -4503599627370497, 31, x4, 48, x7)

inst_7:
// rd==x10, imm_val == 1, rs1_val == -9
// opcode:c.addiw; op1:x10; dest:x10 op1val:-9; immval:1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -9, 1, x4, 56, x7)

inst_8:
// rd==x30, rs1_val == (-2**(xlen-1)), imm_val == -5, rs1_val == -9223372036854775808
// opcode:c.addiw; op1:x30; dest:x30 op1val:-9223372036854775808; immval:-5
TEST_CI_OP( c.addiw, x30, 0x0000000000000000, -9223372036854775808, -5, x4, 64, x7)

inst_9:
// rd==x22, rs1_val == 0, rs1_val==0 and imm_val==2, imm_val == 2
// opcode:c.addiw; op1:x22; dest:x22 op1val:0; immval:2
TEST_CI_OP( c.addiw, x22, 0x0000000000000000, 0, 2, x4, 72, x7)

inst_10:
// rd==x28, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807
// opcode:c.addiw; op1:x28; dest:x28 op1val:9223372036854775807; immval:31
TEST_CI_OP( c.addiw, x28, 0x0000000000000000, 9223372036854775807, 31, x4, 80, x7)

inst_11:
// rd==x27, rs1_val == 1, 
// opcode:c.addiw; op1:x27; dest:x27 op1val:1; immval:-8
TEST_CI_OP( c.addiw, x27, 0x0000000000000000, 1, -8, x4, 88, x7)

inst_12:
// rd==x2, imm_val == 4, rs1_val == -2251799813685249
// opcode:c.addiw; op1:x2; dest:x2 op1val:-2251799813685249; immval:4
TEST_CI_OP( c.addiw, x2, 0x0000000000000000, -2251799813685249, 4, x4, 96, x7)

inst_13:
// rd==x9, imm_val == 8, rs1_val == -274877906945
// opcode:c.addiw; op1:x9; dest:x9 op1val:-274877906945; immval:8
TEST_CI_OP( c.addiw, x9, 0x0000000000000000, -274877906945, 8, x4, 104, x7)

inst_14:
// rd==x20, imm_val == 16, rs1_val == 140737488355328
// opcode:c.addiw; op1:x20; dest:x20 op1val:140737488355328; immval:16
TEST_CI_OP( c.addiw, x20, 0x0000000000000000, 140737488355328, 16, x4, 112, x7)

inst_15:
// rd==x1, imm_val == -2, rs1_val == -281474976710657
// opcode:c.addiw; op1:x1; dest:x1 op1val:-281474976710657; immval:-2
TEST_CI_OP( c.addiw, x1, 0x0000000000000000, -281474976710657, -2, x4, 120, x7)

inst_16:
// rd==x5, imm_val == -3, rs1_val == 262144
// opcode:c.addiw; op1:x5; dest:x5 op1val:262144; immval:-3
TEST_CI_OP( c.addiw, x5, 0x0000000000000000, 262144, -3, x4, 128, x7)

inst_17:
// rd==x15, imm_val == -9, 
// opcode:c.addiw; op1:x15; dest:x15 op1val:0; immval:-9
TEST_CI_OP( c.addiw, x15, 0x0000000000000000, 0, -9, x4, 136, x7)

inst_18:
// rd==x31, imm_val == -17, rs1_val == 17592186044416
// opcode:c.addiw; op1:x31; dest:x31 op1val:17592186044416; immval:-17
TEST_CI_OP( c.addiw, x31, 0x0000000000000000, 17592186044416, -17, x4, 144, x7)

inst_19:
// rd==x26, imm_val == 21, rs1_val == 64
// opcode:c.addiw; op1:x26; dest:x26 op1val:64; immval:21
TEST_CI_OP( c.addiw, x26, 0x0000000000000000, 64, 21, x4, 152, x7)

inst_20:
// rd==x18, imm_val == -22, rs1_val == 4398046511104
// opcode:c.addiw; op1:x18; dest:x18 op1val:4398046511104; immval:-22
TEST_CI_OP( c.addiw, x18, 0x0000000000000000, 4398046511104, -22, x4, 160, x7)

inst_21:
// rd==x13, rs1_val==3 and imm_val==3, 
// opcode:c.addiw; op1:x13; dest:x13 op1val:3; immval:3
TEST_CI_OP( c.addiw, x13, 0x0000000000000000, 3, 3, x4, 168, x7)

inst_22:
// rd==x21, rs1_val==3 and imm_val==5, 
// opcode:c.addiw; op1:x21; dest:x21 op1val:3; immval:5
TEST_CI_OP( c.addiw, x21, 0x0000000000000000, 3, 5, x4, 176, x7)

inst_23:
// rd==x19, rs1_val==3 and imm_val==10, 
// opcode:c.addiw; op1:x19; dest:x19 op1val:3; immval:10
TEST_CI_OP( c.addiw, x19, 0x0000000000000000, 3, 10, x4, 184, x7)

inst_24:
// rd==x8, rs1_val==3 and imm_val==6, 
// opcode:c.addiw; op1:x8; dest:x8 op1val:3; immval:6
TEST_CI_OP( c.addiw, x8, 0x0000000000000000, 3, 6, x4, 192, x7)

inst_25:
// rd==x6, rs1_val==3 and imm_val==-2, 
// opcode:c.addiw; op1:x6; dest:x6 op1val:3; immval:-2
TEST_CI_OP( c.addiw, x6, 0x0000000000000000, 3, -2, x4, 200, x7)

inst_26:
// rd==x11, rs1_val==3 and imm_val==-5, 
// opcode:c.addiw; op1:x11; dest:x11 op1val:3; immval:-5
TEST_CI_OP( c.addiw, x11, 0x0000000000000000, 3, -5, x4, 208, x7)

inst_27:
// rd==x14, rs1_val==3 and imm_val==2, 
// opcode:c.addiw; op1:x14; dest:x14 op1val:3; immval:2
TEST_CI_OP( c.addiw, x14, 0x0000000000000000, 3, 2, x4, 216, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_28:
// rd==x4, rs1_val==3 and imm_val==4, 
// opcode:c.addiw; op1:x4; dest:x4 op1val:3; immval:4
TEST_CI_OP( c.addiw, x4, 0x0000000000000000, 3, 4, x1, 0, x2)

inst_29:
// rd==x24, rs1_val==3 and imm_val==9, 
// opcode:c.addiw; op1:x24; dest:x24 op1val:3; immval:9
TEST_CI_OP( c.addiw, x24, 0x0000000000000000, 3, 9, x1, 8, x2)

inst_30:
// rd==x7, rs1_val==3 and imm_val==0, 
// opcode:c.addiw; op1:x7; dest:x7 op1val:3; immval:0
TEST_CI_OP( c.addiw, x7, 0x0000000000000000, 3, 0, x1, 16, x2)

inst_31:
// rs1_val==3 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3, 11, x1, 24, x2)

inst_32:
// rs1_val==3 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3, 7, x1, 32, x2)

inst_33:
// rs1_val==3 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3, -1, x1, 40, x2)

inst_34:
// rs1_val==3 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3, -4, x1, 48, x2)

inst_35:
// rs1_val==6148914691236517205 and imm_val==3, rs1_val == 6148914691236517205
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 3, x1, 56, x2)

inst_36:
// rs1_val==6148914691236517205 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 5, x1, 64, x2)

inst_37:
// rs1_val==6148914691236517205 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 10, x1, 72, x2)

inst_38:
// rs1_val==6148914691236517205 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 6, x1, 80, x2)

inst_39:
// rs1_val==6148914691236517205 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, -2, x1, 88, x2)

inst_40:
// rs1_val==6148914691236517205 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, -5, x1, 96, x2)

inst_41:
// rs1_val==6148914691236517205 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 2, x1, 104, x2)

inst_42:
// rs1_val==6148914691236517205 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 4, x1, 112, x2)

inst_43:
// rs1_val==6148914691236517205 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 9, x1, 120, x2)

inst_44:
// rs1_val==6148914691236517205 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 0, x1, 128, x2)

inst_45:
// rs1_val==6148914691236517205 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 11, x1, 136, x2)

inst_46:
// rs1_val==6148914691236517205 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, 7, x1, 144, x2)

inst_47:
// rs1_val==6148914691236517205 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, -1, x1, 152, x2)

inst_48:
// rs1_val==6148914691236517205 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517205; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517205, -4, x1, 160, x2)

inst_49:
// rs1_val==-6148914691236517206 and imm_val==3, rs1_val == -6148914691236517206
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 3, x1, 168, x2)

inst_50:
// rs1_val==-6148914691236517206 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 5, x1, 176, x2)

inst_51:
// rs1_val==-6148914691236517206 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 10, x1, 184, x2)

inst_52:
// rs1_val==-6148914691236517206 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 6, x1, 192, x2)

inst_53:
// rs1_val==-6148914691236517206 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, -2, x1, 200, x2)

inst_54:
// rs1_val==-6148914691236517206 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, -5, x1, 208, x2)

inst_55:
// rs1_val==-6148914691236517206 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 2, x1, 216, x2)

inst_56:
// rs1_val==-6148914691236517206 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 4, x1, 224, x2)

inst_57:
// rs1_val==-6148914691236517206 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 9, x1, 232, x2)

inst_58:
// rs1_val==-6148914691236517206 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 0, x1, 240, x2)

inst_59:
// rs1_val==-6148914691236517206 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 11, x1, 248, x2)

inst_60:
// rs1_val==-6148914691236517206 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, 7, x1, 256, x2)

inst_61:
// rs1_val==-6148914691236517206 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, -1, x1, 264, x2)

inst_62:
// rs1_val==-6148914691236517206 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517206; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517206, -4, x1, 272, x2)

inst_63:
// rs1_val==5 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 3, x1, 280, x2)

inst_64:
// rs1_val==5 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 5, x1, 288, x2)

inst_65:
// rs1_val==5 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 10, x1, 296, x2)

inst_66:
// rs1_val==5 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 6, x1, 304, x2)

inst_67:
// rs1_val==5 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, -2, x1, 312, x2)

inst_68:
// rs1_val==5 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, -5, x1, 320, x2)

inst_69:
// rs1_val==5 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 2, x1, 328, x2)

inst_70:
// rs1_val==5 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 4, x1, 336, x2)

inst_71:
// rs1_val==5 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 9, x1, 344, x2)

inst_72:
// rs1_val==5 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 0, x1, 352, x2)

inst_73:
// rs1_val==5 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 11, x1, 360, x2)

inst_74:
// rs1_val==5 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, 7, x1, 368, x2)

inst_75:
// rs1_val==5 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, -1, x1, 376, x2)

inst_76:
// rs1_val==5 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:5; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 5, -4, x1, 384, x2)

inst_77:
// rs1_val==3689348814741910323 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 3, x1, 392, x2)

inst_78:
// rs1_val==3689348814741910323 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 5, x1, 400, x2)

inst_79:
// rs1_val==3689348814741910323 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 10, x1, 408, x2)

inst_80:
// rs1_val==3689348814741910323 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 6, x1, 416, x2)

inst_81:
// rs1_val==3689348814741910323 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, -2, x1, 424, x2)

inst_82:
// rs1_val==3689348814741910323 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, -5, x1, 432, x2)

inst_83:
// rs1_val==3689348814741910323 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 2, x1, 440, x2)

inst_84:
// rs1_val==3689348814741910323 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 4, x1, 448, x2)

inst_85:
// rs1_val==3689348814741910323 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 9, x1, 456, x2)

inst_86:
// rs1_val==3689348814741910323 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 0, x1, 464, x2)

inst_87:
// rs1_val==3689348814741910323 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 11, x1, 472, x2)

inst_88:
// rs1_val==3689348814741910323 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, 7, x1, 480, x2)

inst_89:
// rs1_val==3689348814741910323 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, -1, x1, 488, x2)

inst_90:
// rs1_val==3689348814741910323 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910323; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910323, -4, x1, 496, x2)

inst_91:
// rs1_val==7378697629483820646 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 3, x1, 504, x2)

inst_92:
// rs1_val==7378697629483820646 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 5, x1, 512, x2)

inst_93:
// rs1_val==7378697629483820646 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 10, x1, 520, x2)

inst_94:
// rs1_val==7378697629483820646 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 6, x1, 528, x2)

inst_95:
// rs1_val==7378697629483820646 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, -2, x1, 536, x2)

inst_96:
// rs1_val==7378697629483820646 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, -5, x1, 544, x2)

inst_97:
// rs1_val==7378697629483820646 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 2, x1, 552, x2)

inst_98:
// rs1_val==7378697629483820646 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 4, x1, 560, x2)

inst_99:
// rs1_val==7378697629483820646 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 9, x1, 568, x2)

inst_100:
// rs1_val==7378697629483820646 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 0, x1, 576, x2)

inst_101:
// rs1_val==7378697629483820646 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 11, x1, 584, x2)

inst_102:
// rs1_val==7378697629483820646 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, 7, x1, 592, x2)

inst_103:
// rs1_val==7378697629483820646 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, -1, x1, 600, x2)

inst_104:
// rs1_val==7378697629483820646 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820646; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820646, -4, x1, 608, x2)

inst_105:
// rs1_val==-3037000499 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 3, x1, 616, x2)

inst_106:
// rs1_val==-3037000499 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 5, x1, 624, x2)

inst_107:
// rs1_val==-3037000499 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 10, x1, 632, x2)

inst_108:
// rs1_val==-3037000499 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 6, x1, 640, x2)

inst_109:
// rs1_val==-3037000499 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, -2, x1, 648, x2)

inst_110:
// rs1_val==-3037000499 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, -5, x1, 656, x2)

inst_111:
// rs1_val==-3037000499 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 2, x1, 664, x2)

inst_112:
// rs1_val==-3037000499 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 4, x1, 672, x2)

inst_113:
// rs1_val==-3037000499 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 9, x1, 680, x2)

inst_114:
// rs1_val==-3037000499 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 0, x1, 688, x2)

inst_115:
// rs1_val==-3037000499 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 11, x1, 696, x2)

inst_116:
// rs1_val==-3037000499 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, 7, x1, 704, x2)

inst_117:
// rs1_val==-3037000499 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, -1, x1, 712, x2)

inst_118:
// rs1_val==-3037000499 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000499; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000499, -4, x1, 720, x2)

inst_119:
// rs1_val==3037000499 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 3, x1, 728, x2)

inst_120:
// rs1_val==3037000499 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 5, x1, 736, x2)

inst_121:
// rs1_val==3037000499 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 10, x1, 744, x2)

inst_122:
// rs1_val==3037000499 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 6, x1, 752, x2)

inst_123:
// rs1_val==3037000499 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, -2, x1, 760, x2)

inst_124:
// rs1_val==3037000499 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, -5, x1, 768, x2)

inst_125:
// rs1_val==3037000499 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 2, x1, 776, x2)

inst_126:
// rs1_val==3037000499 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 4, x1, 784, x2)

inst_127:
// rs1_val==3037000499 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 9, x1, 792, x2)

inst_128:
// rs1_val==3037000499 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 0, x1, 800, x2)

inst_129:
// rs1_val==3037000499 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 11, x1, 808, x2)

inst_130:
// rs1_val==3037000499 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, 7, x1, 816, x2)

inst_131:
// rs1_val==3037000499 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, -1, x1, 824, x2)

inst_132:
// rs1_val==3037000499 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000499; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000499, -4, x1, 832, x2)

inst_133:
// rs1_val==2 and imm_val==3, rs1_val == 2
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 3, x1, 840, x2)

inst_134:
// rs1_val==2 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 5, x1, 848, x2)

inst_135:
// rs1_val==2 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 10, x1, 856, x2)

inst_136:
// rs1_val==2 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 6, x1, 864, x2)

inst_137:
// rs1_val==2 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, -2, x1, 872, x2)

inst_138:
// rs1_val==2 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, -5, x1, 880, x2)

inst_139:
// rs1_val==2 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 2, x1, 888, x2)

inst_140:
// rs1_val==2 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 4, x1, 896, x2)

inst_141:
// rs1_val==2 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 9, x1, 904, x2)

inst_142:
// rs1_val==2 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 0, x1, 912, x2)

inst_143:
// rs1_val==2 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 11, x1, 920, x2)

inst_144:
// rs1_val==2 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, 7, x1, 928, x2)

inst_145:
// rs1_val==2 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, -1, x1, 936, x2)

inst_146:
// rs1_val==2 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2, -4, x1, 944, x2)

inst_147:
// rs1_val==6148914691236517204 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 3, x1, 952, x2)

inst_148:
// rs1_val==6148914691236517204 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 5, x1, 960, x2)

inst_149:
// rs1_val==6148914691236517204 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 10, x1, 968, x2)

inst_150:
// rs1_val==6148914691236517204 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 6, x1, 976, x2)

inst_151:
// rs1_val==6148914691236517204 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, -2, x1, 984, x2)

inst_152:
// rs1_val==6148914691236517204 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, -5, x1, 992, x2)

inst_153:
// rs1_val==6148914691236517204 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 2, x1, 1000, x2)

inst_154:
// rs1_val==6148914691236517204 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 4, x1, 1008, x2)

inst_155:
// rs1_val==6148914691236517204 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 9, x1, 1016, x2)

inst_156:
// rs1_val==6148914691236517204 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 0, x1, 1024, x2)

inst_157:
// rs1_val==6148914691236517204 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 11, x1, 1032, x2)

inst_158:
// rs1_val==6148914691236517204 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, 7, x1, 1040, x2)

inst_159:
// rs1_val==6148914691236517204 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, -1, x1, 1048, x2)

inst_160:
// rs1_val==6148914691236517204 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517204; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517204, -4, x1, 1056, x2)

inst_161:
// rs1_val==0 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 3, x1, 1064, x2)

inst_162:
// rs1_val==0 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 5, x1, 1072, x2)

inst_163:
// rs1_val==0 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 10, x1, 1080, x2)

inst_164:
// rs1_val==0 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 6, x1, 1088, x2)

inst_165:
// rs1_val==0 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, -2, x1, 1096, x2)

inst_166:
// rs1_val==0 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, -5, x1, 1104, x2)

inst_167:
// rs1_val==0 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 4, x1, 1112, x2)

inst_168:
// rs1_val==0 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 9, x1, 1120, x2)

inst_169:
// rs1_val==0 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 0, x1, 1128, x2)

inst_170:
// rs1_val==0 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 11, x1, 1136, x2)

inst_171:
// rs1_val==0 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, 7, x1, 1144, x2)

inst_172:
// rs1_val==0 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, -1, x1, 1152, x2)

inst_173:
// rs1_val==0 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:0; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 0, -4, x1, 1160, x2)

inst_174:
// rs1_val==4 and imm_val==3, rs1_val == 4
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 3, x1, 1168, x2)

inst_175:
// rs1_val==4 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 5, x1, 1176, x2)

inst_176:
// rs1_val==4 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 10, x1, 1184, x2)

inst_177:
// rs1_val==4 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 6, x1, 1192, x2)

inst_178:
// rs1_val==4 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, -2, x1, 1200, x2)

inst_179:
// rs1_val==4 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, -5, x1, 1208, x2)

inst_180:
// rs1_val==4 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 2, x1, 1216, x2)

inst_181:
// rs1_val==4 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 4, x1, 1224, x2)

inst_182:
// rs1_val==4 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 9, x1, 1232, x2)

inst_183:
// rs1_val==4 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 0, x1, 1240, x2)

inst_184:
// rs1_val==4 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 11, x1, 1248, x2)

inst_185:
// rs1_val==4 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, 7, x1, 1256, x2)

inst_186:
// rs1_val==4 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, -1, x1, 1264, x2)

inst_187:
// rs1_val==4 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4, -4, x1, 1272, x2)

inst_188:
// rs1_val==3689348814741910322 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 3, x1, 1280, x2)

inst_189:
// rs1_val==3689348814741910322 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 5, x1, 1288, x2)

inst_190:
// rs1_val==3689348814741910322 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 10, x1, 1296, x2)

inst_191:
// rs1_val==3689348814741910322 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 6, x1, 1304, x2)

inst_192:
// rs1_val==3689348814741910322 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, -2, x1, 1312, x2)

inst_193:
// rs1_val==3689348814741910322 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, -5, x1, 1320, x2)

inst_194:
// rs1_val==3689348814741910322 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 2, x1, 1328, x2)

inst_195:
// rs1_val==3689348814741910322 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 4, x1, 1336, x2)

inst_196:
// rs1_val==3689348814741910322 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 9, x1, 1344, x2)

inst_197:
// rs1_val==3689348814741910322 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 0, x1, 1352, x2)

inst_198:
// rs1_val==3689348814741910322 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 11, x1, 1360, x2)

inst_199:
// rs1_val==3689348814741910322 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, 7, x1, 1368, x2)

inst_200:
// rs1_val==3689348814741910322 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, -1, x1, 1376, x2)

inst_201:
// rs1_val==3689348814741910322 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910322; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910322, -4, x1, 1384, x2)

inst_202:
// rs1_val==7378697629483820645 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 3, x1, 1392, x2)

inst_203:
// rs1_val==7378697629483820645 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 5, x1, 1400, x2)

inst_204:
// rs1_val==7378697629483820645 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 10, x1, 1408, x2)

inst_205:
// rs1_val==7378697629483820645 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 6, x1, 1416, x2)

inst_206:
// rs1_val==7378697629483820645 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, -2, x1, 1424, x2)

inst_207:
// rs1_val==7378697629483820645 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, -5, x1, 1432, x2)

inst_208:
// rs1_val==7378697629483820645 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 2, x1, 1440, x2)

inst_209:
// rs1_val==7378697629483820645 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 4, x1, 1448, x2)

inst_210:
// rs1_val==7378697629483820645 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 9, x1, 1456, x2)

inst_211:
// rs1_val==7378697629483820645 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 0, x1, 1464, x2)

inst_212:
// rs1_val==7378697629483820645 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 11, x1, 1472, x2)

inst_213:
// rs1_val==7378697629483820645 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, 7, x1, 1480, x2)

inst_214:
// rs1_val==7378697629483820645 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, -1, x1, 1488, x2)

inst_215:
// rs1_val==7378697629483820645 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820645; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820645, -4, x1, 1496, x2)

inst_216:
// rs1_val==3037000498 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 3, x1, 1504, x2)

inst_217:
// rs1_val==3037000498 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 5, x1, 1512, x2)

inst_218:
// rs1_val==3037000498 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 10, x1, 1520, x2)

inst_219:
// rs1_val==3037000498 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 6, x1, 1528, x2)

inst_220:
// rs1_val==3037000498 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, -2, x1, 1536, x2)

inst_221:
// rs1_val==3037000498 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, -5, x1, 1544, x2)

inst_222:
// rs1_val==3037000498 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 2, x1, 1552, x2)

inst_223:
// rs1_val==3037000498 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 4, x1, 1560, x2)

inst_224:
// rs1_val==3037000498 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 9, x1, 1568, x2)

inst_225:
// rs1_val==3037000498 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 0, x1, 1576, x2)

inst_226:
// rs1_val==3037000498 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 11, x1, 1584, x2)

inst_227:
// rs1_val==3037000498 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, 7, x1, 1592, x2)

inst_228:
// rs1_val==3037000498 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, -1, x1, 1600, x2)

inst_229:
// rs1_val==3037000498 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000498; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000498, -4, x1, 1608, x2)

inst_230:
// rs1_val==6148914691236517206 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 3, x1, 1616, x2)

inst_231:
// rs1_val==6148914691236517206 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 5, x1, 1624, x2)

inst_232:
// rs1_val==6148914691236517206 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 10, x1, 1632, x2)

inst_233:
// rs1_val==6148914691236517206 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 6, x1, 1640, x2)

inst_234:
// rs1_val==6148914691236517206 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, -2, x1, 1648, x2)

inst_235:
// rs1_val==6148914691236517206 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, -5, x1, 1656, x2)

inst_236:
// rs1_val==6148914691236517206 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 2, x1, 1664, x2)

inst_237:
// rs1_val==6148914691236517206 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 4, x1, 1672, x2)

inst_238:
// rs1_val==6148914691236517206 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 9, x1, 1680, x2)

inst_239:
// rs1_val==6148914691236517206 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 0, x1, 1688, x2)

inst_240:
// rs1_val==6148914691236517206 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 11, x1, 1696, x2)

inst_241:
// rs1_val==6148914691236517206 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, 7, x1, 1704, x2)

inst_242:
// rs1_val==6148914691236517206 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, -1, x1, 1712, x2)

inst_243:
// rs1_val==6148914691236517206 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6148914691236517206; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6148914691236517206, -4, x1, 1720, x2)

inst_244:
// rs1_val==-6148914691236517205 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 3, x1, 1728, x2)

inst_245:
// rs1_val==-6148914691236517205 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 5, x1, 1736, x2)

inst_246:
// rs1_val==-6148914691236517205 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 10, x1, 1744, x2)

inst_247:
// rs1_val==-6148914691236517205 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 6, x1, 1752, x2)

inst_248:
// rs1_val==-6148914691236517205 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, -2, x1, 1760, x2)

inst_249:
// rs1_val==-6148914691236517205 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, -5, x1, 1768, x2)

inst_250:
// rs1_val==-6148914691236517205 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 2, x1, 1776, x2)

inst_251:
// rs1_val==-6148914691236517205 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 4, x1, 1784, x2)

inst_252:
// rs1_val==-6148914691236517205 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 9, x1, 1792, x2)

inst_253:
// rs1_val==-6148914691236517205 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 0, x1, 1800, x2)

inst_254:
// rs1_val==-6148914691236517205 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 11, x1, 1808, x2)

inst_255:
// rs1_val==-6148914691236517205 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, 7, x1, 1816, x2)

inst_256:
// rs1_val==-6148914691236517205 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, -1, x1, 1824, x2)

inst_257:
// rs1_val==-6148914691236517205 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-6148914691236517205; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -6148914691236517205, -4, x1, 1832, x2)

inst_258:
// rs1_val==6 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 3, x1, 1840, x2)

inst_259:
// rs1_val==6 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 5, x1, 1848, x2)

inst_260:
// rs1_val==6 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 10, x1, 1856, x2)

inst_261:
// rs1_val==6 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 6, x1, 1864, x2)

inst_262:
// rs1_val==6 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, -2, x1, 1872, x2)

inst_263:
// rs1_val==6 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, -5, x1, 1880, x2)

inst_264:
// rs1_val==6 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 2, x1, 1888, x2)

inst_265:
// rs1_val==6 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 4, x1, 1896, x2)

inst_266:
// rs1_val==6 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 9, x1, 1904, x2)

inst_267:
// rs1_val==6 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 0, x1, 1912, x2)

inst_268:
// rs1_val==6 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 11, x1, 1920, x2)

inst_269:
// rs1_val==6 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, 7, x1, 1928, x2)

inst_270:
// rs1_val==6 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, -1, x1, 1936, x2)

inst_271:
// rs1_val==6 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:6; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 6, -4, x1, 1944, x2)

inst_272:
// rs1_val==3689348814741910324 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 3, x1, 1952, x2)

inst_273:
// rs1_val==3689348814741910324 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 5, x1, 1960, x2)

inst_274:
// rs1_val==3689348814741910324 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 10, x1, 1968, x2)

inst_275:
// rs1_val==3689348814741910324 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 6, x1, 1976, x2)

inst_276:
// rs1_val==3689348814741910324 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, -2, x1, 1984, x2)

inst_277:
// rs1_val==3689348814741910324 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, -5, x1, 1992, x2)

inst_278:
// rs1_val==3689348814741910324 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 2, x1, 2000, x2)

inst_279:
// rs1_val==3689348814741910324 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 4, x1, 2008, x2)

inst_280:
// rs1_val==3689348814741910324 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 9, x1, 2016, x2)

inst_281:
// rs1_val==3689348814741910324 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 0, x1, 2024, x2)

inst_282:
// rs1_val==3689348814741910324 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 11, x1, 2032, x2)

inst_283:
// rs1_val==3689348814741910324 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, 7, x1, 2040, x2)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_284:
// rs1_val==3689348814741910324 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, -1, x1, 0, x2)

inst_285:
// rs1_val==3689348814741910324 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3689348814741910324; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3689348814741910324, -4, x1, 8, x2)

inst_286:
// rs1_val==7378697629483820647 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 3, x1, 16, x2)

inst_287:
// rs1_val==7378697629483820647 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 5, x1, 24, x2)

inst_288:
// rs1_val==7378697629483820647 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 10, x1, 32, x2)

inst_289:
// rs1_val==7378697629483820647 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 6, x1, 40, x2)

inst_290:
// rs1_val==7378697629483820647 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, -2, x1, 48, x2)

inst_291:
// rs1_val==7378697629483820647 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, -5, x1, 56, x2)

inst_292:
// rs1_val==7378697629483820647 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 2, x1, 64, x2)

inst_293:
// rs1_val==7378697629483820647 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 4, x1, 72, x2)

inst_294:
// rs1_val==7378697629483820647 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 9, x1, 80, x2)

inst_295:
// rs1_val==7378697629483820647 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 0, x1, 88, x2)

inst_296:
// rs1_val==7378697629483820647 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 11, x1, 96, x2)

inst_297:
// rs1_val==7378697629483820647 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, 7, x1, 104, x2)

inst_298:
// rs1_val==7378697629483820647 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, -1, x1, 112, x2)

inst_299:
// rs1_val==7378697629483820647 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:7378697629483820647; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 7378697629483820647, -4, x1, 120, x2)

inst_300:
// rs1_val==-3037000498 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 3, x1, 128, x2)

inst_301:
// rs1_val==-3037000498 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 5, x1, 136, x2)

inst_302:
// rs1_val==-3037000498 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 10, x1, 144, x2)

inst_303:
// rs1_val==-3037000498 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 6, x1, 152, x2)

inst_304:
// rs1_val==-3037000498 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, -2, x1, 160, x2)

inst_305:
// rs1_val==-3037000498 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, -5, x1, 168, x2)

inst_306:
// rs1_val==-3037000498 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 2, x1, 176, x2)

inst_307:
// rs1_val==-3037000498 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 4, x1, 184, x2)

inst_308:
// rs1_val==-3037000498 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 9, x1, 192, x2)

inst_309:
// rs1_val==-3037000498 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 0, x1, 200, x2)

inst_310:
// rs1_val==-3037000498 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 11, x1, 208, x2)

inst_311:
// rs1_val==-3037000498 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, 7, x1, 216, x2)

inst_312:
// rs1_val==-3037000498 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, -1, x1, 224, x2)

inst_313:
// rs1_val==-3037000498 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-3037000498; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -3037000498, -4, x1, 232, x2)

inst_314:
// rs1_val==3037000500 and imm_val==3, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 3, x1, 240, x2)

inst_315:
// rs1_val==3037000500 and imm_val==5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 5, x1, 248, x2)

inst_316:
// rs1_val==3037000500 and imm_val==10, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 10, x1, 256, x2)

inst_317:
// rs1_val==3037000500 and imm_val==6, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 6, x1, 264, x2)

inst_318:
// rs1_val==3037000500 and imm_val==-2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, -2, x1, 272, x2)

inst_319:
// rs1_val==3037000500 and imm_val==-5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, -5, x1, 280, x2)

inst_320:
// rs1_val==3037000500 and imm_val==2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 2, x1, 288, x2)

inst_321:
// rs1_val==3037000500 and imm_val==4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 4, x1, 296, x2)

inst_322:
// rs1_val==3037000500 and imm_val==9, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 9, x1, 304, x2)

inst_323:
// rs1_val==3037000500 and imm_val==0, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 0, x1, 312, x2)

inst_324:
// rs1_val==3037000500 and imm_val==11, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 11, x1, 320, x2)

inst_325:
// rs1_val==3037000500 and imm_val==7, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, 7, x1, 328, x2)

inst_326:
// rs1_val==3037000500 and imm_val==-1, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, -1, x1, 336, x2)

inst_327:
// rs1_val==3037000500 and imm_val==-4, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:3037000500; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 3037000500, -4, x1, 344, x2)

inst_328:
// rs1_val == 8, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:8; immval:31
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 8, 31, x1, 352, x2)

inst_329:
// rs1_val == 16, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:16; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 16, 7, x1, 360, x2)

inst_330:
// rs1_val == 32, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:32; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 32, 0, x1, 368, x2)

inst_331:
// rs1_val == 128, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:128; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 128, 5, x1, 376, x2)

inst_332:
// rs1_val == 256, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:256; immval:11
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 256, 11, x1, 384, x2)

inst_333:
// rs1_val == 512, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:512; immval:-7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 512, -7, x1, 392, x2)

inst_334:
// rs1_val == 1024, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:1024; immval:15
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 1024, 15, x1, 400, x2)

inst_335:
// rs1_val == 2048, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2048; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2048, 0, x1, 408, x2)

inst_336:
// rs1_val == 4096, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4096; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4096, 5, x1, 416, x2)

inst_337:
// rs1_val == 8192, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:8192; immval:1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 8192, 1, x1, 424, x2)

inst_338:
// rs1_val == 16384, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:16384; immval:-10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 16384, -10, x1, 432, x2)

inst_339:
// rs1_val == 32768, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:32768; immval:-16
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 32768, -16, x1, 440, x2)

inst_340:
// rs1_val == 65536, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:65536; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 65536, 6, x1, 448, x2)

inst_341:
// rs1_val == 131072, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:131072; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 131072, 4, x1, 456, x2)

inst_342:
// rs1_val == 524288, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:524288; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 524288, 6, x1, 464, x2)

inst_343:
// rs1_val == 1048576, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:1048576; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 1048576, 4, x1, 472, x2)

inst_344:
// rs1_val == 2097152, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2097152; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2097152, 4, x1, 480, x2)

inst_345:
// rs1_val == 4194304, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4194304; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4194304, 4, x1, 488, x2)

inst_346:
// rs1_val == 8388608, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:8388608; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 8388608, 6, x1, 496, x2)

inst_347:
// rs1_val == 16777216, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:16777216; immval:8
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 16777216, 8, x1, 504, x2)

inst_348:
// rs1_val == 33554432, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:33554432; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 33554432, 4, x1, 512, x2)

inst_349:
// rs1_val == 67108864, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:67108864; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 67108864, -2, x1, 520, x2)

inst_350:
// rs1_val == 268435456, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:268435456; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 268435456, -5, x1, 528, x2)

inst_351:
// rs1_val == 536870912, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:536870912; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 536870912, 4, x1, 536, x2)

inst_352:
// rs1_val == 1073741824, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:1073741824; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 1073741824, -4, x1, 544, x2)

inst_353:
// rs1_val == 2147483648, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2147483648; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2147483648, 6, x1, 552, x2)

inst_354:
// rs1_val == 4294967296, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4294967296; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4294967296, 0, x1, 560, x2)

inst_355:
// rs1_val == 8589934592, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:8589934592; immval:-8
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 8589934592, -8, x1, 568, x2)

inst_356:
// rs1_val == 17179869184, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:17179869184; immval:-17
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 17179869184, -17, x1, 576, x2)

inst_357:
// rs1_val == 34359738368, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:34359738368; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 34359738368, 5, x1, 584, x2)

inst_358:
// rs1_val == 68719476736, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:68719476736; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 68719476736, 5, x1, 592, x2)

inst_359:
// rs1_val == 137438953472, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:137438953472; immval:-17
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 137438953472, -17, x1, 600, x2)

inst_360:
// rs1_val == 274877906944, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:274877906944; immval:8
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 274877906944, 8, x1, 608, x2)

inst_361:
// rs1_val == 549755813888, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:549755813888; immval:-6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 549755813888, -6, x1, 616, x2)

inst_362:
// rs1_val == 1099511627776, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:1099511627776; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 1099511627776, 5, x1, 624, x2)

inst_363:
// rs1_val == 2199023255552, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2199023255552; immval:-9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2199023255552, -9, x1, 632, x2)

inst_364:
// rs1_val == 8796093022208, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:8796093022208; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 8796093022208, 5, x1, 640, x2)

inst_365:
// rs1_val == 35184372088832, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:35184372088832; immval:-10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 35184372088832, -10, x1, 648, x2)

inst_366:
// rs1_val == 70368744177664, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:70368744177664; immval:21
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 70368744177664, 21, x1, 656, x2)

inst_367:
// rs1_val == 281474976710656, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:281474976710656; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 281474976710656, 3, x1, 664, x2)

inst_368:
// rs1_val == 562949953421312, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:562949953421312; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 562949953421312, 4, x1, 672, x2)

inst_369:
// rs1_val == 1125899906842624, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:1125899906842624; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 1125899906842624, 5, x1, 680, x2)

inst_370:
// rs1_val == 4503599627370496, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4503599627370496; immval:-22
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4503599627370496, -22, x1, 688, x2)

inst_371:
// rs1_val == 9007199254740992, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:9007199254740992; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 9007199254740992, 3, x1, 696, x2)

inst_372:
// rs1_val == 18014398509481984, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:18014398509481984; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 18014398509481984, 10, x1, 704, x2)

inst_373:
// rs1_val == 36028797018963968, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:36028797018963968; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 36028797018963968, 4, x1, 712, x2)

inst_374:
// rs1_val == 72057594037927936, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:72057594037927936; immval:8
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 72057594037927936, 8, x1, 720, x2)

inst_375:
// rs1_val == 144115188075855872, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:144115188075855872; immval:7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 144115188075855872, 7, x1, 728, x2)

inst_376:
// rs1_val == 288230376151711744, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:288230376151711744; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 288230376151711744, 5, x1, 736, x2)

inst_377:
// rs1_val == 576460752303423488, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:576460752303423488; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 576460752303423488, 2, x1, 744, x2)

inst_378:
// rs1_val == 1152921504606846976, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:1152921504606846976; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 1152921504606846976, 5, x1, 752, x2)

inst_379:
// rs1_val == 2305843009213693952, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:2305843009213693952; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 2305843009213693952, 5, x1, 760, x2)

inst_380:
// rs1_val == 4611686018427387904, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:4611686018427387904; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, 4611686018427387904, -5, x1, 768, x2)

inst_381:
// rs1_val == -2, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-2; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -2, -4, x1, 776, x2)

inst_382:
// rs1_val == -5, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-5; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -5, 4, x1, 784, x2)

inst_383:
// rs1_val == -17, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-17; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -17, 10, x1, 792, x2)

inst_384:
// rs1_val == -33, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-33; immval:-9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -33, -9, x1, 800, x2)

inst_385:
// rs1_val == -65, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-65; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -65, 4, x1, 808, x2)

inst_386:
// rs1_val == -129, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-129; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -129, 5, x1, 816, x2)

inst_387:
// rs1_val == -257, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-257; immval:-7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -257, -7, x1, 824, x2)

inst_388:
// rs1_val == -513, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-513; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -513, 3, x1, 832, x2)

inst_389:
// rs1_val == -1025, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-1025; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -1025, 0, x1, 840, x2)

inst_390:
// rs1_val == -2049, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-2049; immval:6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -2049, 6, x1, 848, x2)

inst_391:
// rs1_val == -4097, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-4097; immval:21
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -4097, 21, x1, 856, x2)

inst_392:
// rs1_val == -8193, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-8193; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -8193, 5, x1, 864, x2)

inst_393:
// rs1_val == -16385, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-16385; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -16385, 9, x1, 872, x2)

inst_394:
// rs1_val == -32769, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-32769; immval:-16
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -32769, -16, x1, 880, x2)

inst_395:
// rs1_val == -65537, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-65537; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -65537, 0, x1, 888, x2)

inst_396:
// rs1_val == -131073, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-131073; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -131073, 9, x1, 896, x2)

inst_397:
// rs1_val == -1048577, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-1048577; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -1048577, -1, x1, 904, x2)

inst_398:
// rs1_val == -2097153, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-2097153; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -2097153, 3, x1, 912, x2)

inst_399:
// rs1_val == -4194305, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-4194305; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -4194305, 4, x1, 920, x2)

inst_400:
// rs1_val == -8388609, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-8388609; immval:1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -8388609, 1, x1, 928, x2)

inst_401:
// rs1_val == -16777217, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-16777217; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -16777217, 2, x1, 936, x2)

inst_402:
// rs1_val == -33554433, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-33554433; immval:-1
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -33554433, -1, x1, 944, x2)

inst_403:
// rs1_val == -67108865, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-67108865; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -67108865, 4, x1, 952, x2)

inst_404:
// rs1_val == -134217729, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-134217729; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -134217729, -4, x1, 960, x2)

inst_405:
// rs1_val == -1125899906842625, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-1125899906842625; immval:15
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -1125899906842625, 15, x1, 968, x2)

inst_406:
// rs1_val == -9007199254740993, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-9007199254740993; immval:-7
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -9007199254740993, -7, x1, 976, x2)

inst_407:
// rs1_val == -18014398509481985, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-18014398509481985; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -18014398509481985, 4, x1, 984, x2)

inst_408:
// rs1_val == -36028797018963969, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-36028797018963969; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -36028797018963969, 4, x1, 992, x2)

inst_409:
// rs1_val == -72057594037927937, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-72057594037927937; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -72057594037927937, -5, x1, 1000, x2)

inst_410:
// rs1_val == -144115188075855873, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-144115188075855873; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -144115188075855873, 0, x1, 1008, x2)

inst_411:
// rs1_val == -288230376151711745, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-288230376151711745; immval:2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -288230376151711745, 2, x1, 1016, x2)

inst_412:
// rs1_val == -576460752303423489, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-576460752303423489; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -576460752303423489, 5, x1, 1024, x2)

inst_413:
// rs1_val == -1152921504606846977, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-1152921504606846977; immval:-3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -1152921504606846977, -3, x1, 1032, x2)

inst_414:
// rs1_val == -2305843009213693953, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-2305843009213693953; immval:-5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -2305843009213693953, -5, x1, 1040, x2)

inst_415:
// rs1_val == -4611686018427387905, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-4611686018427387905; immval:-32
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -4611686018427387905, -32, x1, 1048, x2)

inst_416:
// rs1_val == -268435457, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-268435457; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -268435457, 3, x1, 1056, x2)

inst_417:
// rs1_val == -536870913, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-536870913; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -536870913, 4, x1, 1064, x2)

inst_418:
// rs1_val == -1073741825, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-1073741825; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -1073741825, 9, x1, 1072, x2)

inst_419:
// rs1_val == -2147483649, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-2147483649; immval:-8
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -2147483649, -8, x1, 1080, x2)

inst_420:
// rs1_val == -4294967297, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-4294967297; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -4294967297, 5, x1, 1088, x2)

inst_421:
// rs1_val == -8589934593, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-8589934593; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -8589934593, -2, x1, 1096, x2)

inst_422:
// rs1_val == -17179869185, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-17179869185; immval:-17
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -17179869185, -17, x1, 1104, x2)

inst_423:
// rs1_val == -34359738369, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-34359738369; immval:-4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -34359738369, -4, x1, 1112, x2)

inst_424:
// rs1_val == -68719476737, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-68719476737; immval:-6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -68719476737, -6, x1, 1120, x2)

inst_425:
// rs1_val == -137438953473, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-137438953473; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -137438953473, 10, x1, 1128, x2)

inst_426:
// rs1_val == -549755813889, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-549755813889; immval:-2
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -549755813889, -2, x1, 1136, x2)

inst_427:
// rs1_val == -1099511627777, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-1099511627777; immval:4
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -1099511627777, 4, x1, 1144, x2)

inst_428:
// rs1_val == -2199023255553, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-2199023255553; immval:-3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -2199023255553, -3, x1, 1152, x2)

inst_429:
// rs1_val == -4398046511105, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-4398046511105; immval:5
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -4398046511105, 5, x1, 1160, x2)

inst_430:
// rs1_val == -8796093022209, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-8796093022209; immval:9
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -8796093022209, 9, x1, 1168, x2)

inst_431:
// rs1_val == -17592186044417, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-17592186044417; immval:3
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -17592186044417, 3, x1, 1176, x2)

inst_432:
// rs1_val == -35184372088833, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-35184372088833; immval:0
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -35184372088833, 0, x1, 1184, x2)

inst_433:
// rs1_val == -70368744177665, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-70368744177665; immval:10
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -70368744177665, 10, x1, 1192, x2)

inst_434:
// rs1_val == -140737488355329, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-140737488355329; immval:-8
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -140737488355329, -8, x1, 1200, x2)

inst_435:
// rs1_val == -562949953421313, 
// opcode:c.addiw; op1:x10; dest:x10 op1val:-562949953421313; immval:-6
TEST_CI_OP( c.addiw, x10, 0x0000000000000000, -562949953421313, -6, x1, 1208, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 152*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
