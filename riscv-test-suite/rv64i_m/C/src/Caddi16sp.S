
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV64IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",caddi16sp)
la x1,signature_x1_1
TEST_CI_OP( c.addi16sp, x2, 0, -1, 496, x1, 0, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -9223372036854775808, 496, x1, 8, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 0, 496, x1, 16, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 9223372036854775807, 496, x1, 24, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 1, 496, x1, 32, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 256, 256, x1, 40, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 6148914691236517205, -32, x1, 48, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, -32, x1, 56, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, 16, x1, 64, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, 32, x1, 72, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, 64, x1, 80, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, 128, x1, 88, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, -512, x1, 96, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, -48, x1, 104, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, -80, x1, 112, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, -144, x1, 120, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, -272, x1, 128, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, 336, x1, 136, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1, -352, x1, 144, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 2, 496, x1, 152, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 4, 496, x1, 160, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 8, 496, x1, 168, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 16, 496, x1, 176, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 32, 496, x1, 184, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 64, 496, x1, 192, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 128, 496, x1, 200, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 512, 496, x1, 208, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 1024, 496, x1, 216, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 2048, 496, x1, 224, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 4096, 496, x1, 232, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 8192, 496, x1, 240, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 16384, 496, x1, 248, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 32768, 496, x1, 256, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 65536, 496, x1, 264, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 131072, 496, x1, 272, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 262144, 496, x1, 280, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 524288, 496, x1, 288, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 1048576, 496, x1, 296, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 2097152, 496, x1, 304, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 4194304, 496, x1, 312, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 8388608, 496, x1, 320, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 16777216, 496, x1, 328, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 33554432, 496, x1, 336, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 67108864, 496, x1, 344, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 134217728, 496, x1, 352, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 268435456, 496, x1, 360, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 536870912, 496, x1, 368, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 1073741824, 496, x1, 376, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 2147483648, 496, x1, 384, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 4294967296, 496, x1, 392, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 8589934592, 496, x1, 400, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 17179869184, 496, x1, 408, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 34359738368, 496, x1, 416, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 68719476736, 496, x1, 424, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 137438953472, 496, x1, 432, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 274877906944, 496, x1, 440, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 549755813888, 496, x1, 448, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 1099511627776, 496, x1, 456, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 2199023255552, 496, x1, 464, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 4398046511104, 496, x1, 472, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 8796093022208, 496, x1, 480, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 17592186044416, 496, x1, 488, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 35184372088832, 496, x1, 496, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 70368744177664, 496, x1, 504, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 140737488355328, 496, x1, 512, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 281474976710656, 496, x1, 520, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 562949953421312, 496, x1, 528, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 1125899906842624, 496, x1, 536, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 2251799813685248, 496, x1, 544, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 4503599627370496, 496, x1, 552, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 9007199254740992, 496, x1, 560, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 18014398509481984, 496, x1, 568, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 36028797018963968, 496, x1, 576, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 72057594037927936, 496, x1, 584, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 144115188075855872, 496, x1, 592, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 288230376151711744, 496, x1, 600, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 576460752303423488, 496, x1, 608, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 1152921504606846976, 496, x1, 616, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 2305843009213693952, 496, x1, 624, x3)
TEST_CI_OP( c.addi16sp, x2, 0, 4611686018427387904, 496, x1, 632, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -2, 496, x1, 640, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1099511627777, 496, x1, 648, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -2199023255553, 496, x1, 656, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -4398046511105, 496, x1, 664, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -8796093022209, 496, x1, 672, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -17592186044417, 496, x1, 680, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -35184372088833, 496, x1, 688, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -70368744177665, 496, x1, 696, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -140737488355329, 496, x1, 704, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -281474976710657, 496, x1, 712, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -562949953421313, 496, x1, 720, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1125899906842625, 496, x1, 728, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -2251799813685249, 496, x1, 736, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -4503599627370497, 496, x1, 744, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -9007199254740993, 496, x1, 752, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -18014398509481985, 496, x1, 760, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -36028797018963969, 496, x1, 768, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -72057594037927937, 496, x1, 776, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -144115188075855873, 496, x1, 784, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -288230376151711745, 496, x1, 792, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -576460752303423489, 496, x1, 800, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1152921504606846977, 496, x1, 808, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -2305843009213693953, 496, x1, 816, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -4611686018427387905, 496, x1, 824, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -6148914691236517206, 496, x1, 832, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -3, 496, x1, 840, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -5, 496, x1, 848, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -9, 496, x1, 856, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -17, 496, x1, 864, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -33, 496, x1, 872, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -65, 496, x1, 880, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -129, 496, x1, 888, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -257, 496, x1, 896, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -513, 496, x1, 904, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1025, 496, x1, 912, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -2049, 496, x1, 920, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -4097, 496, x1, 928, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -8193, 496, x1, 936, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -16385, 496, x1, 944, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -32769, 496, x1, 952, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -65537, 496, x1, 960, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -131073, 496, x1, 968, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -262145, 496, x1, 976, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -524289, 496, x1, 984, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1048577, 496, x1, 992, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -2097153, 496, x1, 1000, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -4194305, 496, x1, 1008, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -8388609, 496, x1, 1016, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -16777217, 496, x1, 1024, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -33554433, 496, x1, 1032, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -67108865, 496, x1, 1040, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -134217729, 496, x1, 1048, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -268435457, 496, x1, 1056, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -536870913, 496, x1, 1064, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -1073741825, 496, x1, 1072, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -2147483649, 496, x1, 1080, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -4294967297, 496, x1, 1088, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -8589934593, 496, x1, 1096, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -17179869185, 496, x1, 1104, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -34359738369, 496, x1, 1112, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -68719476737, 496, x1, 1120, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -137438953473, 496, x1, 1128, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -274877906945, 496, x1, 1136, x3)
TEST_CI_OP( c.addi16sp, x2, 0, -549755813889, 496, x1, 1144, x3)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 144*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
