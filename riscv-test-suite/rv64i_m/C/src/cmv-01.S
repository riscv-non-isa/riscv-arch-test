
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 08:16:37 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.mv instruction of the RISC-V C extension for the cmv covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cmv)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs2 == rd and rs2 != 0, rd==x23, rs2==x23, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808
// opcode: c.mv; op2:x23; dest:x23; op2val:-9223372036854775808
TEST_CMV_OP( c.mv, x23, x23, 0x0000000000000000, -9223372036854775808, x1, 0, x4)

inst_1:
// rs2 != rd and rs2 != 0, rd==x16, rs2==x31, rs2_val == 0, rs2_val==0
// opcode: c.mv; op2:x31; dest:x16; op2val:0
TEST_CMV_OP( c.mv, x16, x31, 0x0000000000000000, 0, x1, 8, x4)

inst_2:
// rd==x5, rs2==x17, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode: c.mv; op2:x17; dest:x5; op2val:9223372036854775807
TEST_CMV_OP( c.mv, x5, x17, 0x0000000000000000, 9223372036854775807, x1, 16, x4)

inst_3:
// rd==x12, rs2==x19, rs2_val == 1, 
// opcode: c.mv; op2:x19; dest:x12; op2val:1
TEST_CMV_OP( c.mv, x12, x19, 0x0000000000000000, 1, x1, 24, x4)

inst_4:
// rd==x15, rs2==x13, rs2_val == 2, rs2_val==2
// opcode: c.mv; op2:x13; dest:x15; op2val:2
TEST_CMV_OP( c.mv, x15, x13, 0x0000000000000000, 2, x1, 32, x4)

inst_5:
// rd==x25, rs2==x20, rs2_val == 4, rs2_val==4
// opcode: c.mv; op2:x20; dest:x25; op2val:4
TEST_CMV_OP( c.mv, x25, x20, 0x0000000000000000, 4, x1, 40, x4)

inst_6:
// rd==x6, rs2==x10, rs2_val == 8, 
// opcode: c.mv; op2:x10; dest:x6; op2val:8
TEST_CMV_OP( c.mv, x6, x10, 0x0000000000000000, 8, x1, 48, x4)

inst_7:
// rd==x18, rs2==x11, rs2_val == 16, 
// opcode: c.mv; op2:x11; dest:x18; op2val:16
TEST_CMV_OP( c.mv, x18, x11, 0x0000000000000000, 16, x1, 56, x4)

inst_8:
// rd==x13, rs2==x12, rs2_val == 32, 
// opcode: c.mv; op2:x12; dest:x13; op2val:32
TEST_CMV_OP( c.mv, x13, x12, 0x0000000000000000, 32, x1, 64, x4)

inst_9:
// rd==x26, rs2==x14, rs2_val == 64, 
// opcode: c.mv; op2:x14; dest:x26; op2val:64
TEST_CMV_OP( c.mv, x26, x14, 0x0000000000000000, 64, x1, 72, x4)

inst_10:
// rd==x8, rs2==x30, rs2_val == 128, 
// opcode: c.mv; op2:x30; dest:x8; op2val:128
TEST_CMV_OP( c.mv, x8, x30, 0x0000000000000000, 128, x1, 80, x4)

inst_11:
// rd==x29, rs2==x2, rs2_val == 256, 
// opcode: c.mv; op2:x2; dest:x29; op2val:256
TEST_CMV_OP( c.mv, x29, x2, 0x0000000000000000, 256, x1, 88, x4)

inst_12:
// rd==x9, rs2==x26, rs2_val == 512, 
// opcode: c.mv; op2:x26; dest:x9; op2val:512
TEST_CMV_OP( c.mv, x9, x26, 0x0000000000000000, 512, x1, 96, x4)

inst_13:
// rd==x22, rs2==x3, rs2_val == 1024, 
// opcode: c.mv; op2:x3; dest:x22; op2val:1024
TEST_CMV_OP( c.mv, x22, x3, 0x0000000000000000, 1024, x1, 104, x4)

inst_14:
// rd==x28, rs2==x8, rs2_val == 2048, 
// opcode: c.mv; op2:x8; dest:x28; op2val:2048
TEST_CMV_OP( c.mv, x28, x8, 0x0000000000000000, 2048, x1, 112, x4)

inst_15:
// rd==x30, rs2==x27, rs2_val == 4096, 
// opcode: c.mv; op2:x27; dest:x30; op2val:4096
TEST_CMV_OP( c.mv, x30, x27, 0x0000000000000000, 4096, x1, 120, x4)

inst_16:
// rd==x14, rs2==x21, rs2_val == 8192, 
// opcode: c.mv; op2:x21; dest:x14; op2val:8192
TEST_CMV_OP( c.mv, x14, x21, 0x0000000000000000, 8192, x1, 128, x4)

inst_17:
// rd==x11, rs2==x24, rs2_val == 16384, 
// opcode: c.mv; op2:x24; dest:x11; op2val:16384
TEST_CMV_OP( c.mv, x11, x24, 0x0000000000000000, 16384, x1, 136, x12)
RVTEST_SIGBASE( x8,signature_x8_0)

inst_18:
// rd==x3, rs2==x16, rs2_val == 32768, 
// opcode: c.mv; op2:x16; dest:x3; op2val:32768
TEST_CMV_OP( c.mv, x3, x16, 0x0000000000000000, 32768, x8, 0, x12)

inst_19:
// rd==x0, rs2==x5, rs2_val == 65536, 
// opcode: c.mv; op2:x5; dest:x0; op2val:65536
TEST_CMV_OP( c.mv, x0, x5, 0x0000000000000000, 65536, x8, 8, x12)

inst_20:
// rd==x7, rs2==x4, rs2_val == 131072, 
// opcode: c.mv; op2:x4; dest:x7; op2val:131072
TEST_CMV_OP( c.mv, x7, x4, 0x0000000000000000, 131072, x8, 16, x12)

inst_21:
// rd==x31, rs2==x25, rs2_val == 262144, 
// opcode: c.mv; op2:x25; dest:x31; op2val:262144
TEST_CMV_OP( c.mv, x31, x25, 0x0000000000000000, 262144, x8, 24, x12)

inst_22:
// rd==x10, rs2==x1, rs2_val == 524288, 
// opcode: c.mv; op2:x1; dest:x10; op2val:524288
TEST_CMV_OP( c.mv, x10, x1, 0x0000000000000000, 524288, x8, 32, x12)

inst_23:
// rd==x21, rs2==x9, rs2_val == 1048576, 
// opcode: c.mv; op2:x9; dest:x21; op2val:1048576
TEST_CMV_OP( c.mv, x21, x9, 0x0000000000000000, 1048576, x8, 40, x12)

inst_24:
// rd==x27, rs2==x7, rs2_val == 2097152, 
// opcode: c.mv; op2:x7; dest:x27; op2val:2097152
TEST_CMV_OP( c.mv, x27, x7, 0x0000000000000000, 2097152, x8, 48, x12)

inst_25:
// rd==x20, rs2==x22, rs2_val == 4194304, 
// opcode: c.mv; op2:x22; dest:x20; op2val:4194304
TEST_CMV_OP( c.mv, x20, x22, 0x0000000000000000, 4194304, x8, 56, x12)

inst_26:
// rd==x24, rs2==x6, rs2_val == 8388608, 
// opcode: c.mv; op2:x6; dest:x24; op2val:8388608
TEST_CMV_OP( c.mv, x24, x6, 0x0000000000000000, 8388608, x8, 64, x12)

inst_27:
// rd==x2, rs2==x15, rs2_val == 16777216, 
// opcode: c.mv; op2:x15; dest:x2; op2val:16777216
TEST_CMV_OP( c.mv, x2, x15, 0x0000000000000000, 16777216, x8, 72, x12)

inst_28:
// rd==x17, rs2==x29, rs2_val == 33554432, 
// opcode: c.mv; op2:x29; dest:x17; op2val:33554432
TEST_CMV_OP( c.mv, x17, x29, 0x0000000000000000, 33554432, x8, 80, x12)

inst_29:
// rd==x19, rs2==x18, rs2_val == 67108864, 
// opcode: c.mv; op2:x18; dest:x19; op2val:67108864
TEST_CMV_OP( c.mv, x19, x18, 0x0000000000000000, 67108864, x8, 88, x12)

inst_30:
// rd==x4, rs2==x28, rs2_val == 134217728, 
// opcode: c.mv; op2:x28; dest:x4; op2val:134217728
TEST_CMV_OP( c.mv, x4, x28, 0x0000000000000000, 134217728, x8, 96, x12)

inst_31:
// rd==x1, rs2_val == 268435456, 
// opcode: c.mv; op2:x15; dest:x1; op2val:268435456
TEST_CMV_OP( c.mv, x1, x15, 0x0000000000000000, 268435456, x8, 104, x12)

inst_32:
// rs2_val == 536870912, 
// opcode: c.mv; op2:x11; dest:x10; op2val:536870912
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 536870912, x8, 112, x12)

inst_33:
// rs2_val == 1073741824, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1073741824
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 1073741824, x8, 120, x12)

inst_34:
// rs2_val == 2147483648, 
// opcode: c.mv; op2:x11; dest:x10; op2val:2147483648
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 2147483648, x8, 128, x12)

inst_35:
// rs2_val == 4294967296, 
// opcode: c.mv; op2:x11; dest:x10; op2val:4294967296
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 4294967296, x8, 136, x12)

inst_36:
// rs2_val == 8589934592, 
// opcode: c.mv; op2:x11; dest:x10; op2val:8589934592
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 8589934592, x8, 144, x12)

inst_37:
// rs2_val == 17179869184, 
// opcode: c.mv; op2:x11; dest:x10; op2val:17179869184
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 17179869184, x8, 152, x12)

inst_38:
// rs2_val == 34359738368, 
// opcode: c.mv; op2:x11; dest:x10; op2val:34359738368
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 34359738368, x8, 160, x12)

inst_39:
// rs2_val == 68719476736, 
// opcode: c.mv; op2:x11; dest:x10; op2val:68719476736
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 68719476736, x8, 168, x12)

inst_40:
// rs2_val == 137438953472, 
// opcode: c.mv; op2:x11; dest:x10; op2val:137438953472
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 137438953472, x8, 176, x12)

inst_41:
// rs2_val == 274877906944, 
// opcode: c.mv; op2:x11; dest:x10; op2val:274877906944
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 274877906944, x8, 184, x12)

inst_42:
// rs2_val == 549755813888, 
// opcode: c.mv; op2:x11; dest:x10; op2val:549755813888
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 549755813888, x8, 192, x12)

inst_43:
// rs2_val == 1099511627776, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1099511627776
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 1099511627776, x8, 200, x12)

inst_44:
// rs2_val == 2199023255552, 
// opcode: c.mv; op2:x11; dest:x10; op2val:2199023255552
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 2199023255552, x8, 208, x12)

inst_45:
// rs2_val == 4398046511104, 
// opcode: c.mv; op2:x11; dest:x10; op2val:4398046511104
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 4398046511104, x8, 216, x12)

inst_46:
// rs2_val == 8796093022208, 
// opcode: c.mv; op2:x11; dest:x10; op2val:8796093022208
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 8796093022208, x8, 224, x12)

inst_47:
// rs2_val == 17592186044416, 
// opcode: c.mv; op2:x11; dest:x10; op2val:17592186044416
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 17592186044416, x8, 232, x12)

inst_48:
// rs2_val == 35184372088832, 
// opcode: c.mv; op2:x11; dest:x10; op2val:35184372088832
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 35184372088832, x8, 240, x12)

inst_49:
// rs2_val == 70368744177664, 
// opcode: c.mv; op2:x11; dest:x10; op2val:70368744177664
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 70368744177664, x8, 248, x12)

inst_50:
// rs2_val == 140737488355328, 
// opcode: c.mv; op2:x11; dest:x10; op2val:140737488355328
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 140737488355328, x8, 256, x12)

inst_51:
// rs2_val == 281474976710656, 
// opcode: c.mv; op2:x11; dest:x10; op2val:281474976710656
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 281474976710656, x8, 264, x12)

inst_52:
// rs2_val == 562949953421312, 
// opcode: c.mv; op2:x11; dest:x10; op2val:562949953421312
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 562949953421312, x8, 272, x12)

inst_53:
// rs2_val == 1125899906842624, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1125899906842624
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 1125899906842624, x8, 280, x12)

inst_54:
// rs2_val == 2251799813685248, 
// opcode: c.mv; op2:x11; dest:x10; op2val:2251799813685248
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 2251799813685248, x8, 288, x12)

inst_55:
// rs2_val == 4503599627370496, 
// opcode: c.mv; op2:x11; dest:x10; op2val:4503599627370496
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 4503599627370496, x8, 296, x12)

inst_56:
// rs2_val == 9007199254740992, 
// opcode: c.mv; op2:x11; dest:x10; op2val:9007199254740992
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 9007199254740992, x8, 304, x12)

inst_57:
// rs2_val == 18014398509481984, 
// opcode: c.mv; op2:x11; dest:x10; op2val:18014398509481984
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 18014398509481984, x8, 312, x12)

inst_58:
// rs2_val == 36028797018963968, 
// opcode: c.mv; op2:x11; dest:x10; op2val:36028797018963968
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 36028797018963968, x8, 320, x12)

inst_59:
// rs2_val == 72057594037927936, 
// opcode: c.mv; op2:x11; dest:x10; op2val:72057594037927936
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 72057594037927936, x8, 328, x12)

inst_60:
// rs2_val == 144115188075855872, 
// opcode: c.mv; op2:x11; dest:x10; op2val:144115188075855872
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 144115188075855872, x8, 336, x12)

inst_61:
// rs2_val == 288230376151711744, 
// opcode: c.mv; op2:x11; dest:x10; op2val:288230376151711744
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 288230376151711744, x8, 344, x12)

inst_62:
// rs2_val == 576460752303423488, 
// opcode: c.mv; op2:x11; dest:x10; op2val:576460752303423488
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 576460752303423488, x8, 352, x12)

inst_63:
// rs2_val == 1152921504606846976, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1152921504606846976
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 1152921504606846976, x8, 360, x12)

inst_64:
// rs2_val == 2305843009213693952, 
// opcode: c.mv; op2:x11; dest:x10; op2val:2305843009213693952
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 2305843009213693952, x8, 368, x12)

inst_65:
// rs2_val == 4611686018427387904, 
// opcode: c.mv; op2:x11; dest:x10; op2val:4611686018427387904
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 4611686018427387904, x8, 376, x12)

inst_66:
// rs2_val == -2, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -2, x8, 384, x12)

inst_67:
// rs2_val == -3, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-3
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -3, x8, 392, x12)

inst_68:
// rs2_val == -5, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-5
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -5, x8, 400, x12)

inst_69:
// rs2_val == -9, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-9
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -9, x8, 408, x12)

inst_70:
// rs2_val == -17, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-17
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -17, x8, 416, x12)

inst_71:
// rs2_val == -33, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-33
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -33, x8, 424, x12)

inst_72:
// rs2_val == -65, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-65
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -65, x8, 432, x12)

inst_73:
// rs2_val == -129, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-129
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -129, x8, 440, x12)

inst_74:
// rs2_val == -257, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-257
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -257, x8, 448, x12)

inst_75:
// rs2_val == -513, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-513
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -513, x8, 456, x12)

inst_76:
// rs2_val == -1025, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1025
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -1025, x8, 464, x12)

inst_77:
// rs2_val == -2049, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2049
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -2049, x8, 472, x12)

inst_78:
// rs2_val == -4097, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4097
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -4097, x8, 480, x12)

inst_79:
// rs2_val == -8193, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-8193
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -8193, x8, 488, x12)

inst_80:
// rs2_val == -16385, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-16385
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -16385, x8, 496, x12)

inst_81:
// rs2_val == -32769, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-32769
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -32769, x8, 504, x12)

inst_82:
// rs2_val == -65537, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-65537
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -65537, x8, 512, x12)

inst_83:
// rs2_val == -131073, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-131073
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -131073, x8, 520, x12)

inst_84:
// rs2_val == -262145, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-262145
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -262145, x8, 528, x12)

inst_85:
// rs2_val == -524289, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-524289
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -524289, x8, 536, x12)

inst_86:
// rs2_val == -1048577, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1048577
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -1048577, x8, 544, x12)

inst_87:
// rs2_val == -2305843009213693953, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2305843009213693953
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -2305843009213693953, x8, 552, x12)

inst_88:
// rs2_val == -4611686018427387905, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4611686018427387905
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -4611686018427387905, x8, 560, x12)

inst_89:
// rs2_val == 6148914691236517205, rs2_val==6148914691236517205
// opcode: c.mv; op2:x11; dest:x10; op2val:6148914691236517205
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 6148914691236517205, x8, 568, x12)

inst_90:
// rs2_val == -6148914691236517206, rs2_val==-6148914691236517206
// opcode: c.mv; op2:x11; dest:x10; op2val:-6148914691236517206
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -6148914691236517206, x8, 576, x12)

inst_91:
// rs2_val==3, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 3, x8, 584, x12)

inst_92:
// rs2_val==5, 
// opcode: c.mv; op2:x11; dest:x10; op2val:5
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 5, x8, 592, x12)

inst_93:
// rs2_val==3689348814741910323, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3689348814741910323
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 3689348814741910323, x8, 600, x12)

inst_94:
// rs2_val==7378697629483820646, 
// opcode: c.mv; op2:x11; dest:x10; op2val:7378697629483820646
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 7378697629483820646, x8, 608, x12)

inst_95:
// rs2_val==-3037000499, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-3037000499
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -3037000499, x8, 616, x12)

inst_96:
// rs2_val==3037000499, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3037000499
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 3037000499, x8, 624, x12)

inst_97:
// rs2_val==6148914691236517204, 
// opcode: c.mv; op2:x11; dest:x10; op2val:6148914691236517204
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 6148914691236517204, x8, 632, x12)

inst_98:
// rs2_val==3689348814741910322, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3689348814741910322
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 3689348814741910322, x8, 640, x12)

inst_99:
// rs2_val==7378697629483820645, 
// opcode: c.mv; op2:x11; dest:x10; op2val:7378697629483820645
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 7378697629483820645, x8, 648, x12)

inst_100:
// rs2_val==3037000498, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3037000498
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 3037000498, x8, 656, x12)

inst_101:
// rs2_val==6148914691236517206, 
// opcode: c.mv; op2:x11; dest:x10; op2val:6148914691236517206
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 6148914691236517206, x8, 664, x12)

inst_102:
// rs2_val==-6148914691236517205, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-6148914691236517205
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -6148914691236517205, x8, 672, x12)

inst_103:
// rs2_val==6, 
// opcode: c.mv; op2:x11; dest:x10; op2val:6
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 6, x8, 680, x12)

inst_104:
// rs2_val==3689348814741910324, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3689348814741910324
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 3689348814741910324, x8, 688, x12)

inst_105:
// rs2_val==7378697629483820647, 
// opcode: c.mv; op2:x11; dest:x10; op2val:7378697629483820647
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 7378697629483820647, x8, 696, x12)

inst_106:
// rs2_val==-3037000498, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-3037000498
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -3037000498, x8, 704, x12)

inst_107:
// rs2_val==3037000500, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3037000500
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 3037000500, x8, 712, x12)

inst_108:
// rs2_val == -2097153, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2097153
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -2097153, x8, 720, x12)

inst_109:
// rs2_val == -4194305, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4194305
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -4194305, x8, 728, x12)

inst_110:
// rs2_val == -8388609, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-8388609
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -8388609, x8, 736, x12)

inst_111:
// rs2_val == -16777217, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-16777217
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -16777217, x8, 744, x12)

inst_112:
// rs2_val == -33554433, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-33554433
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -33554433, x8, 752, x12)

inst_113:
// rs2_val == -67108865, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-67108865
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -67108865, x8, 760, x12)

inst_114:
// rs2_val == -134217729, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-134217729
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -134217729, x8, 768, x12)

inst_115:
// rs2_val == -268435457, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-268435457
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -268435457, x8, 776, x12)

inst_116:
// rs2_val == -536870913, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-536870913
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -536870913, x8, 784, x12)

inst_117:
// rs2_val == -1073741825, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1073741825
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -1073741825, x8, 792, x12)

inst_118:
// rs2_val == -2147483649, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2147483649
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -2147483649, x8, 800, x12)

inst_119:
// rs2_val == -4294967297, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4294967297
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -4294967297, x8, 808, x12)

inst_120:
// rs2_val == -8589934593, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-8589934593
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -8589934593, x8, 816, x12)

inst_121:
// rs2_val == -17179869185, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-17179869185
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -17179869185, x8, 824, x12)

inst_122:
// rs2_val == -34359738369, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-34359738369
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -34359738369, x8, 832, x12)

inst_123:
// rs2_val == -68719476737, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-68719476737
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -68719476737, x8, 840, x12)

inst_124:
// rs2_val == -137438953473, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-137438953473
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -137438953473, x8, 848, x12)

inst_125:
// rs2_val == -274877906945, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-274877906945
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -274877906945, x8, 856, x12)

inst_126:
// rs2_val == -549755813889, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-549755813889
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -549755813889, x8, 864, x12)

inst_127:
// rs2_val == -1099511627777, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1099511627777
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -1099511627777, x8, 872, x12)

inst_128:
// rs2_val == -2199023255553, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2199023255553
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -2199023255553, x8, 880, x12)

inst_129:
// rs2_val == -4398046511105, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4398046511105
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -4398046511105, x8, 888, x12)

inst_130:
// rs2_val == -8796093022209, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-8796093022209
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -8796093022209, x8, 896, x12)

inst_131:
// rs2_val == -17592186044417, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-17592186044417
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -17592186044417, x8, 904, x12)

inst_132:
// rs2_val == -35184372088833, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-35184372088833
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -35184372088833, x8, 912, x12)

inst_133:
// rs2_val == -70368744177665, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-70368744177665
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -70368744177665, x8, 920, x12)

inst_134:
// rs2_val == -140737488355329, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-140737488355329
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -140737488355329, x8, 928, x12)

inst_135:
// rs2_val == -281474976710657, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-281474976710657
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -281474976710657, x8, 936, x12)

inst_136:
// rs2_val == -562949953421313, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-562949953421313
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -562949953421313, x8, 944, x12)

inst_137:
// rs2_val == -1125899906842625, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1125899906842625
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -1125899906842625, x8, 952, x12)

inst_138:
// rs2_val == -2251799813685249, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2251799813685249
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -2251799813685249, x8, 960, x12)

inst_139:
// rs2_val == -4503599627370497, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4503599627370497
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -4503599627370497, x8, 968, x12)

inst_140:
// rs2_val == -9007199254740993, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-9007199254740993
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -9007199254740993, x8, 976, x12)

inst_141:
// rs2_val == -18014398509481985, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-18014398509481985
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -18014398509481985, x8, 984, x12)

inst_142:
// rs2_val == -36028797018963969, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-36028797018963969
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -36028797018963969, x8, 992, x12)

inst_143:
// rs2_val == -72057594037927937, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-72057594037927937
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -72057594037927937, x8, 1000, x12)

inst_144:
// rs2_val == -144115188075855873, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-144115188075855873
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -144115188075855873, x8, 1008, x12)

inst_145:
// rs2_val == -288230376151711745, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-288230376151711745
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -288230376151711745, x8, 1016, x12)

inst_146:
// rs2_val == -576460752303423489, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-576460752303423489
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -576460752303423489, x8, 1024, x12)

inst_147:
// rs2_val == -1152921504606846977, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1152921504606846977
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, -1152921504606846977, x8, 1032, x12)

inst_148:
// rs2_val == 65536, 
// opcode: c.mv; op2:x11; dest:x10; op2val:65536
TEST_CMV_OP( c.mv, x10, x11, 0x0000000000000000, 65536, x8, 1040, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 131*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
