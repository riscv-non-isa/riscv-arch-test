
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 08:16:37 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sw instruction of the RISC-V C extension for the csw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",csw)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x15, rs2==x12, rs2_val == (-2**(xlen-1)), imm_val > 0, rs2_val == -9223372036854775808
// opcode:c.sw; op1:x15; op2:x12; op2val:-9223372036854775808; immval:20
TEST_STORE(x1,x2,0,x15,x12,-9223372036854775808,20,0,c.sw,0)

inst_1:
// rs1==x14, rs2==x9, rs2_val == 0, imm_val == 32
// opcode:c.sw; op1:x14; op2:x9; op2val:0; immval:32
TEST_STORE(x1,x2,0,x14,x9,0,32,8,c.sw,0)

inst_2:
// rs1==x8, rs2==x14, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode:c.sw; op1:x8; op2:x14; op2val:9223372036854775807; immval:32
TEST_STORE(x1,x2,0,x8,x14,9223372036854775807,32,16,c.sw,0)

inst_3:
// rs1==x11, rs2==x10, rs2_val == 1, 
// opcode:c.sw; op1:x11; op2:x10; op2val:1; immval:76
TEST_STORE(x1,x2,0,x11,x10,1,76,24,c.sw,0)

inst_4:
// rs1==x9, rs2==x15, imm_val == 0, rs2_val == -1048577
// opcode:c.sw; op1:x9; op2:x15; op2val:-1048577; immval:0
TEST_STORE(x1,x2,0,x9,x15,-1048577,0,32,c.sw,0)

inst_5:
// rs1==x10, rs2==x13, rs2_val == 2, 
// opcode:c.sw; op1:x10; op2:x13; op2val:2; immval:48
TEST_STORE(x1,x2,0,x10,x13,2,48,40,c.sw,0)

inst_6:
// rs1==x13, rs2==x8, rs2_val == 4, 
// opcode:c.sw; op1:x13; op2:x8; op2val:4; immval:28
TEST_STORE(x1,x2,0,x13,x8,4,28,48,c.sw,0)

inst_7:
// rs1==x12, rs2==x11, rs2_val == 8, 
// opcode:c.sw; op1:x12; op2:x11; op2val:8; immval:48
TEST_STORE(x1,x2,0,x12,x11,8,48,56,c.sw,0)

inst_8:
// rs2_val == 16, imm_val == 116
// opcode:c.sw; op1:x10; op2:x11; op2val:16; immval:116
TEST_STORE(x1,x2,0,x10,x11,16,116,64,c.sw,0)

inst_9:
// rs2_val == 32, imm_val == 4
// opcode:c.sw; op1:x10; op2:x11; op2val:32; immval:4
TEST_STORE(x1,x2,0,x10,x11,32,4,72,c.sw,0)

inst_10:
// rs2_val == 64, 
// opcode:c.sw; op1:x10; op2:x11; op2val:64; immval:44
TEST_STORE(x1,x2,0,x10,x11,64,44,80,c.sw,0)

inst_11:
// rs2_val == 128, 
// opcode:c.sw; op1:x10; op2:x11; op2val:128; immval:24
TEST_STORE(x1,x2,0,x10,x11,128,24,88,c.sw,0)

inst_12:
// rs2_val == 256, 
// opcode:c.sw; op1:x10; op2:x11; op2val:256; immval:52
TEST_STORE(x1,x2,0,x10,x11,256,52,96,c.sw,0)

inst_13:
// rs2_val == 512, imm_val == 60
// opcode:c.sw; op1:x10; op2:x11; op2val:512; immval:60
TEST_STORE(x1,x2,0,x10,x11,512,60,104,c.sw,0)

inst_14:
// rs2_val == 1024, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1024; immval:20
TEST_STORE(x1,x2,0,x10,x11,1024,20,112,c.sw,0)

inst_15:
// rs2_val == 2048, 
// opcode:c.sw; op1:x10; op2:x11; op2val:2048; immval:124
TEST_STORE(x1,x2,0,x10,x11,2048,124,120,c.sw,0)

inst_16:
// rs2_val == 4096, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4096; immval:124
TEST_STORE(x1,x2,0,x10,x11,4096,124,128,c.sw,0)

inst_17:
// rs2_val == 8192, 
// opcode:c.sw; op1:x10; op2:x11; op2val:8192; immval:20
TEST_STORE(x1,x2,0,x10,x11,8192,20,136,c.sw,0)

inst_18:
// rs2_val == 16384, 
// opcode:c.sw; op1:x10; op2:x11; op2val:16384; immval:12
TEST_STORE(x1,x2,0,x10,x11,16384,12,144,c.sw,0)

inst_19:
// rs2_val == 32768, 
// opcode:c.sw; op1:x10; op2:x11; op2val:32768; immval:48
TEST_STORE(x1,x2,0,x10,x11,32768,48,152,c.sw,0)

inst_20:
// rs2_val == 65536, 
// opcode:c.sw; op1:x10; op2:x11; op2val:65536; immval:32
TEST_STORE(x1,x2,0,x10,x11,65536,32,160,c.sw,0)

inst_21:
// rs2_val == 131072, imm_val == 108
// opcode:c.sw; op1:x10; op2:x11; op2val:131072; immval:108
TEST_STORE(x1,x2,0,x10,x11,131072,108,168,c.sw,0)

inst_22:
// rs2_val == 262144, 
// opcode:c.sw; op1:x10; op2:x11; op2val:262144; immval:32
TEST_STORE(x1,x2,0,x10,x11,262144,32,176,c.sw,0)

inst_23:
// rs2_val == 524288, 
// opcode:c.sw; op1:x10; op2:x11; op2val:524288; immval:108
TEST_STORE(x1,x2,0,x10,x11,524288,108,184,c.sw,0)

inst_24:
// rs2_val == 1048576, imm_val == 120
// opcode:c.sw; op1:x10; op2:x11; op2val:1048576; immval:120
TEST_STORE(x1,x2,0,x10,x11,1048576,120,192,c.sw,0)

inst_25:
// rs2_val == 2097152, 
// opcode:c.sw; op1:x10; op2:x11; op2val:2097152; immval:12
TEST_STORE(x1,x2,0,x10,x11,2097152,12,200,c.sw,0)

inst_26:
// rs2_val == 4194304, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4194304; immval:116
TEST_STORE(x1,x2,0,x10,x11,4194304,116,208,c.sw,0)

inst_27:
// rs2_val == 8388608, 
// opcode:c.sw; op1:x10; op2:x11; op2val:8388608; immval:32
TEST_STORE(x1,x2,0,x10,x11,8388608,32,216,c.sw,0)

inst_28:
// rs2_val == 16777216, 
// opcode:c.sw; op1:x10; op2:x11; op2val:16777216; immval:120
TEST_STORE(x1,x2,0,x10,x11,16777216,120,224,c.sw,0)

inst_29:
// rs2_val == 33554432, 
// opcode:c.sw; op1:x10; op2:x11; op2val:33554432; immval:0
TEST_STORE(x1,x2,0,x10,x11,33554432,0,232,c.sw,0)

inst_30:
// rs2_val == 67108864, imm_val == 16
// opcode:c.sw; op1:x10; op2:x11; op2val:67108864; immval:16
TEST_STORE(x1,x2,0,x10,x11,67108864,16,240,c.sw,0)

inst_31:
// rs2_val == 134217728, 
// opcode:c.sw; op1:x10; op2:x11; op2val:134217728; immval:56
TEST_STORE(x1,x2,0,x10,x11,134217728,56,248,c.sw,0)

inst_32:
// rs2_val == 268435456, 
// opcode:c.sw; op1:x10; op2:x11; op2val:268435456; immval:32
TEST_STORE(x1,x2,0,x10,x11,268435456,32,256,c.sw,0)

inst_33:
// rs2_val == 536870912, 
// opcode:c.sw; op1:x10; op2:x11; op2val:536870912; immval:56
TEST_STORE(x1,x2,0,x10,x11,536870912,56,264,c.sw,0)

inst_34:
// rs2_val == 1073741824, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1073741824; immval:0
TEST_STORE(x1,x2,0,x10,x11,1073741824,0,272,c.sw,0)

inst_35:
// rs2_val == 2147483648, 
// opcode:c.sw; op1:x10; op2:x11; op2val:2147483648; immval:4
TEST_STORE(x1,x2,0,x10,x11,2147483648,4,280,c.sw,0)

inst_36:
// rs2_val == 4294967296, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4294967296; immval:48
TEST_STORE(x1,x2,0,x10,x11,4294967296,48,288,c.sw,0)

inst_37:
// rs2_val == 8589934592, 
// opcode:c.sw; op1:x10; op2:x11; op2val:8589934592; immval:28
TEST_STORE(x1,x2,0,x10,x11,8589934592,28,296,c.sw,0)

inst_38:
// rs2_val == 17179869184, 
// opcode:c.sw; op1:x10; op2:x11; op2val:17179869184; immval:44
TEST_STORE(x1,x2,0,x10,x11,17179869184,44,304,c.sw,0)

inst_39:
// rs2_val == 34359738368, 
// opcode:c.sw; op1:x10; op2:x11; op2val:34359738368; immval:44
TEST_STORE(x1,x2,0,x10,x11,34359738368,44,312,c.sw,0)

inst_40:
// rs2_val == 68719476736, 
// opcode:c.sw; op1:x10; op2:x11; op2val:68719476736; immval:60
TEST_STORE(x1,x2,0,x10,x11,68719476736,60,320,c.sw,0)

inst_41:
// rs2_val == 137438953472, imm_val == 84
// opcode:c.sw; op1:x10; op2:x11; op2val:137438953472; immval:84
TEST_STORE(x1,x2,0,x10,x11,137438953472,84,328,c.sw,0)

inst_42:
// rs2_val == 274877906944, 
// opcode:c.sw; op1:x10; op2:x11; op2val:274877906944; immval:52
TEST_STORE(x1,x2,0,x10,x11,274877906944,52,336,c.sw,0)

inst_43:
// rs2_val == 549755813888, 
// opcode:c.sw; op1:x10; op2:x11; op2val:549755813888; immval:28
TEST_STORE(x1,x2,0,x10,x11,549755813888,28,344,c.sw,0)

inst_44:
// rs2_val == 1099511627776, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1099511627776; immval:24
TEST_STORE(x1,x2,0,x10,x11,1099511627776,24,352,c.sw,0)

inst_45:
// rs2_val == 2199023255552, 
// opcode:c.sw; op1:x10; op2:x11; op2val:2199023255552; immval:124
TEST_STORE(x1,x2,0,x10,x11,2199023255552,124,360,c.sw,0)

inst_46:
// rs2_val == 4398046511104, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4398046511104; immval:56
TEST_STORE(x1,x2,0,x10,x11,4398046511104,56,368,c.sw,0)

inst_47:
// rs2_val == 8796093022208, imm_val == 64
// opcode:c.sw; op1:x10; op2:x11; op2val:8796093022208; immval:64
TEST_STORE(x1,x2,0,x10,x11,8796093022208,64,376,c.sw,0)

inst_48:
// rs2_val == 17592186044416, 
// opcode:c.sw; op1:x10; op2:x11; op2val:17592186044416; immval:28
TEST_STORE(x1,x2,0,x10,x11,17592186044416,28,384,c.sw,0)

inst_49:
// rs2_val == 35184372088832, 
// opcode:c.sw; op1:x10; op2:x11; op2val:35184372088832; immval:20
TEST_STORE(x1,x2,0,x10,x11,35184372088832,20,392,c.sw,0)

inst_50:
// rs2_val == 70368744177664, 
// opcode:c.sw; op1:x10; op2:x11; op2val:70368744177664; immval:72
TEST_STORE(x1,x2,0,x10,x11,70368744177664,72,400,c.sw,0)

inst_51:
// rs2_val == 140737488355328, 
// opcode:c.sw; op1:x10; op2:x11; op2val:140737488355328; immval:76
TEST_STORE(x1,x2,0,x10,x11,140737488355328,76,408,c.sw,0)

inst_52:
// rs2_val == 281474976710656, 
// opcode:c.sw; op1:x10; op2:x11; op2val:281474976710656; immval:12
TEST_STORE(x1,x2,0,x10,x11,281474976710656,12,416,c.sw,0)

inst_53:
// rs2_val == 562949953421312, 
// opcode:c.sw; op1:x10; op2:x11; op2val:562949953421312; immval:32
TEST_STORE(x1,x2,0,x10,x11,562949953421312,32,424,c.sw,0)

inst_54:
// rs2_val == 1125899906842624, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1125899906842624; immval:72
TEST_STORE(x1,x2,0,x10,x11,1125899906842624,72,432,c.sw,0)

inst_55:
// rs2_val == 2251799813685248, 
// opcode:c.sw; op1:x10; op2:x11; op2val:2251799813685248; immval:84
TEST_STORE(x1,x2,0,x10,x11,2251799813685248,84,440,c.sw,0)

inst_56:
// rs2_val == 4503599627370496, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4503599627370496; immval:52
TEST_STORE(x1,x2,0,x10,x11,4503599627370496,52,448,c.sw,0)

inst_57:
// rs2_val == 9007199254740992, 
// opcode:c.sw; op1:x10; op2:x11; op2val:9007199254740992; immval:72
TEST_STORE(x1,x2,0,x10,x11,9007199254740992,72,456,c.sw,0)

inst_58:
// rs2_val == 18014398509481984, 
// opcode:c.sw; op1:x10; op2:x11; op2val:18014398509481984; immval:4
TEST_STORE(x1,x2,0,x10,x11,18014398509481984,4,464,c.sw,0)

inst_59:
// rs2_val == 36028797018963968, 
// opcode:c.sw; op1:x10; op2:x11; op2val:36028797018963968; immval:20
TEST_STORE(x1,x2,0,x10,x11,36028797018963968,20,472,c.sw,0)

inst_60:
// rs2_val == 72057594037927936, 
// opcode:c.sw; op1:x10; op2:x11; op2val:72057594037927936; immval:4
TEST_STORE(x1,x2,0,x10,x11,72057594037927936,4,480,c.sw,0)

inst_61:
// rs2_val == 144115188075855872, 
// opcode:c.sw; op1:x10; op2:x11; op2val:144115188075855872; immval:24
TEST_STORE(x1,x2,0,x10,x11,144115188075855872,24,488,c.sw,0)

inst_62:
// rs2_val == 288230376151711744, 
// opcode:c.sw; op1:x10; op2:x11; op2val:288230376151711744; immval:24
TEST_STORE(x1,x2,0,x10,x11,288230376151711744,24,496,c.sw,0)

inst_63:
// rs2_val == 576460752303423488, 
// opcode:c.sw; op1:x10; op2:x11; op2val:576460752303423488; immval:68
TEST_STORE(x1,x2,0,x10,x11,576460752303423488,68,504,c.sw,0)

inst_64:
// rs2_val == 1152921504606846976, imm_val == 40
// opcode:c.sw; op1:x10; op2:x11; op2val:1152921504606846976; immval:40
TEST_STORE(x1,x2,0,x10,x11,1152921504606846976,40,512,c.sw,0)

inst_65:
// rs2_val == 2305843009213693952, 
// opcode:c.sw; op1:x10; op2:x11; op2val:2305843009213693952; immval:116
TEST_STORE(x1,x2,0,x10,x11,2305843009213693952,116,520,c.sw,0)

inst_66:
// rs2_val == 4611686018427387904, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4611686018427387904; immval:116
TEST_STORE(x1,x2,0,x10,x11,4611686018427387904,116,528,c.sw,0)

inst_67:
// rs2_val == -2, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2; immval:48
TEST_STORE(x1,x2,0,x10,x11,-2,48,536,c.sw,0)

inst_68:
// rs2_val == -3, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-3; immval:76
TEST_STORE(x1,x2,0,x10,x11,-3,76,544,c.sw,0)

inst_69:
// rs2_val == -5, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-5; immval:68
TEST_STORE(x1,x2,0,x10,x11,-5,68,552,c.sw,0)

inst_70:
// rs2_val == -576460752303423489, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-576460752303423489; immval:12
TEST_STORE(x1,x2,0,x10,x11,-576460752303423489,12,560,c.sw,0)

inst_71:
// rs2_val == -1152921504606846977, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1152921504606846977; immval:44
TEST_STORE(x1,x2,0,x10,x11,-1152921504606846977,44,568,c.sw,0)

inst_72:
// rs2_val == -2305843009213693953, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2305843009213693953; immval:24
TEST_STORE(x1,x2,0,x10,x11,-2305843009213693953,24,576,c.sw,0)

inst_73:
// rs2_val == -4611686018427387905, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4611686018427387905; immval:20
TEST_STORE(x1,x2,0,x10,x11,-4611686018427387905,20,584,c.sw,0)

inst_74:
// rs2_val == 6148914691236517205, 
// opcode:c.sw; op1:x10; op2:x11; op2val:6148914691236517205; immval:32
TEST_STORE(x1,x2,0,x10,x11,6148914691236517205,32,592,c.sw,0)

inst_75:
// rs2_val == -6148914691236517206, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-6148914691236517206; immval:12
TEST_STORE(x1,x2,0,x10,x11,-6148914691236517206,12,600,c.sw,0)

inst_76:
// imm_val == 8, 
// opcode:c.sw; op1:x10; op2:x11; op2val:34359738368; immval:8
TEST_STORE(x1,x2,0,x10,x11,34359738368,8,608,c.sw,0)

inst_77:
// imm_val == 92, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2; immval:92
TEST_STORE(x1,x2,0,x10,x11,-2,92,616,c.sw,0)

inst_78:
// rs2_val == -9, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-9; immval:120
TEST_STORE(x1,x2,0,x10,x11,-9,120,624,c.sw,0)

inst_79:
// rs2_val == -17, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-17; immval:36
TEST_STORE(x1,x2,0,x10,x11,-17,36,632,c.sw,0)

inst_80:
// rs2_val == -33, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-33; immval:8
TEST_STORE(x1,x2,0,x10,x11,-33,8,640,c.sw,0)

inst_81:
// rs2_val == -65, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-65; immval:24
TEST_STORE(x1,x2,0,x10,x11,-65,24,648,c.sw,0)

inst_82:
// rs2_val == -129, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-129; immval:8
TEST_STORE(x1,x2,0,x10,x11,-129,8,656,c.sw,0)

inst_83:
// rs2_val == -257, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-257; immval:20
TEST_STORE(x1,x2,0,x10,x11,-257,20,664,c.sw,0)

inst_84:
// rs2_val == -513, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-513; immval:20
TEST_STORE(x1,x2,0,x10,x11,-513,20,672,c.sw,0)

inst_85:
// rs2_val == -1025, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1025; immval:48
TEST_STORE(x1,x2,0,x10,x11,-1025,48,680,c.sw,0)

inst_86:
// rs2_val == -2049, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2049; immval:20
TEST_STORE(x1,x2,0,x10,x11,-2049,20,688,c.sw,0)

inst_87:
// rs2_val == -4097, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4097; immval:36
TEST_STORE(x1,x2,0,x10,x11,-4097,36,696,c.sw,0)

inst_88:
// rs2_val == -8193, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-8193; immval:76
TEST_STORE(x1,x2,0,x10,x11,-8193,76,704,c.sw,0)

inst_89:
// rs2_val == -16385, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-16385; immval:0
TEST_STORE(x1,x2,0,x10,x11,-16385,0,712,c.sw,0)

inst_90:
// rs2_val == -32769, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-32769; immval:92
TEST_STORE(x1,x2,0,x10,x11,-32769,92,720,c.sw,0)

inst_91:
// rs2_val == -65537, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-65537; immval:40
TEST_STORE(x1,x2,0,x10,x11,-65537,40,728,c.sw,0)

inst_92:
// rs2_val == -131073, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-131073; immval:68
TEST_STORE(x1,x2,0,x10,x11,-131073,68,736,c.sw,0)

inst_93:
// rs2_val == -262145, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-262145; immval:24
TEST_STORE(x1,x2,0,x10,x11,-262145,24,744,c.sw,0)

inst_94:
// rs2_val == -524289, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-524289; immval:56
TEST_STORE(x1,x2,0,x10,x11,-524289,56,752,c.sw,0)

inst_95:
// rs2_val == -2097153, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2097153; immval:108
TEST_STORE(x1,x2,0,x10,x11,-2097153,108,760,c.sw,0)

inst_96:
// rs2_val == -4194305, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4194305; immval:84
TEST_STORE(x1,x2,0,x10,x11,-4194305,84,768,c.sw,0)

inst_97:
// rs2_val == -8388609, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-8388609; immval:56
TEST_STORE(x1,x2,0,x10,x11,-8388609,56,776,c.sw,0)

inst_98:
// rs2_val == -16777217, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-16777217; immval:116
TEST_STORE(x1,x2,0,x10,x11,-16777217,116,784,c.sw,0)

inst_99:
// rs2_val == -33554433, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-33554433; immval:68
TEST_STORE(x1,x2,0,x10,x11,-33554433,68,792,c.sw,0)

inst_100:
// rs2_val == -67108865, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-67108865; immval:8
TEST_STORE(x1,x2,0,x10,x11,-67108865,8,800,c.sw,0)

inst_101:
// rs2_val == -134217729, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-134217729; immval:108
TEST_STORE(x1,x2,0,x10,x11,-134217729,108,808,c.sw,0)

inst_102:
// rs2_val == -268435457, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-268435457; immval:48
TEST_STORE(x1,x2,0,x10,x11,-268435457,48,816,c.sw,0)

inst_103:
// rs2_val == -536870913, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-536870913; immval:64
TEST_STORE(x1,x2,0,x10,x11,-536870913,64,824,c.sw,0)

inst_104:
// rs2_val == -1073741825, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1073741825; immval:124
TEST_STORE(x1,x2,0,x10,x11,-1073741825,124,832,c.sw,0)

inst_105:
// rs2_val == -2147483649, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2147483649; immval:4
TEST_STORE(x1,x2,0,x10,x11,-2147483649,4,840,c.sw,0)

inst_106:
// rs2_val == -4294967297, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4294967297; immval:20
TEST_STORE(x1,x2,0,x10,x11,-4294967297,20,848,c.sw,0)

inst_107:
// rs2_val == -8589934593, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-8589934593; immval:72
TEST_STORE(x1,x2,0,x10,x11,-8589934593,72,856,c.sw,0)

inst_108:
// rs2_val == -17179869185, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-17179869185; immval:64
TEST_STORE(x1,x2,0,x10,x11,-17179869185,64,864,c.sw,0)

inst_109:
// rs2_val == -34359738369, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-34359738369; immval:108
TEST_STORE(x1,x2,0,x10,x11,-34359738369,108,872,c.sw,0)

inst_110:
// rs2_val == -68719476737, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-68719476737; immval:84
TEST_STORE(x1,x2,0,x10,x11,-68719476737,84,880,c.sw,0)

inst_111:
// rs2_val == -137438953473, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-137438953473; immval:44
TEST_STORE(x1,x2,0,x10,x11,-137438953473,44,888,c.sw,0)

inst_112:
// rs2_val == -274877906945, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-274877906945; immval:48
TEST_STORE(x1,x2,0,x10,x11,-274877906945,48,896,c.sw,0)

inst_113:
// rs2_val == -549755813889, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-549755813889; immval:0
TEST_STORE(x1,x2,0,x10,x11,-549755813889,0,904,c.sw,0)

inst_114:
// rs2_val == -1099511627777, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1099511627777; immval:4
TEST_STORE(x1,x2,0,x10,x11,-1099511627777,4,912,c.sw,0)

inst_115:
// rs2_val == -2199023255553, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2199023255553; immval:116
TEST_STORE(x1,x2,0,x10,x11,-2199023255553,116,920,c.sw,0)

inst_116:
// rs2_val == -4398046511105, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4398046511105; immval:44
TEST_STORE(x1,x2,0,x10,x11,-4398046511105,44,928,c.sw,0)

inst_117:
// rs2_val == -8796093022209, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-8796093022209; immval:16
TEST_STORE(x1,x2,0,x10,x11,-8796093022209,16,936,c.sw,0)

inst_118:
// rs2_val == -17592186044417, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-17592186044417; immval:32
TEST_STORE(x1,x2,0,x10,x11,-17592186044417,32,944,c.sw,0)

inst_119:
// rs2_val == -35184372088833, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-35184372088833; immval:120
TEST_STORE(x1,x2,0,x10,x11,-35184372088833,120,952,c.sw,0)

inst_120:
// rs2_val == -70368744177665, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-70368744177665; immval:120
TEST_STORE(x1,x2,0,x10,x11,-70368744177665,120,960,c.sw,0)

inst_121:
// rs2_val == -140737488355329, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-140737488355329; immval:4
TEST_STORE(x1,x2,0,x10,x11,-140737488355329,4,968,c.sw,0)

inst_122:
// rs2_val == -281474976710657, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-281474976710657; immval:108
TEST_STORE(x1,x2,0,x10,x11,-281474976710657,108,976,c.sw,0)

inst_123:
// rs2_val == -562949953421313, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-562949953421313; immval:64
TEST_STORE(x1,x2,0,x10,x11,-562949953421313,64,984,c.sw,0)

inst_124:
// rs2_val == -1125899906842625, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1125899906842625; immval:124
TEST_STORE(x1,x2,0,x10,x11,-1125899906842625,124,992,c.sw,0)

inst_125:
// rs2_val == -2251799813685249, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2251799813685249; immval:40
TEST_STORE(x1,x2,0,x10,x11,-2251799813685249,40,1000,c.sw,0)

inst_126:
// rs2_val == -4503599627370497, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4503599627370497; immval:12
TEST_STORE(x1,x2,0,x10,x11,-4503599627370497,12,1008,c.sw,0)

inst_127:
// rs2_val == -9007199254740993, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-9007199254740993; immval:56
TEST_STORE(x1,x2,0,x10,x11,-9007199254740993,56,1016,c.sw,0)

inst_128:
// rs2_val == -18014398509481985, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-18014398509481985; immval:120
TEST_STORE(x1,x2,0,x10,x11,-18014398509481985,120,1024,c.sw,0)

inst_129:
// rs2_val == -36028797018963969, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-36028797018963969; immval:84
TEST_STORE(x1,x2,0,x10,x11,-36028797018963969,84,1032,c.sw,0)

inst_130:
// rs2_val == -72057594037927937, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-72057594037927937; immval:108
TEST_STORE(x1,x2,0,x10,x11,-72057594037927937,108,1040,c.sw,0)

inst_131:
// rs2_val == -144115188075855873, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-144115188075855873; immval:4
TEST_STORE(x1,x2,0,x10,x11,-144115188075855873,4,1048,c.sw,0)

inst_132:
// rs2_val == -288230376151711745, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-288230376151711745; immval:84
TEST_STORE(x1,x2,0,x10,x11,-288230376151711745,84,1056,c.sw,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 133*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
