
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 08:16:37 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.swsp instruction of the RISC-V C extension for the cswsp covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cswsp)

RVTEST_SIGBASE( x6,signature_x6_1)

inst_0:
// rs2==x14, rs2_val == (-2**(xlen-1)), imm_val == 220, imm_val > 0, rs2_val == -9223372036854775808
// opcode:c.swsp; op1:x2; op2:x14; op2val:-9223372036854775808; immval:220
TEST_STORE(x6,x8,0,x2,x14,-9223372036854775808,220,0,c.swsp,0)

inst_1:
// rs2==x10, rs2_val == 0, imm_val == 168
// opcode:c.swsp; op1:x2; op2:x10; op2val:0; immval:168
TEST_STORE(x6,x8,0,x2,x10,0,168,8,c.swsp,0)

inst_2:
// rs2==x16, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode:c.swsp; op1:x2; op2:x16; op2val:9223372036854775807; immval:24
TEST_STORE(x6,x8,0,x2,x16,9223372036854775807,24,16,c.swsp,0)

inst_3:
// rs2==x18, rs2_val == 1, 
// opcode:c.swsp; op1:x2; op2:x18; op2val:1; immval:76
TEST_STORE(x6,x8,0,x2,x18,1,76,24,c.swsp,0)

inst_4:
// rs2==x1, imm_val == 0, rs2_val == 576460752303423488
// opcode:c.swsp; op1:x2; op2:x1; op2val:576460752303423488; immval:0
TEST_STORE(x6,x8,0,x2,x1,576460752303423488,0,32,c.swsp,0)

inst_5:
// rs2==x11, rs2_val == 2, imm_val == 4
// opcode:c.swsp; op1:x2; op2:x11; op2val:2; immval:4
TEST_STORE(x6,x8,0,x2,x11,2,4,40,c.swsp,0)

inst_6:
// rs2==x30, rs2_val == 4, imm_val == 64
// opcode:c.swsp; op1:x2; op2:x30; op2val:4; immval:64
TEST_STORE(x6,x8,0,x2,x30,4,64,48,c.swsp,0)

inst_7:
// rs2==x26, rs2_val == 8, 
// opcode:c.swsp; op1:x2; op2:x26; op2val:8; immval:48
TEST_STORE(x6,x8,0,x2,x26,8,48,56,c.swsp,0)

inst_8:
// rs2==x3, rs2_val == 16, 
// opcode:c.swsp; op1:x2; op2:x3; op2val:16; immval:72
TEST_STORE(x6,x8,0,x2,x3,16,72,64,c.swsp,0)

inst_9:
// rs2==x13, rs2_val == 32, imm_val == 16
// opcode:c.swsp; op1:x2; op2:x13; op2val:32; immval:16
TEST_STORE(x6,x8,0,x2,x13,32,16,72,c.swsp,0)

inst_10:
// rs2==x24, rs2_val == 64, imm_val == 32
// opcode:c.swsp; op1:x2; op2:x24; op2val:64; immval:32
TEST_STORE(x6,x8,0,x2,x24,64,32,80,c.swsp,0)

inst_11:
// rs2==x21, rs2_val == 128, 
// opcode:c.swsp; op1:x2; op2:x21; op2val:128; immval:64
TEST_STORE(x6,x8,0,x2,x21,128,64,88,c.swsp,0)

inst_12:
// rs2==x4, rs2_val == 256, imm_val == 124
// opcode:c.swsp; op1:x2; op2:x4; op2val:256; immval:124
TEST_STORE(x6,x8,0,x2,x4,256,124,96,c.swsp,0)

inst_13:
// rs2==x20, rs2_val == 512, 
// opcode:c.swsp; op1:x2; op2:x20; op2val:512; immval:60
TEST_STORE(x6,x8,0,x2,x20,512,60,104,c.swsp,0)

inst_14:
// rs2==x19, rs2_val == 1024, 
// opcode:c.swsp; op1:x2; op2:x19; op2val:1024; immval:168
TEST_STORE(x6,x8,0,x2,x19,1024,168,112,c.swsp,0)

inst_15:
// rs2==x5, rs2_val == 2048, 
// opcode:c.swsp; op1:x2; op2:x5; op2val:2048; immval:16
TEST_STORE(x6,x8,0,x2,x5,2048,16,120,c.swsp,0)

inst_16:
// rs2==x29, rs2_val == 4096, imm_val == 84
// opcode:c.swsp; op1:x2; op2:x29; op2val:4096; immval:84
TEST_STORE(x6,x8,0,x2,x29,4096,84,128,c.swsp,0)

inst_17:
// rs2==x17, rs2_val == 8192, 
// opcode:c.swsp; op1:x2; op2:x17; op2val:8192; immval:60
TEST_STORE(x6,x8,0,x2,x17,8192,60,136,c.swsp,0)

inst_18:
// rs2==x28, rs2_val == 16384, 
// opcode:c.swsp; op1:x2; op2:x28; op2val:16384; immval:52
TEST_STORE(x6,x8,0,x2,x28,16384,52,144,c.swsp,0)

inst_19:
// rs2==x7, rs2_val == 32768, 
// opcode:c.swsp; op1:x2; op2:x7; op2val:32768; immval:4
TEST_STORE(x6,x8,0,x2,x7,32768,4,152,c.swsp,0)

inst_20:
// rs2==x9, rs2_val == 65536, imm_val == 244
// opcode:c.swsp; op1:x2; op2:x9; op2val:65536; immval:244
TEST_STORE(x6,x8,0,x2,x9,65536,244,160,c.swsp,0)

inst_21:
// rs2==x27, rs2_val == 131072, 
// opcode:c.swsp; op1:x2; op2:x27; op2val:131072; immval:48
TEST_STORE(x6,x8,0,x2,x27,131072,48,168,c.swsp,0)

inst_22:
// rs2==x15, rs2_val == 262144, 
// opcode:c.swsp; op1:x2; op2:x15; op2val:262144; immval:24
TEST_STORE(x6,x8,0,x2,x15,262144,24,176,c.swsp,0)

inst_23:
// rs2==x12, rs2_val == 524288, 
// opcode:c.swsp; op1:x2; op2:x12; op2val:524288; immval:84
TEST_STORE(x6,x8,0,x2,x12,524288,84,184,c.swsp,0)

inst_24:
// rs2==x25, rs2_val == 1048576, 
// opcode:c.swsp; op1:x2; op2:x25; op2val:1048576; immval:48
TEST_STORE(x6,x8,0,x2,x25,1048576,48,192,c.swsp,0)

inst_25:
// rs2==x22, rs2_val == 2097152, 
// opcode:c.swsp; op1:x2; op2:x22; op2val:2097152; immval:72
TEST_STORE(x6,x8,0,x2,x22,2097152,72,200,c.swsp,0)

inst_26:
// rs2==x31, rs2_val == 4194304, 
// opcode:c.swsp; op1:x2; op2:x31; op2val:4194304; immval:0
TEST_STORE(x6,x3,0,x2,x31,4194304,0,208,c.swsp,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_27:
// rs2==x23, rs2_val == 8388608, imm_val == 236
// opcode:c.swsp; op1:x2; op2:x23; op2val:8388608; immval:236
TEST_STORE(x1,x3,0,x2,x23,8388608,236,0,c.swsp,0)

inst_28:
// rs2==x8, rs2_val == 16777216, 
// opcode:c.swsp; op1:x2; op2:x8; op2val:16777216; immval:24
TEST_STORE(x1,x3,0,x2,x8,16777216,24,8,c.swsp,0)

inst_29:
// rs2==x6, rs2_val == 33554432, 
// opcode:c.swsp; op1:x2; op2:x6; op2val:33554432; immval:4
TEST_STORE(x1,x3,0,x2,x6,33554432,4,16,c.swsp,0)

inst_30:
// rs2_val == 67108864, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:67108864; immval:56
TEST_STORE(x1,x3,0,x2,x10,67108864,56,24,c.swsp,0)

inst_31:
// rs2_val == 134217728, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:134217728; immval:56
TEST_STORE(x1,x3,0,x2,x10,134217728,56,32,c.swsp,0)

inst_32:
// rs2_val == 268435456, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:268435456; immval:4
TEST_STORE(x1,x3,0,x2,x10,268435456,4,40,c.swsp,0)

inst_33:
// rs2_val == 536870912, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:536870912; immval:32
TEST_STORE(x1,x3,0,x2,x10,536870912,32,48,c.swsp,0)

inst_34:
// rs2_val == 1073741824, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1073741824; immval:68
TEST_STORE(x1,x3,0,x2,x10,1073741824,68,56,c.swsp,0)

inst_35:
// rs2_val == 2147483648, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:2147483648; immval:68
TEST_STORE(x1,x3,0,x2,x10,2147483648,68,64,c.swsp,0)

inst_36:
// rs2_val == 4294967296, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:4294967296; immval:52
TEST_STORE(x1,x3,0,x2,x10,4294967296,52,72,c.swsp,0)

inst_37:
// rs2_val == 8589934592, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:8589934592; immval:72
TEST_STORE(x1,x3,0,x2,x10,8589934592,72,80,c.swsp,0)

inst_38:
// rs2_val == 17179869184, imm_val == 188
// opcode:c.swsp; op1:x2; op2:x10; op2val:17179869184; immval:188
TEST_STORE(x1,x3,0,x2,x10,17179869184,188,88,c.swsp,0)

inst_39:
// rs2_val == 34359738368, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:34359738368; immval:52
TEST_STORE(x1,x3,0,x2,x10,34359738368,52,96,c.swsp,0)

inst_40:
// rs2_val == 68719476736, imm_val == 128
// opcode:c.swsp; op1:x2; op2:x10; op2val:68719476736; immval:128
TEST_STORE(x1,x3,0,x2,x10,68719476736,128,104,c.swsp,0)

inst_41:
// rs2_val == 137438953472, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:137438953472; immval:252
TEST_STORE(x1,x3,0,x2,x10,137438953472,252,112,c.swsp,0)

inst_42:
// rs2_val == 274877906944, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:274877906944; immval:28
TEST_STORE(x1,x3,0,x2,x10,274877906944,28,120,c.swsp,0)

inst_43:
// rs2_val == 549755813888, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:549755813888; immval:16
TEST_STORE(x1,x3,0,x2,x10,549755813888,16,128,c.swsp,0)

inst_44:
// rs2_val == 1099511627776, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1099511627776; immval:244
TEST_STORE(x1,x3,0,x2,x10,1099511627776,244,136,c.swsp,0)

inst_45:
// rs2_val == 2199023255552, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:2199023255552; immval:36
TEST_STORE(x1,x3,0,x2,x10,2199023255552,36,144,c.swsp,0)

inst_46:
// rs2_val == 4398046511104, imm_val == 248
// opcode:c.swsp; op1:x2; op2:x10; op2val:4398046511104; immval:248
TEST_STORE(x1,x3,0,x2,x10,4398046511104,248,152,c.swsp,0)

inst_47:
// rs2_val == 8796093022208, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:8796093022208; immval:28
TEST_STORE(x1,x3,0,x2,x10,8796093022208,28,160,c.swsp,0)

inst_48:
// rs2_val == 17592186044416, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:17592186044416; immval:168
TEST_STORE(x1,x3,0,x2,x10,17592186044416,168,168,c.swsp,0)

inst_49:
// rs2_val == 35184372088832, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:35184372088832; immval:40
TEST_STORE(x1,x3,0,x2,x10,35184372088832,40,176,c.swsp,0)

inst_50:
// rs2_val == 70368744177664, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:70368744177664; immval:16
TEST_STORE(x1,x3,0,x2,x10,70368744177664,16,184,c.swsp,0)

inst_51:
// rs2_val == 140737488355328, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:140737488355328; immval:56
TEST_STORE(x1,x3,0,x2,x10,140737488355328,56,192,c.swsp,0)

inst_52:
// rs2_val == 281474976710656, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:281474976710656; immval:64
TEST_STORE(x1,x3,0,x2,x10,281474976710656,64,200,c.swsp,0)

inst_53:
// rs2_val == 562949953421312, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:562949953421312; immval:220
TEST_STORE(x1,x3,0,x2,x10,562949953421312,220,208,c.swsp,0)

inst_54:
// rs2_val == 1125899906842624, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1125899906842624; immval:28
TEST_STORE(x1,x3,0,x2,x10,1125899906842624,28,216,c.swsp,0)

inst_55:
// rs2_val == 2251799813685248, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:2251799813685248; immval:124
TEST_STORE(x1,x3,0,x2,x10,2251799813685248,124,224,c.swsp,0)

inst_56:
// rs2_val == 4503599627370496, imm_val == 8
// opcode:c.swsp; op1:x2; op2:x10; op2val:4503599627370496; immval:8
TEST_STORE(x1,x3,0,x2,x10,4503599627370496,8,232,c.swsp,0)

inst_57:
// rs2_val == 9007199254740992, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:9007199254740992; immval:32
TEST_STORE(x1,x3,0,x2,x10,9007199254740992,32,240,c.swsp,0)

inst_58:
// rs2_val == 18014398509481984, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:18014398509481984; immval:168
TEST_STORE(x1,x3,0,x2,x10,18014398509481984,168,248,c.swsp,0)

inst_59:
// rs2_val == 36028797018963968, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:36028797018963968; immval:36
TEST_STORE(x1,x3,0,x2,x10,36028797018963968,36,256,c.swsp,0)

inst_60:
// rs2_val == 72057594037927936, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:72057594037927936; immval:188
TEST_STORE(x1,x3,0,x2,x10,72057594037927936,188,264,c.swsp,0)

inst_61:
// rs2_val == 144115188075855872, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:144115188075855872; immval:76
TEST_STORE(x1,x3,0,x2,x10,144115188075855872,76,272,c.swsp,0)

inst_62:
// rs2_val == 288230376151711744, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:288230376151711744; immval:24
TEST_STORE(x1,x3,0,x2,x10,288230376151711744,24,280,c.swsp,0)

inst_63:
// rs2_val == 1152921504606846976, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1152921504606846976; immval:52
TEST_STORE(x1,x3,0,x2,x10,1152921504606846976,52,288,c.swsp,0)

inst_64:
// rs2_val == 2305843009213693952, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:2305843009213693952; immval:0
TEST_STORE(x1,x3,0,x2,x10,2305843009213693952,0,296,c.swsp,0)

inst_65:
// rs2_val == 4611686018427387904, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:4611686018427387904; immval:84
TEST_STORE(x1,x3,0,x2,x10,4611686018427387904,84,304,c.swsp,0)

inst_66:
// rs2_val == -2, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2; immval:32
TEST_STORE(x1,x3,0,x2,x10,-2,32,312,c.swsp,0)

inst_67:
// rs2_val == -3, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-3; immval:248
TEST_STORE(x1,x3,0,x2,x10,-3,248,320,c.swsp,0)

inst_68:
// rs2_val == -576460752303423489, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-576460752303423489; immval:52
TEST_STORE(x1,x3,0,x2,x10,-576460752303423489,52,328,c.swsp,0)

inst_69:
// rs2_val == -1152921504606846977, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1152921504606846977; immval:244
TEST_STORE(x1,x3,0,x2,x10,-1152921504606846977,244,336,c.swsp,0)

inst_70:
// rs2_val == -2305843009213693953, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2305843009213693953; immval:72
TEST_STORE(x1,x3,0,x2,x10,-2305843009213693953,72,344,c.swsp,0)

inst_71:
// rs2_val == -4611686018427387905, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4611686018427387905; immval:4
TEST_STORE(x1,x3,0,x2,x10,-4611686018427387905,4,352,c.swsp,0)

inst_72:
// rs2_val == 6148914691236517205, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:6148914691236517205; immval:48
TEST_STORE(x1,x3,0,x2,x10,6148914691236517205,48,360,c.swsp,0)

inst_73:
// rs2_val == -6148914691236517206, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-6148914691236517206; immval:0
TEST_STORE(x1,x3,0,x2,x10,-6148914691236517206,0,368,c.swsp,0)

inst_74:
// rs2_val == -5, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-5; immval:64
TEST_STORE(x1,x3,0,x2,x10,-5,64,376,c.swsp,0)

inst_75:
// rs2_val == -9, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-9; immval:128
TEST_STORE(x1,x3,0,x2,x10,-9,128,384,c.swsp,0)

inst_76:
// rs2_val == -17, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-17; immval:36
TEST_STORE(x1,x3,0,x2,x10,-17,36,392,c.swsp,0)

inst_77:
// rs2_val == -33, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-33; immval:244
TEST_STORE(x1,x3,0,x2,x10,-33,244,400,c.swsp,0)

inst_78:
// rs2_val == -65, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-65; immval:168
TEST_STORE(x1,x3,0,x2,x10,-65,168,408,c.swsp,0)

inst_79:
// rs2_val == -129, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-129; immval:244
TEST_STORE(x1,x3,0,x2,x10,-129,244,416,c.swsp,0)

inst_80:
// rs2_val == -257, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-257; immval:248
TEST_STORE(x1,x3,0,x2,x10,-257,248,424,c.swsp,0)

inst_81:
// rs2_val == -513, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-513; immval:124
TEST_STORE(x1,x3,0,x2,x10,-513,124,432,c.swsp,0)

inst_82:
// rs2_val == -1025, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1025; immval:60
TEST_STORE(x1,x3,0,x2,x10,-1025,60,440,c.swsp,0)

inst_83:
// rs2_val == -2049, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2049; immval:56
TEST_STORE(x1,x3,0,x2,x10,-2049,56,448,c.swsp,0)

inst_84:
// rs2_val == -4097, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4097; immval:236
TEST_STORE(x1,x3,0,x2,x10,-4097,236,456,c.swsp,0)

inst_85:
// rs2_val == -8193, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8193; immval:64
TEST_STORE(x1,x3,0,x2,x10,-8193,64,464,c.swsp,0)

inst_86:
// rs2_val == -16385, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-16385; immval:124
TEST_STORE(x1,x3,0,x2,x10,-16385,124,472,c.swsp,0)

inst_87:
// rs2_val == -32769, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-32769; immval:24
TEST_STORE(x1,x3,0,x2,x10,-32769,24,480,c.swsp,0)

inst_88:
// rs2_val == -65537, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-65537; immval:8
TEST_STORE(x1,x3,0,x2,x10,-65537,8,488,c.swsp,0)

inst_89:
// rs2_val == -131073, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-131073; immval:24
TEST_STORE(x1,x3,0,x2,x10,-131073,24,496,c.swsp,0)

inst_90:
// rs2_val == -262145, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-262145; immval:52
TEST_STORE(x1,x3,0,x2,x10,-262145,52,504,c.swsp,0)

inst_91:
// rs2_val == -524289, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-524289; immval:252
TEST_STORE(x1,x3,0,x2,x10,-524289,252,512,c.swsp,0)

inst_92:
// rs2_val == -1048577, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1048577; immval:244
TEST_STORE(x1,x3,0,x2,x10,-1048577,244,520,c.swsp,0)

inst_93:
// rs2_val == -2097153, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2097153; immval:56
TEST_STORE(x1,x3,0,x2,x10,-2097153,56,528,c.swsp,0)

inst_94:
// rs2_val == -4194305, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4194305; immval:188
TEST_STORE(x1,x3,0,x2,x10,-4194305,188,536,c.swsp,0)

inst_95:
// rs2_val == -8388609, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8388609; immval:28
TEST_STORE(x1,x3,0,x2,x10,-8388609,28,544,c.swsp,0)

inst_96:
// rs2_val == -16777217, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-16777217; immval:28
TEST_STORE(x1,x3,0,x2,x10,-16777217,28,552,c.swsp,0)

inst_97:
// rs2_val == -33554433, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-33554433; immval:124
TEST_STORE(x1,x3,0,x2,x10,-33554433,124,560,c.swsp,0)

inst_98:
// rs2_val == -67108865, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-67108865; immval:32
TEST_STORE(x1,x3,0,x2,x10,-67108865,32,568,c.swsp,0)

inst_99:
// rs2_val == -134217729, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-134217729; immval:64
TEST_STORE(x1,x3,0,x2,x10,-134217729,64,576,c.swsp,0)

inst_100:
// rs2_val == -268435457, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-268435457; immval:248
TEST_STORE(x1,x3,0,x2,x10,-268435457,248,584,c.swsp,0)

inst_101:
// rs2_val == -536870913, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-536870913; immval:220
TEST_STORE(x1,x3,0,x2,x10,-536870913,220,592,c.swsp,0)

inst_102:
// rs2_val == -1073741825, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1073741825; immval:8
TEST_STORE(x1,x3,0,x2,x10,-1073741825,8,600,c.swsp,0)

inst_103:
// rs2_val == -2147483649, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2147483649; immval:84
TEST_STORE(x1,x3,0,x2,x10,-2147483649,84,608,c.swsp,0)

inst_104:
// rs2_val == -4294967297, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4294967297; immval:252
TEST_STORE(x1,x3,0,x2,x10,-4294967297,252,616,c.swsp,0)

inst_105:
// rs2_val == -8589934593, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8589934593; immval:0
TEST_STORE(x1,x3,0,x2,x10,-8589934593,0,624,c.swsp,0)

inst_106:
// rs2_val == -17179869185, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-17179869185; immval:52
TEST_STORE(x1,x3,0,x2,x10,-17179869185,52,632,c.swsp,0)

inst_107:
// rs2_val == -34359738369, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-34359738369; immval:188
TEST_STORE(x1,x3,0,x2,x10,-34359738369,188,640,c.swsp,0)

inst_108:
// rs2_val == -68719476737, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-68719476737; immval:252
TEST_STORE(x1,x3,0,x2,x10,-68719476737,252,648,c.swsp,0)

inst_109:
// rs2_val == -137438953473, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-137438953473; immval:20
TEST_STORE(x1,x3,0,x2,x10,-137438953473,20,656,c.swsp,0)

inst_110:
// rs2_val == -274877906945, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-274877906945; immval:40
TEST_STORE(x1,x3,0,x2,x10,-274877906945,40,664,c.swsp,0)

inst_111:
// rs2_val == -549755813889, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-549755813889; immval:60
TEST_STORE(x1,x3,0,x2,x10,-549755813889,60,672,c.swsp,0)

inst_112:
// rs2_val == -1099511627777, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1099511627777; immval:76
TEST_STORE(x1,x3,0,x2,x10,-1099511627777,76,680,c.swsp,0)

inst_113:
// rs2_val == -2199023255553, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2199023255553; immval:40
TEST_STORE(x1,x3,0,x2,x10,-2199023255553,40,688,c.swsp,0)

inst_114:
// rs2_val == -4398046511105, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4398046511105; immval:0
TEST_STORE(x1,x3,0,x2,x10,-4398046511105,0,696,c.swsp,0)

inst_115:
// rs2_val == -8796093022209, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8796093022209; immval:244
TEST_STORE(x1,x3,0,x2,x10,-8796093022209,244,704,c.swsp,0)

inst_116:
// rs2_val == -17592186044417, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-17592186044417; immval:244
TEST_STORE(x1,x3,0,x2,x10,-17592186044417,244,712,c.swsp,0)

inst_117:
// rs2_val == -35184372088833, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-35184372088833; immval:32
TEST_STORE(x1,x3,0,x2,x10,-35184372088833,32,720,c.swsp,0)

inst_118:
// rs2_val == -70368744177665, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-70368744177665; immval:12
TEST_STORE(x1,x3,0,x2,x10,-70368744177665,12,728,c.swsp,0)

inst_119:
// rs2_val == -140737488355329, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-140737488355329; immval:36
TEST_STORE(x1,x3,0,x2,x10,-140737488355329,36,736,c.swsp,0)

inst_120:
// rs2_val == -281474976710657, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-281474976710657; immval:168
TEST_STORE(x1,x3,0,x2,x10,-281474976710657,168,744,c.swsp,0)

inst_121:
// rs2_val == -562949953421313, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-562949953421313; immval:48
TEST_STORE(x1,x3,0,x2,x10,-562949953421313,48,752,c.swsp,0)

inst_122:
// rs2_val == -1125899906842625, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1125899906842625; immval:44
TEST_STORE(x1,x3,0,x2,x10,-1125899906842625,44,760,c.swsp,0)

inst_123:
// rs2_val == -2251799813685249, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2251799813685249; immval:20
TEST_STORE(x1,x3,0,x2,x10,-2251799813685249,20,768,c.swsp,0)

inst_124:
// rs2_val == -4503599627370497, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4503599627370497; immval:4
TEST_STORE(x1,x3,0,x2,x10,-4503599627370497,4,776,c.swsp,0)

inst_125:
// rs2_val == -9007199254740993, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-9007199254740993; immval:128
TEST_STORE(x1,x3,0,x2,x10,-9007199254740993,128,784,c.swsp,0)

inst_126:
// rs2_val == -18014398509481985, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-18014398509481985; immval:84
TEST_STORE(x1,x3,0,x2,x10,-18014398509481985,84,792,c.swsp,0)

inst_127:
// rs2_val == -36028797018963969, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-36028797018963969; immval:244
TEST_STORE(x1,x3,0,x2,x10,-36028797018963969,244,800,c.swsp,0)

inst_128:
// rs2_val == -72057594037927937, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-72057594037927937; immval:252
TEST_STORE(x1,x3,0,x2,x10,-72057594037927937,252,808,c.swsp,0)

inst_129:
// rs2_val == -144115188075855873, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-144115188075855873; immval:56
TEST_STORE(x1,x3,0,x2,x10,-144115188075855873,56,816,c.swsp,0)

inst_130:
// rs2_val == -288230376151711745, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-288230376151711745; immval:220
TEST_STORE(x1,x3,0,x2,x10,-288230376151711745,220,824,c.swsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 27*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
