 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sd instruction of the RISC-V C extension for the csd covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*C.*);def TEST_CASE_1=True;",csd)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x12, rs2==x9, imm_val > 0, rs2_val == 524288, imm_val == 120
// opcode:c.sd; op1:x12; op2:x9; op2val:524288; immval:120
TEST_STORE(x1,x2,0,x12,x9,524288,120,0,c.sd,0)

inst_1:
// rs1==x10, rs2==x15, imm_val == 0, 
// opcode:c.sd; op1:x10; op2:x15; op2val:-8; immval:0
TEST_STORE(x1,x2,0,x10,x15,-8,0,8,c.sd,0)

inst_2:
// rs1==x13, rs2==x11, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808
// opcode:c.sd; op1:x13; op2:x11; op2val:-9223372036854775808; immval:96
TEST_STORE(x1,x2,0,x13,x11,-9223372036854775808,96,16,c.sd,0)

inst_3:
// rs1==x15, rs2==x14, rs2_val == 0, 
// opcode:c.sd; op1:x15; op2:x14; op2val:0; immval:136
TEST_STORE(x1,x2,0,x15,x14,0,136,24,c.sd,0)

inst_4:
// rs1==x14, rs2==x10, rs2_val == (2**(xlen-1)-1), rs2_val == 9223372036854775807
// opcode:c.sd; op1:x14; op2:x10; op2val:9223372036854775807; immval:136
TEST_STORE(x1,x2,0,x14,x10,9223372036854775807,136,32,c.sd,0)

inst_5:
// rs1==x11, rs2==x12, rs2_val == 1, 
// opcode:c.sd; op1:x11; op2:x12; op2val:1; immval:48
TEST_STORE(x1,x2,0,x11,x12,1,48,40,c.sd,0)

inst_6:
// rs1==x9, rs2==x8, imm_val == 8, rs2_val == -562949953421313
// opcode:c.sd; op1:x9; op2:x8; op2val:-562949953421313; immval:8
TEST_STORE(x1,x2,0,x9,x8,-562949953421313,8,48,c.sd,0)

inst_7:
// rs1==x8, rs2==x13, imm_val == 16, rs2_val == 64
// opcode:c.sd; op1:x8; op2:x13; op2val:64; immval:16
TEST_STORE(x1,x2,0,x8,x13,64,16,56,c.sd,0)

inst_8:
// imm_val == 32, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-6; immval:32
TEST_STORE(x1,x2,0,x10,x11,-6,32,64,c.sd,0)

inst_9:
// imm_val == 64, rs2_val == -6148914691236517206
// opcode:c.sd; op1:x10; op2:x11; op2val:-6148914691236517206; immval:64
TEST_STORE(x1,x2,0,x10,x11,-6148914691236517206,64,72,c.sd,0)

inst_10:
// imm_val == 128, rs2_val == -2049
// opcode:c.sd; op1:x10; op2:x11; op2val:-2049; immval:128
TEST_STORE(x1,x2,0,x10,x11,-2049,128,80,c.sd,0)

inst_11:
// imm_val == 240, rs2_val == -549755813889
// opcode:c.sd; op1:x10; op2:x11; op2val:-549755813889; immval:240
TEST_STORE(x1,x2,0,x10,x11,-549755813889,240,88,c.sd,0)

inst_12:
// imm_val == 232, rs2_val == 256
// opcode:c.sd; op1:x10; op2:x11; op2val:256; immval:232
TEST_STORE(x1,x2,0,x10,x11,256,232,96,c.sd,0)

inst_13:
// imm_val == 216, rs2_val == 72057594037927936
// opcode:c.sd; op1:x10; op2:x11; op2val:72057594037927936; immval:216
TEST_STORE(x1,x2,0,x10,x11,72057594037927936,216,104,c.sd,0)

inst_14:
// imm_val == 184, rs2_val == -68719476737
// opcode:c.sd; op1:x10; op2:x11; op2val:-68719476737; immval:184
TEST_STORE(x1,x2,0,x10,x11,-68719476737,184,112,c.sd,0)

inst_15:
// imm_val == 168, rs2_val == 8796093022208
// opcode:c.sd; op1:x10; op2:x11; op2val:8796093022208; immval:168
TEST_STORE(x1,x2,0,x10,x11,8796093022208,168,120,c.sd,0)

inst_16:
// imm_val == 80, rs2_val == -1025
// opcode:c.sd; op1:x10; op2:x11; op2val:-1025; immval:80
TEST_STORE(x1,x2,0,x10,x11,-1025,80,128,c.sd,0)

inst_17:
// rs2_val == 2, 
// opcode:c.sd; op1:x10; op2:x11; op2val:2; immval:72
TEST_STORE(x1,x2,0,x10,x11,2,72,136,c.sd,0)

inst_18:
// rs2_val == 4, 
// opcode:c.sd; op1:x10; op2:x11; op2val:4; immval:32
TEST_STORE(x1,x2,0,x10,x11,4,32,144,c.sd,0)

inst_19:
// rs2_val == 8, 
// opcode:c.sd; op1:x10; op2:x11; op2val:8; immval:48
TEST_STORE(x1,x2,0,x10,x11,8,48,152,c.sd,0)

inst_20:
// rs2_val == 16, 
// opcode:c.sd; op1:x10; op2:x11; op2val:16; immval:40
TEST_STORE(x1,x2,0,x10,x11,16,40,160,c.sd,0)

inst_21:
// rs2_val == 32, 
// opcode:c.sd; op1:x10; op2:x11; op2val:32; immval:104
TEST_STORE(x1,x2,0,x10,x11,32,104,168,c.sd,0)

inst_22:
// rs2_val == 128, 
// opcode:c.sd; op1:x10; op2:x11; op2val:128; immval:80
TEST_STORE(x1,x2,0,x10,x11,128,80,176,c.sd,0)

inst_23:
// rs2_val == 512, 
// opcode:c.sd; op1:x10; op2:x11; op2val:512; immval:16
TEST_STORE(x1,x2,0,x10,x11,512,16,184,c.sd,0)

inst_24:
// rs2_val == 1024, 
// opcode:c.sd; op1:x10; op2:x11; op2val:1024; immval:120
TEST_STORE(x1,x2,0,x10,x11,1024,120,192,c.sd,0)

inst_25:
// rs2_val == 2048, 
// opcode:c.sd; op1:x10; op2:x11; op2val:2048; immval:32
TEST_STORE(x1,x2,0,x10,x11,2048,32,200,c.sd,0)

inst_26:
// rs2_val == 4096, 
// opcode:c.sd; op1:x10; op2:x11; op2val:4096; immval:40
TEST_STORE(x1,x2,0,x10,x11,4096,40,208,c.sd,0)

inst_27:
// rs2_val == 8192, 
// opcode:c.sd; op1:x10; op2:x11; op2val:8192; immval:232
TEST_STORE(x1,x2,0,x10,x11,8192,232,216,c.sd,0)

inst_28:
// rs2_val == 16384, 
// opcode:c.sd; op1:x10; op2:x11; op2val:16384; immval:0
TEST_STORE(x1,x2,0,x10,x11,16384,0,224,c.sd,0)

inst_29:
// rs2_val == 32768, 
// opcode:c.sd; op1:x10; op2:x11; op2val:32768; immval:216
TEST_STORE(x1,x2,0,x10,x11,32768,216,232,c.sd,0)

inst_30:
// rs2_val == 65536, 
// opcode:c.sd; op1:x10; op2:x11; op2val:65536; immval:216
TEST_STORE(x1,x2,0,x10,x11,65536,216,240,c.sd,0)

inst_31:
// rs2_val == 131072, 
// opcode:c.sd; op1:x10; op2:x11; op2val:131072; immval:8
TEST_STORE(x1,x2,0,x10,x11,131072,8,248,c.sd,0)

inst_32:
// rs2_val == 262144, 
// opcode:c.sd; op1:x10; op2:x11; op2val:262144; immval:16
TEST_STORE(x1,x2,0,x10,x11,262144,16,256,c.sd,0)

inst_33:
// rs2_val == 1048576, 
// opcode:c.sd; op1:x10; op2:x11; op2val:1048576; immval:240
TEST_STORE(x1,x2,0,x10,x11,1048576,240,264,c.sd,0)

inst_34:
// rs2_val == 2097152, 
// opcode:c.sd; op1:x10; op2:x11; op2val:2097152; immval:72
TEST_STORE(x1,x2,0,x10,x11,2097152,72,272,c.sd,0)

inst_35:
// rs2_val == 4194304, 
// opcode:c.sd; op1:x10; op2:x11; op2val:4194304; immval:88
TEST_STORE(x1,x2,0,x10,x11,4194304,88,280,c.sd,0)

inst_36:
// rs2_val == 8388608, 
// opcode:c.sd; op1:x10; op2:x11; op2val:8388608; immval:232
TEST_STORE(x1,x2,0,x10,x11,8388608,232,288,c.sd,0)

inst_37:
// rs2_val == 16777216, 
// opcode:c.sd; op1:x10; op2:x11; op2val:16777216; immval:32
TEST_STORE(x1,x2,0,x10,x11,16777216,32,296,c.sd,0)

inst_38:
// rs2_val == 33554432, 
// opcode:c.sd; op1:x10; op2:x11; op2val:33554432; immval:64
TEST_STORE(x1,x2,0,x10,x11,33554432,64,304,c.sd,0)

inst_39:
// rs2_val == 67108864, 
// opcode:c.sd; op1:x10; op2:x11; op2val:67108864; immval:24
TEST_STORE(x1,x2,0,x10,x11,67108864,24,312,c.sd,0)

inst_40:
// rs2_val == 134217728, 
// opcode:c.sd; op1:x10; op2:x11; op2val:134217728; immval:184
TEST_STORE(x1,x2,0,x10,x11,134217728,184,320,c.sd,0)

inst_41:
// rs2_val == 268435456, 
// opcode:c.sd; op1:x10; op2:x11; op2val:268435456; immval:152
TEST_STORE(x1,x2,0,x10,x11,268435456,152,328,c.sd,0)

inst_42:
// rs2_val == 536870912, 
// opcode:c.sd; op1:x10; op2:x11; op2val:536870912; immval:248
TEST_STORE(x1,x2,0,x10,x11,536870912,248,336,c.sd,0)

inst_43:
// rs2_val == 1073741824, 
// opcode:c.sd; op1:x10; op2:x11; op2val:1073741824; immval:120
TEST_STORE(x1,x2,0,x10,x11,1073741824,120,344,c.sd,0)

inst_44:
// rs2_val == 2147483648, 
// opcode:c.sd; op1:x10; op2:x11; op2val:2147483648; immval:64
TEST_STORE(x1,x2,0,x10,x11,2147483648,64,352,c.sd,0)

inst_45:
// rs2_val == 4294967296, 
// opcode:c.sd; op1:x10; op2:x11; op2val:4294967296; immval:136
TEST_STORE(x1,x2,0,x10,x11,4294967296,136,360,c.sd,0)

inst_46:
// rs2_val == 8589934592, 
// opcode:c.sd; op1:x10; op2:x11; op2val:8589934592; immval:168
TEST_STORE(x1,x2,0,x10,x11,8589934592,168,368,c.sd,0)

inst_47:
// rs2_val == 17179869184, 
// opcode:c.sd; op1:x10; op2:x11; op2val:17179869184; immval:112
TEST_STORE(x1,x2,0,x10,x11,17179869184,112,376,c.sd,0)

inst_48:
// rs2_val == 34359738368, 
// opcode:c.sd; op1:x10; op2:x11; op2val:34359738368; immval:72
TEST_STORE(x1,x2,0,x10,x11,34359738368,72,384,c.sd,0)

inst_49:
// rs2_val == 68719476736, 
// opcode:c.sd; op1:x10; op2:x11; op2val:68719476736; immval:112
TEST_STORE(x1,x2,0,x10,x11,68719476736,112,392,c.sd,0)

inst_50:
// rs2_val == 137438953472, 
// opcode:c.sd; op1:x10; op2:x11; op2val:137438953472; immval:24
TEST_STORE(x1,x2,0,x10,x11,137438953472,24,400,c.sd,0)

inst_51:
// rs2_val == 274877906944, 
// opcode:c.sd; op1:x10; op2:x11; op2val:274877906944; immval:24
TEST_STORE(x1,x2,0,x10,x11,274877906944,24,408,c.sd,0)

inst_52:
// rs2_val == 549755813888, 
// opcode:c.sd; op1:x10; op2:x11; op2val:549755813888; immval:168
TEST_STORE(x1,x2,0,x10,x11,549755813888,168,416,c.sd,0)

inst_53:
// rs2_val == 1099511627776, 
// opcode:c.sd; op1:x10; op2:x11; op2val:1099511627776; immval:32
TEST_STORE(x1,x2,0,x10,x11,1099511627776,32,424,c.sd,0)

inst_54:
// rs2_val == 2199023255552, 
// opcode:c.sd; op1:x10; op2:x11; op2val:2199023255552; immval:240
TEST_STORE(x1,x2,0,x10,x11,2199023255552,240,432,c.sd,0)

inst_55:
// rs2_val == 4398046511104, 
// opcode:c.sd; op1:x10; op2:x11; op2val:4398046511104; immval:88
TEST_STORE(x1,x2,0,x10,x11,4398046511104,88,440,c.sd,0)

inst_56:
// rs2_val == 17592186044416, 
// opcode:c.sd; op1:x10; op2:x11; op2val:17592186044416; immval:152
TEST_STORE(x1,x2,0,x10,x11,17592186044416,152,448,c.sd,0)

inst_57:
// rs2_val == 35184372088832, 
// opcode:c.sd; op1:x10; op2:x11; op2val:35184372088832; immval:32
TEST_STORE(x1,x2,0,x10,x11,35184372088832,32,456,c.sd,0)

inst_58:
// rs2_val == 70368744177664, 
// opcode:c.sd; op1:x10; op2:x11; op2val:70368744177664; immval:136
TEST_STORE(x1,x2,0,x10,x11,70368744177664,136,464,c.sd,0)

inst_59:
// rs2_val == 140737488355328, 
// opcode:c.sd; op1:x10; op2:x11; op2val:140737488355328; immval:56
TEST_STORE(x1,x2,0,x10,x11,140737488355328,56,472,c.sd,0)

inst_60:
// rs2_val == 281474976710656, 
// opcode:c.sd; op1:x10; op2:x11; op2val:281474976710656; immval:0
TEST_STORE(x1,x2,0,x10,x11,281474976710656,0,480,c.sd,0)

inst_61:
// rs2_val == 562949953421312, 
// opcode:c.sd; op1:x10; op2:x11; op2val:562949953421312; immval:0
TEST_STORE(x1,x2,0,x10,x11,562949953421312,0,488,c.sd,0)

inst_62:
// rs2_val == 1125899906842624, 
// opcode:c.sd; op1:x10; op2:x11; op2val:1125899906842624; immval:80
TEST_STORE(x1,x2,0,x10,x11,1125899906842624,80,496,c.sd,0)

inst_63:
// rs2_val == 2251799813685248, 
// opcode:c.sd; op1:x10; op2:x11; op2val:2251799813685248; immval:96
TEST_STORE(x1,x2,0,x10,x11,2251799813685248,96,504,c.sd,0)

inst_64:
// rs2_val == 4503599627370496, 
// opcode:c.sd; op1:x10; op2:x11; op2val:4503599627370496; immval:48
TEST_STORE(x1,x2,0,x10,x11,4503599627370496,48,512,c.sd,0)

inst_65:
// rs2_val == 9007199254740992, 
// opcode:c.sd; op1:x10; op2:x11; op2val:9007199254740992; immval:32
TEST_STORE(x1,x2,0,x10,x11,9007199254740992,32,520,c.sd,0)

inst_66:
// rs2_val == 18014398509481984, 
// opcode:c.sd; op1:x10; op2:x11; op2val:18014398509481984; immval:40
TEST_STORE(x1,x2,0,x10,x11,18014398509481984,40,528,c.sd,0)

inst_67:
// rs2_val == 36028797018963968, 
// opcode:c.sd; op1:x10; op2:x11; op2val:36028797018963968; immval:136
TEST_STORE(x1,x2,0,x10,x11,36028797018963968,136,536,c.sd,0)

inst_68:
// rs2_val == 144115188075855872, 
// opcode:c.sd; op1:x10; op2:x11; op2val:144115188075855872; immval:112
TEST_STORE(x1,x2,0,x10,x11,144115188075855872,112,544,c.sd,0)

inst_69:
// rs2_val == 288230376151711744, 
// opcode:c.sd; op1:x10; op2:x11; op2val:288230376151711744; immval:40
TEST_STORE(x1,x2,0,x10,x11,288230376151711744,40,552,c.sd,0)

inst_70:
// rs2_val == -140737488355329, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-140737488355329; immval:168
TEST_STORE(x1,x2,0,x10,x11,-140737488355329,168,560,c.sd,0)

inst_71:
// rs2_val == -281474976710657, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-281474976710657; immval:0
TEST_STORE(x1,x2,0,x10,x11,-281474976710657,0,568,c.sd,0)

inst_72:
// rs2_val == -1125899906842625, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-1125899906842625; immval:32
TEST_STORE(x1,x2,0,x10,x11,-1125899906842625,32,576,c.sd,0)

inst_73:
// rs2_val == -2251799813685249, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-2251799813685249; immval:144
TEST_STORE(x1,x2,0,x10,x11,-2251799813685249,144,584,c.sd,0)

inst_74:
// rs2_val == -4503599627370497, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-4503599627370497; immval:184
TEST_STORE(x1,x2,0,x10,x11,-4503599627370497,184,592,c.sd,0)

inst_75:
// rs2_val == -9007199254740993, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-9007199254740993; immval:72
TEST_STORE(x1,x2,0,x10,x11,-9007199254740993,72,600,c.sd,0)

inst_76:
// rs2_val == -18014398509481985, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-18014398509481985; immval:248
TEST_STORE(x1,x2,0,x10,x11,-18014398509481985,248,608,c.sd,0)

inst_77:
// rs2_val == -36028797018963969, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-36028797018963969; immval:216
TEST_STORE(x1,x2,0,x10,x11,-36028797018963969,216,616,c.sd,0)

inst_78:
// rs2_val == -72057594037927937, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-72057594037927937; immval:88
TEST_STORE(x1,x2,0,x10,x11,-72057594037927937,88,624,c.sd,0)

inst_79:
// rs2_val == -144115188075855873, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-144115188075855873; immval:184
TEST_STORE(x1,x2,0,x10,x11,-144115188075855873,184,632,c.sd,0)

inst_80:
// rs2_val == -288230376151711745, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-288230376151711745; immval:152
TEST_STORE(x1,x2,0,x10,x11,-288230376151711745,152,640,c.sd,0)

inst_81:
// rs2_val == -576460752303423489, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-576460752303423489; immval:240
TEST_STORE(x1,x2,0,x10,x11,-576460752303423489,240,648,c.sd,0)

inst_82:
// rs2_val == -1152921504606846977, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-1152921504606846977; immval:88
TEST_STORE(x1,x2,0,x10,x11,-1152921504606846977,88,656,c.sd,0)

inst_83:
// rs2_val == -2305843009213693953, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-2305843009213693953; immval:8
TEST_STORE(x1,x2,0,x10,x11,-2305843009213693953,8,664,c.sd,0)

inst_84:
// rs2_val == -4611686018427387905, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-4611686018427387905; immval:152
TEST_STORE(x1,x2,0,x10,x11,-4611686018427387905,152,672,c.sd,0)

inst_85:
// rs2_val == 6148914691236517205, 
// opcode:c.sd; op1:x10; op2:x11; op2val:6148914691236517205; immval:16
TEST_STORE(x1,x2,0,x10,x11,6148914691236517205,16,680,c.sd,0)

inst_86:
// rs2_val == 576460752303423488, 
// opcode:c.sd; op1:x10; op2:x11; op2val:576460752303423488; immval:152
TEST_STORE(x1,x2,0,x10,x11,576460752303423488,152,688,c.sd,0)

inst_87:
// rs2_val == 1152921504606846976, 
// opcode:c.sd; op1:x10; op2:x11; op2val:1152921504606846976; immval:0
TEST_STORE(x1,x2,0,x10,x11,1152921504606846976,0,696,c.sd,0)

inst_88:
// rs2_val == 2305843009213693952, 
// opcode:c.sd; op1:x10; op2:x11; op2val:2305843009213693952; immval:8
TEST_STORE(x1,x2,0,x10,x11,2305843009213693952,8,704,c.sd,0)

inst_89:
// rs2_val == 4611686018427387904, 
// opcode:c.sd; op1:x10; op2:x11; op2val:4611686018427387904; immval:48
TEST_STORE(x1,x2,0,x10,x11,4611686018427387904,48,712,c.sd,0)

inst_90:
// rs2_val == -2, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-2; immval:72
TEST_STORE(x1,x2,0,x10,x11,-2,72,720,c.sd,0)

inst_91:
// rs2_val == -3, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-3; immval:136
TEST_STORE(x1,x2,0,x10,x11,-3,136,728,c.sd,0)

inst_92:
// rs2_val == -5, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-5; immval:168
TEST_STORE(x1,x2,0,x10,x11,-5,168,736,c.sd,0)

inst_93:
// rs2_val == -9, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-9; immval:112
TEST_STORE(x1,x2,0,x10,x11,-9,112,744,c.sd,0)

inst_94:
// rs2_val == -17, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-17; immval:8
TEST_STORE(x1,x2,0,x10,x11,-17,8,752,c.sd,0)

inst_95:
// rs2_val == -33, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-33; immval:72
TEST_STORE(x1,x2,0,x10,x11,-33,72,760,c.sd,0)

inst_96:
// rs2_val == -65, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-65; immval:216
TEST_STORE(x1,x2,0,x10,x11,-65,216,768,c.sd,0)

inst_97:
// rs2_val == -129, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-129; immval:0
TEST_STORE(x1,x2,0,x10,x11,-129,0,776,c.sd,0)

inst_98:
// rs2_val == -257, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-257; immval:184
TEST_STORE(x1,x2,0,x10,x11,-257,184,784,c.sd,0)

inst_99:
// rs2_val == -513, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-513; immval:48
TEST_STORE(x1,x2,0,x10,x11,-513,48,792,c.sd,0)

inst_100:
// rs2_val == -4097, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-4097; immval:144
TEST_STORE(x1,x2,0,x10,x11,-4097,144,800,c.sd,0)

inst_101:
// rs2_val == -8193, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-8193; immval:56
TEST_STORE(x1,x2,0,x10,x11,-8193,56,808,c.sd,0)

inst_102:
// rs2_val == -16385, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-16385; immval:152
TEST_STORE(x1,x2,0,x10,x11,-16385,152,816,c.sd,0)

inst_103:
// rs2_val == -32769, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-32769; immval:104
TEST_STORE(x1,x2,0,x10,x11,-32769,104,824,c.sd,0)

inst_104:
// rs2_val == -65537, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-65537; immval:136
TEST_STORE(x1,x2,0,x10,x11,-65537,136,832,c.sd,0)

inst_105:
// rs2_val == -131073, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-131073; immval:128
TEST_STORE(x1,x2,0,x10,x11,-131073,128,840,c.sd,0)

inst_106:
// rs2_val == -262145, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-262145; immval:216
TEST_STORE(x1,x2,0,x10,x11,-262145,216,848,c.sd,0)

inst_107:
// rs2_val == -524289, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-524289; immval:144
TEST_STORE(x1,x2,0,x10,x11,-524289,144,856,c.sd,0)

inst_108:
// rs2_val == -1048577, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-1048577; immval:8
TEST_STORE(x1,x2,0,x10,x11,-1048577,8,864,c.sd,0)

inst_109:
// rs2_val == -2097153, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-2097153; immval:96
TEST_STORE(x1,x2,0,x10,x11,-2097153,96,872,c.sd,0)

inst_110:
// rs2_val == -4194305, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-4194305; immval:144
TEST_STORE(x1,x2,0,x10,x11,-4194305,144,880,c.sd,0)

inst_111:
// rs2_val == -8388609, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-8388609; immval:56
TEST_STORE(x1,x2,0,x10,x11,-8388609,56,888,c.sd,0)

inst_112:
// rs2_val == -16777217, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-16777217; immval:56
TEST_STORE(x1,x2,0,x10,x11,-16777217,56,896,c.sd,0)

inst_113:
// rs2_val == -33554433, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-33554433; immval:232
TEST_STORE(x1,x2,0,x10,x11,-33554433,232,904,c.sd,0)

inst_114:
// rs2_val == -67108865, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-67108865; immval:80
TEST_STORE(x1,x2,0,x10,x11,-67108865,80,912,c.sd,0)

inst_115:
// rs2_val == -134217729, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-134217729; immval:56
TEST_STORE(x1,x2,0,x10,x11,-134217729,56,920,c.sd,0)

inst_116:
// rs2_val == -268435457, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-268435457; immval:120
TEST_STORE(x1,x2,0,x10,x11,-268435457,120,928,c.sd,0)

inst_117:
// rs2_val == -536870913, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-536870913; immval:232
TEST_STORE(x1,x2,0,x10,x11,-536870913,232,936,c.sd,0)

inst_118:
// rs2_val == -1073741825, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-1073741825; immval:32
TEST_STORE(x1,x2,0,x10,x11,-1073741825,32,944,c.sd,0)

inst_119:
// rs2_val == -2147483649, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-2147483649; immval:144
TEST_STORE(x1,x2,0,x10,x11,-2147483649,144,952,c.sd,0)

inst_120:
// rs2_val == -4294967297, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-4294967297; immval:136
TEST_STORE(x1,x2,0,x10,x11,-4294967297,136,960,c.sd,0)

inst_121:
// rs2_val == -8589934593, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-8589934593; immval:240
TEST_STORE(x1,x2,0,x10,x11,-8589934593,240,968,c.sd,0)

inst_122:
// rs2_val == -17179869185, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-17179869185; immval:16
TEST_STORE(x1,x2,0,x10,x11,-17179869185,16,976,c.sd,0)

inst_123:
// rs2_val == -34359738369, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-34359738369; immval:248
TEST_STORE(x1,x2,0,x10,x11,-34359738369,248,984,c.sd,0)

inst_124:
// rs2_val == -137438953473, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-137438953473; immval:184
TEST_STORE(x1,x2,0,x10,x11,-137438953473,184,992,c.sd,0)

inst_125:
// rs2_val == -274877906945, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-274877906945; immval:32
TEST_STORE(x1,x2,0,x10,x11,-274877906945,32,1000,c.sd,0)

inst_126:
// rs2_val == -1099511627777, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-1099511627777; immval:56
TEST_STORE(x1,x2,0,x10,x11,-1099511627777,56,1008,c.sd,0)

inst_127:
// rs2_val == -2199023255553, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-2199023255553; immval:104
TEST_STORE(x1,x2,0,x10,x11,-2199023255553,104,1016,c.sd,0)

inst_128:
// rs2_val == -4398046511105, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-4398046511105; immval:8
TEST_STORE(x1,x2,0,x10,x11,-4398046511105,8,1024,c.sd,0)

inst_129:
// rs2_val == -8796093022209, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-8796093022209; immval:72
TEST_STORE(x1,x2,0,x10,x11,-8796093022209,72,1032,c.sd,0)

inst_130:
// rs2_val == -17592186044417, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-17592186044417; immval:56
TEST_STORE(x1,x2,0,x10,x11,-17592186044417,56,1040,c.sd,0)

inst_131:
// rs2_val == -35184372088833, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-35184372088833; immval:120
TEST_STORE(x1,x2,0,x10,x11,-35184372088833,120,1048,c.sd,0)

inst_132:
// rs2_val == -70368744177665, 
// opcode:c.sd; op1:x10; op2:x11; op2val:-70368744177665; immval:248
TEST_STORE(x1,x2,0,x10,x11,-70368744177665,248,1056,c.sd,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 133*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
