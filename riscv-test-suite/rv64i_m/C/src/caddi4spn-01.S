 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:20:43 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.addi4spn instruction of the RISC-V C extension for the caddi4spn covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",caddi4spn)

RVTEST_SIGBASE( x1,signature_x1_1)

// rd==x10, imm_val > 0, imm_val == 4
// opcode:c.addi4spn; dest:x10; immval:4
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 4, x1, 0, x2)

// rd==x9, imm_val == 1020, 
// opcode:c.addi4spn; dest:x9; immval:1020
TEST_CADDI4SPN_OP( c.addi4spn, x9, 0x0000000000000000, 1020, x1, 8, x2)

// rd==x12, imm_val == 8, 
// opcode:c.addi4spn; dest:x12; immval:8
TEST_CADDI4SPN_OP( c.addi4spn, x12, 0x0000000000000000, 8, x1, 16, x2)

// rd==x11, imm_val == 16, 
// opcode:c.addi4spn; dest:x11; immval:16
TEST_CADDI4SPN_OP( c.addi4spn, x11, 0x0000000000000000, 16, x1, 24, x2)

// rd==x15, imm_val == 32, 
// opcode:c.addi4spn; dest:x15; immval:32
TEST_CADDI4SPN_OP( c.addi4spn, x15, 0x0000000000000000, 32, x1, 32, x2)

// rd==x8, imm_val == 64, 
// opcode:c.addi4spn; dest:x8; immval:64
TEST_CADDI4SPN_OP( c.addi4spn, x8, 0x0000000000000000, 64, x1, 40, x2)

// rd==x13, imm_val == 128, 
// opcode:c.addi4spn; dest:x13; immval:128
TEST_CADDI4SPN_OP( c.addi4spn, x13, 0x0000000000000000, 128, x1, 48, x2)

// rd==x14, imm_val == 256, 
// opcode:c.addi4spn; dest:x14; immval:256
TEST_CADDI4SPN_OP( c.addi4spn, x14, 0x0000000000000000, 256, x1, 56, x2)

// imm_val == 512, 
// opcode:c.addi4spn; dest:x10; immval:512
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 512, x1, 64, x2)

// imm_val == 1016, 
// opcode:c.addi4spn; dest:x10; immval:1016
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 1016, x1, 72, x2)

// imm_val == 1012, 
// opcode:c.addi4spn; dest:x10; immval:1012
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 1012, x1, 80, x2)

// imm_val == 1004, 
// opcode:c.addi4spn; dest:x10; immval:1004
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 1004, x1, 88, x2)

// imm_val == 764, 
// opcode:c.addi4spn; dest:x10; immval:764
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 764, x1, 96, x2)

// imm_val == 508, 
// opcode:c.addi4spn; dest:x10; immval:508
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 508, x1, 104, x2)

// imm_val == 340, 
// opcode:c.addi4spn; dest:x10; immval:340
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 340, x1, 112, x2)

// imm_val == 680, 
// opcode:c.addi4spn; dest:x10; immval:680
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 680, x1, 120, x2)

// imm_val == 988, 
// opcode:c.addi4spn; dest:x10; immval:988
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 988, x1, 128, x2)

// imm_val == 956, 
// opcode:c.addi4spn; dest:x10; immval:956
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 956, x1, 136, x2)

// imm_val == 892, 
// opcode:c.addi4spn; dest:x10; immval:892
TEST_CADDI4SPN_OP( c.addi4spn, x10, 0x0000000000000000, 892, x1, 144, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 19*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
