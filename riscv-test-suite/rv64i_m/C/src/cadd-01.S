 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.add instruction of the RISC-V C extension for the cadd covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64IC")

RVTEST_CODE_BEGIN
RVMODEL_BOOT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cadd)

RVTEST_SIGBASE( x7,signature_x7_1)

inst_0:
// rs1 != rs2, rs1==x2, rs2==x10, rs2_val > 0, rs2_val == 274877906944, rs1_val == 4096
// opcode: c.add; op1:x2; op2:x10; op1val:4096; op2val:274877906944
TEST_CR_OP( c.add, x2, x10, 0x0000000000000000, 4096, 274877906944, x7, 0, x12)

inst_1:
// rs1 == rs2, rs1==x20, rs2==x20, rs2_val < 0, rs2_val == -4194305, rs1_val == 4
// opcode: c.add; op1:x20; op2:x20; op1val:4; op2val:-4194305
TEST_CR_OP( c.add, x20, x20, 0x0000000000000000, 4, -4194305, x7, 8, x12)

inst_2:
// rs1==x30, rs2==x5, rs1_val == (-2**(xlen-1)), rs1_val == -9223372036854775808, rs2_val == 2147483648
// opcode: c.add; op1:x30; op2:x5; op1val:-9223372036854775808; op2val:2147483648
TEST_CR_OP( c.add, x30, x5, 0x0000000000000000, -9223372036854775808, 2147483648, x7, 16, x12)

inst_3:
// rs1==x26, rs2==x29, rs1_val == 0, rs2_val == 144115188075855872
// opcode: c.add; op1:x26; op2:x29; op1val:0; op2val:144115188075855872
TEST_CR_OP( c.add, x26, x29, 0x0000000000000000, 0, 144115188075855872, x7, 24, x12)

inst_4:
// rs1==x6, rs2==x19, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807, rs2_val == 32768
// opcode: c.add; op1:x6; op2:x19; op1val:9223372036854775807; op2val:32768
TEST_CR_OP( c.add, x6, x19, 0x0000000000000000, 9223372036854775807, 32768, x7, 32, x12)

inst_5:
// rs1==x18, rs2==x22, rs1_val == 1, rs2_val == -4503599627370497
// opcode: c.add; op1:x18; op2:x22; op1val:1; op2val:-4503599627370497
TEST_CR_OP( c.add, x18, x22, 0x0000000000000000, 1, -4503599627370497, x7, 40, x12)

inst_6:
// rs1==x4, rs2==x31, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, rs1_val == 8589934592
// opcode: c.add; op1:x4; op2:x31; op1val:8589934592; op2val:-9223372036854775808
TEST_CR_OP( c.add, x4, x31, 0x0000000000000000, 8589934592, -9223372036854775808, x7, 48, x12)

inst_7:
// rs1==x19, rs2==x24, rs2_val == 0, rs1_val == -144115188075855873
// opcode: c.add; op1:x19; op2:x24; op1val:-144115188075855873; op2val:0
TEST_CR_OP( c.add, x19, x24, 0x0000000000000000, -144115188075855873, 0, x7, 56, x12)

inst_8:
// rs1==x27, rs2==x17, rs2_val == (2**(xlen-1)-1), rs1_val == -140737488355329, rs2_val == 9223372036854775807
// opcode: c.add; op1:x27; op2:x17; op1val:-140737488355329; op2val:9223372036854775807
TEST_CR_OP( c.add, x27, x17, 0x0000000000000000, -140737488355329, 9223372036854775807, x7, 64, x12)

inst_9:
// rs1==x0, rs2==x9, rs2_val == 1, rs1_val == -17592186044417
// opcode: c.add; op1:x0; op2:x9; op1val:-17592186044417; op2val:1
TEST_CR_OP( c.add, x0, x9, 0x0000000000000000, -17592186044417, 1, x7, 72, x12)

inst_10:
// rs1==x1, rs2==x15, rs1_val == 2, rs2_val == -3
// opcode: c.add; op1:x1; op2:x15; op1val:2; op2val:-3
TEST_CR_OP( c.add, x1, x15, 0x0000000000000000, 2, -3, x7, 80, x12)

inst_11:
// rs1==x3, rs2==x1, rs1_val == 8, rs2_val == 288230376151711744
// opcode: c.add; op1:x3; op2:x1; op1val:8; op2val:288230376151711744
TEST_CR_OP( c.add, x3, x1, 0x0000000000000000, 8, 288230376151711744, x7, 88, x12)

inst_12:
// rs1==x23, rs2==x6, rs1_val == 16, rs2_val == -16385
// opcode: c.add; op1:x23; op2:x6; op1val:16; op2val:-16385
TEST_CR_OP( c.add, x23, x6, 0x0000000000000000, 16, -16385, x7, 96, x12)

inst_13:
// rs1==x25, rs2==x30, rs1_val == 32, rs2_val == -2305843009213693953
// opcode: c.add; op1:x25; op2:x30; op1val:32; op2val:-2305843009213693953
TEST_CR_OP( c.add, x25, x30, 0x0000000000000000, 32, -2305843009213693953, x7, 104, x12)

inst_14:
// rs1==x10, rs2==x26, rs1_val == 64, rs2_val == 1152921504606846976
// opcode: c.add; op1:x10; op2:x26; op1val:64; op2val:1152921504606846976
TEST_CR_OP( c.add, x10, x26, 0x0000000000000000, 64, 1152921504606846976, x7, 112, x12)

inst_15:
// rs1==x15, rs2==x27, rs1_val == 128, rs2_val == -288230376151711745
// opcode: c.add; op1:x15; op2:x27; op1val:128; op2val:-288230376151711745
TEST_CR_OP( c.add, x15, x27, 0x0000000000000000, 128, -288230376151711745, x7, 120, x12)

inst_16:
// rs1==x13, rs2==x3, rs1_val == 256, rs2_val == 17592186044416
// opcode: c.add; op1:x13; op2:x3; op1val:256; op2val:17592186044416
TEST_CR_OP( c.add, x13, x3, 0x0000000000000000, 256, 17592186044416, x7, 128, x12)

inst_17:
// rs1==x21, rs2==x11, rs1_val == 512, rs2_val == -2199023255553
// opcode: c.add; op1:x21; op2:x11; op1val:512; op2val:-2199023255553
TEST_CR_OP( c.add, x21, x11, 0x0000000000000000, 512, -2199023255553, x7, 136, x12)

inst_18:
// rs1==x17, rs2==x18, rs1_val == 1024, rs2_val == 2199023255552
// opcode: c.add; op1:x17; op2:x18; op1val:1024; op2val:2199023255552
TEST_CR_OP( c.add, x17, x18, 0x0000000000000000, 1024, 2199023255552, x7, 144, x12)

inst_19:
// rs1==x22, rs2==x8, rs1_val == 2048, rs2_val == 8796093022208
// opcode: c.add; op1:x22; op2:x8; op1val:2048; op2val:8796093022208
TEST_CR_OP( c.add, x22, x8, 0x0000000000000000, 2048, 8796093022208, x7, 152, x12)

inst_20:
// rs1==x28, rs2==x25, rs1_val == 8192, rs2_val == 2048
// opcode: c.add; op1:x28; op2:x25; op1val:8192; op2val:2048
TEST_CR_OP( c.add, x28, x25, 0x0000000000000000, 8192, 2048, x7, 160, x12)

inst_21:
// rs1==x9, rs2==x2, rs1_val == 16384, rs2_val == -65537
// opcode: c.add; op1:x9; op2:x2; op1val:16384; op2val:-65537
TEST_CR_OP( c.add, x9, x2, 0x0000000000000000, 16384, -65537, x7, 168, x3)

inst_22:
// rs1==x24, rs2==x23, rs1_val == 32768, rs2_val == 512
// opcode: c.add; op1:x24; op2:x23; op1val:32768; op2val:512
TEST_CR_OP( c.add, x24, x23, 0x0000000000000000, 32768, 512, x7, 176, x3)

inst_23:
// rs1==x12, rs2==x4, rs1_val == 65536, rs2_val == -34359738369
// opcode: c.add; op1:x12; op2:x4; op1val:65536; op2val:-34359738369
TEST_CR_OP( c.add, x12, x4, 0x0000000000000000, 65536, -34359738369, x7, 184, x3)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_24:
// rs1==x5, rs2==x13, rs1_val == 131072, 
// opcode: c.add; op1:x5; op2:x13; op1val:131072; op2val:9223372036854775807
TEST_CR_OP( c.add, x5, x13, 0x0000000000000000, 131072, 9223372036854775807, x1, 0, x3)

inst_25:
// rs1==x14, rs2==x12, rs1_val == 262144, 
// opcode: c.add; op1:x14; op2:x12; op1val:262144; op2val:-2305843009213693953
TEST_CR_OP( c.add, x14, x12, 0x0000000000000000, 262144, -2305843009213693953, x1, 8, x3)

inst_26:
// rs1==x7, rs2==x21, rs1_val == 524288, rs2_val == 32
// opcode: c.add; op1:x7; op2:x21; op1val:524288; op2val:32
TEST_CR_OP( c.add, x7, x21, 0x0000000000000000, 524288, 32, x1, 16, x3)

inst_27:
// rs1==x8, rs2==x16, rs1_val == 1048576, rs2_val == -72057594037927937
// opcode: c.add; op1:x8; op2:x16; op1val:1048576; op2val:-72057594037927937
TEST_CR_OP( c.add, x8, x16, 0x0000000000000000, 1048576, -72057594037927937, x1, 24, x3)

inst_28:
// rs1==x16, rs2==x14, rs1_val == 2097152, rs2_val == -134217729
// opcode: c.add; op1:x16; op2:x14; op1val:2097152; op2val:-134217729
TEST_CR_OP( c.add, x16, x14, 0x0000000000000000, 2097152, -134217729, x1, 32, x3)

inst_29:
// rs1==x11, rs2==x28, rs1_val == 4194304, rs2_val == -32769
// opcode: c.add; op1:x11; op2:x28; op1val:4194304; op2val:-32769
TEST_CR_OP( c.add, x11, x28, 0x0000000000000000, 4194304, -32769, x1, 40, x3)

inst_30:
// rs1==x31, rs2==x7, rs1_val == 8388608, rs2_val == -2251799813685249
// opcode: c.add; op1:x31; op2:x7; op1val:8388608; op2val:-2251799813685249
TEST_CR_OP( c.add, x31, x7, 0x0000000000000000, 8388608, -2251799813685249, x1, 48, x3)

inst_31:
// rs1==x29, rs1_val == 16777216, rs2_val == -262145
// opcode: c.add; op1:x29; op2:x12; op1val:16777216; op2val:-262145
TEST_CR_OP( c.add, x29, x12, 0x0000000000000000, 16777216, -262145, x1, 56, x3)

inst_32:
// rs1_val == 33554432, rs2_val == 65536
// opcode: c.add; op1:x10; op2:x11; op1val:33554432; op2val:65536
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 33554432, 65536, x1, 64, x3)

inst_33:
// rs1_val == 67108864, 
// opcode: c.add; op1:x10; op2:x11; op1val:67108864; op2val:-2199023255553
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 67108864, -2199023255553, x1, 72, x3)

inst_34:
// rs1_val == 134217728, rs2_val == 8
// opcode: c.add; op1:x10; op2:x11; op1val:134217728; op2val:8
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 134217728, 8, x1, 80, x3)

inst_35:
// rs1_val == 268435456, rs2_val == 68719476736
// opcode: c.add; op1:x10; op2:x11; op1val:268435456; op2val:68719476736
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 268435456, 68719476736, x1, 88, x3)

inst_36:
// rs1_val == 536870912, 
// opcode: c.add; op1:x10; op2:x11; op1val:536870912; op2val:-72057594037927937
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 536870912, -72057594037927937, x1, 96, x3)

inst_37:
// rs1_val == 1073741824, rs2_val == -129
// opcode: c.add; op1:x10; op2:x11; op1val:1073741824; op2val:-129
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 1073741824, -129, x1, 104, x3)

inst_38:
// rs1_val == 2147483648, rs2_val == -16777217
// opcode: c.add; op1:x10; op2:x11; op1val:2147483648; op2val:-16777217
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2147483648, -16777217, x1, 112, x3)

inst_39:
// rs1_val == 4294967296, 
// opcode: c.add; op1:x10; op2:x11; op1val:4294967296; op2val:-10
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 4294967296, -10, x1, 120, x3)

inst_40:
// rs1_val == 17179869184, rs2_val == -281474976710657
// opcode: c.add; op1:x10; op2:x11; op1val:17179869184; op2val:-281474976710657
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 17179869184, -281474976710657, x1, 128, x3)

inst_41:
// rs1_val == 34359738368, rs2_val == 2
// opcode: c.add; op1:x10; op2:x11; op1val:34359738368; op2val:2
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 34359738368, 2, x1, 136, x3)

inst_42:
// rs1_val == 68719476736, rs2_val == 268435456
// opcode: c.add; op1:x10; op2:x11; op1val:68719476736; op2val:268435456
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 68719476736, 268435456, x1, 144, x3)

inst_43:
// rs1_val == 137438953472, 
// opcode: c.add; op1:x10; op2:x11; op1val:137438953472; op2val:-34359738369
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 137438953472, -34359738369, x1, 152, x3)

inst_44:
// rs1_val == 274877906944, rs2_val == 16384
// opcode: c.add; op1:x10; op2:x11; op1val:274877906944; op2val:16384
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 274877906944, 16384, x1, 160, x3)

inst_45:
// rs1_val == 549755813888, rs2_val == 562949953421312
// opcode: c.add; op1:x10; op2:x11; op1val:549755813888; op2val:562949953421312
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 549755813888, 562949953421312, x1, 168, x3)

inst_46:
// rs1_val == 1099511627776, 
// opcode: c.add; op1:x10; op2:x11; op1val:1099511627776; op2val:-7
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 1099511627776, -7, x1, 176, x3)

inst_47:
// rs1_val == 2199023255552, rs2_val == 72057594037927936
// opcode: c.add; op1:x10; op2:x11; op1val:2199023255552; op2val:72057594037927936
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2199023255552, 72057594037927936, x1, 184, x3)

inst_48:
// rs1_val == 4398046511104, 
// opcode: c.add; op1:x10; op2:x11; op1val:4398046511104; op2val:-262145
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 4398046511104, -262145, x1, 192, x3)

inst_49:
// rs1_val == 8796093022208, 
// opcode: c.add; op1:x10; op2:x11; op1val:8796093022208; op2val:-1
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 8796093022208, -1, x1, 200, x3)

inst_50:
// rs1_val == 17592186044416, rs2_val == 128
// opcode: c.add; op1:x10; op2:x11; op1val:17592186044416; op2val:128
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 17592186044416, 128, x1, 208, x3)

inst_51:
// rs1_val == 35184372088832, rs2_val == -17592186044417
// opcode: c.add; op1:x10; op2:x11; op1val:35184372088832; op2val:-17592186044417
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 35184372088832, -17592186044417, x1, 216, x3)

inst_52:
// rs1_val == 70368744177664, rs2_val == -4398046511105
// opcode: c.add; op1:x10; op2:x11; op1val:70368744177664; op2val:-4398046511105
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 70368744177664, -4398046511105, x1, 224, x3)

inst_53:
// rs1_val == 140737488355328, rs2_val == -513
// opcode: c.add; op1:x10; op2:x11; op1val:140737488355328; op2val:-513
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 140737488355328, -513, x1, 232, x3)

inst_54:
// rs1_val == 281474976710656, 
// opcode: c.add; op1:x10; op2:x11; op1val:281474976710656; op2val:-9223372036854775808
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 281474976710656, -9223372036854775808, x1, 240, x3)

inst_55:
// rs1_val == 562949953421312, rs2_val == -8193
// opcode: c.add; op1:x10; op2:x11; op1val:562949953421312; op2val:-8193
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 562949953421312, -8193, x1, 248, x3)

inst_56:
// rs1_val == 1125899906842624, rs2_val == 64
// opcode: c.add; op1:x10; op2:x11; op1val:1125899906842624; op2val:64
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 1125899906842624, 64, x1, 256, x3)

inst_57:
// rs1_val == 2251799813685248, rs2_val == 33554432
// opcode: c.add; op1:x10; op2:x11; op1val:2251799813685248; op2val:33554432
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2251799813685248, 33554432, x1, 264, x3)

inst_58:
// rs1_val == 4503599627370496, rs2_val == -1152921504606846977
// opcode: c.add; op1:x10; op2:x11; op1val:4503599627370496; op2val:-1152921504606846977
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 4503599627370496, -1152921504606846977, x1, 272, x3)

inst_59:
// rs1_val == 9007199254740992, rs2_val == -274877906945
// opcode: c.add; op1:x10; op2:x11; op1val:9007199254740992; op2val:-274877906945
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 9007199254740992, -274877906945, x1, 280, x3)

inst_60:
// rs1_val == 18014398509481984, rs2_val == 140737488355328
// opcode: c.add; op1:x10; op2:x11; op1val:18014398509481984; op2val:140737488355328
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 18014398509481984, 140737488355328, x1, 288, x3)

inst_61:
// rs1_val == 36028797018963968, rs2_val == 4294967296
// opcode: c.add; op1:x10; op2:x11; op1val:36028797018963968; op2val:4294967296
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 36028797018963968, 4294967296, x1, 296, x3)

inst_62:
// rs1_val == 72057594037927936, 
// opcode: c.add; op1:x10; op2:x11; op1val:72057594037927936; op2val:32
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 72057594037927936, 32, x1, 304, x3)

inst_63:
// rs1_val == 144115188075855872, rs2_val == 1024
// opcode: c.add; op1:x10; op2:x11; op1val:144115188075855872; op2val:1024
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 144115188075855872, 1024, x1, 312, x3)

inst_64:
// rs1_val == 288230376151711744, rs2_val == 549755813888
// opcode: c.add; op1:x10; op2:x11; op1val:288230376151711744; op2val:549755813888
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 288230376151711744, 549755813888, x1, 320, x3)

inst_65:
// rs1_val == 576460752303423488, rs2_val == -8796093022209
// opcode: c.add; op1:x10; op2:x11; op1val:576460752303423488; op2val:-8796093022209
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 576460752303423488, -8796093022209, x1, 328, x3)

inst_66:
// rs1_val == 1152921504606846976, 
// opcode: c.add; op1:x10; op2:x11; op1val:1152921504606846976; op2val:-4398046511105
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 1152921504606846976, -4398046511105, x1, 336, x3)

inst_67:
// rs1_val == 2305843009213693952, rs2_val == -4097
// opcode: c.add; op1:x10; op2:x11; op1val:2305843009213693952; op2val:-4097
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2305843009213693952, -4097, x1, 344, x3)

inst_68:
// rs1_val == 4611686018427387904, rs2_val == -549755813889
// opcode: c.add; op1:x10; op2:x11; op1val:4611686018427387904; op2val:-549755813889
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 4611686018427387904, -549755813889, x1, 352, x3)

inst_69:
// rs1_val == -2, rs2_val == -131073
// opcode: c.add; op1:x10; op2:x11; op1val:-2; op2val:-131073
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -2, -131073, x1, 360, x3)

inst_70:
// rs1_val == -3, 
// opcode: c.add; op1:x10; op2:x11; op1val:-3; op2val:5
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -3, 5, x1, 368, x3)

inst_71:
// rs1_val == -5, 
// opcode: c.add; op1:x10; op2:x11; op1val:-5; op2val:274877906944
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -5, 274877906944, x1, 376, x3)

inst_72:
// rs1_val == -9, 
// opcode: c.add; op1:x10; op2:x11; op1val:-9; op2val:-134217729
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -9, -134217729, x1, 384, x3)

inst_73:
// rs1_val == -17, 
// opcode: c.add; op1:x10; op2:x11; op1val:-17; op2val:65536
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -17, 65536, x1, 392, x3)

inst_74:
// rs1_val == -33, rs2_val == -33
// opcode: c.add; op1:x10; op2:x11; op1val:-33; op2val:-33
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -33, -33, x1, 400, x3)

inst_75:
// rs1_val == -65, rs2_val == -1025
// opcode: c.add; op1:x10; op2:x11; op1val:-65; op2val:-1025
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -65, -1025, x1, 408, x3)

inst_76:
// rs2_val == -18014398509481985, rs1_val == -68719476737
// opcode: c.add; op1:x10; op2:x11; op1val:-68719476737; op2val:-18014398509481985
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -68719476737, -18014398509481985, x1, 416, x3)

inst_77:
// rs2_val == -36028797018963969, rs1_val == -1025
// opcode: c.add; op1:x10; op2:x11; op1val:-1025; op2val:-36028797018963969
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -1025, -36028797018963969, x1, 424, x3)

inst_78:
// rs2_val == -144115188075855873, 
// opcode: c.add; op1:x10; op2:x11; op1val:1073741824; op2val:-144115188075855873
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 1073741824, -144115188075855873, x1, 432, x3)

inst_79:
// rs2_val == -576460752303423489, 
// opcode: c.add; op1:x10; op2:x11; op1val:8192; op2val:-576460752303423489
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 8192, -576460752303423489, x1, 440, x3)

inst_80:
// rs2_val == -4611686018427387905, 
// opcode: c.add; op1:x10; op2:x11; op1val:2199023255552; op2val:-4611686018427387905
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2199023255552, -4611686018427387905, x1, 448, x3)

inst_81:
// rs2_val == 6148914691236517205, 
// opcode: c.add; op1:x10; op2:x11; op1val:70368744177664; op2val:6148914691236517205
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 70368744177664, 6148914691236517205, x1, 456, x3)

inst_82:
// rs2_val == -6148914691236517206, 
// opcode: c.add; op1:x10; op2:x11; op1val:2097152; op2val:-6148914691236517206
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2097152, -6148914691236517206, x1, 464, x3)

inst_83:
// rs1_val == -129, 
// opcode: c.add; op1:x10; op2:x11; op1val:-129; op2val:9223372036854775807
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -129, 9223372036854775807, x1, 472, x3)

inst_84:
// rs1_val == -257, 
// opcode: c.add; op1:x10; op2:x11; op1val:-257; op2val:-2199023255553
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -257, -2199023255553, x1, 480, x3)

inst_85:
// rs1_val == -513, 
// opcode: c.add; op1:x10; op2:x11; op1val:-513; op2val:-4
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -513, -4, x1, 488, x3)

inst_86:
// rs1_val == -2049, 
// opcode: c.add; op1:x10; op2:x11; op1val:-2049; op2val:6
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -2049, 6, x1, 496, x3)

inst_87:
// rs1_val == -4097, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4097; op2val:-9223372036854775808
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4097, -9223372036854775808, x1, 504, x3)

inst_88:
// rs1_val == -8193, 
// opcode: c.add; op1:x10; op2:x11; op1val:-8193; op2val:-1025
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -8193, -1025, x1, 512, x3)

inst_89:
// rs1_val == -16385, 
// opcode: c.add; op1:x10; op2:x11; op1val:-16385; op2val:-274877906945
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -16385, -274877906945, x1, 520, x3)

inst_90:
// rs1_val == -32769, 
// opcode: c.add; op1:x10; op2:x11; op1val:-32769; op2val:2048
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -32769, 2048, x1, 528, x3)

inst_91:
// rs1_val == -65537, 
// opcode: c.add; op1:x10; op2:x11; op1val:-65537; op2val:-131073
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -65537, -131073, x1, 536, x3)

inst_92:
// rs1_val == -131073, rs2_val == -67108865
// opcode: c.add; op1:x10; op2:x11; op1val:-131073; op2val:-67108865
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -131073, -67108865, x1, 544, x3)

inst_93:
// rs1_val == -262145, 
// opcode: c.add; op1:x10; op2:x11; op1val:-262145; op2val:68719476736
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -262145, 68719476736, x1, 552, x3)

inst_94:
// rs1_val == -524289, 
// opcode: c.add; op1:x10; op2:x11; op1val:-524289; op2val:-2251799813685249
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -524289, -2251799813685249, x1, 560, x3)

inst_95:
// rs1_val == -1048577, rs2_val == 36028797018963968
// opcode: c.add; op1:x10; op2:x11; op1val:-1048577; op2val:36028797018963968
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -1048577, 36028797018963968, x1, 568, x3)

inst_96:
// rs1_val == -2097153, rs2_val == -268435457
// opcode: c.add; op1:x10; op2:x11; op1val:-2097153; op2val:-268435457
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -2097153, -268435457, x1, 576, x3)

inst_97:
// rs1_val == -4194305, rs2_val == 281474976710656
// opcode: c.add; op1:x10; op2:x11; op1val:-4194305; op2val:281474976710656
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4194305, 281474976710656, x1, 584, x3)

inst_98:
// rs1_val == -8388609, 
// opcode: c.add; op1:x10; op2:x11; op1val:-8388609; op2val:72057594037927936
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -8388609, 72057594037927936, x1, 592, x3)

inst_99:
// rs1_val == -16777217, 
// opcode: c.add; op1:x10; op2:x11; op1val:-16777217; op2val:65536
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -16777217, 65536, x1, 600, x3)

inst_100:
// rs1_val == -33554433, 
// opcode: c.add; op1:x10; op2:x11; op1val:-33554433; op2val:1152921504606846976
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -33554433, 1152921504606846976, x1, 608, x3)

inst_101:
// rs1_val == -67108865, rs2_val == 137438953472
// opcode: c.add; op1:x10; op2:x11; op1val:-67108865; op2val:137438953472
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -67108865, 137438953472, x1, 616, x3)

inst_102:
// rs1_val == -134217729, rs2_val == 4
// opcode: c.add; op1:x10; op2:x11; op1val:-134217729; op2val:4
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -134217729, 4, x1, 624, x3)

inst_103:
// rs1_val == -268435457, rs2_val == 536870912
// opcode: c.add; op1:x10; op2:x11; op1val:-268435457; op2val:536870912
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -268435457, 536870912, x1, 632, x3)

inst_104:
// rs1_val == -536870913, 
// opcode: c.add; op1:x10; op2:x11; op1val:-536870913; op2val:-4194305
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -536870913, -4194305, x1, 640, x3)

inst_105:
// rs1_val == -1073741825, 
// opcode: c.add; op1:x10; op2:x11; op1val:-1073741825; op2val:2
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -1073741825, 2, x1, 648, x3)

inst_106:
// rs1_val == -2147483649, 
// opcode: c.add; op1:x10; op2:x11; op1val:-2147483649; op2val:-4503599627370497
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -2147483649, -4503599627370497, x1, 656, x3)

inst_107:
// rs1_val == -4294967297, rs2_val == 4503599627370496
// opcode: c.add; op1:x10; op2:x11; op1val:-4294967297; op2val:4503599627370496
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4294967297, 4503599627370496, x1, 664, x3)

inst_108:
// rs1_val == -8589934593, 
// opcode: c.add; op1:x10; op2:x11; op1val:-8589934593; op2val:32768
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -8589934593, 32768, x1, 672, x3)

inst_109:
// rs1_val == -17179869185, 
// opcode: c.add; op1:x10; op2:x11; op1val:-17179869185; op2val:-6148914691236517206
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -17179869185, -6148914691236517206, x1, 680, x3)

inst_110:
// rs1_val == -34359738369, 
// opcode: c.add; op1:x10; op2:x11; op1val:-34359738369; op2val:-513
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -34359738369, -513, x1, 688, x3)

inst_111:
// rs1_val == -137438953473, rs2_val == -137438953473
// opcode: c.add; op1:x10; op2:x11; op1val:-137438953473; op2val:-137438953473
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -137438953473, -137438953473, x1, 696, x3)

inst_112:
// rs1_val == -274877906945, rs2_val == 524288
// opcode: c.add; op1:x10; op2:x11; op1val:-274877906945; op2val:524288
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -274877906945, 524288, x1, 704, x3)

inst_113:
// rs1_val == -549755813889, 
// opcode: c.add; op1:x10; op2:x11; op1val:-549755813889; op2val:-16777217
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -549755813889, -16777217, x1, 712, x3)

inst_114:
// rs1_val == -1099511627777, 
// opcode: c.add; op1:x10; op2:x11; op1val:-1099511627777; op2val:-4097
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -1099511627777, -4097, x1, 720, x3)

inst_115:
// rs1_val == -2199023255553, rs2_val == -8388609
// opcode: c.add; op1:x10; op2:x11; op1val:-2199023255553; op2val:-8388609
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -2199023255553, -8388609, x1, 728, x3)

inst_116:
// rs1_val == -4398046511105, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4398046511105; op2val:549755813888
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4398046511105, 549755813888, x1, 736, x3)

inst_117:
// rs1_val == -8796093022209, 
// opcode: c.add; op1:x10; op2:x11; op1val:-8796093022209; op2val:2
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -8796093022209, 2, x1, 744, x3)

inst_118:
// rs1_val == -35184372088833, rs2_val == -70368744177665
// opcode: c.add; op1:x10; op2:x11; op1val:-35184372088833; op2val:-70368744177665
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -35184372088833, -70368744177665, x1, 752, x3)

inst_119:
// rs1_val == -70368744177665, 
// opcode: c.add; op1:x10; op2:x11; op1val:-70368744177665; op2val:-129
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -70368744177665, -129, x1, 760, x3)

inst_120:
// rs1_val == -281474976710657, 
// opcode: c.add; op1:x10; op2:x11; op1val:-281474976710657; op2val:5
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -281474976710657, 5, x1, 768, x3)

inst_121:
// rs1_val == -562949953421313, rs2_val == 262144
// opcode: c.add; op1:x10; op2:x11; op1val:-562949953421313; op2val:262144
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -562949953421313, 262144, x1, 776, x3)

inst_122:
// rs1_val == -1125899906842625, 
// opcode: c.add; op1:x10; op2:x11; op1val:-1125899906842625; op2val:-9223372036854775808
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -1125899906842625, -9223372036854775808, x1, 784, x3)

inst_123:
// rs1_val == -2251799813685249, 
// opcode: c.add; op1:x10; op2:x11; op1val:-2251799813685249; op2val:-10
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -2251799813685249, -10, x1, 792, x3)

inst_124:
// rs1_val == -36028797018963969, 
// opcode: c.add; op1:x10; op2:x11; op1val:-36028797018963969; op2val:17592186044416
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -36028797018963969, 17592186044416, x1, 800, x3)

inst_125:
// rs1_val == -72057594037927937, 
// opcode: c.add; op1:x10; op2:x11; op1val:-72057594037927937; op2val:268435456
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -72057594037927937, 268435456, x1, 808, x3)

inst_126:
// rs1_val == -288230376151711745, rs2_val == -1048577
// opcode: c.add; op1:x10; op2:x11; op1val:-288230376151711745; op2val:-1048577
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -288230376151711745, -1048577, x1, 816, x3)

inst_127:
// rs1_val == -576460752303423489, rs2_val == 1099511627776
// opcode: c.add; op1:x10; op2:x11; op1val:-576460752303423489; op2val:1099511627776
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -576460752303423489, 1099511627776, x1, 824, x3)

inst_128:
// rs2_val == -9007199254740993, 
// opcode: c.add; op1:x10; op2:x11; op1val:-10; op2val:-9007199254740993
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -10, -9007199254740993, x1, 832, x3)

inst_129:
// rs1_val == -1152921504606846977, rs2_val == 8192
// opcode: c.add; op1:x10; op2:x11; op1val:-1152921504606846977; op2val:8192
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -1152921504606846977, 8192, x1, 840, x3)

inst_130:
// rs1_val == -2305843009213693953, rs2_val == -33554433
// opcode: c.add; op1:x10; op2:x11; op1val:-2305843009213693953; op2val:-33554433
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -2305843009213693953, -33554433, x1, 848, x3)

inst_131:
// rs1_val == -4611686018427387905, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4611686018427387905; op2val:-274877906945
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4611686018427387905, -274877906945, x1, 856, x3)

inst_132:
// rs1_val == 6148914691236517205, 
// opcode: c.add; op1:x10; op2:x11; op1val:6148914691236517205; op2val:-4398046511105
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 6148914691236517205, -4398046511105, x1, 864, x3)

inst_133:
// rs1_val == -6148914691236517206, 
// opcode: c.add; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:-18014398509481985
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -6148914691236517206, -18014398509481985, x1, 872, x3)

inst_134:
// rs2_val == 16, 
// opcode: c.add; op1:x10; op2:x11; op1val:262144; op2val:16
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 262144, 16, x1, 880, x3)

inst_135:
// rs2_val == 256, 
// opcode: c.add; op1:x10; op2:x11; op1val:-140737488355329; op2val:256
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -140737488355329, 256, x1, 888, x3)

inst_136:
// rs2_val == 4096, 
// opcode: c.add; op1:x10; op2:x11; op1val:274877906944; op2val:4096
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 274877906944, 4096, x1, 896, x3)

inst_137:
// rs2_val == 131072, 
// opcode: c.add; op1:x10; op2:x11; op1val:-536870913; op2val:131072
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -536870913, 131072, x1, 904, x3)

inst_138:
// rs2_val == 1048576, 
// opcode: c.add; op1:x10; op2:x11; op1val:65536; op2val:1048576
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 65536, 1048576, x1, 912, x3)

inst_139:
// rs2_val == 2097152, 
// opcode: c.add; op1:x10; op2:x11; op1val:16384; op2val:2097152
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 16384, 2097152, x1, 920, x3)

inst_140:
// rs2_val == 4194304, rs1_val == -9007199254740993
// opcode: c.add; op1:x10; op2:x11; op1val:-9007199254740993; op2val:4194304
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -9007199254740993, 4194304, x1, 928, x3)

inst_141:
// rs2_val == 8388608, 
// opcode: c.add; op1:x10; op2:x11; op1val:16777216; op2val:8388608
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 16777216, 8388608, x1, 936, x3)

inst_142:
// rs2_val == 16777216, 
// opcode: c.add; op1:x10; op2:x11; op1val:562949953421312; op2val:16777216
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 562949953421312, 16777216, x1, 944, x3)

inst_143:
// rs2_val == 67108864, 
// opcode: c.add; op1:x10; op2:x11; op1val:-33554433; op2val:67108864
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -33554433, 67108864, x1, 952, x3)

inst_144:
// rs2_val == 134217728, 
// opcode: c.add; op1:x10; op2:x11; op1val:256; op2val:134217728
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 256, 134217728, x1, 960, x3)

inst_145:
// rs2_val == 1073741824, 
// opcode: c.add; op1:x10; op2:x11; op1val:6; op2val:1073741824
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 6, 1073741824, x1, 968, x3)

inst_146:
// rs2_val == 8589934592, 
// opcode: c.add; op1:x10; op2:x11; op1val:16; op2val:8589934592
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 16, 8589934592, x1, 976, x3)

inst_147:
// rs2_val == 17179869184, 
// opcode: c.add; op1:x10; op2:x11; op1val:-257; op2val:17179869184
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -257, 17179869184, x1, 984, x3)

inst_148:
// rs2_val == 34359738368, 
// opcode: c.add; op1:x10; op2:x11; op1val:2147483648; op2val:34359738368
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2147483648, 34359738368, x1, 992, x3)

inst_149:
// rs2_val == 4398046511104, 
// opcode: c.add; op1:x10; op2:x11; op1val:8589934592; op2val:4398046511104
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 8589934592, 4398046511104, x1, 1000, x3)

inst_150:
// rs2_val == 35184372088832, 
// opcode: c.add; op1:x10; op2:x11; op1val:2048; op2val:35184372088832
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 2048, 35184372088832, x1, 1008, x3)

inst_151:
// rs2_val == 18014398509481984, 
// opcode: c.add; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:18014398509481984
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -6148914691236517206, 18014398509481984, x1, 1016, x3)

inst_152:
// rs2_val == 9007199254740992, 
// opcode: c.add; op1:x10; op2:x11; op1val:-10; op2val:9007199254740992
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -10, 9007199254740992, x1, 1024, x3)

inst_153:
// rs2_val == 576460752303423488, 
// opcode: c.add; op1:x10; op2:x11; op1val:-68719476737; op2val:576460752303423488
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -68719476737, 576460752303423488, x1, 1032, x3)

inst_154:
// rs2_val == 2305843009213693952, 
// opcode: c.add; op1:x10; op2:x11; op1val:549755813888; op2val:2305843009213693952
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 549755813888, 2305843009213693952, x1, 1040, x3)

inst_155:
// rs2_val == 4611686018427387904, 
// opcode: c.add; op1:x10; op2:x11; op1val:512; op2val:4611686018427387904
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 512, 4611686018427387904, x1, 1048, x3)

inst_156:
// rs2_val == -2, 
// opcode: c.add; op1:x10; op2:x11; op1val:-33; op2val:-2
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -33, -2, x1, 1056, x3)

inst_157:
// rs2_val == -5, 
// opcode: c.add; op1:x10; op2:x11; op1val:-65537; op2val:-5
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -65537, -5, x1, 1064, x3)

inst_158:
// rs2_val == -9, 
// opcode: c.add; op1:x10; op2:x11; op1val:-17179869185; op2val:-9
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -17179869185, -9, x1, 1072, x3)

inst_159:
// rs2_val == -17, 
// opcode: c.add; op1:x10; op2:x11; op1val:4294967296; op2val:-17
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 4294967296, -17, x1, 1080, x3)

inst_160:
// rs2_val == -65, 
// opcode: c.add; op1:x10; op2:x11; op1val:-536870913; op2val:-65
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -536870913, -65, x1, 1088, x3)

inst_161:
// rs2_val == -257, 
// opcode: c.add; op1:x10; op2:x11; op1val:-576460752303423489; op2val:-257
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -576460752303423489, -257, x1, 1096, x3)

inst_162:
// rs2_val == 2251799813685248, 
// opcode: c.add; op1:x10; op2:x11; op1val:-70368744177665; op2val:2251799813685248
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -70368744177665, 2251799813685248, x1, 1104, x3)

inst_163:
// rs2_val == -2049, 
// opcode: c.add; op1:x10; op2:x11; op1val:67108864; op2val:-2049
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 67108864, -2049, x1, 1112, x3)

inst_164:
// rs2_val == -524289, 
// opcode: c.add; op1:x10; op2:x11; op1val:274877906944; op2val:-524289
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 274877906944, -524289, x1, 1120, x3)

inst_165:
// rs2_val == -2097153, 
// opcode: c.add; op1:x10; op2:x11; op1val:288230376151711744; op2val:-2097153
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 288230376151711744, -2097153, x1, 1128, x3)

inst_166:
// rs2_val == -536870913, 
// opcode: c.add; op1:x10; op2:x11; op1val:8388608; op2val:-536870913
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 8388608, -536870913, x1, 1136, x3)

inst_167:
// rs2_val == -1073741825, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4194305; op2val:-1073741825
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4194305, -1073741825, x1, 1144, x3)

inst_168:
// rs2_val == -2147483649, 
// opcode: c.add; op1:x10; op2:x11; op1val:-10; op2val:-2147483649
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -10, -2147483649, x1, 1152, x3)

inst_169:
// rs2_val == -4294967297, 
// opcode: c.add; op1:x10; op2:x11; op1val:536870912; op2val:-4294967297
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 536870912, -4294967297, x1, 1160, x3)

inst_170:
// rs2_val == -8589934593, 
// opcode: c.add; op1:x10; op2:x11; op1val:8796093022208; op2val:-8589934593
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 8796093022208, -8589934593, x1, 1168, x3)

inst_171:
// rs2_val == -17179869185, 
// opcode: c.add; op1:x10; op2:x11; op1val:6148914691236517205; op2val:-17179869185
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 6148914691236517205, -17179869185, x1, 1176, x3)

inst_172:
// rs2_val == -68719476737, 
// opcode: c.add; op1:x10; op2:x11; op1val:-33; op2val:-68719476737
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -33, -68719476737, x1, 1184, x3)

inst_173:
// rs2_val == -1099511627777, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4611686018427387904; op2val:-1099511627777
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4611686018427387904, -1099511627777, x1, 1192, x3)

inst_174:
// rs2_val == 1125899906842624, 
// opcode: c.add; op1:x10; op2:x11; op1val:-524289; op2val:1125899906842624
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -524289, 1125899906842624, x1, 1200, x3)

inst_175:
// rs2_val == -35184372088833, 
// opcode: c.add; op1:x10; op2:x11; op1val:-34359738369; op2val:-35184372088833
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -34359738369, -35184372088833, x1, 1208, x3)

inst_176:
// rs2_val == 70368744177664, 
// opcode: c.add; op1:x10; op2:x11; op1val:-70368744177665; op2val:70368744177664
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -70368744177665, 70368744177664, x1, 1216, x3)

inst_177:
// rs2_val == -140737488355329, 
// opcode: c.add; op1:x10; op2:x11; op1val:281474976710656; op2val:-140737488355329
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 281474976710656, -140737488355329, x1, 1224, x3)

inst_178:
// rs2_val == -562949953421313, 
// opcode: c.add; op1:x10; op2:x11; op1val:-513; op2val:-562949953421313
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -513, -562949953421313, x1, 1232, x3)

inst_179:
// rs2_val == -1125899906842625, 
// opcode: c.add; op1:x10; op2:x11; op1val:-1099511627777; op2val:-1125899906842625
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -1099511627777, -1125899906842625, x1, 1240, x3)

inst_180:
// rs1_val == -4503599627370497, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4503599627370497; op2val:32
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -4503599627370497, 32, x1, 1248, x3)

inst_181:
// rs1_val == -18014398509481985, 
// opcode: c.add; op1:x10; op2:x11; op1val:-18014398509481985; op2val:134217728
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -18014398509481985, 134217728, x1, 1256, x3)

inst_182:
// rs2_val < 0, rs2_val == -4194305, rs1_val == 4
// opcode: c.add; op1:x10; op2:x11; op1val:4; op2val:-4194305
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, 4, -4194305, x1, 1264, x3)

inst_183:
// rs2_val == 1, rs1_val == -17592186044417
// opcode: c.add; op1:x10; op2:x11; op1val:-17592186044417; op2val:1
TEST_CR_OP( c.add, x10, x11, 0x0000000000000000, -17592186044417, 1, x1, 1272, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 160*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
