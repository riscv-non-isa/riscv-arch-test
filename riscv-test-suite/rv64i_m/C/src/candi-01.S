 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:33 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.andi instruction of the RISC-V C extension for the candi covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV64IC")

RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",candi)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1==x8, rs1_val == (-2**(xlen-1)), rs1_val != imm_val, rs1_val < 0 and imm_val > 0, rs1_val == -9223372036854775808
// opcode: c.andi; op1:x8; immval:15
TEST_CI_OP( c.andi, x8, 0x0000000000000000, -9223372036854775808, 15, x1, 0, x2)

inst_1:
// rs1==x12, rs1_val == 0, imm_val == 16
// opcode: c.andi; op1:x12; immval:16
TEST_CI_OP( c.andi, x12, 0x0000000000000000, 0, 16, x1, 8, x2)

inst_2:
// rs1==x9, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and imm_val < 0, rs1_val == 9223372036854775807
// opcode: c.andi; op1:x9; immval:-8
TEST_CI_OP( c.andi, x9, 0x0000000000000000, 9223372036854775807, -8, x1, 16, x2)

inst_3:
// rs1==x10, rs1_val == 1, imm_val == -2
// opcode: c.andi; op1:x10; immval:-2
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 1, -2, x1, 24, x2)

inst_4:
// rs1==x11, imm_val == (-2**(6-1)), rs1_val == 576460752303423488, imm_val == -32
// opcode: c.andi; op1:x11; immval:-32
TEST_CI_OP( c.andi, x11, 0x0000000000000000, 576460752303423488, -32, x1, 32, x2)

inst_5:
// rs1==x15, imm_val == 0, rs1_val == -131073
// opcode: c.andi; op1:x15; immval:0
TEST_CI_OP( c.andi, x15, 0x0000000000000000, -131073, 0, x1, 40, x2)

inst_6:
// rs1==x14, imm_val == (2**(6-1)-1), imm_val == 31, rs1_val == -9007199254740993
// opcode: c.andi; op1:x14; immval:31
TEST_CI_OP( c.andi, x14, 0x0000000000000000, -9007199254740993, 31, x1, 48, x2)

inst_7:
// rs1==x13, imm_val == 1, rs1_val == -67108865
// opcode: c.andi; op1:x13; immval:1
TEST_CI_OP( c.andi, x13, 0x0000000000000000, -67108865, 1, x1, 56, x2)

inst_8:
// rs1_val == imm_val, rs1_val < 0 and imm_val < 0
// opcode: c.andi; op1:x10; immval:-10
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -10, -10, x1, 64, x2)

inst_9:
// rs1_val > 0 and imm_val > 0, rs1_val == 32
// opcode: c.andi; op1:x10; immval:9
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 32, 9, x1, 72, x2)

inst_10:
// rs1_val == 2, 
// opcode: c.andi; op1:x10; immval:15
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 2, 15, x1, 80, x2)

inst_11:
// rs1_val == 4, imm_val == -22
// opcode: c.andi; op1:x10; immval:-22
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 4, -22, x1, 88, x2)

inst_12:
// rs1_val == 8, 
// opcode: c.andi; op1:x10; immval:16
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 8, 16, x1, 96, x2)

inst_13:
// rs1_val == 16, 
// opcode: c.andi; op1:x10; immval:7
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 16, 7, x1, 104, x2)

inst_14:
// rs1_val == 64, 
// opcode: c.andi; op1:x10; immval:-22
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 64, -22, x1, 112, x2)

inst_15:
// rs1_val == 128, imm_val == 8
// opcode: c.andi; op1:x10; immval:8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 128, 8, x1, 120, x2)

inst_16:
// rs1_val == 256, imm_val == 21
// opcode: c.andi; op1:x10; immval:21
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 256, 21, x1, 128, x2)

inst_17:
// rs1_val == 512, 
// opcode: c.andi; op1:x10; immval:3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 512, 3, x1, 136, x2)

inst_18:
// rs1_val == 1024, 
// opcode: c.andi; op1:x10; immval:9
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 1024, 9, x1, 144, x2)

inst_19:
// rs1_val == 2048, 
// opcode: c.andi; op1:x10; immval:1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 2048, 1, x1, 152, x2)

inst_20:
// rs1_val == 4096, imm_val == -17
// opcode: c.andi; op1:x10; immval:-17
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 4096, -17, x1, 160, x2)

inst_21:
// rs1_val == 8192, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 8192, -4, x1, 168, x2)

inst_22:
// rs1_val == 16384, 
// opcode: c.andi; op1:x10; immval:21
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 16384, 21, x1, 176, x2)

inst_23:
// rs1_val == 32768, 
// opcode: c.andi; op1:x10; immval:6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 32768, 6, x1, 184, x2)

inst_24:
// rs1_val == 65536, 
// opcode: c.andi; op1:x10; immval:1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 65536, 1, x1, 192, x2)

inst_25:
// rs1_val == 131072, 
// opcode: c.andi; op1:x10; immval:9
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 131072, 9, x1, 200, x2)

inst_26:
// rs1_val == 262144, 
// opcode: c.andi; op1:x10; immval:0
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 262144, 0, x1, 208, x2)

inst_27:
// rs1_val == 524288, 
// opcode: c.andi; op1:x10; immval:-8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 524288, -8, x1, 216, x2)

inst_28:
// rs1_val == 1048576, 
// opcode: c.andi; op1:x10; immval:-6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 1048576, -6, x1, 224, x2)

inst_29:
// rs1_val == 2097152, imm_val == -3
// opcode: c.andi; op1:x10; immval:-3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 2097152, -3, x1, 232, x2)

inst_30:
// rs1_val == 4194304, 
// opcode: c.andi; op1:x10; immval:-22
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 4194304, -22, x1, 240, x2)

inst_31:
// rs1_val == 8388608, 
// opcode: c.andi; op1:x10; immval:31
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 8388608, 31, x1, 248, x2)

inst_32:
// rs1_val == 16777216, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 16777216, -4, x1, 256, x2)

inst_33:
// rs1_val == 33554432, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 33554432, 5, x1, 264, x2)

inst_34:
// rs1_val == 67108864, imm_val == -5
// opcode: c.andi; op1:x10; immval:-5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 67108864, -5, x1, 272, x2)

inst_35:
// rs1_val == 134217728, imm_val == 2
// opcode: c.andi; op1:x10; immval:2
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 134217728, 2, x1, 280, x2)

inst_36:
// rs1_val == 268435456, 
// opcode: c.andi; op1:x10; immval:31
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 268435456, 31, x1, 288, x2)

inst_37:
// rs1_val == 536870912, 
// opcode: c.andi; op1:x10; immval:-16
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 536870912, -16, x1, 296, x2)

inst_38:
// rs1_val == 1073741824, 
// opcode: c.andi; op1:x10; immval:2
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 1073741824, 2, x1, 304, x2)

inst_39:
// rs1_val == 2147483648, 
// opcode: c.andi; op1:x10; immval:8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 2147483648, 8, x1, 312, x2)

inst_40:
// rs1_val == 4294967296, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 4294967296, 5, x1, 320, x2)

inst_41:
// rs1_val == 8589934592, 
// opcode: c.andi; op1:x10; immval:6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 8589934592, 6, x1, 328, x2)

inst_42:
// rs1_val == 17179869184, 
// opcode: c.andi; op1:x10; immval:-10
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 17179869184, -10, x1, 336, x2)

inst_43:
// rs1_val == 34359738368, 
// opcode: c.andi; op1:x10; immval:-17
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 34359738368, -17, x1, 344, x2)

inst_44:
// rs1_val == 68719476736, 
// opcode: c.andi; op1:x10; immval:21
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 68719476736, 21, x1, 352, x2)

inst_45:
// rs1_val == 137438953472, 
// opcode: c.andi; op1:x10; immval:-3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 137438953472, -3, x1, 360, x2)

inst_46:
// rs1_val == 274877906944, 
// opcode: c.andi; op1:x10; immval:-3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 274877906944, -3, x1, 368, x2)

inst_47:
// rs1_val == 549755813888, 
// opcode: c.andi; op1:x10; immval:15
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 549755813888, 15, x1, 376, x2)

inst_48:
// rs1_val == 1099511627776, 
// opcode: c.andi; op1:x10; immval:31
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 1099511627776, 31, x1, 384, x2)

inst_49:
// rs1_val == 2199023255552, 
// opcode: c.andi; op1:x10; immval:7
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 2199023255552, 7, x1, 392, x2)

inst_50:
// rs1_val == 4398046511104, 
// opcode: c.andi; op1:x10; immval:21
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 4398046511104, 21, x1, 400, x2)

inst_51:
// rs1_val == 8796093022208, 
// opcode: c.andi; op1:x10; immval:1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 8796093022208, 1, x1, 408, x2)

inst_52:
// rs1_val == 17592186044416, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 17592186044416, -4, x1, 416, x2)

inst_53:
// rs1_val == 35184372088832, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 35184372088832, 5, x1, 424, x2)

inst_54:
// rs1_val == 70368744177664, 
// opcode: c.andi; op1:x10; immval:-6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 70368744177664, -6, x1, 432, x2)

inst_55:
// rs1_val == 140737488355328, 
// opcode: c.andi; op1:x10; immval:1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 140737488355328, 1, x1, 440, x2)

inst_56:
// rs1_val == 281474976710656, 
// opcode: c.andi; op1:x10; immval:3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 281474976710656, 3, x1, 448, x2)

inst_57:
// rs1_val == 562949953421312, 
// opcode: c.andi; op1:x10; immval:31
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 562949953421312, 31, x1, 456, x2)

inst_58:
// rs1_val == 1125899906842624, 
// opcode: c.andi; op1:x10; immval:-10
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 1125899906842624, -10, x1, 464, x2)

inst_59:
// rs1_val == 2251799813685248, 
// opcode: c.andi; op1:x10; immval:9
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 2251799813685248, 9, x1, 472, x2)

inst_60:
// rs1_val == 4503599627370496, 
// opcode: c.andi; op1:x10; immval:-2
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 4503599627370496, -2, x1, 480, x2)

inst_61:
// rs1_val == 9007199254740992, 
// opcode: c.andi; op1:x10; immval:-7
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 9007199254740992, -7, x1, 488, x2)

inst_62:
// rs1_val == 18014398509481984, 
// opcode: c.andi; op1:x10; immval:15
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 18014398509481984, 15, x1, 496, x2)

inst_63:
// rs1_val == 36028797018963968, imm_val == 4
// opcode: c.andi; op1:x10; immval:4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 36028797018963968, 4, x1, 504, x2)

inst_64:
// rs1_val == 72057594037927936, imm_val == -9
// opcode: c.andi; op1:x10; immval:-9
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 72057594037927936, -9, x1, 512, x2)

inst_65:
// rs1_val == 144115188075855872, 
// opcode: c.andi; op1:x10; immval:7
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 144115188075855872, 7, x1, 520, x2)

inst_66:
// rs1_val == 288230376151711744, 
// opcode: c.andi; op1:x10; immval:7
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 288230376151711744, 7, x1, 528, x2)

inst_67:
// rs1_val == 1152921504606846976, 
// opcode: c.andi; op1:x10; immval:-6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 1152921504606846976, -6, x1, 536, x2)

inst_68:
// rs1_val == 2305843009213693952, 
// opcode: c.andi; op1:x10; immval:-5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 2305843009213693952, -5, x1, 544, x2)

inst_69:
// rs1_val == -2251799813685249, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -2251799813685249, -4, x1, 552, x2)

inst_70:
// rs1_val == -4503599627370497, 
// opcode: c.andi; op1:x10; immval:-3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -4503599627370497, -3, x1, 560, x2)

inst_71:
// rs1_val == -18014398509481985, 
// opcode: c.andi; op1:x10; immval:-3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -18014398509481985, -3, x1, 568, x2)

inst_72:
// rs1_val == -36028797018963969, 
// opcode: c.andi; op1:x10; immval:-8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -36028797018963969, -8, x1, 576, x2)

inst_73:
// rs1_val == -72057594037927937, 
// opcode: c.andi; op1:x10; immval:31
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -72057594037927937, 31, x1, 584, x2)

inst_74:
// rs1_val == -144115188075855873, 
// opcode: c.andi; op1:x10; immval:7
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -144115188075855873, 7, x1, 592, x2)

inst_75:
// rs1_val == -288230376151711745, 
// opcode: c.andi; op1:x10; immval:3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -288230376151711745, 3, x1, 600, x2)

inst_76:
// rs1_val == -576460752303423489, 
// opcode: c.andi; op1:x10; immval:3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -576460752303423489, 3, x1, 608, x2)

inst_77:
// rs1_val == -1152921504606846977, 
// opcode: c.andi; op1:x10; immval:-10
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -1152921504606846977, -10, x1, 616, x2)

inst_78:
// rs1_val == -2305843009213693953, 
// opcode: c.andi; op1:x10; immval:-6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -2305843009213693953, -6, x1, 624, x2)

inst_79:
// rs1_val == -4611686018427387905, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -4611686018427387905, 5, x1, 632, x2)

inst_80:
// rs1_val == 6148914691236517205, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 6148914691236517205, 5, x1, 640, x2)

inst_81:
// rs1_val == -6148914691236517206, 
// opcode: c.andi; op1:x10; immval:-17
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -6148914691236517206, -17, x1, 648, x2)

inst_82:
// rs1_val == 4611686018427387904, 
// opcode: c.andi; op1:x10; immval:-2
TEST_CI_OP( c.andi, x10, 0x0000000000000000, 4611686018427387904, -2, x1, 656, x2)

inst_83:
// rs1_val == -2, 
// opcode: c.andi; op1:x10; immval:-6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -2, -6, x1, 664, x2)

inst_84:
// rs1_val == -3, 
// opcode: c.andi; op1:x10; immval:0
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -3, 0, x1, 672, x2)

inst_85:
// rs1_val == -5, 
// opcode: c.andi; op1:x10; immval:-6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -5, -6, x1, 680, x2)

inst_86:
// rs1_val == -9, 
// opcode: c.andi; op1:x10; immval:3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -9, 3, x1, 688, x2)

inst_87:
// rs1_val == -17, 
// opcode: c.andi; op1:x10; immval:4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -17, 4, x1, 696, x2)

inst_88:
// rs1_val == -33, 
// opcode: c.andi; op1:x10; immval:1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -33, 1, x1, 704, x2)

inst_89:
// rs1_val == -65, 
// opcode: c.andi; op1:x10; immval:-8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -65, -8, x1, 712, x2)

inst_90:
// rs1_val == -129, 
// opcode: c.andi; op1:x10; immval:3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -129, 3, x1, 720, x2)

inst_91:
// rs1_val == -257, 
// opcode: c.andi; op1:x10; immval:-3
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -257, -3, x1, 728, x2)

inst_92:
// rs1_val == -513, 
// opcode: c.andi; op1:x10; immval:1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -513, 1, x1, 736, x2)

inst_93:
// rs1_val == -1025, 
// opcode: c.andi; op1:x10; immval:4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -1025, 4, x1, 744, x2)

inst_94:
// rs1_val == -2049, 
// opcode: c.andi; op1:x10; immval:9
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -2049, 9, x1, 752, x2)

inst_95:
// rs1_val == -4097, 
// opcode: c.andi; op1:x10; immval:-22
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -4097, -22, x1, 760, x2)

inst_96:
// rs1_val == -8193, 
// opcode: c.andi; op1:x10; immval:9
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -8193, 9, x1, 768, x2)

inst_97:
// rs1_val == -16385, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -16385, 5, x1, 776, x2)

inst_98:
// rs1_val == -32769, 
// opcode: c.andi; op1:x10; immval:-8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -32769, -8, x1, 784, x2)

inst_99:
// rs1_val == -65537, 
// opcode: c.andi; op1:x10; immval:-17
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -65537, -17, x1, 792, x2)

inst_100:
// rs1_val == -262145, 
// opcode: c.andi; op1:x10; immval:15
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -262145, 15, x1, 800, x2)

inst_101:
// rs1_val == -524289, 
// opcode: c.andi; op1:x10; immval:-32
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -524289, -32, x1, 808, x2)

inst_102:
// rs1_val == -1048577, 
// opcode: c.andi; op1:x10; immval:4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -1048577, 4, x1, 816, x2)

inst_103:
// rs1_val == -2097153, 
// opcode: c.andi; op1:x10; immval:8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -2097153, 8, x1, 824, x2)

inst_104:
// rs1_val == -4194305, 
// opcode: c.andi; op1:x10; immval:-22
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -4194305, -22, x1, 832, x2)

inst_105:
// rs1_val == -8388609, 
// opcode: c.andi; op1:x10; immval:7
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -8388609, 7, x1, 840, x2)

inst_106:
// rs1_val == -16777217, 
// opcode: c.andi; op1:x10; immval:-1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -16777217, -1, x1, 848, x2)

inst_107:
// rs1_val == -33554433, 
// opcode: c.andi; op1:x10; immval:4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -33554433, 4, x1, 856, x2)

inst_108:
// rs1_val == -134217729, 
// opcode: c.andi; op1:x10; immval:-6
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -134217729, -6, x1, 864, x2)

inst_109:
// rs1_val == -268435457, 
// opcode: c.andi; op1:x10; immval:4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -268435457, 4, x1, 872, x2)

inst_110:
// rs1_val == -536870913, 
// opcode: c.andi; op1:x10; immval:-16
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -536870913, -16, x1, 880, x2)

inst_111:
// rs1_val == -1073741825, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -1073741825, -4, x1, 888, x2)

inst_112:
// rs1_val == -2147483649, 
// opcode: c.andi; op1:x10; immval:-1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -2147483649, -1, x1, 896, x2)

inst_113:
// rs1_val == -4294967297, 
// opcode: c.andi; op1:x10; immval:-32
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -4294967297, -32, x1, 904, x2)

inst_114:
// rs1_val == -8589934593, 
// opcode: c.andi; op1:x10; immval:-2
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -8589934593, -2, x1, 912, x2)

inst_115:
// rs1_val == -17179869185, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -17179869185, 5, x1, 920, x2)

inst_116:
// rs1_val == -34359738369, 
// opcode: c.andi; op1:x10; immval:1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -34359738369, 1, x1, 928, x2)

inst_117:
// rs1_val == -68719476737, 
// opcode: c.andi; op1:x10; immval:-1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -68719476737, -1, x1, 936, x2)

inst_118:
// rs1_val == -137438953473, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -137438953473, -4, x1, 944, x2)

inst_119:
// rs1_val == -274877906945, 
// opcode: c.andi; op1:x10; immval:-1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -274877906945, -1, x1, 952, x2)

inst_120:
// rs1_val == -549755813889, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -549755813889, -4, x1, 960, x2)

inst_121:
// rs1_val == -1099511627777, 
// opcode: c.andi; op1:x10; immval:4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -1099511627777, 4, x1, 968, x2)

inst_122:
// rs1_val == -2199023255553, 
// opcode: c.andi; op1:x10; immval:8
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -2199023255553, 8, x1, 976, x2)

inst_123:
// rs1_val == -4398046511105, 
// opcode: c.andi; op1:x10; immval:-17
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -4398046511105, -17, x1, 984, x2)

inst_124:
// rs1_val == -8796093022209, 
// opcode: c.andi; op1:x10; immval:-4
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -8796093022209, -4, x1, 992, x2)

inst_125:
// rs1_val == -17592186044417, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -17592186044417, 5, x1, 1000, x2)

inst_126:
// rs1_val == -35184372088833, 
// opcode: c.andi; op1:x10; immval:-1
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -35184372088833, -1, x1, 1008, x2)

inst_127:
// rs1_val == -70368744177665, 
// opcode: c.andi; op1:x10; immval:21
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -70368744177665, 21, x1, 1016, x2)

inst_128:
// rs1_val == -140737488355329, 
// opcode: c.andi; op1:x10; immval:-32
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -140737488355329, -32, x1, 1024, x2)

inst_129:
// rs1_val == -281474976710657, 
// opcode: c.andi; op1:x10; immval:-5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -281474976710657, -5, x1, 1032, x2)

inst_130:
// rs1_val == -562949953421313, 
// opcode: c.andi; op1:x10; immval:5
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -562949953421313, 5, x1, 1040, x2)

inst_131:
// rs1_val == -1125899906842625, 
// opcode: c.andi; op1:x10; immval:-10
TEST_CI_OP( c.andi, x10, 0x0000000000000000, -1125899906842625, -10, x1, 1048, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 132*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
