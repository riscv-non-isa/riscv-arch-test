
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 08:16:37 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv64ic.cgf') \
//                  -- xlen 64 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.or instruction of the RISC-V C extension for the cor covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cor)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x9, rs2==x12, rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808, rs2_val < 0, rs1_val == -4611686018427387905
// opcode: c.or; op1:x9; op2:x12; op1val:-4611686018427387905; op2val:-9223372036854775808
TEST_CR_OP( c.or, x9, x12, 0x0000000000000000, -4611686018427387905, -9223372036854775808, x1, 0, x2)

inst_1:
// rs1 == rs2, rs1==x10, rs2==x10, rs2_val == 0, rs1_val == -524289
// opcode: c.or; op1:x10; op2:x10; op1val:-524289; op2val:0
TEST_CR_OP( c.or, x10, x10, 0x0000000000000000, -524289, 0, x1, 8, x2)

inst_2:
// rs1==x15, rs2==x9, rs2_val == (2**(xlen-1)-1), rs2_val > 0, rs2_val == 9223372036854775807, rs1_val == -536870913
// opcode: c.or; op1:x15; op2:x9; op1val:-536870913; op2val:9223372036854775807
TEST_CR_OP( c.or, x15, x9, 0x0000000000000000, -536870913, 9223372036854775807, x1, 16, x2)

inst_3:
// rs1==x12, rs2==x8, rs2_val == 1, rs1_val == 288230376151711744
// opcode: c.or; op1:x12; op2:x8; op1val:288230376151711744; op2val:1
TEST_CR_OP( c.or, x12, x8, 0x0000000000000000, 288230376151711744, 1, x1, 24, x2)

inst_4:
// rs1==x13, rs2==x15, rs1_val == (-2**(xlen-1)), rs1_val == -9223372036854775808, rs2_val == -67108865
// opcode: c.or; op1:x13; op2:x15; op1val:-9223372036854775808; op2val:-67108865
TEST_CR_OP( c.or, x13, x15, 0x0000000000000000, -9223372036854775808, -67108865, x1, 32, x2)

inst_5:
// rs1==x8, rs2==x11, rs1_val == 0, rs2_val == 281474976710656
// opcode: c.or; op1:x8; op2:x11; op1val:0; op2val:281474976710656
TEST_CR_OP( c.or, x8, x11, 0x0000000000000000, 0, 281474976710656, x1, 40, x2)

inst_6:
// rs1==x11, rs2==x14, rs1_val == (2**(xlen-1)-1), rs1_val == 9223372036854775807
// opcode: c.or; op1:x11; op2:x14; op1val:9223372036854775807; op2val:-7
TEST_CR_OP( c.or, x11, x14, 0x0000000000000000, 9223372036854775807, -7, x1, 48, x2)

inst_7:
// rs1==x14, rs2==x13, rs1_val == 1, rs2_val == 8388608
// opcode: c.or; op1:x14; op2:x13; op1val:1; op2val:8388608
TEST_CR_OP( c.or, x14, x13, 0x0000000000000000, 1, 8388608, x1, 56, x2)

inst_8:
// rs2_val == 2, rs1_val == 131072
// opcode: c.or; op1:x10; op2:x11; op1val:131072; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 131072, 2, x1, 64, x2)

inst_9:
// rs2_val == 4, rs1_val == -36028797018963969
// opcode: c.or; op1:x10; op2:x11; op1val:-36028797018963969; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -36028797018963969, 4, x1, 72, x2)

inst_10:
// rs2_val == 8, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:8
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 8, x1, 80, x2)

inst_11:
// rs2_val == 16, rs1_val == -144115188075855873
// opcode: c.or; op1:x10; op2:x11; op1val:-144115188075855873; op2val:16
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -144115188075855873, 16, x1, 88, x2)

inst_12:
// rs2_val == 32, 
// opcode: c.or; op1:x10; op2:x11; op1val:-524289; op2val:32
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -524289, 32, x1, 96, x2)

inst_13:
// rs2_val == 64, rs1_val == -562949953421313
// opcode: c.or; op1:x10; op2:x11; op1val:-562949953421313; op2val:64
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -562949953421313, 64, x1, 104, x2)

inst_14:
// rs2_val == 128, 
// opcode: c.or; op1:x10; op2:x11; op1val:9; op2val:128
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 9, 128, x1, 112, x2)

inst_15:
// rs2_val == 256, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:256
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 256, x1, 120, x2)

inst_16:
// rs2_val == 512, 
// opcode: c.or; op1:x10; op2:x11; op1val:-144115188075855873; op2val:512
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -144115188075855873, 512, x1, 128, x2)

inst_17:
// rs2_val == 1024, rs1_val == 35184372088832
// opcode: c.or; op1:x10; op2:x11; op1val:35184372088832; op2val:1024
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 35184372088832, 1024, x1, 136, x2)

inst_18:
// rs2_val == 2048, 
// opcode: c.or; op1:x10; op2:x11; op1val:-7; op2val:2048
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -7, 2048, x1, 144, x2)

inst_19:
// rs2_val == 4096, rs1_val == -129
// opcode: c.or; op1:x10; op2:x11; op1val:-129; op2val:4096
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -129, 4096, x1, 152, x2)

inst_20:
// rs2_val == 8192, rs1_val == -262145
// opcode: c.or; op1:x10; op2:x11; op1val:-262145; op2val:8192
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -262145, 8192, x1, 160, x2)

inst_21:
// rs2_val == 16384, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:16384
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 16384, x1, 168, x2)

inst_22:
// rs2_val == 32768, rs1_val == -33554433
// opcode: c.or; op1:x10; op2:x11; op1val:-33554433; op2val:32768
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -33554433, 32768, x1, 176, x2)

inst_23:
// rs2_val == 65536, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:65536
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 65536, x1, 184, x2)

inst_24:
// rs2_val == 131072, rs1_val == 8
// opcode: c.or; op1:x10; op2:x11; op1val:8; op2val:131072
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 8, 131072, x1, 192, x2)

inst_25:
// rs2_val == 262144, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:262144
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 262144, x1, 200, x2)

inst_26:
// rs2_val == 524288, rs1_val == -8589934593
// opcode: c.or; op1:x10; op2:x11; op1val:-8589934593; op2val:524288
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8589934593, 524288, x1, 208, x2)

inst_27:
// rs2_val == 1048576, 
// opcode: c.or; op1:x10; op2:x11; op1val:-144115188075855873; op2val:1048576
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -144115188075855873, 1048576, x1, 216, x2)

inst_28:
// rs2_val == 2097152, rs1_val == 2048
// opcode: c.or; op1:x10; op2:x11; op1val:2048; op2val:2097152
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2048, 2097152, x1, 224, x2)

inst_29:
// rs2_val == 4194304, rs1_val == 34359738368
// opcode: c.or; op1:x10; op2:x11; op1val:34359738368; op2val:4194304
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 34359738368, 4194304, x1, 232, x2)

inst_30:
// rs2_val == 16777216, rs1_val == -549755813889
// opcode: c.or; op1:x10; op2:x11; op1val:-549755813889; op2val:16777216
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -549755813889, 16777216, x1, 240, x2)

inst_31:
// rs2_val == 33554432, rs1_val == -68719476737
// opcode: c.or; op1:x10; op2:x11; op1val:-68719476737; op2val:33554432
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -68719476737, 33554432, x1, 248, x2)

inst_32:
// rs2_val == 67108864, rs1_val == 4398046511104
// opcode: c.or; op1:x10; op2:x11; op1val:4398046511104; op2val:67108864
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4398046511104, 67108864, x1, 256, x2)

inst_33:
// rs2_val == 134217728, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:134217728
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 134217728, x1, 264, x2)

inst_34:
// rs2_val == 268435456, rs1_val == 70368744177664
// opcode: c.or; op1:x10; op2:x11; op1val:70368744177664; op2val:268435456
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 70368744177664, 268435456, x1, 272, x2)

inst_35:
// rs2_val == 536870912, 
// opcode: c.or; op1:x10; op2:x11; op1val:-8; op2val:536870912
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8, 536870912, x1, 280, x2)

inst_36:
// rs2_val == 1073741824, rs1_val == 2097152
// opcode: c.or; op1:x10; op2:x11; op1val:2097152; op2val:1073741824
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2097152, 1073741824, x1, 288, x2)

inst_37:
// rs2_val == 2147483648, rs1_val == 32
// opcode: c.or; op1:x10; op2:x11; op1val:32; op2val:2147483648
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 32, 2147483648, x1, 296, x2)

inst_38:
// rs2_val == 4294967296, 
// opcode: c.or; op1:x10; op2:x11; op1val:34359738368; op2val:4294967296
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 34359738368, 4294967296, x1, 304, x2)

inst_39:
// rs2_val == 8589934592, rs1_val == 64
// opcode: c.or; op1:x10; op2:x11; op1val:64; op2val:8589934592
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 64, 8589934592, x1, 312, x2)

inst_40:
// rs2_val == 17179869184, rs1_val == 1048576
// opcode: c.or; op1:x10; op2:x11; op1val:1048576; op2val:17179869184
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 1048576, 17179869184, x1, 320, x2)

inst_41:
// rs2_val == 34359738368, rs1_val == -17
// opcode: c.or; op1:x10; op2:x11; op1val:-17; op2val:34359738368
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -17, 34359738368, x1, 328, x2)

inst_42:
// rs2_val == 68719476736, rs1_val == -72057594037927937
// opcode: c.or; op1:x10; op2:x11; op1val:-72057594037927937; op2val:68719476736
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -72057594037927937, 68719476736, x1, 336, x2)

inst_43:
// rs2_val == 137438953472, 
// opcode: c.or; op1:x10; op2:x11; op1val:34359738368; op2val:137438953472
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 34359738368, 137438953472, x1, 344, x2)

inst_44:
// rs2_val == 274877906944, rs1_val == 1099511627776
// opcode: c.or; op1:x10; op2:x11; op1val:1099511627776; op2val:274877906944
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 1099511627776, 274877906944, x1, 352, x2)

inst_45:
// rs2_val == 549755813888, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:549755813888
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 549755813888, x1, 360, x2)

inst_46:
// rs2_val == 1099511627776, rs1_val == -8388609
// opcode: c.or; op1:x10; op2:x11; op1val:-8388609; op2val:1099511627776
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8388609, 1099511627776, x1, 368, x2)

inst_47:
// rs2_val == 2199023255552, rs1_val == 1152921504606846976
// opcode: c.or; op1:x10; op2:x11; op1val:1152921504606846976; op2val:2199023255552
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 1152921504606846976, 2199023255552, x1, 376, x2)

inst_48:
// rs2_val == 4398046511104, rs1_val == 128
// opcode: c.or; op1:x10; op2:x11; op1val:128; op2val:4398046511104
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 128, 4398046511104, x1, 384, x2)

inst_49:
// rs2_val == 8796093022208, rs1_val == -9007199254740993
// opcode: c.or; op1:x10; op2:x11; op1val:-9007199254740993; op2val:8796093022208
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -9007199254740993, 8796093022208, x1, 392, x2)

inst_50:
// rs2_val == 17592186044416, rs1_val == 2199023255552
// opcode: c.or; op1:x10; op2:x11; op1val:2199023255552; op2val:17592186044416
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2199023255552, 17592186044416, x1, 400, x2)

inst_51:
// rs2_val == 35184372088832, 
// opcode: c.or; op1:x10; op2:x11; op1val:-8589934593; op2val:35184372088832
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8589934593, 35184372088832, x1, 408, x2)

inst_52:
// rs2_val == 70368744177664, rs1_val == -16385
// opcode: c.or; op1:x10; op2:x11; op1val:-16385; op2val:70368744177664
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -16385, 70368744177664, x1, 416, x2)

inst_53:
// rs2_val == 140737488355328, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:140737488355328
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 140737488355328, x1, 424, x2)

inst_54:
// rs2_val == 562949953421312, rs1_val == 4503599627370496
// opcode: c.or; op1:x10; op2:x11; op1val:4503599627370496; op2val:562949953421312
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4503599627370496, 562949953421312, x1, 432, x2)

inst_55:
// rs2_val == 1125899906842624, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:1125899906842624
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 1125899906842624, x1, 440, x2)

inst_56:
// rs2_val == 2251799813685248, 
// opcode: c.or; op1:x10; op2:x11; op1val:-4611686018427387904; op2val:2251799813685248
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4611686018427387904, 2251799813685248, x1, 448, x2)

inst_57:
// rs2_val == 4503599627370496, rs1_val == 281474976710656
// opcode: c.or; op1:x10; op2:x11; op1val:281474976710656; op2val:4503599627370496
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 281474976710656, 4503599627370496, x1, 456, x2)

inst_58:
// rs2_val == 9007199254740992, rs1_val == 18014398509481984
// opcode: c.or; op1:x10; op2:x11; op1val:18014398509481984; op2val:9007199254740992
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 18014398509481984, 9007199254740992, x1, 464, x2)

inst_59:
// rs2_val == 18014398509481984, 
// opcode: c.or; op1:x10; op2:x11; op1val:70368744177664; op2val:18014398509481984
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 70368744177664, 18014398509481984, x1, 472, x2)

inst_60:
// rs2_val == 36028797018963968, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:36028797018963968
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 36028797018963968, x1, 480, x2)

inst_61:
// rs2_val == 72057594037927936, rs1_val == -1099511627777
// opcode: c.or; op1:x10; op2:x11; op1val:-1099511627777; op2val:72057594037927936
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -1099511627777, 72057594037927936, x1, 488, x2)

inst_62:
// rs2_val == 144115188075855872, rs1_val == -131073
// opcode: c.or; op1:x10; op2:x11; op1val:-131073; op2val:144115188075855872
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -131073, 144115188075855872, x1, 496, x2)

inst_63:
// rs2_val == 288230376151711744, rs1_val == -17592186044417
// opcode: c.or; op1:x10; op2:x11; op1val:-17592186044417; op2val:288230376151711744
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -17592186044417, 288230376151711744, x1, 504, x2)

inst_64:
// rs2_val == 576460752303423488, rs1_val == 6148914691236517205
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:576460752303423488
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 576460752303423488, x1, 512, x2)

inst_65:
// rs2_val == 1152921504606846976, 
// opcode: c.or; op1:x10; op2:x11; op1val:-549755813889; op2val:1152921504606846976
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -549755813889, 1152921504606846976, x1, 520, x2)

inst_66:
// rs2_val == 2305843009213693952, rs1_val == 8796093022208
// opcode: c.or; op1:x10; op2:x11; op1val:8796093022208; op2val:2305843009213693952
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 8796093022208, 2305843009213693952, x1, 528, x2)

inst_67:
// rs2_val == 4611686018427387904, 
// opcode: c.or; op1:x10; op2:x11; op1val:128; op2val:4611686018427387904
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 128, 4611686018427387904, x1, 536, x2)

inst_68:
// rs2_val == -2, 
// opcode: c.or; op1:x10; op2:x11; op1val:-33554433; op2val:-2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -33554433, -2, x1, 544, x2)

inst_69:
// rs2_val == -3, rs1_val == 2251799813685248
// opcode: c.or; op1:x10; op2:x11; op1val:2251799813685248; op2val:-3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2251799813685248, -3, x1, 552, x2)

inst_70:
// rs2_val == -5, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:-5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, -5, x1, 560, x2)

inst_71:
// rs2_val == -9, 
// opcode: c.or; op1:x10; op2:x11; op1val:2048; op2val:-9
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2048, -9, x1, 568, x2)

inst_72:
// rs2_val == -17, rs1_val == -4097
// opcode: c.or; op1:x10; op2:x11; op1val:-4097; op2val:-17
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4097, -17, x1, 576, x2)

inst_73:
// rs2_val == -33, rs1_val == 137438953472
// opcode: c.or; op1:x10; op2:x11; op1val:137438953472; op2val:-33
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 137438953472, -33, x1, 584, x2)

inst_74:
// rs2_val == -65, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:-65
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, -65, x1, 592, x2)

inst_75:
// rs2_val == -129, rs1_val == 17592186044416
// opcode: c.or; op1:x10; op2:x11; op1val:17592186044416; op2val:-129
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 17592186044416, -129, x1, 600, x2)

inst_76:
// rs2_val == -257, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:-257
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, -257, x1, 608, x2)

inst_77:
// rs2_val == -513, rs1_val == 140737488355328
// opcode: c.or; op1:x10; op2:x11; op1val:140737488355328; op2val:-513
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 140737488355328, -513, x1, 616, x2)

inst_78:
// rs2_val == -1025, 
// opcode: c.or; op1:x10; op2:x11; op1val:-131073; op2val:-1025
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -131073, -1025, x1, 624, x2)

inst_79:
// rs2_val == -2049, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:-2049
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, -2049, x1, 632, x2)

inst_80:
// rs2_val == -4097, rs1_val == 4294967296
// opcode: c.or; op1:x10; op2:x11; op1val:4294967296; op2val:-4097
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4294967296, -4097, x1, 640, x2)

inst_81:
// rs2_val == -8193, rs1_val == 2147483648
// opcode: c.or; op1:x10; op2:x11; op1val:2147483648; op2val:-8193
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2147483648, -8193, x1, 648, x2)

inst_82:
// rs2_val == -16385, rs1_val == -288230376151711745
// opcode: c.or; op1:x10; op2:x11; op1val:-288230376151711745; op2val:-16385
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -288230376151711745, -16385, x1, 656, x2)

inst_83:
// rs2_val == -32769, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:-32769
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, -32769, x1, 664, x2)

inst_84:
// rs2_val == -65537, 
// opcode: c.or; op1:x10; op2:x11; op1val:-7; op2val:-65537
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -7, -65537, x1, 672, x2)

inst_85:
// rs2_val == -131073, 
// opcode: c.or; op1:x10; op2:x11; op1val:-562949953421313; op2val:-131073
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -562949953421313, -131073, x1, 680, x2)

inst_86:
// rs2_val == -262145, rs1_val == -18014398509481985
// opcode: c.or; op1:x10; op2:x11; op1val:-18014398509481985; op2val:-262145
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -18014398509481985, -262145, x1, 688, x2)

inst_87:
// rs2_val == -524289, 
// opcode: c.or; op1:x10; op2:x11; op1val:137438953472; op2val:-524289
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 137438953472, -524289, x1, 696, x2)

inst_88:
// rs2_val == -1048577, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:-1048577
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, -1048577, x1, 704, x2)

inst_89:
// rs2_val == -2097153, rs1_val == -1152921504606846977
// opcode: c.or; op1:x10; op2:x11; op1val:-1152921504606846977; op2val:-2097153
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -1152921504606846977, -2097153, x1, 712, x2)

inst_90:
// rs2_val == -4194305, rs1_val == 32768
// opcode: c.or; op1:x10; op2:x11; op1val:32768; op2val:-4194305
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 32768, -4194305, x1, 720, x2)

inst_91:
// rs2_val == -8388609, 
// opcode: c.or; op1:x10; op2:x11; op1val:8; op2val:-8388609
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 8, -8388609, x1, 728, x2)

inst_92:
// rs2_val == -16777217, rs1_val == -2251799813685249
// opcode: c.or; op1:x10; op2:x11; op1val:-2251799813685249; op2val:-16777217
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2251799813685249, -16777217, x1, 736, x2)

inst_93:
// rs2_val == -33554433, rs1_val == -33
// opcode: c.or; op1:x10; op2:x11; op1val:-33; op2val:-33554433
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -33, -33554433, x1, 744, x2)

inst_94:
// rs2_val == -134217729, rs1_val == -4503599627370497
// opcode: c.or; op1:x10; op2:x11; op1val:-4503599627370497; op2val:-134217729
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4503599627370497, -134217729, x1, 752, x2)

inst_95:
// rs2_val == -268435457, 
// opcode: c.or; op1:x10; op2:x11; op1val:-4611686018427387904; op2val:-268435457
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4611686018427387904, -268435457, x1, 760, x2)

inst_96:
// rs2_val == -536870913, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:-536870913
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, -536870913, x1, 768, x2)

inst_97:
// rs2_val == -1073741825, rs1_val == 2305843009213693952
// opcode: c.or; op1:x10; op2:x11; op1val:2305843009213693952; op2val:-1073741825
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2305843009213693952, -1073741825, x1, 776, x2)

inst_98:
// rs2_val == -2147483649, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:-2147483649
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, -2147483649, x1, 784, x2)

inst_99:
// rs2_val == -4294967297, 
// opcode: c.or; op1:x10; op2:x11; op1val:2199023255552; op2val:-4294967297
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2199023255552, -4294967297, x1, 792, x2)

inst_100:
// rs2_val == -8589934593, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:-8589934593
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, -8589934593, x1, 800, x2)

inst_101:
// rs2_val == -17179869185, rs1_val == 268435456
// opcode: c.or; op1:x10; op2:x11; op1val:268435456; op2val:-17179869185
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 268435456, -17179869185, x1, 808, x2)

inst_102:
// rs2_val == -34359738369, rs1_val == 549755813888
// opcode: c.or; op1:x10; op2:x11; op1val:549755813888; op2val:-34359738369
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 549755813888, -34359738369, x1, 816, x2)

inst_103:
// rs2_val == -68719476737, 
// opcode: c.or; op1:x10; op2:x11; op1val:70368744177664; op2val:-68719476737
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 70368744177664, -68719476737, x1, 824, x2)

inst_104:
// rs2_val == -137438953473, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:-137438953473
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, -137438953473, x1, 832, x2)

inst_105:
// rs2_val == -274877906945, 
// opcode: c.or; op1:x10; op2:x11; op1val:128; op2val:-274877906945
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 128, -274877906945, x1, 840, x2)

inst_106:
// rs2_val == -549755813889, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:-549755813889
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, -549755813889, x1, 848, x2)

inst_107:
// rs2_val == -1099511627777, 
// opcode: c.or; op1:x10; op2:x11; op1val:-4097; op2val:-1099511627777
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4097, -1099511627777, x1, 856, x2)

inst_108:
// rs2_val == -2199023255553, rs1_val == -2305843009213693953
// opcode: c.or; op1:x10; op2:x11; op1val:-2305843009213693953; op2val:-2199023255553
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2305843009213693953, -2199023255553, x1, 864, x2)

inst_109:
// rs2_val == -4398046511105, 
// opcode: c.or; op1:x10; op2:x11; op1val:-8388609; op2val:-4398046511105
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8388609, -4398046511105, x1, 872, x2)

inst_110:
// rs2_val == -8796093022209, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:-8796093022209
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, -8796093022209, x1, 880, x2)

inst_111:
// rs2_val == -17592186044417, rs1_val == -2199023255553
// opcode: c.or; op1:x10; op2:x11; op1val:-2199023255553; op2val:-17592186044417
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2199023255553, -17592186044417, x1, 888, x2)

inst_112:
// rs2_val == -35184372088833, 
// opcode: c.or; op1:x10; op2:x11; op1val:-16385; op2val:-35184372088833
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -16385, -35184372088833, x1, 896, x2)

inst_113:
// rs2_val == -70368744177665, 
// opcode: c.or; op1:x10; op2:x11; op1val:-8388609; op2val:-70368744177665
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8388609, -70368744177665, x1, 904, x2)

inst_114:
// rs2_val == -140737488355329, rs1_val == 33554432
// opcode: c.or; op1:x10; op2:x11; op1val:33554432; op2val:-140737488355329
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 33554432, -140737488355329, x1, 912, x2)

inst_115:
// rs2_val == -281474976710657, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:-281474976710657
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, -281474976710657, x1, 920, x2)

inst_116:
// rs2_val == -562949953421313, 
// opcode: c.or; op1:x10; op2:x11; op1val:-524289; op2val:-562949953421313
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -524289, -562949953421313, x1, 928, x2)

inst_117:
// rs2_val == -1125899906842625, rs1_val == -4194305
// opcode: c.or; op1:x10; op2:x11; op1val:-4194305; op2val:-1125899906842625
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4194305, -1125899906842625, x1, 936, x2)

inst_118:
// rs2_val == -2251799813685249, 
// opcode: c.or; op1:x10; op2:x11; op1val:32; op2val:-2251799813685249
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 32, -2251799813685249, x1, 944, x2)

inst_119:
// rs2_val == -4503599627370497, rs1_val == -3
// opcode: c.or; op1:x10; op2:x11; op1val:-3; op2val:-4503599627370497
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3, -4503599627370497, x1, 952, x2)

inst_120:
// rs2_val == -9007199254740993, 
// opcode: c.or; op1:x10; op2:x11; op1val:-2305843009213693953; op2val:-9007199254740993
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2305843009213693953, -9007199254740993, x1, 960, x2)

inst_121:
// rs2_val == -18014398509481985, rs1_val == -257
// opcode: c.or; op1:x10; op2:x11; op1val:-257; op2val:-18014398509481985
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -257, -18014398509481985, x1, 968, x2)

inst_122:
// rs2_val == -36028797018963969, 
// opcode: c.or; op1:x10; op2:x11; op1val:137438953472; op2val:-36028797018963969
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 137438953472, -36028797018963969, x1, 976, x2)

inst_123:
// rs2_val == -72057594037927937, rs1_val == 8589934592
// opcode: c.or; op1:x10; op2:x11; op1val:8589934592; op2val:-72057594037927937
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 8589934592, -72057594037927937, x1, 984, x2)

inst_124:
// rs2_val == -144115188075855873, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:-144115188075855873
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, -144115188075855873, x1, 992, x2)

inst_125:
// rs2_val == -288230376151711745, rs1_val == 65536
// opcode: c.or; op1:x10; op2:x11; op1val:65536; op2val:-288230376151711745
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 65536, -288230376151711745, x1, 1000, x2)

inst_126:
// rs2_val == -576460752303423489, 
// opcode: c.or; op1:x10; op2:x11; op1val:2048; op2val:-576460752303423489
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2048, -576460752303423489, x1, 1008, x2)

inst_127:
// rs2_val == -1152921504606846977, rs1_val == -70368744177665
// opcode: c.or; op1:x10; op2:x11; op1val:-70368744177665; op2val:-1152921504606846977
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -70368744177665, -1152921504606846977, x1, 1016, x2)

inst_128:
// rs2_val == -2305843009213693953, rs1_val == 4
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:-2305843009213693953
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, -2305843009213693953, x1, 1024, x2)

inst_129:
// rs2_val == -4611686018427387905, 
// opcode: c.or; op1:x10; op2:x11; op1val:9; op2val:-4611686018427387905
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 9, -4611686018427387905, x1, 1032, x2)

inst_130:
// rs2_val == 6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-68719476737; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -68719476737, 6148914691236517205, x1, 1040, x2)

inst_131:
// rs2_val == -6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-33; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -33, -6148914691236517206, x1, 1048, x2)

inst_132:
// rs1_val == 2, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:34359738368
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 34359738368, x1, 1056, x2)

inst_133:
// rs1_val == 16, 
// opcode: c.or; op1:x10; op2:x11; op1val:16; op2val:281474976710656
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 16, 281474976710656, x1, 1064, x2)

inst_134:
// rs1_val == 256, 
// opcode: c.or; op1:x10; op2:x11; op1val:256; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 256, 3, x1, 1072, x2)

inst_135:
// rs1_val == 512, 
// opcode: c.or; op1:x10; op2:x11; op1val:512; op2val:-16777217
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 512, -16777217, x1, 1080, x2)

inst_136:
// rs1_val == 1024, 
// opcode: c.or; op1:x10; op2:x11; op1val:1024; op2val:-140737488355329
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 1024, -140737488355329, x1, 1088, x2)

inst_137:
// rs1_val == 4096, 
// opcode: c.or; op1:x10; op2:x11; op1val:4096; op2val:9007199254740992
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4096, 9007199254740992, x1, 1096, x2)

inst_138:
// rs1_val == 8192, 
// opcode: c.or; op1:x10; op2:x11; op1val:8192; op2val:33554432
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 8192, 33554432, x1, 1104, x2)

inst_139:
// rs1_val == 16384, 
// opcode: c.or; op1:x10; op2:x11; op1val:16384; op2val:-72057594037927937
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 16384, -72057594037927937, x1, 1112, x2)

inst_140:
// rs1_val == 262144, 
// opcode: c.or; op1:x10; op2:x11; op1val:262144; op2val:72057594037927936
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 262144, 72057594037927936, x1, 1120, x2)

inst_141:
// rs1_val == 524288, 
// opcode: c.or; op1:x10; op2:x11; op1val:524288; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 524288, 6148914691236517205, x1, 1128, x2)

inst_142:
// rs1_val == 4194304, 
// opcode: c.or; op1:x10; op2:x11; op1val:4194304; op2val:1048576
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4194304, 1048576, x1, 1136, x2)

inst_143:
// rs1_val == 8388608, 
// opcode: c.or; op1:x10; op2:x11; op1val:8388608; op2val:128
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 8388608, 128, x1, 1144, x2)

inst_144:
// rs1_val == 16777216, 
// opcode: c.or; op1:x10; op2:x11; op1val:16777216; op2val:-36028797018963969
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 16777216, -36028797018963969, x1, 1152, x2)

inst_145:
// rs1_val == 67108864, 
// opcode: c.or; op1:x10; op2:x11; op1val:67108864; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 67108864, -3037000498, x1, 1160, x2)

inst_146:
// rs1_val == 134217728, 
// opcode: c.or; op1:x10; op2:x11; op1val:134217728; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 134217728, -6148914691236517206, x1, 1168, x2)

inst_147:
// rs1_val == 536870912, 
// opcode: c.or; op1:x10; op2:x11; op1val:536870912; op2val:-10
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 536870912, -10, x1, 1176, x2)

inst_148:
// rs1_val == 1073741824, 
// opcode: c.or; op1:x10; op2:x11; op1val:1073741824; op2val:1073741824
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 1073741824, 1073741824, x1, 1184, x2)

inst_149:
// rs1_val == 17179869184, 
// opcode: c.or; op1:x10; op2:x11; op1val:17179869184; op2val:1152921504606846976
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 17179869184, 1152921504606846976, x1, 1192, x2)

inst_150:
// rs1_val == 68719476736, 
// opcode: c.or; op1:x10; op2:x11; op1val:68719476736; op2val:-4611686018427387904
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 68719476736, -4611686018427387904, x1, 1200, x2)

inst_151:
// rs1_val == 274877906944, 
// opcode: c.or; op1:x10; op2:x11; op1val:274877906944; op2val:-9
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 274877906944, -9, x1, 1208, x2)

inst_152:
// rs1_val == 562949953421312, 
// opcode: c.or; op1:x10; op2:x11; op1val:562949953421312; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 562949953421312, -6148914691236517206, x1, 1216, x2)

inst_153:
// rs1_val == 1125899906842624, 
// opcode: c.or; op1:x10; op2:x11; op1val:1125899906842624; op2val:-70368744177665
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 1125899906842624, -70368744177665, x1, 1224, x2)

inst_154:
// rs1_val == 9007199254740992, 
// opcode: c.or; op1:x10; op2:x11; op1val:9007199254740992; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 9007199254740992, 0, x1, 1232, x2)

inst_155:
// rs1_val == 36028797018963968, 
// opcode: c.or; op1:x10; op2:x11; op1val:36028797018963968; op2val:1125899906842624
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 36028797018963968, 1125899906842624, x1, 1240, x2)

inst_156:
// rs1_val == 72057594037927936, 
// opcode: c.or; op1:x10; op2:x11; op1val:72057594037927936; op2val:-17
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 72057594037927936, -17, x1, 1248, x2)

inst_157:
// rs1_val == 144115188075855872, 
// opcode: c.or; op1:x10; op2:x11; op1val:144115188075855872; op2val:7
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 144115188075855872, 7, x1, 1256, x2)

inst_158:
// rs1_val == 576460752303423488, 
// opcode: c.or; op1:x10; op2:x11; op1val:576460752303423488; op2val:274877906944
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 576460752303423488, 274877906944, x1, 1264, x2)

inst_159:
// rs1_val == 4611686018427387904, 
// opcode: c.or; op1:x10; op2:x11; op1val:4611686018427387904; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4611686018427387904, -3037000499, x1, 1272, x2)

inst_160:
// rs1_val == -2, 
// opcode: c.or; op1:x10; op2:x11; op1val:-2; op2val:-34359738369
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2, -34359738369, x1, 1280, x2)

inst_161:
// rs1_val == -5, 
// opcode: c.or; op1:x10; op2:x11; op1val:-5; op2val:134217728
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -5, 134217728, x1, 1288, x2)

inst_162:
// rs1_val == -9, 
// opcode: c.or; op1:x10; op2:x11; op1val:-9; op2val:-2147483649
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -9, -2147483649, x1, 1296, x2)

inst_163:
// rs1_val == -65, 
// opcode: c.or; op1:x10; op2:x11; op1val:-65; op2val:140737488355328
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -65, 140737488355328, x1, 1304, x2)

inst_164:
// rs1_val == -513, 
// opcode: c.or; op1:x10; op2:x11; op1val:-513; op2val:-72057594037927937
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -513, -72057594037927937, x1, 1312, x2)

inst_165:
// rs1_val == -1025, 
// opcode: c.or; op1:x10; op2:x11; op1val:-1025; op2val:-6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -1025, -6, x1, 1320, x2)

inst_166:
// rs1_val == -2049, 
// opcode: c.or; op1:x10; op2:x11; op1val:-2049; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2049, 3037000500, x1, 1328, x2)

inst_167:
// rs1_val == -8193, 
// opcode: c.or; op1:x10; op2:x11; op1val:-8193; op2val:549755813888
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8193, 549755813888, x1, 1336, x2)

inst_168:
// rs1_val == -32769, 
// opcode: c.or; op1:x10; op2:x11; op1val:-32769; op2val:8192
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -32769, 8192, x1, 1344, x2)

inst_169:
// rs1_val == -65537, 
// opcode: c.or; op1:x10; op2:x11; op1val:-65537; op2val:1073741824
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -65537, 1073741824, x1, 1352, x2)

inst_170:
// rs1_val == -1048577, 
// opcode: c.or; op1:x10; op2:x11; op1val:-1048577; op2val:-16777217
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -1048577, -16777217, x1, 1360, x2)

inst_171:
// rs1_val == -2097153, 
// opcode: c.or; op1:x10; op2:x11; op1val:-2097153; op2val:274877906944
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2097153, 274877906944, x1, 1368, x2)

inst_172:
// rs1_val == -16777217, 
// opcode: c.or; op1:x10; op2:x11; op1val:-16777217; op2val:562949953421312
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -16777217, 562949953421312, x1, 1376, x2)

inst_173:
// rs1_val == -67108865, 
// opcode: c.or; op1:x10; op2:x11; op1val:-67108865; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -67108865, 5, x1, 1384, x2)

inst_174:
// rs1_val == -134217729, 
// opcode: c.or; op1:x10; op2:x11; op1val:-134217729; op2val:-65
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -134217729, -65, x1, 1392, x2)

inst_175:
// rs1_val == -268435457, 
// opcode: c.or; op1:x10; op2:x11; op1val:-268435457; op2val:-33554433
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -268435457, -33554433, x1, 1400, x2)

inst_176:
// rs1_val == -1073741825, 
// opcode: c.or; op1:x10; op2:x11; op1val:-1073741825; op2val:549755813888
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -1073741825, 549755813888, x1, 1408, x2)

inst_177:
// rs1_val == -2147483649, 
// opcode: c.or; op1:x10; op2:x11; op1val:-2147483649; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -2147483649, 4, x1, 1416, x2)

inst_178:
// rs1_val == -4294967297, 
// opcode: c.or; op1:x10; op2:x11; op1val:-4294967297; op2val:-70368744177665
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4294967297, -70368744177665, x1, 1424, x2)

inst_179:
// rs1_val == -17179869185, 
// opcode: c.or; op1:x10; op2:x11; op1val:-17179869185; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -17179869185, 6148914691236517206, x1, 1432, x2)

inst_180:
// rs1_val == -34359738369, 
// opcode: c.or; op1:x10; op2:x11; op1val:-34359738369; op2val:4194304
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -34359738369, 4194304, x1, 1440, x2)

inst_181:
// rs1_val == -137438953473, 
// opcode: c.or; op1:x10; op2:x11; op1val:-137438953473; op2val:2048
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -137438953473, 2048, x1, 1448, x2)

inst_182:
// rs1_val == -274877906945, 
// opcode: c.or; op1:x10; op2:x11; op1val:-274877906945; op2val:72057594037927936
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -274877906945, 72057594037927936, x1, 1456, x2)

inst_183:
// rs1_val == -4398046511105, 
// opcode: c.or; op1:x10; op2:x11; op1val:-4398046511105; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -4398046511105, 5, x1, 1464, x2)

inst_184:
// rs1_val == -8796093022209, 
// opcode: c.or; op1:x10; op2:x11; op1val:-8796093022209; op2val:70368744177664
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -8796093022209, 70368744177664, x1, 1472, x2)

inst_185:
// rs1_val == -35184372088833, 
// opcode: c.or; op1:x10; op2:x11; op1val:-35184372088833; op2val:-2251799813685249
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -35184372088833, -2251799813685249, x1, 1480, x2)

inst_186:
// rs1_val == -140737488355329, 
// opcode: c.or; op1:x10; op2:x11; op1val:-140737488355329; op2val:524288
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -140737488355329, 524288, x1, 1488, x2)

inst_187:
// rs1_val == -281474976710657, 
// opcode: c.or; op1:x10; op2:x11; op1val:-281474976710657; op2val:576460752303423488
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -281474976710657, 576460752303423488, x1, 1496, x2)

inst_188:
// rs1_val == -1125899906842625, 
// opcode: c.or; op1:x10; op2:x11; op1val:-1125899906842625; op2val:2048
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -1125899906842625, 2048, x1, 1504, x2)

inst_189:
// rs1_val == -576460752303423489, 
// opcode: c.or; op1:x10; op2:x11; op1val:-576460752303423489; op2val:-257
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -576460752303423489, -257, x1, 1512, x2)

inst_190:
// rs1_val == -6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:2097152
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 2097152, x1, 1520, x2)

inst_191:
// rs1_val==3 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 3, x1, 1528, x2)

inst_192:
// rs1_val==3 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 6148914691236517205, x1, 1536, x2)

inst_193:
// rs1_val==3 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, -6148914691236517206, x1, 1544, x2)

inst_194:
// rs1_val==3 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 5, x1, 1552, x2)

inst_195:
// rs1_val==3 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 3689348814741910323, x1, 1560, x2)

inst_196:
// rs1_val==3 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 7378697629483820646, x1, 1568, x2)

inst_197:
// rs1_val==3 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, -3037000499, x1, 1576, x2)

inst_198:
// rs1_val==3 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 3037000499, x1, 1584, x2)

inst_199:
// rs1_val==3 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 2, x1, 1592, x2)

inst_200:
// rs1_val==3 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 6148914691236517204, x1, 1600, x2)

inst_201:
// rs1_val==3 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 0, x1, 1608, x2)

inst_202:
// rs1_val==3 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 4, x1, 1616, x2)

inst_203:
// rs1_val==3 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 3689348814741910322, x1, 1624, x2)

inst_204:
// rs1_val==3 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 7378697629483820645, x1, 1632, x2)

inst_205:
// rs1_val==3 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 3037000498, x1, 1640, x2)

inst_206:
// rs1_val==3 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 6148914691236517206, x1, 1648, x2)

inst_207:
// rs1_val==3 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, -6148914691236517205, x1, 1656, x2)

inst_208:
// rs1_val==3 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 6, x1, 1664, x2)

inst_209:
// rs1_val==3 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 3689348814741910324, x1, 1672, x2)

inst_210:
// rs1_val==3 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 7378697629483820647, x1, 1680, x2)

inst_211:
// rs1_val==3 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, -3037000498, x1, 1688, x2)

inst_212:
// rs1_val==3 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:3; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3, 3037000500, x1, 1696, x2)

inst_213:
// rs1_val==6148914691236517205 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 3, x1, 1704, x2)

inst_214:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 6148914691236517205, x1, 1712, x2)

inst_215:
// rs1_val==6148914691236517205 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, -6148914691236517206, x1, 1720, x2)

inst_216:
// rs1_val==6148914691236517205 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 5, x1, 1728, x2)

inst_217:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 3689348814741910323, x1, 1736, x2)

inst_218:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 7378697629483820646, x1, 1744, x2)

inst_219:
// rs1_val==6148914691236517205 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, -3037000499, x1, 1752, x2)

inst_220:
// rs1_val==6148914691236517205 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 3037000499, x1, 1760, x2)

inst_221:
// rs1_val==6148914691236517205 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 2, x1, 1768, x2)

inst_222:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 6148914691236517204, x1, 1776, x2)

inst_223:
// rs1_val==6148914691236517205 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 0, x1, 1784, x2)

inst_224:
// rs1_val==6148914691236517205 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 4, x1, 1792, x2)

inst_225:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 3689348814741910322, x1, 1800, x2)

inst_226:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 7378697629483820645, x1, 1808, x2)

inst_227:
// rs1_val==6148914691236517205 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 3037000498, x1, 1816, x2)

inst_228:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 6148914691236517206, x1, 1824, x2)

inst_229:
// rs1_val==6148914691236517205 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, -6148914691236517205, x1, 1832, x2)

inst_230:
// rs1_val==6148914691236517205 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 6, x1, 1840, x2)

inst_231:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 3689348814741910324, x1, 1848, x2)

inst_232:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 7378697629483820647, x1, 1856, x2)

inst_233:
// rs1_val==6148914691236517205 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, -3037000498, x1, 1864, x2)

inst_234:
// rs1_val==6148914691236517205 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517205; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517205, 3037000500, x1, 1872, x2)

inst_235:
// rs1_val==-6148914691236517206 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 3, x1, 1880, x2)

inst_236:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 6148914691236517205, x1, 1888, x2)

inst_237:
// rs1_val==-6148914691236517206 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, -6148914691236517206, x1, 1896, x2)

inst_238:
// rs1_val==-6148914691236517206 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 5, x1, 1904, x2)

inst_239:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 3689348814741910323, x1, 1912, x2)

inst_240:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 7378697629483820646, x1, 1920, x2)

inst_241:
// rs1_val==-6148914691236517206 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, -3037000499, x1, 1928, x2)

inst_242:
// rs1_val==-6148914691236517206 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 3037000499, x1, 1936, x2)

inst_243:
// rs1_val==-6148914691236517206 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 2, x1, 1944, x2)

inst_244:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 6148914691236517204, x1, 1952, x2)

inst_245:
// rs1_val==-6148914691236517206 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 0, x1, 1960, x2)

inst_246:
// rs1_val==-6148914691236517206 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 4, x1, 1968, x2)

inst_247:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 3689348814741910322, x1, 1976, x2)

inst_248:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 7378697629483820645, x1, 1984, x2)

inst_249:
// rs1_val==-6148914691236517206 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 3037000498, x1, 1992, x2)

inst_250:
// rs1_val==-6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 6148914691236517206, x1, 2000, x2)

inst_251:
// rs1_val==-6148914691236517206 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, -6148914691236517205, x1, 2008, x2)

inst_252:
// rs1_val==-6148914691236517206 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 6, x1, 2016, x2)

inst_253:
// rs1_val==-6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 3689348814741910324, x1, 2024, x2)

inst_254:
// rs1_val==-6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 7378697629483820647, x1, 2032, x2)

inst_255:
// rs1_val==-6148914691236517206 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, -3037000498, x1, 2040, x2)
RVTEST_SIGBASE( x1,signature_x1_2)

inst_256:
// rs1_val==-6148914691236517206 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517206; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517206, 3037000500, x1, 0, x2)

inst_257:
// rs1_val==5 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 3, x1, 8, x2)

inst_258:
// rs1_val==5 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 6148914691236517205, x1, 16, x2)

inst_259:
// rs1_val==5 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, -6148914691236517206, x1, 24, x2)

inst_260:
// rs1_val==5 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 5, x1, 32, x2)

inst_261:
// rs1_val==5 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 3689348814741910323, x1, 40, x2)

inst_262:
// rs1_val==5 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 7378697629483820646, x1, 48, x2)

inst_263:
// rs1_val==5 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, -3037000499, x1, 56, x2)

inst_264:
// rs1_val==5 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 3037000499, x1, 64, x2)

inst_265:
// rs1_val==5 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 2, x1, 72, x2)

inst_266:
// rs1_val==5 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 6148914691236517204, x1, 80, x2)

inst_267:
// rs1_val==5 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 0, x1, 88, x2)

inst_268:
// rs1_val==5 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 4, x1, 96, x2)

inst_269:
// rs1_val==5 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 3689348814741910322, x1, 104, x2)

inst_270:
// rs1_val==5 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 7378697629483820645, x1, 112, x2)

inst_271:
// rs1_val==5 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 3037000498, x1, 120, x2)

inst_272:
// rs1_val==5 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 6148914691236517206, x1, 128, x2)

inst_273:
// rs1_val==5 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, -6148914691236517205, x1, 136, x2)

inst_274:
// rs1_val==5 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 6, x1, 144, x2)

inst_275:
// rs1_val==5 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 3689348814741910324, x1, 152, x2)

inst_276:
// rs1_val==5 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 7378697629483820647, x1, 160, x2)

inst_277:
// rs1_val==5 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, -3037000498, x1, 168, x2)

inst_278:
// rs1_val==5 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:5; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 5, 3037000500, x1, 176, x2)

inst_279:
// rs1_val==3689348814741910323 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 3, x1, 184, x2)

inst_280:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 6148914691236517205, x1, 192, x2)

inst_281:
// rs1_val==3689348814741910323 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, -6148914691236517206, x1, 200, x2)

inst_282:
// rs1_val==3689348814741910323 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 5, x1, 208, x2)

inst_283:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 3689348814741910323, x1, 216, x2)

inst_284:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 7378697629483820646, x1, 224, x2)

inst_285:
// rs1_val==3689348814741910323 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, -3037000499, x1, 232, x2)

inst_286:
// rs1_val==3689348814741910323 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 3037000499, x1, 240, x2)

inst_287:
// rs1_val==3689348814741910323 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 2, x1, 248, x2)

inst_288:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 6148914691236517204, x1, 256, x2)

inst_289:
// rs1_val==3689348814741910323 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 0, x1, 264, x2)

inst_290:
// rs1_val==3689348814741910323 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 4, x1, 272, x2)

inst_291:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 3689348814741910322, x1, 280, x2)

inst_292:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 7378697629483820645, x1, 288, x2)

inst_293:
// rs1_val==3689348814741910323 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 3037000498, x1, 296, x2)

inst_294:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 6148914691236517206, x1, 304, x2)

inst_295:
// rs1_val==3689348814741910323 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, -6148914691236517205, x1, 312, x2)

inst_296:
// rs1_val==3689348814741910323 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 6, x1, 320, x2)

inst_297:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 3689348814741910324, x1, 328, x2)

inst_298:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 7378697629483820647, x1, 336, x2)

inst_299:
// rs1_val==3689348814741910323 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, -3037000498, x1, 344, x2)

inst_300:
// rs1_val==3689348814741910323 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910323; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910323, 3037000500, x1, 352, x2)

inst_301:
// rs1_val==7378697629483820646 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 3, x1, 360, x2)

inst_302:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 6148914691236517205, x1, 368, x2)

inst_303:
// rs1_val==7378697629483820646 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, -6148914691236517206, x1, 376, x2)

inst_304:
// rs1_val==7378697629483820646 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 5, x1, 384, x2)

inst_305:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 3689348814741910323, x1, 392, x2)

inst_306:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 7378697629483820646, x1, 400, x2)

inst_307:
// rs1_val==7378697629483820646 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, -3037000499, x1, 408, x2)

inst_308:
// rs1_val==7378697629483820646 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 3037000499, x1, 416, x2)

inst_309:
// rs1_val==7378697629483820646 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 2, x1, 424, x2)

inst_310:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 6148914691236517204, x1, 432, x2)

inst_311:
// rs1_val==7378697629483820646 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 0, x1, 440, x2)

inst_312:
// rs1_val==7378697629483820646 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 4, x1, 448, x2)

inst_313:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 3689348814741910322, x1, 456, x2)

inst_314:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 7378697629483820645, x1, 464, x2)

inst_315:
// rs1_val==7378697629483820646 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 3037000498, x1, 472, x2)

inst_316:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 6148914691236517206, x1, 480, x2)

inst_317:
// rs1_val==7378697629483820646 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, -6148914691236517205, x1, 488, x2)

inst_318:
// rs1_val==7378697629483820646 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 6, x1, 496, x2)

inst_319:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 3689348814741910324, x1, 504, x2)

inst_320:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 7378697629483820647, x1, 512, x2)

inst_321:
// rs1_val==7378697629483820646 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, -3037000498, x1, 520, x2)

inst_322:
// rs1_val==7378697629483820646 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820646; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820646, 3037000500, x1, 528, x2)

inst_323:
// rs1_val==-3037000499 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 3, x1, 536, x2)

inst_324:
// rs1_val==-3037000499 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 6148914691236517205, x1, 544, x2)

inst_325:
// rs1_val==-3037000499 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, -6148914691236517206, x1, 552, x2)

inst_326:
// rs1_val==-3037000499 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 5, x1, 560, x2)

inst_327:
// rs1_val==-3037000499 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 3689348814741910323, x1, 568, x2)

inst_328:
// rs1_val==-3037000499 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 7378697629483820646, x1, 576, x2)

inst_329:
// rs1_val==-3037000499 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, -3037000499, x1, 584, x2)

inst_330:
// rs1_val==-3037000499 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 3037000499, x1, 592, x2)

inst_331:
// rs1_val==-3037000499 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 2, x1, 600, x2)

inst_332:
// rs1_val==-3037000499 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 6148914691236517204, x1, 608, x2)

inst_333:
// rs1_val==-3037000499 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 0, x1, 616, x2)

inst_334:
// rs1_val==-3037000499 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 4, x1, 624, x2)

inst_335:
// rs1_val==-3037000499 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 3689348814741910322, x1, 632, x2)

inst_336:
// rs1_val==-3037000499 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 7378697629483820645, x1, 640, x2)

inst_337:
// rs1_val==-3037000499 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 3037000498, x1, 648, x2)

inst_338:
// rs1_val==-3037000499 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 6148914691236517206, x1, 656, x2)

inst_339:
// rs1_val==-3037000499 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, -6148914691236517205, x1, 664, x2)

inst_340:
// rs1_val==-3037000499 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 6, x1, 672, x2)

inst_341:
// rs1_val==-3037000499 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 3689348814741910324, x1, 680, x2)

inst_342:
// rs1_val==-3037000499 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 7378697629483820647, x1, 688, x2)

inst_343:
// rs1_val==-3037000499 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, -3037000498, x1, 696, x2)

inst_344:
// rs1_val==-3037000499 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000499; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000499, 3037000500, x1, 704, x2)

inst_345:
// rs1_val==3037000499 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 3, x1, 712, x2)

inst_346:
// rs1_val==3037000499 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 6148914691236517205, x1, 720, x2)

inst_347:
// rs1_val==3037000499 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, -6148914691236517206, x1, 728, x2)

inst_348:
// rs1_val==3037000499 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 5, x1, 736, x2)

inst_349:
// rs1_val==3037000499 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 3689348814741910323, x1, 744, x2)

inst_350:
// rs1_val==3037000499 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 7378697629483820646, x1, 752, x2)

inst_351:
// rs1_val==3037000499 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, -3037000499, x1, 760, x2)

inst_352:
// rs1_val==3037000499 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 3037000499, x1, 768, x2)

inst_353:
// rs1_val==3037000499 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 2, x1, 776, x2)

inst_354:
// rs1_val==3037000499 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 6148914691236517204, x1, 784, x2)

inst_355:
// rs1_val==3037000499 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 0, x1, 792, x2)

inst_356:
// rs1_val==3037000499 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 4, x1, 800, x2)

inst_357:
// rs1_val==3037000499 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 3689348814741910322, x1, 808, x2)

inst_358:
// rs1_val==3037000499 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 7378697629483820645, x1, 816, x2)

inst_359:
// rs1_val==3037000499 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 3037000498, x1, 824, x2)

inst_360:
// rs1_val==3037000499 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 6148914691236517206, x1, 832, x2)

inst_361:
// rs1_val==3037000499 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, -6148914691236517205, x1, 840, x2)

inst_362:
// rs1_val==3037000499 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 6, x1, 848, x2)

inst_363:
// rs1_val==3037000499 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 3689348814741910324, x1, 856, x2)

inst_364:
// rs1_val==3037000499 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 7378697629483820647, x1, 864, x2)

inst_365:
// rs1_val==3037000499 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, -3037000498, x1, 872, x2)

inst_366:
// rs1_val==3037000499 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000499; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000499, 3037000500, x1, 880, x2)

inst_367:
// rs1_val==2 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 3, x1, 888, x2)

inst_368:
// rs1_val==2 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 6148914691236517205, x1, 896, x2)

inst_369:
// rs1_val==2 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, -6148914691236517206, x1, 904, x2)

inst_370:
// rs1_val==2 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 5, x1, 912, x2)

inst_371:
// rs1_val==2 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 3689348814741910323, x1, 920, x2)

inst_372:
// rs1_val==2 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 7378697629483820646, x1, 928, x2)

inst_373:
// rs1_val==2 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, -3037000499, x1, 936, x2)

inst_374:
// rs1_val==2 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 3037000499, x1, 944, x2)

inst_375:
// rs1_val==2 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 2, x1, 952, x2)

inst_376:
// rs1_val==2 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 6148914691236517204, x1, 960, x2)

inst_377:
// rs1_val==2 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 0, x1, 968, x2)

inst_378:
// rs1_val==2 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 4, x1, 976, x2)

inst_379:
// rs1_val==2 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 3689348814741910322, x1, 984, x2)

inst_380:
// rs1_val==2 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 7378697629483820645, x1, 992, x2)

inst_381:
// rs1_val==2 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 3037000498, x1, 1000, x2)

inst_382:
// rs1_val==2 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 6148914691236517206, x1, 1008, x2)

inst_383:
// rs1_val==2 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, -6148914691236517205, x1, 1016, x2)

inst_384:
// rs1_val==2 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 6, x1, 1024, x2)

inst_385:
// rs1_val==2 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 3689348814741910324, x1, 1032, x2)

inst_386:
// rs1_val==2 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 7378697629483820647, x1, 1040, x2)

inst_387:
// rs1_val==2 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, -3037000498, x1, 1048, x2)

inst_388:
// rs1_val==2 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:2; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 2, 3037000500, x1, 1056, x2)

inst_389:
// rs1_val==6148914691236517204 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 3, x1, 1064, x2)

inst_390:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 6148914691236517205, x1, 1072, x2)

inst_391:
// rs1_val==6148914691236517204 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, -6148914691236517206, x1, 1080, x2)

inst_392:
// rs1_val==6148914691236517204 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 5, x1, 1088, x2)

inst_393:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 3689348814741910323, x1, 1096, x2)

inst_394:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 7378697629483820646, x1, 1104, x2)

inst_395:
// rs1_val==6148914691236517204 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, -3037000499, x1, 1112, x2)

inst_396:
// rs1_val==6148914691236517204 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 3037000499, x1, 1120, x2)

inst_397:
// rs1_val==6148914691236517204 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 2, x1, 1128, x2)

inst_398:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 6148914691236517204, x1, 1136, x2)

inst_399:
// rs1_val==6148914691236517204 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 0, x1, 1144, x2)

inst_400:
// rs1_val==6148914691236517204 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 4, x1, 1152, x2)

inst_401:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 3689348814741910322, x1, 1160, x2)

inst_402:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 7378697629483820645, x1, 1168, x2)

inst_403:
// rs1_val==6148914691236517204 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 3037000498, x1, 1176, x2)

inst_404:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 6148914691236517206, x1, 1184, x2)

inst_405:
// rs1_val==6148914691236517204 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, -6148914691236517205, x1, 1192, x2)

inst_406:
// rs1_val==6148914691236517204 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 6, x1, 1200, x2)

inst_407:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 3689348814741910324, x1, 1208, x2)

inst_408:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 7378697629483820647, x1, 1216, x2)

inst_409:
// rs1_val==6148914691236517204 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, -3037000498, x1, 1224, x2)

inst_410:
// rs1_val==6148914691236517204 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517204; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517204, 3037000500, x1, 1232, x2)

inst_411:
// rs1_val==0 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 3, x1, 1240, x2)

inst_412:
// rs1_val==0 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 6148914691236517205, x1, 1248, x2)

inst_413:
// rs1_val==0 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, -6148914691236517206, x1, 1256, x2)

inst_414:
// rs1_val==0 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 5, x1, 1264, x2)

inst_415:
// rs1_val==0 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 3689348814741910323, x1, 1272, x2)

inst_416:
// rs1_val==0 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 7378697629483820646, x1, 1280, x2)

inst_417:
// rs1_val==0 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, -3037000499, x1, 1288, x2)

inst_418:
// rs1_val==0 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 3037000499, x1, 1296, x2)

inst_419:
// rs1_val==0 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 2, x1, 1304, x2)

inst_420:
// rs1_val==4 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, -6148914691236517206, x1, 1312, x2)

inst_421:
// rs1_val==4 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 5, x1, 1320, x2)

inst_422:
// rs1_val==4 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 3689348814741910323, x1, 1328, x2)

inst_423:
// rs1_val==4 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 7378697629483820646, x1, 1336, x2)

inst_424:
// rs1_val==4 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, -3037000499, x1, 1344, x2)

inst_425:
// rs1_val==4 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 3037000499, x1, 1352, x2)

inst_426:
// rs1_val==4 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 2, x1, 1360, x2)

inst_427:
// rs1_val==4 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 6148914691236517204, x1, 1368, x2)

inst_428:
// rs1_val==4 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 0, x1, 1376, x2)

inst_429:
// rs1_val==4 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 4, x1, 1384, x2)

inst_430:
// rs1_val==4 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 3689348814741910322, x1, 1392, x2)

inst_431:
// rs1_val==4 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 7378697629483820645, x1, 1400, x2)

inst_432:
// rs1_val==4 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 3037000498, x1, 1408, x2)

inst_433:
// rs1_val==4 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 6148914691236517206, x1, 1416, x2)

inst_434:
// rs1_val==4 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, -6148914691236517205, x1, 1424, x2)

inst_435:
// rs1_val==4 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 6, x1, 1432, x2)

inst_436:
// rs1_val==4 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 3689348814741910324, x1, 1440, x2)

inst_437:
// rs1_val==4 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 7378697629483820647, x1, 1448, x2)

inst_438:
// rs1_val==4 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, -3037000498, x1, 1456, x2)

inst_439:
// rs1_val==4 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 3037000500, x1, 1464, x2)

inst_440:
// rs1_val==3689348814741910322 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 3, x1, 1472, x2)

inst_441:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 6148914691236517205, x1, 1480, x2)

inst_442:
// rs1_val==3689348814741910322 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, -6148914691236517206, x1, 1488, x2)

inst_443:
// rs1_val==3689348814741910322 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 5, x1, 1496, x2)

inst_444:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 3689348814741910323, x1, 1504, x2)

inst_445:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 7378697629483820646, x1, 1512, x2)

inst_446:
// rs1_val==3689348814741910322 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, -3037000499, x1, 1520, x2)

inst_447:
// rs1_val==3689348814741910322 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 3037000499, x1, 1528, x2)

inst_448:
// rs1_val==3689348814741910322 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 2, x1, 1536, x2)

inst_449:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 6148914691236517204, x1, 1544, x2)

inst_450:
// rs1_val==3689348814741910322 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 0, x1, 1552, x2)

inst_451:
// rs1_val==3689348814741910322 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 4, x1, 1560, x2)

inst_452:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 3689348814741910322, x1, 1568, x2)

inst_453:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 7378697629483820645, x1, 1576, x2)

inst_454:
// rs1_val==3689348814741910322 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 3037000498, x1, 1584, x2)

inst_455:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 6148914691236517206, x1, 1592, x2)

inst_456:
// rs1_val==3689348814741910322 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, -6148914691236517205, x1, 1600, x2)

inst_457:
// rs1_val==3689348814741910322 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 6, x1, 1608, x2)

inst_458:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 3689348814741910324, x1, 1616, x2)

inst_459:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 7378697629483820647, x1, 1624, x2)

inst_460:
// rs1_val==3689348814741910322 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, -3037000498, x1, 1632, x2)

inst_461:
// rs1_val==3689348814741910322 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910322; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910322, 3037000500, x1, 1640, x2)

inst_462:
// rs1_val==7378697629483820645 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 3, x1, 1648, x2)

inst_463:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 6148914691236517205, x1, 1656, x2)

inst_464:
// rs1_val==7378697629483820645 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, -6148914691236517206, x1, 1664, x2)

inst_465:
// rs1_val==7378697629483820645 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 5, x1, 1672, x2)

inst_466:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 3689348814741910323, x1, 1680, x2)

inst_467:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 7378697629483820646, x1, 1688, x2)

inst_468:
// rs1_val==7378697629483820645 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, -3037000499, x1, 1696, x2)

inst_469:
// rs1_val==7378697629483820645 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 3037000499, x1, 1704, x2)

inst_470:
// rs1_val==7378697629483820645 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 2, x1, 1712, x2)

inst_471:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 6148914691236517204, x1, 1720, x2)

inst_472:
// rs1_val==7378697629483820645 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 0, x1, 1728, x2)

inst_473:
// rs1_val==7378697629483820645 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 4, x1, 1736, x2)

inst_474:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 3689348814741910322, x1, 1744, x2)

inst_475:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 7378697629483820645, x1, 1752, x2)

inst_476:
// rs1_val==7378697629483820645 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 3037000498, x1, 1760, x2)

inst_477:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 6148914691236517206, x1, 1768, x2)

inst_478:
// rs1_val==7378697629483820645 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, -6148914691236517205, x1, 1776, x2)

inst_479:
// rs1_val==7378697629483820645 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 6, x1, 1784, x2)

inst_480:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 3689348814741910324, x1, 1792, x2)

inst_481:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 7378697629483820647, x1, 1800, x2)

inst_482:
// rs1_val==7378697629483820645 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, -3037000498, x1, 1808, x2)

inst_483:
// rs1_val==7378697629483820645 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820645; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820645, 3037000500, x1, 1816, x2)

inst_484:
// rs1_val==3037000498 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 3, x1, 1824, x2)

inst_485:
// rs1_val==3037000498 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 6148914691236517205, x1, 1832, x2)

inst_486:
// rs1_val==3037000498 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, -6148914691236517206, x1, 1840, x2)

inst_487:
// rs1_val==3037000498 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 5, x1, 1848, x2)

inst_488:
// rs1_val==3037000498 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 3689348814741910323, x1, 1856, x2)

inst_489:
// rs1_val==3037000498 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 7378697629483820646, x1, 1864, x2)

inst_490:
// rs1_val==3037000498 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, -3037000499, x1, 1872, x2)

inst_491:
// rs1_val==3037000498 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 3037000499, x1, 1880, x2)

inst_492:
// rs1_val==3037000498 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 2, x1, 1888, x2)

inst_493:
// rs1_val==3037000498 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 6148914691236517204, x1, 1896, x2)

inst_494:
// rs1_val==3037000498 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 0, x1, 1904, x2)

inst_495:
// rs1_val==3037000498 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 4, x1, 1912, x2)

inst_496:
// rs1_val==3037000498 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 3689348814741910322, x1, 1920, x2)

inst_497:
// rs1_val==3037000498 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 7378697629483820645, x1, 1928, x2)

inst_498:
// rs1_val==3037000498 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 3037000498, x1, 1936, x2)

inst_499:
// rs1_val==3037000498 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 6148914691236517206, x1, 1944, x2)

inst_500:
// rs1_val==3037000498 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, -6148914691236517205, x1, 1952, x2)

inst_501:
// rs1_val==3037000498 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 6, x1, 1960, x2)

inst_502:
// rs1_val==3037000498 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 3689348814741910324, x1, 1968, x2)

inst_503:
// rs1_val==3037000498 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 7378697629483820647, x1, 1976, x2)

inst_504:
// rs1_val==3037000498 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, -3037000498, x1, 1984, x2)

inst_505:
// rs1_val==3037000498 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000498; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000498, 3037000500, x1, 1992, x2)

inst_506:
// rs1_val==6148914691236517206 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 3, x1, 2000, x2)

inst_507:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 6148914691236517205, x1, 2008, x2)

inst_508:
// rs1_val==6148914691236517206 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, -6148914691236517206, x1, 2016, x2)

inst_509:
// rs1_val==6148914691236517206 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 5, x1, 2024, x2)

inst_510:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 3689348814741910323, x1, 2032, x2)

inst_511:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 7378697629483820646, x1, 2040, x2)
RVTEST_SIGBASE( x1,signature_x1_3)

inst_512:
// rs1_val==6148914691236517206 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, -3037000499, x1, 0, x2)

inst_513:
// rs1_val==6148914691236517206 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 3037000499, x1, 8, x2)

inst_514:
// rs1_val==6148914691236517206 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 2, x1, 16, x2)

inst_515:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 6148914691236517204, x1, 24, x2)

inst_516:
// rs1_val==6148914691236517206 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 0, x1, 32, x2)

inst_517:
// rs1_val==6148914691236517206 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 4, x1, 40, x2)

inst_518:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 3689348814741910322, x1, 48, x2)

inst_519:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 7378697629483820645, x1, 56, x2)

inst_520:
// rs1_val==6148914691236517206 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 3037000498, x1, 64, x2)

inst_521:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 6148914691236517206, x1, 72, x2)

inst_522:
// rs1_val==6148914691236517206 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, -6148914691236517205, x1, 80, x2)

inst_523:
// rs1_val==6148914691236517206 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 6, x1, 88, x2)

inst_524:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 3689348814741910324, x1, 96, x2)

inst_525:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 7378697629483820647, x1, 104, x2)

inst_526:
// rs1_val==6148914691236517206 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, -3037000498, x1, 112, x2)

inst_527:
// rs1_val==6148914691236517206 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:6148914691236517206; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6148914691236517206, 3037000500, x1, 120, x2)

inst_528:
// rs1_val==-6148914691236517205 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 3, x1, 128, x2)

inst_529:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 6148914691236517205, x1, 136, x2)

inst_530:
// rs1_val==-6148914691236517205 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, -6148914691236517206, x1, 144, x2)

inst_531:
// rs1_val==-6148914691236517205 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 5, x1, 152, x2)

inst_532:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 3689348814741910323, x1, 160, x2)

inst_533:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 7378697629483820646, x1, 168, x2)

inst_534:
// rs1_val==-6148914691236517205 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, -3037000499, x1, 176, x2)

inst_535:
// rs1_val==-6148914691236517205 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 3037000499, x1, 184, x2)

inst_536:
// rs1_val==-6148914691236517205 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 2, x1, 192, x2)

inst_537:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 6148914691236517204, x1, 200, x2)

inst_538:
// rs1_val==-6148914691236517205 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 0, x1, 208, x2)

inst_539:
// rs1_val==-6148914691236517205 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 4, x1, 216, x2)

inst_540:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 3689348814741910322, x1, 224, x2)

inst_541:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 7378697629483820645, x1, 232, x2)

inst_542:
// rs1_val==-6148914691236517205 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 3037000498, x1, 240, x2)

inst_543:
// rs1_val==-6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 6148914691236517206, x1, 248, x2)

inst_544:
// rs1_val==-6148914691236517205 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, -6148914691236517205, x1, 256, x2)

inst_545:
// rs1_val==-6148914691236517205 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 6, x1, 264, x2)

inst_546:
// rs1_val==-6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 3689348814741910324, x1, 272, x2)

inst_547:
// rs1_val==-6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 7378697629483820647, x1, 280, x2)

inst_548:
// rs1_val==-6148914691236517205 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, -3037000498, x1, 288, x2)

inst_549:
// rs1_val==-6148914691236517205 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:-6148914691236517205; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -6148914691236517205, 3037000500, x1, 296, x2)

inst_550:
// rs1_val==6 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 3, x1, 304, x2)

inst_551:
// rs1_val==6 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 6148914691236517205, x1, 312, x2)

inst_552:
// rs1_val==6 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, -6148914691236517206, x1, 320, x2)

inst_553:
// rs1_val==6 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 5, x1, 328, x2)

inst_554:
// rs1_val==6 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 3689348814741910323, x1, 336, x2)

inst_555:
// rs1_val==6 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 7378697629483820646, x1, 344, x2)

inst_556:
// rs1_val==6 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, -3037000499, x1, 352, x2)

inst_557:
// rs1_val==6 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 3037000499, x1, 360, x2)

inst_558:
// rs1_val==6 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 2, x1, 368, x2)

inst_559:
// rs1_val==6 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 6148914691236517204, x1, 376, x2)

inst_560:
// rs1_val==6 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 0, x1, 384, x2)

inst_561:
// rs1_val==6 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 4, x1, 392, x2)

inst_562:
// rs1_val==6 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 3689348814741910322, x1, 400, x2)

inst_563:
// rs1_val==6 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 7378697629483820645, x1, 408, x2)

inst_564:
// rs1_val==6 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 3037000498, x1, 416, x2)

inst_565:
// rs1_val==6 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 6148914691236517206, x1, 424, x2)

inst_566:
// rs1_val==6 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, -6148914691236517205, x1, 432, x2)

inst_567:
// rs1_val==6 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 6, x1, 440, x2)

inst_568:
// rs1_val==6 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 3689348814741910324, x1, 448, x2)

inst_569:
// rs1_val==6 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 7378697629483820647, x1, 456, x2)

inst_570:
// rs1_val==6 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, -3037000498, x1, 464, x2)

inst_571:
// rs1_val==6 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:6; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 6, 3037000500, x1, 472, x2)

inst_572:
// rs1_val==3689348814741910324 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 3, x1, 480, x2)

inst_573:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 6148914691236517205, x1, 488, x2)

inst_574:
// rs1_val==3689348814741910324 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, -6148914691236517206, x1, 496, x2)

inst_575:
// rs1_val==3689348814741910324 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 5, x1, 504, x2)

inst_576:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 3689348814741910323, x1, 512, x2)

inst_577:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 7378697629483820646, x1, 520, x2)

inst_578:
// rs1_val==3689348814741910324 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, -3037000499, x1, 528, x2)

inst_579:
// rs1_val==3689348814741910324 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 3037000499, x1, 536, x2)

inst_580:
// rs1_val==3689348814741910324 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 2, x1, 544, x2)

inst_581:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 6148914691236517204, x1, 552, x2)

inst_582:
// rs1_val==3689348814741910324 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 0, x1, 560, x2)

inst_583:
// rs1_val==3689348814741910324 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 4, x1, 568, x2)

inst_584:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 3689348814741910322, x1, 576, x2)

inst_585:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 7378697629483820645, x1, 584, x2)

inst_586:
// rs1_val==3689348814741910324 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 3037000498, x1, 592, x2)

inst_587:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 6148914691236517206, x1, 600, x2)

inst_588:
// rs1_val==3689348814741910324 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, -6148914691236517205, x1, 608, x2)

inst_589:
// rs1_val==3689348814741910324 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 6, x1, 616, x2)

inst_590:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 3689348814741910324, x1, 624, x2)

inst_591:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 7378697629483820647, x1, 632, x2)

inst_592:
// rs1_val==3689348814741910324 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, -3037000498, x1, 640, x2)

inst_593:
// rs1_val==3689348814741910324 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:3689348814741910324; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3689348814741910324, 3037000500, x1, 648, x2)

inst_594:
// rs1_val==7378697629483820647 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 3, x1, 656, x2)

inst_595:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 6148914691236517205, x1, 664, x2)

inst_596:
// rs1_val==7378697629483820647 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, -6148914691236517206, x1, 672, x2)

inst_597:
// rs1_val==7378697629483820647 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 5, x1, 680, x2)

inst_598:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 3689348814741910323, x1, 688, x2)

inst_599:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 7378697629483820646, x1, 696, x2)

inst_600:
// rs1_val==7378697629483820647 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, -3037000499, x1, 704, x2)

inst_601:
// rs1_val==7378697629483820647 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 3037000499, x1, 712, x2)

inst_602:
// rs1_val==7378697629483820647 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 2, x1, 720, x2)

inst_603:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 6148914691236517204, x1, 728, x2)

inst_604:
// rs1_val==7378697629483820647 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 0, x1, 736, x2)

inst_605:
// rs1_val==7378697629483820647 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 4, x1, 744, x2)

inst_606:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 3689348814741910322, x1, 752, x2)

inst_607:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 7378697629483820645, x1, 760, x2)

inst_608:
// rs1_val==7378697629483820647 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 3037000498, x1, 768, x2)

inst_609:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 6148914691236517206, x1, 776, x2)

inst_610:
// rs1_val==7378697629483820647 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, -6148914691236517205, x1, 784, x2)

inst_611:
// rs1_val==7378697629483820647 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 6, x1, 792, x2)

inst_612:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 3689348814741910324, x1, 800, x2)

inst_613:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 7378697629483820647, x1, 808, x2)

inst_614:
// rs1_val==7378697629483820647 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, -3037000498, x1, 816, x2)

inst_615:
// rs1_val==7378697629483820647 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:7378697629483820647; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 7378697629483820647, 3037000500, x1, 824, x2)

inst_616:
// rs1_val==-3037000498 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 3, x1, 832, x2)

inst_617:
// rs1_val==-3037000498 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 6148914691236517205, x1, 840, x2)

inst_618:
// rs1_val==-3037000498 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, -6148914691236517206, x1, 848, x2)

inst_619:
// rs1_val==-3037000498 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 5, x1, 856, x2)

inst_620:
// rs1_val==-3037000498 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 3689348814741910323, x1, 864, x2)

inst_621:
// rs1_val==-3037000498 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 7378697629483820646, x1, 872, x2)

inst_622:
// rs1_val==-3037000498 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, -3037000499, x1, 880, x2)

inst_623:
// rs1_val==-3037000498 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 3037000499, x1, 888, x2)

inst_624:
// rs1_val==-3037000498 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 2, x1, 896, x2)

inst_625:
// rs1_val==-3037000498 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 6148914691236517204, x1, 904, x2)

inst_626:
// rs1_val==-3037000498 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 0, x1, 912, x2)

inst_627:
// rs1_val==-3037000498 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 4, x1, 920, x2)

inst_628:
// rs1_val==-3037000498 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 3689348814741910322, x1, 928, x2)

inst_629:
// rs1_val==-3037000498 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 7378697629483820645, x1, 936, x2)

inst_630:
// rs1_val==-3037000498 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 3037000498, x1, 944, x2)

inst_631:
// rs1_val==-3037000498 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 6148914691236517206, x1, 952, x2)

inst_632:
// rs1_val==-3037000498 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, -6148914691236517205, x1, 960, x2)

inst_633:
// rs1_val==-3037000498 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 6, x1, 968, x2)

inst_634:
// rs1_val==-3037000498 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 3689348814741910324, x1, 976, x2)

inst_635:
// rs1_val==-3037000498 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 7378697629483820647, x1, 984, x2)

inst_636:
// rs1_val==-3037000498 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, -3037000498, x1, 992, x2)

inst_637:
// rs1_val==-3037000498 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:-3037000498; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, -3037000498, 3037000500, x1, 1000, x2)

inst_638:
// rs1_val==3037000500 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 3, x1, 1008, x2)

inst_639:
// rs1_val==3037000500 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 6148914691236517205, x1, 1016, x2)

inst_640:
// rs1_val==3037000500 and rs2_val==-6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:-6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, -6148914691236517206, x1, 1024, x2)

inst_641:
// rs1_val==3037000500 and rs2_val==5, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:5
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 5, x1, 1032, x2)

inst_642:
// rs1_val==3037000500 and rs2_val==3689348814741910323, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:3689348814741910323
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 3689348814741910323, x1, 1040, x2)

inst_643:
// rs1_val==3037000500 and rs2_val==7378697629483820646, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:7378697629483820646
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 7378697629483820646, x1, 1048, x2)

inst_644:
// rs1_val==3037000500 and rs2_val==-3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:-3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, -3037000499, x1, 1056, x2)

inst_645:
// rs1_val==3037000500 and rs2_val==3037000499, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:3037000499
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 3037000499, x1, 1064, x2)

inst_646:
// rs1_val==3037000500 and rs2_val==2, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:2
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 2, x1, 1072, x2)

inst_647:
// rs1_val==3037000500 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 6148914691236517204, x1, 1080, x2)

inst_648:
// rs1_val==3037000500 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 0, x1, 1088, x2)

inst_649:
// rs1_val==3037000500 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 4, x1, 1096, x2)

inst_650:
// rs1_val==3037000500 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 3689348814741910322, x1, 1104, x2)

inst_651:
// rs1_val==3037000500 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 7378697629483820645, x1, 1112, x2)

inst_652:
// rs1_val==3037000500 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 3037000498, x1, 1120, x2)

inst_653:
// rs1_val==3037000500 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 6148914691236517206, x1, 1128, x2)

inst_654:
// rs1_val==3037000500 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, -6148914691236517205, x1, 1136, x2)

inst_655:
// rs1_val==3037000500 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 6, x1, 1144, x2)

inst_656:
// rs1_val==3037000500 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 3689348814741910324, x1, 1152, x2)

inst_657:
// rs1_val==3037000500 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 7378697629483820647, x1, 1160, x2)

inst_658:
// rs1_val==3037000500 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, -3037000498, x1, 1168, x2)

inst_659:
// rs1_val==3037000500 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:3037000500; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 3037000500, 3037000500, x1, 1176, x2)

inst_660:
// rs1_val==0 and rs2_val==6148914691236517204, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:6148914691236517204
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 6148914691236517204, x1, 1184, x2)

inst_661:
// rs1_val==0 and rs2_val==0, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:0
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 0, x1, 1192, x2)

inst_662:
// rs1_val==0 and rs2_val==4, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:4
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 4, x1, 1200, x2)

inst_663:
// rs1_val==0 and rs2_val==3689348814741910322, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:3689348814741910322
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 3689348814741910322, x1, 1208, x2)

inst_664:
// rs1_val==0 and rs2_val==7378697629483820645, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:7378697629483820645
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 7378697629483820645, x1, 1216, x2)

inst_665:
// rs1_val==0 and rs2_val==3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 3037000498, x1, 1224, x2)

inst_666:
// rs1_val==0 and rs2_val==6148914691236517206, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:6148914691236517206
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 6148914691236517206, x1, 1232, x2)

inst_667:
// rs1_val==0 and rs2_val==-6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:-6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, -6148914691236517205, x1, 1240, x2)

inst_668:
// rs1_val==0 and rs2_val==6, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:6
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 6, x1, 1248, x2)

inst_669:
// rs1_val==0 and rs2_val==3689348814741910324, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:3689348814741910324
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 3689348814741910324, x1, 1256, x2)

inst_670:
// rs1_val==0 and rs2_val==7378697629483820647, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:7378697629483820647
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 7378697629483820647, x1, 1264, x2)

inst_671:
// rs1_val==0 and rs2_val==-3037000498, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:-3037000498
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, -3037000498, x1, 1272, x2)

inst_672:
// rs1_val==0 and rs2_val==3037000500, 
// opcode: c.or; op1:x10; op2:x11; op1val:0; op2val:3037000500
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 0, 3037000500, x1, 1280, x2)

inst_673:
// rs1_val==4 and rs2_val==3, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:3
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 3, x1, 1288, x2)

inst_674:
// rs1_val==4 and rs2_val==6148914691236517205, 
// opcode: c.or; op1:x10; op2:x11; op1val:4; op2val:6148914691236517205
TEST_CR_OP( c.or, x10, x11, 0x0000000000000000, 4, 6148914691236517205, x1, 1296, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_3:
    .fill 163*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
