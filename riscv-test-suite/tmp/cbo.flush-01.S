
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Oct 16 01:03:10 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/trdthg/repo/act/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/trdthg/repo/act/riscv-arch-test/coverage/cmo/cbom.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cbo.flush instruction of the RISC-V RV64Zicbom_Zicsr extension for the cbo.flush covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZicbom_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zicbom.*Zicsr.*);def TEST_CASE_1=True;",cbo.flush)

RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1==x5, rs1_val == (2**(xlen)-1), 
// opcode: cbo.flush ; op1:x5; op1val:0xffffffffffffffff
TEST_CBO(x15,x5,cbo.flush,0xffffffffffffffff)

inst_1:
// rs1==x10, rs1_val == 0, 
// opcode: cbo.flush ; op1:x10; op1val:0x0
TEST_CBO(x15,x10,cbo.flush,0x0)

inst_2:
// rs1==x21, rs1_val == 6148914691236517205, 
// opcode: cbo.flush ; op1:x21; op1val:0x5555555555555555
TEST_CBO(x15,x21,cbo.flush,0x5555555555555555)

inst_3:
// rs1==x7, rs1_val == 12297829382473034410, 
// opcode: cbo.flush ; op1:x7; op1val:0xaaaaaaaaaaaaaaaa
TEST_CBO(x15,x7,cbo.flush,0xaaaaaaaaaaaaaaaa)

inst_4:
// rs1==x12, rs1_val == 18446744073709551614, 
// opcode: cbo.flush ; op1:x12; op1val:0xfffffffffffffffe
TEST_CBO(x15,x12,cbo.flush,0xfffffffffffffffe)

inst_5:
// rs1==x30, rs1_val == 18446744073709551613, 
// opcode: cbo.flush ; op1:x30; op1val:0xfffffffffffffffd
TEST_CBO(x15,x30,cbo.flush,0xfffffffffffffffd)

inst_6:
// rs1==x23, rs1_val == 18446744073709551611, 
// opcode: cbo.flush ; op1:x23; op1val:0xfffffffffffffffb
TEST_CBO(x15,x23,cbo.flush,0xfffffffffffffffb)

inst_7:
// rs1==x3, rs1_val == 18446744073709551607, 
// opcode: cbo.flush ; op1:x3; op1val:0xfffffffffffffff7
TEST_CBO(x15,x3,cbo.flush,0xfffffffffffffff7)

inst_8:
// rs1==x9, rs1_val == 18446744073709551599, 
// opcode: cbo.flush ; op1:x9; op1val:0xffffffffffffffef
TEST_CBO(x15,x9,cbo.flush,0xffffffffffffffef)

inst_9:
// rs1==x25, rs1_val == 18446744073709551583, 
// opcode: cbo.flush ; op1:x25; op1val:0xffffffffffffffdf
TEST_CBO(x15,x25,cbo.flush,0xffffffffffffffdf)

inst_10:
// rs1==x6, rs1_val == 18446744073709551551, 
// opcode: cbo.flush ; op1:x6; op1val:0xffffffffffffffbf
TEST_CBO(x15,x6,cbo.flush,0xffffffffffffffbf)

inst_11:
// rs1==x31, rs1_val == 18446744073709551487, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffffffffff7f
TEST_CBO(x15,x31,cbo.flush,0xffffffffffffff7f)

inst_12:
// rs1==x18, rs1_val == 18446744073709551359, 
// opcode: cbo.flush ; op1:x18; op1val:0xfffffffffffffeff
TEST_CBO(x15,x18,cbo.flush,0xfffffffffffffeff)

inst_13:
// rs1==x24, rs1_val == 18446744073709551103, 
// opcode: cbo.flush ; op1:x24; op1val:0xfffffffffffffdff
TEST_CBO(x15,x24,cbo.flush,0xfffffffffffffdff)

inst_14:
// rs1==x28, rs1_val == 18446744073709550591, 
// opcode: cbo.flush ; op1:x28; op1val:0xfffffffffffffbff
TEST_CBO(x15,x28,cbo.flush,0xfffffffffffffbff)

inst_15:
// rs1==x26, rs1_val == 18446744073709549567, 
// opcode: cbo.flush ; op1:x26; op1val:0xfffffffffffff7ff
TEST_CBO(x15,x26,cbo.flush,0xfffffffffffff7ff)

inst_16:
// rs1==x17, rs1_val == 18446744073709547519, 
// opcode: cbo.flush ; op1:x17; op1val:0xffffffffffffefff
TEST_CBO(x15,x17,cbo.flush,0xffffffffffffefff)

inst_17:
// rs1==x8, rs1_val == 18446744073709543423, 
// opcode: cbo.flush ; op1:x8; op1val:0xffffffffffffdfff
TEST_CBO(x15,x8,cbo.flush,0xffffffffffffdfff)

inst_18:
// rs1==x16, rs1_val == 18446744073709535231, 
// opcode: cbo.flush ; op1:x16; op1val:0xffffffffffffbfff
TEST_CBO(x15,x16,cbo.flush,0xffffffffffffbfff)

inst_19:
// rs1==x13, rs1_val == 18446744073709518847, 
// opcode: cbo.flush ; op1:x13; op1val:0xffffffffffff7fff
TEST_CBO(x15,x13,cbo.flush,0xffffffffffff7fff)

inst_20:
// rs1==x22, rs1_val == 18446744073709486079, 
// opcode: cbo.flush ; op1:x22; op1val:0xfffffffffffeffff
TEST_CBO(x15,x22,cbo.flush,0xfffffffffffeffff)

inst_21:
// rs1==x1, rs1_val == 18446744073709420543, 
// opcode: cbo.flush ; op1:x1; op1val:0xfffffffffffdffff
TEST_CBO(x15,x1,cbo.flush,0xfffffffffffdffff)

inst_22:
// rs1==x4, rs1_val == 18446744073709289471, 
// opcode: cbo.flush ; op1:x4; op1val:0xfffffffffffbffff
TEST_CBO(x15,x4,cbo.flush,0xfffffffffffbffff)

inst_23:
// rs1==x11, rs1_val == 18446744073709027327, 
// opcode: cbo.flush ; op1:x11; op1val:0xfffffffffff7ffff
TEST_CBO(x15,x11,cbo.flush,0xfffffffffff7ffff)

inst_24:
// rs1==x14, rs1_val == 18446744073708503039, 
// opcode: cbo.flush ; op1:x14; op1val:0xffffffffffefffff
TEST_CBO(x15,x14,cbo.flush,0xffffffffffefffff)

inst_25:
// rs1==x19, rs1_val == 18446744073707454463, 
// opcode: cbo.flush ; op1:x19; op1val:0xffffffffffdfffff
TEST_CBO(x15,x19,cbo.flush,0xffffffffffdfffff)

inst_26:
// rs1==x2, rs1_val == 18446744073705357311, 
// opcode: cbo.flush ; op1:x2; op1val:0xffffffffffbfffff
TEST_CBO(x15,x2,cbo.flush,0xffffffffffbfffff)

inst_27:
// rs1==x27, rs1_val == 18446744073701163007, 
// opcode: cbo.flush ; op1:x27; op1val:0xffffffffff7fffff
TEST_CBO(x15,x27,cbo.flush,0xffffffffff7fffff)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x15, rs1_val == 18446744073692774399, 
// opcode: cbo.flush ; op1:x15; op1val:0xfffffffffeffffff
TEST_CBO(x1,x15,cbo.flush,0xfffffffffeffffff)

inst_29:
// rs1==x20, rs1_val == 18446744073675997183, 
// opcode: cbo.flush ; op1:x20; op1val:0xfffffffffdffffff
TEST_CBO(x1,x20,cbo.flush,0xfffffffffdffffff)

inst_30:
// rs1==x29, rs1_val == 18446744073642442751, 
// opcode: cbo.flush ; op1:x29; op1val:0xfffffffffbffffff
TEST_CBO(x1,x29,cbo.flush,0xfffffffffbffffff)

inst_31:
// rs1_val == 18446744073575333887, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffffff7ffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffffff7ffffff)

inst_32:
// rs1_val == 18446744073441116159, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffffefffffff
TEST_CBO(x1,x31,cbo.flush,0xffffffffefffffff)

inst_33:
// rs1_val == 18446744073172680703, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffffdfffffff
TEST_CBO(x1,x31,cbo.flush,0xffffffffdfffffff)

inst_34:
// rs1_val == 18446744072635809791, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffffbfffffff
TEST_CBO(x1,x31,cbo.flush,0xffffffffbfffffff)

inst_35:
// rs1_val == 18446744071562067967, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffff7fffffff
TEST_CBO(x1,x31,cbo.flush,0xffffffff7fffffff)

inst_36:
// rs1_val == 18446744069414584319, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffffeffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffffeffffffff)

inst_37:
// rs1_val == 18446744065119617023, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffffdffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffffdffffffff)

inst_38:
// rs1_val == 18446744056529682431, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffffbffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffffbffffffff)

inst_39:
// rs1_val == 18446744039349813247, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffff7ffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffff7ffffffff)

inst_40:
// rs1_val == 18446744004990074879, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffefffffffff
TEST_CBO(x1,x31,cbo.flush,0xffffffefffffffff)

inst_41:
// rs1_val == 18446743936270598143, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffdfffffffff
TEST_CBO(x1,x31,cbo.flush,0xffffffdfffffffff)

inst_42:
// rs1_val == 18446743798831644671, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffffbfffffffff
TEST_CBO(x1,x31,cbo.flush,0xffffffbfffffffff)

inst_43:
// rs1_val == 18446743523953737727, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffff7fffffffff
TEST_CBO(x1,x31,cbo.flush,0xffffff7fffffffff)

inst_44:
// rs1_val == 18446742974197923839, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffeffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffeffffffffff)

inst_45:
// rs1_val == 18446741874686296063, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffdffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffdffffffffff)

inst_46:
// rs1_val == 18446739675663040511, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffffbffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffffbffffffffff)

inst_47:
// rs1_val == 18446735277616529407, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffff7ffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffff7ffffffffff)

inst_48:
// rs1_val == 18446726481523507199, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffefffffffffff
TEST_CBO(x1,x31,cbo.flush,0xffffefffffffffff)

inst_49:
// rs1_val == 18446708889337462783, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffdfffffffffff
TEST_CBO(x1,x31,cbo.flush,0xffffdfffffffffff)

inst_50:
// rs1_val == 18446673704965373951, 
// opcode: cbo.flush ; op1:x31; op1val:0xffffbfffffffffff
TEST_CBO(x1,x31,cbo.flush,0xffffbfffffffffff)

inst_51:
// rs1_val == 18446603336221196287, 
// opcode: cbo.flush ; op1:x31; op1val:0xffff7fffffffffff
TEST_CBO(x1,x31,cbo.flush,0xffff7fffffffffff)

inst_52:
// rs1_val == 18446462598732840959, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffeffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffeffffffffffff)

inst_53:
// rs1_val == 18446181123756130303, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffdffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffdffffffffffff)

inst_54:
// rs1_val == 18445618173802708991, 
// opcode: cbo.flush ; op1:x31; op1val:0xfffbffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfffbffffffffffff)

inst_55:
// rs1_val == 18444492273895866367, 
// opcode: cbo.flush ; op1:x31; op1val:0xfff7ffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfff7ffffffffffff)

inst_56:
// rs1_val == 18442240474082181119, 
// opcode: cbo.flush ; op1:x31; op1val:0xffefffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xffefffffffffffff)

inst_57:
// rs1_val == 18437736874454810623, 
// opcode: cbo.flush ; op1:x31; op1val:0xffdfffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xffdfffffffffffff)

inst_58:
// rs1_val == 18428729675200069631, 
// opcode: cbo.flush ; op1:x31; op1val:0xffbfffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xffbfffffffffffff)

inst_59:
// rs1_val == 18410715276690587647, 
// opcode: cbo.flush ; op1:x31; op1val:0xff7fffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xff7fffffffffffff)

inst_60:
// rs1_val == 18374686479671623679, 
// opcode: cbo.flush ; op1:x31; op1val:0xfeffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfeffffffffffffff)

inst_61:
// rs1_val == 18302628885633695743, 
// opcode: cbo.flush ; op1:x31; op1val:0xfdffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfdffffffffffffff)

inst_62:
// rs1_val == 18158513697557839871, 
// opcode: cbo.flush ; op1:x31; op1val:0xfbffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xfbffffffffffffff)

inst_63:
// rs1_val == 17870283321406128127, 
// opcode: cbo.flush ; op1:x31; op1val:0xf7ffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xf7ffffffffffffff)

inst_64:
// rs1_val == 17293822569102704639, 
// opcode: cbo.flush ; op1:x31; op1val:0xefffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xefffffffffffffff)

inst_65:
// rs1_val == 16140901064495857663, 
// opcode: cbo.flush ; op1:x31; op1val:0xdfffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xdfffffffffffffff)

inst_66:
// rs1_val == 13835058055282163711, 
// opcode: cbo.flush ; op1:x31; op1val:0xbfffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0xbfffffffffffffff)

inst_67:
// rs1_val == 9223372036854775807, 
// opcode: cbo.flush ; op1:x31; op1val:0x7fffffffffffffff
TEST_CBO(x1,x31,cbo.flush,0x7fffffffffffffff)

inst_68:
// rs1_val == 1, 
// opcode: cbo.flush ; op1:x31; op1val:0x1
TEST_CBO(x1,x31,cbo.flush,0x1)

inst_69:
// rs1_val == 1152921504606846976, 
// opcode: cbo.flush ; op1:x31; op1val:0x1000000000000000
TEST_CBO(x1,x31,cbo.flush,0x1000000000000000)

inst_70:
// rs1_val == 2305843009213693952, 
// opcode: cbo.flush ; op1:x31; op1val:0x2000000000000000
TEST_CBO(x1,x31,cbo.flush,0x2000000000000000)

inst_71:
// rs1_val == 4611686018427387904, 
// opcode: cbo.flush ; op1:x31; op1val:0x4000000000000000
TEST_CBO(x1,x31,cbo.flush,0x4000000000000000)

inst_72:
// rs1_val == 9223372036854775808, 
// opcode: cbo.flush ; op1:x31; op1val:0x8000000000000000
TEST_CBO(x1,x31,cbo.flush,0x8000000000000000)

inst_73:
// rs1_val == 2, 
// opcode: cbo.flush ; op1:x31; op1val:0x2
TEST_CBO(x1,x31,cbo.flush,0x2)

inst_74:
// rs1_val == 4, 
// opcode: cbo.flush ; op1:x31; op1val:0x4
TEST_CBO(x1,x31,cbo.flush,0x4)

inst_75:
// rs1_val == 8, 
// opcode: cbo.flush ; op1:x31; op1val:0x8
TEST_CBO(x1,x31,cbo.flush,0x8)

inst_76:
// rs1_val == 16, 
// opcode: cbo.flush ; op1:x31; op1val:0x10
TEST_CBO(x1,x31,cbo.flush,0x10)

inst_77:
// rs1_val == 32, 
// opcode: cbo.flush ; op1:x31; op1val:0x20
TEST_CBO(x1,x31,cbo.flush,0x20)

inst_78:
// rs1_val == 64, 
// opcode: cbo.flush ; op1:x31; op1val:0x40
TEST_CBO(x1,x31,cbo.flush,0x40)

inst_79:
// rs1_val == 128, 
// opcode: cbo.flush ; op1:x31; op1val:0x80
TEST_CBO(x1,x31,cbo.flush,0x80)

inst_80:
// rs1_val == 256, 
// opcode: cbo.flush ; op1:x31; op1val:0x100
TEST_CBO(x1,x31,cbo.flush,0x100)

inst_81:
// rs1_val == 512, 
// opcode: cbo.flush ; op1:x31; op1val:0x200
TEST_CBO(x1,x31,cbo.flush,0x200)

inst_82:
// rs1_val == 1024, 
// opcode: cbo.flush ; op1:x31; op1val:0x400
TEST_CBO(x1,x31,cbo.flush,0x400)

inst_83:
// rs1_val == 2048, 
// opcode: cbo.flush ; op1:x31; op1val:0x800
TEST_CBO(x1,x31,cbo.flush,0x800)

inst_84:
// rs1_val == 4096, 
// opcode: cbo.flush ; op1:x31; op1val:0x1000
TEST_CBO(x1,x31,cbo.flush,0x1000)

inst_85:
// rs1_val == 8192, 
// opcode: cbo.flush ; op1:x31; op1val:0x2000
TEST_CBO(x1,x31,cbo.flush,0x2000)

inst_86:
// rs1_val == 16384, 
// opcode: cbo.flush ; op1:x31; op1val:0x4000
TEST_CBO(x1,x31,cbo.flush,0x4000)

inst_87:
// rs1_val == 32768, 
// opcode: cbo.flush ; op1:x31; op1val:0x8000
TEST_CBO(x1,x31,cbo.flush,0x8000)

inst_88:
// rs1_val == 65536, 
// opcode: cbo.flush ; op1:x31; op1val:0x10000
TEST_CBO(x1,x31,cbo.flush,0x10000)

inst_89:
// rs1_val == 131072, 
// opcode: cbo.flush ; op1:x31; op1val:0x20000
TEST_CBO(x1,x31,cbo.flush,0x20000)

inst_90:
// rs1_val == 262144, 
// opcode: cbo.flush ; op1:x31; op1val:0x40000
TEST_CBO(x1,x31,cbo.flush,0x40000)

inst_91:
// rs1_val == 524288, 
// opcode: cbo.flush ; op1:x31; op1val:0x80000
TEST_CBO(x1,x31,cbo.flush,0x80000)

inst_92:
// rs1_val == 1048576, 
// opcode: cbo.flush ; op1:x31; op1val:0x100000
TEST_CBO(x1,x31,cbo.flush,0x100000)

inst_93:
// rs1_val == 2097152, 
// opcode: cbo.flush ; op1:x31; op1val:0x200000
TEST_CBO(x1,x31,cbo.flush,0x200000)

inst_94:
// rs1_val == 4194304, 
// opcode: cbo.flush ; op1:x31; op1val:0x400000
TEST_CBO(x1,x31,cbo.flush,0x400000)

inst_95:
// rs1_val == 8388608, 
// opcode: cbo.flush ; op1:x31; op1val:0x800000
TEST_CBO(x1,x31,cbo.flush,0x800000)

inst_96:
// rs1_val == 16777216, 
// opcode: cbo.flush ; op1:x31; op1val:0x1000000
TEST_CBO(x1,x31,cbo.flush,0x1000000)

inst_97:
// rs1_val == 33554432, 
// opcode: cbo.flush ; op1:x31; op1val:0x2000000
TEST_CBO(x1,x31,cbo.flush,0x2000000)

inst_98:
// rs1_val == 67108864, 
// opcode: cbo.flush ; op1:x31; op1val:0x4000000
TEST_CBO(x1,x31,cbo.flush,0x4000000)

inst_99:
// rs1_val == 134217728, 
// opcode: cbo.flush ; op1:x31; op1val:0x8000000
TEST_CBO(x1,x31,cbo.flush,0x8000000)

inst_100:
// rs1_val == 268435456, 
// opcode: cbo.flush ; op1:x31; op1val:0x10000000
TEST_CBO(x1,x31,cbo.flush,0x10000000)

inst_101:
// rs1_val == 536870912, 
// opcode: cbo.flush ; op1:x31; op1val:0x20000000
TEST_CBO(x1,x31,cbo.flush,0x20000000)

inst_102:
// rs1_val == 1073741824, 
// opcode: cbo.flush ; op1:x31; op1val:0x40000000
TEST_CBO(x1,x31,cbo.flush,0x40000000)

inst_103:
// rs1_val == 2147483648, 
// opcode: cbo.flush ; op1:x31; op1val:0x80000000
TEST_CBO(x1,x31,cbo.flush,0x80000000)

inst_104:
// rs1_val == 4294967296, 
// opcode: cbo.flush ; op1:x31; op1val:0x100000000
TEST_CBO(x1,x31,cbo.flush,0x100000000)

inst_105:
// rs1_val == 8589934592, 
// opcode: cbo.flush ; op1:x31; op1val:0x200000000
TEST_CBO(x1,x31,cbo.flush,0x200000000)

inst_106:
// rs1_val == 17179869184, 
// opcode: cbo.flush ; op1:x31; op1val:0x400000000
TEST_CBO(x1,x31,cbo.flush,0x400000000)

inst_107:
// rs1_val == 34359738368, 
// opcode: cbo.flush ; op1:x31; op1val:0x800000000
TEST_CBO(x1,x31,cbo.flush,0x800000000)

inst_108:
// rs1_val == 68719476736, 
// opcode: cbo.flush ; op1:x31; op1val:0x1000000000
TEST_CBO(x1,x31,cbo.flush,0x1000000000)

inst_109:
// rs1_val == 137438953472, 
// opcode: cbo.flush ; op1:x31; op1val:0x2000000000
TEST_CBO(x1,x31,cbo.flush,0x2000000000)

inst_110:
// rs1_val == 274877906944, 
// opcode: cbo.flush ; op1:x31; op1val:0x4000000000
TEST_CBO(x1,x31,cbo.flush,0x4000000000)

inst_111:
// rs1_val == 549755813888, 
// opcode: cbo.flush ; op1:x31; op1val:0x8000000000
TEST_CBO(x1,x31,cbo.flush,0x8000000000)

inst_112:
// rs1_val == 1099511627776, 
// opcode: cbo.flush ; op1:x31; op1val:0x10000000000
TEST_CBO(x1,x31,cbo.flush,0x10000000000)

inst_113:
// rs1_val == 2199023255552, 
// opcode: cbo.flush ; op1:x31; op1val:0x20000000000
TEST_CBO(x1,x31,cbo.flush,0x20000000000)

inst_114:
// rs1_val == 4398046511104, 
// opcode: cbo.flush ; op1:x31; op1val:0x40000000000
TEST_CBO(x1,x31,cbo.flush,0x40000000000)

inst_115:
// rs1_val == 8796093022208, 
// opcode: cbo.flush ; op1:x31; op1val:0x80000000000
TEST_CBO(x1,x31,cbo.flush,0x80000000000)

inst_116:
// rs1_val == 17592186044416, 
// opcode: cbo.flush ; op1:x31; op1val:0x100000000000
TEST_CBO(x1,x31,cbo.flush,0x100000000000)

inst_117:
// rs1_val == 35184372088832, 
// opcode: cbo.flush ; op1:x31; op1val:0x200000000000
TEST_CBO(x1,x31,cbo.flush,0x200000000000)

inst_118:
// rs1_val == 70368744177664, 
// opcode: cbo.flush ; op1:x31; op1val:0x400000000000
TEST_CBO(x1,x31,cbo.flush,0x400000000000)

inst_119:
// rs1_val == 140737488355328, 
// opcode: cbo.flush ; op1:x31; op1val:0x800000000000
TEST_CBO(x1,x31,cbo.flush,0x800000000000)

inst_120:
// rs1_val == 281474976710656, 
// opcode: cbo.flush ; op1:x31; op1val:0x1000000000000
TEST_CBO(x1,x31,cbo.flush,0x1000000000000)

inst_121:
// rs1_val == 562949953421312, 
// opcode: cbo.flush ; op1:x31; op1val:0x2000000000000
TEST_CBO(x1,x31,cbo.flush,0x2000000000000)

inst_122:
// rs1_val == 1125899906842624, 
// opcode: cbo.flush ; op1:x31; op1val:0x4000000000000
TEST_CBO(x1,x31,cbo.flush,0x4000000000000)

inst_123:
// rs1_val == 2251799813685248, 
// opcode: cbo.flush ; op1:x31; op1val:0x8000000000000
TEST_CBO(x1,x31,cbo.flush,0x8000000000000)

inst_124:
// rs1_val == 4503599627370496, 
// opcode: cbo.flush ; op1:x31; op1val:0x10000000000000
TEST_CBO(x1,x31,cbo.flush,0x10000000000000)

inst_125:
// rs1_val == 9007199254740992, 
// opcode: cbo.flush ; op1:x31; op1val:0x20000000000000
TEST_CBO(x1,x31,cbo.flush,0x20000000000000)

inst_126:
// rs1_val == 18014398509481984, 
// opcode: cbo.flush ; op1:x31; op1val:0x40000000000000
TEST_CBO(x1,x31,cbo.flush,0x40000000000000)

inst_127:
// rs1_val == 36028797018963968, 
// opcode: cbo.flush ; op1:x31; op1val:0x80000000000000
TEST_CBO(x1,x31,cbo.flush,0x80000000000000)

inst_128:
// rs1_val == 72057594037927936, 
// opcode: cbo.flush ; op1:x31; op1val:0x100000000000000
TEST_CBO(x1,x31,cbo.flush,0x100000000000000)

inst_129:
// rs1_val == 144115188075855872, 
// opcode: cbo.flush ; op1:x31; op1val:0x200000000000000
TEST_CBO(x1,x31,cbo.flush,0x200000000000000)

inst_130:
// rs1_val == 288230376151711744, 
// opcode: cbo.flush ; op1:x31; op1val:0x400000000000000
TEST_CBO(x1,x31,cbo.flush,0x400000000000000)

inst_131:
// rs1_val == 576460752303423488, 
// opcode: cbo.flush ; op1:x31; op1val:0x800000000000000
TEST_CBO(x1,x31,cbo.flush,0x800000000000000)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x15_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x15_1:
    .fill 28*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 104*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
