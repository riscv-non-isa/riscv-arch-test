
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sat Dec 16 19:59:28 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/zicfiss.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sspushpopchk_s instruction of the RISC-V RV32_Zicfiss_Zicsr extension for the sspush_popchk_s covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zicfiss_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zicsr.*Zicfiss.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;def TEST_CASE_1=True;",sspush_popchk_s)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
TEST_SSPUSH_SSPOP_OP(x1, 0*XLEN/8, -0x80000000, Smode)

inst_1:// rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
TEST_SSPUSH_SSPOP_OP(x1, 1*XLEN/8, 0x7fffffff, Smode)

inst_2:// rs2_val == 0, 
TEST_SSPUSH_SSPOP_OP(x1, 2*XLEN/8, 0x0, Smode)

inst_3:// rs2_val == -2, 
TEST_SSPUSH_SSPOP_OP(x1, 3*XLEN/8, -0x2, Smode)

inst_4:// rs2_val == -3, 
TEST_SSPUSH_SSPOP_OP(x1, 4*XLEN/8, -0x3, Smode)

inst_5:// rs2_val == -5, 
TEST_SSPUSH_SSPOP_OP(x1, 5*XLEN/8, -0x5, Smode)

inst_6:// rs2_val == -9, 
TEST_SSPUSH_SSPOP_OP(x1, 6*XLEN/8, -0x9, Smode)

inst_7:// rs2_val == -17, 
TEST_SSPUSH_SSPOP_OP(x1, 7*XLEN/8, -0x11, Smode)

inst_8:// rs2_val == -33, 
TEST_SSPUSH_SSPOP_OP(x1, 8*XLEN/8, -0x21, Smode)

inst_9:// rs2_val == -65, 
TEST_SSPUSH_SSPOP_OP(x1, 9*XLEN/8, -0x41, Smode)

inst_10:// rs2_val == -129, 
TEST_SSPUSH_SSPOP_OP(x1, 10*XLEN/8, -0x81, Smode)

inst_11:// rs2_val == -257, 
TEST_SSPUSH_SSPOP_OP(x1, 11*XLEN/8, -0x101, Smode)

inst_12:// rs2_val == -513, 
TEST_SSPUSH_SSPOP_OP(x1, 12*XLEN/8, -0x201, Smode)

inst_13:// rs2_val == -1025, 
TEST_SSPUSH_SSPOP_OP(x1, 13*XLEN/8, -0x401, Smode)

inst_14:// rs2_val == -2049, 
TEST_SSPUSH_SSPOP_OP(x1, 14*XLEN/8, -0x801, Smode)

inst_15:// rs2_val == -4097, 
TEST_SSPUSH_SSPOP_OP(x1, 15*XLEN/8, -0x1001, Smode)

inst_16:// rs2_val == -8193, 
TEST_SSPUSH_SSPOP_OP(x1, 16*XLEN/8, -0x2001, Smode)

inst_17:// rs2_val == -16385, 
TEST_SSPUSH_SSPOP_OP(x1, 17*XLEN/8, -0x4001, Smode)

inst_18:// rs2_val == -32769, 
TEST_SSPUSH_SSPOP_OP(x1, 18*XLEN/8, -0x8001, Smode)

inst_19:// rs2_val == -65537, 
TEST_SSPUSH_SSPOP_OP(x1, 19*XLEN/8, -0x10001, Smode)

inst_20:// rs2_val == -131073, 
TEST_SSPUSH_SSPOP_OP(x1, 20*XLEN/8, -0x20001, Smode)

inst_21:// rs2_val == -262145, 
TEST_SSPUSH_SSPOP_OP(x1, 21*XLEN/8, -0x40001, Smode)

inst_22:// rs2_val == -524289, 
TEST_SSPUSH_SSPOP_OP(x1, 22*XLEN/8, -0x80001, Smode)

inst_23:// rs2_val == -1048577, 
TEST_SSPUSH_SSPOP_OP(x1, 23*XLEN/8, -0x100001, Smode)

inst_24:// rs2_val == -2097153, 
TEST_SSPUSH_SSPOP_OP(x1, 24*XLEN/8, -0x200001, Smode)

inst_25:// rs2_val == -4194305, 
TEST_SSPUSH_SSPOP_OP(x1, 25*XLEN/8, -0x400001, Smode)

inst_26:// rs2_val == -8388609, 
TEST_SSPUSH_SSPOP_OP(x1, 26*XLEN/8, -0x800001, Smode)

inst_27:// rs2_val == -16777217, 
TEST_SSPUSH_SSPOP_OP(x1, 27*XLEN/8, -0x1000001, Smode)

inst_28:// rs2_val == -33554433, 
TEST_SSPUSH_SSPOP_OP(x1, 28*XLEN/8, -0x2000001, Smode)

inst_29:// rs2_val == -67108865, 
TEST_SSPUSH_SSPOP_OP(x1, 29*XLEN/8, -0x4000001, Smode)

inst_30:// rs2_val == -134217729, 
TEST_SSPUSH_SSPOP_OP(x1, 30*XLEN/8, -0x8000001, Smode)

inst_31:// rs2_val == -268435457, 
TEST_SSPUSH_SSPOP_OP(x1, 31*XLEN/8, -0x10000001, Smode)

inst_32:// rs2_val == -536870913, 
TEST_SSPUSH_SSPOP_OP(x1, 32*XLEN/8, -0x20000001, Smode)

inst_33:// rs2_val == -1073741825, 
TEST_SSPUSH_SSPOP_OP(x1, 33*XLEN/8, -0x40000001, Smode)

inst_34:// rs2_val == 1, 
TEST_SSPUSH_SSPOP_OP(x1, 34*XLEN/8, 0x1, Smode)

inst_35:// rs2_val == 2, 
TEST_SSPUSH_SSPOP_OP(x1, 35*XLEN/8, 0x2, Smode)

inst_36:// rs2_val == 536870912, 
TEST_SSPUSH_SSPOP_OP(x1, 36*XLEN/8, 0x20000000, Smode)

inst_37:// rs2_val == 1073741824, 
TEST_SSPUSH_SSPOP_OP(x1, 37*XLEN/8, 0x40000000, Smode)

inst_38:// rs2_val == 1431655765, 
TEST_SSPUSH_SSPOP_OP(x1, 38*XLEN/8, 0x55555555, Smode)

inst_39:// rs2_val == -1431655766, 
TEST_SSPUSH_SSPOP_OP(x1, 39*XLEN/8, -0x55555556, Smode)

inst_40:// rs2_val == 4, 
TEST_SSPUSH_SSPOP_OP(x1, 40*XLEN/8, 0x4, Smode)

inst_41:// rs2_val == 8, 
TEST_SSPUSH_SSPOP_OP(x1, 41*XLEN/8, 0x8, Smode)

inst_42:// rs2_val == 16, 
TEST_SSPUSH_SSPOP_OP(x1, 42*XLEN/8, 0x10, Smode)

inst_43:// rs2_val == 32, 
TEST_SSPUSH_SSPOP_OP(x1, 43*XLEN/8, 0x20, Smode)

inst_44:// rs2_val == 64, 
TEST_SSPUSH_SSPOP_OP(x1, 44*XLEN/8, 0x40, Smode)

inst_45:// rs2_val == 128, 
TEST_SSPUSH_SSPOP_OP(x1, 45*XLEN/8, 0x80, Smode)

inst_46:// rs2_val == 256, 
TEST_SSPUSH_SSPOP_OP(x1, 46*XLEN/8, 0x100, Smode)

inst_47:// rs2_val == 512, 
TEST_SSPUSH_SSPOP_OP(x1, 47*XLEN/8, 0x200, Smode)

inst_48:// rs2_val == 1024, 
TEST_SSPUSH_SSPOP_OP(x1, 48*XLEN/8, 0x400, Smode)

inst_49:// rs2_val == 2048, 
TEST_SSPUSH_SSPOP_OP(x1, 49*XLEN/8, 0x800, Smode)

inst_50:// rs2_val == 4096, 
TEST_SSPUSH_SSPOP_OP(x1, 50*XLEN/8, 0x1000, Smode)

inst_51:// rs2_val == 8192, 
TEST_SSPUSH_SSPOP_OP(x1, 51*XLEN/8, 0x2000, Smode)

inst_52:// rs2_val == 16384, 
TEST_SSPUSH_SSPOP_OP(x1, 52*XLEN/8, 0x4000, Smode)

inst_53:// rs2_val == 32768, 
TEST_SSPUSH_SSPOP_OP(x1, 53*XLEN/8, 0x8000, Smode)

inst_54:// rs2_val == 65536, 
TEST_SSPUSH_SSPOP_OP(x1, 54*XLEN/8, 0x10000, Smode)

inst_55:// rs2_val == 131072, 
TEST_SSPUSH_SSPOP_OP(x1, 55*XLEN/8, 0x20000, Smode)

inst_56:// rs2_val == 262144, 
TEST_SSPUSH_SSPOP_OP(x1, 56*XLEN/8, 0x40000, Smode)

inst_57:// rs2_val == 524288, 
TEST_SSPUSH_SSPOP_OP(x1, 57*XLEN/8, 0x80000, Smode)

inst_58:// rs2_val == 1048576, 
TEST_SSPUSH_SSPOP_OP(x1, 58*XLEN/8, 0x100000, Smode)

inst_59:// rs2_val == 2097152, 
TEST_SSPUSH_SSPOP_OP(x1, 59*XLEN/8, 0x200000, Smode)

inst_60:// rs2_val == 4194304, 
TEST_SSPUSH_SSPOP_OP(x1, 60*XLEN/8, 0x400000, Smode)

inst_61:// rs2_val == 8388608, 
TEST_SSPUSH_SSPOP_OP(x1, 61*XLEN/8, 0x800000, Smode)

inst_62:// rs2_val == 16777216, 
TEST_SSPUSH_SSPOP_OP(x1, 62*XLEN/8, 0x1000000, Smode)

inst_63:// rs2_val == 33554432, 
TEST_SSPUSH_SSPOP_OP(x1, 63*XLEN/8, 0x2000000, Smode)

inst_64:// rs2_val == 67108864, 
TEST_SSPUSH_SSPOP_OP(x1, 64*XLEN/8, 0x4000000, Smode)

inst_65:// rs2_val == 134217728, 
TEST_SSPUSH_SSPOP_OP(x1, 65*XLEN/8, 0x8000000, Smode)

inst_66:// rs2_val == 268435456, 
TEST_SSPUSH_SSPOP_OP(x1, 66*XLEN/8, 0x10000000, Smode)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 67*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
