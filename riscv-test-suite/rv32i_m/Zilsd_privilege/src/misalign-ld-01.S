
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Jul  5 09:43:19 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vsysuser/verif/updated_x0_ctg/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vsysuser/verif/updated_x0_ctg/riscv-ctg/sample_cgfs/rv32zilsd_priv.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ldz instruction of the RISC-V RV32Zilsd extension for the misalign-ld covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZicsr_Zilsd")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zilsd.*); check hw_data_misaligned_support:=True;def TEST_CASE_1=True;",misalign-ld)

RVTEST_CASE(1,"//check ISA:=regex(.*I.*Zicsr.*Zilsd.); check hw_data_misaligned_support:=False; def rvtest_mtrap_routine=True;def TEST_CASE_1=True;",misalign-ld)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x2, rd==x20, ea_align == 1, 
// opcode:$opcode op1:x2; dest:x20; immval:0x8; align:1;rd_hi:x21
TEST_LOAD_ZILSD(x1,x3,0,x2,x20,x21,0x8,0*XLEN/8,ld,1)

inst_1:
// rs1==x16, rd==x6, ea_align == 2, 
// opcode:$opcode op1:x16; dest:x6; immval:-0x21; align:2;rd_hi:x7
TEST_LOAD_ZILSD(x1,x3,0,x16,x6,x7,-0x21,2*XLEN/8,ld,2)

inst_2:
// rs1==x22, rd==x2, ea_align == 3, 
// opcode:$opcode op1:x22; dest:x2; immval:-0x21; align:3;rd_hi:x3
TEST_LOAD_ZILSD(x1,x3,0,x22,x2,x3,-0x21,4*XLEN/8,ld,3)

inst_3:
// rs1==x20, rd==x28, ea_align == 4, 
// opcode:$opcode op1:x20; dest:x28; immval:-0x11; align:4;rd_hi:x29
TEST_LOAD_ZILSD(x1,x3,0,x20,x28,x29,-0x11,6*XLEN/8,ld,4)

inst_4:
// rs1==x24, rd==x26, ea_align == 5, 
// opcode:$opcode op1:x24; dest:x26; immval:-0x400; align:5;rd_hi:x27
TEST_LOAD_ZILSD(x1,x3,0,x24,x26,x27,-0x400,8*XLEN/8,ld,5)

inst_5:
// rs1==x29, rd==x10, ea_align == 6, 
// opcode:$opcode op1:x29; dest:x10; immval:-0x21; align:6;rd_hi:x11
TEST_LOAD_ZILSD(x1,x3,0,x29,x10,x11,-0x21,10*XLEN/8,ld,6)

inst_6:
// rs1==x23, rd==x4, ea_align == 7, 
// opcode:$opcode op1:x23; dest:x4; immval:-0x9; align:7;rd_hi:x5
TEST_LOAD_ZILSD(x1,x3,0,x23,x4,x5,-0x9,12*XLEN/8,ld,7)

inst_7:
// rs1==x8, rd==x16, 
// opcode:$opcode op1:x8; dest:x16; immval:-0x800; align:0;rd_hi:x17
TEST_LOAD_ZILSD(x1,x3,0,x8,x16,x17,-0x800,14*XLEN/8,ld,0)

inst_8:
// rs1==x12, rd==x30, 
// opcode:$opcode op1:x12; dest:x30; immval:-0x800; align:0;rd_hi:x31
TEST_LOAD_ZILSD(x1,x3,0,x12,x30,x31,-0x800,16*XLEN/8,ld,0)

inst_9:
// rs1==x27, rd==x12, 
// opcode:$opcode op1:x27; dest:x12; immval:-0x800; align:0;rd_hi:x13
TEST_LOAD_ZILSD(x1,x3,0,x27,x12,x13,-0x800,18*XLEN/8,ld,0)

inst_10:
// rs1==x9, rd==x14, 
// opcode:$opcode op1:x9; dest:x14; immval:-0x800; align:0;rd_hi:x15
TEST_LOAD_ZILSD(x1,x3,0,x9,x14,x15,-0x800,20*XLEN/8,ld,0)
RVTEST_SIGBASE(x14,signature_x14_0)

inst_11:
// rs1==x18, rd==x8, 
// opcode:$opcode op1:x18; dest:x8; immval:-0x800; align:0;rd_hi:x9
TEST_LOAD_ZILSD(x14,x3,0,x18,x8,x9,-0x800,0*XLEN/8,ld,0)

inst_12:
// rs1==x17, rd==x18, 
// opcode:$opcode op1:x17; dest:x18; immval:-0x800; align:0;rd_hi:x19
TEST_LOAD_ZILSD(x14,x3,0,x17,x18,x19,-0x800,2*XLEN/8,ld,0)

inst_13:
// rs1==x19, rd==x0, 
// opcode:$opcode op1:x19; dest:x0; immval:-0x800; align:0;rd_hi:x1
TEST_LOAD_ZILSD(x14,x8,0,x19,x0,x1,-0x800,4*XLEN/8,ld,0)

inst_14:
// rs1==x10, rd==x22, 
// opcode:$opcode op1:x10; dest:x22; immval:-0x800; align:0;rd_hi:x23
TEST_LOAD_ZILSD(x14,x8,0,x10,x22,x23,-0x800,6*XLEN/8,ld,0)

inst_15:
// rs1==x28, rd==x24, 
// opcode:$opcode op1:x28; dest:x24; immval:-0x800; align:0;rd_hi:x25
TEST_LOAD_ZILSD(x14,x8,0,x28,x24,x25,-0x800,8*XLEN/8,ld,0)

inst_16:
// rs1==x15, 
// opcode:$opcode op1:x15; dest:x18; immval:-0x800; align:0;rd_hi:x19
TEST_LOAD_ZILSD(x14,x8,0,x15,x18,x19,-0x800,10*XLEN/8,ld,0)

inst_17:
// rs1==x11, 
// opcode:$opcode op1:x11; dest:x24; immval:-0x800; align:0;rd_hi:x25
TEST_LOAD_ZILSD(x14,x8,0,x11,x24,x25,-0x800,12*XLEN/8,ld,0)

inst_18:
// rs1==x26, 
// opcode:$opcode op1:x26; dest:x22; immval:-0x800; align:0;rd_hi:x23
TEST_LOAD_ZILSD(x14,x8,0,x26,x22,x23,-0x800,14*XLEN/8,ld,0)

inst_19:
// rs1==x21, 
// opcode:$opcode op1:x21; dest:x4; immval:-0x800; align:0;rd_hi:x5
TEST_LOAD_ZILSD(x14,x8,0,x21,x4,x5,-0x800,16*XLEN/8,ld,0)

inst_20:
// rs1==x5, 
// opcode:$opcode op1:x5; dest:x10; immval:-0x800; align:0;rd_hi:x11
TEST_LOAD_ZILSD(x14,x8,0,x5,x10,x11,-0x800,18*XLEN/8,ld,0)

inst_21:
// rs1==x3, 
// opcode:$opcode op1:x3; dest:x2; immval:-0x800; align:0;rd_hi:x3
TEST_LOAD_ZILSD(x14,x8,0,x3,x2,x3,-0x800,20*XLEN/8,ld,0)

inst_22:
// rs1==x7, 
// opcode:$opcode op1:x7; dest:x28; immval:-0x800; align:0;rd_hi:x29
TEST_LOAD_ZILSD(x14,x8,0,x7,x28,x29,-0x800,22*XLEN/8,ld,0)

inst_23:
// rs1==x13, 
// opcode:$opcode op1:x13; dest:x6; immval:-0x800; align:0;rd_hi:x7
TEST_LOAD_ZILSD(x14,x8,0,x13,x6,x7,-0x800,24*XLEN/8,ld,0)

inst_24:
// rs1==x4, 
// opcode:$opcode op1:x4; dest:x12; immval:-0x800; align:0;rd_hi:x13
TEST_LOAD_ZILSD(x14,x8,0,x4,x12,x13,-0x800,26*XLEN/8,ld,0)

inst_25:
// rs1==x31, 
// opcode:$opcode op1:x31; dest:x12; immval:-0x800; align:0;rd_hi:x13
TEST_LOAD_ZILSD(x14,x8,0,x31,x12,x13,-0x800,28*XLEN/8,ld,0)

inst_26:
// rs1==x30, 
// opcode:$opcode op1:x30; dest:x4; immval:-0x800; align:0;rd_hi:x5
TEST_LOAD_ZILSD(x14,x8,0,x30,x4,x5,-0x800,30*XLEN/8,ld,0)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_27:
// rs1==x6, 
// opcode:$opcode op1:x6; dest:x16; immval:-0x800; align:0;rd_hi:x17
TEST_LOAD_ZILSD(x2,x8,0,x6,x16,x17,-0x800,0*XLEN/8,ld,0)

inst_28:
// rs1==x25, 
// opcode:$opcode op1:x25; dest:x28; immval:-0x800; align:0;rd_hi:x29
TEST_LOAD_ZILSD(x2,x8,0,x25,x28,x29,-0x800,2*XLEN/8,ld,0)

inst_29:
// rs1==x1, 
// opcode:$opcode op1:x1; dest:x18; immval:-0x800; align:0;rd_hi:x19
TEST_LOAD_ZILSD(x2,x8,0,x1,x18,x19,-0x800,4*XLEN/8,ld,0)

inst_30:
// rs1==x14, 
// opcode:$opcode op1:x14; dest:x6; immval:-0x800; align:0;rd_hi:x7
TEST_LOAD_ZILSD(x2,x8,0,x14,x6,x7,-0x800,6*XLEN/8,ld,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 22*((XLEN/8)/4),4,0xdeadbeef


signature_x14_0:
    .fill 32*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 8*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
