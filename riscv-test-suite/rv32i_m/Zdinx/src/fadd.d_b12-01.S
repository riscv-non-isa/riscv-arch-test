
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Thu Aug 24 09:25:42 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zdinx/fadd.d.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V RV32_Zfinx_Zdinx extension for the fadd.d_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*Zdinx.*);def TEST_CASE_1=True;",fadd.d_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30,fs1 == 1 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x30; dest:x30; op1val:0xffeb0580f98a7dbd; valaddr_reg:x3; op2:x30; op2val:0xffeb0580f98a7dbd
offset:0*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x30, x31,x30,x31,0, 0, 0, 0xf98a7dbd, 0xffeb0580,0xf98a7dbd,0xffeb0580,x3, 0*SIGALIGN, x4,x1, x2)

inst_1:// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x28,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x5be5e5006178e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x26; dest:x28; op1val:0xffdaeaa51052e977; valaddr_reg:x3; op2:x26; op2val:0xffdaeaa51052e977
offset:2*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x28, x29, x26, x27,x26,x27,0, 0, 0, 0x1052e977, 0xffdaeaa5,0x1052e977,0xffdaeaa5,x3, 2*SIGALIGN, x4,x1, x2)

inst_2:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x24, rd==x26,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd51953d9ddca4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x26; op1val:0xffe05c5ccdf19706; valaddr_reg:x3; op2:x24; op2val:0x7fed51953d9ddca4
offset:4*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x26, x27, x28, x29,x24,x25,0, 0, 0, 0xcdf19706, 0xffe05c5c,0x3d9ddca4,0x7fed5195,x3, 4*SIGALIGN, x4,x1, x2)

inst_3:// rs1 == rd != rs2, rs1==x24, rs2==x28, rd==x24,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x24; dest:x24; op1val:0xffe914e0c751c4f4; valaddr_reg:x3; op2:x28; op2val:0x7ff0000000000000
offset:6*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x24, x25, x24, x25,x28,x29,0, 0, 0, 0xc751c4f4, 0xffe914e0,0x00000000,0x7ff00000,x3, 6*SIGALIGN, x4,x1, x2)

inst_4:// rs2 == rd != rs1, rs1==x20, rs2==x22, rd==x22,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x20; dest:x22; op1val:0xffde809082dd48fb; valaddr_reg:x3; op2:x22; op2val:0x7ff0000000000000
offset:8*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x22, x23, x20, x21,x22,x23,0, 0, 0, 0x82dd48fb, 0xffde8090,0x00000000,0x7ff00000,x3, 8*SIGALIGN, x4,x1, x2)

inst_5:// rs1==x22, rs2==x18, rd==x20,fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x22; dest:x20; op1val:0xffed0f42c0dfaf72; valaddr_reg:x3; op2:x18; op2val:0x7ff0000000000000
offset:10*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x20, x21, x22, x23,x18,x19,0, 0, 0, 0xc0dfaf72, 0xffed0f42,0x00000000,0x7ff00000,x3, 10*SIGALIGN, x4,x1, x2)

inst_6:// rs1==x16, rs2==x20, rd==x18,fs1 == 1 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x16; dest:x18; op1val:0xffd209a1991e3307; valaddr_reg:x3; op2:x20; op2val:0x7ff0000000000000
offset:12*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x18, x19, x16, x17,x20,x21,0, 0, 0, 0x991e3307, 0xffd209a1,0x00000000,0x7ff00000,x3, 12*SIGALIGN, x4,x1, x2)

inst_7:// rs1==x18, rs2==x14, rd==x16,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbcdd3a7258aa7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x18; dest:x16; op1val:0xffe3c9adc7329695; valaddr_reg:x3; op2:x14; op2val:0x7febcdd3a7258aa7
offset:14*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x16, x17, x18, x19,x14,x15,0, 0, 0, 0xc7329695, 0xffe3c9ad,0xa7258aa7,0x7febcdd3,x3, 14*SIGALIGN, x4,x1, x2)

inst_8:// rs1==x12, rs2==x16, rd==x14,fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x12; dest:x14; op1val:0xffed1ca42e21585b; valaddr_reg:x3; op2:x16; op2val:0x7ff0000000000000
offset:16*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x14, x15, x12, x13,x16,x17,0, 0, 0, 0x2e21585b, 0xffed1ca4,0x00000000,0x7ff00000,x3, 16*SIGALIGN, x4,x1, x2)
RVTEST_VALBASEUPD(x16,test_dataset_1)

inst_9:// rs1==x14, rs2==x10, rd==x12,fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x14; dest:x12; op1val:0xffe9ed4cb2685903; valaddr_reg:x16; op2:x10; op2val:0x7ff0000000000000
offset:0*FLEN/8; correctval:??; testreg:x2;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x12, x13, x14, x15,x10,x11,0, 0, 0, 0xb2685903, 0xffe9ed4c,0x00000000,0x7ff00000,x16, 18*SIGALIGN, x17,x1, x2)

inst_10:// rs1==x8, rs2==x12, rd==x10,fs1 == 1 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x8; dest:x10; op1val:0xffd3d97530ca446d; valaddr_reg:x16; op2:x12; op2val:0x7ff0000000000000
offset:2*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x10, x11, x8, x9,x12,x13,0, 0, 0, 0x30ca446d, 0xffd3d975,0x00000000,0x7ff00000,x16, 20*SIGALIGN, x17,x1, x14)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_11:// rs1==x10, rs2==x6, rd==x8,fs1 == 1 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x10; dest:x8; op1val:0xffecc3488366e29b; valaddr_reg:x16; op2:x6; op2val:0x7ff0000000000000
offset:4*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x8, x9, x10, x11,x6,x7,0, 0, 0, 0x8366e29b, 0xffecc348,0x00000000,0x7ff00000,x16, 0*SIGALIGN, x17,x1, x14)

inst_12:// rs1==x4, rs2==x8, rd==x6,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x254bcc7a78811 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x4; dest:x6; op1val:0xffde3796147a7f97; valaddr_reg:x16; op2:x8; op2val:0x7fe254bcc7a78811
offset:6*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x6, x7, x4, x5,x8,x9,0, 0, 0, 0x147a7f97, 0xffde3796,0xc7a78811,0x7fe254bc,x16, 2*SIGALIGN, x17,x1, x14)

inst_13:// rs1==x6, rs2==x2, rd==x4,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x6; dest:x4; op1val:0xffdbc978aa879221; valaddr_reg:x16; op2:x2; op2val:0x7ff0000000000000
offset:8*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x4, x5, x6, x7,x2,x3,0, 0, 0, 0xaa879221, 0xffdbc978,0x00000000,0x7ff00000,x16, 4*SIGALIGN, x17,x1, x14)

inst_14:// rs1==x2,fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x2; dest:x30; op1val:0xffed3762f4d1629c; valaddr_reg:x16; op2:x28; op2val:0x7ff0000000000000
offset:10*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x2, x3,x28,x29,0, 0, 0, 0xf4d1629c, 0xffed3762,0x00000000,0x7ff00000,x16, 6*SIGALIGN, x17,x1, x14)

inst_15:// rs2==x4,fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffde8754038aa2cf; valaddr_reg:x16; op2:x4; op2val:0x7ff0000000000000
offset:12*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x4,x5,0, 0, 0, 0x038aa2cf, 0xffde8754,0x00000000,0x7ff00000,x16, 8*SIGALIGN, x17,x1, x14)

inst_16:// rd==x2,fs1 == 1 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x30; dest:x2; op1val:0xffd0abe7f07f8c6f; valaddr_reg:x16; op2:x28; op2val:0x7ff0000000000000
offset:14*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x2, x3, x30, x31,x28,x29,0, 0, 0, 0xf07f8c6f, 0xffd0abe7,0x00000000,0x7ff00000,x16, 10*SIGALIGN, x17,x1, x14)

inst_17:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x201f96c097d1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe18ef1d7a9fa74; valaddr_reg:x16; op2:x26; op2val:0x7fe201f96c097d1c
offset:16*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xd7a9fa74, 0xffe18ef1,0x6c097d1c,0x7fe201f9,x16, 12*SIGALIGN, x17,x1, x14)

inst_18:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe707d21f5c40de; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:18*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x1f5c40de, 0xffe707d2,0x00000000,0x7ff00000,x16, 14*SIGALIGN, x17,x1, x14)

inst_19:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffea65214b23e38e; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:20*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x4b23e38e, 0xffea6521,0x00000000,0x7ff00000,x16, 16*SIGALIGN, x17,x1, x14)

inst_20:// fs1 == 1 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfa980f38509ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xff52b954e52a4bff; valaddr_reg:x16; op2:x26; op2val:0x7fdfa980f38509ed
offset:22*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xe52a4bff, 0xff52b954,0xf38509ed,0x7fdfa980,x16, 18*SIGALIGN, x17,x1, x14)

inst_21:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffebc366e555215f; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:24*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xe555215f, 0xffebc366,0x00000000,0x7ff00000,x16, 20*SIGALIGN, x17,x1, x14)

inst_22:// fs1 == 1 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffd4d025f5a10f55; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:26*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xf5a10f55, 0xffd4d025,0x00000000,0x7ff00000,x16, 22*SIGALIGN, x17,x1, x14)

inst_23:// fs1 == 1 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x84645048e0d5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffc874e2eeac1c13; valaddr_reg:x16; op2:x26; op2val:0x7fe84645048e0d5c
offset:28*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xeeac1c13, 0xffc874e2,0x048e0d5c,0x7fe84645,x16, 24*SIGALIGN, x17,x1, x14)

inst_24:// fs1 == 1 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffce8af77cda8053; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:30*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x7cda8053, 0xffce8af7,0x00000000,0x7ff00000,x16, 26*SIGALIGN, x17,x1, x14)

inst_25:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe9b3a56e2c058e; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:32*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x6e2c058e, 0xffe9b3a5,0x00000000,0x7ff00000,x16, 28*SIGALIGN, x17,x1, x14)

inst_26:// fs1 == 1 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x9a1cc86f24be5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffb49818dfc8788f; valaddr_reg:x16; op2:x26; op2val:0x7fd9a1cc86f24be5
offset:34*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xdfc8788f, 0xffb49818,0x86f24be5,0x7fd9a1cc,x16, 30*SIGALIGN, x17,x1, x14)

inst_27:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe0410cbbfdec45; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:36*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xbbfdec45, 0xffe0410c,0x00000000,0x7ff00000,x16, 32*SIGALIGN, x17,x1, x14)

inst_28:// fs1 == 1 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x52162165ec222 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffbbeb3709a573b7; valaddr_reg:x16; op2:x26; op2val:0x7fe52162165ec222
offset:38*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x09a573b7, 0xffbbeb37,0x165ec222,0x7fe52162,x16, 34*SIGALIGN, x17,x1, x14)

inst_29:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe69c26ac7fce60; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:40*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xac7fce60, 0xffe69c26,0x00000000,0x7ff00000,x16, 36*SIGALIGN, x17,x1, x14)

inst_30:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffea101ccfb0623a; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:42*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xcfb0623a, 0xffea101c,0x00000000,0x7ff00000,x16, 38*SIGALIGN, x17,x1, x14)

inst_31:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffeed7c3ef329d04; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:44*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xef329d04, 0xffeed7c3,0x00000000,0x7ff00000,x16, 40*SIGALIGN, x17,x1, x14)

inst_32:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe2cdc24d268f9f; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:46*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x4d268f9f, 0xffe2cdc2,0x00000000,0x7ff00000,x16, 42*SIGALIGN, x17,x1, x14)

inst_33:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf65e46475bdcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe314c82f3115df; valaddr_reg:x16; op2:x26; op2val:0x7fef65e46475bdcb
offset:48*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x2f3115df, 0xffe314c8,0x6475bdcb,0x7fef65e4,x16, 44*SIGALIGN, x17,x1, x14)

inst_34:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbb61cc5b43304 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe26bbbacf7eaef; valaddr_reg:x16; op2:x26; op2val:0x7febb61cc5b43304
offset:50*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xacf7eaef, 0xffe26bbb,0xc5b43304,0x7febb61c,x16, 46*SIGALIGN, x17,x1, x14)

inst_35:// fs1 == 1 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x8125d36d5e46f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffc83df99d24bacb; valaddr_reg:x16; op2:x26; op2val:0x7fd8125d36d5e46f
offset:52*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x9d24bacb, 0xffc83df9,0x36d5e46f,0x7fd8125d,x16, 48*SIGALIGN, x17,x1, x14)

inst_36:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe39bd67fecd9d5; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:54*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x7fecd9d5, 0xffe39bd6,0x00000000,0x7ff00000,x16, 50*SIGALIGN, x17,x1, x14)

inst_37:// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x21f9542fdc1b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffde7f7bd88d7c8f; valaddr_reg:x16; op2:x26; op2val:0x7fe21f9542fdc1b0
offset:56*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xd88d7c8f, 0xffde7f7b,0x42fdc1b0,0x7fe21f95,x16, 52*SIGALIGN, x17,x1, x14)

inst_38:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe83e4a9485598d; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:58*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x9485598d, 0xffe83e4a,0x00000000,0x7ff00000,x16, 54*SIGALIGN, x17,x1, x14)

inst_39:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffed8c56582791a6; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:60*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x582791a6, 0xffed8c56,0x00000000,0x7ff00000,x16, 56*SIGALIGN, x17,x1, x14)

inst_40:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffecbdd58ecc1b45; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:62*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x8ecc1b45, 0xffecbdd5,0x00000000,0x7ff00000,x16, 58*SIGALIGN, x17,x1, x14)

inst_41:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdd2178215e056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe14c9836bbe6ff; valaddr_reg:x16; op2:x26; op2val:0x7fedd2178215e056
offset:64*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x36bbe6ff, 0xffe14c98,0x8215e056,0x7fedd217,x16, 60*SIGALIGN, x17,x1, x14)

inst_42:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf63ad242f7a0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe691ae7e1929e8; valaddr_reg:x16; op2:x26; op2val:0x7fef63ad242f7a0b
offset:66*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x7e1929e8, 0xffe691ae,0x242f7a0b,0x7fef63ad,x16, 62*SIGALIGN, x17,x1, x14)

inst_43:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe9f8dcc4f1275c; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:68*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xc4f1275c, 0xffe9f8dc,0x00000000,0x7ff00000,x16, 64*SIGALIGN, x17,x1, x14)

inst_44:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffeca428c2b7c81f; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:70*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xc2b7c81f, 0xffeca428,0x00000000,0x7ff00000,x16, 66*SIGALIGN, x17,x1, x14)

inst_45:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffee64794dad7d48; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:72*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x4dad7d48, 0xffee6479,0x00000000,0x7ff00000,x16, 68*SIGALIGN, x17,x1, x14)

inst_46:// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffdcd606a3f0f54d; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:74*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xa3f0f54d, 0xffdcd606,0x00000000,0x7ff00000,x16, 70*SIGALIGN, x17,x1, x14)

inst_47:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffefe1581ecd07ea; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:76*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x1ecd07ea, 0xffefe158,0x00000000,0x7ff00000,x16, 72*SIGALIGN, x17,x1, x14)

inst_48:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc05b7f6ba0d90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe962eb496df1c1; valaddr_reg:x16; op2:x26; op2val:0x7fec05b7f6ba0d90
offset:78*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x496df1c1, 0xffe962eb,0xf6ba0d90,0x7fec05b7,x16, 74*SIGALIGN, x17,x1, x14)

inst_49:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffe39beb50761e3d; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:80*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x50761e3d, 0xffe39beb,0x00000000,0x7ff00000,x16, 76*SIGALIGN, x17,x1, x14)

inst_50:// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffeb0580f98a7dbd; valaddr_reg:x16; op2:x26; op2val:0x7ff0000000000000
offset:82*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0xf98a7dbd, 0xffeb0580,0x00000000,0x7ff00000,x16, 78*SIGALIGN, x17,x1, x14)

inst_51:// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x5be5e5006178e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.d ; op1:x28; dest:x30; op1val:0xffdaeaa51052e977; valaddr_reg:x16; op2:x26; op2val:0x7fe5be5e5006178e
offset:84*FLEN/8; correctval:??; testreg:x14;
fcsr_val:0*/
TEST_ZDINX_PPP_OP_32(fadd.d, x30, x31, x28, x29,x26,x27,0, 0, 0, 0x1052e977, 0xffdaeaa5,0x5006178e,0x7fe5be5e,x16, 80*SIGALIGN, x17,x1, x14)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0xf98a7dbd,64,FLEN)
NAN_BOXED(0xf98a7dbd,64,FLEN)
NAN_BOXED(0x1052e977,64,FLEN)
NAN_BOXED(0x1052e977,64,FLEN)
NAN_BOXED(0xcdf19706,64,FLEN)
NAN_BOXED(0x3d9ddca4,64,FLEN)
NAN_BOXED(0xc751c4f4,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x82dd48fb,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xc0dfaf72,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x991e3307,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xc7329695,64,FLEN)
NAN_BOXED(0xa7258aa7,64,FLEN)
NAN_BOXED(0x2e21585b,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
test_dataset_1:
NAN_BOXED(0xb2685903,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x30ca446d,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x8366e29b,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x147a7f97,64,FLEN)
NAN_BOXED(0xc7a78811,64,FLEN)
NAN_BOXED(0xaa879221,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xf4d1629c,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x038aa2cf,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xf07f8c6f,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xd7a9fa74,64,FLEN)
NAN_BOXED(0x6c097d1c,64,FLEN)
NAN_BOXED(0x1f5c40de,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x4b23e38e,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xe52a4bff,64,FLEN)
NAN_BOXED(0xf38509ed,64,FLEN)
NAN_BOXED(0xe555215f,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xf5a10f55,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xeeac1c13,64,FLEN)
NAN_BOXED(0x048e0d5c,64,FLEN)
NAN_BOXED(0x7cda8053,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x6e2c058e,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xdfc8788f,64,FLEN)
NAN_BOXED(0x86f24be5,64,FLEN)
NAN_BOXED(0xbbfdec45,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x09a573b7,64,FLEN)
NAN_BOXED(0x165ec222,64,FLEN)
NAN_BOXED(0xac7fce60,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xcfb0623a,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xef329d04,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x4d268f9f,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x2f3115df,64,FLEN)
NAN_BOXED(0x6475bdcb,64,FLEN)
NAN_BOXED(0xacf7eaef,64,FLEN)
NAN_BOXED(0xc5b43304,64,FLEN)
NAN_BOXED(0x9d24bacb,64,FLEN)
NAN_BOXED(0x36d5e46f,64,FLEN)
NAN_BOXED(0x7fecd9d5,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xd88d7c8f,64,FLEN)
NAN_BOXED(0x42fdc1b0,64,FLEN)
NAN_BOXED(0x9485598d,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x582791a6,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x8ecc1b45,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x36bbe6ff,64,FLEN)
NAN_BOXED(0x8215e056,64,FLEN)
NAN_BOXED(0x7e1929e8,64,FLEN)
NAN_BOXED(0x242f7a0b,64,FLEN)
NAN_BOXED(0xc4f1275c,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xc2b7c81f,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x4dad7d48,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xa3f0f54d,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x1ecd07ea,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x496df1c1,64,FLEN)
NAN_BOXED(0xf6ba0d90,64,FLEN)
NAN_BOXED(0x50761e3d,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0xf98a7dbd,64,FLEN)
NAN_BOXED(0x00000000,64,FLEN)
NAN_BOXED(0x1052e977,64,FLEN)
NAN_BOXED(0x5006178e,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 22*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 82*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
