
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.1
// timestamp : Tue Dec 15 15:36:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the add instruction of the RISC-V I extension for the add covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
//#include "arch_test_new.h"


RVTEST_ISA("RV32I")
#if __riscv_xlen == 32
#define PPN_1_OFFSET    22
#define PPN_0_OFFSET    12
#define VPN0_LEN        10
#define PTE_SIZE        4
#else
#define PPN_4_OFFSET    48
#define PPN_3_OFFSET    39
#define PPN_2_OFFSET    30
#define PPN_1_OFFSET    21
#define PPN_0_OFFSET    12
#define VPN0_LEN        9
#define PTE_SIZE        8
#endif

#define BYTE_ALIGN      0
#define HWORD_ALIGN     1
#define WORD_ALIGN      2
#define DWORD_ALIGN     3


#define PG_PERMISSION (PTE_A | PTE_D | PTE_X | PTE_W |PTE_R | PTE_V)
#define VADDR           0xdeadbeef
#define SET_SATP(rootaddr, mode)\
la    t0, rootaddr;\
srli  t0, t0, RISCV_PGSHIFT;\
li    t1, SATP32_MODE;\
or    t0, t1, t0;\
csrw  satp, t0;\
sfence.vma;


#define SET_sv32_PAGE(vaddr, paddr)\
la    a0, vaddr;\
srli  t1, a0, PPN_1_OFFSET;\
srli  t0, a0, PPN_0_OFFSET;\
addi  t2, x0, -1;\
srli  t2, t2, 22;\
and   t0, t0, t2;\
slli  t1, t1, WORD_ALIGN;\
slli  t0, t0, WORD_ALIGN;\
la    s1, level1_pt;\
la    s0, level0_pt;\
add   t1, t1, s1;\
add   t0, t0, s0;\
srli  s0, s0, RISCV_PGSHIFT;\
slli  s0, s0, PTE_PPN_SHIFT;\
ori   s0, s0, PTE_V;\
la    s2, paddr;\
srli  s2, s2, RISCV_PGSHIFT;\
slli  s2, s2, PTE_PPN_SHIFT;\
ori   s2, s2, PG_PERMISSION;\
sw    s2, 0(t0);\
sw    s0, 0(t1);


.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*); def TEST_CASE_1=True;",VM)
RVTEST_SIGBASE( x21,signature_x8_0)
.align 2
  SET_sv32_PAGE(dummypage, targetpage)
  SET_sv32_PAGE(S_mode_insts, S_mode_insts)
  la    t0, S_mode_insts
  csrw  mepc, t0
  li    t0, MSTATUS_MPP
  csrc mstatus, t0
  li  t0, (MSTATUS_MPP & (MSTATUS_MPP>>1))
  csrrs t1, mstatus, t0
  la    t2, return_to_M
  csrw  mtvec, t2
  mret
.align 12
S_mode_insts:
  SET_SATP(level1_pt,SATP_MODE_SV32)
  li    t0, VADDR
  la    t1, dummypage
  sw    t2, 0(t1)
  ecall
.align 8
return_to_M:

#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe

.align RISCV_PGSHIFT  # alignment of Page table entry
targetpage:
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0xbeef
level0_pt: # filling Page
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0x0
level1_pt: # filling Page
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0x0
level0_pt1: # filling Page
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0x0
level1_pt1: # filling Page
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0x0
level0_pt2: # filling Page
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0x0
level1_pt2: # filling Page
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0x0

arr: .word 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4
dummypage:
    .fill (RISCV_PGSIZE/PTE_SIZE),PTE_SIZE,0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
signature_x8_0:
    .fill 6*(XLEN/32),4,0xdeadbeef
signature_x6_0:
    .fill 1*(XLEN/32),4,0xdeadbeef
RVMODEL_DATA_END


