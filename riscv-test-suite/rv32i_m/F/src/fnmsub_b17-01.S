
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b17 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b17)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rd == rs2 == rs3 != rs1, rs1==f12, rs2==f4, rs3==f4, rd==f4,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2872e3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f12; op2:f4; op3:f4; dest:f4; op1val:0x7ab1cc28; op2val:0x7d2872e3;
op3val:0x7d2872e3; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f4, f12, f4, f4, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f20, rs2==f14, rs3==f20, rd==f1,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x218502 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0f18e6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f20; op2:f14; op3:f20; dest:f1; op1val:0x7c218502; op2val:0x7f0f18e6;
op3val:0x7c218502; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f1, f20, f14, f20, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f17, rs2==f15, rs3==f10, rd==f15,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x21ceeb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20cb47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f17; op2:f15; op3:f10; dest:f15; op1val:0x7c21ceeb; op2val:0x7f20cb47;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f15, f17, f15, f10, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f30, rs2==f10, rs3==f12, rd==f9,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x3a1788 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f10; op3:f12; dest:f9; op1val:0x7c884a01; op2val:0x7d3a1788;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f9, f30, f10, f12, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f29, rs2==f2, rs3==f5, rd==f29,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0e1418 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x381fbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f29; op2:f2; op3:f5; dest:f29; op1val:0x7c8e1418; op2val:0x7eb81fbe;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f29, f29, f2, f5, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f5, rs2==f30, rs3==f30, rd==f26,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x256764 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5a9856 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f5; op2:f30; op3:f30; dest:f26; op1val:0x7ca56764; op2val:0x7eda9856;
op3val:0x7eda9856; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f26, f5, f30, f30, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rs3 != rd, rs1==f9, rs2==f9, rs3==f9, rd==f30,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40c8f3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x179770 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f9; op2:f9; op3:f9; dest:f30; op1val:0x7cc0c8f3; op2val:0x7cc0c8f3;
op3val:0x7cc0c8f3; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f30, f9, f9, f9, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f8, rs2==f8, rs3==f16, rd==f25,fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41cf2f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f8; op2:f8; op3:f16; dest:f25; op1val:0x7d015d4c; op2val:0x7d015d4c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f25, f8, f8, f16, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs2 == rs3 == rd, rs1==f22, rs2==f22, rs3==f22, rd==f22,fs1 == 0 and fe1 == 0xfa and fm1 == 0x07c07a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6bfb00 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f22; op2:f22; op3:f22; dest:f22; op1val:0x7d07c07a; op2val:0x7d07c07a;
op3val:0x7d07c07a; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f22, f22, f22, f22, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rs2 == rd != rs3, rs1==f16, rs2==f16, rs3==f26, rd==f16,fs1 == 0 and fe1 == 0xfa and fm1 == 0x44b45e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x119488 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f16; op2:f16; op3:f26; dest:f16; op1val:0x7d44b45e; op2val:0x7d44b45e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f16, f16, f16, f26, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f14, rs2==f29, rs3==f14, rd==f14,fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0970bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f14; op2:f29; op3:f14; dest:f14; op1val:0x7d52ba4d; op2val:0x7f0970bd;
op3val:0x7d52ba4d; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f14, f14, f29, f14, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f24, rs2==f3, rs3==f11, rd==f11,fs1 == 0 and fe1 == 0xfa and fm1 == 0x5be595 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x23283d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f24; op2:f3; op3:f11; dest:f11; op1val:0x7d5be595; op2val:0x7ea3283d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f11, f24, f3, f11, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f13, rs2==f12, rs3==f15, rd==f0,fs1 == 0 and fe1 == 0xfa and fm1 == 0x7574e1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x092190 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f13; op2:f12; op3:f15; dest:f0; op1val:0x7d7574e1; op2val:0x7e092190;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f0, f13, f12, f15, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f6, rs2==f25, rs3==f7, rd==f5,fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d00c9 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x18862f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f6; op2:f25; op3:f7; dest:f5; op1val:0x7d8d00c9; op2val:0x7d98862f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f5, f6, f25, f7, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f28, rs2==f13, rs3==f2, rd==f17,fs1 == 0 and fe1 == 0xfb and fm1 == 0x133df8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fa54d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f28; op2:f13; op3:f2; dest:f17; op1val:0x7d933df8; op2val:0x7f0fa54d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f17, f28, f13, f2, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f21, rs2==f20, rs3==f27, rd==f19,fs1 == 0 and fe1 == 0xfb and fm1 == 0x1e69a3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x61b309 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f21; op2:f20; op3:f27; dest:f19; op1val:0x7d9e69a3; op2val:0x7ee1b309;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f19, f21, f20, f27, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f1, rs2==f5, rs3==f31, rd==f28,fs1 == 0 and fe1 == 0xfb and fm1 == 0x279c91 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x032ddf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f1; op2:f5; op3:f31; dest:f28; op1val:0x7da79c91; op2val:0x7d032ddf;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f28, f1, f5, f31, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f15, rs2==f31, rs3==f23, rd==f3,fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x22097f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f15; op2:f31; op3:f23; dest:f3; op1val:0x7dba4a99; op2val:0x7f22097f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f3, f15, f31, f23, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f26, rs2==f21, rs3==f18, rd==f23,fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x522d12 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f26; op2:f21; op3:f18; dest:f23; op1val:0x7dbf6d07; op2val:0x7d522d12;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f23, f26, f21, f18, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f7, rs2==f26, rs3==f19, rd==f31,fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x60364e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f7; op2:f26; op3:f19; dest:f31; op1val:0x7dc733d7; op2val:0x7e60364e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f7, f26, f19, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f10, rs2==f11, rs3==f3, rd==f27,fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7e9d6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f10; op2:f11; op3:f3; dest:f27; op1val:0x7dd92a8c; op2val:0x7e7e9d6e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f27, f10, f11, f3, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f31, rs2==f0, rs3==f17, rd==f8,fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c71b6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14aa96 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f31; op2:f0; op3:f17; dest:f8; op1val:0x7ddc71b6; op2val:0x7f14aa96;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f8, f31, f0, f17, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f11, rs2==f6, rs3==f28, rd==f12,fs1 == 0 and fe1 == 0xfb and fm1 == 0x60facc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x18fe38 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f11; op2:f6; op3:f28; dest:f12; op1val:0x7de0facc; op2val:0x7e98fe38;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f12, f11, f6, f28, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f23, rs2==f27, rs3==f21, rd==f2,fs1 == 0 and fe1 == 0xfb and fm1 == 0x6758c9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x73c956 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f23; op2:f27; op3:f21; dest:f2; op1val:0x7de758c9; op2val:0x7ef3c956;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f2, f23, f27, f21, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f19, rs2==f1, rs3==f6, rd==f24,fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 0 and fe2 == 0xf6 and fm2 == 0x6522f2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f19; op2:f1; op3:f6; dest:f24; op1val:0x7def9cda; op2val:0x7b6522f2;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f24, f19, f1, f6, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f27, rs2==f23, rs3==f8, rd==f7,fs1 == 0 and fe1 == 0xfb and fm1 == 0x76b68b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04a412 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f27; op2:f23; op3:f8; dest:f7; op1val:0x7df6b68b; op2val:0x7f04a412;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f7, f27, f23, f8, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f18, rs2==f24, rs3==f0, rd==f13,fs1 == 0 and fe1 == 0xfc and fm1 == 0x038f64 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x180041 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f18; op2:f24; op3:f0; dest:f13; op1val:0x7e038f64; op2val:0x7f180041;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f13, f18, f24, f0, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f25, rs2==f19, rs3==f29, rd==f6,fs1 == 0 and fe1 == 0xfc and fm1 == 0x044948 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0a6bad and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f25; op2:f19; op3:f29; dest:f6; op1val:0x7e044948; op2val:0x7e8a6bad;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f6, f25, f19, f29, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f4, rs2==f17, rs3==f25, rd==f10,fs1 == 0 and fe1 == 0xfc and fm1 == 0x099707 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x104e6f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f4; op2:f17; op3:f25; dest:f10; op1val:0x7e099707; op2val:0x7c904e6f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f10, f4, f17, f25, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f3, rs2==f7, rs3==f24, rd==f18,fs1 == 0 and fe1 == 0xfc and fm1 == 0x0cfe89 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x55f571 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f3; op2:f7; op3:f24; dest:f18; op1val:0x7e0cfe89; op2val:0x7e55f571;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f18, f3, f7, f24, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f0, rs2==f18, rs3==f13, rd==f21,fs1 == 0 and fe1 == 0xfc and fm1 == 0x0eeeea and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d5498 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f0; op2:f18; op3:f13; dest:f21; op1val:0x7e0eeeea; op2val:0x7e4d5498;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f21, f0, f18, f13, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f2, rs2==f28, rs3==f1, rd==f20,fs1 == 0 and fe1 == 0xfc and fm1 == 0x11483d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1ffee2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f2; op2:f28; op3:f1; dest:f20; op1val:0x7e11483d; op2val:0x7e9ffee2;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f20, f2, f28, f1, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1ae6b6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0x7f1ae6b6;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7c800c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x7e7c800c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x20bb94 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0x7e20bb94;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x178d60 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4d4cf5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e178d60; op2val:0x7ecd4cf5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7705e2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0x7df705e2;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x215a9a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x60ae32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e215a9a; op2val:0x7ee0ae32;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26a55d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x395f47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e26a55d; op2val:0x7f395f47;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2bea1b and fs2 == 0 and fe2 == 0xf6 and fm2 == 0x04bcca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2bea1b; op2val:0x7b04bcca;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cd245 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39bb69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cd245; op2val:0x7db9bb69;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2eb1b3 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x511a8e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2eb1b3; op2val:0x7d511a8e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x33f756 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3f29ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e33f756; op2val:0x7f3f29ee;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36810f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x673c15 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e36810f; op2val:0x7e673c15;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36c1bf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x50fbe8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e36c1bf; op2val:0x7ed0fbe8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x375161 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0feb39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e375161; op2val:0x7e0feb39;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x39f3eb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0a10b2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e39f3eb; op2val:0x7e0a10b2;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3955 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4dc2f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3c3955; op2val:0x7ecdc2f4;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x401d9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16144b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e401d9b; op2val:0x7f16144b;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x469f5a and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0fc236 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e469f5a; op2val:0x7e0fc236;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c2b76 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1337c1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c2b76; op2val:0x7e9337c1;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4fbc01 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x190f76 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4fbc01; op2val:0x7d990f76;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x050002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x7e850002;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4e462d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x7e4e462d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x530441 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7f86ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e530441; op2val:0x7eff86ba;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x7f1b8e8c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61b55e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x139ba8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61b55e; op2val:0x7f139ba8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x65f120 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x251f3f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e65f120; op2val:0x7f251f3f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x665064 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7e8d56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e665064; op2val:0x7efe8d56;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66b5d2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x10d45e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66b5d2; op2val:0x7e90d45e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x675fa1 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x3e8943 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e675fa1; op2val:0x7cbe8943;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0xfa and fm2 == 0x6c7439 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x7d6c7439;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2ae8b7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x7e2ae8b7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0dc14f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x7e8dc14f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7198e7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x7e7198e7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x58913a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x7ed8913a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x002951 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x200a1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e802951; op2val:0x7f200a1a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00905e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x27824d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80905e; op2val:0x7ea7824d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41e692 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x7e41e692;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x09dfb8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x7f09dfb8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x07bc04 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x7f07bc04;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0781f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x229a06 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8781f6; op2val:0x7f229a06;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a33b5 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x334304 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a33b5; op2val:0x7e334304;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d1be6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x184f43 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8d1be6; op2val:0x7e984f43;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b435e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0x7ecb435e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e85af and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x7ebe85af;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1320d0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x54336a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9320d0; op2val:0x7ed4336a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x142c31 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x06bfe7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e942c31; op2val:0x7e86bfe7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x161cff and fs2 == 0 and fe2 == 0xfd and fm2 == 0x51086c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e961cff; op2val:0x7ed1086c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0cd956 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x7f0cd956;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ae1d2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4fef6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ae1d2; op2val:0x7ecfef6d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ee152 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x344bd0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ee152; op2val:0x7f344bd0;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f70d6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5eb4e5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f70d6; op2val:0x7edeb4e5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7fc6b5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x7d7fc6b5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1d41a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x7e9d41a9;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x217a32 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x05458a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea17a32; op2val:0x7f05458a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3597f6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x7eb597f6;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x27d146 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1150a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea7d146; op2val:0x7f1150a9;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2fc21e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6ff4bc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eafc21e; op2val:0x7e6ff4bc;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x323b21 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3d26fe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb23b21; op2val:0x7dbd26fe;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x337ad1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x30557d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb37ad1; op2val:0x7e30557d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x35891f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a03a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb5891f; op2val:0x7f0a03a1;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1634d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x7f1634d7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x660428 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x7ee60428;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a6049 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x7f0a6049;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2593da and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x7ea593da;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x094f70 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x7f094f70;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46a01f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2a21ee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec6a01f; op2val:0x7eaa21ee;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474d3f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5dfbef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74d3f; op2val:0x7e5dfbef;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7740d5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x7ef740d5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5298e8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x7ed298e8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48e6cd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e5202 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec8e6cd; op2val:0x7f0e5202;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4913df and fs2 == 0 and fe2 == 0xfd and fm2 == 0x30d847 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec913df; op2val:0x7eb0d847;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4a994e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5a40dd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eca994e; op2val:0x7eda40dd;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b58ad and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x63b5e5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb58ad; op2val:0x7ce3b5e5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4de363 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x2e05d1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecde363; op2val:0x7dae05d1;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eee0f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3286a3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceee0f; op2val:0x7f3286a3;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e02b8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x7f0e02b8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x097aef and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x7f097aef;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56c198 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6e20e0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6c198; op2val:0x7eee20e0;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0bc2ae and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x7e0bc2ae;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c3c85 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5ad8ea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc3c85; op2val:0x7e5ad8ea;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ed5d0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x01b289 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eded5d0; op2val:0x7f01b289;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x605a49 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d9b52 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee05a49; op2val:0x7f2d9b52;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x608143 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d3073 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee08143; op2val:0x7e4d3073;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x60e085 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x71cd8a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee0e085; op2val:0x7e71cd8a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x75c78c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x7e75c78c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x55173a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x7ed5173a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x66ec7b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0b8d5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee6ec7b; op2val:0x7f0b8d5c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x67e7c0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7046ce and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee7e7c0; op2val:0x7ef046ce;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x681a5c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16436d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee81a5c; op2val:0x7f16436d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a6b5b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6febf0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea6b5b; op2val:0x7defebf0;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c7765 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x72c1df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec7765; op2val:0x7ef2c1df;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c8964 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x10ae28 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eec8964; op2val:0x7f10ae28;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70a207 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x673028 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0a207; op2val:0x7e673028;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x330a47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x7eb30a47;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x259c47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x7f259c47;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x098d5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x7e098d5c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735187 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3b945b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35187; op2val:0x7f3b945b;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1acd2f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x7f1acd2f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76e4d9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2c4d11 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef6e4d9; op2val:0x7f2c4d11;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x780c49 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2a94d2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef80c49; op2val:0x7eaa94d2;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x614269 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x7ee14269;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x794f1c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x69f89b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef94f1c; op2val:0x7e69f89b;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x29e684 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x7f29e684;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7b2a84 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1ac336 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efb2a84; op2val:0x7f1ac336;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3d2101 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x7dbd2101;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e51b6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a5eb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe51b6; op2val:0x7f2a5eb4;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x002bfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ce08c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f002bfc; op2val:0x7f0ce08c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00e26f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7a8560 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00e26f; op2val:0x7dfa8560;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01615c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x469037 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01615c; op2val:0x7ec69037;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04b289 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x370ec5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04b289; op2val:0x7f370ec5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1c6dc8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x7d9c6dc8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0642e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4e6013 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0642e8; op2val:0x7ece6013;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076c8a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1eab47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076c8a; op2val:0x7e9eab47;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2224db and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x7e2224db;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x091ce4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30d9d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f091ce4; op2val:0x7f30d9d7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0e06b2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0x7f0e06b2;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x01aad7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x7f01aad7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7e2c3a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x7e7e2c3a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bf641 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x03fb3f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bf641; op2val:0x7d83fb3f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20a569 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x7f20a569;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fcd1f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x336f9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0fcd1f; op2val:0x7f336f9b;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x10cdee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38931c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f10cdee; op2val:0x7f38931c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x115cea and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a28e8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f115cea; op2val:0x7e9a28e8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1167f4 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x62f85a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1167f4; op2val:0x7e62f85a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x07fa5d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x7e87fa5d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13ed79 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7e2f1b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13ed79; op2val:0x7efe2f1b;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14a5b3 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5c95cc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14a5b3; op2val:0x7ddc95cc;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x159092 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ba3b9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f159092; op2val:0x7f0ba3b9;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5c6184 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0x7ddc6184;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1822d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6f56b5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1822d8; op2val:0x7eef56b5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x195c05 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5ed6a0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f195c05; op2val:0x7cded6a0;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19b6dc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1d9e09 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19b6dc; op2val:0x7e9d9e09;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19c644 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2abc06 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19c644; op2val:0x7eaabc06;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19d2a8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6f342a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19d2a8; op2val:0x7eef342a;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a34be and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b1c44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a34be; op2val:0x7f2b1c44;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1e1c9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x7f1e1c9c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32e4e1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0x7f32e4e1;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c9fa7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fc01f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c9fa7; op2val:0x7f0fc01f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x201d48 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x601303 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f201d48; op2val:0x7e601303;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dc006 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x7f1dc006;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x36dceb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x7f36dceb;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2099c0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x36eb6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2099c0; op2val:0x7eb6eb6c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23f1fb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x39ed2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23f1fb; op2val:0x7e39ed2e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23f4fa and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e0af1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23f4fa; op2val:0x7f3e0af1;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x240ddf and fs2 == 0 and fe2 == 0xfb and fm2 == 0x044ae8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f240ddf; op2val:0x7d844ae8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x244343 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0202a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f244343; op2val:0x7e0202a2;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24caba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x66d514 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24caba; op2val:0x7ee6d514;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d9b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cc100 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d9b0; op2val:0x7f2cc100;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x261957 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x70b43d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f261957; op2val:0x7e70b43d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d12 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x710596 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f269d12; op2val:0x7e710596;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272357 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x055fe9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272357; op2val:0x7f055fe9;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28be0d and fs2 == 0 and fe2 == 0xfb and fm2 == 0x15b097 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28be0d; op2val:0x7d95b097;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28e580 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33ce10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28e580; op2val:0x7f33ce10;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28f4b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d7cc7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28f4b0; op2val:0x7f3d7cc7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a571c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e7b77 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a571c; op2val:0x7f2e7b77;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcd0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x7f2cbcd0;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x111231 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x7e911231;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6353 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17db25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6353; op2val:0x7f17db25;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a2e4c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0x7f0a2e4c;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x053104 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x7f053104;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x325b88 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x246dcc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f325b88; op2val:0x7f246dcc;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34ba29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fb3a8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34ba29; op2val:0x7e8fb3a8;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x320e71 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x7f320e71;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3821d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b460e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3821d7; op2val:0x7f2b460e;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x40dca5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x7e40dca5;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3935a3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2db39d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3935a3; op2val:0x7f2db39d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ad3ab and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e86f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ad3ab; op2val:0x7e9e86f9;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c4834 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4214d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c4834; op2val:0x7ec214d7;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2872e3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x7d2872e3;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x218502 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0f18e6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c218502; op2val:0x7f0f18e6;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x21ceeb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20cb47 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c21ceeb; op2val:0x7f20cb47;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0e1418 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x381fbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c8e1418; op2val:0x7eb81fbe;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x256764 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5a9856 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca56764; op2val:0x7eda9856;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x40c8f3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x179770 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc0c8f3; op2val:0x7e179770;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41cf2f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x7ec1cf2f;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x07c07a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6bfb00 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d07c07a; op2val:0x7eebfb00;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x44b45e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x119488 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d44b45e; op2val:0x7f119488;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0970bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x7f0970bd;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5be595 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x23283d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d5be595; op2val:0x7ea3283d;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2082571522,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2082571522,32,FLEN)
NAN_BOXED(2082590443,32,FLEN)
NAN_BOXED(2132855623,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(2100959112,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2089686040,32,FLEN)
NAN_BOXED(2125995966,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2091214692,32,FLEN)
NAN_BOXED(2128255062,32,FLEN)
NAN_BOXED(2128255062,32,FLEN)
NAN_BOXED(2093009139,32,FLEN)
NAN_BOXED(2093009139,32,FLEN)
NAN_BOXED(2093009139,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2097660026,32,FLEN)
NAN_BOXED(2097660026,32,FLEN)
NAN_BOXED(2097660026,32,FLEN)
NAN_BOXED(2101654622,32,FLEN)
NAN_BOXED(2101654622,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2103174549,32,FLEN)
NAN_BOXED(2124621885,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2104849633,32,FLEN)
NAN_BOXED(2114527632,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2106392777,32,FLEN)
NAN_BOXED(2107147823,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2106801656,32,FLEN)
NAN_BOXED(2131731789,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2107533731,32,FLEN)
NAN_BOXED(2128720649,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2108136593,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2132937087,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2122227054,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2111599030,32,FLEN)
NAN_BOXED(2132060822,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2111896268,32,FLEN)
NAN_BOXED(2123955768,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2112313545,32,FLEN)
NAN_BOXED(2129906006,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2113320587,32,FLEN)
NAN_BOXED(2131010578,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2114162532,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2114210120,32,FLEN)
NAN_BOXED(2123000749,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2114557703,32,FLEN)
NAN_BOXED(2089832047,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2114780809,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2114907882,32,FLEN)
NAN_BOXED(2118997144,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2115061821,32,FLEN)
NAN_BOXED(2124414690,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(2116074388,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2115472736,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2116115098,32,FLEN)
NAN_BOXED(2128653874,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2116461917,32,FLEN)
NAN_BOXED(2134466375,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2116807195,32,FLEN)
NAN_BOXED(2063908042,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2116866629,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2116989363,32,FLEN)
NAN_BOXED(2102467214,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2117334870,32,FLEN)
NAN_BOXED(2134845934,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2117501199,32,FLEN)
NAN_BOXED(2120694805,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2117517759,32,FLEN)
NAN_BOXED(2127625192,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2117554529,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2117727211,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2117876053,32,FLEN)
NAN_BOXED(2127414004,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2118131099,32,FLEN)
NAN_BOXED(2132153419,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2118557530,32,FLEN)
NAN_BOXED(2114961974,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2118921078,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2119154689,32,FLEN)
NAN_BOXED(2107182966,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2119058989,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2119369793,32,FLEN)
NAN_BOXED(2130675386,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2120332638,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2120610080,32,FLEN)
NAN_BOXED(2133139263,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2120634468,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2120660434,32,FLEN)
NAN_BOXED(2123420766,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2120703905,32,FLEN)
NAN_BOXED(2092861763,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(2104259641,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(2116741303,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(2123219279,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2121373927,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122328401,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122354782,32,FLEN)
NAN_BOXED(2124907085,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122809846,32,FLEN)
NAN_BOXED(2132974086,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122986421,32,FLEN)
NAN_BOXED(2117288708,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2123176934,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(2126415279,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2123571408,32,FLEN)
NAN_BOXED(2127836010,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2123639857,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2123767039,32,FLEN)
NAN_BOXED(2127628396,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2131548502,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124079570,32,FLEN)
NAN_BOXED(2127556461,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124341586,32,FLEN)
NAN_BOXED(2134133712,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124378326,32,FLEN)
NAN_BOXED(2128524517,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2105525941,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2124235177,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124511794,32,FLEN)
NAN_BOXED(2131051914,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2125830134,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2124927302,32,FLEN)
NAN_BOXED(2131841193,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2125447710,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2125609761,32,FLEN)
NAN_BOXED(2109548286,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2125691601,32,FLEN)
NAN_BOXED(2117096829,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2125826335,32,FLEN)
NAN_BOXED(2131362721,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2129003560,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(2124780506,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2131316592,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2126946335,32,FLEN)
NAN_BOXED(2125079022,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2126990655,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127095501,32,FLEN)
NAN_BOXED(2131644930,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127107039,32,FLEN)
NAN_BOXED(2125518919,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127206734,32,FLEN)
NAN_BOXED(2128232669,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127255725,32,FLEN)
NAN_BOXED(2095298021,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127422307,32,FLEN)
NAN_BOXED(2108556753,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127490575,32,FLEN)
NAN_BOXED(2134017699,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128003480,32,FLEN)
NAN_BOXED(2129535200,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2114699950,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128362629,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128532944,32,FLEN)
NAN_BOXED(2130817673,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128632393,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128642371,32,FLEN)
NAN_BOXED(2118987891,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128666757,32,FLEN)
NAN_BOXED(2121387402,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(2121648012,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2127894330,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129063035,32,FLEN)
NAN_BOXED(2131463516,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129127360,32,FLEN)
NAN_BOXED(2129675982,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129140316,32,FLEN)
NAN_BOXED(2132165485,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129292123,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129426277,32,FLEN)
NAN_BOXED(2129838559,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129430884,32,FLEN)
NAN_BOXED(2131799592,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129699335,32,FLEN)
NAN_BOXED(2120691752,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(2125662791,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2133171271,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2129875335,32,FLEN)
NAN_BOXED(2134611035,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(2132462895,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130109657,32,FLEN)
NAN_BOXED(2133609745,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130185289,32,FLEN)
NAN_BOXED(2125108434,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2128691817,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130267932,32,FLEN)
NAN_BOXED(2120874139,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130389636,32,FLEN)
NAN_BOXED(2132460342,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2109546753,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130596278,32,FLEN)
NAN_BOXED(2133483188,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130717692,32,FLEN)
NAN_BOXED(2131550348,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130764399,32,FLEN)
NAN_BOXED(2113570144,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2130796892,32,FLEN)
NAN_BOXED(2126942263,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131014281,32,FLEN)
NAN_BOXED(2134314693,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131116776,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131192970,32,FLEN)
NAN_BOXED(2124327751,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2116166875,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131303652,32,FLEN)
NAN_BOXED(2133907927,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2130815703,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131490369,32,FLEN)
NAN_BOXED(2105801535,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2132845929,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131741983,32,FLEN)
NAN_BOXED(2134077339,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131807726,32,FLEN)
NAN_BOXED(2134414108,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131844330,32,FLEN)
NAN_BOXED(2124032232,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131847156,32,FLEN)
NAN_BOXED(2120415322,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132012409,32,FLEN)
NAN_BOXED(2130587419,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132059571,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132119698,32,FLEN)
NAN_BOXED(2131469241,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132288216,32,FLEN)
NAN_BOXED(2129614517,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132368389,32,FLEN)
NAN_BOXED(2094978720,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132391644,32,FLEN)
NAN_BOXED(2124258825,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132395588,32,FLEN)
NAN_BOXED(2125118470,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132398760,32,FLEN)
NAN_BOXED(2129605674,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132423870,32,FLEN)
NAN_BOXED(2133531716,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(2134041825,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132582311,32,FLEN)
NAN_BOXED(2131738655,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132811080,32,FLEN)
NAN_BOXED(2120225539,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2132842944,32,FLEN)
NAN_BOXED(2125917036,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133062139,32,FLEN)
NAN_BOXED(2117725486,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133062906,32,FLEN)
NAN_BOXED(2134772465,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133069279,32,FLEN)
NAN_BOXED(2105821928,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133082947,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133117626,32,FLEN)
NAN_BOXED(2129057044,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133121456,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133203287,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133237010,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133271383,32,FLEN)
NAN_BOXED(2131058665,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133376525,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133386624,32,FLEN)
NAN_BOXED(2134101520,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133390512,32,FLEN)
NAN_BOXED(2134736071,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133481244,32,FLEN)
NAN_BOXED(2133752695,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133615443,32,FLEN)
NAN_BOXED(2132269861,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134006664,32,FLEN)
NAN_BOXED(2133093836,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134161961,32,FLEN)
NAN_BOXED(2123346856,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2133986929,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134385111,32,FLEN)
NAN_BOXED(2133542414,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134455715,32,FLEN)
NAN_BOXED(2133701533,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134561707,32,FLEN)
NAN_BOXED(2124318457,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2134657076,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2082571522,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2082590443,32,FLEN)
NAN_BOXED(2132855623,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2089686040,32,FLEN)
NAN_BOXED(2125995966,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2091214692,32,FLEN)
NAN_BOXED(2128255062,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2093009139,32,FLEN)
NAN_BOXED(2115475312,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2097660026,32,FLEN)
NAN_BOXED(2129394432,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2101654622,32,FLEN)
NAN_BOXED(2131858568,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2103174549,32,FLEN)
NAN_BOXED(2124621885,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 166*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
