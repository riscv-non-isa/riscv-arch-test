
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cff8000; valaddr_reg:x3; val_offset:92160*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92160*0 + 3*0*FLEN/8, x4, x1, x2)

inst_30721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffc000; valaddr_reg:x3; val_offset:92163*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92163*0 + 3*1*FLEN/8, x4, x1, x2)

inst_30722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffe000; valaddr_reg:x3; val_offset:92166*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92166*0 + 3*2*FLEN/8, x4, x1, x2)

inst_30723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfff000; valaddr_reg:x3; val_offset:92169*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92169*0 + 3*3*FLEN/8, x4, x1, x2)

inst_30724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfff800; valaddr_reg:x3; val_offset:92172*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92172*0 + 3*4*FLEN/8, x4, x1, x2)

inst_30725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffc00; valaddr_reg:x3; val_offset:92175*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92175*0 + 3*5*FLEN/8, x4, x1, x2)

inst_30726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffe00; valaddr_reg:x3; val_offset:92178*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92178*0 + 3*6*FLEN/8, x4, x1, x2)

inst_30727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffff00; valaddr_reg:x3; val_offset:92181*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92181*0 + 3*7*FLEN/8, x4, x1, x2)

inst_30728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffff80; valaddr_reg:x3; val_offset:92184*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92184*0 + 3*8*FLEN/8, x4, x1, x2)

inst_30729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffffc0; valaddr_reg:x3; val_offset:92187*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92187*0 + 3*9*FLEN/8, x4, x1, x2)

inst_30730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffffe0; valaddr_reg:x3; val_offset:92190*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92190*0 + 3*10*FLEN/8, x4, x1, x2)

inst_30731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffff0; valaddr_reg:x3; val_offset:92193*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92193*0 + 3*11*FLEN/8, x4, x1, x2)

inst_30732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffff8; valaddr_reg:x3; val_offset:92196*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92196*0 + 3*12*FLEN/8, x4, x1, x2)

inst_30733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffffc; valaddr_reg:x3; val_offset:92199*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92199*0 + 3*13*FLEN/8, x4, x1, x2)

inst_30734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffffe; valaddr_reg:x3; val_offset:92202*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92202*0 + 3*14*FLEN/8, x4, x1, x2)

inst_30735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffffff; valaddr_reg:x3; val_offset:92205*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92205*0 + 3*15*FLEN/8, x4, x1, x2)

inst_30736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f000001; valaddr_reg:x3; val_offset:92208*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92208*0 + 3*16*FLEN/8, x4, x1, x2)

inst_30737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f000003; valaddr_reg:x3; val_offset:92211*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92211*0 + 3*17*FLEN/8, x4, x1, x2)

inst_30738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f000007; valaddr_reg:x3; val_offset:92214*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92214*0 + 3*18*FLEN/8, x4, x1, x2)

inst_30739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f199999; valaddr_reg:x3; val_offset:92217*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92217*0 + 3*19*FLEN/8, x4, x1, x2)

inst_30740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f249249; valaddr_reg:x3; val_offset:92220*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92220*0 + 3*20*FLEN/8, x4, x1, x2)

inst_30741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f333333; valaddr_reg:x3; val_offset:92223*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92223*0 + 3*21*FLEN/8, x4, x1, x2)

inst_30742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:92226*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92226*0 + 3*22*FLEN/8, x4, x1, x2)

inst_30743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:92229*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92229*0 + 3*23*FLEN/8, x4, x1, x2)

inst_30744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f444444; valaddr_reg:x3; val_offset:92232*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92232*0 + 3*24*FLEN/8, x4, x1, x2)

inst_30745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:92235*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92235*0 + 3*25*FLEN/8, x4, x1, x2)

inst_30746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:92238*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92238*0 + 3*26*FLEN/8, x4, x1, x2)

inst_30747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f666666; valaddr_reg:x3; val_offset:92241*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92241*0 + 3*27*FLEN/8, x4, x1, x2)

inst_30748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:92244*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92244*0 + 3*28*FLEN/8, x4, x1, x2)

inst_30749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:92247*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92247*0 + 3*29*FLEN/8, x4, x1, x2)

inst_30750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:92250*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92250*0 + 3*30*FLEN/8, x4, x1, x2)

inst_30751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:92253*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92253*0 + 3*31*FLEN/8, x4, x1, x2)

inst_30752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf800001; valaddr_reg:x3; val_offset:92256*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92256*0 + 3*32*FLEN/8, x4, x1, x2)

inst_30753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf800003; valaddr_reg:x3; val_offset:92259*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92259*0 + 3*33*FLEN/8, x4, x1, x2)

inst_30754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf800007; valaddr_reg:x3; val_offset:92262*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92262*0 + 3*34*FLEN/8, x4, x1, x2)

inst_30755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf999999; valaddr_reg:x3; val_offset:92265*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92265*0 + 3*35*FLEN/8, x4, x1, x2)

inst_30756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:92268*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92268*0 + 3*36*FLEN/8, x4, x1, x2)

inst_30757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:92271*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92271*0 + 3*37*FLEN/8, x4, x1, x2)

inst_30758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:92274*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92274*0 + 3*38*FLEN/8, x4, x1, x2)

inst_30759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:92277*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92277*0 + 3*39*FLEN/8, x4, x1, x2)

inst_30760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:92280*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92280*0 + 3*40*FLEN/8, x4, x1, x2)

inst_30761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:92283*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92283*0 + 3*41*FLEN/8, x4, x1, x2)

inst_30762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:92286*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92286*0 + 3*42*FLEN/8, x4, x1, x2)

inst_30763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:92289*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92289*0 + 3*43*FLEN/8, x4, x1, x2)

inst_30764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:92292*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92292*0 + 3*44*FLEN/8, x4, x1, x2)

inst_30765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:92295*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92295*0 + 3*45*FLEN/8, x4, x1, x2)

inst_30766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:92298*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92298*0 + 3*46*FLEN/8, x4, x1, x2)

inst_30767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:92301*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92301*0 + 3*47*FLEN/8, x4, x1, x2)

inst_30768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800000; valaddr_reg:x3; val_offset:92304*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92304*0 + 3*48*FLEN/8, x4, x1, x2)

inst_30769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800001; valaddr_reg:x3; val_offset:92307*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92307*0 + 3*49*FLEN/8, x4, x1, x2)

inst_30770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800003; valaddr_reg:x3; val_offset:92310*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92310*0 + 3*50*FLEN/8, x4, x1, x2)

inst_30771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800007; valaddr_reg:x3; val_offset:92313*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92313*0 + 3*51*FLEN/8, x4, x1, x2)

inst_30772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980000f; valaddr_reg:x3; val_offset:92316*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92316*0 + 3*52*FLEN/8, x4, x1, x2)

inst_30773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980001f; valaddr_reg:x3; val_offset:92319*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92319*0 + 3*53*FLEN/8, x4, x1, x2)

inst_30774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980003f; valaddr_reg:x3; val_offset:92322*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92322*0 + 3*54*FLEN/8, x4, x1, x2)

inst_30775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980007f; valaddr_reg:x3; val_offset:92325*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92325*0 + 3*55*FLEN/8, x4, x1, x2)

inst_30776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98000ff; valaddr_reg:x3; val_offset:92328*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92328*0 + 3*56*FLEN/8, x4, x1, x2)

inst_30777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98001ff; valaddr_reg:x3; val_offset:92331*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92331*0 + 3*57*FLEN/8, x4, x1, x2)

inst_30778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98003ff; valaddr_reg:x3; val_offset:92334*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92334*0 + 3*58*FLEN/8, x4, x1, x2)

inst_30779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98007ff; valaddr_reg:x3; val_offset:92337*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92337*0 + 3*59*FLEN/8, x4, x1, x2)

inst_30780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800fff; valaddr_reg:x3; val_offset:92340*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92340*0 + 3*60*FLEN/8, x4, x1, x2)

inst_30781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9801fff; valaddr_reg:x3; val_offset:92343*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92343*0 + 3*61*FLEN/8, x4, x1, x2)

inst_30782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9803fff; valaddr_reg:x3; val_offset:92346*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92346*0 + 3*62*FLEN/8, x4, x1, x2)

inst_30783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9807fff; valaddr_reg:x3; val_offset:92349*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92349*0 + 3*63*FLEN/8, x4, x1, x2)

inst_30784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980ffff; valaddr_reg:x3; val_offset:92352*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92352*0 + 3*64*FLEN/8, x4, x1, x2)

inst_30785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc981ffff; valaddr_reg:x3; val_offset:92355*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92355*0 + 3*65*FLEN/8, x4, x1, x2)

inst_30786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc983ffff; valaddr_reg:x3; val_offset:92358*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92358*0 + 3*66*FLEN/8, x4, x1, x2)

inst_30787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc987ffff; valaddr_reg:x3; val_offset:92361*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92361*0 + 3*67*FLEN/8, x4, x1, x2)

inst_30788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98fffff; valaddr_reg:x3; val_offset:92364*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92364*0 + 3*68*FLEN/8, x4, x1, x2)

inst_30789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc99fffff; valaddr_reg:x3; val_offset:92367*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92367*0 + 3*69*FLEN/8, x4, x1, x2)

inst_30790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9bfffff; valaddr_reg:x3; val_offset:92370*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92370*0 + 3*70*FLEN/8, x4, x1, x2)

inst_30791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9c00000; valaddr_reg:x3; val_offset:92373*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92373*0 + 3*71*FLEN/8, x4, x1, x2)

inst_30792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9e00000; valaddr_reg:x3; val_offset:92376*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92376*0 + 3*72*FLEN/8, x4, x1, x2)

inst_30793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9f00000; valaddr_reg:x3; val_offset:92379*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92379*0 + 3*73*FLEN/8, x4, x1, x2)

inst_30794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9f80000; valaddr_reg:x3; val_offset:92382*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92382*0 + 3*74*FLEN/8, x4, x1, x2)

inst_30795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fc0000; valaddr_reg:x3; val_offset:92385*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92385*0 + 3*75*FLEN/8, x4, x1, x2)

inst_30796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fe0000; valaddr_reg:x3; val_offset:92388*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92388*0 + 3*76*FLEN/8, x4, x1, x2)

inst_30797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ff0000; valaddr_reg:x3; val_offset:92391*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92391*0 + 3*77*FLEN/8, x4, x1, x2)

inst_30798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ff8000; valaddr_reg:x3; val_offset:92394*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92394*0 + 3*78*FLEN/8, x4, x1, x2)

inst_30799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffc000; valaddr_reg:x3; val_offset:92397*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92397*0 + 3*79*FLEN/8, x4, x1, x2)

inst_30800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffe000; valaddr_reg:x3; val_offset:92400*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92400*0 + 3*80*FLEN/8, x4, x1, x2)

inst_30801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fff000; valaddr_reg:x3; val_offset:92403*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92403*0 + 3*81*FLEN/8, x4, x1, x2)

inst_30802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fff800; valaddr_reg:x3; val_offset:92406*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92406*0 + 3*82*FLEN/8, x4, x1, x2)

inst_30803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffc00; valaddr_reg:x3; val_offset:92409*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92409*0 + 3*83*FLEN/8, x4, x1, x2)

inst_30804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffe00; valaddr_reg:x3; val_offset:92412*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92412*0 + 3*84*FLEN/8, x4, x1, x2)

inst_30805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffff00; valaddr_reg:x3; val_offset:92415*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92415*0 + 3*85*FLEN/8, x4, x1, x2)

inst_30806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffff80; valaddr_reg:x3; val_offset:92418*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92418*0 + 3*86*FLEN/8, x4, x1, x2)

inst_30807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffffc0; valaddr_reg:x3; val_offset:92421*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92421*0 + 3*87*FLEN/8, x4, x1, x2)

inst_30808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffffe0; valaddr_reg:x3; val_offset:92424*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92424*0 + 3*88*FLEN/8, x4, x1, x2)

inst_30809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffff0; valaddr_reg:x3; val_offset:92427*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92427*0 + 3*89*FLEN/8, x4, x1, x2)

inst_30810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffff8; valaddr_reg:x3; val_offset:92430*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92430*0 + 3*90*FLEN/8, x4, x1, x2)

inst_30811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffffc; valaddr_reg:x3; val_offset:92433*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92433*0 + 3*91*FLEN/8, x4, x1, x2)

inst_30812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffffe; valaddr_reg:x3; val_offset:92436*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92436*0 + 3*92*FLEN/8, x4, x1, x2)

inst_30813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffffff; valaddr_reg:x3; val_offset:92439*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92439*0 + 3*93*FLEN/8, x4, x1, x2)

inst_30814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000000; valaddr_reg:x3; val_offset:92442*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92442*0 + 3*94*FLEN/8, x4, x1, x2)

inst_30815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000001; valaddr_reg:x3; val_offset:92445*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92445*0 + 3*95*FLEN/8, x4, x1, x2)

inst_30816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000003; valaddr_reg:x3; val_offset:92448*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92448*0 + 3*96*FLEN/8, x4, x1, x2)

inst_30817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000007; valaddr_reg:x3; val_offset:92451*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92451*0 + 3*97*FLEN/8, x4, x1, x2)

inst_30818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400000f; valaddr_reg:x3; val_offset:92454*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92454*0 + 3*98*FLEN/8, x4, x1, x2)

inst_30819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400001f; valaddr_reg:x3; val_offset:92457*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92457*0 + 3*99*FLEN/8, x4, x1, x2)

inst_30820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400003f; valaddr_reg:x3; val_offset:92460*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92460*0 + 3*100*FLEN/8, x4, x1, x2)

inst_30821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400007f; valaddr_reg:x3; val_offset:92463*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92463*0 + 3*101*FLEN/8, x4, x1, x2)

inst_30822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40000ff; valaddr_reg:x3; val_offset:92466*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92466*0 + 3*102*FLEN/8, x4, x1, x2)

inst_30823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40001ff; valaddr_reg:x3; val_offset:92469*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92469*0 + 3*103*FLEN/8, x4, x1, x2)

inst_30824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40003ff; valaddr_reg:x3; val_offset:92472*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92472*0 + 3*104*FLEN/8, x4, x1, x2)

inst_30825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40007ff; valaddr_reg:x3; val_offset:92475*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92475*0 + 3*105*FLEN/8, x4, x1, x2)

inst_30826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000fff; valaddr_reg:x3; val_offset:92478*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92478*0 + 3*106*FLEN/8, x4, x1, x2)

inst_30827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4001fff; valaddr_reg:x3; val_offset:92481*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92481*0 + 3*107*FLEN/8, x4, x1, x2)

inst_30828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4003fff; valaddr_reg:x3; val_offset:92484*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92484*0 + 3*108*FLEN/8, x4, x1, x2)

inst_30829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4007fff; valaddr_reg:x3; val_offset:92487*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92487*0 + 3*109*FLEN/8, x4, x1, x2)

inst_30830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400ffff; valaddr_reg:x3; val_offset:92490*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92490*0 + 3*110*FLEN/8, x4, x1, x2)

inst_30831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa401ffff; valaddr_reg:x3; val_offset:92493*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92493*0 + 3*111*FLEN/8, x4, x1, x2)

inst_30832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa403ffff; valaddr_reg:x3; val_offset:92496*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92496*0 + 3*112*FLEN/8, x4, x1, x2)

inst_30833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa407ffff; valaddr_reg:x3; val_offset:92499*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92499*0 + 3*113*FLEN/8, x4, x1, x2)

inst_30834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40fffff; valaddr_reg:x3; val_offset:92502*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92502*0 + 3*114*FLEN/8, x4, x1, x2)

inst_30835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa41fffff; valaddr_reg:x3; val_offset:92505*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92505*0 + 3*115*FLEN/8, x4, x1, x2)

inst_30836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa43fffff; valaddr_reg:x3; val_offset:92508*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92508*0 + 3*116*FLEN/8, x4, x1, x2)

inst_30837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4400000; valaddr_reg:x3; val_offset:92511*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92511*0 + 3*117*FLEN/8, x4, x1, x2)

inst_30838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4600000; valaddr_reg:x3; val_offset:92514*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92514*0 + 3*118*FLEN/8, x4, x1, x2)

inst_30839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4700000; valaddr_reg:x3; val_offset:92517*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92517*0 + 3*119*FLEN/8, x4, x1, x2)

inst_30840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4780000; valaddr_reg:x3; val_offset:92520*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92520*0 + 3*120*FLEN/8, x4, x1, x2)

inst_30841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47c0000; valaddr_reg:x3; val_offset:92523*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92523*0 + 3*121*FLEN/8, x4, x1, x2)

inst_30842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47e0000; valaddr_reg:x3; val_offset:92526*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92526*0 + 3*122*FLEN/8, x4, x1, x2)

inst_30843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47f0000; valaddr_reg:x3; val_offset:92529*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92529*0 + 3*123*FLEN/8, x4, x1, x2)

inst_30844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47f8000; valaddr_reg:x3; val_offset:92532*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92532*0 + 3*124*FLEN/8, x4, x1, x2)

inst_30845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fc000; valaddr_reg:x3; val_offset:92535*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92535*0 + 3*125*FLEN/8, x4, x1, x2)

inst_30846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fe000; valaddr_reg:x3; val_offset:92538*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92538*0 + 3*126*FLEN/8, x4, x1, x2)

inst_30847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ff000; valaddr_reg:x3; val_offset:92541*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92541*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_30848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ff800; valaddr_reg:x3; val_offset:92544*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92544*0 + 3*128*FLEN/8, x4, x1, x2)

inst_30849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffc00; valaddr_reg:x3; val_offset:92547*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92547*0 + 3*129*FLEN/8, x4, x1, x2)

inst_30850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffe00; valaddr_reg:x3; val_offset:92550*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92550*0 + 3*130*FLEN/8, x4, x1, x2)

inst_30851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fff00; valaddr_reg:x3; val_offset:92553*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92553*0 + 3*131*FLEN/8, x4, x1, x2)

inst_30852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fff80; valaddr_reg:x3; val_offset:92556*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92556*0 + 3*132*FLEN/8, x4, x1, x2)

inst_30853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fffc0; valaddr_reg:x3; val_offset:92559*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92559*0 + 3*133*FLEN/8, x4, x1, x2)

inst_30854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fffe0; valaddr_reg:x3; val_offset:92562*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92562*0 + 3*134*FLEN/8, x4, x1, x2)

inst_30855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffff0; valaddr_reg:x3; val_offset:92565*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92565*0 + 3*135*FLEN/8, x4, x1, x2)

inst_30856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffff8; valaddr_reg:x3; val_offset:92568*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92568*0 + 3*136*FLEN/8, x4, x1, x2)

inst_30857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffffc; valaddr_reg:x3; val_offset:92571*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92571*0 + 3*137*FLEN/8, x4, x1, x2)

inst_30858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffffe; valaddr_reg:x3; val_offset:92574*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92574*0 + 3*138*FLEN/8, x4, x1, x2)

inst_30859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fffff; valaddr_reg:x3; val_offset:92577*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92577*0 + 3*139*FLEN/8, x4, x1, x2)

inst_30860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf800001; valaddr_reg:x3; val_offset:92580*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92580*0 + 3*140*FLEN/8, x4, x1, x2)

inst_30861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf800003; valaddr_reg:x3; val_offset:92583*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92583*0 + 3*141*FLEN/8, x4, x1, x2)

inst_30862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf800007; valaddr_reg:x3; val_offset:92586*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92586*0 + 3*142*FLEN/8, x4, x1, x2)

inst_30863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf999999; valaddr_reg:x3; val_offset:92589*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92589*0 + 3*143*FLEN/8, x4, x1, x2)

inst_30864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:92592*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92592*0 + 3*144*FLEN/8, x4, x1, x2)

inst_30865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:92595*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92595*0 + 3*145*FLEN/8, x4, x1, x2)

inst_30866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:92598*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92598*0 + 3*146*FLEN/8, x4, x1, x2)

inst_30867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:92601*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92601*0 + 3*147*FLEN/8, x4, x1, x2)

inst_30868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:92604*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92604*0 + 3*148*FLEN/8, x4, x1, x2)

inst_30869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:92607*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92607*0 + 3*149*FLEN/8, x4, x1, x2)

inst_30870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:92610*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92610*0 + 3*150*FLEN/8, x4, x1, x2)

inst_30871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:92613*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92613*0 + 3*151*FLEN/8, x4, x1, x2)

inst_30872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:92616*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92616*0 + 3*152*FLEN/8, x4, x1, x2)

inst_30873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:92619*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92619*0 + 3*153*FLEN/8, x4, x1, x2)

inst_30874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:92622*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92622*0 + 3*154*FLEN/8, x4, x1, x2)

inst_30875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:92625*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92625*0 + 3*155*FLEN/8, x4, x1, x2)

inst_30876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800000; valaddr_reg:x3; val_offset:92628*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92628*0 + 3*156*FLEN/8, x4, x1, x2)

inst_30877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800001; valaddr_reg:x3; val_offset:92631*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92631*0 + 3*157*FLEN/8, x4, x1, x2)

inst_30878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800003; valaddr_reg:x3; val_offset:92634*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92634*0 + 3*158*FLEN/8, x4, x1, x2)

inst_30879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800007; valaddr_reg:x3; val_offset:92637*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92637*0 + 3*159*FLEN/8, x4, x1, x2)

inst_30880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80000f; valaddr_reg:x3; val_offset:92640*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92640*0 + 3*160*FLEN/8, x4, x1, x2)

inst_30881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80001f; valaddr_reg:x3; val_offset:92643*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92643*0 + 3*161*FLEN/8, x4, x1, x2)

inst_30882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80003f; valaddr_reg:x3; val_offset:92646*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92646*0 + 3*162*FLEN/8, x4, x1, x2)

inst_30883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80007f; valaddr_reg:x3; val_offset:92649*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92649*0 + 3*163*FLEN/8, x4, x1, x2)

inst_30884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8000ff; valaddr_reg:x3; val_offset:92652*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92652*0 + 3*164*FLEN/8, x4, x1, x2)

inst_30885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8001ff; valaddr_reg:x3; val_offset:92655*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92655*0 + 3*165*FLEN/8, x4, x1, x2)

inst_30886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8003ff; valaddr_reg:x3; val_offset:92658*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92658*0 + 3*166*FLEN/8, x4, x1, x2)

inst_30887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8007ff; valaddr_reg:x3; val_offset:92661*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92661*0 + 3*167*FLEN/8, x4, x1, x2)

inst_30888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800fff; valaddr_reg:x3; val_offset:92664*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92664*0 + 3*168*FLEN/8, x4, x1, x2)

inst_30889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b801fff; valaddr_reg:x3; val_offset:92667*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92667*0 + 3*169*FLEN/8, x4, x1, x2)

inst_30890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b803fff; valaddr_reg:x3; val_offset:92670*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92670*0 + 3*170*FLEN/8, x4, x1, x2)

inst_30891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b807fff; valaddr_reg:x3; val_offset:92673*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92673*0 + 3*171*FLEN/8, x4, x1, x2)

inst_30892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80ffff; valaddr_reg:x3; val_offset:92676*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92676*0 + 3*172*FLEN/8, x4, x1, x2)

inst_30893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b81ffff; valaddr_reg:x3; val_offset:92679*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92679*0 + 3*173*FLEN/8, x4, x1, x2)

inst_30894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b83ffff; valaddr_reg:x3; val_offset:92682*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92682*0 + 3*174*FLEN/8, x4, x1, x2)

inst_30895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b87ffff; valaddr_reg:x3; val_offset:92685*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92685*0 + 3*175*FLEN/8, x4, x1, x2)

inst_30896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8fffff; valaddr_reg:x3; val_offset:92688*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92688*0 + 3*176*FLEN/8, x4, x1, x2)

inst_30897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b9fffff; valaddr_reg:x3; val_offset:92691*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92691*0 + 3*177*FLEN/8, x4, x1, x2)

inst_30898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bbfffff; valaddr_reg:x3; val_offset:92694*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92694*0 + 3*178*FLEN/8, x4, x1, x2)

inst_30899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bc00000; valaddr_reg:x3; val_offset:92697*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92697*0 + 3*179*FLEN/8, x4, x1, x2)

inst_30900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6be00000; valaddr_reg:x3; val_offset:92700*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92700*0 + 3*180*FLEN/8, x4, x1, x2)

inst_30901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bf00000; valaddr_reg:x3; val_offset:92703*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92703*0 + 3*181*FLEN/8, x4, x1, x2)

inst_30902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bf80000; valaddr_reg:x3; val_offset:92706*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92706*0 + 3*182*FLEN/8, x4, x1, x2)

inst_30903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfc0000; valaddr_reg:x3; val_offset:92709*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92709*0 + 3*183*FLEN/8, x4, x1, x2)

inst_30904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfe0000; valaddr_reg:x3; val_offset:92712*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92712*0 + 3*184*FLEN/8, x4, x1, x2)

inst_30905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bff0000; valaddr_reg:x3; val_offset:92715*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92715*0 + 3*185*FLEN/8, x4, x1, x2)

inst_30906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bff8000; valaddr_reg:x3; val_offset:92718*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92718*0 + 3*186*FLEN/8, x4, x1, x2)

inst_30907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffc000; valaddr_reg:x3; val_offset:92721*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92721*0 + 3*187*FLEN/8, x4, x1, x2)

inst_30908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffe000; valaddr_reg:x3; val_offset:92724*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92724*0 + 3*188*FLEN/8, x4, x1, x2)

inst_30909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfff000; valaddr_reg:x3; val_offset:92727*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92727*0 + 3*189*FLEN/8, x4, x1, x2)

inst_30910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfff800; valaddr_reg:x3; val_offset:92730*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92730*0 + 3*190*FLEN/8, x4, x1, x2)

inst_30911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffc00; valaddr_reg:x3; val_offset:92733*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92733*0 + 3*191*FLEN/8, x4, x1, x2)

inst_30912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffe00; valaddr_reg:x3; val_offset:92736*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92736*0 + 3*192*FLEN/8, x4, x1, x2)

inst_30913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffff00; valaddr_reg:x3; val_offset:92739*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92739*0 + 3*193*FLEN/8, x4, x1, x2)

inst_30914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffff80; valaddr_reg:x3; val_offset:92742*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92742*0 + 3*194*FLEN/8, x4, x1, x2)

inst_30915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffffc0; valaddr_reg:x3; val_offset:92745*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92745*0 + 3*195*FLEN/8, x4, x1, x2)

inst_30916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffffe0; valaddr_reg:x3; val_offset:92748*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92748*0 + 3*196*FLEN/8, x4, x1, x2)

inst_30917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffff0; valaddr_reg:x3; val_offset:92751*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92751*0 + 3*197*FLEN/8, x4, x1, x2)

inst_30918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffff8; valaddr_reg:x3; val_offset:92754*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92754*0 + 3*198*FLEN/8, x4, x1, x2)

inst_30919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffffc; valaddr_reg:x3; val_offset:92757*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92757*0 + 3*199*FLEN/8, x4, x1, x2)

inst_30920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffffe; valaddr_reg:x3; val_offset:92760*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92760*0 + 3*200*FLEN/8, x4, x1, x2)

inst_30921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffffff; valaddr_reg:x3; val_offset:92763*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92763*0 + 3*201*FLEN/8, x4, x1, x2)

inst_30922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f000001; valaddr_reg:x3; val_offset:92766*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92766*0 + 3*202*FLEN/8, x4, x1, x2)

inst_30923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f000003; valaddr_reg:x3; val_offset:92769*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92769*0 + 3*203*FLEN/8, x4, x1, x2)

inst_30924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f000007; valaddr_reg:x3; val_offset:92772*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92772*0 + 3*204*FLEN/8, x4, x1, x2)

inst_30925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f199999; valaddr_reg:x3; val_offset:92775*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92775*0 + 3*205*FLEN/8, x4, x1, x2)

inst_30926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f249249; valaddr_reg:x3; val_offset:92778*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92778*0 + 3*206*FLEN/8, x4, x1, x2)

inst_30927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f333333; valaddr_reg:x3; val_offset:92781*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92781*0 + 3*207*FLEN/8, x4, x1, x2)

inst_30928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:92784*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92784*0 + 3*208*FLEN/8, x4, x1, x2)

inst_30929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:92787*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92787*0 + 3*209*FLEN/8, x4, x1, x2)

inst_30930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f444444; valaddr_reg:x3; val_offset:92790*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92790*0 + 3*210*FLEN/8, x4, x1, x2)

inst_30931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:92793*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92793*0 + 3*211*FLEN/8, x4, x1, x2)

inst_30932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:92796*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92796*0 + 3*212*FLEN/8, x4, x1, x2)

inst_30933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f666666; valaddr_reg:x3; val_offset:92799*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92799*0 + 3*213*FLEN/8, x4, x1, x2)

inst_30934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:92802*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92802*0 + 3*214*FLEN/8, x4, x1, x2)

inst_30935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:92805*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92805*0 + 3*215*FLEN/8, x4, x1, x2)

inst_30936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:92808*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92808*0 + 3*216*FLEN/8, x4, x1, x2)

inst_30937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:92811*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92811*0 + 3*217*FLEN/8, x4, x1, x2)

inst_30938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f800001; valaddr_reg:x3; val_offset:92814*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92814*0 + 3*218*FLEN/8, x4, x1, x2)

inst_30939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f800003; valaddr_reg:x3; val_offset:92817*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92817*0 + 3*219*FLEN/8, x4, x1, x2)

inst_30940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f800007; valaddr_reg:x3; val_offset:92820*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92820*0 + 3*220*FLEN/8, x4, x1, x2)

inst_30941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f999999; valaddr_reg:x3; val_offset:92823*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92823*0 + 3*221*FLEN/8, x4, x1, x2)

inst_30942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:92826*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92826*0 + 3*222*FLEN/8, x4, x1, x2)

inst_30943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:92829*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92829*0 + 3*223*FLEN/8, x4, x1, x2)

inst_30944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:92832*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92832*0 + 3*224*FLEN/8, x4, x1, x2)

inst_30945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:92835*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92835*0 + 3*225*FLEN/8, x4, x1, x2)

inst_30946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:92838*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92838*0 + 3*226*FLEN/8, x4, x1, x2)

inst_30947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:92841*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92841*0 + 3*227*FLEN/8, x4, x1, x2)

inst_30948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:92844*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92844*0 + 3*228*FLEN/8, x4, x1, x2)

inst_30949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:92847*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92847*0 + 3*229*FLEN/8, x4, x1, x2)

inst_30950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:92850*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92850*0 + 3*230*FLEN/8, x4, x1, x2)

inst_30951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:92853*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92853*0 + 3*231*FLEN/8, x4, x1, x2)

inst_30952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:92856*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92856*0 + 3*232*FLEN/8, x4, x1, x2)

inst_30953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:92859*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92859*0 + 3*233*FLEN/8, x4, x1, x2)

inst_30954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800000; valaddr_reg:x3; val_offset:92862*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92862*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800001; valaddr_reg:x3; val_offset:92865*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92865*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800003; valaddr_reg:x3; val_offset:92868*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92868*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800007; valaddr_reg:x3; val_offset:92871*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92871*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880000f; valaddr_reg:x3; val_offset:92874*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92874*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880001f; valaddr_reg:x3; val_offset:92877*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92877*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880003f; valaddr_reg:x3; val_offset:92880*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92880*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880007f; valaddr_reg:x3; val_offset:92883*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92883*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488000ff; valaddr_reg:x3; val_offset:92886*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92886*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488001ff; valaddr_reg:x3; val_offset:92889*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92889*0 + 3*243*FLEN/8, x4, x1, x2)

inst_30964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488003ff; valaddr_reg:x3; val_offset:92892*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92892*0 + 3*244*FLEN/8, x4, x1, x2)

inst_30965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488007ff; valaddr_reg:x3; val_offset:92895*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92895*0 + 3*245*FLEN/8, x4, x1, x2)

inst_30966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800fff; valaddr_reg:x3; val_offset:92898*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92898*0 + 3*246*FLEN/8, x4, x1, x2)

inst_30967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48801fff; valaddr_reg:x3; val_offset:92901*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92901*0 + 3*247*FLEN/8, x4, x1, x2)

inst_30968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48803fff; valaddr_reg:x3; val_offset:92904*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92904*0 + 3*248*FLEN/8, x4, x1, x2)

inst_30969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48807fff; valaddr_reg:x3; val_offset:92907*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92907*0 + 3*249*FLEN/8, x4, x1, x2)

inst_30970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880ffff; valaddr_reg:x3; val_offset:92910*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92910*0 + 3*250*FLEN/8, x4, x1, x2)

inst_30971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4881ffff; valaddr_reg:x3; val_offset:92913*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92913*0 + 3*251*FLEN/8, x4, x1, x2)

inst_30972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4883ffff; valaddr_reg:x3; val_offset:92916*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92916*0 + 3*252*FLEN/8, x4, x1, x2)

inst_30973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4887ffff; valaddr_reg:x3; val_offset:92919*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92919*0 + 3*253*FLEN/8, x4, x1, x2)

inst_30974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488fffff; valaddr_reg:x3; val_offset:92922*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92922*0 + 3*254*FLEN/8, x4, x1, x2)

inst_30975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x489fffff; valaddr_reg:x3; val_offset:92925*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92925*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_30976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48bfffff; valaddr_reg:x3; val_offset:92928*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92928*0 + 3*256*FLEN/8, x4, x1, x2)

inst_30977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48c00000; valaddr_reg:x3; val_offset:92931*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92931*0 + 3*257*FLEN/8, x4, x1, x2)

inst_30978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48e00000; valaddr_reg:x3; val_offset:92934*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92934*0 + 3*258*FLEN/8, x4, x1, x2)

inst_30979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48f00000; valaddr_reg:x3; val_offset:92937*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92937*0 + 3*259*FLEN/8, x4, x1, x2)

inst_30980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48f80000; valaddr_reg:x3; val_offset:92940*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92940*0 + 3*260*FLEN/8, x4, x1, x2)

inst_30981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fc0000; valaddr_reg:x3; val_offset:92943*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92943*0 + 3*261*FLEN/8, x4, x1, x2)

inst_30982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fe0000; valaddr_reg:x3; val_offset:92946*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92946*0 + 3*262*FLEN/8, x4, x1, x2)

inst_30983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ff0000; valaddr_reg:x3; val_offset:92949*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92949*0 + 3*263*FLEN/8, x4, x1, x2)

inst_30984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ff8000; valaddr_reg:x3; val_offset:92952*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92952*0 + 3*264*FLEN/8, x4, x1, x2)

inst_30985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ffc000; valaddr_reg:x3; val_offset:92955*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92955*0 + 3*265*FLEN/8, x4, x1, x2)

inst_30986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ffe000; valaddr_reg:x3; val_offset:92958*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92958*0 + 3*266*FLEN/8, x4, x1, x2)

inst_30987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fff000; valaddr_reg:x3; val_offset:92961*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92961*0 + 3*267*FLEN/8, x4, x1, x2)

inst_30988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fff800; valaddr_reg:x3; val_offset:92964*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92964*0 + 3*268*FLEN/8, x4, x1, x2)

inst_30989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fffc00; valaddr_reg:x3; val_offset:92967*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92967*0 + 3*269*FLEN/8, x4, x1, x2)

inst_30990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fffe00; valaddr_reg:x3; val_offset:92970*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92970*0 + 3*270*FLEN/8, x4, x1, x2)

inst_30991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ffff00; valaddr_reg:x3; val_offset:92973*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92973*0 + 3*271*FLEN/8, x4, x1, x2)

inst_30992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ffff80; valaddr_reg:x3; val_offset:92976*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92976*0 + 3*272*FLEN/8, x4, x1, x2)

inst_30993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ffffc0; valaddr_reg:x3; val_offset:92979*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92979*0 + 3*273*FLEN/8, x4, x1, x2)

inst_30994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ffffe0; valaddr_reg:x3; val_offset:92982*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92982*0 + 3*274*FLEN/8, x4, x1, x2)

inst_30995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fffff0; valaddr_reg:x3; val_offset:92985*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92985*0 + 3*275*FLEN/8, x4, x1, x2)

inst_30996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fffff8; valaddr_reg:x3; val_offset:92988*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92988*0 + 3*276*FLEN/8, x4, x1, x2)

inst_30997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fffffc; valaddr_reg:x3; val_offset:92991*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92991*0 + 3*277*FLEN/8, x4, x1, x2)

inst_30998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48fffffe; valaddr_reg:x3; val_offset:92994*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92994*0 + 3*278*FLEN/8, x4, x1, x2)

inst_30999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48ffffff; valaddr_reg:x3; val_offset:92997*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92997*0 + 3*279*FLEN/8, x4, x1, x2)

inst_31000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:93000*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93000*0 + 3*280*FLEN/8, x4, x1, x2)

inst_31001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:93003*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93003*0 + 3*281*FLEN/8, x4, x1, x2)

inst_31002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:93006*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93006*0 + 3*282*FLEN/8, x4, x1, x2)

inst_31003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:93009*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93009*0 + 3*283*FLEN/8, x4, x1, x2)

inst_31004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:93012*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93012*0 + 3*284*FLEN/8, x4, x1, x2)

inst_31005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:93015*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93015*0 + 3*285*FLEN/8, x4, x1, x2)

inst_31006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:93018*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93018*0 + 3*286*FLEN/8, x4, x1, x2)

inst_31007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:93021*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93021*0 + 3*287*FLEN/8, x4, x1, x2)

inst_31008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:93024*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93024*0 + 3*288*FLEN/8, x4, x1, x2)

inst_31009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:93027*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93027*0 + 3*289*FLEN/8, x4, x1, x2)

inst_31010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:93030*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93030*0 + 3*290*FLEN/8, x4, x1, x2)

inst_31011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:93033*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93033*0 + 3*291*FLEN/8, x4, x1, x2)

inst_31012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:93036*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93036*0 + 3*292*FLEN/8, x4, x1, x2)

inst_31013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:93039*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93039*0 + 3*293*FLEN/8, x4, x1, x2)

inst_31014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:93042*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93042*0 + 3*294*FLEN/8, x4, x1, x2)

inst_31015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:93045*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93045*0 + 3*295*FLEN/8, x4, x1, x2)

inst_31016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:93048*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93048*0 + 3*296*FLEN/8, x4, x1, x2)

inst_31017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:93051*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93051*0 + 3*297*FLEN/8, x4, x1, x2)

inst_31018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:93054*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93054*0 + 3*298*FLEN/8, x4, x1, x2)

inst_31019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:93057*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93057*0 + 3*299*FLEN/8, x4, x1, x2)

inst_31020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:93060*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93060*0 + 3*300*FLEN/8, x4, x1, x2)

inst_31021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:93063*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93063*0 + 3*301*FLEN/8, x4, x1, x2)

inst_31022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:93066*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93066*0 + 3*302*FLEN/8, x4, x1, x2)

inst_31023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:93069*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93069*0 + 3*303*FLEN/8, x4, x1, x2)

inst_31024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:93072*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93072*0 + 3*304*FLEN/8, x4, x1, x2)

inst_31025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:93075*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93075*0 + 3*305*FLEN/8, x4, x1, x2)

inst_31026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:93078*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93078*0 + 3*306*FLEN/8, x4, x1, x2)

inst_31027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:93081*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93081*0 + 3*307*FLEN/8, x4, x1, x2)

inst_31028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:93084*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93084*0 + 3*308*FLEN/8, x4, x1, x2)

inst_31029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:93087*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93087*0 + 3*309*FLEN/8, x4, x1, x2)

inst_31030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:93090*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93090*0 + 3*310*FLEN/8, x4, x1, x2)

inst_31031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:93093*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93093*0 + 3*311*FLEN/8, x4, x1, x2)

inst_31032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:93096*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93096*0 + 3*312*FLEN/8, x4, x1, x2)

inst_31033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:93099*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93099*0 + 3*313*FLEN/8, x4, x1, x2)

inst_31034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:93102*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93102*0 + 3*314*FLEN/8, x4, x1, x2)

inst_31035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:93105*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93105*0 + 3*315*FLEN/8, x4, x1, x2)

inst_31036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:93108*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93108*0 + 3*316*FLEN/8, x4, x1, x2)

inst_31037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:93111*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93111*0 + 3*317*FLEN/8, x4, x1, x2)

inst_31038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:93114*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93114*0 + 3*318*FLEN/8, x4, x1, x2)

inst_31039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:93117*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93117*0 + 3*319*FLEN/8, x4, x1, x2)

inst_31040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:93120*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93120*0 + 3*320*FLEN/8, x4, x1, x2)

inst_31041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:93123*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93123*0 + 3*321*FLEN/8, x4, x1, x2)

inst_31042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:93126*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93126*0 + 3*322*FLEN/8, x4, x1, x2)

inst_31043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:93129*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93129*0 + 3*323*FLEN/8, x4, x1, x2)

inst_31044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:93132*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93132*0 + 3*324*FLEN/8, x4, x1, x2)

inst_31045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:93135*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93135*0 + 3*325*FLEN/8, x4, x1, x2)

inst_31046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:93138*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93138*0 + 3*326*FLEN/8, x4, x1, x2)

inst_31047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:93141*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93141*0 + 3*327*FLEN/8, x4, x1, x2)

inst_31048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:93144*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93144*0 + 3*328*FLEN/8, x4, x1, x2)

inst_31049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ff000; valaddr_reg:x3; val_offset:93147*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93147*0 + 3*329*FLEN/8, x4, x1, x2)

inst_31050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ff800; valaddr_reg:x3; val_offset:93150*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93150*0 + 3*330*FLEN/8, x4, x1, x2)

inst_31051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ffc00; valaddr_reg:x3; val_offset:93153*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93153*0 + 3*331*FLEN/8, x4, x1, x2)

inst_31052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ffe00; valaddr_reg:x3; val_offset:93156*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93156*0 + 3*332*FLEN/8, x4, x1, x2)

inst_31053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7fff00; valaddr_reg:x3; val_offset:93159*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93159*0 + 3*333*FLEN/8, x4, x1, x2)

inst_31054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7fff80; valaddr_reg:x3; val_offset:93162*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93162*0 + 3*334*FLEN/8, x4, x1, x2)

inst_31055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7fffc0; valaddr_reg:x3; val_offset:93165*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93165*0 + 3*335*FLEN/8, x4, x1, x2)

inst_31056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7fffe0; valaddr_reg:x3; val_offset:93168*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93168*0 + 3*336*FLEN/8, x4, x1, x2)

inst_31057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ffff0; valaddr_reg:x3; val_offset:93171*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93171*0 + 3*337*FLEN/8, x4, x1, x2)

inst_31058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ffff8; valaddr_reg:x3; val_offset:93174*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93174*0 + 3*338*FLEN/8, x4, x1, x2)

inst_31059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ffffc; valaddr_reg:x3; val_offset:93177*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93177*0 + 3*339*FLEN/8, x4, x1, x2)

inst_31060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7ffffe; valaddr_reg:x3; val_offset:93180*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93180*0 + 3*340*FLEN/8, x4, x1, x2)

inst_31061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fcfe8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fcfe8; op2val:0x80000000;
op3val:0x8b7fffff; valaddr_reg:x3; val_offset:93183*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93183*0 + 3*341*FLEN/8, x4, x1, x2)

inst_31062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d800000; valaddr_reg:x3; val_offset:93186*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93186*0 + 3*342*FLEN/8, x4, x1, x2)

inst_31063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d800001; valaddr_reg:x3; val_offset:93189*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93189*0 + 3*343*FLEN/8, x4, x1, x2)

inst_31064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d800003; valaddr_reg:x3; val_offset:93192*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93192*0 + 3*344*FLEN/8, x4, x1, x2)

inst_31065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d800007; valaddr_reg:x3; val_offset:93195*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93195*0 + 3*345*FLEN/8, x4, x1, x2)

inst_31066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d80000f; valaddr_reg:x3; val_offset:93198*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93198*0 + 3*346*FLEN/8, x4, x1, x2)

inst_31067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d80001f; valaddr_reg:x3; val_offset:93201*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93201*0 + 3*347*FLEN/8, x4, x1, x2)

inst_31068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d80003f; valaddr_reg:x3; val_offset:93204*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93204*0 + 3*348*FLEN/8, x4, x1, x2)

inst_31069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d80007f; valaddr_reg:x3; val_offset:93207*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93207*0 + 3*349*FLEN/8, x4, x1, x2)

inst_31070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d8000ff; valaddr_reg:x3; val_offset:93210*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93210*0 + 3*350*FLEN/8, x4, x1, x2)

inst_31071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d8001ff; valaddr_reg:x3; val_offset:93213*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93213*0 + 3*351*FLEN/8, x4, x1, x2)

inst_31072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d8003ff; valaddr_reg:x3; val_offset:93216*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93216*0 + 3*352*FLEN/8, x4, x1, x2)

inst_31073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d8007ff; valaddr_reg:x3; val_offset:93219*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93219*0 + 3*353*FLEN/8, x4, x1, x2)

inst_31074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d800fff; valaddr_reg:x3; val_offset:93222*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93222*0 + 3*354*FLEN/8, x4, x1, x2)

inst_31075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d801fff; valaddr_reg:x3; val_offset:93225*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93225*0 + 3*355*FLEN/8, x4, x1, x2)

inst_31076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d803fff; valaddr_reg:x3; val_offset:93228*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93228*0 + 3*356*FLEN/8, x4, x1, x2)

inst_31077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d807fff; valaddr_reg:x3; val_offset:93231*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93231*0 + 3*357*FLEN/8, x4, x1, x2)

inst_31078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d80ffff; valaddr_reg:x3; val_offset:93234*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93234*0 + 3*358*FLEN/8, x4, x1, x2)

inst_31079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d81ffff; valaddr_reg:x3; val_offset:93237*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93237*0 + 3*359*FLEN/8, x4, x1, x2)

inst_31080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d83ffff; valaddr_reg:x3; val_offset:93240*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93240*0 + 3*360*FLEN/8, x4, x1, x2)

inst_31081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d87ffff; valaddr_reg:x3; val_offset:93243*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93243*0 + 3*361*FLEN/8, x4, x1, x2)

inst_31082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d8fffff; valaddr_reg:x3; val_offset:93246*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93246*0 + 3*362*FLEN/8, x4, x1, x2)

inst_31083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6d9fffff; valaddr_reg:x3; val_offset:93249*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93249*0 + 3*363*FLEN/8, x4, x1, x2)

inst_31084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dbfffff; valaddr_reg:x3; val_offset:93252*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93252*0 + 3*364*FLEN/8, x4, x1, x2)

inst_31085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dc00000; valaddr_reg:x3; val_offset:93255*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93255*0 + 3*365*FLEN/8, x4, x1, x2)

inst_31086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6de00000; valaddr_reg:x3; val_offset:93258*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93258*0 + 3*366*FLEN/8, x4, x1, x2)

inst_31087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6df00000; valaddr_reg:x3; val_offset:93261*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93261*0 + 3*367*FLEN/8, x4, x1, x2)

inst_31088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6df80000; valaddr_reg:x3; val_offset:93264*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93264*0 + 3*368*FLEN/8, x4, x1, x2)

inst_31089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfc0000; valaddr_reg:x3; val_offset:93267*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93267*0 + 3*369*FLEN/8, x4, x1, x2)

inst_31090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfe0000; valaddr_reg:x3; val_offset:93270*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93270*0 + 3*370*FLEN/8, x4, x1, x2)

inst_31091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dff0000; valaddr_reg:x3; val_offset:93273*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93273*0 + 3*371*FLEN/8, x4, x1, x2)

inst_31092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dff8000; valaddr_reg:x3; val_offset:93276*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93276*0 + 3*372*FLEN/8, x4, x1, x2)

inst_31093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dffc000; valaddr_reg:x3; val_offset:93279*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93279*0 + 3*373*FLEN/8, x4, x1, x2)

inst_31094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dffe000; valaddr_reg:x3; val_offset:93282*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93282*0 + 3*374*FLEN/8, x4, x1, x2)

inst_31095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfff000; valaddr_reg:x3; val_offset:93285*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93285*0 + 3*375*FLEN/8, x4, x1, x2)

inst_31096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfff800; valaddr_reg:x3; val_offset:93288*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93288*0 + 3*376*FLEN/8, x4, x1, x2)

inst_31097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfffc00; valaddr_reg:x3; val_offset:93291*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93291*0 + 3*377*FLEN/8, x4, x1, x2)

inst_31098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfffe00; valaddr_reg:x3; val_offset:93294*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93294*0 + 3*378*FLEN/8, x4, x1, x2)

inst_31099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dffff00; valaddr_reg:x3; val_offset:93297*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93297*0 + 3*379*FLEN/8, x4, x1, x2)

inst_31100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dffff80; valaddr_reg:x3; val_offset:93300*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93300*0 + 3*380*FLEN/8, x4, x1, x2)

inst_31101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dffffc0; valaddr_reg:x3; val_offset:93303*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93303*0 + 3*381*FLEN/8, x4, x1, x2)

inst_31102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dffffe0; valaddr_reg:x3; val_offset:93306*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93306*0 + 3*382*FLEN/8, x4, x1, x2)

inst_31103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfffff0; valaddr_reg:x3; val_offset:93309*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93309*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_31104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfffff8; valaddr_reg:x3; val_offset:93312*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93312*0 + 3*384*FLEN/8, x4, x1, x2)

inst_31105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfffffc; valaddr_reg:x3; val_offset:93315*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93315*0 + 3*385*FLEN/8, x4, x1, x2)

inst_31106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dfffffe; valaddr_reg:x3; val_offset:93318*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93318*0 + 3*386*FLEN/8, x4, x1, x2)

inst_31107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xdb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x6dffffff; valaddr_reg:x3; val_offset:93321*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93321*0 + 3*387*FLEN/8, x4, x1, x2)

inst_31108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f000001; valaddr_reg:x3; val_offset:93324*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93324*0 + 3*388*FLEN/8, x4, x1, x2)

inst_31109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f000003; valaddr_reg:x3; val_offset:93327*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93327*0 + 3*389*FLEN/8, x4, x1, x2)

inst_31110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f000007; valaddr_reg:x3; val_offset:93330*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93330*0 + 3*390*FLEN/8, x4, x1, x2)

inst_31111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f199999; valaddr_reg:x3; val_offset:93333*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93333*0 + 3*391*FLEN/8, x4, x1, x2)

inst_31112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f249249; valaddr_reg:x3; val_offset:93336*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93336*0 + 3*392*FLEN/8, x4, x1, x2)

inst_31113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f333333; valaddr_reg:x3; val_offset:93339*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93339*0 + 3*393*FLEN/8, x4, x1, x2)

inst_31114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:93342*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93342*0 + 3*394*FLEN/8, x4, x1, x2)

inst_31115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:93345*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93345*0 + 3*395*FLEN/8, x4, x1, x2)

inst_31116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f444444; valaddr_reg:x3; val_offset:93348*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93348*0 + 3*396*FLEN/8, x4, x1, x2)

inst_31117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:93351*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93351*0 + 3*397*FLEN/8, x4, x1, x2)

inst_31118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:93354*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93354*0 + 3*398*FLEN/8, x4, x1, x2)

inst_31119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f666666; valaddr_reg:x3; val_offset:93357*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93357*0 + 3*399*FLEN/8, x4, x1, x2)

inst_31120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:93360*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93360*0 + 3*400*FLEN/8, x4, x1, x2)

inst_31121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:93363*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93363*0 + 3*401*FLEN/8, x4, x1, x2)

inst_31122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:93366*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93366*0 + 3*402*FLEN/8, x4, x1, x2)

inst_31123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203def and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c7da2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203def; op2val:0x3fcc7da2;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:93369*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93369*0 + 3*403*FLEN/8, x4, x1, x2)

inst_31124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:93372*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93372*0 + 3*404*FLEN/8, x4, x1, x2)

inst_31125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:93375*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93375*0 + 3*405*FLEN/8, x4, x1, x2)

inst_31126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:93378*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93378*0 + 3*406*FLEN/8, x4, x1, x2)

inst_31127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:93381*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93381*0 + 3*407*FLEN/8, x4, x1, x2)

inst_31128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:93384*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93384*0 + 3*408*FLEN/8, x4, x1, x2)

inst_31129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:93387*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93387*0 + 3*409*FLEN/8, x4, x1, x2)

inst_31130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:93390*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93390*0 + 3*410*FLEN/8, x4, x1, x2)

inst_31131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:93393*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93393*0 + 3*411*FLEN/8, x4, x1, x2)

inst_31132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:93396*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93396*0 + 3*412*FLEN/8, x4, x1, x2)

inst_31133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:93399*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93399*0 + 3*413*FLEN/8, x4, x1, x2)

inst_31134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:93402*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93402*0 + 3*414*FLEN/8, x4, x1, x2)

inst_31135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:93405*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93405*0 + 3*415*FLEN/8, x4, x1, x2)

inst_31136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:93408*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93408*0 + 3*416*FLEN/8, x4, x1, x2)

inst_31137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:93411*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93411*0 + 3*417*FLEN/8, x4, x1, x2)

inst_31138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:93414*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93414*0 + 3*418*FLEN/8, x4, x1, x2)

inst_31139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:93417*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93417*0 + 3*419*FLEN/8, x4, x1, x2)

inst_31140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90000000; valaddr_reg:x3; val_offset:93420*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93420*0 + 3*420*FLEN/8, x4, x1, x2)

inst_31141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90000001; valaddr_reg:x3; val_offset:93423*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93423*0 + 3*421*FLEN/8, x4, x1, x2)

inst_31142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90000003; valaddr_reg:x3; val_offset:93426*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93426*0 + 3*422*FLEN/8, x4, x1, x2)

inst_31143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90000007; valaddr_reg:x3; val_offset:93429*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93429*0 + 3*423*FLEN/8, x4, x1, x2)

inst_31144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9000000f; valaddr_reg:x3; val_offset:93432*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93432*0 + 3*424*FLEN/8, x4, x1, x2)

inst_31145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9000001f; valaddr_reg:x3; val_offset:93435*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93435*0 + 3*425*FLEN/8, x4, x1, x2)

inst_31146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9000003f; valaddr_reg:x3; val_offset:93438*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93438*0 + 3*426*FLEN/8, x4, x1, x2)

inst_31147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9000007f; valaddr_reg:x3; val_offset:93441*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93441*0 + 3*427*FLEN/8, x4, x1, x2)

inst_31148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x900000ff; valaddr_reg:x3; val_offset:93444*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93444*0 + 3*428*FLEN/8, x4, x1, x2)

inst_31149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x900001ff; valaddr_reg:x3; val_offset:93447*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93447*0 + 3*429*FLEN/8, x4, x1, x2)

inst_31150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x900003ff; valaddr_reg:x3; val_offset:93450*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93450*0 + 3*430*FLEN/8, x4, x1, x2)

inst_31151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x900007ff; valaddr_reg:x3; val_offset:93453*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93453*0 + 3*431*FLEN/8, x4, x1, x2)

inst_31152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90000fff; valaddr_reg:x3; val_offset:93456*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93456*0 + 3*432*FLEN/8, x4, x1, x2)

inst_31153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90001fff; valaddr_reg:x3; val_offset:93459*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93459*0 + 3*433*FLEN/8, x4, x1, x2)

inst_31154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90003fff; valaddr_reg:x3; val_offset:93462*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93462*0 + 3*434*FLEN/8, x4, x1, x2)

inst_31155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90007fff; valaddr_reg:x3; val_offset:93465*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93465*0 + 3*435*FLEN/8, x4, x1, x2)

inst_31156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9000ffff; valaddr_reg:x3; val_offset:93468*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93468*0 + 3*436*FLEN/8, x4, x1, x2)

inst_31157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9001ffff; valaddr_reg:x3; val_offset:93471*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93471*0 + 3*437*FLEN/8, x4, x1, x2)

inst_31158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9003ffff; valaddr_reg:x3; val_offset:93474*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93474*0 + 3*438*FLEN/8, x4, x1, x2)

inst_31159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x9007ffff; valaddr_reg:x3; val_offset:93477*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93477*0 + 3*439*FLEN/8, x4, x1, x2)

inst_31160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x900fffff; valaddr_reg:x3; val_offset:93480*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93480*0 + 3*440*FLEN/8, x4, x1, x2)

inst_31161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x901fffff; valaddr_reg:x3; val_offset:93483*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93483*0 + 3*441*FLEN/8, x4, x1, x2)

inst_31162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x903fffff; valaddr_reg:x3; val_offset:93486*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93486*0 + 3*442*FLEN/8, x4, x1, x2)

inst_31163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90400000; valaddr_reg:x3; val_offset:93489*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93489*0 + 3*443*FLEN/8, x4, x1, x2)

inst_31164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90600000; valaddr_reg:x3; val_offset:93492*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93492*0 + 3*444*FLEN/8, x4, x1, x2)

inst_31165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90700000; valaddr_reg:x3; val_offset:93495*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93495*0 + 3*445*FLEN/8, x4, x1, x2)

inst_31166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x90780000; valaddr_reg:x3; val_offset:93498*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93498*0 + 3*446*FLEN/8, x4, x1, x2)

inst_31167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907c0000; valaddr_reg:x3; val_offset:93501*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93501*0 + 3*447*FLEN/8, x4, x1, x2)

inst_31168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907e0000; valaddr_reg:x3; val_offset:93504*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93504*0 + 3*448*FLEN/8, x4, x1, x2)

inst_31169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907f0000; valaddr_reg:x3; val_offset:93507*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93507*0 + 3*449*FLEN/8, x4, x1, x2)

inst_31170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907f8000; valaddr_reg:x3; val_offset:93510*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93510*0 + 3*450*FLEN/8, x4, x1, x2)

inst_31171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907fc000; valaddr_reg:x3; val_offset:93513*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93513*0 + 3*451*FLEN/8, x4, x1, x2)

inst_31172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907fe000; valaddr_reg:x3; val_offset:93516*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93516*0 + 3*452*FLEN/8, x4, x1, x2)

inst_31173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ff000; valaddr_reg:x3; val_offset:93519*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93519*0 + 3*453*FLEN/8, x4, x1, x2)

inst_31174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ff800; valaddr_reg:x3; val_offset:93522*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93522*0 + 3*454*FLEN/8, x4, x1, x2)

inst_31175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ffc00; valaddr_reg:x3; val_offset:93525*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93525*0 + 3*455*FLEN/8, x4, x1, x2)

inst_31176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ffe00; valaddr_reg:x3; val_offset:93528*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93528*0 + 3*456*FLEN/8, x4, x1, x2)

inst_31177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907fff00; valaddr_reg:x3; val_offset:93531*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93531*0 + 3*457*FLEN/8, x4, x1, x2)

inst_31178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907fff80; valaddr_reg:x3; val_offset:93534*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93534*0 + 3*458*FLEN/8, x4, x1, x2)

inst_31179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907fffc0; valaddr_reg:x3; val_offset:93537*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93537*0 + 3*459*FLEN/8, x4, x1, x2)

inst_31180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907fffe0; valaddr_reg:x3; val_offset:93540*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93540*0 + 3*460*FLEN/8, x4, x1, x2)

inst_31181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ffff0; valaddr_reg:x3; val_offset:93543*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93543*0 + 3*461*FLEN/8, x4, x1, x2)

inst_31182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ffff8; valaddr_reg:x3; val_offset:93546*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93546*0 + 3*462*FLEN/8, x4, x1, x2)

inst_31183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ffffc; valaddr_reg:x3; val_offset:93549*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93549*0 + 3*463*FLEN/8, x4, x1, x2)

inst_31184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907ffffe; valaddr_reg:x3; val_offset:93552*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93552*0 + 3*464*FLEN/8, x4, x1, x2)

inst_31185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2042a3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2042a3; op2val:0x80000000;
op3val:0x907fffff; valaddr_reg:x3; val_offset:93555*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93555*0 + 3*465*FLEN/8, x4, x1, x2)

inst_31186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2800000; valaddr_reg:x3; val_offset:93558*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93558*0 + 3*466*FLEN/8, x4, x1, x2)

inst_31187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2800001; valaddr_reg:x3; val_offset:93561*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93561*0 + 3*467*FLEN/8, x4, x1, x2)

inst_31188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2800003; valaddr_reg:x3; val_offset:93564*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93564*0 + 3*468*FLEN/8, x4, x1, x2)

inst_31189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2800007; valaddr_reg:x3; val_offset:93567*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93567*0 + 3*469*FLEN/8, x4, x1, x2)

inst_31190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb280000f; valaddr_reg:x3; val_offset:93570*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93570*0 + 3*470*FLEN/8, x4, x1, x2)

inst_31191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb280001f; valaddr_reg:x3; val_offset:93573*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93573*0 + 3*471*FLEN/8, x4, x1, x2)

inst_31192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb280003f; valaddr_reg:x3; val_offset:93576*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93576*0 + 3*472*FLEN/8, x4, x1, x2)

inst_31193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb280007f; valaddr_reg:x3; val_offset:93579*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93579*0 + 3*473*FLEN/8, x4, x1, x2)

inst_31194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb28000ff; valaddr_reg:x3; val_offset:93582*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93582*0 + 3*474*FLEN/8, x4, x1, x2)

inst_31195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb28001ff; valaddr_reg:x3; val_offset:93585*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93585*0 + 3*475*FLEN/8, x4, x1, x2)

inst_31196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb28003ff; valaddr_reg:x3; val_offset:93588*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93588*0 + 3*476*FLEN/8, x4, x1, x2)

inst_31197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb28007ff; valaddr_reg:x3; val_offset:93591*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93591*0 + 3*477*FLEN/8, x4, x1, x2)

inst_31198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2800fff; valaddr_reg:x3; val_offset:93594*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93594*0 + 3*478*FLEN/8, x4, x1, x2)

inst_31199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2801fff; valaddr_reg:x3; val_offset:93597*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93597*0 + 3*479*FLEN/8, x4, x1, x2)

inst_31200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2803fff; valaddr_reg:x3; val_offset:93600*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93600*0 + 3*480*FLEN/8, x4, x1, x2)

inst_31201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2807fff; valaddr_reg:x3; val_offset:93603*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93603*0 + 3*481*FLEN/8, x4, x1, x2)

inst_31202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb280ffff; valaddr_reg:x3; val_offset:93606*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93606*0 + 3*482*FLEN/8, x4, x1, x2)

inst_31203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb281ffff; valaddr_reg:x3; val_offset:93609*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93609*0 + 3*483*FLEN/8, x4, x1, x2)

inst_31204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb283ffff; valaddr_reg:x3; val_offset:93612*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93612*0 + 3*484*FLEN/8, x4, x1, x2)

inst_31205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb287ffff; valaddr_reg:x3; val_offset:93615*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93615*0 + 3*485*FLEN/8, x4, x1, x2)

inst_31206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb28fffff; valaddr_reg:x3; val_offset:93618*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93618*0 + 3*486*FLEN/8, x4, x1, x2)

inst_31207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb29fffff; valaddr_reg:x3; val_offset:93621*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93621*0 + 3*487*FLEN/8, x4, x1, x2)

inst_31208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2bfffff; valaddr_reg:x3; val_offset:93624*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93624*0 + 3*488*FLEN/8, x4, x1, x2)

inst_31209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2c00000; valaddr_reg:x3; val_offset:93627*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93627*0 + 3*489*FLEN/8, x4, x1, x2)

inst_31210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2e00000; valaddr_reg:x3; val_offset:93630*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93630*0 + 3*490*FLEN/8, x4, x1, x2)

inst_31211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2f00000; valaddr_reg:x3; val_offset:93633*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93633*0 + 3*491*FLEN/8, x4, x1, x2)

inst_31212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2f80000; valaddr_reg:x3; val_offset:93636*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93636*0 + 3*492*FLEN/8, x4, x1, x2)

inst_31213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fc0000; valaddr_reg:x3; val_offset:93639*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93639*0 + 3*493*FLEN/8, x4, x1, x2)

inst_31214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fe0000; valaddr_reg:x3; val_offset:93642*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93642*0 + 3*494*FLEN/8, x4, x1, x2)

inst_31215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ff0000; valaddr_reg:x3; val_offset:93645*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93645*0 + 3*495*FLEN/8, x4, x1, x2)

inst_31216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ff8000; valaddr_reg:x3; val_offset:93648*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93648*0 + 3*496*FLEN/8, x4, x1, x2)

inst_31217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ffc000; valaddr_reg:x3; val_offset:93651*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93651*0 + 3*497*FLEN/8, x4, x1, x2)

inst_31218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ffe000; valaddr_reg:x3; val_offset:93654*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93654*0 + 3*498*FLEN/8, x4, x1, x2)

inst_31219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fff000; valaddr_reg:x3; val_offset:93657*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93657*0 + 3*499*FLEN/8, x4, x1, x2)

inst_31220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fff800; valaddr_reg:x3; val_offset:93660*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93660*0 + 3*500*FLEN/8, x4, x1, x2)

inst_31221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fffc00; valaddr_reg:x3; val_offset:93663*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93663*0 + 3*501*FLEN/8, x4, x1, x2)

inst_31222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fffe00; valaddr_reg:x3; val_offset:93666*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93666*0 + 3*502*FLEN/8, x4, x1, x2)

inst_31223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ffff00; valaddr_reg:x3; val_offset:93669*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93669*0 + 3*503*FLEN/8, x4, x1, x2)

inst_31224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ffff80; valaddr_reg:x3; val_offset:93672*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93672*0 + 3*504*FLEN/8, x4, x1, x2)

inst_31225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ffffc0; valaddr_reg:x3; val_offset:93675*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93675*0 + 3*505*FLEN/8, x4, x1, x2)

inst_31226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ffffe0; valaddr_reg:x3; val_offset:93678*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93678*0 + 3*506*FLEN/8, x4, x1, x2)

inst_31227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fffff0; valaddr_reg:x3; val_offset:93681*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93681*0 + 3*507*FLEN/8, x4, x1, x2)

inst_31228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fffff8; valaddr_reg:x3; val_offset:93684*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93684*0 + 3*508*FLEN/8, x4, x1, x2)

inst_31229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fffffc; valaddr_reg:x3; val_offset:93687*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93687*0 + 3*509*FLEN/8, x4, x1, x2)

inst_31230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2fffffe; valaddr_reg:x3; val_offset:93690*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93690*0 + 3*510*FLEN/8, x4, x1, x2)

inst_31231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xb2ffffff; valaddr_reg:x3; val_offset:93693*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93693*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_31232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbf800001; valaddr_reg:x3; val_offset:93696*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93696*0 + 3*512*FLEN/8, x4, x1, x2)

inst_31233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbf800003; valaddr_reg:x3; val_offset:93699*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93699*0 + 3*513*FLEN/8, x4, x1, x2)

inst_31234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbf800007; valaddr_reg:x3; val_offset:93702*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93702*0 + 3*514*FLEN/8, x4, x1, x2)

inst_31235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbf999999; valaddr_reg:x3; val_offset:93705*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93705*0 + 3*515*FLEN/8, x4, x1, x2)

inst_31236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:93708*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93708*0 + 3*516*FLEN/8, x4, x1, x2)

inst_31237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:93711*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93711*0 + 3*517*FLEN/8, x4, x1, x2)

inst_31238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:93714*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93714*0 + 3*518*FLEN/8, x4, x1, x2)

inst_31239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:93717*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93717*0 + 3*519*FLEN/8, x4, x1, x2)

inst_31240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:93720*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93720*0 + 3*520*FLEN/8, x4, x1, x2)

inst_31241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:93723*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93723*0 + 3*521*FLEN/8, x4, x1, x2)

inst_31242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:93726*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93726*0 + 3*522*FLEN/8, x4, x1, x2)

inst_31243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:93729*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93729*0 + 3*523*FLEN/8, x4, x1, x2)

inst_31244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:93732*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93732*0 + 3*524*FLEN/8, x4, x1, x2)

inst_31245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:93735*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93735*0 + 3*525*FLEN/8, x4, x1, x2)

inst_31246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:93738*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93738*0 + 3*526*FLEN/8, x4, x1, x2)

inst_31247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d645 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x32eefd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20d645; op2val:0x8032eefd;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:93741*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93741*0 + 3*527*FLEN/8, x4, x1, x2)

inst_31248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:93744*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93744*0 + 3*528*FLEN/8, x4, x1, x2)

inst_31249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:93747*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93747*0 + 3*529*FLEN/8, x4, x1, x2)

inst_31250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:93750*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93750*0 + 3*530*FLEN/8, x4, x1, x2)

inst_31251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:93753*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93753*0 + 3*531*FLEN/8, x4, x1, x2)

inst_31252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:93756*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93756*0 + 3*532*FLEN/8, x4, x1, x2)

inst_31253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:93759*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93759*0 + 3*533*FLEN/8, x4, x1, x2)

inst_31254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:93762*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93762*0 + 3*534*FLEN/8, x4, x1, x2)

inst_31255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:93765*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93765*0 + 3*535*FLEN/8, x4, x1, x2)

inst_31256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:93768*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93768*0 + 3*536*FLEN/8, x4, x1, x2)

inst_31257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:93771*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93771*0 + 3*537*FLEN/8, x4, x1, x2)

inst_31258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:93774*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93774*0 + 3*538*FLEN/8, x4, x1, x2)

inst_31259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:93777*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93777*0 + 3*539*FLEN/8, x4, x1, x2)

inst_31260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:93780*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93780*0 + 3*540*FLEN/8, x4, x1, x2)

inst_31261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:93783*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93783*0 + 3*541*FLEN/8, x4, x1, x2)

inst_31262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:93786*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93786*0 + 3*542*FLEN/8, x4, x1, x2)

inst_31263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:93789*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93789*0 + 3*543*FLEN/8, x4, x1, x2)

inst_31264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:93792*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93792*0 + 3*544*FLEN/8, x4, x1, x2)

inst_31265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:93795*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93795*0 + 3*545*FLEN/8, x4, x1, x2)

inst_31266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:93798*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93798*0 + 3*546*FLEN/8, x4, x1, x2)

inst_31267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:93801*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93801*0 + 3*547*FLEN/8, x4, x1, x2)

inst_31268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:93804*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93804*0 + 3*548*FLEN/8, x4, x1, x2)

inst_31269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:93807*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93807*0 + 3*549*FLEN/8, x4, x1, x2)

inst_31270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:93810*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93810*0 + 3*550*FLEN/8, x4, x1, x2)

inst_31271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:93813*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93813*0 + 3*551*FLEN/8, x4, x1, x2)

inst_31272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:93816*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93816*0 + 3*552*FLEN/8, x4, x1, x2)

inst_31273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:93819*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93819*0 + 3*553*FLEN/8, x4, x1, x2)

inst_31274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:93822*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93822*0 + 3*554*FLEN/8, x4, x1, x2)

inst_31275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:93825*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93825*0 + 3*555*FLEN/8, x4, x1, x2)

inst_31276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:93828*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93828*0 + 3*556*FLEN/8, x4, x1, x2)

inst_31277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:93831*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93831*0 + 3*557*FLEN/8, x4, x1, x2)

inst_31278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:93834*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93834*0 + 3*558*FLEN/8, x4, x1, x2)

inst_31279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:93837*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93837*0 + 3*559*FLEN/8, x4, x1, x2)

inst_31280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:93840*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93840*0 + 3*560*FLEN/8, x4, x1, x2)

inst_31281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:93843*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93843*0 + 3*561*FLEN/8, x4, x1, x2)

inst_31282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:93846*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93846*0 + 3*562*FLEN/8, x4, x1, x2)

inst_31283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:93849*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93849*0 + 3*563*FLEN/8, x4, x1, x2)

inst_31284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:93852*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93852*0 + 3*564*FLEN/8, x4, x1, x2)

inst_31285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:93855*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93855*0 + 3*565*FLEN/8, x4, x1, x2)

inst_31286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:93858*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93858*0 + 3*566*FLEN/8, x4, x1, x2)

inst_31287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:93861*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93861*0 + 3*567*FLEN/8, x4, x1, x2)

inst_31288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:93864*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93864*0 + 3*568*FLEN/8, x4, x1, x2)

inst_31289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:93867*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93867*0 + 3*569*FLEN/8, x4, x1, x2)

inst_31290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:93870*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93870*0 + 3*570*FLEN/8, x4, x1, x2)

inst_31291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:93873*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93873*0 + 3*571*FLEN/8, x4, x1, x2)

inst_31292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:93876*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93876*0 + 3*572*FLEN/8, x4, x1, x2)

inst_31293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:93879*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93879*0 + 3*573*FLEN/8, x4, x1, x2)

inst_31294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:93882*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93882*0 + 3*574*FLEN/8, x4, x1, x2)

inst_31295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:93885*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93885*0 + 3*575*FLEN/8, x4, x1, x2)

inst_31296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:93888*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93888*0 + 3*576*FLEN/8, x4, x1, x2)

inst_31297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:93891*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93891*0 + 3*577*FLEN/8, x4, x1, x2)

inst_31298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:93894*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93894*0 + 3*578*FLEN/8, x4, x1, x2)

inst_31299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:93897*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93897*0 + 3*579*FLEN/8, x4, x1, x2)

inst_31300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:93900*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93900*0 + 3*580*FLEN/8, x4, x1, x2)

inst_31301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:93903*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93903*0 + 3*581*FLEN/8, x4, x1, x2)

inst_31302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:93906*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93906*0 + 3*582*FLEN/8, x4, x1, x2)

inst_31303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:93909*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93909*0 + 3*583*FLEN/8, x4, x1, x2)

inst_31304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:93912*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93912*0 + 3*584*FLEN/8, x4, x1, x2)

inst_31305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:93915*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93915*0 + 3*585*FLEN/8, x4, x1, x2)

inst_31306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:93918*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93918*0 + 3*586*FLEN/8, x4, x1, x2)

inst_31307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:93921*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93921*0 + 3*587*FLEN/8, x4, x1, x2)

inst_31308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:93924*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93924*0 + 3*588*FLEN/8, x4, x1, x2)

inst_31309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21454b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21454b; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:93927*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93927*0 + 3*589*FLEN/8, x4, x1, x2)

inst_31310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:93930*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93930*0 + 3*590*FLEN/8, x4, x1, x2)

inst_31311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:93933*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93933*0 + 3*591*FLEN/8, x4, x1, x2)

inst_31312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:93936*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93936*0 + 3*592*FLEN/8, x4, x1, x2)

inst_31313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:93939*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93939*0 + 3*593*FLEN/8, x4, x1, x2)

inst_31314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:93942*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93942*0 + 3*594*FLEN/8, x4, x1, x2)

inst_31315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:93945*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93945*0 + 3*595*FLEN/8, x4, x1, x2)

inst_31316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:93948*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93948*0 + 3*596*FLEN/8, x4, x1, x2)

inst_31317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:93951*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93951*0 + 3*597*FLEN/8, x4, x1, x2)

inst_31318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:93954*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93954*0 + 3*598*FLEN/8, x4, x1, x2)

inst_31319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:93957*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93957*0 + 3*599*FLEN/8, x4, x1, x2)

inst_31320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:93960*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93960*0 + 3*600*FLEN/8, x4, x1, x2)

inst_31321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:93963*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93963*0 + 3*601*FLEN/8, x4, x1, x2)

inst_31322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:93966*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93966*0 + 3*602*FLEN/8, x4, x1, x2)

inst_31323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:93969*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93969*0 + 3*603*FLEN/8, x4, x1, x2)

inst_31324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:93972*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93972*0 + 3*604*FLEN/8, x4, x1, x2)

inst_31325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:93975*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93975*0 + 3*605*FLEN/8, x4, x1, x2)

inst_31326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800000; valaddr_reg:x3; val_offset:93978*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93978*0 + 3*606*FLEN/8, x4, x1, x2)

inst_31327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800001; valaddr_reg:x3; val_offset:93981*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93981*0 + 3*607*FLEN/8, x4, x1, x2)

inst_31328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800003; valaddr_reg:x3; val_offset:93984*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93984*0 + 3*608*FLEN/8, x4, x1, x2)

inst_31329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800007; valaddr_reg:x3; val_offset:93987*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93987*0 + 3*609*FLEN/8, x4, x1, x2)

inst_31330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380000f; valaddr_reg:x3; val_offset:93990*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93990*0 + 3*610*FLEN/8, x4, x1, x2)

inst_31331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380001f; valaddr_reg:x3; val_offset:93993*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93993*0 + 3*611*FLEN/8, x4, x1, x2)

inst_31332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380003f; valaddr_reg:x3; val_offset:93996*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93996*0 + 3*612*FLEN/8, x4, x1, x2)

inst_31333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380007f; valaddr_reg:x3; val_offset:93999*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93999*0 + 3*613*FLEN/8, x4, x1, x2)

inst_31334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38000ff; valaddr_reg:x3; val_offset:94002*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94002*0 + 3*614*FLEN/8, x4, x1, x2)

inst_31335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38001ff; valaddr_reg:x3; val_offset:94005*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94005*0 + 3*615*FLEN/8, x4, x1, x2)

inst_31336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38003ff; valaddr_reg:x3; val_offset:94008*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94008*0 + 3*616*FLEN/8, x4, x1, x2)

inst_31337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38007ff; valaddr_reg:x3; val_offset:94011*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94011*0 + 3*617*FLEN/8, x4, x1, x2)

inst_31338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3800fff; valaddr_reg:x3; val_offset:94014*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94014*0 + 3*618*FLEN/8, x4, x1, x2)

inst_31339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3801fff; valaddr_reg:x3; val_offset:94017*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94017*0 + 3*619*FLEN/8, x4, x1, x2)

inst_31340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3803fff; valaddr_reg:x3; val_offset:94020*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94020*0 + 3*620*FLEN/8, x4, x1, x2)

inst_31341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3807fff; valaddr_reg:x3; val_offset:94023*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94023*0 + 3*621*FLEN/8, x4, x1, x2)

inst_31342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x380ffff; valaddr_reg:x3; val_offset:94026*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94026*0 + 3*622*FLEN/8, x4, x1, x2)

inst_31343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x381ffff; valaddr_reg:x3; val_offset:94029*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94029*0 + 3*623*FLEN/8, x4, x1, x2)

inst_31344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x383ffff; valaddr_reg:x3; val_offset:94032*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94032*0 + 3*624*FLEN/8, x4, x1, x2)

inst_31345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x387ffff; valaddr_reg:x3; val_offset:94035*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94035*0 + 3*625*FLEN/8, x4, x1, x2)

inst_31346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x38fffff; valaddr_reg:x3; val_offset:94038*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94038*0 + 3*626*FLEN/8, x4, x1, x2)

inst_31347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x39fffff; valaddr_reg:x3; val_offset:94041*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94041*0 + 3*627*FLEN/8, x4, x1, x2)

inst_31348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3bfffff; valaddr_reg:x3; val_offset:94044*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94044*0 + 3*628*FLEN/8, x4, x1, x2)

inst_31349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3c00000; valaddr_reg:x3; val_offset:94047*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94047*0 + 3*629*FLEN/8, x4, x1, x2)

inst_31350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3e00000; valaddr_reg:x3; val_offset:94050*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94050*0 + 3*630*FLEN/8, x4, x1, x2)

inst_31351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3f00000; valaddr_reg:x3; val_offset:94053*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94053*0 + 3*631*FLEN/8, x4, x1, x2)

inst_31352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3f80000; valaddr_reg:x3; val_offset:94056*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94056*0 + 3*632*FLEN/8, x4, x1, x2)

inst_31353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fc0000; valaddr_reg:x3; val_offset:94059*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94059*0 + 3*633*FLEN/8, x4, x1, x2)

inst_31354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fe0000; valaddr_reg:x3; val_offset:94062*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94062*0 + 3*634*FLEN/8, x4, x1, x2)

inst_31355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ff0000; valaddr_reg:x3; val_offset:94065*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94065*0 + 3*635*FLEN/8, x4, x1, x2)

inst_31356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ff8000; valaddr_reg:x3; val_offset:94068*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94068*0 + 3*636*FLEN/8, x4, x1, x2)

inst_31357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffc000; valaddr_reg:x3; val_offset:94071*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94071*0 + 3*637*FLEN/8, x4, x1, x2)

inst_31358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffe000; valaddr_reg:x3; val_offset:94074*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94074*0 + 3*638*FLEN/8, x4, x1, x2)

inst_31359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fff000; valaddr_reg:x3; val_offset:94077*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94077*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_31360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fff800; valaddr_reg:x3; val_offset:94080*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94080*0 + 3*640*FLEN/8, x4, x1, x2)

inst_31361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffc00; valaddr_reg:x3; val_offset:94083*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94083*0 + 3*641*FLEN/8, x4, x1, x2)

inst_31362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffe00; valaddr_reg:x3; val_offset:94086*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94086*0 + 3*642*FLEN/8, x4, x1, x2)

inst_31363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffff00; valaddr_reg:x3; val_offset:94089*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94089*0 + 3*643*FLEN/8, x4, x1, x2)

inst_31364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x3; val_offset:94092*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94092*0 + 3*644*FLEN/8, x4, x1, x2)

inst_31365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x3; val_offset:94095*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94095*0 + 3*645*FLEN/8, x4, x1, x2)

inst_31366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x3; val_offset:94098*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94098*0 + 3*646*FLEN/8, x4, x1, x2)

inst_31367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:94101*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94101*0 + 3*647*FLEN/8, x4, x1, x2)

inst_31368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:94104*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94104*0 + 3*648*FLEN/8, x4, x1, x2)

inst_31369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:94107*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94107*0 + 3*649*FLEN/8, x4, x1, x2)

inst_31370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:94110*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94110*0 + 3*650*FLEN/8, x4, x1, x2)

inst_31371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f216afe; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:94113*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94113*0 + 3*651*FLEN/8, x4, x1, x2)

inst_31372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:94116*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94116*0 + 3*652*FLEN/8, x4, x1, x2)

inst_31373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:94119*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94119*0 + 3*653*FLEN/8, x4, x1, x2)

inst_31374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:94122*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94122*0 + 3*654*FLEN/8, x4, x1, x2)

inst_31375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:94125*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94125*0 + 3*655*FLEN/8, x4, x1, x2)

inst_31376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:94128*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94128*0 + 3*656*FLEN/8, x4, x1, x2)

inst_31377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:94131*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94131*0 + 3*657*FLEN/8, x4, x1, x2)

inst_31378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:94134*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94134*0 + 3*658*FLEN/8, x4, x1, x2)

inst_31379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:94137*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94137*0 + 3*659*FLEN/8, x4, x1, x2)

inst_31380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:94140*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94140*0 + 3*660*FLEN/8, x4, x1, x2)

inst_31381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:94143*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94143*0 + 3*661*FLEN/8, x4, x1, x2)

inst_31382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:94146*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94146*0 + 3*662*FLEN/8, x4, x1, x2)

inst_31383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:94149*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94149*0 + 3*663*FLEN/8, x4, x1, x2)

inst_31384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:94152*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94152*0 + 3*664*FLEN/8, x4, x1, x2)

inst_31385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:94155*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94155*0 + 3*665*FLEN/8, x4, x1, x2)

inst_31386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:94158*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94158*0 + 3*666*FLEN/8, x4, x1, x2)

inst_31387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:94161*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94161*0 + 3*667*FLEN/8, x4, x1, x2)

inst_31388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:94164*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94164*0 + 3*668*FLEN/8, x4, x1, x2)

inst_31389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:94167*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94167*0 + 3*669*FLEN/8, x4, x1, x2)

inst_31390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:94170*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94170*0 + 3*670*FLEN/8, x4, x1, x2)

inst_31391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:94173*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94173*0 + 3*671*FLEN/8, x4, x1, x2)

inst_31392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:94176*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94176*0 + 3*672*FLEN/8, x4, x1, x2)

inst_31393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:94179*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94179*0 + 3*673*FLEN/8, x4, x1, x2)

inst_31394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:94182*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94182*0 + 3*674*FLEN/8, x4, x1, x2)

inst_31395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:94185*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94185*0 + 3*675*FLEN/8, x4, x1, x2)

inst_31396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:94188*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94188*0 + 3*676*FLEN/8, x4, x1, x2)

inst_31397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:94191*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94191*0 + 3*677*FLEN/8, x4, x1, x2)

inst_31398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:94194*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94194*0 + 3*678*FLEN/8, x4, x1, x2)

inst_31399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:94197*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94197*0 + 3*679*FLEN/8, x4, x1, x2)

inst_31400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:94200*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94200*0 + 3*680*FLEN/8, x4, x1, x2)

inst_31401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:94203*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94203*0 + 3*681*FLEN/8, x4, x1, x2)

inst_31402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:94206*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94206*0 + 3*682*FLEN/8, x4, x1, x2)

inst_31403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:94209*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94209*0 + 3*683*FLEN/8, x4, x1, x2)

inst_31404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:94212*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94212*0 + 3*684*FLEN/8, x4, x1, x2)

inst_31405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:94215*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94215*0 + 3*685*FLEN/8, x4, x1, x2)

inst_31406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:94218*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94218*0 + 3*686*FLEN/8, x4, x1, x2)

inst_31407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:94221*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94221*0 + 3*687*FLEN/8, x4, x1, x2)

inst_31408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:94224*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94224*0 + 3*688*FLEN/8, x4, x1, x2)

inst_31409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:94227*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94227*0 + 3*689*FLEN/8, x4, x1, x2)

inst_31410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:94230*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94230*0 + 3*690*FLEN/8, x4, x1, x2)

inst_31411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:94233*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94233*0 + 3*691*FLEN/8, x4, x1, x2)

inst_31412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:94236*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94236*0 + 3*692*FLEN/8, x4, x1, x2)

inst_31413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:94239*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94239*0 + 3*693*FLEN/8, x4, x1, x2)

inst_31414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:94242*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94242*0 + 3*694*FLEN/8, x4, x1, x2)

inst_31415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:94245*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94245*0 + 3*695*FLEN/8, x4, x1, x2)

inst_31416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:94248*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94248*0 + 3*696*FLEN/8, x4, x1, x2)

inst_31417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:94251*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94251*0 + 3*697*FLEN/8, x4, x1, x2)

inst_31418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:94254*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94254*0 + 3*698*FLEN/8, x4, x1, x2)

inst_31419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:94257*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94257*0 + 3*699*FLEN/8, x4, x1, x2)

inst_31420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:94260*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94260*0 + 3*700*FLEN/8, x4, x1, x2)

inst_31421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:94263*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94263*0 + 3*701*FLEN/8, x4, x1, x2)

inst_31422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:94266*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94266*0 + 3*702*FLEN/8, x4, x1, x2)

inst_31423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:94269*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94269*0 + 3*703*FLEN/8, x4, x1, x2)

inst_31424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:94272*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94272*0 + 3*704*FLEN/8, x4, x1, x2)

inst_31425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:94275*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94275*0 + 3*705*FLEN/8, x4, x1, x2)

inst_31426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:94278*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94278*0 + 3*706*FLEN/8, x4, x1, x2)

inst_31427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:94281*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94281*0 + 3*707*FLEN/8, x4, x1, x2)

inst_31428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:94284*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94284*0 + 3*708*FLEN/8, x4, x1, x2)

inst_31429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:94287*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94287*0 + 3*709*FLEN/8, x4, x1, x2)

inst_31430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:94290*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94290*0 + 3*710*FLEN/8, x4, x1, x2)

inst_31431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:94293*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94293*0 + 3*711*FLEN/8, x4, x1, x2)

inst_31432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:94296*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94296*0 + 3*712*FLEN/8, x4, x1, x2)

inst_31433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21a695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21a695; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:94299*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94299*0 + 3*713*FLEN/8, x4, x1, x2)

inst_31434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:94302*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94302*0 + 3*714*FLEN/8, x4, x1, x2)

inst_31435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:94305*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94305*0 + 3*715*FLEN/8, x4, x1, x2)

inst_31436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:94308*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94308*0 + 3*716*FLEN/8, x4, x1, x2)

inst_31437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:94311*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94311*0 + 3*717*FLEN/8, x4, x1, x2)

inst_31438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:94314*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94314*0 + 3*718*FLEN/8, x4, x1, x2)

inst_31439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:94317*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94317*0 + 3*719*FLEN/8, x4, x1, x2)

inst_31440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:94320*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94320*0 + 3*720*FLEN/8, x4, x1, x2)

inst_31441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:94323*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94323*0 + 3*721*FLEN/8, x4, x1, x2)

inst_31442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:94326*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94326*0 + 3*722*FLEN/8, x4, x1, x2)

inst_31443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:94329*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94329*0 + 3*723*FLEN/8, x4, x1, x2)

inst_31444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:94332*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94332*0 + 3*724*FLEN/8, x4, x1, x2)

inst_31445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:94335*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94335*0 + 3*725*FLEN/8, x4, x1, x2)

inst_31446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:94338*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94338*0 + 3*726*FLEN/8, x4, x1, x2)

inst_31447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:94341*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94341*0 + 3*727*FLEN/8, x4, x1, x2)

inst_31448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:94344*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94344*0 + 3*728*FLEN/8, x4, x1, x2)

inst_31449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:94347*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94347*0 + 3*729*FLEN/8, x4, x1, x2)

inst_31450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce000000; valaddr_reg:x3; val_offset:94350*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94350*0 + 3*730*FLEN/8, x4, x1, x2)

inst_31451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce000001; valaddr_reg:x3; val_offset:94353*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94353*0 + 3*731*FLEN/8, x4, x1, x2)

inst_31452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce000003; valaddr_reg:x3; val_offset:94356*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94356*0 + 3*732*FLEN/8, x4, x1, x2)

inst_31453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce000007; valaddr_reg:x3; val_offset:94359*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94359*0 + 3*733*FLEN/8, x4, x1, x2)

inst_31454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce00000f; valaddr_reg:x3; val_offset:94362*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94362*0 + 3*734*FLEN/8, x4, x1, x2)

inst_31455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce00001f; valaddr_reg:x3; val_offset:94365*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94365*0 + 3*735*FLEN/8, x4, x1, x2)

inst_31456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce00003f; valaddr_reg:x3; val_offset:94368*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94368*0 + 3*736*FLEN/8, x4, x1, x2)

inst_31457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce00007f; valaddr_reg:x3; val_offset:94371*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94371*0 + 3*737*FLEN/8, x4, x1, x2)

inst_31458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce0000ff; valaddr_reg:x3; val_offset:94374*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94374*0 + 3*738*FLEN/8, x4, x1, x2)

inst_31459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce0001ff; valaddr_reg:x3; val_offset:94377*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94377*0 + 3*739*FLEN/8, x4, x1, x2)

inst_31460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce0003ff; valaddr_reg:x3; val_offset:94380*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94380*0 + 3*740*FLEN/8, x4, x1, x2)

inst_31461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce0007ff; valaddr_reg:x3; val_offset:94383*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94383*0 + 3*741*FLEN/8, x4, x1, x2)

inst_31462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce000fff; valaddr_reg:x3; val_offset:94386*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94386*0 + 3*742*FLEN/8, x4, x1, x2)

inst_31463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce001fff; valaddr_reg:x3; val_offset:94389*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94389*0 + 3*743*FLEN/8, x4, x1, x2)

inst_31464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce003fff; valaddr_reg:x3; val_offset:94392*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94392*0 + 3*744*FLEN/8, x4, x1, x2)

inst_31465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce007fff; valaddr_reg:x3; val_offset:94395*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94395*0 + 3*745*FLEN/8, x4, x1, x2)

inst_31466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce00ffff; valaddr_reg:x3; val_offset:94398*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94398*0 + 3*746*FLEN/8, x4, x1, x2)

inst_31467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce01ffff; valaddr_reg:x3; val_offset:94401*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94401*0 + 3*747*FLEN/8, x4, x1, x2)

inst_31468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce03ffff; valaddr_reg:x3; val_offset:94404*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94404*0 + 3*748*FLEN/8, x4, x1, x2)

inst_31469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce07ffff; valaddr_reg:x3; val_offset:94407*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94407*0 + 3*749*FLEN/8, x4, x1, x2)

inst_31470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce0fffff; valaddr_reg:x3; val_offset:94410*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94410*0 + 3*750*FLEN/8, x4, x1, x2)

inst_31471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce1fffff; valaddr_reg:x3; val_offset:94413*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94413*0 + 3*751*FLEN/8, x4, x1, x2)

inst_31472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce3fffff; valaddr_reg:x3; val_offset:94416*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94416*0 + 3*752*FLEN/8, x4, x1, x2)

inst_31473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce400000; valaddr_reg:x3; val_offset:94419*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94419*0 + 3*753*FLEN/8, x4, x1, x2)

inst_31474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce600000; valaddr_reg:x3; val_offset:94422*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94422*0 + 3*754*FLEN/8, x4, x1, x2)

inst_31475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce700000; valaddr_reg:x3; val_offset:94425*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94425*0 + 3*755*FLEN/8, x4, x1, x2)

inst_31476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce780000; valaddr_reg:x3; val_offset:94428*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94428*0 + 3*756*FLEN/8, x4, x1, x2)

inst_31477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7c0000; valaddr_reg:x3; val_offset:94431*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94431*0 + 3*757*FLEN/8, x4, x1, x2)

inst_31478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7e0000; valaddr_reg:x3; val_offset:94434*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94434*0 + 3*758*FLEN/8, x4, x1, x2)

inst_31479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7f0000; valaddr_reg:x3; val_offset:94437*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94437*0 + 3*759*FLEN/8, x4, x1, x2)

inst_31480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7f8000; valaddr_reg:x3; val_offset:94440*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94440*0 + 3*760*FLEN/8, x4, x1, x2)

inst_31481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7fc000; valaddr_reg:x3; val_offset:94443*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94443*0 + 3*761*FLEN/8, x4, x1, x2)

inst_31482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7fe000; valaddr_reg:x3; val_offset:94446*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94446*0 + 3*762*FLEN/8, x4, x1, x2)

inst_31483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ff000; valaddr_reg:x3; val_offset:94449*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94449*0 + 3*763*FLEN/8, x4, x1, x2)

inst_31484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ff800; valaddr_reg:x3; val_offset:94452*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94452*0 + 3*764*FLEN/8, x4, x1, x2)

inst_31485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ffc00; valaddr_reg:x3; val_offset:94455*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94455*0 + 3*765*FLEN/8, x4, x1, x2)

inst_31486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ffe00; valaddr_reg:x3; val_offset:94458*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94458*0 + 3*766*FLEN/8, x4, x1, x2)

inst_31487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7fff00; valaddr_reg:x3; val_offset:94461*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94461*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097119232,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097135616,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097143808,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097147904,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097149952,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097150976,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151488,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151744,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151872,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151936,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151968,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151984,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151992,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151996,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151998,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151999,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609024,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609025,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609027,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609031,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609039,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609055,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609087,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609151,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609279,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609535,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380610047,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380611071,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380613119,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380617215,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380625407,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380641791,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380674559,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380740095,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380871167,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3381133311,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3381657599,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3382706175,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3384803327,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3384803328,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3386900480,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3387949056,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388473344,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388735488,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388866560,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388932096,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388964864,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388981248,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388989440,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388993536,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388995584,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388996608,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997120,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997376,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997504,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997568,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997600,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997616,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997624,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997628,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997630,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997631,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463424,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463425,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463427,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463431,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463439,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463455,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463487,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463551,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463679,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463935,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751464447,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751465471,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751467519,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751471615,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751479807,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751496191,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751528959,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751594495,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751725567,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751987711,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2752511999,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2753560575,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2755657727,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2755657728,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2757754880,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2758803456,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759327744,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759589888,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759720960,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759786496,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759819264,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759835648,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759843840,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759847936,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759849984,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851008,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851520,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851776,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851904,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851968,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852000,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852016,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852024,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852028,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852030,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852031,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550720,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550721,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550723,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550727,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550735,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550751,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550783,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550847,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550975,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803551231,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803551743,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803552767,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803554815,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803558911,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803567103,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803583487,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803616255,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803681791,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803812863,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1804075007,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1804599295,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1805647871,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1807745023,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1807745024,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1809842176,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1810890752,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811415040,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811677184,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811808256,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811873792,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811906560,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811922944,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811931136,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811935232,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811937280,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811938304,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811938816,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939072,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939200,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939264,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939296,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939312,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939320,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939324,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939326,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939327,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348160,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348161,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348163,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348167,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348175,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348191,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348223,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348287,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348415,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348671,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216349183,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216350207,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216352255,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216356351,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216364543,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216380927,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216413695,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216479231,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216610303,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216872447,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1217396735,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1218445311,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1220542463,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1220542464,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1222639616,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1223688192,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224212480,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224474624,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224605696,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224671232,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224704000,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224720384,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224728576,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224732672,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224734720,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224735744,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736256,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736512,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736640,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736704,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736736,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736752,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736760,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736764,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736766,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1224736767,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332035071,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332037119,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332041215,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332049407,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332065791,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332098559,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332164095,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332295167,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332557311,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2333081599,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2334130175,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227327,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227328,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2338324480,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339373056,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339897344,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340159488,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340290560,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340356096,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340388864,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340405248,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340413440,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340417536,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340419584,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340420608,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421120,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421376,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421504,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421568,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421600,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421616,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421624,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421628,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421630,32,FLEN)
NAN_BOXED(2132791272,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421631,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105152,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105153,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105155,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105159,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105167,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105183,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105215,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105279,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105407,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837105663,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837106175,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837107199,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837109247,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837113343,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837121535,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837137919,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837170687,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837236223,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837367295,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1837629439,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1838153727,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1839202303,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1841299455,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1841299456,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1843396608,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1844445184,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1844969472,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845231616,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845362688,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845428224,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845460992,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845477376,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845485568,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845489664,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845491712,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845492736,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493248,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493504,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493632,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493696,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493728,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493744,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493752,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493756,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493758,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(1845493759,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132819439,32,FLEN)
NAN_BOXED(1070366114,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919104,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919105,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919107,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919111,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919119,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919135,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919167,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919231,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919359,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919615,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415920127,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415921151,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415923199,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415927295,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415935487,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415951871,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415984639,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416050175,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416181247,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416443391,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416967679,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2418016255,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113407,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113408,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2422210560,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423259136,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423783424,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424045568,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424176640,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424242176,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424274944,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424291328,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424299520,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424303616,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424305664,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424306688,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307200,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307456,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307584,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307648,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307680,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307696,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307704,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307708,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307710,32,FLEN)
NAN_BOXED(2132820643,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307711,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733056,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733057,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733059,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733063,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733071,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733087,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733119,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733183,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733311,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994733567,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994734079,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994735103,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994737151,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994741247,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994749439,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994765823,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994798591,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994864127,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2994995199,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2995257343,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2995781631,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2996830207,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2998927359,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(2998927360,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3001024512,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3002073088,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3002597376,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3002859520,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3002990592,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003056128,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003088896,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003105280,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003113472,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003117568,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003119616,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003120640,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121152,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121408,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121536,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121600,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121632,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121648,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121656,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121660,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121662,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3003121663,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132858437,32,FLEN)
NAN_BOXED(2150821629,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141888,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141889,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141891,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141895,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141903,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141919,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
NAN_BOXED(2132886859,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530495,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720256,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720257,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720259,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720263,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720271,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720287,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720319,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720383,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720511,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720767,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58721279,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58722303,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58724351,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58728447,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58736639,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58753023,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58785791,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58851327,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58982399,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59244543,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59768831,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(60817407,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914559,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914560,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65011712,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66060288,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66584576,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66846720,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66977792,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67043328,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67076096,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67092480,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67100672,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67104768,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67106816,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67107840,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108352,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108608,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2132911765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106496,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106497,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106499,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106503,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106511,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106527,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106559,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106623,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456106751,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456107007,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456107519,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456108543,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456110591,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456114687,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456122879,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456139263,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456172031,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456237567,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456368639,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3456630783,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3457155071,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3458203647,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3460300799,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3460300800,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3462397952,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3463446528,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3463970816,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464232960,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464364032,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464429568,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464462336,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464478720,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464486912,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464491008,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464493056,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464494080,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464494592,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464494848,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
