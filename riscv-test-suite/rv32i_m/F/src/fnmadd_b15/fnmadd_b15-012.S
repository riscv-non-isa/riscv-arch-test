
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:25344*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25344*0 + 3*0*FLEN/8, x4, x1, x2)

inst_8449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:25347*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25347*0 + 3*1*FLEN/8, x4, x1, x2)

inst_8450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:25350*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25350*0 + 3*2*FLEN/8, x4, x1, x2)

inst_8451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:25353*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25353*0 + 3*3*FLEN/8, x4, x1, x2)

inst_8452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:25356*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25356*0 + 3*4*FLEN/8, x4, x1, x2)

inst_8453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:25359*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25359*0 + 3*5*FLEN/8, x4, x1, x2)

inst_8454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:25362*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25362*0 + 3*6*FLEN/8, x4, x1, x2)

inst_8455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:25365*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25365*0 + 3*7*FLEN/8, x4, x1, x2)

inst_8456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2800000; valaddr_reg:x3; val_offset:25368*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25368*0 + 3*8*FLEN/8, x4, x1, x2)

inst_8457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2800001; valaddr_reg:x3; val_offset:25371*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25371*0 + 3*9*FLEN/8, x4, x1, x2)

inst_8458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2800003; valaddr_reg:x3; val_offset:25374*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25374*0 + 3*10*FLEN/8, x4, x1, x2)

inst_8459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2800007; valaddr_reg:x3; val_offset:25377*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25377*0 + 3*11*FLEN/8, x4, x1, x2)

inst_8460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x280000f; valaddr_reg:x3; val_offset:25380*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25380*0 + 3*12*FLEN/8, x4, x1, x2)

inst_8461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x280001f; valaddr_reg:x3; val_offset:25383*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25383*0 + 3*13*FLEN/8, x4, x1, x2)

inst_8462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x280003f; valaddr_reg:x3; val_offset:25386*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25386*0 + 3*14*FLEN/8, x4, x1, x2)

inst_8463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x280007f; valaddr_reg:x3; val_offset:25389*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25389*0 + 3*15*FLEN/8, x4, x1, x2)

inst_8464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:25392*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25392*0 + 3*16*FLEN/8, x4, x1, x2)

inst_8465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:25395*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25395*0 + 3*17*FLEN/8, x4, x1, x2)

inst_8466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:25398*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25398*0 + 3*18*FLEN/8, x4, x1, x2)

inst_8467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:25401*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25401*0 + 3*19*FLEN/8, x4, x1, x2)

inst_8468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:25404*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25404*0 + 3*20*FLEN/8, x4, x1, x2)

inst_8469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:25407*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25407*0 + 3*21*FLEN/8, x4, x1, x2)

inst_8470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:25410*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25410*0 + 3*22*FLEN/8, x4, x1, x2)

inst_8471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:25413*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25413*0 + 3*23*FLEN/8, x4, x1, x2)

inst_8472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:25416*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25416*0 + 3*24*FLEN/8, x4, x1, x2)

inst_8473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:25419*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25419*0 + 3*25*FLEN/8, x4, x1, x2)

inst_8474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:25422*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25422*0 + 3*26*FLEN/8, x4, x1, x2)

inst_8475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:25425*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25425*0 + 3*27*FLEN/8, x4, x1, x2)

inst_8476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:25428*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25428*0 + 3*28*FLEN/8, x4, x1, x2)

inst_8477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:25431*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25431*0 + 3*29*FLEN/8, x4, x1, x2)

inst_8478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:25434*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25434*0 + 3*30*FLEN/8, x4, x1, x2)

inst_8479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:25437*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25437*0 + 3*31*FLEN/8, x4, x1, x2)

inst_8480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:25440*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25440*0 + 3*32*FLEN/8, x4, x1, x2)

inst_8481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:25443*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25443*0 + 3*33*FLEN/8, x4, x1, x2)

inst_8482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:25446*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25446*0 + 3*34*FLEN/8, x4, x1, x2)

inst_8483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:25449*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25449*0 + 3*35*FLEN/8, x4, x1, x2)

inst_8484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:25452*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25452*0 + 3*36*FLEN/8, x4, x1, x2)

inst_8485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:25455*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25455*0 + 3*37*FLEN/8, x4, x1, x2)

inst_8486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:25458*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25458*0 + 3*38*FLEN/8, x4, x1, x2)

inst_8487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:25461*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25461*0 + 3*39*FLEN/8, x4, x1, x2)

inst_8488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:25464*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25464*0 + 3*40*FLEN/8, x4, x1, x2)

inst_8489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:25467*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25467*0 + 3*41*FLEN/8, x4, x1, x2)

inst_8490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:25470*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25470*0 + 3*42*FLEN/8, x4, x1, x2)

inst_8491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:25473*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25473*0 + 3*43*FLEN/8, x4, x1, x2)

inst_8492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:25476*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25476*0 + 3*44*FLEN/8, x4, x1, x2)

inst_8493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:25479*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25479*0 + 3*45*FLEN/8, x4, x1, x2)

inst_8494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:25482*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25482*0 + 3*46*FLEN/8, x4, x1, x2)

inst_8495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:25485*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25485*0 + 3*47*FLEN/8, x4, x1, x2)

inst_8496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:25488*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25488*0 + 3*48*FLEN/8, x4, x1, x2)

inst_8497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:25491*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25491*0 + 3*49*FLEN/8, x4, x1, x2)

inst_8498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:25494*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25494*0 + 3*50*FLEN/8, x4, x1, x2)

inst_8499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:25497*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25497*0 + 3*51*FLEN/8, x4, x1, x2)

inst_8500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:25500*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25500*0 + 3*52*FLEN/8, x4, x1, x2)

inst_8501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:25503*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25503*0 + 3*53*FLEN/8, x4, x1, x2)

inst_8502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:25506*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25506*0 + 3*54*FLEN/8, x4, x1, x2)

inst_8503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:25509*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25509*0 + 3*55*FLEN/8, x4, x1, x2)

inst_8504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:25512*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25512*0 + 3*56*FLEN/8, x4, x1, x2)

inst_8505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:25515*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25515*0 + 3*57*FLEN/8, x4, x1, x2)

inst_8506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:25518*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25518*0 + 3*58*FLEN/8, x4, x1, x2)

inst_8507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:25521*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25521*0 + 3*59*FLEN/8, x4, x1, x2)

inst_8508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:25524*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25524*0 + 3*60*FLEN/8, x4, x1, x2)

inst_8509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:25527*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25527*0 + 3*61*FLEN/8, x4, x1, x2)

inst_8510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:25530*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25530*0 + 3*62*FLEN/8, x4, x1, x2)

inst_8511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:25533*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25533*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:25536*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25536*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:25539*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25539*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:25542*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25542*0 + 3*66*FLEN/8, x4, x1, x2)

inst_8515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:25545*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25545*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:25548*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25548*0 + 3*68*FLEN/8, x4, x1, x2)

inst_8517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:25551*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25551*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800000; valaddr_reg:x3; val_offset:25554*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25554*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800001; valaddr_reg:x3; val_offset:25557*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25557*0 + 3*71*FLEN/8, x4, x1, x2)

inst_8520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800003; valaddr_reg:x3; val_offset:25560*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25560*0 + 3*72*FLEN/8, x4, x1, x2)

inst_8521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800007; valaddr_reg:x3; val_offset:25563*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25563*0 + 3*73*FLEN/8, x4, x1, x2)

inst_8522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780000f; valaddr_reg:x3; val_offset:25566*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25566*0 + 3*74*FLEN/8, x4, x1, x2)

inst_8523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780001f; valaddr_reg:x3; val_offset:25569*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25569*0 + 3*75*FLEN/8, x4, x1, x2)

inst_8524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780003f; valaddr_reg:x3; val_offset:25572*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25572*0 + 3*76*FLEN/8, x4, x1, x2)

inst_8525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780007f; valaddr_reg:x3; val_offset:25575*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25575*0 + 3*77*FLEN/8, x4, x1, x2)

inst_8526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78000ff; valaddr_reg:x3; val_offset:25578*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25578*0 + 3*78*FLEN/8, x4, x1, x2)

inst_8527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78001ff; valaddr_reg:x3; val_offset:25581*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25581*0 + 3*79*FLEN/8, x4, x1, x2)

inst_8528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78003ff; valaddr_reg:x3; val_offset:25584*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25584*0 + 3*80*FLEN/8, x4, x1, x2)

inst_8529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78007ff; valaddr_reg:x3; val_offset:25587*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25587*0 + 3*81*FLEN/8, x4, x1, x2)

inst_8530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7800fff; valaddr_reg:x3; val_offset:25590*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25590*0 + 3*82*FLEN/8, x4, x1, x2)

inst_8531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7801fff; valaddr_reg:x3; val_offset:25593*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25593*0 + 3*83*FLEN/8, x4, x1, x2)

inst_8532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7803fff; valaddr_reg:x3; val_offset:25596*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25596*0 + 3*84*FLEN/8, x4, x1, x2)

inst_8533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7807fff; valaddr_reg:x3; val_offset:25599*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25599*0 + 3*85*FLEN/8, x4, x1, x2)

inst_8534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x780ffff; valaddr_reg:x3; val_offset:25602*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25602*0 + 3*86*FLEN/8, x4, x1, x2)

inst_8535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x781ffff; valaddr_reg:x3; val_offset:25605*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25605*0 + 3*87*FLEN/8, x4, x1, x2)

inst_8536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x783ffff; valaddr_reg:x3; val_offset:25608*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25608*0 + 3*88*FLEN/8, x4, x1, x2)

inst_8537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x787ffff; valaddr_reg:x3; val_offset:25611*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25611*0 + 3*89*FLEN/8, x4, x1, x2)

inst_8538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x78fffff; valaddr_reg:x3; val_offset:25614*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25614*0 + 3*90*FLEN/8, x4, x1, x2)

inst_8539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x79fffff; valaddr_reg:x3; val_offset:25617*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25617*0 + 3*91*FLEN/8, x4, x1, x2)

inst_8540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7bfffff; valaddr_reg:x3; val_offset:25620*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25620*0 + 3*92*FLEN/8, x4, x1, x2)

inst_8541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7c00000; valaddr_reg:x3; val_offset:25623*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25623*0 + 3*93*FLEN/8, x4, x1, x2)

inst_8542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7e00000; valaddr_reg:x3; val_offset:25626*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25626*0 + 3*94*FLEN/8, x4, x1, x2)

inst_8543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7f00000; valaddr_reg:x3; val_offset:25629*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25629*0 + 3*95*FLEN/8, x4, x1, x2)

inst_8544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7f80000; valaddr_reg:x3; val_offset:25632*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25632*0 + 3*96*FLEN/8, x4, x1, x2)

inst_8545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fc0000; valaddr_reg:x3; val_offset:25635*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25635*0 + 3*97*FLEN/8, x4, x1, x2)

inst_8546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fe0000; valaddr_reg:x3; val_offset:25638*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25638*0 + 3*98*FLEN/8, x4, x1, x2)

inst_8547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ff0000; valaddr_reg:x3; val_offset:25641*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25641*0 + 3*99*FLEN/8, x4, x1, x2)

inst_8548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ff8000; valaddr_reg:x3; val_offset:25644*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25644*0 + 3*100*FLEN/8, x4, x1, x2)

inst_8549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffc000; valaddr_reg:x3; val_offset:25647*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25647*0 + 3*101*FLEN/8, x4, x1, x2)

inst_8550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffe000; valaddr_reg:x3; val_offset:25650*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25650*0 + 3*102*FLEN/8, x4, x1, x2)

inst_8551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fff000; valaddr_reg:x3; val_offset:25653*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25653*0 + 3*103*FLEN/8, x4, x1, x2)

inst_8552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fff800; valaddr_reg:x3; val_offset:25656*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25656*0 + 3*104*FLEN/8, x4, x1, x2)

inst_8553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffc00; valaddr_reg:x3; val_offset:25659*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25659*0 + 3*105*FLEN/8, x4, x1, x2)

inst_8554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffe00; valaddr_reg:x3; val_offset:25662*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25662*0 + 3*106*FLEN/8, x4, x1, x2)

inst_8555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffff00; valaddr_reg:x3; val_offset:25665*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25665*0 + 3*107*FLEN/8, x4, x1, x2)

inst_8556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffff80; valaddr_reg:x3; val_offset:25668*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25668*0 + 3*108*FLEN/8, x4, x1, x2)

inst_8557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffc0; valaddr_reg:x3; val_offset:25671*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25671*0 + 3*109*FLEN/8, x4, x1, x2)

inst_8558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffe0; valaddr_reg:x3; val_offset:25674*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25674*0 + 3*110*FLEN/8, x4, x1, x2)

inst_8559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffff0; valaddr_reg:x3; val_offset:25677*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25677*0 + 3*111*FLEN/8, x4, x1, x2)

inst_8560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffff8; valaddr_reg:x3; val_offset:25680*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25680*0 + 3*112*FLEN/8, x4, x1, x2)

inst_8561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffffc; valaddr_reg:x3; val_offset:25683*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25683*0 + 3*113*FLEN/8, x4, x1, x2)

inst_8562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7fffffe; valaddr_reg:x3; val_offset:25686*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25686*0 + 3*114*FLEN/8, x4, x1, x2)

inst_8563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41fc81; op2val:0x0;
op3val:0x7ffffff; valaddr_reg:x3; val_offset:25689*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25689*0 + 3*115*FLEN/8, x4, x1, x2)

inst_8564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:25692*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25692*0 + 3*116*FLEN/8, x4, x1, x2)

inst_8565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:25695*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25695*0 + 3*117*FLEN/8, x4, x1, x2)

inst_8566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:25698*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25698*0 + 3*118*FLEN/8, x4, x1, x2)

inst_8567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:25701*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25701*0 + 3*119*FLEN/8, x4, x1, x2)

inst_8568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:25704*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25704*0 + 3*120*FLEN/8, x4, x1, x2)

inst_8569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:25707*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25707*0 + 3*121*FLEN/8, x4, x1, x2)

inst_8570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:25710*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25710*0 + 3*122*FLEN/8, x4, x1, x2)

inst_8571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:25713*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25713*0 + 3*123*FLEN/8, x4, x1, x2)

inst_8572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:25716*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25716*0 + 3*124*FLEN/8, x4, x1, x2)

inst_8573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:25719*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25719*0 + 3*125*FLEN/8, x4, x1, x2)

inst_8574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:25722*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25722*0 + 3*126*FLEN/8, x4, x1, x2)

inst_8575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:25725*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25725*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_8576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:25728*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25728*0 + 3*128*FLEN/8, x4, x1, x2)

inst_8577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:25731*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25731*0 + 3*129*FLEN/8, x4, x1, x2)

inst_8578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:25734*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25734*0 + 3*130*FLEN/8, x4, x1, x2)

inst_8579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:25737*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25737*0 + 3*131*FLEN/8, x4, x1, x2)

inst_8580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:25740*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25740*0 + 3*132*FLEN/8, x4, x1, x2)

inst_8581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:25743*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25743*0 + 3*133*FLEN/8, x4, x1, x2)

inst_8582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:25746*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25746*0 + 3*134*FLEN/8, x4, x1, x2)

inst_8583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:25749*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25749*0 + 3*135*FLEN/8, x4, x1, x2)

inst_8584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:25752*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25752*0 + 3*136*FLEN/8, x4, x1, x2)

inst_8585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:25755*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25755*0 + 3*137*FLEN/8, x4, x1, x2)

inst_8586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:25758*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25758*0 + 3*138*FLEN/8, x4, x1, x2)

inst_8587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:25761*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25761*0 + 3*139*FLEN/8, x4, x1, x2)

inst_8588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:25764*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25764*0 + 3*140*FLEN/8, x4, x1, x2)

inst_8589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:25767*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25767*0 + 3*141*FLEN/8, x4, x1, x2)

inst_8590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:25770*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25770*0 + 3*142*FLEN/8, x4, x1, x2)

inst_8591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:25773*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25773*0 + 3*143*FLEN/8, x4, x1, x2)

inst_8592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:25776*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25776*0 + 3*144*FLEN/8, x4, x1, x2)

inst_8593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:25779*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25779*0 + 3*145*FLEN/8, x4, x1, x2)

inst_8594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:25782*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25782*0 + 3*146*FLEN/8, x4, x1, x2)

inst_8595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:25785*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25785*0 + 3*147*FLEN/8, x4, x1, x2)

inst_8596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:25788*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25788*0 + 3*148*FLEN/8, x4, x1, x2)

inst_8597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:25791*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25791*0 + 3*149*FLEN/8, x4, x1, x2)

inst_8598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:25794*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25794*0 + 3*150*FLEN/8, x4, x1, x2)

inst_8599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:25797*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25797*0 + 3*151*FLEN/8, x4, x1, x2)

inst_8600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:25800*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25800*0 + 3*152*FLEN/8, x4, x1, x2)

inst_8601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:25803*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25803*0 + 3*153*FLEN/8, x4, x1, x2)

inst_8602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:25806*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25806*0 + 3*154*FLEN/8, x4, x1, x2)

inst_8603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:25809*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25809*0 + 3*155*FLEN/8, x4, x1, x2)

inst_8604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:25812*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25812*0 + 3*156*FLEN/8, x4, x1, x2)

inst_8605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:25815*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25815*0 + 3*157*FLEN/8, x4, x1, x2)

inst_8606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:25818*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25818*0 + 3*158*FLEN/8, x4, x1, x2)

inst_8607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:25821*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25821*0 + 3*159*FLEN/8, x4, x1, x2)

inst_8608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:25824*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25824*0 + 3*160*FLEN/8, x4, x1, x2)

inst_8609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:25827*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25827*0 + 3*161*FLEN/8, x4, x1, x2)

inst_8610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:25830*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25830*0 + 3*162*FLEN/8, x4, x1, x2)

inst_8611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:25833*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25833*0 + 3*163*FLEN/8, x4, x1, x2)

inst_8612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:25836*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25836*0 + 3*164*FLEN/8, x4, x1, x2)

inst_8613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:25839*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25839*0 + 3*165*FLEN/8, x4, x1, x2)

inst_8614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:25842*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25842*0 + 3*166*FLEN/8, x4, x1, x2)

inst_8615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:25845*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25845*0 + 3*167*FLEN/8, x4, x1, x2)

inst_8616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:25848*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25848*0 + 3*168*FLEN/8, x4, x1, x2)

inst_8617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:25851*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25851*0 + 3*169*FLEN/8, x4, x1, x2)

inst_8618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:25854*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25854*0 + 3*170*FLEN/8, x4, x1, x2)

inst_8619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:25857*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25857*0 + 3*171*FLEN/8, x4, x1, x2)

inst_8620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f800001; valaddr_reg:x3; val_offset:25860*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25860*0 + 3*172*FLEN/8, x4, x1, x2)

inst_8621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f800003; valaddr_reg:x3; val_offset:25863*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25863*0 + 3*173*FLEN/8, x4, x1, x2)

inst_8622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f800007; valaddr_reg:x3; val_offset:25866*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25866*0 + 3*174*FLEN/8, x4, x1, x2)

inst_8623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f999999; valaddr_reg:x3; val_offset:25869*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25869*0 + 3*175*FLEN/8, x4, x1, x2)

inst_8624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:25872*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25872*0 + 3*176*FLEN/8, x4, x1, x2)

inst_8625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:25875*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25875*0 + 3*177*FLEN/8, x4, x1, x2)

inst_8626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:25878*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25878*0 + 3*178*FLEN/8, x4, x1, x2)

inst_8627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:25881*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25881*0 + 3*179*FLEN/8, x4, x1, x2)

inst_8628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:25884*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25884*0 + 3*180*FLEN/8, x4, x1, x2)

inst_8629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:25887*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25887*0 + 3*181*FLEN/8, x4, x1, x2)

inst_8630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:25890*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25890*0 + 3*182*FLEN/8, x4, x1, x2)

inst_8631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:25893*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25893*0 + 3*183*FLEN/8, x4, x1, x2)

inst_8632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:25896*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25896*0 + 3*184*FLEN/8, x4, x1, x2)

inst_8633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:25899*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25899*0 + 3*185*FLEN/8, x4, x1, x2)

inst_8634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:25902*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25902*0 + 3*186*FLEN/8, x4, x1, x2)

inst_8635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:25905*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25905*0 + 3*187*FLEN/8, x4, x1, x2)

inst_8636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000000; valaddr_reg:x3; val_offset:25908*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25908*0 + 3*188*FLEN/8, x4, x1, x2)

inst_8637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000001; valaddr_reg:x3; val_offset:25911*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25911*0 + 3*189*FLEN/8, x4, x1, x2)

inst_8638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000003; valaddr_reg:x3; val_offset:25914*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25914*0 + 3*190*FLEN/8, x4, x1, x2)

inst_8639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000007; valaddr_reg:x3; val_offset:25917*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25917*0 + 3*191*FLEN/8, x4, x1, x2)

inst_8640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200000f; valaddr_reg:x3; val_offset:25920*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25920*0 + 3*192*FLEN/8, x4, x1, x2)

inst_8641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200001f; valaddr_reg:x3; val_offset:25923*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25923*0 + 3*193*FLEN/8, x4, x1, x2)

inst_8642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200003f; valaddr_reg:x3; val_offset:25926*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25926*0 + 3*194*FLEN/8, x4, x1, x2)

inst_8643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200007f; valaddr_reg:x3; val_offset:25929*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25929*0 + 3*195*FLEN/8, x4, x1, x2)

inst_8644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420000ff; valaddr_reg:x3; val_offset:25932*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25932*0 + 3*196*FLEN/8, x4, x1, x2)

inst_8645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420001ff; valaddr_reg:x3; val_offset:25935*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25935*0 + 3*197*FLEN/8, x4, x1, x2)

inst_8646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420003ff; valaddr_reg:x3; val_offset:25938*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25938*0 + 3*198*FLEN/8, x4, x1, x2)

inst_8647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420007ff; valaddr_reg:x3; val_offset:25941*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25941*0 + 3*199*FLEN/8, x4, x1, x2)

inst_8648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000fff; valaddr_reg:x3; val_offset:25944*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25944*0 + 3*200*FLEN/8, x4, x1, x2)

inst_8649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42001fff; valaddr_reg:x3; val_offset:25947*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25947*0 + 3*201*FLEN/8, x4, x1, x2)

inst_8650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42003fff; valaddr_reg:x3; val_offset:25950*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25950*0 + 3*202*FLEN/8, x4, x1, x2)

inst_8651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42007fff; valaddr_reg:x3; val_offset:25953*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25953*0 + 3*203*FLEN/8, x4, x1, x2)

inst_8652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200ffff; valaddr_reg:x3; val_offset:25956*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25956*0 + 3*204*FLEN/8, x4, x1, x2)

inst_8653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4201ffff; valaddr_reg:x3; val_offset:25959*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25959*0 + 3*205*FLEN/8, x4, x1, x2)

inst_8654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4203ffff; valaddr_reg:x3; val_offset:25962*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25962*0 + 3*206*FLEN/8, x4, x1, x2)

inst_8655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4207ffff; valaddr_reg:x3; val_offset:25965*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25965*0 + 3*207*FLEN/8, x4, x1, x2)

inst_8656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420fffff; valaddr_reg:x3; val_offset:25968*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25968*0 + 3*208*FLEN/8, x4, x1, x2)

inst_8657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x421fffff; valaddr_reg:x3; val_offset:25971*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25971*0 + 3*209*FLEN/8, x4, x1, x2)

inst_8658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x423fffff; valaddr_reg:x3; val_offset:25974*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25974*0 + 3*210*FLEN/8, x4, x1, x2)

inst_8659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42400000; valaddr_reg:x3; val_offset:25977*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25977*0 + 3*211*FLEN/8, x4, x1, x2)

inst_8660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42600000; valaddr_reg:x3; val_offset:25980*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25980*0 + 3*212*FLEN/8, x4, x1, x2)

inst_8661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42700000; valaddr_reg:x3; val_offset:25983*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25983*0 + 3*213*FLEN/8, x4, x1, x2)

inst_8662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42780000; valaddr_reg:x3; val_offset:25986*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25986*0 + 3*214*FLEN/8, x4, x1, x2)

inst_8663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427c0000; valaddr_reg:x3; val_offset:25989*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25989*0 + 3*215*FLEN/8, x4, x1, x2)

inst_8664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427e0000; valaddr_reg:x3; val_offset:25992*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25992*0 + 3*216*FLEN/8, x4, x1, x2)

inst_8665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427f0000; valaddr_reg:x3; val_offset:25995*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25995*0 + 3*217*FLEN/8, x4, x1, x2)

inst_8666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427f8000; valaddr_reg:x3; val_offset:25998*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25998*0 + 3*218*FLEN/8, x4, x1, x2)

inst_8667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fc000; valaddr_reg:x3; val_offset:26001*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26001*0 + 3*219*FLEN/8, x4, x1, x2)

inst_8668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fe000; valaddr_reg:x3; val_offset:26004*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26004*0 + 3*220*FLEN/8, x4, x1, x2)

inst_8669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ff000; valaddr_reg:x3; val_offset:26007*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26007*0 + 3*221*FLEN/8, x4, x1, x2)

inst_8670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ff800; valaddr_reg:x3; val_offset:26010*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26010*0 + 3*222*FLEN/8, x4, x1, x2)

inst_8671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffc00; valaddr_reg:x3; val_offset:26013*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26013*0 + 3*223*FLEN/8, x4, x1, x2)

inst_8672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffe00; valaddr_reg:x3; val_offset:26016*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26016*0 + 3*224*FLEN/8, x4, x1, x2)

inst_8673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fff00; valaddr_reg:x3; val_offset:26019*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26019*0 + 3*225*FLEN/8, x4, x1, x2)

inst_8674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fff80; valaddr_reg:x3; val_offset:26022*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26022*0 + 3*226*FLEN/8, x4, x1, x2)

inst_8675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fffc0; valaddr_reg:x3; val_offset:26025*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26025*0 + 3*227*FLEN/8, x4, x1, x2)

inst_8676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fffe0; valaddr_reg:x3; val_offset:26028*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26028*0 + 3*228*FLEN/8, x4, x1, x2)

inst_8677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffff0; valaddr_reg:x3; val_offset:26031*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26031*0 + 3*229*FLEN/8, x4, x1, x2)

inst_8678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffff8; valaddr_reg:x3; val_offset:26034*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26034*0 + 3*230*FLEN/8, x4, x1, x2)

inst_8679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffffc; valaddr_reg:x3; val_offset:26037*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26037*0 + 3*231*FLEN/8, x4, x1, x2)

inst_8680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffffe; valaddr_reg:x3; val_offset:26040*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26040*0 + 3*232*FLEN/8, x4, x1, x2)

inst_8681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fffff; valaddr_reg:x3; val_offset:26043*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26043*0 + 3*233*FLEN/8, x4, x1, x2)

inst_8682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000000; valaddr_reg:x3; val_offset:26046*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26046*0 + 3*234*FLEN/8, x4, x1, x2)

inst_8683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000001; valaddr_reg:x3; val_offset:26049*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26049*0 + 3*235*FLEN/8, x4, x1, x2)

inst_8684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000003; valaddr_reg:x3; val_offset:26052*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26052*0 + 3*236*FLEN/8, x4, x1, x2)

inst_8685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000007; valaddr_reg:x3; val_offset:26055*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26055*0 + 3*237*FLEN/8, x4, x1, x2)

inst_8686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00000f; valaddr_reg:x3; val_offset:26058*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26058*0 + 3*238*FLEN/8, x4, x1, x2)

inst_8687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00001f; valaddr_reg:x3; val_offset:26061*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26061*0 + 3*239*FLEN/8, x4, x1, x2)

inst_8688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00003f; valaddr_reg:x3; val_offset:26064*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26064*0 + 3*240*FLEN/8, x4, x1, x2)

inst_8689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00007f; valaddr_reg:x3; val_offset:26067*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26067*0 + 3*241*FLEN/8, x4, x1, x2)

inst_8690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0000ff; valaddr_reg:x3; val_offset:26070*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26070*0 + 3*242*FLEN/8, x4, x1, x2)

inst_8691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0001ff; valaddr_reg:x3; val_offset:26073*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26073*0 + 3*243*FLEN/8, x4, x1, x2)

inst_8692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0003ff; valaddr_reg:x3; val_offset:26076*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26076*0 + 3*244*FLEN/8, x4, x1, x2)

inst_8693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0007ff; valaddr_reg:x3; val_offset:26079*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26079*0 + 3*245*FLEN/8, x4, x1, x2)

inst_8694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000fff; valaddr_reg:x3; val_offset:26082*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26082*0 + 3*246*FLEN/8, x4, x1, x2)

inst_8695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c001fff; valaddr_reg:x3; val_offset:26085*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26085*0 + 3*247*FLEN/8, x4, x1, x2)

inst_8696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c003fff; valaddr_reg:x3; val_offset:26088*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26088*0 + 3*248*FLEN/8, x4, x1, x2)

inst_8697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c007fff; valaddr_reg:x3; val_offset:26091*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26091*0 + 3*249*FLEN/8, x4, x1, x2)

inst_8698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00ffff; valaddr_reg:x3; val_offset:26094*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26094*0 + 3*250*FLEN/8, x4, x1, x2)

inst_8699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c01ffff; valaddr_reg:x3; val_offset:26097*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26097*0 + 3*251*FLEN/8, x4, x1, x2)

inst_8700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c03ffff; valaddr_reg:x3; val_offset:26100*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26100*0 + 3*252*FLEN/8, x4, x1, x2)

inst_8701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c07ffff; valaddr_reg:x3; val_offset:26103*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26103*0 + 3*253*FLEN/8, x4, x1, x2)

inst_8702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0fffff; valaddr_reg:x3; val_offset:26106*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26106*0 + 3*254*FLEN/8, x4, x1, x2)

inst_8703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c1fffff; valaddr_reg:x3; val_offset:26109*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26109*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_8704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c3fffff; valaddr_reg:x3; val_offset:26112*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26112*0 + 3*256*FLEN/8, x4, x1, x2)

inst_8705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c400000; valaddr_reg:x3; val_offset:26115*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26115*0 + 3*257*FLEN/8, x4, x1, x2)

inst_8706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c600000; valaddr_reg:x3; val_offset:26118*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26118*0 + 3*258*FLEN/8, x4, x1, x2)

inst_8707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c700000; valaddr_reg:x3; val_offset:26121*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26121*0 + 3*259*FLEN/8, x4, x1, x2)

inst_8708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c780000; valaddr_reg:x3; val_offset:26124*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26124*0 + 3*260*FLEN/8, x4, x1, x2)

inst_8709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7c0000; valaddr_reg:x3; val_offset:26127*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26127*0 + 3*261*FLEN/8, x4, x1, x2)

inst_8710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7e0000; valaddr_reg:x3; val_offset:26130*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26130*0 + 3*262*FLEN/8, x4, x1, x2)

inst_8711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7f0000; valaddr_reg:x3; val_offset:26133*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26133*0 + 3*263*FLEN/8, x4, x1, x2)

inst_8712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7f8000; valaddr_reg:x3; val_offset:26136*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26136*0 + 3*264*FLEN/8, x4, x1, x2)

inst_8713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7fc000; valaddr_reg:x3; val_offset:26139*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26139*0 + 3*265*FLEN/8, x4, x1, x2)

inst_8714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7fe000; valaddr_reg:x3; val_offset:26142*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26142*0 + 3*266*FLEN/8, x4, x1, x2)

inst_8715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ff000; valaddr_reg:x3; val_offset:26145*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26145*0 + 3*267*FLEN/8, x4, x1, x2)

inst_8716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ff800; valaddr_reg:x3; val_offset:26148*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26148*0 + 3*268*FLEN/8, x4, x1, x2)

inst_8717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ffc00; valaddr_reg:x3; val_offset:26151*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26151*0 + 3*269*FLEN/8, x4, x1, x2)

inst_8718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ffe00; valaddr_reg:x3; val_offset:26154*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26154*0 + 3*270*FLEN/8, x4, x1, x2)

inst_8719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7fff00; valaddr_reg:x3; val_offset:26157*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26157*0 + 3*271*FLEN/8, x4, x1, x2)

inst_8720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7fff80; valaddr_reg:x3; val_offset:26160*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26160*0 + 3*272*FLEN/8, x4, x1, x2)

inst_8721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7fffc0; valaddr_reg:x3; val_offset:26163*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26163*0 + 3*273*FLEN/8, x4, x1, x2)

inst_8722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7fffe0; valaddr_reg:x3; val_offset:26166*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26166*0 + 3*274*FLEN/8, x4, x1, x2)

inst_8723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ffff0; valaddr_reg:x3; val_offset:26169*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26169*0 + 3*275*FLEN/8, x4, x1, x2)

inst_8724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ffff8; valaddr_reg:x3; val_offset:26172*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26172*0 + 3*276*FLEN/8, x4, x1, x2)

inst_8725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ffffc; valaddr_reg:x3; val_offset:26175*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26175*0 + 3*277*FLEN/8, x4, x1, x2)

inst_8726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7ffffe; valaddr_reg:x3; val_offset:26178*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26178*0 + 3*278*FLEN/8, x4, x1, x2)

inst_8727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c7fffff; valaddr_reg:x3; val_offset:26181*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26181*0 + 3*279*FLEN/8, x4, x1, x2)

inst_8728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3f800001; valaddr_reg:x3; val_offset:26184*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26184*0 + 3*280*FLEN/8, x4, x1, x2)

inst_8729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3f800003; valaddr_reg:x3; val_offset:26187*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26187*0 + 3*281*FLEN/8, x4, x1, x2)

inst_8730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3f800007; valaddr_reg:x3; val_offset:26190*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26190*0 + 3*282*FLEN/8, x4, x1, x2)

inst_8731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3f999999; valaddr_reg:x3; val_offset:26193*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26193*0 + 3*283*FLEN/8, x4, x1, x2)

inst_8732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:26196*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26196*0 + 3*284*FLEN/8, x4, x1, x2)

inst_8733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:26199*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26199*0 + 3*285*FLEN/8, x4, x1, x2)

inst_8734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:26202*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26202*0 + 3*286*FLEN/8, x4, x1, x2)

inst_8735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:26205*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26205*0 + 3*287*FLEN/8, x4, x1, x2)

inst_8736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:26208*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26208*0 + 3*288*FLEN/8, x4, x1, x2)

inst_8737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:26211*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26211*0 + 3*289*FLEN/8, x4, x1, x2)

inst_8738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:26214*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26214*0 + 3*290*FLEN/8, x4, x1, x2)

inst_8739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:26217*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26217*0 + 3*291*FLEN/8, x4, x1, x2)

inst_8740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:26220*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26220*0 + 3*292*FLEN/8, x4, x1, x2)

inst_8741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:26223*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26223*0 + 3*293*FLEN/8, x4, x1, x2)

inst_8742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:26226*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26226*0 + 3*294*FLEN/8, x4, x1, x2)

inst_8743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:26229*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26229*0 + 3*295*FLEN/8, x4, x1, x2)

inst_8744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8800000; valaddr_reg:x3; val_offset:26232*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26232*0 + 3*296*FLEN/8, x4, x1, x2)

inst_8745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8800001; valaddr_reg:x3; val_offset:26235*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26235*0 + 3*297*FLEN/8, x4, x1, x2)

inst_8746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8800003; valaddr_reg:x3; val_offset:26238*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26238*0 + 3*298*FLEN/8, x4, x1, x2)

inst_8747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8800007; valaddr_reg:x3; val_offset:26241*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26241*0 + 3*299*FLEN/8, x4, x1, x2)

inst_8748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb880000f; valaddr_reg:x3; val_offset:26244*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26244*0 + 3*300*FLEN/8, x4, x1, x2)

inst_8749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb880001f; valaddr_reg:x3; val_offset:26247*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26247*0 + 3*301*FLEN/8, x4, x1, x2)

inst_8750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb880003f; valaddr_reg:x3; val_offset:26250*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26250*0 + 3*302*FLEN/8, x4, x1, x2)

inst_8751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb880007f; valaddr_reg:x3; val_offset:26253*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26253*0 + 3*303*FLEN/8, x4, x1, x2)

inst_8752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb88000ff; valaddr_reg:x3; val_offset:26256*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26256*0 + 3*304*FLEN/8, x4, x1, x2)

inst_8753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb88001ff; valaddr_reg:x3; val_offset:26259*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26259*0 + 3*305*FLEN/8, x4, x1, x2)

inst_8754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb88003ff; valaddr_reg:x3; val_offset:26262*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26262*0 + 3*306*FLEN/8, x4, x1, x2)

inst_8755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb88007ff; valaddr_reg:x3; val_offset:26265*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26265*0 + 3*307*FLEN/8, x4, x1, x2)

inst_8756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8800fff; valaddr_reg:x3; val_offset:26268*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26268*0 + 3*308*FLEN/8, x4, x1, x2)

inst_8757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8801fff; valaddr_reg:x3; val_offset:26271*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26271*0 + 3*309*FLEN/8, x4, x1, x2)

inst_8758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8803fff; valaddr_reg:x3; val_offset:26274*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26274*0 + 3*310*FLEN/8, x4, x1, x2)

inst_8759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8807fff; valaddr_reg:x3; val_offset:26277*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26277*0 + 3*311*FLEN/8, x4, x1, x2)

inst_8760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb880ffff; valaddr_reg:x3; val_offset:26280*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26280*0 + 3*312*FLEN/8, x4, x1, x2)

inst_8761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb881ffff; valaddr_reg:x3; val_offset:26283*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26283*0 + 3*313*FLEN/8, x4, x1, x2)

inst_8762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb883ffff; valaddr_reg:x3; val_offset:26286*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26286*0 + 3*314*FLEN/8, x4, x1, x2)

inst_8763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb887ffff; valaddr_reg:x3; val_offset:26289*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26289*0 + 3*315*FLEN/8, x4, x1, x2)

inst_8764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb88fffff; valaddr_reg:x3; val_offset:26292*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26292*0 + 3*316*FLEN/8, x4, x1, x2)

inst_8765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb89fffff; valaddr_reg:x3; val_offset:26295*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26295*0 + 3*317*FLEN/8, x4, x1, x2)

inst_8766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8bfffff; valaddr_reg:x3; val_offset:26298*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26298*0 + 3*318*FLEN/8, x4, x1, x2)

inst_8767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8c00000; valaddr_reg:x3; val_offset:26301*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26301*0 + 3*319*FLEN/8, x4, x1, x2)

inst_8768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8e00000; valaddr_reg:x3; val_offset:26304*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26304*0 + 3*320*FLEN/8, x4, x1, x2)

inst_8769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8f00000; valaddr_reg:x3; val_offset:26307*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26307*0 + 3*321*FLEN/8, x4, x1, x2)

inst_8770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8f80000; valaddr_reg:x3; val_offset:26310*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26310*0 + 3*322*FLEN/8, x4, x1, x2)

inst_8771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fc0000; valaddr_reg:x3; val_offset:26313*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26313*0 + 3*323*FLEN/8, x4, x1, x2)

inst_8772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fe0000; valaddr_reg:x3; val_offset:26316*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26316*0 + 3*324*FLEN/8, x4, x1, x2)

inst_8773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ff0000; valaddr_reg:x3; val_offset:26319*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26319*0 + 3*325*FLEN/8, x4, x1, x2)

inst_8774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ff8000; valaddr_reg:x3; val_offset:26322*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26322*0 + 3*326*FLEN/8, x4, x1, x2)

inst_8775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ffc000; valaddr_reg:x3; val_offset:26325*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26325*0 + 3*327*FLEN/8, x4, x1, x2)

inst_8776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ffe000; valaddr_reg:x3; val_offset:26328*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26328*0 + 3*328*FLEN/8, x4, x1, x2)

inst_8777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fff000; valaddr_reg:x3; val_offset:26331*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26331*0 + 3*329*FLEN/8, x4, x1, x2)

inst_8778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fff800; valaddr_reg:x3; val_offset:26334*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26334*0 + 3*330*FLEN/8, x4, x1, x2)

inst_8779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fffc00; valaddr_reg:x3; val_offset:26337*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26337*0 + 3*331*FLEN/8, x4, x1, x2)

inst_8780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fffe00; valaddr_reg:x3; val_offset:26340*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26340*0 + 3*332*FLEN/8, x4, x1, x2)

inst_8781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ffff00; valaddr_reg:x3; val_offset:26343*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26343*0 + 3*333*FLEN/8, x4, x1, x2)

inst_8782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ffff80; valaddr_reg:x3; val_offset:26346*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26346*0 + 3*334*FLEN/8, x4, x1, x2)

inst_8783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ffffc0; valaddr_reg:x3; val_offset:26349*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26349*0 + 3*335*FLEN/8, x4, x1, x2)

inst_8784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ffffe0; valaddr_reg:x3; val_offset:26352*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26352*0 + 3*336*FLEN/8, x4, x1, x2)

inst_8785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fffff0; valaddr_reg:x3; val_offset:26355*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26355*0 + 3*337*FLEN/8, x4, x1, x2)

inst_8786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fffff8; valaddr_reg:x3; val_offset:26358*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26358*0 + 3*338*FLEN/8, x4, x1, x2)

inst_8787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fffffc; valaddr_reg:x3; val_offset:26361*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26361*0 + 3*339*FLEN/8, x4, x1, x2)

inst_8788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8fffffe; valaddr_reg:x3; val_offset:26364*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26364*0 + 3*340*FLEN/8, x4, x1, x2)

inst_8789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xb8ffffff; valaddr_reg:x3; val_offset:26367*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26367*0 + 3*341*FLEN/8, x4, x1, x2)

inst_8790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbf800001; valaddr_reg:x3; val_offset:26370*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26370*0 + 3*342*FLEN/8, x4, x1, x2)

inst_8791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbf800003; valaddr_reg:x3; val_offset:26373*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26373*0 + 3*343*FLEN/8, x4, x1, x2)

inst_8792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbf800007; valaddr_reg:x3; val_offset:26376*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26376*0 + 3*344*FLEN/8, x4, x1, x2)

inst_8793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbf999999; valaddr_reg:x3; val_offset:26379*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26379*0 + 3*345*FLEN/8, x4, x1, x2)

inst_8794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:26382*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26382*0 + 3*346*FLEN/8, x4, x1, x2)

inst_8795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:26385*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26385*0 + 3*347*FLEN/8, x4, x1, x2)

inst_8796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:26388*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26388*0 + 3*348*FLEN/8, x4, x1, x2)

inst_8797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:26391*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26391*0 + 3*349*FLEN/8, x4, x1, x2)

inst_8798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:26394*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26394*0 + 3*350*FLEN/8, x4, x1, x2)

inst_8799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:26397*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26397*0 + 3*351*FLEN/8, x4, x1, x2)

inst_8800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:26400*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26400*0 + 3*352*FLEN/8, x4, x1, x2)

inst_8801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:26403*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26403*0 + 3*353*FLEN/8, x4, x1, x2)

inst_8802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:26406*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26406*0 + 3*354*FLEN/8, x4, x1, x2)

inst_8803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:26409*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26409*0 + 3*355*FLEN/8, x4, x1, x2)

inst_8804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:26412*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26412*0 + 3*356*FLEN/8, x4, x1, x2)

inst_8805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x44104b and fs2 == 1 and fe2 == 0x01 and fm2 == 0x272120 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e44104b; op2val:0x80a72120;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:26415*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26415*0 + 3*357*FLEN/8, x4, x1, x2)

inst_8806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:26418*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26418*0 + 3*358*FLEN/8, x4, x1, x2)

inst_8807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:26421*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26421*0 + 3*359*FLEN/8, x4, x1, x2)

inst_8808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:26424*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26424*0 + 3*360*FLEN/8, x4, x1, x2)

inst_8809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:26427*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26427*0 + 3*361*FLEN/8, x4, x1, x2)

inst_8810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:26430*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26430*0 + 3*362*FLEN/8, x4, x1, x2)

inst_8811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:26433*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26433*0 + 3*363*FLEN/8, x4, x1, x2)

inst_8812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:26436*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26436*0 + 3*364*FLEN/8, x4, x1, x2)

inst_8813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:26439*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26439*0 + 3*365*FLEN/8, x4, x1, x2)

inst_8814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:26442*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26442*0 + 3*366*FLEN/8, x4, x1, x2)

inst_8815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:26445*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26445*0 + 3*367*FLEN/8, x4, x1, x2)

inst_8816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:26448*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26448*0 + 3*368*FLEN/8, x4, x1, x2)

inst_8817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:26451*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26451*0 + 3*369*FLEN/8, x4, x1, x2)

inst_8818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:26454*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26454*0 + 3*370*FLEN/8, x4, x1, x2)

inst_8819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:26457*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26457*0 + 3*371*FLEN/8, x4, x1, x2)

inst_8820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:26460*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26460*0 + 3*372*FLEN/8, x4, x1, x2)

inst_8821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:26463*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26463*0 + 3*373*FLEN/8, x4, x1, x2)

inst_8822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:26466*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26466*0 + 3*374*FLEN/8, x4, x1, x2)

inst_8823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:26469*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26469*0 + 3*375*FLEN/8, x4, x1, x2)

inst_8824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:26472*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26472*0 + 3*376*FLEN/8, x4, x1, x2)

inst_8825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:26475*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26475*0 + 3*377*FLEN/8, x4, x1, x2)

inst_8826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:26478*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26478*0 + 3*378*FLEN/8, x4, x1, x2)

inst_8827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:26481*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26481*0 + 3*379*FLEN/8, x4, x1, x2)

inst_8828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:26484*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26484*0 + 3*380*FLEN/8, x4, x1, x2)

inst_8829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:26487*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26487*0 + 3*381*FLEN/8, x4, x1, x2)

inst_8830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:26490*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26490*0 + 3*382*FLEN/8, x4, x1, x2)

inst_8831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:26493*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26493*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_8832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:26496*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26496*0 + 3*384*FLEN/8, x4, x1, x2)

inst_8833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:26499*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26499*0 + 3*385*FLEN/8, x4, x1, x2)

inst_8834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:26502*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26502*0 + 3*386*FLEN/8, x4, x1, x2)

inst_8835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:26505*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26505*0 + 3*387*FLEN/8, x4, x1, x2)

inst_8836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:26508*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26508*0 + 3*388*FLEN/8, x4, x1, x2)

inst_8837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:26511*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26511*0 + 3*389*FLEN/8, x4, x1, x2)

inst_8838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:26514*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26514*0 + 3*390*FLEN/8, x4, x1, x2)

inst_8839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:26517*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26517*0 + 3*391*FLEN/8, x4, x1, x2)

inst_8840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:26520*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26520*0 + 3*392*FLEN/8, x4, x1, x2)

inst_8841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:26523*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26523*0 + 3*393*FLEN/8, x4, x1, x2)

inst_8842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:26526*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26526*0 + 3*394*FLEN/8, x4, x1, x2)

inst_8843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:26529*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26529*0 + 3*395*FLEN/8, x4, x1, x2)

inst_8844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:26532*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26532*0 + 3*396*FLEN/8, x4, x1, x2)

inst_8845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:26535*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26535*0 + 3*397*FLEN/8, x4, x1, x2)

inst_8846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:26538*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26538*0 + 3*398*FLEN/8, x4, x1, x2)

inst_8847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:26541*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26541*0 + 3*399*FLEN/8, x4, x1, x2)

inst_8848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:26544*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26544*0 + 3*400*FLEN/8, x4, x1, x2)

inst_8849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:26547*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26547*0 + 3*401*FLEN/8, x4, x1, x2)

inst_8850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:26550*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26550*0 + 3*402*FLEN/8, x4, x1, x2)

inst_8851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:26553*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26553*0 + 3*403*FLEN/8, x4, x1, x2)

inst_8852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:26556*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26556*0 + 3*404*FLEN/8, x4, x1, x2)

inst_8853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:26559*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26559*0 + 3*405*FLEN/8, x4, x1, x2)

inst_8854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:26562*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26562*0 + 3*406*FLEN/8, x4, x1, x2)

inst_8855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:26565*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26565*0 + 3*407*FLEN/8, x4, x1, x2)

inst_8856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:26568*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26568*0 + 3*408*FLEN/8, x4, x1, x2)

inst_8857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:26571*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26571*0 + 3*409*FLEN/8, x4, x1, x2)

inst_8858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:26574*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26574*0 + 3*410*FLEN/8, x4, x1, x2)

inst_8859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:26577*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26577*0 + 3*411*FLEN/8, x4, x1, x2)

inst_8860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:26580*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26580*0 + 3*412*FLEN/8, x4, x1, x2)

inst_8861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:26583*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26583*0 + 3*413*FLEN/8, x4, x1, x2)

inst_8862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:26586*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26586*0 + 3*414*FLEN/8, x4, x1, x2)

inst_8863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:26589*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26589*0 + 3*415*FLEN/8, x4, x1, x2)

inst_8864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:26592*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26592*0 + 3*416*FLEN/8, x4, x1, x2)

inst_8865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:26595*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26595*0 + 3*417*FLEN/8, x4, x1, x2)

inst_8866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:26598*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26598*0 + 3*418*FLEN/8, x4, x1, x2)

inst_8867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:26601*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26601*0 + 3*419*FLEN/8, x4, x1, x2)

inst_8868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f800001; valaddr_reg:x3; val_offset:26604*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26604*0 + 3*420*FLEN/8, x4, x1, x2)

inst_8869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f800003; valaddr_reg:x3; val_offset:26607*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26607*0 + 3*421*FLEN/8, x4, x1, x2)

inst_8870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f800007; valaddr_reg:x3; val_offset:26610*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26610*0 + 3*422*FLEN/8, x4, x1, x2)

inst_8871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f999999; valaddr_reg:x3; val_offset:26613*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26613*0 + 3*423*FLEN/8, x4, x1, x2)

inst_8872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:26616*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26616*0 + 3*424*FLEN/8, x4, x1, x2)

inst_8873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:26619*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26619*0 + 3*425*FLEN/8, x4, x1, x2)

inst_8874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:26622*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26622*0 + 3*426*FLEN/8, x4, x1, x2)

inst_8875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:26625*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26625*0 + 3*427*FLEN/8, x4, x1, x2)

inst_8876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:26628*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26628*0 + 3*428*FLEN/8, x4, x1, x2)

inst_8877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:26631*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26631*0 + 3*429*FLEN/8, x4, x1, x2)

inst_8878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:26634*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26634*0 + 3*430*FLEN/8, x4, x1, x2)

inst_8879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:26637*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26637*0 + 3*431*FLEN/8, x4, x1, x2)

inst_8880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:26640*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26640*0 + 3*432*FLEN/8, x4, x1, x2)

inst_8881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:26643*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26643*0 + 3*433*FLEN/8, x4, x1, x2)

inst_8882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:26646*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26646*0 + 3*434*FLEN/8, x4, x1, x2)

inst_8883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:26649*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26649*0 + 3*435*FLEN/8, x4, x1, x2)

inst_8884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800000; valaddr_reg:x3; val_offset:26652*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26652*0 + 3*436*FLEN/8, x4, x1, x2)

inst_8885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800001; valaddr_reg:x3; val_offset:26655*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26655*0 + 3*437*FLEN/8, x4, x1, x2)

inst_8886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800003; valaddr_reg:x3; val_offset:26658*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26658*0 + 3*438*FLEN/8, x4, x1, x2)

inst_8887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800007; valaddr_reg:x3; val_offset:26661*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26661*0 + 3*439*FLEN/8, x4, x1, x2)

inst_8888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180000f; valaddr_reg:x3; val_offset:26664*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26664*0 + 3*440*FLEN/8, x4, x1, x2)

inst_8889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180001f; valaddr_reg:x3; val_offset:26667*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26667*0 + 3*441*FLEN/8, x4, x1, x2)

inst_8890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180003f; valaddr_reg:x3; val_offset:26670*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26670*0 + 3*442*FLEN/8, x4, x1, x2)

inst_8891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180007f; valaddr_reg:x3; val_offset:26673*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26673*0 + 3*443*FLEN/8, x4, x1, x2)

inst_8892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418000ff; valaddr_reg:x3; val_offset:26676*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26676*0 + 3*444*FLEN/8, x4, x1, x2)

inst_8893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418001ff; valaddr_reg:x3; val_offset:26679*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26679*0 + 3*445*FLEN/8, x4, x1, x2)

inst_8894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418003ff; valaddr_reg:x3; val_offset:26682*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26682*0 + 3*446*FLEN/8, x4, x1, x2)

inst_8895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418007ff; valaddr_reg:x3; val_offset:26685*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26685*0 + 3*447*FLEN/8, x4, x1, x2)

inst_8896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800fff; valaddr_reg:x3; val_offset:26688*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26688*0 + 3*448*FLEN/8, x4, x1, x2)

inst_8897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41801fff; valaddr_reg:x3; val_offset:26691*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26691*0 + 3*449*FLEN/8, x4, x1, x2)

inst_8898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41803fff; valaddr_reg:x3; val_offset:26694*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26694*0 + 3*450*FLEN/8, x4, x1, x2)

inst_8899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41807fff; valaddr_reg:x3; val_offset:26697*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26697*0 + 3*451*FLEN/8, x4, x1, x2)

inst_8900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180ffff; valaddr_reg:x3; val_offset:26700*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26700*0 + 3*452*FLEN/8, x4, x1, x2)

inst_8901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4181ffff; valaddr_reg:x3; val_offset:26703*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26703*0 + 3*453*FLEN/8, x4, x1, x2)

inst_8902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4183ffff; valaddr_reg:x3; val_offset:26706*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26706*0 + 3*454*FLEN/8, x4, x1, x2)

inst_8903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4187ffff; valaddr_reg:x3; val_offset:26709*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26709*0 + 3*455*FLEN/8, x4, x1, x2)

inst_8904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418fffff; valaddr_reg:x3; val_offset:26712*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26712*0 + 3*456*FLEN/8, x4, x1, x2)

inst_8905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x419fffff; valaddr_reg:x3; val_offset:26715*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26715*0 + 3*457*FLEN/8, x4, x1, x2)

inst_8906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41bfffff; valaddr_reg:x3; val_offset:26718*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26718*0 + 3*458*FLEN/8, x4, x1, x2)

inst_8907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41c00000; valaddr_reg:x3; val_offset:26721*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26721*0 + 3*459*FLEN/8, x4, x1, x2)

inst_8908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41e00000; valaddr_reg:x3; val_offset:26724*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26724*0 + 3*460*FLEN/8, x4, x1, x2)

inst_8909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41f00000; valaddr_reg:x3; val_offset:26727*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26727*0 + 3*461*FLEN/8, x4, x1, x2)

inst_8910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41f80000; valaddr_reg:x3; val_offset:26730*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26730*0 + 3*462*FLEN/8, x4, x1, x2)

inst_8911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fc0000; valaddr_reg:x3; val_offset:26733*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26733*0 + 3*463*FLEN/8, x4, x1, x2)

inst_8912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fe0000; valaddr_reg:x3; val_offset:26736*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26736*0 + 3*464*FLEN/8, x4, x1, x2)

inst_8913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ff0000; valaddr_reg:x3; val_offset:26739*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26739*0 + 3*465*FLEN/8, x4, x1, x2)

inst_8914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ff8000; valaddr_reg:x3; val_offset:26742*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26742*0 + 3*466*FLEN/8, x4, x1, x2)

inst_8915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffc000; valaddr_reg:x3; val_offset:26745*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26745*0 + 3*467*FLEN/8, x4, x1, x2)

inst_8916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffe000; valaddr_reg:x3; val_offset:26748*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26748*0 + 3*468*FLEN/8, x4, x1, x2)

inst_8917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fff000; valaddr_reg:x3; val_offset:26751*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26751*0 + 3*469*FLEN/8, x4, x1, x2)

inst_8918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fff800; valaddr_reg:x3; val_offset:26754*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26754*0 + 3*470*FLEN/8, x4, x1, x2)

inst_8919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffc00; valaddr_reg:x3; val_offset:26757*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26757*0 + 3*471*FLEN/8, x4, x1, x2)

inst_8920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffe00; valaddr_reg:x3; val_offset:26760*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26760*0 + 3*472*FLEN/8, x4, x1, x2)

inst_8921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffff00; valaddr_reg:x3; val_offset:26763*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26763*0 + 3*473*FLEN/8, x4, x1, x2)

inst_8922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffff80; valaddr_reg:x3; val_offset:26766*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26766*0 + 3*474*FLEN/8, x4, x1, x2)

inst_8923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffffc0; valaddr_reg:x3; val_offset:26769*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26769*0 + 3*475*FLEN/8, x4, x1, x2)

inst_8924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffffe0; valaddr_reg:x3; val_offset:26772*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26772*0 + 3*476*FLEN/8, x4, x1, x2)

inst_8925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffff0; valaddr_reg:x3; val_offset:26775*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26775*0 + 3*477*FLEN/8, x4, x1, x2)

inst_8926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffff8; valaddr_reg:x3; val_offset:26778*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26778*0 + 3*478*FLEN/8, x4, x1, x2)

inst_8927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffffc; valaddr_reg:x3; val_offset:26781*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26781*0 + 3*479*FLEN/8, x4, x1, x2)

inst_8928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffffe; valaddr_reg:x3; val_offset:26784*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26784*0 + 3*480*FLEN/8, x4, x1, x2)

inst_8929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffffff; valaddr_reg:x3; val_offset:26787*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26787*0 + 3*481*FLEN/8, x4, x1, x2)

inst_8930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800000; valaddr_reg:x3; val_offset:26790*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26790*0 + 3*482*FLEN/8, x4, x1, x2)

inst_8931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800001; valaddr_reg:x3; val_offset:26793*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26793*0 + 3*483*FLEN/8, x4, x1, x2)

inst_8932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800003; valaddr_reg:x3; val_offset:26796*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26796*0 + 3*484*FLEN/8, x4, x1, x2)

inst_8933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800007; valaddr_reg:x3; val_offset:26799*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26799*0 + 3*485*FLEN/8, x4, x1, x2)

inst_8934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180000f; valaddr_reg:x3; val_offset:26802*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26802*0 + 3*486*FLEN/8, x4, x1, x2)

inst_8935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180001f; valaddr_reg:x3; val_offset:26805*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26805*0 + 3*487*FLEN/8, x4, x1, x2)

inst_8936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180003f; valaddr_reg:x3; val_offset:26808*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26808*0 + 3*488*FLEN/8, x4, x1, x2)

inst_8937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180007f; valaddr_reg:x3; val_offset:26811*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26811*0 + 3*489*FLEN/8, x4, x1, x2)

inst_8938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18000ff; valaddr_reg:x3; val_offset:26814*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26814*0 + 3*490*FLEN/8, x4, x1, x2)

inst_8939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18001ff; valaddr_reg:x3; val_offset:26817*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26817*0 + 3*491*FLEN/8, x4, x1, x2)

inst_8940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18003ff; valaddr_reg:x3; val_offset:26820*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26820*0 + 3*492*FLEN/8, x4, x1, x2)

inst_8941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18007ff; valaddr_reg:x3; val_offset:26823*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26823*0 + 3*493*FLEN/8, x4, x1, x2)

inst_8942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800fff; valaddr_reg:x3; val_offset:26826*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26826*0 + 3*494*FLEN/8, x4, x1, x2)

inst_8943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1801fff; valaddr_reg:x3; val_offset:26829*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26829*0 + 3*495*FLEN/8, x4, x1, x2)

inst_8944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1803fff; valaddr_reg:x3; val_offset:26832*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26832*0 + 3*496*FLEN/8, x4, x1, x2)

inst_8945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1807fff; valaddr_reg:x3; val_offset:26835*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26835*0 + 3*497*FLEN/8, x4, x1, x2)

inst_8946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180ffff; valaddr_reg:x3; val_offset:26838*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26838*0 + 3*498*FLEN/8, x4, x1, x2)

inst_8947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf181ffff; valaddr_reg:x3; val_offset:26841*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26841*0 + 3*499*FLEN/8, x4, x1, x2)

inst_8948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf183ffff; valaddr_reg:x3; val_offset:26844*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26844*0 + 3*500*FLEN/8, x4, x1, x2)

inst_8949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf187ffff; valaddr_reg:x3; val_offset:26847*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26847*0 + 3*501*FLEN/8, x4, x1, x2)

inst_8950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18fffff; valaddr_reg:x3; val_offset:26850*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26850*0 + 3*502*FLEN/8, x4, x1, x2)

inst_8951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf19fffff; valaddr_reg:x3; val_offset:26853*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26853*0 + 3*503*FLEN/8, x4, x1, x2)

inst_8952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1bfffff; valaddr_reg:x3; val_offset:26856*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26856*0 + 3*504*FLEN/8, x4, x1, x2)

inst_8953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1c00000; valaddr_reg:x3; val_offset:26859*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26859*0 + 3*505*FLEN/8, x4, x1, x2)

inst_8954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1e00000; valaddr_reg:x3; val_offset:26862*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26862*0 + 3*506*FLEN/8, x4, x1, x2)

inst_8955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1f00000; valaddr_reg:x3; val_offset:26865*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26865*0 + 3*507*FLEN/8, x4, x1, x2)

inst_8956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1f80000; valaddr_reg:x3; val_offset:26868*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26868*0 + 3*508*FLEN/8, x4, x1, x2)

inst_8957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fc0000; valaddr_reg:x3; val_offset:26871*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26871*0 + 3*509*FLEN/8, x4, x1, x2)

inst_8958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fe0000; valaddr_reg:x3; val_offset:26874*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26874*0 + 3*510*FLEN/8, x4, x1, x2)

inst_8959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ff0000; valaddr_reg:x3; val_offset:26877*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26877*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_8960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ff8000; valaddr_reg:x3; val_offset:26880*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26880*0 + 3*512*FLEN/8, x4, x1, x2)

inst_8961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffc000; valaddr_reg:x3; val_offset:26883*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26883*0 + 3*513*FLEN/8, x4, x1, x2)

inst_8962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffe000; valaddr_reg:x3; val_offset:26886*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26886*0 + 3*514*FLEN/8, x4, x1, x2)

inst_8963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fff000; valaddr_reg:x3; val_offset:26889*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26889*0 + 3*515*FLEN/8, x4, x1, x2)

inst_8964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fff800; valaddr_reg:x3; val_offset:26892*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26892*0 + 3*516*FLEN/8, x4, x1, x2)

inst_8965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffc00; valaddr_reg:x3; val_offset:26895*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26895*0 + 3*517*FLEN/8, x4, x1, x2)

inst_8966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffe00; valaddr_reg:x3; val_offset:26898*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26898*0 + 3*518*FLEN/8, x4, x1, x2)

inst_8967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffff00; valaddr_reg:x3; val_offset:26901*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26901*0 + 3*519*FLEN/8, x4, x1, x2)

inst_8968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffff80; valaddr_reg:x3; val_offset:26904*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26904*0 + 3*520*FLEN/8, x4, x1, x2)

inst_8969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffffc0; valaddr_reg:x3; val_offset:26907*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26907*0 + 3*521*FLEN/8, x4, x1, x2)

inst_8970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffffe0; valaddr_reg:x3; val_offset:26910*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26910*0 + 3*522*FLEN/8, x4, x1, x2)

inst_8971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffff0; valaddr_reg:x3; val_offset:26913*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26913*0 + 3*523*FLEN/8, x4, x1, x2)

inst_8972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffff8; valaddr_reg:x3; val_offset:26916*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26916*0 + 3*524*FLEN/8, x4, x1, x2)

inst_8973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffffc; valaddr_reg:x3; val_offset:26919*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26919*0 + 3*525*FLEN/8, x4, x1, x2)

inst_8974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffffe; valaddr_reg:x3; val_offset:26922*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26922*0 + 3*526*FLEN/8, x4, x1, x2)

inst_8975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffffff; valaddr_reg:x3; val_offset:26925*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26925*0 + 3*527*FLEN/8, x4, x1, x2)

inst_8976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff000001; valaddr_reg:x3; val_offset:26928*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26928*0 + 3*528*FLEN/8, x4, x1, x2)

inst_8977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff000003; valaddr_reg:x3; val_offset:26931*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26931*0 + 3*529*FLEN/8, x4, x1, x2)

inst_8978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff000007; valaddr_reg:x3; val_offset:26934*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26934*0 + 3*530*FLEN/8, x4, x1, x2)

inst_8979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff199999; valaddr_reg:x3; val_offset:26937*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26937*0 + 3*531*FLEN/8, x4, x1, x2)

inst_8980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff249249; valaddr_reg:x3; val_offset:26940*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26940*0 + 3*532*FLEN/8, x4, x1, x2)

inst_8981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff333333; valaddr_reg:x3; val_offset:26943*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26943*0 + 3*533*FLEN/8, x4, x1, x2)

inst_8982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:26946*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26946*0 + 3*534*FLEN/8, x4, x1, x2)

inst_8983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:26949*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26949*0 + 3*535*FLEN/8, x4, x1, x2)

inst_8984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff444444; valaddr_reg:x3; val_offset:26952*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26952*0 + 3*536*FLEN/8, x4, x1, x2)

inst_8985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:26955*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26955*0 + 3*537*FLEN/8, x4, x1, x2)

inst_8986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:26958*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26958*0 + 3*538*FLEN/8, x4, x1, x2)

inst_8987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff666666; valaddr_reg:x3; val_offset:26961*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26961*0 + 3*539*FLEN/8, x4, x1, x2)

inst_8988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:26964*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26964*0 + 3*540*FLEN/8, x4, x1, x2)

inst_8989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:26967*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26967*0 + 3*541*FLEN/8, x4, x1, x2)

inst_8990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:26970*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26970*0 + 3*542*FLEN/8, x4, x1, x2)

inst_8991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:26973*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26973*0 + 3*543*FLEN/8, x4, x1, x2)

inst_8992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:26976*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26976*0 + 3*544*FLEN/8, x4, x1, x2)

inst_8993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:26979*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26979*0 + 3*545*FLEN/8, x4, x1, x2)

inst_8994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:26982*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26982*0 + 3*546*FLEN/8, x4, x1, x2)

inst_8995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:26985*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26985*0 + 3*547*FLEN/8, x4, x1, x2)

inst_8996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:26988*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26988*0 + 3*548*FLEN/8, x4, x1, x2)

inst_8997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:26991*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26991*0 + 3*549*FLEN/8, x4, x1, x2)

inst_8998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:26994*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26994*0 + 3*550*FLEN/8, x4, x1, x2)

inst_8999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:26997*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26997*0 + 3*551*FLEN/8, x4, x1, x2)

inst_9000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:27000*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27000*0 + 3*552*FLEN/8, x4, x1, x2)

inst_9001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:27003*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27003*0 + 3*553*FLEN/8, x4, x1, x2)

inst_9002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:27006*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27006*0 + 3*554*FLEN/8, x4, x1, x2)

inst_9003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:27009*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27009*0 + 3*555*FLEN/8, x4, x1, x2)

inst_9004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:27012*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27012*0 + 3*556*FLEN/8, x4, x1, x2)

inst_9005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:27015*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27015*0 + 3*557*FLEN/8, x4, x1, x2)

inst_9006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:27018*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27018*0 + 3*558*FLEN/8, x4, x1, x2)

inst_9007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:27021*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27021*0 + 3*559*FLEN/8, x4, x1, x2)

inst_9008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000000; valaddr_reg:x3; val_offset:27024*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27024*0 + 3*560*FLEN/8, x4, x1, x2)

inst_9009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000001; valaddr_reg:x3; val_offset:27027*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27027*0 + 3*561*FLEN/8, x4, x1, x2)

inst_9010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000003; valaddr_reg:x3; val_offset:27030*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27030*0 + 3*562*FLEN/8, x4, x1, x2)

inst_9011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000007; valaddr_reg:x3; val_offset:27033*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27033*0 + 3*563*FLEN/8, x4, x1, x2)

inst_9012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00000f; valaddr_reg:x3; val_offset:27036*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27036*0 + 3*564*FLEN/8, x4, x1, x2)

inst_9013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00001f; valaddr_reg:x3; val_offset:27039*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27039*0 + 3*565*FLEN/8, x4, x1, x2)

inst_9014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00003f; valaddr_reg:x3; val_offset:27042*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27042*0 + 3*566*FLEN/8, x4, x1, x2)

inst_9015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00007f; valaddr_reg:x3; val_offset:27045*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27045*0 + 3*567*FLEN/8, x4, x1, x2)

inst_9016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0000ff; valaddr_reg:x3; val_offset:27048*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27048*0 + 3*568*FLEN/8, x4, x1, x2)

inst_9017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0001ff; valaddr_reg:x3; val_offset:27051*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27051*0 + 3*569*FLEN/8, x4, x1, x2)

inst_9018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0003ff; valaddr_reg:x3; val_offset:27054*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27054*0 + 3*570*FLEN/8, x4, x1, x2)

inst_9019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0007ff; valaddr_reg:x3; val_offset:27057*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27057*0 + 3*571*FLEN/8, x4, x1, x2)

inst_9020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000fff; valaddr_reg:x3; val_offset:27060*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27060*0 + 3*572*FLEN/8, x4, x1, x2)

inst_9021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb001fff; valaddr_reg:x3; val_offset:27063*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27063*0 + 3*573*FLEN/8, x4, x1, x2)

inst_9022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb003fff; valaddr_reg:x3; val_offset:27066*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27066*0 + 3*574*FLEN/8, x4, x1, x2)

inst_9023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb007fff; valaddr_reg:x3; val_offset:27069*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27069*0 + 3*575*FLEN/8, x4, x1, x2)

inst_9024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00ffff; valaddr_reg:x3; val_offset:27072*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27072*0 + 3*576*FLEN/8, x4, x1, x2)

inst_9025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb01ffff; valaddr_reg:x3; val_offset:27075*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27075*0 + 3*577*FLEN/8, x4, x1, x2)

inst_9026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb03ffff; valaddr_reg:x3; val_offset:27078*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27078*0 + 3*578*FLEN/8, x4, x1, x2)

inst_9027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb07ffff; valaddr_reg:x3; val_offset:27081*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27081*0 + 3*579*FLEN/8, x4, x1, x2)

inst_9028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0fffff; valaddr_reg:x3; val_offset:27084*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27084*0 + 3*580*FLEN/8, x4, x1, x2)

inst_9029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb1fffff; valaddr_reg:x3; val_offset:27087*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27087*0 + 3*581*FLEN/8, x4, x1, x2)

inst_9030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb3fffff; valaddr_reg:x3; val_offset:27090*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27090*0 + 3*582*FLEN/8, x4, x1, x2)

inst_9031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb400000; valaddr_reg:x3; val_offset:27093*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27093*0 + 3*583*FLEN/8, x4, x1, x2)

inst_9032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb600000; valaddr_reg:x3; val_offset:27096*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27096*0 + 3*584*FLEN/8, x4, x1, x2)

inst_9033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb700000; valaddr_reg:x3; val_offset:27099*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27099*0 + 3*585*FLEN/8, x4, x1, x2)

inst_9034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb780000; valaddr_reg:x3; val_offset:27102*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27102*0 + 3*586*FLEN/8, x4, x1, x2)

inst_9035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7c0000; valaddr_reg:x3; val_offset:27105*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27105*0 + 3*587*FLEN/8, x4, x1, x2)

inst_9036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7e0000; valaddr_reg:x3; val_offset:27108*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27108*0 + 3*588*FLEN/8, x4, x1, x2)

inst_9037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7f0000; valaddr_reg:x3; val_offset:27111*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27111*0 + 3*589*FLEN/8, x4, x1, x2)

inst_9038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7f8000; valaddr_reg:x3; val_offset:27114*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27114*0 + 3*590*FLEN/8, x4, x1, x2)

inst_9039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fc000; valaddr_reg:x3; val_offset:27117*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27117*0 + 3*591*FLEN/8, x4, x1, x2)

inst_9040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fe000; valaddr_reg:x3; val_offset:27120*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27120*0 + 3*592*FLEN/8, x4, x1, x2)

inst_9041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ff000; valaddr_reg:x3; val_offset:27123*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27123*0 + 3*593*FLEN/8, x4, x1, x2)

inst_9042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ff800; valaddr_reg:x3; val_offset:27126*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27126*0 + 3*594*FLEN/8, x4, x1, x2)

inst_9043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffc00; valaddr_reg:x3; val_offset:27129*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27129*0 + 3*595*FLEN/8, x4, x1, x2)

inst_9044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffe00; valaddr_reg:x3; val_offset:27132*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27132*0 + 3*596*FLEN/8, x4, x1, x2)

inst_9045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fff00; valaddr_reg:x3; val_offset:27135*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27135*0 + 3*597*FLEN/8, x4, x1, x2)

inst_9046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fff80; valaddr_reg:x3; val_offset:27138*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27138*0 + 3*598*FLEN/8, x4, x1, x2)

inst_9047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fffc0; valaddr_reg:x3; val_offset:27141*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27141*0 + 3*599*FLEN/8, x4, x1, x2)

inst_9048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fffe0; valaddr_reg:x3; val_offset:27144*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27144*0 + 3*600*FLEN/8, x4, x1, x2)

inst_9049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffff0; valaddr_reg:x3; val_offset:27147*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27147*0 + 3*601*FLEN/8, x4, x1, x2)

inst_9050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffff8; valaddr_reg:x3; val_offset:27150*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27150*0 + 3*602*FLEN/8, x4, x1, x2)

inst_9051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffffc; valaddr_reg:x3; val_offset:27153*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27153*0 + 3*603*FLEN/8, x4, x1, x2)

inst_9052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffffe; valaddr_reg:x3; val_offset:27156*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27156*0 + 3*604*FLEN/8, x4, x1, x2)

inst_9053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fffff; valaddr_reg:x3; val_offset:27159*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27159*0 + 3*605*FLEN/8, x4, x1, x2)

inst_9054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800000; valaddr_reg:x3; val_offset:27162*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27162*0 + 3*606*FLEN/8, x4, x1, x2)

inst_9055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800001; valaddr_reg:x3; val_offset:27165*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27165*0 + 3*607*FLEN/8, x4, x1, x2)

inst_9056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800003; valaddr_reg:x3; val_offset:27168*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27168*0 + 3*608*FLEN/8, x4, x1, x2)

inst_9057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800007; valaddr_reg:x3; val_offset:27171*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27171*0 + 3*609*FLEN/8, x4, x1, x2)

inst_9058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80000f; valaddr_reg:x3; val_offset:27174*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27174*0 + 3*610*FLEN/8, x4, x1, x2)

inst_9059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80001f; valaddr_reg:x3; val_offset:27177*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27177*0 + 3*611*FLEN/8, x4, x1, x2)

inst_9060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80003f; valaddr_reg:x3; val_offset:27180*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27180*0 + 3*612*FLEN/8, x4, x1, x2)

inst_9061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80007f; valaddr_reg:x3; val_offset:27183*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27183*0 + 3*613*FLEN/8, x4, x1, x2)

inst_9062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8000ff; valaddr_reg:x3; val_offset:27186*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27186*0 + 3*614*FLEN/8, x4, x1, x2)

inst_9063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8001ff; valaddr_reg:x3; val_offset:27189*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27189*0 + 3*615*FLEN/8, x4, x1, x2)

inst_9064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8003ff; valaddr_reg:x3; val_offset:27192*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27192*0 + 3*616*FLEN/8, x4, x1, x2)

inst_9065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8007ff; valaddr_reg:x3; val_offset:27195*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27195*0 + 3*617*FLEN/8, x4, x1, x2)

inst_9066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800fff; valaddr_reg:x3; val_offset:27198*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27198*0 + 3*618*FLEN/8, x4, x1, x2)

inst_9067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde801fff; valaddr_reg:x3; val_offset:27201*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27201*0 + 3*619*FLEN/8, x4, x1, x2)

inst_9068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde803fff; valaddr_reg:x3; val_offset:27204*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27204*0 + 3*620*FLEN/8, x4, x1, x2)

inst_9069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde807fff; valaddr_reg:x3; val_offset:27207*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27207*0 + 3*621*FLEN/8, x4, x1, x2)

inst_9070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80ffff; valaddr_reg:x3; val_offset:27210*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27210*0 + 3*622*FLEN/8, x4, x1, x2)

inst_9071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde81ffff; valaddr_reg:x3; val_offset:27213*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27213*0 + 3*623*FLEN/8, x4, x1, x2)

inst_9072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde83ffff; valaddr_reg:x3; val_offset:27216*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27216*0 + 3*624*FLEN/8, x4, x1, x2)

inst_9073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde87ffff; valaddr_reg:x3; val_offset:27219*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27219*0 + 3*625*FLEN/8, x4, x1, x2)

inst_9074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8fffff; valaddr_reg:x3; val_offset:27222*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27222*0 + 3*626*FLEN/8, x4, x1, x2)

inst_9075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde9fffff; valaddr_reg:x3; val_offset:27225*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27225*0 + 3*627*FLEN/8, x4, x1, x2)

inst_9076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdebfffff; valaddr_reg:x3; val_offset:27228*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27228*0 + 3*628*FLEN/8, x4, x1, x2)

inst_9077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdec00000; valaddr_reg:x3; val_offset:27231*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27231*0 + 3*629*FLEN/8, x4, x1, x2)

inst_9078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdee00000; valaddr_reg:x3; val_offset:27234*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27234*0 + 3*630*FLEN/8, x4, x1, x2)

inst_9079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdef00000; valaddr_reg:x3; val_offset:27237*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27237*0 + 3*631*FLEN/8, x4, x1, x2)

inst_9080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdef80000; valaddr_reg:x3; val_offset:27240*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27240*0 + 3*632*FLEN/8, x4, x1, x2)

inst_9081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefc0000; valaddr_reg:x3; val_offset:27243*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27243*0 + 3*633*FLEN/8, x4, x1, x2)

inst_9082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefe0000; valaddr_reg:x3; val_offset:27246*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27246*0 + 3*634*FLEN/8, x4, x1, x2)

inst_9083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeff0000; valaddr_reg:x3; val_offset:27249*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27249*0 + 3*635*FLEN/8, x4, x1, x2)

inst_9084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeff8000; valaddr_reg:x3; val_offset:27252*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27252*0 + 3*636*FLEN/8, x4, x1, x2)

inst_9085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffc000; valaddr_reg:x3; val_offset:27255*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27255*0 + 3*637*FLEN/8, x4, x1, x2)

inst_9086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffe000; valaddr_reg:x3; val_offset:27258*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27258*0 + 3*638*FLEN/8, x4, x1, x2)

inst_9087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefff000; valaddr_reg:x3; val_offset:27261*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27261*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_9088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefff800; valaddr_reg:x3; val_offset:27264*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27264*0 + 3*640*FLEN/8, x4, x1, x2)

inst_9089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffc00; valaddr_reg:x3; val_offset:27267*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27267*0 + 3*641*FLEN/8, x4, x1, x2)

inst_9090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffe00; valaddr_reg:x3; val_offset:27270*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27270*0 + 3*642*FLEN/8, x4, x1, x2)

inst_9091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffff00; valaddr_reg:x3; val_offset:27273*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27273*0 + 3*643*FLEN/8, x4, x1, x2)

inst_9092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffff80; valaddr_reg:x3; val_offset:27276*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27276*0 + 3*644*FLEN/8, x4, x1, x2)

inst_9093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffc0; valaddr_reg:x3; val_offset:27279*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27279*0 + 3*645*FLEN/8, x4, x1, x2)

inst_9094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffe0; valaddr_reg:x3; val_offset:27282*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27282*0 + 3*646*FLEN/8, x4, x1, x2)

inst_9095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffff0; valaddr_reg:x3; val_offset:27285*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27285*0 + 3*647*FLEN/8, x4, x1, x2)

inst_9096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffff8; valaddr_reg:x3; val_offset:27288*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27288*0 + 3*648*FLEN/8, x4, x1, x2)

inst_9097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffffc; valaddr_reg:x3; val_offset:27291*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27291*0 + 3*649*FLEN/8, x4, x1, x2)

inst_9098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffffe; valaddr_reg:x3; val_offset:27294*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27294*0 + 3*650*FLEN/8, x4, x1, x2)

inst_9099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffff; valaddr_reg:x3; val_offset:27297*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27297*0 + 3*651*FLEN/8, x4, x1, x2)

inst_9100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000001; valaddr_reg:x3; val_offset:27300*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27300*0 + 3*652*FLEN/8, x4, x1, x2)

inst_9101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000003; valaddr_reg:x3; val_offset:27303*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27303*0 + 3*653*FLEN/8, x4, x1, x2)

inst_9102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000007; valaddr_reg:x3; val_offset:27306*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27306*0 + 3*654*FLEN/8, x4, x1, x2)

inst_9103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff199999; valaddr_reg:x3; val_offset:27309*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27309*0 + 3*655*FLEN/8, x4, x1, x2)

inst_9104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff249249; valaddr_reg:x3; val_offset:27312*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27312*0 + 3*656*FLEN/8, x4, x1, x2)

inst_9105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff333333; valaddr_reg:x3; val_offset:27315*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27315*0 + 3*657*FLEN/8, x4, x1, x2)

inst_9106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:27318*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27318*0 + 3*658*FLEN/8, x4, x1, x2)

inst_9107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:27321*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27321*0 + 3*659*FLEN/8, x4, x1, x2)

inst_9108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff444444; valaddr_reg:x3; val_offset:27324*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27324*0 + 3*660*FLEN/8, x4, x1, x2)

inst_9109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:27327*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27327*0 + 3*661*FLEN/8, x4, x1, x2)

inst_9110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:27330*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27330*0 + 3*662*FLEN/8, x4, x1, x2)

inst_9111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff666666; valaddr_reg:x3; val_offset:27333*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27333*0 + 3*663*FLEN/8, x4, x1, x2)

inst_9112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:27336*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27336*0 + 3*664*FLEN/8, x4, x1, x2)

inst_9113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:27339*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27339*0 + 3*665*FLEN/8, x4, x1, x2)

inst_9114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:27342*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27342*0 + 3*666*FLEN/8, x4, x1, x2)

inst_9115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:27345*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27345*0 + 3*667*FLEN/8, x4, x1, x2)

inst_9116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000000; valaddr_reg:x3; val_offset:27348*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27348*0 + 3*668*FLEN/8, x4, x1, x2)

inst_9117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000001; valaddr_reg:x3; val_offset:27351*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27351*0 + 3*669*FLEN/8, x4, x1, x2)

inst_9118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000003; valaddr_reg:x3; val_offset:27354*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27354*0 + 3*670*FLEN/8, x4, x1, x2)

inst_9119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000007; valaddr_reg:x3; val_offset:27357*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27357*0 + 3*671*FLEN/8, x4, x1, x2)

inst_9120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000000f; valaddr_reg:x3; val_offset:27360*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27360*0 + 3*672*FLEN/8, x4, x1, x2)

inst_9121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000001f; valaddr_reg:x3; val_offset:27363*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27363*0 + 3*673*FLEN/8, x4, x1, x2)

inst_9122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000003f; valaddr_reg:x3; val_offset:27366*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27366*0 + 3*674*FLEN/8, x4, x1, x2)

inst_9123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000007f; valaddr_reg:x3; val_offset:27369*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27369*0 + 3*675*FLEN/8, x4, x1, x2)

inst_9124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00000ff; valaddr_reg:x3; val_offset:27372*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27372*0 + 3*676*FLEN/8, x4, x1, x2)

inst_9125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00001ff; valaddr_reg:x3; val_offset:27375*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27375*0 + 3*677*FLEN/8, x4, x1, x2)

inst_9126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00003ff; valaddr_reg:x3; val_offset:27378*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27378*0 + 3*678*FLEN/8, x4, x1, x2)

inst_9127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00007ff; valaddr_reg:x3; val_offset:27381*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27381*0 + 3*679*FLEN/8, x4, x1, x2)

inst_9128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000fff; valaddr_reg:x3; val_offset:27384*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27384*0 + 3*680*FLEN/8, x4, x1, x2)

inst_9129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0001fff; valaddr_reg:x3; val_offset:27387*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27387*0 + 3*681*FLEN/8, x4, x1, x2)

inst_9130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0003fff; valaddr_reg:x3; val_offset:27390*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27390*0 + 3*682*FLEN/8, x4, x1, x2)

inst_9131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0007fff; valaddr_reg:x3; val_offset:27393*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27393*0 + 3*683*FLEN/8, x4, x1, x2)

inst_9132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000ffff; valaddr_reg:x3; val_offset:27396*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27396*0 + 3*684*FLEN/8, x4, x1, x2)

inst_9133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf001ffff; valaddr_reg:x3; val_offset:27399*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27399*0 + 3*685*FLEN/8, x4, x1, x2)

inst_9134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf003ffff; valaddr_reg:x3; val_offset:27402*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27402*0 + 3*686*FLEN/8, x4, x1, x2)

inst_9135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf007ffff; valaddr_reg:x3; val_offset:27405*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27405*0 + 3*687*FLEN/8, x4, x1, x2)

inst_9136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00fffff; valaddr_reg:x3; val_offset:27408*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27408*0 + 3*688*FLEN/8, x4, x1, x2)

inst_9137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf01fffff; valaddr_reg:x3; val_offset:27411*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27411*0 + 3*689*FLEN/8, x4, x1, x2)

inst_9138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf03fffff; valaddr_reg:x3; val_offset:27414*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27414*0 + 3*690*FLEN/8, x4, x1, x2)

inst_9139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0400000; valaddr_reg:x3; val_offset:27417*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27417*0 + 3*691*FLEN/8, x4, x1, x2)

inst_9140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0600000; valaddr_reg:x3; val_offset:27420*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27420*0 + 3*692*FLEN/8, x4, x1, x2)

inst_9141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0700000; valaddr_reg:x3; val_offset:27423*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27423*0 + 3*693*FLEN/8, x4, x1, x2)

inst_9142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0780000; valaddr_reg:x3; val_offset:27426*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27426*0 + 3*694*FLEN/8, x4, x1, x2)

inst_9143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07c0000; valaddr_reg:x3; val_offset:27429*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27429*0 + 3*695*FLEN/8, x4, x1, x2)

inst_9144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07e0000; valaddr_reg:x3; val_offset:27432*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27432*0 + 3*696*FLEN/8, x4, x1, x2)

inst_9145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07f0000; valaddr_reg:x3; val_offset:27435*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27435*0 + 3*697*FLEN/8, x4, x1, x2)

inst_9146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07f8000; valaddr_reg:x3; val_offset:27438*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27438*0 + 3*698*FLEN/8, x4, x1, x2)

inst_9147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fc000; valaddr_reg:x3; val_offset:27441*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27441*0 + 3*699*FLEN/8, x4, x1, x2)

inst_9148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fe000; valaddr_reg:x3; val_offset:27444*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27444*0 + 3*700*FLEN/8, x4, x1, x2)

inst_9149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ff000; valaddr_reg:x3; val_offset:27447*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27447*0 + 3*701*FLEN/8, x4, x1, x2)

inst_9150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ff800; valaddr_reg:x3; val_offset:27450*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27450*0 + 3*702*FLEN/8, x4, x1, x2)

inst_9151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffc00; valaddr_reg:x3; val_offset:27453*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27453*0 + 3*703*FLEN/8, x4, x1, x2)

inst_9152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffe00; valaddr_reg:x3; val_offset:27456*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27456*0 + 3*704*FLEN/8, x4, x1, x2)

inst_9153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fff00; valaddr_reg:x3; val_offset:27459*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27459*0 + 3*705*FLEN/8, x4, x1, x2)

inst_9154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fff80; valaddr_reg:x3; val_offset:27462*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27462*0 + 3*706*FLEN/8, x4, x1, x2)

inst_9155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fffc0; valaddr_reg:x3; val_offset:27465*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27465*0 + 3*707*FLEN/8, x4, x1, x2)

inst_9156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fffe0; valaddr_reg:x3; val_offset:27468*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27468*0 + 3*708*FLEN/8, x4, x1, x2)

inst_9157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffff0; valaddr_reg:x3; val_offset:27471*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27471*0 + 3*709*FLEN/8, x4, x1, x2)

inst_9158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffff8; valaddr_reg:x3; val_offset:27474*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27474*0 + 3*710*FLEN/8, x4, x1, x2)

inst_9159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffffc; valaddr_reg:x3; val_offset:27477*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27477*0 + 3*711*FLEN/8, x4, x1, x2)

inst_9160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffffe; valaddr_reg:x3; val_offset:27480*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27480*0 + 3*712*FLEN/8, x4, x1, x2)

inst_9161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fffff; valaddr_reg:x3; val_offset:27483*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27483*0 + 3*713*FLEN/8, x4, x1, x2)

inst_9162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff000001; valaddr_reg:x3; val_offset:27486*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27486*0 + 3*714*FLEN/8, x4, x1, x2)

inst_9163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff000003; valaddr_reg:x3; val_offset:27489*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27489*0 + 3*715*FLEN/8, x4, x1, x2)

inst_9164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff000007; valaddr_reg:x3; val_offset:27492*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27492*0 + 3*716*FLEN/8, x4, x1, x2)

inst_9165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff199999; valaddr_reg:x3; val_offset:27495*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27495*0 + 3*717*FLEN/8, x4, x1, x2)

inst_9166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff249249; valaddr_reg:x3; val_offset:27498*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27498*0 + 3*718*FLEN/8, x4, x1, x2)

inst_9167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff333333; valaddr_reg:x3; val_offset:27501*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27501*0 + 3*719*FLEN/8, x4, x1, x2)

inst_9168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:27504*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27504*0 + 3*720*FLEN/8, x4, x1, x2)

inst_9169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:27507*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27507*0 + 3*721*FLEN/8, x4, x1, x2)

inst_9170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff444444; valaddr_reg:x3; val_offset:27510*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27510*0 + 3*722*FLEN/8, x4, x1, x2)

inst_9171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:27513*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27513*0 + 3*723*FLEN/8, x4, x1, x2)

inst_9172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:27516*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27516*0 + 3*724*FLEN/8, x4, x1, x2)

inst_9173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff666666; valaddr_reg:x3; val_offset:27519*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27519*0 + 3*725*FLEN/8, x4, x1, x2)

inst_9174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:27522*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27522*0 + 3*726*FLEN/8, x4, x1, x2)

inst_9175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:27525*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27525*0 + 3*727*FLEN/8, x4, x1, x2)

inst_9176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:27528*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27528*0 + 3*728*FLEN/8, x4, x1, x2)

inst_9177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:27531*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27531*0 + 3*729*FLEN/8, x4, x1, x2)

inst_9178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:27534*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27534*0 + 3*730*FLEN/8, x4, x1, x2)

inst_9179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:27537*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27537*0 + 3*731*FLEN/8, x4, x1, x2)

inst_9180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:27540*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27540*0 + 3*732*FLEN/8, x4, x1, x2)

inst_9181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:27543*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27543*0 + 3*733*FLEN/8, x4, x1, x2)

inst_9182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:27546*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27546*0 + 3*734*FLEN/8, x4, x1, x2)

inst_9183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:27549*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27549*0 + 3*735*FLEN/8, x4, x1, x2)

inst_9184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:27552*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27552*0 + 3*736*FLEN/8, x4, x1, x2)

inst_9185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:27555*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27555*0 + 3*737*FLEN/8, x4, x1, x2)

inst_9186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:27558*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27558*0 + 3*738*FLEN/8, x4, x1, x2)

inst_9187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:27561*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27561*0 + 3*739*FLEN/8, x4, x1, x2)

inst_9188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:27564*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27564*0 + 3*740*FLEN/8, x4, x1, x2)

inst_9189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:27567*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27567*0 + 3*741*FLEN/8, x4, x1, x2)

inst_9190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:27570*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27570*0 + 3*742*FLEN/8, x4, x1, x2)

inst_9191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:27573*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27573*0 + 3*743*FLEN/8, x4, x1, x2)

inst_9192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:27576*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27576*0 + 3*744*FLEN/8, x4, x1, x2)

inst_9193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:27579*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27579*0 + 3*745*FLEN/8, x4, x1, x2)

inst_9194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:27582*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27582*0 + 3*746*FLEN/8, x4, x1, x2)

inst_9195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:27585*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27585*0 + 3*747*FLEN/8, x4, x1, x2)

inst_9196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:27588*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27588*0 + 3*748*FLEN/8, x4, x1, x2)

inst_9197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:27591*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27591*0 + 3*749*FLEN/8, x4, x1, x2)

inst_9198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:27594*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27594*0 + 3*750*FLEN/8, x4, x1, x2)

inst_9199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:27597*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27597*0 + 3*751*FLEN/8, x4, x1, x2)

inst_9200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:27600*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27600*0 + 3*752*FLEN/8, x4, x1, x2)

inst_9201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:27603*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27603*0 + 3*753*FLEN/8, x4, x1, x2)

inst_9202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:27606*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27606*0 + 3*754*FLEN/8, x4, x1, x2)

inst_9203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:27609*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27609*0 + 3*755*FLEN/8, x4, x1, x2)

inst_9204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:27612*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27612*0 + 3*756*FLEN/8, x4, x1, x2)

inst_9205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:27615*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27615*0 + 3*757*FLEN/8, x4, x1, x2)

inst_9206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:27618*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27618*0 + 3*758*FLEN/8, x4, x1, x2)

inst_9207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:27621*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27621*0 + 3*759*FLEN/8, x4, x1, x2)

inst_9208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:27624*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27624*0 + 3*760*FLEN/8, x4, x1, x2)

inst_9209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:27627*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27627*0 + 3*761*FLEN/8, x4, x1, x2)

inst_9210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:27630*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27630*0 + 3*762*FLEN/8, x4, x1, x2)

inst_9211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:27633*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27633*0 + 3*763*FLEN/8, x4, x1, x2)

inst_9212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:27636*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27636*0 + 3*764*FLEN/8, x4, x1, x2)

inst_9213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:27639*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27639*0 + 3*765*FLEN/8, x4, x1, x2)

inst_9214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:27642*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27642*0 + 3*766*FLEN/8, x4, x1, x2)

inst_9215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:27645*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27645*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943040,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943041,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943043,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943047,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943055,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943071,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943103,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943167,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943295,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943551,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41944063,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41945087,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41947135,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41951231,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41959423,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41975807,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42008575,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42074111,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42205183,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42467327,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42991615,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(44040191,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137343,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137344,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(48234496,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49283072,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49807360,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50069504,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50200576,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50266112,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50298880,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50315264,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50323456,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50327552,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829120,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829121,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829123,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829127,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829135,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829151,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829183,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829247,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829375,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829631,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125830143,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125831167,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125833215,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125837311,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125845503,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125861887,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125894655,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125960191,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126091263,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126353407,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126877695,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127926271,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023423,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023424,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(132120576,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133169152,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133693440,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133955584,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134086656,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134152192,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134184960,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134201344,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134209536,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134213632,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134215680,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134216704,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217216,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217472,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217600,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217664,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217696,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217712,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217720,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217724,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217726,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217727,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296256,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296257,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296259,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296263,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296271,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296287,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296319,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296383,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296511,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296767,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107297279,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107298303,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107300351,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107304447,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107312639,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107329023,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107361791,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107427327,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107558399,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107820543,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1108344831,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1109393407,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1111490559,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1111490560,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1113587712,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1114636288,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115160576,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115422720,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115553792,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115619328,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115652096,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115668480,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115676672,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115680768,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115682816,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115683840,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684352,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684608,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684736,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684800,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684832,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684848,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684856,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684860,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684862,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684863,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632960,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632961,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632963,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632967,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632975,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632991,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633023,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633087,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633215,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633471,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633983,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006635007,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006637055,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006641151,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006649343,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006665727,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006698495,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006764031,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006895103,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1007157247,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1007681535,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1008730111,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1010827263,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1010827264,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1012924416,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1013972992,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1014497280,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1014759424,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1014890496,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1014956032,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1014988800,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015005184,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015013376,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015017472,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015019520,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015020544,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021056,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021312,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021440,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021504,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021536,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021552,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021560,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021564,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021566,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1015021567,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396352,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396353,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396355,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396359,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396367,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396383,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396415,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396479,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396607,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095396863,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095397375,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095398399,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095400447,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095404543,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095412735,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095429119,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095461887,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095527423,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095658495,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3095920639,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3096444927,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3097493503,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3099590655,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3099590656,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3101687808,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3102736384,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103260672,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103522816,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103653888,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103719424,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103752192,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103768576,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103776768,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103780864,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103782912,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103783936,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784448,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784704,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784832,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784896,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784928,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784944,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784952,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784956,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784958,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3103784959,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2118389835,32,FLEN)
NAN_BOXED(2158436640,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907648,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907649,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907651,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907655,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907663,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907679,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907711,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907775,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907903,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098908159,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098908671,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098909695,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098911743,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098915839,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098924031,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098940415,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098973183,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099038719,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099169791,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099431935,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099956223,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1101004799,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1103101951,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1103101952,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1105199104,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1106247680,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1106771968,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107034112,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107165184,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107230720,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107263488,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107279872,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107288064,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107292160,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107294208,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107295232,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107295744,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296000,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296128,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296192,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296224,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296240,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296248,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296252,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296254,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296255,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697664,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697665,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697667,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697671,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697679,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697695,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697727,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697791,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697919,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051698175,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051698687,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051699711,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051701759,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051705855,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051714047,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051730431,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051763199,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051828735,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051959807,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4052221951,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4052746239,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4053794815,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4055891967,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4055891968,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4057989120,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059037696,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059561984,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059824128,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059955200,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060020736,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060053504,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060069888,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060078080,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060082176,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060084224,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060085248,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060085760,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086016,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086144,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086208,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086240,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086256,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086264,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086268,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086270,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086271,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549376,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549377,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549379,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549383,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549391,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549407,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549439,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549503,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549631,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549887,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184550399,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184551423,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184553471,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184557567,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184565759,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184582143,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184614911,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184680447,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184811519,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185073663,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185597951,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(186646527,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743679,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743680,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(190840832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(191889408,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192413696,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192675840,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192806912,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192872448,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192905216,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192921600,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192929792,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192933888,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192935936,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192936960,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937472,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937728,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937856,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937920,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937952,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937968,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937976,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937980,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937982,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937983,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930560,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930561,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930563,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930567,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930575,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930591,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930623,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930687,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930815,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732931071,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732931583,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732932607,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732934655,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732938751,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732946943,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732963327,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732996095,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733061631,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733192703,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733454847,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733979135,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3735027711,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3737124863,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3737124864,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3739222016,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3740270592,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3740794880,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741057024,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741188096,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741253632,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741286400,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741302784,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741310976,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741315072,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741317120,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318144,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318656,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318912,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319040,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319104,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319136,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319152,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319160,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319164,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319166,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319167,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531840,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531841,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531843,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531847,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531855,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531871,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531903,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531967,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026532095,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026532351,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026532863,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026533887,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026535935,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026540031,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026548223,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026564607,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026597375,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026662911,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026793983,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4027056127,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4027580415,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4028628991,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4030726143,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4030726144,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4032823296,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4033871872,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034396160,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034658304,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034789376,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034854912,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034887680,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034904064,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034912256,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034916352,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034918400,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034919424,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034919936,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920192,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920320,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920384,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920416,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920432,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920440,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920444,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920446,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920447,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
