
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:24 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmul.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmul_b6 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmul_b6)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==f16, rs2==f14, rd==f14,fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f16; op2:f14; dest:f14; op1val:0x8bde228; op2val:0x299127bf;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f14, f16, f14, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 != rd, rs1==f11, rs2==f11, rd==f12,fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f11; op2:f11; dest:f12; op1val:0x8bde228; op2val:0x8bde228;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f12, f11, f11, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd, rs1==f31, rs2==f31, rd==f31,fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f31; op2:f31; dest:f31; op1val:0x8bde228; op2val:0x8bde228;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f31, f31, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f0, rs2==f23, rd==f16,fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f0; op2:f23; dest:f16; op1val:0x8bde228; op2val:0x299127bf;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f16, f0, f23, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==f26, rs2==f10, rd==f26,fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f26; op2:f10; dest:f26; op1val:0x8bde228; op2val:0x299127bf;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f26, f26, f10, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f20, rs2==f25, rd==f19,fs1 == 0 and fe1 == 0x17 and fm1 == 0x50d96a and fs2 == 0 and fe2 == 0x4e and fm2 == 0x458574 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f20; op2:f25; dest:f19; op1val:0xbd0d96a; op2val:0x27458574;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f19, f20, f25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f12, rs2==f0, rd==f4,fs1 == 0 and fe1 == 0x17 and fm1 == 0x50d96a and fs2 == 0 and fe2 == 0x4e and fm2 == 0x458574 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f12; op2:f0; dest:f4; op1val:0xbd0d96a; op2val:0x27458574;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f4, f12, f0, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f15, rs2==f4, rd==f11,fs1 == 0 and fe1 == 0x17 and fm1 == 0x50d96a and fs2 == 0 and fe2 == 0x4e and fm2 == 0x458574 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f15; op2:f4; dest:f11; op1val:0xbd0d96a; op2val:0x27458574;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f11, f15, f4, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f14, rs2==f12, rd==f27,fs1 == 0 and fe1 == 0x17 and fm1 == 0x50d96a and fs2 == 0 and fe2 == 0x4e and fm2 == 0x458574 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f14; op2:f12; dest:f27; op1val:0xbd0d96a; op2val:0x27458574;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f27, f14, f12, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f13, rs2==f7, rd==f3,fs1 == 0 and fe1 == 0x17 and fm1 == 0x50d96a and fs2 == 0 and fe2 == 0x4e and fm2 == 0x458574 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f13; op2:f7; dest:f3; op1val:0xbd0d96a; op2val:0x27458574;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f3, f13, f7, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f4, rs2==f26, rd==f20,fs1 == 0 and fe1 == 0x18 and fm1 == 0x0d90af and fs2 == 0 and fe2 == 0x4e and fm2 == 0x11b348 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f4; op2:f26; dest:f20; op1val:0xc0d90af; op2val:0x2711b348;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f20, f4, f26, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f9, rs2==f24, rd==f22,fs1 == 0 and fe1 == 0x18 and fm1 == 0x0d90af and fs2 == 0 and fe2 == 0x4e and fm2 == 0x11b348 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f9; op2:f24; dest:f22; op1val:0xc0d90af; op2val:0x2711b348;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f22, f9, f24, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f25, rs2==f6, rd==f13,fs1 == 0 and fe1 == 0x18 and fm1 == 0x0d90af and fs2 == 0 and fe2 == 0x4e and fm2 == 0x11b348 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f25; op2:f6; dest:f13; op1val:0xc0d90af; op2val:0x2711b348;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f13, f25, f6, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f5, rs2==f30, rd==f25,fs1 == 0 and fe1 == 0x18 and fm1 == 0x0d90af and fs2 == 0 and fe2 == 0x4e and fm2 == 0x11b348 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f5; op2:f30; dest:f25; op1val:0xc0d90af; op2val:0x2711b348;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f25, f5, f30, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f3, rs2==f21, rd==f29,fs1 == 0 and fe1 == 0x18 and fm1 == 0x0d90af and fs2 == 0 and fe2 == 0x4e and fm2 == 0x11b348 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f3; op2:f21; dest:f29; op1val:0xc0d90af; op2val:0x2711b348;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f29, f3, f21, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f29, rs2==f16, rd==f9,fs1 == 0 and fe1 == 0x18 and fm1 == 0x7804ee and fs2 == 0 and fe2 == 0x4d and fm2 == 0x265397 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f29; op2:f16; dest:f9; op1val:0xc7804ee; op2val:0x26a65397;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f9, f29, f16, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f8, rs2==f28, rd==f0,fs1 == 0 and fe1 == 0x18 and fm1 == 0x7804ee and fs2 == 0 and fe2 == 0x4d and fm2 == 0x265397 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f8; op2:f28; dest:f0; op1val:0xc7804ee; op2val:0x26a65397;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f0, f8, f28, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f2, rs2==f1, rd==f17,fs1 == 0 and fe1 == 0x18 and fm1 == 0x7804ee and fs2 == 0 and fe2 == 0x4d and fm2 == 0x265397 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f2; op2:f1; dest:f17; op1val:0xc7804ee; op2val:0x26a65397;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f17, f2, f1, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f21, rs2==f3, rd==f1,fs1 == 0 and fe1 == 0x18 and fm1 == 0x7804ee and fs2 == 0 and fe2 == 0x4d and fm2 == 0x265397 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f21; op2:f3; dest:f1; op1val:0xc7804ee; op2val:0x26a65397;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f1, f21, f3, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f28, rs2==f2, rd==f24,fs1 == 0 and fe1 == 0x18 and fm1 == 0x7804ee and fs2 == 0 and fe2 == 0x4d and fm2 == 0x265397 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f28; op2:f2; dest:f24; op1val:0xc7804ee; op2val:0x26a65397;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f24, f28, f2, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f22, rs2==f20, rd==f6,fs1 == 0 and fe1 == 0x19 and fm1 == 0x1adedf and fs2 == 0 and fe2 == 0x4d and fm2 == 0x052ec8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f22; op2:f20; dest:f6; op1val:0xc9adedf; op2val:0x26852ec8;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f6, f22, f20, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f24, rs2==f22, rd==f5,fs1 == 0 and fe1 == 0x19 and fm1 == 0x1adedf and fs2 == 0 and fe2 == 0x4d and fm2 == 0x052ec8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f24; op2:f22; dest:f5; op1val:0xc9adedf; op2val:0x26852ec8;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f5, f24, f22, dyn, 32, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f7, rs2==f27, rd==f8,fs1 == 0 and fe1 == 0x19 and fm1 == 0x1adedf and fs2 == 0 and fe2 == 0x4d and fm2 == 0x052ec8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f7; op2:f27; dest:f8; op1val:0xc9adedf; op2val:0x26852ec8;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f8, f7, f27, dyn, 64, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f19, rs2==f9, rd==f28,fs1 == 0 and fe1 == 0x19 and fm1 == 0x1adedf and fs2 == 0 and fe2 == 0x4d and fm2 == 0x052ec8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f19; op2:f9; dest:f28; op1val:0xc9adedf; op2val:0x26852ec8;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f28, f19, f9, dyn, 96, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f17, rs2==f15, rd==f2,fs1 == 0 and fe1 == 0x19 and fm1 == 0x1adedf and fs2 == 0 and fe2 == 0x4d and fm2 == 0x052ec8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f17; op2:f15; dest:f2; op1val:0xc9adedf; op2val:0x26852ec8;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f2, f17, f15, dyn, 128, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f27, rs2==f13, rd==f15,fs1 == 0 and fe1 == 0x19 and fm1 == 0x2911b5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x230684 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f27; op2:f13; dest:f15; op1val:0xca911b5; op2val:0x25a30684;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f15, f27, f13, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f6, rs2==f29, rd==f18,fs1 == 0 and fe1 == 0x19 and fm1 == 0x2911b5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x230684 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f6; op2:f29; dest:f18; op1val:0xca911b5; op2val:0x25a30684;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f18, f6, f29, dyn, 32, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f18, rs2==f17, rd==f10,fs1 == 0 and fe1 == 0x19 and fm1 == 0x2911b5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x230684 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f18; op2:f17; dest:f10; op1val:0xca911b5; op2val:0x25a30684;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f10, f18, f17, dyn, 64, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f30, rs2==f18, rd==f23,fs1 == 0 and fe1 == 0x19 and fm1 == 0x2911b5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x230684 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f18; dest:f23; op1val:0xca911b5; op2val:0x25a30684;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f23, f30, f18, dyn, 96, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f10, rs2==f19, rd==f21,fs1 == 0 and fe1 == 0x19 and fm1 == 0x2911b5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x230684 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f10; op2:f19; dest:f21; op1val:0xca911b5; op2val:0x25a30684;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f21, f10, f19, dyn, 128, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f23, rs2==f5, rd==f7,fs1 == 0 and fe1 == 0x19 and fm1 == 0x36ec58 and fs2 == 1 and fe2 == 0x4c and fm2 == 0x4f013a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f23; op2:f5; dest:f7; op1val:0xcb6ec58; op2val:0xa64f013a;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f7, f23, f5, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f1, rs2==f8, rd==f30,fs1 == 0 and fe1 == 0x19 and fm1 == 0x36ec58 and fs2 == 1 and fe2 == 0x4c and fm2 == 0x4f013a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f1; op2:f8; dest:f30; op1val:0xcb6ec58; op2val:0xa64f013a;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f30, f1, f8, dyn, 32, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x36ec58 and fs2 == 1 and fe2 == 0x4c and fm2 == 0x4f013a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcb6ec58; op2val:0xa64f013a;
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x36ec58 and fs2 == 1 and fe2 == 0x4c and fm2 == 0x4f013a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcb6ec58; op2val:0xa64f013a;
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x36ec58 and fs2 == 1 and fe2 == 0x4c and fm2 == 0x4f013a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcb6ec58; op2val:0xa64f013a;
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x494c1a and fs2 == 1 and fe2 == 0x4a and fm2 == 0x1d9ace and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcc94c1a; op2val:0xa51d9ace;
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x494c1a and fs2 == 1 and fe2 == 0x4a and fm2 == 0x1d9ace and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcc94c1a; op2val:0xa51d9ace;
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x494c1a and fs2 == 1 and fe2 == 0x4a and fm2 == 0x1d9ace and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcc94c1a; op2val:0xa51d9ace;
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x494c1a and fs2 == 1 and fe2 == 0x4a and fm2 == 0x1d9ace and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcc94c1a; op2val:0xa51d9ace;
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x494c1a and fs2 == 1 and fe2 == 0x4a and fm2 == 0x1d9ace and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcc94c1a; op2val:0xa51d9ace;
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x5311d7 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x0295cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcd311d7; op2val:0x258295cf;
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x5311d7 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x0295cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcd311d7; op2val:0x258295cf;
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x5311d7 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x0295cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcd311d7; op2val:0x258295cf;
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x5311d7 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x0295cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcd311d7; op2val:0x258295cf;
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x5311d7 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x0295cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xcd311d7; op2val:0x258295cf;
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x0ce595 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x612ae9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd0ce595; op2val:0xa4e12ae9;
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x0ce595 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x612ae9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd0ce595; op2val:0xa4e12ae9;
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x0ce595 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x612ae9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd0ce595; op2val:0xa4e12ae9;
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x0ce595 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x612ae9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd0ce595; op2val:0xa4e12ae9;
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x0ce595 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x612ae9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd0ce595; op2val:0xa4e12ae9;
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x193815 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4f0f20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd193815; op2val:0xa4cf0f20;
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x193815 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4f0f20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd193815; op2val:0xa4cf0f20;
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x193815 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4f0f20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd193815; op2val:0xa4cf0f20;
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x193815 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4f0f20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd193815; op2val:0xa4cf0f20;
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x193815 and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4f0f20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd193815; op2val:0xa4cf0f20;
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1aaa20 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x74d396 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1aaa20; op2val:0xa5f4d396;
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1aaa20 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x74d396 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1aaa20; op2val:0xa5f4d396;
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1aaa20 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x74d396 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1aaa20; op2val:0xa5f4d396;
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1aaa20 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x74d396 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1aaa20; op2val:0xa5f4d396;
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1aaa20 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x74d396 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1aaa20; op2val:0xa5f4d396;
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1acc6b and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4cf247 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1acc6b; op2val:0xa4ccf247;
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1acc6b and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4cf247 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1acc6b; op2val:0xa4ccf247;
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1acc6b and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4cf247 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1acc6b; op2val:0xa4ccf247;
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1acc6b and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4cf247 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1acc6b; op2val:0xa4ccf247;
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x1acc6b and fs2 == 1 and fe2 == 0x49 and fm2 == 0x4cf247 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd1acc6b; op2val:0xa4ccf247;
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x24d60e and fs2 == 0 and fe2 == 0x4b and fm2 == 0x7a4301 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd24d60e; op2val:0x25fa4301;
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x24d60e and fs2 == 0 and fe2 == 0x4b and fm2 == 0x7a4301 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd24d60e; op2val:0x25fa4301;
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x24d60e and fs2 == 0 and fe2 == 0x4b and fm2 == 0x7a4301 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd24d60e; op2val:0x25fa4301;
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x24d60e and fs2 == 0 and fe2 == 0x4b and fm2 == 0x7a4301 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd24d60e; op2val:0x25fa4301;
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x24d60e and fs2 == 0 and fe2 == 0x4b and fm2 == 0x7a4301 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd24d60e; op2val:0x25fa4301;
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x25eb0a and fs2 == 1 and fe2 == 0x4b and fm2 == 0x64388c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd25eb0a; op2val:0xa5e4388c;
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x25eb0a and fs2 == 1 and fe2 == 0x4b and fm2 == 0x64388c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd25eb0a; op2val:0xa5e4388c;
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x25eb0a and fs2 == 1 and fe2 == 0x4b and fm2 == 0x64388c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd25eb0a; op2val:0xa5e4388c;
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x25eb0a and fs2 == 1 and fe2 == 0x4b and fm2 == 0x64388c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd25eb0a; op2val:0xa5e4388c;
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x25eb0a and fs2 == 1 and fe2 == 0x4b and fm2 == 0x64388c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd25eb0a; op2val:0xa5e4388c;
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x321027 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x1aca83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd321027; op2val:0x251aca83;
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x321027 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x1aca83 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd321027; op2val:0x251aca83;
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x321027 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x1aca83 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd321027; op2val:0x251aca83;
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x321027 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x1aca83 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd321027; op2val:0x251aca83;
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x321027 and fs2 == 0 and fe2 == 0x4a and fm2 == 0x1aca83 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd321027; op2val:0x251aca83;
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x48ac16 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x3cb219 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd48ac16; op2val:0xa5bcb219;
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x48ac16 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x3cb219 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd48ac16; op2val:0xa5bcb219;
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x48ac16 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x3cb219 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd48ac16; op2val:0xa5bcb219;
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x48ac16 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x3cb219 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd48ac16; op2val:0xa5bcb219;
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x48ac16 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x3cb219 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd48ac16; op2val:0xa5bcb219;
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x654ad3 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x33e931 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd654ad3; op2val:0x25b3e931;
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x654ad3 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x33e931 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd654ad3; op2val:0x25b3e931;
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x654ad3 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x33e931 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd654ad3; op2val:0x25b3e931;
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x654ad3 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x33e931 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd654ad3; op2val:0x25b3e931;
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x654ad3 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x33e931 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd654ad3; op2val:0x25b3e931;
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x698eb9 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x6c061e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd698eb9; op2val:0x24ec061e;
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x698eb9 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x6c061e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd698eb9; op2val:0x24ec061e;
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x698eb9 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x6c061e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd698eb9; op2val:0x24ec061e;
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x698eb9 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x6c061e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd698eb9; op2val:0x24ec061e;
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x698eb9 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x6c061e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd698eb9; op2val:0x24ec061e;
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x7e5b70 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x14de8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd7e5b70; op2val:0xa594de8c;
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x7e5b70 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x14de8c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd7e5b70; op2val:0xa594de8c;
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x7e5b70 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x14de8c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd7e5b70; op2val:0xa594de8c;
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x7e5b70 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x14de8c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd7e5b70; op2val:0xa594de8c;
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x7e5b70 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x14de8c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd7e5b70; op2val:0xa594de8c;
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0252c5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x1e44c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8252c5; op2val:0x259e44c4;
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0252c5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x1e44c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8252c5; op2val:0x259e44c4;
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0252c5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x1e44c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8252c5; op2val:0x259e44c4;
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0252c5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x1e44c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8252c5; op2val:0x259e44c4;
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0252c5 and fs2 == 0 and fe2 == 0x4b and fm2 == 0x1e44c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8252c5; op2val:0x259e44c4;
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x03771b and fs2 == 1 and fe2 == 0x48 and fm2 == 0x715250 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd83771b; op2val:0xa4715250;
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x03771b and fs2 == 1 and fe2 == 0x48 and fm2 == 0x715250 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd83771b; op2val:0xa4715250;
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x03771b and fs2 == 1 and fe2 == 0x48 and fm2 == 0x715250 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd83771b; op2val:0xa4715250;
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x03771b and fs2 == 1 and fe2 == 0x48 and fm2 == 0x715250 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd83771b; op2val:0xa4715250;
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x03771b and fs2 == 1 and fe2 == 0x48 and fm2 == 0x715250 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd83771b; op2val:0xa4715250;
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x05d6b8 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x4df04f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd85d6b8; op2val:0x24cdf04f;
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x05d6b8 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x4df04f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd85d6b8; op2val:0x24cdf04f;
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x05d6b8 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x4df04f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd85d6b8; op2val:0x24cdf04f;
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x05d6b8 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x4df04f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd85d6b8; op2val:0x24cdf04f;
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x05d6b8 and fs2 == 0 and fe2 == 0x49 and fm2 == 0x4df04f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd85d6b8; op2val:0x24cdf04f;
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0cc6cf and fs2 == 0 and fe2 == 0x49 and fm2 == 0x43ca1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8cc6cf; op2val:0x24c3ca1c;
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0cc6cf and fs2 == 0 and fe2 == 0x49 and fm2 == 0x43ca1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8cc6cf; op2val:0x24c3ca1c;
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0cc6cf and fs2 == 0 and fe2 == 0x49 and fm2 == 0x43ca1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8cc6cf; op2val:0x24c3ca1c;
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0cc6cf and fs2 == 0 and fe2 == 0x49 and fm2 == 0x43ca1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8cc6cf; op2val:0x24c3ca1c;
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0cc6cf and fs2 == 0 and fe2 == 0x49 and fm2 == 0x43ca1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd8cc6cf; op2val:0x24c3ca1c;
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x11d848 and fs2 == 1 and fe2 == 0x48 and fm2 == 0x598746 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd91d848; op2val:0xa4598746;
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x11d848 and fs2 == 1 and fe2 == 0x48 and fm2 == 0x598746 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd91d848; op2val:0xa4598746;
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x11d848 and fs2 == 1 and fe2 == 0x48 and fm2 == 0x598746 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd91d848; op2val:0xa4598746;
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x11d848 and fs2 == 1 and fe2 == 0x48 and fm2 == 0x598746 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd91d848; op2val:0xa4598746;
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x11d848 and fs2 == 1 and fe2 == 0x48 and fm2 == 0x598746 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd91d848; op2val:0xa4598746;
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x135988 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x007d7b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd935988; op2val:0xa5807d7b;
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x135988 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x007d7b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd935988; op2val:0xa5807d7b;
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x135988 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x007d7b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd935988; op2val:0xa5807d7b;
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x135988 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x007d7b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd935988; op2val:0xa5807d7b;
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x135988 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x007d7b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd935988; op2val:0xa5807d7b;
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x139d61 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x00426c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd939d61; op2val:0xa580426c;
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x139d61 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x00426c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd939d61; op2val:0xa580426c;
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x139d61 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x00426c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd939d61; op2val:0xa580426c;
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x139d61 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x00426c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd939d61; op2val:0xa580426c;
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x139d61 and fs2 == 1 and fe2 == 0x4b and fm2 == 0x00426c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd939d61; op2val:0xa580426c;
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1424fe and fs2 == 1 and fe2 == 0x48 and fm2 == 0x5626d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd9424fe; op2val:0xa45626d6;
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1424fe and fs2 == 1 and fe2 == 0x48 and fm2 == 0x5626d6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd9424fe; op2val:0xa45626d6;
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1424fe and fs2 == 1 and fe2 == 0x48 and fm2 == 0x5626d6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd9424fe; op2val:0xa45626d6;
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1424fe and fs2 == 1 and fe2 == 0x48 and fm2 == 0x5626d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd9424fe; op2val:0xa45626d6;
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1424fe and fs2 == 1 and fe2 == 0x48 and fm2 == 0x5626d6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0xd9424fe; op2val:0xa45626d6;
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0x8bde228; op2val:0x299127bf;
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0x8bde228; op2val:0x299127bf;
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 32, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0x8bde228; op2val:0x299127bf;
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 64, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x11 and fm1 == 0x3de228 and fs2 == 0 and fe2 == 0x53 and fm2 == 0x1127bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmul.s ; op1:f30; op2:f29; dest:f31; op1val:0x8bde228; op2val:0x299127bf;
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, f31, f30, f29, dyn, 128, 0, x3, 286*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(697378751,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(697378751,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(697378751,32,FLEN)
NAN_BOXED(198236522,32,FLEN)
NAN_BOXED(658867572,32,FLEN)
NAN_BOXED(198236522,32,FLEN)
NAN_BOXED(658867572,32,FLEN)
NAN_BOXED(198236522,32,FLEN)
NAN_BOXED(658867572,32,FLEN)
NAN_BOXED(198236522,32,FLEN)
NAN_BOXED(658867572,32,FLEN)
NAN_BOXED(198236522,32,FLEN)
NAN_BOXED(658867572,32,FLEN)
NAN_BOXED(202215599,32,FLEN)
NAN_BOXED(655471432,32,FLEN)
NAN_BOXED(202215599,32,FLEN)
NAN_BOXED(655471432,32,FLEN)
NAN_BOXED(202215599,32,FLEN)
NAN_BOXED(655471432,32,FLEN)
NAN_BOXED(202215599,32,FLEN)
NAN_BOXED(655471432,32,FLEN)
NAN_BOXED(202215599,32,FLEN)
NAN_BOXED(655471432,32,FLEN)
NAN_BOXED(209192174,32,FLEN)
NAN_BOXED(648434583,32,FLEN)
NAN_BOXED(209192174,32,FLEN)
NAN_BOXED(648434583,32,FLEN)
NAN_BOXED(209192174,32,FLEN)
NAN_BOXED(648434583,32,FLEN)
NAN_BOXED(209192174,32,FLEN)
NAN_BOXED(648434583,32,FLEN)
NAN_BOXED(209192174,32,FLEN)
NAN_BOXED(648434583,32,FLEN)
NAN_BOXED(211476191,32,FLEN)
NAN_BOXED(646262472,32,FLEN)
NAN_BOXED(211476191,32,FLEN)
NAN_BOXED(646262472,32,FLEN)
NAN_BOXED(211476191,32,FLEN)
NAN_BOXED(646262472,32,FLEN)
NAN_BOXED(211476191,32,FLEN)
NAN_BOXED(646262472,32,FLEN)
NAN_BOXED(211476191,32,FLEN)
NAN_BOXED(646262472,32,FLEN)
NAN_BOXED(212406709,32,FLEN)
NAN_BOXED(631441028,32,FLEN)
NAN_BOXED(212406709,32,FLEN)
NAN_BOXED(631441028,32,FLEN)
NAN_BOXED(212406709,32,FLEN)
NAN_BOXED(631441028,32,FLEN)
NAN_BOXED(212406709,32,FLEN)
NAN_BOXED(631441028,32,FLEN)
NAN_BOXED(212406709,32,FLEN)
NAN_BOXED(631441028,32,FLEN)
NAN_BOXED(213314648,32,FLEN)
NAN_BOXED(2790195514,32,FLEN)
NAN_BOXED(213314648,32,FLEN)
NAN_BOXED(2790195514,32,FLEN)
NAN_BOXED(213314648,32,FLEN)
NAN_BOXED(2790195514,32,FLEN)
NAN_BOXED(213314648,32,FLEN)
NAN_BOXED(2790195514,32,FLEN)
NAN_BOXED(213314648,32,FLEN)
NAN_BOXED(2790195514,32,FLEN)
NAN_BOXED(214518810,32,FLEN)
NAN_BOXED(2770180814,32,FLEN)
NAN_BOXED(214518810,32,FLEN)
NAN_BOXED(2770180814,32,FLEN)
NAN_BOXED(214518810,32,FLEN)
NAN_BOXED(2770180814,32,FLEN)
NAN_BOXED(214518810,32,FLEN)
NAN_BOXED(2770180814,32,FLEN)
NAN_BOXED(214518810,32,FLEN)
NAN_BOXED(2770180814,32,FLEN)
NAN_BOXED(215159255,32,FLEN)
NAN_BOXED(629315023,32,FLEN)
NAN_BOXED(215159255,32,FLEN)
NAN_BOXED(629315023,32,FLEN)
NAN_BOXED(215159255,32,FLEN)
NAN_BOXED(629315023,32,FLEN)
NAN_BOXED(215159255,32,FLEN)
NAN_BOXED(629315023,32,FLEN)
NAN_BOXED(215159255,32,FLEN)
NAN_BOXED(629315023,32,FLEN)
NAN_BOXED(218949013,32,FLEN)
NAN_BOXED(2766220009,32,FLEN)
NAN_BOXED(218949013,32,FLEN)
NAN_BOXED(2766220009,32,FLEN)
NAN_BOXED(218949013,32,FLEN)
NAN_BOXED(2766220009,32,FLEN)
NAN_BOXED(218949013,32,FLEN)
NAN_BOXED(2766220009,32,FLEN)
NAN_BOXED(218949013,32,FLEN)
NAN_BOXED(2766220009,32,FLEN)
NAN_BOXED(219756565,32,FLEN)
NAN_BOXED(2765033248,32,FLEN)
NAN_BOXED(219756565,32,FLEN)
NAN_BOXED(2765033248,32,FLEN)
NAN_BOXED(219756565,32,FLEN)
NAN_BOXED(2765033248,32,FLEN)
NAN_BOXED(219756565,32,FLEN)
NAN_BOXED(2765033248,32,FLEN)
NAN_BOXED(219756565,32,FLEN)
NAN_BOXED(2765033248,32,FLEN)
NAN_BOXED(219851296,32,FLEN)
NAN_BOXED(2784285590,32,FLEN)
NAN_BOXED(219851296,32,FLEN)
NAN_BOXED(2784285590,32,FLEN)
NAN_BOXED(219851296,32,FLEN)
NAN_BOXED(2784285590,32,FLEN)
NAN_BOXED(219851296,32,FLEN)
NAN_BOXED(2784285590,32,FLEN)
NAN_BOXED(219851296,32,FLEN)
NAN_BOXED(2784285590,32,FLEN)
NAN_BOXED(219860075,32,FLEN)
NAN_BOXED(2764894791,32,FLEN)
NAN_BOXED(219860075,32,FLEN)
NAN_BOXED(2764894791,32,FLEN)
NAN_BOXED(219860075,32,FLEN)
NAN_BOXED(2764894791,32,FLEN)
NAN_BOXED(219860075,32,FLEN)
NAN_BOXED(2764894791,32,FLEN)
NAN_BOXED(219860075,32,FLEN)
NAN_BOXED(2764894791,32,FLEN)
NAN_BOXED(220517902,32,FLEN)
NAN_BOXED(637158145,32,FLEN)
NAN_BOXED(220517902,32,FLEN)
NAN_BOXED(637158145,32,FLEN)
NAN_BOXED(220517902,32,FLEN)
NAN_BOXED(637158145,32,FLEN)
NAN_BOXED(220517902,32,FLEN)
NAN_BOXED(637158145,32,FLEN)
NAN_BOXED(220517902,32,FLEN)
NAN_BOXED(637158145,32,FLEN)
NAN_BOXED(220588810,32,FLEN)
NAN_BOXED(2783197324,32,FLEN)
NAN_BOXED(220588810,32,FLEN)
NAN_BOXED(2783197324,32,FLEN)
NAN_BOXED(220588810,32,FLEN)
NAN_BOXED(2783197324,32,FLEN)
NAN_BOXED(220588810,32,FLEN)
NAN_BOXED(2783197324,32,FLEN)
NAN_BOXED(220588810,32,FLEN)
NAN_BOXED(2783197324,32,FLEN)
NAN_BOXED(221384743,32,FLEN)
NAN_BOXED(622512771,32,FLEN)
NAN_BOXED(221384743,32,FLEN)
NAN_BOXED(622512771,32,FLEN)
NAN_BOXED(221384743,32,FLEN)
NAN_BOXED(622512771,32,FLEN)
NAN_BOXED(221384743,32,FLEN)
NAN_BOXED(622512771,32,FLEN)
NAN_BOXED(221384743,32,FLEN)
NAN_BOXED(622512771,32,FLEN)
NAN_BOXED(222866454,32,FLEN)
NAN_BOXED(2780607001,32,FLEN)
NAN_BOXED(222866454,32,FLEN)
NAN_BOXED(2780607001,32,FLEN)
NAN_BOXED(222866454,32,FLEN)
NAN_BOXED(2780607001,32,FLEN)
NAN_BOXED(222866454,32,FLEN)
NAN_BOXED(2780607001,32,FLEN)
NAN_BOXED(222866454,32,FLEN)
NAN_BOXED(2780607001,32,FLEN)
NAN_BOXED(224742099,32,FLEN)
NAN_BOXED(632547633,32,FLEN)
NAN_BOXED(224742099,32,FLEN)
NAN_BOXED(632547633,32,FLEN)
NAN_BOXED(224742099,32,FLEN)
NAN_BOXED(632547633,32,FLEN)
NAN_BOXED(224742099,32,FLEN)
NAN_BOXED(632547633,32,FLEN)
NAN_BOXED(224742099,32,FLEN)
NAN_BOXED(632547633,32,FLEN)
NAN_BOXED(225021625,32,FLEN)
NAN_BOXED(619447838,32,FLEN)
NAN_BOXED(225021625,32,FLEN)
NAN_BOXED(619447838,32,FLEN)
NAN_BOXED(225021625,32,FLEN)
NAN_BOXED(619447838,32,FLEN)
NAN_BOXED(225021625,32,FLEN)
NAN_BOXED(619447838,32,FLEN)
NAN_BOXED(225021625,32,FLEN)
NAN_BOXED(619447838,32,FLEN)
NAN_BOXED(226384752,32,FLEN)
NAN_BOXED(2777996940,32,FLEN)
NAN_BOXED(226384752,32,FLEN)
NAN_BOXED(2777996940,32,FLEN)
NAN_BOXED(226384752,32,FLEN)
NAN_BOXED(2777996940,32,FLEN)
NAN_BOXED(226384752,32,FLEN)
NAN_BOXED(2777996940,32,FLEN)
NAN_BOXED(226384752,32,FLEN)
NAN_BOXED(2777996940,32,FLEN)
NAN_BOXED(226644677,32,FLEN)
NAN_BOXED(631129284,32,FLEN)
NAN_BOXED(226644677,32,FLEN)
NAN_BOXED(631129284,32,FLEN)
NAN_BOXED(226644677,32,FLEN)
NAN_BOXED(631129284,32,FLEN)
NAN_BOXED(226644677,32,FLEN)
NAN_BOXED(631129284,32,FLEN)
NAN_BOXED(226644677,32,FLEN)
NAN_BOXED(631129284,32,FLEN)
NAN_BOXED(226719515,32,FLEN)
NAN_BOXED(2758890064,32,FLEN)
NAN_BOXED(226719515,32,FLEN)
NAN_BOXED(2758890064,32,FLEN)
NAN_BOXED(226719515,32,FLEN)
NAN_BOXED(2758890064,32,FLEN)
NAN_BOXED(226719515,32,FLEN)
NAN_BOXED(2758890064,32,FLEN)
NAN_BOXED(226719515,32,FLEN)
NAN_BOXED(2758890064,32,FLEN)
NAN_BOXED(226875064,32,FLEN)
NAN_BOXED(617476175,32,FLEN)
NAN_BOXED(226875064,32,FLEN)
NAN_BOXED(617476175,32,FLEN)
NAN_BOXED(226875064,32,FLEN)
NAN_BOXED(617476175,32,FLEN)
NAN_BOXED(226875064,32,FLEN)
NAN_BOXED(617476175,32,FLEN)
NAN_BOXED(226875064,32,FLEN)
NAN_BOXED(617476175,32,FLEN)
NAN_BOXED(227329743,32,FLEN)
NAN_BOXED(616811036,32,FLEN)
NAN_BOXED(227329743,32,FLEN)
NAN_BOXED(616811036,32,FLEN)
NAN_BOXED(227329743,32,FLEN)
NAN_BOXED(616811036,32,FLEN)
NAN_BOXED(227329743,32,FLEN)
NAN_BOXED(616811036,32,FLEN)
NAN_BOXED(227329743,32,FLEN)
NAN_BOXED(616811036,32,FLEN)
NAN_BOXED(227661896,32,FLEN)
NAN_BOXED(2757330758,32,FLEN)
NAN_BOXED(227661896,32,FLEN)
NAN_BOXED(2757330758,32,FLEN)
NAN_BOXED(227661896,32,FLEN)
NAN_BOXED(2757330758,32,FLEN)
NAN_BOXED(227661896,32,FLEN)
NAN_BOXED(2757330758,32,FLEN)
NAN_BOXED(227661896,32,FLEN)
NAN_BOXED(2757330758,32,FLEN)
NAN_BOXED(227760520,32,FLEN)
NAN_BOXED(2776661371,32,FLEN)
NAN_BOXED(227760520,32,FLEN)
NAN_BOXED(2776661371,32,FLEN)
NAN_BOXED(227760520,32,FLEN)
NAN_BOXED(2776661371,32,FLEN)
NAN_BOXED(227760520,32,FLEN)
NAN_BOXED(2776661371,32,FLEN)
NAN_BOXED(227760520,32,FLEN)
NAN_BOXED(2776661371,32,FLEN)
NAN_BOXED(227777889,32,FLEN)
NAN_BOXED(2776646252,32,FLEN)
NAN_BOXED(227777889,32,FLEN)
NAN_BOXED(2776646252,32,FLEN)
NAN_BOXED(227777889,32,FLEN)
NAN_BOXED(2776646252,32,FLEN)
NAN_BOXED(227777889,32,FLEN)
NAN_BOXED(2776646252,32,FLEN)
NAN_BOXED(227777889,32,FLEN)
NAN_BOXED(2776646252,32,FLEN)
NAN_BOXED(227812606,32,FLEN)
NAN_BOXED(2757109462,32,FLEN)
NAN_BOXED(227812606,32,FLEN)
NAN_BOXED(2757109462,32,FLEN)
NAN_BOXED(227812606,32,FLEN)
NAN_BOXED(2757109462,32,FLEN)
NAN_BOXED(227812606,32,FLEN)
NAN_BOXED(2757109462,32,FLEN)
NAN_BOXED(227812606,32,FLEN)
NAN_BOXED(2757109462,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(697378751,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(697378751,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(697378751,32,FLEN)
NAN_BOXED(146661928,32,FLEN)
NAN_BOXED(697378751,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 32*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
