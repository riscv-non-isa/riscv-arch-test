
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rd == rs2 == rs3 != rs1, rs1==f30, rs2==f18, rs3==f18, rd==f18,fs1 == 0 and fe1 == 0xf3 and fm1 == 0x319f1b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x376ad3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e85b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f18; op3:f18; dest:f18; op1val:0x79b19f1b; op2val:0x44b76ad3;
op3val:0x44b76ad3; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f18, f30, f18, f18, dyn, 96, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f28, rs2==f28, rs3==f13, rd==f8,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c1d45 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x038dbf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30e48e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f28; op2:f28; op3:f13; dest:f8; op1val:0x7cac1d45; op2val:0x7cac1d45;
op3val:0x7f30e48e; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f8, f28, f28, f13, dyn, 96, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f16, rs2==f17, rs3==f11, rd==f11,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2e9fe8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4b6f55 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0ac4bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f16; op2:f17; op3:f11; dest:f11; op1val:0x7cae9fe8; op2val:0x414b6f55;
op3val:0x7e8ac4bf; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f11, f16, f17, f11, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f27, rs2==f2, rs3==f2, rd==f28,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x39031d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x4d83ab and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1486a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f27; op2:f2; op3:f2; dest:f28; op1val:0x7cb9031d; op2val:0x41cd83ab;
op3val:0x41cd83ab; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f28, f27, f2, f2, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f12, rs2==f23, rs3==f7, rd==f12,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3b3e27 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ecfa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x49c32f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f12; op2:f23; op3:f7; dest:f12; op1val:0x7cbb3e27; op2val:0x4189ecfa;
op3val:0x7ec9c32f; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f12, f12, f23, f7, dyn, 96, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f15, rs2==f19, rs3==f8, rd==f2,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x45b82c and fs2 == 0 and fe2 == 0x83 and fm2 == 0x06ed1d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x506b12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f15; op2:f19; op3:f8; dest:f2; op1val:0x7cc5b82c; op2val:0x4186ed1d;
op3val:0x7ed06b12; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f2, f15, f19, f8, dyn, 96, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f23, rs2==f30, rs3==f3, rd==f30,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x48fcb3 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x298476 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0516d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f23; op2:f30; op3:f3; dest:f30; op1val:0x7cc8fcb3; op2val:0x40a98476;
op3val:0x7e0516d1; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f30, f23, f30, f3, dyn, 96, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 == rd != rs3, rs1==f7, rs2==f7, rs3==f0, rd==f7,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x49296d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x336a25 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0cfb60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f7; op2:f7; op3:f0; dest:f7; op1val:0x7cc9296d; op2val:0x7cc9296d;
op3val:0x7e8cfb60; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f7, f7, f7, f0, dyn, 96, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f17, rs2==f22, rs3==f17, rd==f15,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x74f85a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x184854 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11b8ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f17; op2:f22; op3:f17; dest:f15; op1val:0x7cf4f85a; op2val:0x41984854;
op3val:0x7cf4f85a; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f15, f17, f22, f17, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f29, rs2==f24, rs3==f29, rd==f29,fs1 == 0 and fe1 == 0xfa and fm1 == 0x255773 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7b6dc7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2263a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f29; op2:f24; op3:f29; dest:f29; op1val:0x7d255773; op2val:0x40fb6dc7;
op3val:0x7d255773; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f29, f29, f24, f29, dyn, 96, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 != rd, rs1==f14, rs2==f14, rs3==f14, rd==f23,fs1 == 0 and fe1 == 0xfa and fm1 == 0x43983d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x491608 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19a35e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f14; op2:f14; op3:f14; dest:f23; op1val:0x7d43983d; op2val:0x7d43983d;
op3val:0x7d43983d; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f23, f14, f14, f14, dyn, 96, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 == rd, rs1==f9, rs2==f9, rs3==f9, rd==f9,fs1 == 0 and fe1 == 0xfa and fm1 == 0x512a61 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x1b3a11 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7da835 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f9; op2:f9; op3:f9; dest:f9; op1val:0x7d512a61; op2val:0x7d512a61;
op3val:0x7d512a61; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f9, f9, f9, f9, dyn, 96, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f4, rs2==f3, rs3==f25, rd==f26,fs1 == 0 and fe1 == 0xfa and fm1 == 0x633d35 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x611178 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x47c84e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f4; op2:f3; op3:f25; dest:f26; op1val:0x7d633d35; op2val:0x40e11178;
op3val:0x7ec7c84e; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f26, f4, f3, f25, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f2, rs2==f4, rs3==f30, rd==f13,fs1 == 0 and fe1 == 0xfb and fm1 == 0x0052ab and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6cc2eb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6d5bd5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f2; op2:f4; op3:f30; dest:f13; op1val:0x7d8052ab; op2val:0x40ecc2eb;
op3val:0x7eed5bd5; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f13, f2, f4, f30, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f13, rs2==f8, rs3==f10, rd==f20,fs1 == 0 and fe1 == 0xfb and fm1 == 0x038c5d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x1883f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1cbe4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f13; op2:f8; op3:f10; dest:f20; op1val:0x7d838c5d; op2val:0x411883f4;
op3val:0x7f1cbe4b; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f20, f13, f8, f10, dyn, 96, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f21, rs2==f15, rs3==f24, rd==f25,fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f0e02 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x097bec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19a77e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f21; op2:f15; op3:f24; dest:f25; op1val:0x7d8f0e02; op2val:0x41097bec;
op3val:0x7f19a77e; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f25, f21, f15, f24, dyn, 96, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f10, rs2==f29, rs3==f28, rd==f1,fs1 == 0 and fe1 == 0xfb and fm1 == 0x0fe409 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4b5f3b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x649eb5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f10; op2:f29; op3:f28; dest:f1; op1val:0x7d8fe409; op2val:0x40cb5f3b;
op3val:0x7ee49eb5; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f1, f10, f29, f28, dyn, 96, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f25, rs2==f12, rs3==f4, rd==f14,fs1 == 0 and fe1 == 0xfb and fm1 == 0x100bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x068d67 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x176ba2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f25; op2:f12; op3:f4; dest:f14; op1val:0x7d900bf1; op2val:0x40068d67;
op3val:0x7e176ba2; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f14, f25, f12, f4, dyn, 96, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f18, rs2==f6, rs3==f23, rd==f10,fs1 == 0 and fe1 == 0xfb and fm1 == 0x19d31d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x6aee21 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0d2a0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f18; op2:f6; op3:f23; dest:f10; op1val:0x7d99d31d; op2val:0x406aee21;
op3val:0x7e8d2a0f; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f10, f18, f6, f23, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f22, rs2==f16, rs3==f5, rd==f3,fs1 == 0 and fe1 == 0xfb and fm1 == 0x19d68e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x674db3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0aff4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f22; op2:f16; op3:f5; dest:f3; op1val:0x7d99d68e; op2val:0x40674db3;
op3val:0x7e8aff4b; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f3, f22, f16, f5, dyn, 96, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f0, rs2==f25, rs3==f21, rd==f22,fs1 == 0 and fe1 == 0xfb and fm1 == 0x21f156 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x43f0a5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x77e620 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f0; op2:f25; op3:f21; dest:f22; op1val:0x7da1f156; op2val:0x40c3f0a5;
op3val:0x7ef7e620; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f22, f0, f25, f21, dyn, 96, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f8, rs2==f5, rs3==f26, rd==f6,fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c3fe4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4d0748 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x09f410 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f8; op2:f5; op3:f26; dest:f6; op1val:0x7dac3fe4; op2val:0x40cd0748;
op3val:0x7f09f410; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f6, f8, f5, f26, dyn, 96, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f6, rs2==f21, rs3==f31, rd==f27,fs1 == 0 and fe1 == 0xfb and fm1 == 0x300384 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x468f57 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x088546 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f6; op2:f21; op3:f31; dest:f27; op1val:0x7db00384; op2val:0x40c68f57;
op3val:0x7f088546; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f27, f6, f21, f31, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f11, rs2==f20, rs3==f1, rd==f31,fs1 == 0 and fe1 == 0xfb and fm1 == 0x337137 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3588f6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e7e1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f11; op2:f20; op3:f1; dest:f31; op1val:0x7db37137; op2val:0x40b588f6;
op3val:0x7efe7e1b; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f11, f20, f1, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f24, rs2==f13, rs3==f6, rd==f16,fs1 == 0 and fe1 == 0xfb and fm1 == 0x33e534 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0192c8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x361b4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f24; op2:f13; op3:f6; dest:f16; op1val:0x7db3e534; op2val:0x410192c8;
op3val:0x7f361b4b; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f16, f24, f13, f6, dyn, 96, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f3, rs2==f11, rs3==f20, rd==f0,fs1 == 0 and fe1 == 0xfb and fm1 == 0x3868e1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6f4b41 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2c6020 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f3; op2:f11; op3:f20; dest:f0; op1val:0x7db868e1; op2val:0x3f6f4b41;
op3val:0x7dac6020; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f0, f3, f11, f20, dyn, 96, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f26, rs2==f31, rs3==f22, rd==f17,fs1 == 0 and fe1 == 0xfb and fm1 == 0x3db054 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x18ba96 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6255e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f26; op2:f31; op3:f22; dest:f17; op1val:0x7dbdb054; op2val:0x4098ba96;
op3val:0x7ee255e7; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f17, f26, f31, f22, dyn, 96, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f5, rs2==f26, rs3==f27, rd==f24,fs1 == 0 and fe1 == 0xfb and fm1 == 0x42d171 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7c4426 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3ffa07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f5; op2:f26; op3:f27; dest:f24; op1val:0x7dc2d171; op2val:0x40fc4426;
op3val:0x7f3ffa07; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f24, f5, f26, f27, dyn, 96, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f19, rs2==f10, rs3==f15, rd==f4,fs1 == 0 and fe1 == 0xfb and fm1 == 0x431508 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x51cb43 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1fdf11 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f19; op2:f10; op3:f15; dest:f4; op1val:0x7dc31508; op2val:0x40d1cb43;
op3val:0x7f1fdf11; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f4, f19, f10, f15, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f31, rs2==f1, rs3==f16, rd==f5,fs1 == 0 and fe1 == 0xfb and fm1 == 0x4b55e5 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x4aac55 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20faa9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f31; op2:f1; op3:f16; dest:f5; op1val:0x7dcb55e5; op2val:0x404aac55;
op3val:0x7ea0faa9; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f5, f31, f1, f16, dyn, 96, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f1, rs2==f0, rs3==f12, rd==f21,fs1 == 0 and fe1 == 0xfb and fm1 == 0x521565 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x4fc576 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2a8159 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f1; op2:f0; op3:f12; dest:f21; op1val:0x7dd21565; op2val:0x40cfc576;
op3val:0x7f2a8159; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f21, f1, f0, f12, dyn, 96, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f20,fs1 == 0 and fe1 == 0xfb and fm1 == 0x528ae7 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5c3da9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x352215 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f20; op2:f21; op3:f5; dest:f3; op1val:0x7dd28ae7; op2val:0x40dc3da9;
op3val:0x7f352215; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f3, f20, f21, f5, dyn, 96, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// rs2==f27,fs1 == 0 and fe1 == 0xfb and fm1 == 0x561e0c and fs2 == 0 and fe2 == 0x7b and fm2 == 0x106484 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7189f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f20; op2:f27; op3:f6; dest:f31; op1val:0x7dd61e0c; op2val:0x3d906484;
op3val:0x7bf189f3; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f20, f27, f6, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// rs3==f19,fs1 == 0 and fe1 == 0xfb and fm1 == 0x5ea80c and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0a19f7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x703a58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f11; op2:f13; op3:f19; dest:f8; op1val:0x7ddea80c; op2val:0x408a19f7;
op3val:0x7ef03a58; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f8, f11, f13, f19, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// rd==f19,fs1 == 0 and fe1 == 0xfb and fm1 == 0x66dc85 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6fe8a0 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5859a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f10; op2:f29; op3:f23; dest:f19; op1val:0x7de6dc85; op2val:0x3fefe8a0;
op3val:0x7e5859a9; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f19, f10, f29, f23, dyn, 96, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x67f048 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x70ec94 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5a479c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de7f048; op2val:0x4070ec94;
op3val:0x7eda479c; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7aa684 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x784242 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x731230 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfaa684; op2val:0x3ff84242;
op3val:0x7e731230; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c19fa and fs2 == 0 and fe2 == 0x80 and fm2 == 0x73e479 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x702da8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc19fa; op2val:0x4073e479;
op3val:0x7ef02da8; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017e79 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x7b0813 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7df62e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017e79; op2val:0x407b0813;
op3val:0x7efdf62e; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0431c2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x022039 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0663d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0431c2; op2val:0x3e022039;
op3val:0x7c8663d1; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0ba7c1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2bf5fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3b9e80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0ba7c1; op2val:0x40abf5fd;
op3val:0x7f3b9e80; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x107f0d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5d489c and fs3 == 0 and fe3 == 0xfc and fm3 == 0x79cd55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e107f0d; op2val:0x3fdd489c;
op3val:0x7e79cd55; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13f0eb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x1d617d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x35e62e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13f0eb; op2val:0x409d617d;
op3val:0x7f35e62e; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x14365e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3798bb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x549695 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e14365e; op2val:0x403798bb;
op3val:0x7ed49695; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a457f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x50d100 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7bacd4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a457f; op2val:0x4050d100;
op3val:0x7efbacd4; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21311f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x03f6ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x262efb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21311f; op2val:0x4083f6ba;
op3val:0x7f262efb; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2a2f80 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x22e85e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x589913 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2a2f80; op2val:0x4022e85e;
op3val:0x7ed89913; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x389380 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x186b19 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5bc998 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e389380; op2val:0x40186b19;
op3val:0x7edbc998; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43a885 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4e4840 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1da8d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43a885; op2val:0x3fce4840;
op3val:0x7e9da8d4; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4dc6a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x62c78f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3649c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4dc6a7; op2val:0x3fe2c78f;
op3val:0x7eb649c8; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x516e9f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3c33f6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19f7bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e516e9f; op2val:0x403c33f6;
op3val:0x7f19f7bf; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5447d6 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x24f81b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x08cbc1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5447d6; op2val:0x4024f81b;
op3val:0x7f08cbc1; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f5397 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2e726c and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x182ea3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5f5397; op2val:0x3cae726c;
op3val:0x7b982ea3; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x616815 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d6ee4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x34e1fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e616815; op2val:0x3fcd6ee4;
op3val:0x7eb4e1fc; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6fd4df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dc16 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x16b33b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6fd4df; op2val:0x3f20dc16;
op3val:0x7e16b33b; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7fad2c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2ddf2e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2da6ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7fad2c; op2val:0x402ddf2e;
op3val:0x7f2da6ed; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03e545 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6754b2 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x6e5f0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83e545; op2val:0x3e6754b2;
op3val:0x7d6e5f0a; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0a62c0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x25a532 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3315e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8a62c0; op2val:0x4025a532;
op3val:0x7f3315e5; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0aa492 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35bca1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x44d907 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8aa492; op2val:0x3f35bca1;
op3val:0x7e44d907; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0b0329 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x25e82c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x342e39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8b0329; op2val:0x4025e82c;
op3val:0x7f342e39; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e4484 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0fe7df and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1ff244 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e4484; op2val:0x3e0fe7df;
op3val:0x7d1ff244; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f4b27 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0415cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x13dde9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f4b27; op2val:0x400415cd;
op3val:0x7f13dde9; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10ec66 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x03fd1f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x157088 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e90ec66; op2val:0x3f83fd1f;
op3val:0x7e957088; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10f39b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4f4d9f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6ac1db and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e90f39b; op2val:0x3f4f4d9f;
op3val:0x7e6ac1db; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1255c9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x141b63 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x295281 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9255c9; op2val:0x3f941b63;
op3val:0x7ea95281; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x136b51 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x45fd37 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6406cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e936b51; op2val:0x3fc5fd37;
op3val:0x7ee406cc; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x13b96c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x228cd8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3b993a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e93b96c; op2val:0x3e228cd8;
op3val:0x7d3b993a; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x151c59 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x131231 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2b53c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e951c59; op2val:0x3f131231;
op3val:0x7e2b53c0; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x18a4f0 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x209a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3f8620 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e98a4f0; op2val:0x40209a40;
op3val:0x7f3f8620; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x18f0ab and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1cd557 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3b643a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e98f0ab; op2val:0x3f9cd557;
op3val:0x7ebb643a; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1d149a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x571bda and fs3 == 0 and fe3 == 0xfb and fm3 == 0x03fd65 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9d149a; op2val:0x3e571bda;
op3val:0x7d83fd65; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2a4148 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x696e25 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x1b3eab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaa4148; op2val:0x3ee96e25;
op3val:0x7e1b3eab; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2bb8f9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6dee41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f9a10 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eabb8f9; op2val:0x3fedee41;
op3val:0x7f1f9a10; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2c8d9d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0221ad and fs3 == 0 and fe3 == 0xfa and fm3 == 0x2f6d3b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eac8d9d; op2val:0x3e0221ad;
op3val:0x7d2f6d3b; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6385 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x037a19 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x321940 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead6385; op2val:0x40037a19;
op3val:0x7f321940; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31ae90 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x78da00 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2cb86b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1ae90; op2val:0x3ff8da00;
op3val:0x7f2cb86b; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3493df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4ecb22 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11de47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb493df; op2val:0x3fcecb22;
op3val:0x7f11de47; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d648 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3fcdc7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x077d3c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d648; op2val:0x3fbfcdc7;
op3val:0x7f077d3c; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37c24b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x182086 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5a656b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7c24b; op2val:0x3e982086;
op3val:0x7dda656b; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x387cb7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0ff35d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4f7a18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb87cb7; op2val:0x3f0ff35d;
op3val:0x7e4f7a18; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x39c1fe and fs2 == 0 and fe2 == 0x7d and fm2 == 0x122c1f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x54214e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb9c1fe; op2val:0x3e922c1f;
op3val:0x7dd4214e; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a40d7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0a1548 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x48ecdf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba40d7; op2val:0x3f0a1548;
op3val:0x7e48ecdf; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b4351 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc9e9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16889a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb4351; op2val:0x3fcdc9e9;
op3val:0x7f16889a; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ccf7c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7421c1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x340ea8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebccf7c; op2val:0x3f7421c1;
op3val:0x7eb40ea8; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de659 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1bacb3 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x66f527 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde659; op2val:0x3e1bacb3;
op3val:0x7d66f527; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4eb58d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x222e36 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x02f434 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eceb58d; op2val:0x3fa22e36;
op3val:0x7f02f434; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5218a0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x592123 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x323212 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed218a0; op2val:0x3f592123;
op3val:0x7eb23212; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x539b49 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x19c970 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e3ca1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed39b49; op2val:0x3f99c970;
op3val:0x7efe3ca1; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58669e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0e6227 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x70b7c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8669e; op2val:0x3f8e6227;
op3val:0x7ef0b7c8; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5913e5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x50d3e6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3113d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed913e5; op2val:0x3fd0d3e6;
op3val:0x7f3113d9; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x623c76 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1be23d and fs3 == 0 and fe3 == 0xfb and fm3 == 0x09c28b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee23c76; op2val:0x3e1be23d;
op3val:0x7d89c28b; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x62d797 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6ccffe and fs3 == 0 and fe3 == 0xfc and fm3 == 0x51d70d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee2d797; op2val:0x3eeccffe;
op3val:0x7e51d70d; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6368b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c69af and fs3 == 0 and fe3 == 0xfc and fm3 == 0x43cbe1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee368b9; op2val:0x3edc69af;
op3val:0x7e43cbe1; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x671228 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0177d2 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x69b89c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee71228; op2val:0x3f0177d2;
op3val:0x7e69b89c; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x679066 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x07e51c and fs3 == 0 and fe3 == 0xfc and fm3 == 0x75d8c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee79066; op2val:0x3f07e51c;
op3val:0x7e75d8c6; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x68ed41 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x738f77 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5d9bbd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee8ed41; op2val:0x3e738f77;
op3val:0x7ddd9bbd; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b8edc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x302841 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x221741 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb8edc; op2val:0x3f302841;
op3val:0x7ea21741; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e2e8d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7cb106 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6b1a87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eee2e8d; op2val:0x3efcb106;
op3val:0x7e6b1a87; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7127a3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1eb06b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x157ca7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef127a3; op2val:0x3e1eb06b;
op3val:0x7d957ca7; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x719c9d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0eaeb4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x06a9c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef19c9d; op2val:0x3f8eaeb4;
op3val:0x7f06a9c2; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73cf0f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6acfa3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5fa103 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef3cf0f; op2val:0x3eeacfa3;
op3val:0x7e5fa103; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75363e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56ade2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4da1e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5363e; op2val:0x3f56ade2;
op3val:0x7ecda1e6; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7783fc and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a9790 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05ffb0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef783fc; op2val:0x3f8a9790;
op3val:0x7f05ffb0; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79f86d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x61c0e4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5c6fb2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9f86d; op2val:0x3ee1c0e4;
op3val:0x7e5c6fb2; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d263c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3c7c65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3a6317 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd263c; op2val:0x3fbc7c65;
op3val:0x7f3a6317; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ff572 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3ac415 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3abc62 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efff572; op2val:0x3fbac415;
op3val:0x7f3abc62; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ae82 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x29e1b5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ac951 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ae82; op2val:0x3fa9e1b5;
op3val:0x7f2ac951; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01c7a5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a21b9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0c0d70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01c7a5; op2val:0x3f8a21b9;
op3val:0x7f0c0d70; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x034e7c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x116e22 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x152fe4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f034e7c; op2val:0x3f916e22;
op3val:0x7f152fe4; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0535ac and fs2 == 0 and fe2 == 0x7f and fm2 == 0x11fe69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x17ef92 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0535ac; op2val:0x3f91fe69;
op3val:0x7f17ef92; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060f17 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x12ec96 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x19e100 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060f17; op2val:0x3c92ec96;
op3val:0x7c19e100; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x098b22 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x668bbe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x77bc2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f098b22; op2val:0x3f668bbe;
op3val:0x7ef7bc2c; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b0956 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x18c26e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x25ee48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0b0956; op2val:0x3f98c26e;
op3val:0x7f25ee48; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c2059 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x11387d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1efa7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c2059; op2val:0x3f11387d;
op3val:0x7e9efa7c; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c73a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1fa10c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2f2863 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c73a9; op2val:0x3e1fa10c;
op3val:0x7daf2863; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f4ac6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0870e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x18bdd1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f4ac6; op2val:0x3f0870e2;
op3val:0x7e98bdd1; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f54bf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x36502d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4c2647 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f54bf; op2val:0x3eb6502d;
op3val:0x7e4c2647; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x156314 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x339b9f and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x519e2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f156314; op2val:0x3cb39b9f;
op3val:0x7c519e2f; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1578bb and fs2 == 0 and fe2 == 0x7e and fm2 == 0x130440 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2bad9e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1578bb; op2val:0x3f130440;
op3val:0x7eabad9e; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16332e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x051bd2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1c31d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16332e; op2val:0x3f851bd2;
op3val:0x7f1c31d4; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16fd83 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12dd89 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2d3e7e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16fd83; op2val:0x3e92dd89;
op3val:0x7e2d3e7e; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16fe06 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x393272 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5a76a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16fe06; op2val:0x3f393272;
op3val:0x7eda76a7; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x173551 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0b1967 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2451e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f173551; op2val:0x3e8b1967;
op3val:0x7e2451e9; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17c861 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x712e6f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0eff2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17c861; op2val:0x3f712e6f;
op3val:0x7f0eff2c; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185240 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x049ddd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1dd0ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f185240; op2val:0x3f849ddd;
op3val:0x7f1dd0ae; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18571c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1718df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x33d45e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18571c; op2val:0x3f9718df;
op3val:0x7f33d45e; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18d9d9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x262663 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46685d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18d9d9; op2val:0x3f262663;
op3val:0x7ec6685d; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a3f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a8069 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03a707 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a3f02; op2val:0x3f5a8069;
op3val:0x7f03a707; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a82a0 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4dc01c and fs3 == 0 and fe3 == 0xfc and fm3 == 0x785d1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a82a0; op2val:0x3ecdc01c;
op3val:0x7e785d1b; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a849e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0d9f1b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2af628 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a849e; op2val:0x3f0d9f1b;
op3val:0x7eaaf628; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a9574 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28da1a and fs3 == 0 and fe3 == 0xfc and fm3 == 0x4beb8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a9574; op2val:0x3ea8da1a;
op3val:0x7e4beb8f; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a9c08 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6caafe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0eef1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a9c08; op2val:0x3eecaafe;
op3val:0x7e8eef1c; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1aa82d and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1b2701 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3b76c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1aa82d; op2val:0x3f9b2701;
op3val:0x7f3b76c8; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f0a23 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x586415 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x066eba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f0a23; op2val:0x3dd86415;
op3val:0x7d866eba; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fd54d and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ea0e8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1efa19 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fd54d; op2val:0x3d7ea0e8;
op3val:0x7d1efa19; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x221a29 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4b81fb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00dd0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f221a29; op2val:0x3ecb81fb;
op3val:0x7e80dd0d; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23ded1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x156e92 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3f4eee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23ded1; op2val:0x3d956e92;
op3val:0x7d3f4eee; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24c049 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26f4cf and fs3 == 0 and fe3 == 0xfc and fm3 == 0x56e479 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24c049; op2val:0x3ea6f4cf;
op3val:0x7e56e479; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24fad5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x680772 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15881d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24fad5; op2val:0x3f680772;
op3val:0x7f15881d; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28d30c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x323b1d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6b1376 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28d30c; op2val:0x3f323b1d;
op3val:0x7eeb1376; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28f9a2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x18ca47 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x49b378 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f28f9a2; op2val:0x3f18ca47;
op3val:0x7ec9b378; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8337 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x018782 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2d8fd1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8337; op2val:0x3f018782;
op3val:0x7ead8fd1; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7c12 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7864d3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x294ceb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e7c12; op2val:0x3ef864d3;
op3val:0x7ea94ceb; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ea04a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x10dbda and fs3 == 0 and fe3 == 0xfd and fm3 == 0x45a044 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ea04a; op2val:0x3f10dbda;
op3val:0x7ec5a044; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ed4d8 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6bab23 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20f242 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ed4d8; op2val:0x3eebab23;
op3val:0x7ea0f242; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2efd0c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef82d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2e48b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2efd0c; op2val:0x3f7ef82d;
op3val:0x7f2e48b6; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x309a0c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x50c5b9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x100590 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f309a0c; op2val:0x3f50c5b9;
op3val:0x7f100590; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310e27 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0dbfdf and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x4412ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310e27; op2val:0x3d0dbfdf;
op3val:0x7cc412ff; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x313b25 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5093fc and fs3 == 0 and fe3 == 0xfd and fm3 == 0x106682 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f313b25; op2val:0x3ed093fc;
op3val:0x7e906682; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x346ab9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x366217 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x008901 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f346ab9; op2val:0x3db66217;
op3val:0x7d808901; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35fe5b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6b4e05 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2747f5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35fe5b; op2val:0x3eeb4e05;
op3val:0x7ea747f5; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365c6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3cdb59 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x06881f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365c6a; op2val:0x3f3cdb59;
op3val:0x7f06881f; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36a9e2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1e600b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6202c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36a9e2; op2val:0x3f1e600b;
op3val:0x7ee202c3; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3983ab and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6439df and fs3 == 0 and fe3 == 0xfd and fm3 == 0x256335 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3983ab; op2val:0x3ee439df;
op3val:0x7ea56335; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3bca6f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x15c04d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5bb3c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3bca6f; op2val:0x3e95c04d;
op3val:0x7e5bb3c7; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c0464 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6941a6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2b5036 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c0464; op2val:0x3f6941a6;
op3val:0x7f2b5036; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c58cf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x00090a and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3c661c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c58cf; op2val:0x3e80090a;
op3val:0x7e3c661c; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc8a3 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x5057a9 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x19a3aa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3cc8a3; op2val:0x3d5057a9;
op3val:0x7d19a3aa; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ea9e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x454378 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x12eaff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ea9e8; op2val:0x3f454378;
op3val:0x7f12eaff; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f0fcc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x363027 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x07f92b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f0fcc; op2val:0x3f363027;
op3val:0x7f07f92b; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xf3 and fm1 == 0x319f1b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x376ad3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e85b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x79b19f1b; op2val:0x44b76ad3;
op3val:0x7efe85b6; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c1d45 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x038dbf and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30e48e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac1d45; op2val:0x42038dbf;
op3val:0x7f30e48e; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2e9fe8 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x4b6f55 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0ac4bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cae9fe8; op2val:0x414b6f55;
op3val:0x7e8ac4bf; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x39031d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x4d83ab and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1486a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb9031d; op2val:0x41cd83ab;
op3val:0x7f1486a7; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x3b3e27 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x09ecfa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x49c32f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cbb3e27; op2val:0x4189ecfa;
op3val:0x7ec9c32f; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x48fcb3 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x298476 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0516d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc8fcb3; op2val:0x40a98476;
op3val:0x7e0516d1; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x49296d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x336a25 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0cfb60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc9296d; op2val:0x41336a25;
op3val:0x7e8cfb60; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x74f85a and fs2 == 0 and fe2 == 0x83 and fm2 == 0x184854 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11b8ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf4f85a; op2val:0x41984854;
op3val:0x7f11b8ad; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x255773 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7b6dc7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2263a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d255773; op2val:0x40fb6dc7;
op3val:0x7ea263a5; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x43983d and fs2 == 0 and fe2 == 0x82 and fm2 == 0x491608 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x19a35e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d43983d; op2val:0x41491608;
op3val:0x7f19a35e; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x512a61 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x1b3a11 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7da835 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d512a61; op2val:0x3d1b3a11;
op3val:0x7afda835; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 510*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2041683739,32,FLEN)
NAN_BOXED(1152871123,32,FLEN)
NAN_BOXED(1152871123,32,FLEN)
NAN_BOXED(2091654469,32,FLEN)
NAN_BOXED(2091654469,32,FLEN)
NAN_BOXED(2133910670,32,FLEN)
NAN_BOXED(2091818984,32,FLEN)
NAN_BOXED(1095462741,32,FLEN)
NAN_BOXED(2123023551,32,FLEN)
NAN_BOXED(2092499741,32,FLEN)
NAN_BOXED(1103987627,32,FLEN)
NAN_BOXED(1103987627,32,FLEN)
NAN_BOXED(2092645927,32,FLEN)
NAN_BOXED(1099558138,32,FLEN)
NAN_BOXED(2127151919,32,FLEN)
NAN_BOXED(2093332524,32,FLEN)
NAN_BOXED(1099361565,32,FLEN)
NAN_BOXED(2127588114,32,FLEN)
NAN_BOXED(2093546675,32,FLEN)
NAN_BOXED(1084851318,32,FLEN)
NAN_BOXED(2114262737,32,FLEN)
NAN_BOXED(2093558125,32,FLEN)
NAN_BOXED(2093558125,32,FLEN)
NAN_BOXED(2123168608,32,FLEN)
NAN_BOXED(2096429146,32,FLEN)
NAN_BOXED(1100499028,32,FLEN)
NAN_BOXED(2096429146,32,FLEN)
NAN_BOXED(2099599219,32,FLEN)
NAN_BOXED(1090219463,32,FLEN)
NAN_BOXED(2099599219,32,FLEN)
NAN_BOXED(2101581885,32,FLEN)
NAN_BOXED(2101581885,32,FLEN)
NAN_BOXED(2101581885,32,FLEN)
NAN_BOXED(2102471265,32,FLEN)
NAN_BOXED(2102471265,32,FLEN)
NAN_BOXED(2102471265,32,FLEN)
NAN_BOXED(2103655733,32,FLEN)
NAN_BOXED(1088491896,32,FLEN)
NAN_BOXED(2127022158,32,FLEN)
NAN_BOXED(2105561771,32,FLEN)
NAN_BOXED(1089258219,32,FLEN)
NAN_BOXED(2129484757,32,FLEN)
NAN_BOXED(2105773149,32,FLEN)
NAN_BOXED(1092125684,32,FLEN)
NAN_BOXED(2132590155,32,FLEN)
NAN_BOXED(2106527234,32,FLEN)
NAN_BOXED(1091140588,32,FLEN)
NAN_BOXED(2132387710,32,FLEN)
NAN_BOXED(2106582025,32,FLEN)
NAN_BOXED(1087070011,32,FLEN)
NAN_BOXED(2128912053,32,FLEN)
NAN_BOXED(2106592241,32,FLEN)
NAN_BOXED(1074171239,32,FLEN)
NAN_BOXED(2115464098,32,FLEN)
NAN_BOXED(2107233053,32,FLEN)
NAN_BOXED(1080749601,32,FLEN)
NAN_BOXED(2123180559,32,FLEN)
NAN_BOXED(2107233934,32,FLEN)
NAN_BOXED(1080511923,32,FLEN)
NAN_BOXED(2123038539,32,FLEN)
NAN_BOXED(2107765078,32,FLEN)
NAN_BOXED(1086582949,32,FLEN)
NAN_BOXED(2130175520,32,FLEN)
NAN_BOXED(2108440548,32,FLEN)
NAN_BOXED(1087178568,32,FLEN)
NAN_BOXED(2131358736,32,FLEN)
NAN_BOXED(2108687236,32,FLEN)
NAN_BOXED(1086754647,32,FLEN)
NAN_BOXED(2131264838,32,FLEN)
NAN_BOXED(2108911927,32,FLEN)
NAN_BOXED(1085638902,32,FLEN)
NAN_BOXED(2130607643,32,FLEN)
NAN_BOXED(2108941620,32,FLEN)
NAN_BOXED(1090622152,32,FLEN)
NAN_BOXED(2134252363,32,FLEN)
NAN_BOXED(2109237473,32,FLEN)
NAN_BOXED(1064258369,32,FLEN)
NAN_BOXED(2108448800,32,FLEN)
NAN_BOXED(2109583444,32,FLEN)
NAN_BOXED(1083751062,32,FLEN)
NAN_BOXED(2128762343,32,FLEN)
NAN_BOXED(2109919601,32,FLEN)
NAN_BOXED(1090274342,32,FLEN)
NAN_BOXED(2134899207,32,FLEN)
NAN_BOXED(2109936904,32,FLEN)
NAN_BOXED(1087490883,32,FLEN)
NAN_BOXED(2132795153,32,FLEN)
NAN_BOXED(2110477797,32,FLEN)
NAN_BOXED(1078635605,32,FLEN)
NAN_BOXED(2124479145,32,FLEN)
NAN_BOXED(2110920037,32,FLEN)
NAN_BOXED(1087358326,32,FLEN)
NAN_BOXED(2133492057,32,FLEN)
NAN_BOXED(2110950119,32,FLEN)
NAN_BOXED(1088175529,32,FLEN)
NAN_BOXED(2134188565,32,FLEN)
NAN_BOXED(2111184396,32,FLEN)
NAN_BOXED(1032873092,32,FLEN)
NAN_BOXED(2079427059,32,FLEN)
NAN_BOXED(2111744012,32,FLEN)
NAN_BOXED(1082792439,32,FLEN)
NAN_BOXED(2129672792,32,FLEN)
NAN_BOXED(2112281733,32,FLEN)
NAN_BOXED(1072687264,32,FLEN)
NAN_BOXED(2119719337,32,FLEN)
NAN_BOXED(2112352328,32,FLEN)
NAN_BOXED(1081142420,32,FLEN)
NAN_BOXED(2128234396,32,FLEN)
NAN_BOXED(2113578628,32,FLEN)
NAN_BOXED(1073234498,32,FLEN)
NAN_BOXED(2121470512,32,FLEN)
NAN_BOXED(2113673722,32,FLEN)
NAN_BOXED(1081336953,32,FLEN)
NAN_BOXED(2129669544,32,FLEN)
NAN_BOXED(2114027129,32,FLEN)
NAN_BOXED(1081804819,32,FLEN)
NAN_BOXED(2130572846,32,FLEN)
NAN_BOXED(2114204098,32,FLEN)
NAN_BOXED(1040326713,32,FLEN)
NAN_BOXED(2089182161,32,FLEN)
NAN_BOXED(2114693057,32,FLEN)
NAN_BOXED(1085011453,32,FLEN)
NAN_BOXED(2134613632,32,FLEN)
NAN_BOXED(2115010317,32,FLEN)
NAN_BOXED(1071466652,32,FLEN)
NAN_BOXED(2121911637,32,FLEN)
NAN_BOXED(2115236075,32,FLEN)
NAN_BOXED(1084055933,32,FLEN)
NAN_BOXED(2134238766,32,FLEN)
NAN_BOXED(2115253854,32,FLEN)
NAN_BOXED(1077385403,32,FLEN)
NAN_BOXED(2127861397,32,FLEN)
NAN_BOXED(2115650943,32,FLEN)
NAN_BOXED(1079038208,32,FLEN)
NAN_BOXED(2130422996,32,FLEN)
NAN_BOXED(2116104479,32,FLEN)
NAN_BOXED(1082390202,32,FLEN)
NAN_BOXED(2133208827,32,FLEN)
NAN_BOXED(2116693888,32,FLEN)
NAN_BOXED(1076029534,32,FLEN)
NAN_BOXED(2128124179,32,FLEN)
NAN_BOXED(2117636992,32,FLEN)
NAN_BOXED(1075342105,32,FLEN)
NAN_BOXED(2128333208,32,FLEN)
NAN_BOXED(2118363269,32,FLEN)
NAN_BOXED(1070483520,32,FLEN)
NAN_BOXED(2124261588,32,FLEN)
NAN_BOXED(2119026343,32,FLEN)
NAN_BOXED(1071826831,32,FLEN)
NAN_BOXED(2125875656,32,FLEN)
NAN_BOXED(2119265951,32,FLEN)
NAN_BOXED(1077687286,32,FLEN)
NAN_BOXED(2132408255,32,FLEN)
NAN_BOXED(2119452630,32,FLEN)
NAN_BOXED(1076164635,32,FLEN)
NAN_BOXED(2131282881,32,FLEN)
NAN_BOXED(2120176535,32,FLEN)
NAN_BOXED(1018065516,32,FLEN)
NAN_BOXED(2073570979,32,FLEN)
NAN_BOXED(2120312853,32,FLEN)
NAN_BOXED(1070427876,32,FLEN)
NAN_BOXED(2125783548,32,FLEN)
NAN_BOXED(2121258207,32,FLEN)
NAN_BOXED(1059118102,32,FLEN)
NAN_BOXED(2115416891,32,FLEN)
NAN_BOXED(2122296620,32,FLEN)
NAN_BOXED(1076748078,32,FLEN)
NAN_BOXED(2133698285,32,FLEN)
NAN_BOXED(2122573125,32,FLEN)
NAN_BOXED(1046959282,32,FLEN)
NAN_BOXED(2104385290,32,FLEN)
NAN_BOXED(2122998464,32,FLEN)
NAN_BOXED(1076208946,32,FLEN)
NAN_BOXED(2134054373,32,FLEN)
NAN_BOXED(2123015314,32,FLEN)
NAN_BOXED(1060486305,32,FLEN)
NAN_BOXED(2118441223,32,FLEN)
NAN_BOXED(2123039529,32,FLEN)
NAN_BOXED(1076226092,32,FLEN)
NAN_BOXED(2134126137,32,FLEN)
NAN_BOXED(2123252868,32,FLEN)
NAN_BOXED(1041229791,32,FLEN)
NAN_BOXED(2099245636,32,FLEN)
NAN_BOXED(2123320103,32,FLEN)
NAN_BOXED(1074009549,32,FLEN)
NAN_BOXED(2132008425,32,FLEN)
NAN_BOXED(2123426918,32,FLEN)
NAN_BOXED(1065614623,32,FLEN)
NAN_BOXED(2123722888,32,FLEN)
NAN_BOXED(2123428763,32,FLEN)
NAN_BOXED(1062161823,32,FLEN)
NAN_BOXED(2120925659,32,FLEN)
NAN_BOXED(2123519433,32,FLEN)
NAN_BOXED(1066670947,32,FLEN)
NAN_BOXED(2125025921,32,FLEN)
NAN_BOXED(2123590481,32,FLEN)
NAN_BOXED(1069940023,32,FLEN)
NAN_BOXED(2128873164,32,FLEN)
NAN_BOXED(2123610476,32,FLEN)
NAN_BOXED(1042451672,32,FLEN)
NAN_BOXED(2101057850,32,FLEN)
NAN_BOXED(2123701337,32,FLEN)
NAN_BOXED(1058214449,32,FLEN)
NAN_BOXED(2116768704,32,FLEN)
NAN_BOXED(2123932912,32,FLEN)
NAN_BOXED(1075878464,32,FLEN)
NAN_BOXED(2134869536,32,FLEN)
NAN_BOXED(2123952299,32,FLEN)
NAN_BOXED(1067242839,32,FLEN)
NAN_BOXED(2126210106,32,FLEN)
NAN_BOXED(2124223642,32,FLEN)
NAN_BOXED(1045896154,32,FLEN)
NAN_BOXED(2105802085,32,FLEN)
NAN_BOXED(2125087048,32,FLEN)
NAN_BOXED(1055485477,32,FLEN)
NAN_BOXED(2115714731,32,FLEN)
NAN_BOXED(2125183225,32,FLEN)
NAN_BOXED(1072557633,32,FLEN)
NAN_BOXED(2132777488,32,FLEN)
NAN_BOXED(2125237661,32,FLEN)
NAN_BOXED(1040327085,32,FLEN)
NAN_BOXED(2100260155,32,FLEN)
NAN_BOXED(2125292421,32,FLEN)
NAN_BOXED(1073969689,32,FLEN)
NAN_BOXED(2133989696,32,FLEN)
NAN_BOXED(2125573776,32,FLEN)
NAN_BOXED(1073273344,32,FLEN)
NAN_BOXED(2133637227,32,FLEN)
NAN_BOXED(2125763551,32,FLEN)
NAN_BOXED(1070517026,32,FLEN)
NAN_BOXED(2131877447,32,FLEN)
NAN_BOXED(2125780552,32,FLEN)
NAN_BOXED(1069534663,32,FLEN)
NAN_BOXED(2131197244,32,FLEN)
NAN_BOXED(2125972043,32,FLEN)
NAN_BOXED(1050157190,32,FLEN)
NAN_BOXED(2111464811,32,FLEN)
NAN_BOXED(2126019767,32,FLEN)
NAN_BOXED(1058009949,32,FLEN)
NAN_BOXED(2119137816,32,FLEN)
NAN_BOXED(2126103038,32,FLEN)
NAN_BOXED(1049766943,32,FLEN)
NAN_BOXED(2111054158,32,FLEN)
NAN_BOXED(2126135511,32,FLEN)
NAN_BOXED(1057625416,32,FLEN)
NAN_BOXED(2118708447,32,FLEN)
NAN_BOXED(2126201681,32,FLEN)
NAN_BOXED(1070451177,32,FLEN)
NAN_BOXED(2132183194,32,FLEN)
NAN_BOXED(2126303100,32,FLEN)
NAN_BOXED(1064575425,32,FLEN)
NAN_BOXED(2125729448,32,FLEN)
NAN_BOXED(2126374489,32,FLEN)
NAN_BOXED(1042001075,32,FLEN)
NAN_BOXED(2103899431,32,FLEN)
NAN_BOXED(2127476109,32,FLEN)
NAN_BOXED(1067593270,32,FLEN)
NAN_BOXED(2130900020,32,FLEN)
NAN_BOXED(2127698080,32,FLEN)
NAN_BOXED(1062805795,32,FLEN)
NAN_BOXED(2125607442,32,FLEN)
NAN_BOXED(2127797065,32,FLEN)
NAN_BOXED(1067043184,32,FLEN)
NAN_BOXED(2130590881,32,FLEN)
NAN_BOXED(2128111262,32,FLEN)
NAN_BOXED(1066295847,32,FLEN)
NAN_BOXED(2129704904,32,FLEN)
NAN_BOXED(2128155621,32,FLEN)
NAN_BOXED(1070650342,32,FLEN)
NAN_BOXED(2133922777,32,FLEN)
NAN_BOXED(2128755830,32,FLEN)
NAN_BOXED(1042014781,32,FLEN)
NAN_BOXED(2106180235,32,FLEN)
NAN_BOXED(2128795543,32,FLEN)
NAN_BOXED(1055707134,32,FLEN)
NAN_BOXED(2119292685,32,FLEN)
NAN_BOXED(2128832697,32,FLEN)
NAN_BOXED(1054632367,32,FLEN)
NAN_BOXED(2118372321,32,FLEN)
NAN_BOXED(2129072680,32,FLEN)
NAN_BOXED(1057060818,32,FLEN)
NAN_BOXED(2120857756,32,FLEN)
NAN_BOXED(2129104998,32,FLEN)
NAN_BOXED(1057482012,32,FLEN)
NAN_BOXED(2121652422,32,FLEN)
NAN_BOXED(2129194305,32,FLEN)
NAN_BOXED(1047760759,32,FLEN)
NAN_BOXED(2111675325,32,FLEN)
NAN_BOXED(2129366748,32,FLEN)
NAN_BOXED(1060120641,32,FLEN)
NAN_BOXED(2124552001,32,FLEN)
NAN_BOXED(2129538701,32,FLEN)
NAN_BOXED(1056747782,32,FLEN)
NAN_BOXED(2120948359,32,FLEN)
NAN_BOXED(2129733539,32,FLEN)
NAN_BOXED(1042198635,32,FLEN)
NAN_BOXED(2106948775,32,FLEN)
NAN_BOXED(2129763485,32,FLEN)
NAN_BOXED(1066315444,32,FLEN)
NAN_BOXED(2131143106,32,FLEN)
NAN_BOXED(2129907471,32,FLEN)
NAN_BOXED(1055575971,32,FLEN)
NAN_BOXED(2120196355,32,FLEN)
NAN_BOXED(2129999422,32,FLEN)
NAN_BOXED(1062645218,32,FLEN)
NAN_BOXED(2127405542,32,FLEN)
NAN_BOXED(2130150396,32,FLEN)
NAN_BOXED(1066047376,32,FLEN)
NAN_BOXED(2131099568,32,FLEN)
NAN_BOXED(2130311277,32,FLEN)
NAN_BOXED(1054982372,32,FLEN)
NAN_BOXED(2119987122,32,FLEN)
NAN_BOXED(2130519612,32,FLEN)
NAN_BOXED(1069317221,32,FLEN)
NAN_BOXED(2134532887,32,FLEN)
NAN_BOXED(2130703730,32,FLEN)
NAN_BOXED(1069204501,32,FLEN)
NAN_BOXED(2134555746,32,FLEN)
NAN_BOXED(2130751106,32,FLEN)
NAN_BOXED(1068097973,32,FLEN)
NAN_BOXED(2133510481,32,FLEN)
NAN_BOXED(2130823077,32,FLEN)
NAN_BOXED(1066017209,32,FLEN)
NAN_BOXED(2131496304,32,FLEN)
NAN_BOXED(2130923132,32,FLEN)
NAN_BOXED(1066495522,32,FLEN)
NAN_BOXED(2132094948,32,FLEN)
NAN_BOXED(2131047852,32,FLEN)
NAN_BOXED(1066532457,32,FLEN)
NAN_BOXED(2132275090,32,FLEN)
NAN_BOXED(2131103511,32,FLEN)
NAN_BOXED(1016261782,32,FLEN)
NAN_BOXED(2082070784,32,FLEN)
NAN_BOXED(2131331874,32,FLEN)
NAN_BOXED(1063685054,32,FLEN)
NAN_BOXED(2130164780,32,FLEN)
NAN_BOXED(2131429718,32,FLEN)
NAN_BOXED(1066975854,32,FLEN)
NAN_BOXED(2133192264,32,FLEN)
NAN_BOXED(2131501145,32,FLEN)
NAN_BOXED(1058093181,32,FLEN)
NAN_BOXED(2124348028,32,FLEN)
NAN_BOXED(2131522473,32,FLEN)
NAN_BOXED(1042260236,32,FLEN)
NAN_BOXED(2108631139,32,FLEN)
NAN_BOXED(2131708614,32,FLEN)
NAN_BOXED(1057517794,32,FLEN)
NAN_BOXED(2123939281,32,FLEN)
NAN_BOXED(2131711167,32,FLEN)
NAN_BOXED(1052135469,32,FLEN)
NAN_BOXED(2118919751,32,FLEN)
NAN_BOXED(2132108052,32,FLEN)
NAN_BOXED(1018403743,32,FLEN)
NAN_BOXED(2085723695,32,FLEN)
NAN_BOXED(2132113595,32,FLEN)
NAN_BOXED(1058210880,32,FLEN)
NAN_BOXED(2125180318,32,FLEN)
NAN_BOXED(2132161326,32,FLEN)
NAN_BOXED(1065688018,32,FLEN)
NAN_BOXED(2132554196,32,FLEN)
NAN_BOXED(2132213123,32,FLEN)
NAN_BOXED(1049812361,32,FLEN)
NAN_BOXED(2116894334,32,FLEN)
NAN_BOXED(2132213254,32,FLEN)
NAN_BOXED(1060713074,32,FLEN)
NAN_BOXED(2128246439,32,FLEN)
NAN_BOXED(2132227409,32,FLEN)
NAN_BOXED(1049303399,32,FLEN)
NAN_BOXED(2116309481,32,FLEN)
NAN_BOXED(2132265057,32,FLEN)
NAN_BOXED(1064382063,32,FLEN)
NAN_BOXED(2131689260,32,FLEN)
NAN_BOXED(2132300352,32,FLEN)
NAN_BOXED(1065655773,32,FLEN)
NAN_BOXED(2132660398,32,FLEN)
NAN_BOXED(2132301596,32,FLEN)
NAN_BOXED(1066866911,32,FLEN)
NAN_BOXED(2134103134,32,FLEN)
NAN_BOXED(2132335065,32,FLEN)
NAN_BOXED(1059464803,32,FLEN)
NAN_BOXED(2126932061,32,FLEN)
NAN_BOXED(2132426498,32,FLEN)
NAN_BOXED(1062895721,32,FLEN)
NAN_BOXED(2130945799,32,FLEN)
NAN_BOXED(2132443808,32,FLEN)
NAN_BOXED(1053671452,32,FLEN)
NAN_BOXED(2121817371,32,FLEN)
NAN_BOXED(2132444318,32,FLEN)
NAN_BOXED(1057857307,32,FLEN)
NAN_BOXED(2125133352,32,FLEN)
NAN_BOXED(2132448628,32,FLEN)
NAN_BOXED(1051253274,32,FLEN)
NAN_BOXED(2118904719,32,FLEN)
NAN_BOXED(2132450312,32,FLEN)
NAN_BOXED(1055697662,32,FLEN)
NAN_BOXED(2123296540,32,FLEN)
NAN_BOXED(2132453421,32,FLEN)
NAN_BOXED(1067132673,32,FLEN)
NAN_BOXED(2134603464,32,FLEN)
NAN_BOXED(2132740643,32,FLEN)
NAN_BOXED(1037591573,32,FLEN)
NAN_BOXED(2105962170,32,FLEN)
NAN_BOXED(2132792653,32,FLEN)
NAN_BOXED(1031708904,32,FLEN)
NAN_BOXED(2099182105,32,FLEN)
NAN_BOXED(2132941353,32,FLEN)
NAN_BOXED(1053524475,32,FLEN)
NAN_BOXED(2122374413,32,FLEN)
NAN_BOXED(2133057233,32,FLEN)
NAN_BOXED(1033203346,32,FLEN)
NAN_BOXED(2101300974,32,FLEN)
NAN_BOXED(2133114953,32,FLEN)
NAN_BOXED(1051129039,32,FLEN)
NAN_BOXED(2119623801,32,FLEN)
NAN_BOXED(2133129941,32,FLEN)
NAN_BOXED(1063782258,32,FLEN)
NAN_BOXED(2132117533,32,FLEN)
NAN_BOXED(2133381900,32,FLEN)
NAN_BOXED(1060256541,32,FLEN)
NAN_BOXED(2129335158,32,FLEN)
NAN_BOXED(2133391778,32,FLEN)
NAN_BOXED(1058589255,32,FLEN)
NAN_BOXED(2127147896,32,FLEN)
NAN_BOXED(2133558071,32,FLEN)
NAN_BOXED(1057064834,32,FLEN)
NAN_BOXED(2125303761,32,FLEN)
NAN_BOXED(2133752850,32,FLEN)
NAN_BOXED(1056466131,32,FLEN)
NAN_BOXED(2125024491,32,FLEN)
NAN_BOXED(2133762122,32,FLEN)
NAN_BOXED(1058069466,32,FLEN)
NAN_BOXED(2126880836,32,FLEN)
NAN_BOXED(2133775576,32,FLEN)
NAN_BOXED(1055632163,32,FLEN)
NAN_BOXED(2124476994,32,FLEN)
NAN_BOXED(2133785868,32,FLEN)
NAN_BOXED(1065285677,32,FLEN)
NAN_BOXED(2133739702,32,FLEN)
NAN_BOXED(2133891596,32,FLEN)
NAN_BOXED(1062258105,32,FLEN)
NAN_BOXED(2131756432,32,FLEN)
NAN_BOXED(2133921319,32,FLEN)
NAN_BOXED(1024311263,32,FLEN)
NAN_BOXED(2093224703,32,FLEN)
NAN_BOXED(2133932837,32,FLEN)
NAN_BOXED(1053856764,32,FLEN)
NAN_BOXED(2123392642,32,FLEN)
NAN_BOXED(2134141625,32,FLEN)
NAN_BOXED(1035362839,32,FLEN)
NAN_BOXED(2105575681,32,FLEN)
NAN_BOXED(2134244955,32,FLEN)
NAN_BOXED(1055608325,32,FLEN)
NAN_BOXED(2124892149,32,FLEN)
NAN_BOXED(2134269034,32,FLEN)
NAN_BOXED(1060952921,32,FLEN)
NAN_BOXED(2131134495,32,FLEN)
NAN_BOXED(2134288866,32,FLEN)
NAN_BOXED(1058955275,32,FLEN)
NAN_BOXED(2128741059,32,FLEN)
NAN_BOXED(2134475691,32,FLEN)
NAN_BOXED(1055144415,32,FLEN)
NAN_BOXED(2124768053,32,FLEN)
NAN_BOXED(2134624879,32,FLEN)
NAN_BOXED(1050001485,32,FLEN)
NAN_BOXED(2119939015,32,FLEN)
NAN_BOXED(2134639716,32,FLEN)
NAN_BOXED(1063862694,32,FLEN)
NAN_BOXED(2133545014,32,FLEN)
NAN_BOXED(2134661327,32,FLEN)
NAN_BOXED(1048578314,32,FLEN)
NAN_BOXED(2117887516,32,FLEN)
NAN_BOXED(2134689955,32,FLEN)
NAN_BOXED(1028675497,32,FLEN)
NAN_BOXED(2098832298,32,FLEN)
NAN_BOXED(2134813160,32,FLEN)
NAN_BOXED(1061503864,32,FLEN)
NAN_BOXED(2131946239,32,FLEN)
NAN_BOXED(2134839244,32,FLEN)
NAN_BOXED(1060515879,32,FLEN)
NAN_BOXED(2131228971,32,FLEN)
NAN_BOXED(2041683739,32,FLEN)
NAN_BOXED(1152871123,32,FLEN)
NAN_BOXED(2130609590,32,FLEN)
NAN_BOXED(2091654469,32,FLEN)
NAN_BOXED(1107529151,32,FLEN)
NAN_BOXED(2133910670,32,FLEN)
NAN_BOXED(2091818984,32,FLEN)
NAN_BOXED(1095462741,32,FLEN)
NAN_BOXED(2123023551,32,FLEN)
NAN_BOXED(2092499741,32,FLEN)
NAN_BOXED(1103987627,32,FLEN)
NAN_BOXED(2132051623,32,FLEN)
NAN_BOXED(2092645927,32,FLEN)
NAN_BOXED(1099558138,32,FLEN)
NAN_BOXED(2127151919,32,FLEN)
NAN_BOXED(2093546675,32,FLEN)
NAN_BOXED(1084851318,32,FLEN)
NAN_BOXED(2114262737,32,FLEN)
NAN_BOXED(2093558125,32,FLEN)
NAN_BOXED(1093888549,32,FLEN)
NAN_BOXED(2123168608,32,FLEN)
NAN_BOXED(2096429146,32,FLEN)
NAN_BOXED(1100499028,32,FLEN)
NAN_BOXED(2131867821,32,FLEN)
NAN_BOXED(2099599219,32,FLEN)
NAN_BOXED(1090219463,32,FLEN)
NAN_BOXED(2124571557,32,FLEN)
NAN_BOXED(2101581885,32,FLEN)
NAN_BOXED(1095308808,32,FLEN)
NAN_BOXED(2132386654,32,FLEN)
NAN_BOXED(2102471265,32,FLEN)
NAN_BOXED(1025194513,32,FLEN)
NAN_BOXED(2063444021,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 86*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
