
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:32 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fsub_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsub_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==f18, rs2==f18, rd==f21,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x462194 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f18; op2:f18; dest:f21; op1val:0x7c9c56e0; op2val:0x7c9c56e0;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f21, f18, f18, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rd != rs2, rs1==f14, rs2==f11, rd==f14,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x13f4b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f14; op2:f11; dest:f14; op1val:0x7cb26d35; op2val:0xfe13f4b3;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f14, f14, f11, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs2 == rd != rs1, rs1==f13, rs2==f9, rd==f9,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1fe890 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f13; op2:f9; dest:f9; op1val:0x7cd4206e; op2val:0xfe1fe890;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f9, f13, f9, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rd, rs1==f31, rs2==f31, rd==f31,fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7d664b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f31; op2:f31; dest:f31; op1val:0x7d0597cb; op2val:0x7d0597cb;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f31, f31, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f16, rs2==f20, rd==f25,fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x4940d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f16; op2:f20; dest:f25; op1val:0x7d902b16; op2val:0x7d4940d1;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f25, f16, f20, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f21, rs2==f29, rd==f8,fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 1 and fe2 == 0xfc and fm2 == 0x22aa99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f21; op2:f29; dest:f8; op1val:0x7db9afdd; op2val:0xfe22aa99;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f8, f21, f29, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f26, rs2==f13, rd==f12,fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x08e8ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f26; op2:f13; dest:f12; op1val:0x7dce622b; op2val:0xff08e8ca;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f12, f26, f13, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f29, rs2==f2, rd==f0,fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x104dca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f29; op2:f2; dest:f0; op1val:0x7e04dea3; op2val:0xfe904dca;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f0, f29, f2, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f4, rs2==f17, rd==f22,fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1dd651 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f4; op2:f17; dest:f22; op1val:0x7e26592c; op2val:0xfe1dd651;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f22, f4, f17, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f2, rs2==f0, rd==f15,fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x38f39d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f2; op2:f0; dest:f15; op1val:0x7e280619; op2val:0xfe38f39d;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f15, f2, f0, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f5, rs2==f28, rd==f1,fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0991d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f5; op2:f28; dest:f1; op1val:0x7e2fb07b; op2val:0xff0991d2;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f1, f5, f28, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f11, rs2==f14, rd==f23,fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xf5 and fm2 == 0x5a077f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f11; op2:f14; dest:f23; op1val:0x7e330244; op2val:0x7ada077f;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f23, f11, f14, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f22, rs2==f4, rd==f10,fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x560df4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f22; op2:f4; dest:f10; op1val:0x7e4ece7f; op2val:0xfe560df4;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f10, f22, f4, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f27, rs2==f25, rd==f7,fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4e0c55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f27; op2:f25; dest:f7; op1val:0x7e5e8d61; op2val:0x7e4e0c55;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f7, f27, f25, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f28, rs2==f1, rd==f27,fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5a465e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f28; op2:f1; dest:f27; op1val:0x7e68fcac; op2val:0xfe5a465e;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f27, f28, f1, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f0, rs2==f5, rd==f17,fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 1 and fe2 == 0xfa and fm2 == 0x456706 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f0; op2:f5; dest:f17; op1val:0x7e8fe2cd; op2val:0xfd456706;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f17, f0, f5, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f1, rs2==f10, rd==f2,fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b74d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f1; op2:f10; dest:f2; op1val:0x7e97246c; op2val:0x7e2b74d4;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f2, f1, f10, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f7, rs2==f22, rd==f18,fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x31f1cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f7; op2:f22; dest:f18; op1val:0x7ea82619; op2val:0xfd31f1cb;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f18, f7, f22, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f8, rs2==f21, rd==f26,fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5415da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f8; op2:f21; dest:f26; op1val:0x7eab0757; op2val:0xfe5415da;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f26, f8, f21, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f30, rs2==f15, rd==f11,fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x30af7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f15; dest:f11; op1val:0x7ebc0ad4; op2val:0x7eb0af7e;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f11, f30, f15, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f3, rs2==f27, rd==f6,fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0d23d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f3; op2:f27; dest:f6; op1val:0x7ebe3f3f; op2val:0x7d0d23d9;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f6, f3, f27, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f15, rs2==f19, rd==f30,fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x384200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f15; op2:f19; dest:f30; op1val:0x7ec0dc0e; op2val:0xfeb84200;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f30, f15, f19, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f25, rs2==f16, rd==f3,fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 1 and fe2 == 0xfb and fm2 == 0x00976d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f25; op2:f16; dest:f3; op1val:0x7ec2076b; op2val:0xfd80976d;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f3, f25, f16, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f12, rs2==f30, rd==f24,fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 1 and fe2 == 0xfc and fm2 == 0x4f5f54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f12; op2:f30; dest:f24; op1val:0x7ec33c5b; op2val:0xfe4f5f54;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f24, f12, f30, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f20, rs2==f26, rd==f28,fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x28758a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f20; op2:f26; dest:f28; op1val:0x7ec549ce; op2val:0xfea8758a;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f28, f20, f26, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f17, rs2==f24, rd==f13,fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x441f1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f17; op2:f24; dest:f13; op1val:0x7ec80a54; op2val:0x7dc41f1f;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f13, f17, f24, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f9, rs2==f8, rd==f20,fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fc538 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f9; op2:f8; dest:f20; op1val:0x7ed78fb8; op2val:0x7dcfc538;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f20, f9, f8, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f6, rs2==f12, rd==f19,fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x364437 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f6; op2:f12; dest:f19; op1val:0x7edddf89; op2val:0x7db64437;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f19, f6, f12, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f10, rs2==f23, rd==f16,fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2f40c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f10; op2:f23; dest:f16; op1val:0x7ef6a41a; op2val:0x7eaf40c6;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f16, f10, f23, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f24, rs2==f6, rd==f5,fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x52a1db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f24; op2:f6; dest:f5; op1val:0x7efa3631; op2val:0xfdd2a1db;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f5, f24, f6, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f23, rs2==f3, rd==f29,fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2f7105 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f23; op2:f3; dest:f29; op1val:0x7f06fbdb; op2val:0x7caf7105;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f29, f23, f3, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f19, rs2==f7, rd==f4,fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x7cf3ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f19; op2:f7; dest:f4; op1val:0x7f0a8666; op2val:0x7bfcf3ad;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f4, f19, f7, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11f412 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f125b96; op2val:0x7f11f412;
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4357ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f12a50c; op2val:0x7ec357ca;
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3155e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f13f0c0; op2val:0x7e3155e7;
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x6249a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f167638; op2val:0xfce249a5;
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x131b4d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f191a03; op2val:0x7e931b4d;
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f1313 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b5ad7; op2val:0x7e5f1313;
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x755870 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f5de9; op2val:0x7df55870;
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1ac051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f207786; op2val:0x7e9ac051;
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x57e728 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f20d0a1; op2val:0x7e57e728;
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x713214 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f252cf6; op2val:0x7ef13214;
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5ee9fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296f9b; op2val:0x7cdee9fe;
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5fc232 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2a257f; op2val:0x7ddfc232;
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x273366 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2d12f5; op2val:0x7f273366;
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfd and fm2 == 0x45810c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f33cbed; op2val:0x7ec5810c;
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x564037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f34510e; op2val:0x7ed64037;
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x36ab8f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f37c42d; op2val:0x7f36ab8f;
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x15c2f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cc5a4; op2val:0x7e95c2f3;
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4bab36 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3e917d; op2val:0x7dcbab36;
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x462194 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7c9c56e0; op2val:0xfec62194;
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x13f4b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cb26d35; op2val:0xfe13f4b3;
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1fe890 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cd4206e; op2val:0xfe1fe890;
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7d664b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d0597cb; op2val:0xfefd664b;
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(4262720691,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(4263504016,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2101952721,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(4263684761,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(4278773962,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(4270869962,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(4263368273,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(4265145245,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(4278817234,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2061109119,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(4267052532,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2119044181,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(4267329118,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(4249184006,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2116777172,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(4247908811,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(4266923482,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2125508478,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2098013145,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(4273488384,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(4253063021,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(4266614612,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(4272453002,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2110005023,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2110768440,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2109097015,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2125414598,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(4258439643,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2091872517,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2080175021,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131883026,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2126731210,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2117162471,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(4242688421,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2123569997,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2120160019,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2113230960,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2124070993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2119690024,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2129736212,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2094983678,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2111816242,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133275494,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2126872844,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2127970359,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134289295,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2123743987,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2110499638,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(4274397588,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(4262720691,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(4263504016,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(4278019659,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 108*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
