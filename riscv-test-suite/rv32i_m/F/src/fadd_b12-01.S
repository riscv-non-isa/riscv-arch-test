
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:42 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fadd_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fadd_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==f3, rs2==f12, rd==f12,fs1 == 1 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3df905 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f3; op2:f12; dest:f12; op1val:0xfa60affa; op2val:0x7ebdf905; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f12, f3, f12, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f5, rs2==f15, rd==f27,fs1 == 1 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x19caca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f5; op2:f15; dest:f27; op1val:0xfd772129; op2val:0x7e99caca; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f27, f5, f15, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd != rs2, rs1==f25, rs2==f1, rd==f25,fs1 == 1 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d9098 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f25; op2:f1; dest:f25; op1val:0xfda78349; op2val:0x7efd9098; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f25, f25, f1, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 != rd, rs1==f8, rs2==f8, rd==f7,fs1 == 1 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x106e2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f8; op2:f8; dest:f7; op1val:0xfe1173d9; op2val:0xfe1173d9; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f7, f8, f8, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rd, rs1==f26, rs2==f26, rd==f26,fs1 == 1 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11a59d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f26; op2:f26; dest:f26; op1val:0xfe12bd51; op2val:0xfe12bd51; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f26, f26, f26, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f9, rs2==f10, rd==f20,fs1 == 1 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x6794fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f9; op2:f10; dest:f20; op1val:0xfe3741cc; op2val:0x7f6794fc; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f20, f9, f10, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f7, rs2==f3, rd==f10,fs1 == 1 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4c9471 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f7; op2:f3; dest:f10; op1val:0xfe480ede; op2val:0x7f4c9471; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f10, f7, f3, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f12, rs2==f28, rd==f5,fs1 == 1 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x473a2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f12; op2:f28; dest:f5; op1val:0xfe587392; op2val:0x7f473a2e; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f5, f12, f28, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f4, rs2==f14, rd==f28,fs1 == 1 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x47ad0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f4; op2:f14; dest:f28; op1val:0xfe6e317d; op2val:0x7f47ad0f; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f28, f4, f14, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f22, rs2==f31, rd==f13,fs1 == 1 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x6591d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f22; op2:f31; dest:f13; op1val:0xfe79c1c6; op2val:0x7f6591d8; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f13, f22, f31, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f13, rs2==f5, rd==f19,fs1 == 1 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x027635 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f13; op2:f5; dest:f19; op1val:0xfea17fdd; op2val:0x7f027635; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f19, f13, f5, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f11, rs2==f25, rd==f2,fs1 == 1 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x48a6ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f11; op2:f25; dest:f2; op1val:0xfea6b8d3; op2val:0x7f48a6ba; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f2, f11, f25, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f31, rs2==f16, rd==f22,fs1 == 1 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x554674 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f31; op2:f16; dest:f22; op1val:0xfead0427; op2val:0x7f554674; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f22, f31, f16, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f23, rs2==f22, rd==f16,fs1 == 1 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5bf8d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f23; op2:f22; dest:f16; op1val:0xfeb54d84; op2val:0x7edbf8d8; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f16, f23, f22, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f20, rs2==f6, rd==f8,fs1 == 1 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x597afe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f20; op2:f6; dest:f8; op1val:0xfeb6fce6; op2val:0x7ed97afe; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f8, f20, f6, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f27, rs2==f24, rd==f11,fs1 == 1 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4b8415 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f27; op2:f24; dest:f11; op1val:0xfeb70362; op2val:0x7f4b8415; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f11, f27, f24, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f14, rs2==f21, rd==f9,fs1 == 1 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f14; op2:f21; dest:f9; op1val:0xfeb72bf7; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f9, f14, f21, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f18, rs2==f20, rd==f30,fs1 == 1 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f18; op2:f20; dest:f30; op1val:0xfec30c98; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f30, f18, f20, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f21, rs2==f0, rd==f4,fs1 == 1 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2fe97e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f21; op2:f0; dest:f4; op1val:0xfec45459; op2val:0x7f2fe97e; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f4, f21, f0, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f1, rs2==f2, rd==f6,fs1 == 1 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32ec8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f1; op2:f2; dest:f6; op1val:0xfecf9722; op2val:0x7f32ec8c; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f6, f1, f2, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f19, rs2==f9, rd==f14,fs1 == 1 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5817b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f19; op2:f9; dest:f14; op1val:0xfed2b355; op2val:0x7ed817b0; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f14, f19, f9, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f15, rs2==f17, rd==f18,fs1 == 1 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2644ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f15; op2:f17; dest:f18; op1val:0xfedd0ccb; op2val:0x7f2644ac; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f18, f15, f17, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f16, rs2==f23, rd==f1,fs1 == 1 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x4642a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f16; op2:f23; dest:f1; op1val:0xfee1a51b; op2val:0x7f4642a7; 
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f1, f16, f23, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f28, rs2==f19, rd==f31,fs1 == 1 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c6359 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f28; op2:f19; dest:f31; op1val:0xfee4f961; op2val:0x7f3c6359; 
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f28, f19, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f10, rs2==f4, rd==f24,fs1 == 1 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x73bb25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f10; op2:f4; dest:f24; op1val:0xfeeb4e0d; op2val:0x7f73bb25; 
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f24, f10, f4, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f2, rs2==f18, rd==f29,fs1 == 1 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x530d37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f2; op2:f18; dest:f29; op1val:0xfeeb4f07; op2val:0x7f530d37; 
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f29, f2, f18, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f29, rs2==f30, rd==f3,fs1 == 1 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x26d2f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f29; op2:f30; dest:f3; op1val:0xfeed7424; op2val:0x7f26d2f5; 
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f3, f29, f30, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f24, rs2==f27, rd==f23,fs1 == 1 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c560e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f24; op2:f27; dest:f23; op1val:0xff076a16; op2val:0x7f3c560e; 
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f23, f24, f27, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f0, rs2==f29, rd==f21,fs1 == 1 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x70c4b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f0; op2:f29; dest:f21; op1val:0xff07a8e7; op2val:0x7f70c4b8; 
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f21, f0, f29, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f17, rs2==f11, rd==f15,fs1 == 1 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 0 and fe2 == 0xfe and fm2 == 0x56c1e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f17; op2:f11; dest:f15; op1val:0xff0a2eec; op2val:0x7f56c1e5; 
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f15, f17, f11, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f30, rs2==f13, rd==f0,fs1 == 1 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f13; dest:f0; op1val:0xff1175bf; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f0, f30, f13, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f6, rs2==f7, rd==f17,fs1 == 1 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x50b9b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f6; op2:f7; dest:f17; op1val:0xff167d44; op2val:0x7f50b9b1; 
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f17, f6, f7, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28224f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff185183; op2val:0x7f28224f; 
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x703879 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff1a35e0; op2val:0x7f703879; 
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff1b8fcb; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff1bd52c; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff1c60ac; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff1e5ec7; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff222105; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x55691d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff269468; op2val:0x7f55691d; 
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff2bd8f4; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff2c7300; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff2c93b2; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff2e5b90; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff2eabd8; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff2f4c51; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff314a05; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff365ad7; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff390e97; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 1 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xff3f4810; op2val:0x7f7fffff; 
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 1 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3df905 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xfa60affa; op2val:0x7ebdf905; 
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 1 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d9098 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xfda78349; op2val:0x7efd9098; 
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x106e2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xfe1173d9; op2val:0x7e906e2e; 
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 1 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11a59d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:f30; op2:f29; dest:f31; op1val:0xfe12bd51; op2val:0x7f11a59d; 
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2126379269,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2124008138,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2130546840,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2137494780,32,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2135725169,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2135374382,32,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2135403791,32,FLEN)
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2137362904,32,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2130867765,32,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2135467706,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2136295028,32,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2128345304,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2128182014,32,FLEN)
NAN_BOXED(4273406818,32,FLEN)
NAN_BOXED(2135655445,32,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2133846398,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2134043788,32,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2128091056,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2133214380,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2135311015,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2134664025,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2138290981,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2136149303,32,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2133250805,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2134660622,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(2138096824,32,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2136392165,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2135996849,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2133336655,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2138060921,32,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4280718440,32,FLEN)
NAN_BOXED(2136303901,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2126379269,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2130546840,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2123394606,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2131862941,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 108*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
