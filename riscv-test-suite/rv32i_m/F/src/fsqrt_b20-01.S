
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:20 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fsqrt.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fsqrt_b20 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsqrt_b20)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==f2, rd==f0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f2; dest:f0; op1val:0x0; valaddr_reg:x3;
val_offset:0*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f0, f2, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rd, rs1==f25, rd==f25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f25; dest:f25; op1val:0x5; valaddr_reg:x3;
val_offset:1*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f25, f25, dyn, 0, 0, x3, 1*FLEN/8, x4, x1, x2)

inst_2:
// rs1==f17, rd==f9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000160 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f17; dest:f9; op1val:0x160; valaddr_reg:x3;
val_offset:2*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f9, f17, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_3:
// rs1==f5, rd==f4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x0cd173 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f5; dest:f4; op1val:0xcd173; valaddr_reg:x3;
val_offset:3*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f4, f5, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_4:
// rs1==f14, rd==f27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x2bf296 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f14; dest:f27; op1val:0x2bf296; valaddr_reg:x3;
val_offset:4*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f27, f14, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f9, rd==f5,fs1 == 0 and fe1 == 0x0b and fm1 == 0x0cd684 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f9; dest:f5; op1val:0x58cd684; valaddr_reg:x3;
val_offset:5*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f5, f9, dyn, 0, 0, x3, 5*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f21, rd==f20,fs1 == 0 and fe1 == 0x1b and fm1 == 0x5b5a62 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f21; dest:f20; op1val:0xddb5a62; valaddr_reg:x3;
val_offset:6*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f20, f21, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f22, rd==f3,fs1 == 0 and fe1 == 0x24 and fm1 == 0x689000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f22; dest:f3; op1val:0x12689000; valaddr_reg:x3;
val_offset:7*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f3, f22, dyn, 0, 0, x3, 7*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f18, rd==f2,fs1 == 0 and fe1 == 0x30 and fm1 == 0x75cb89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f18; dest:f2; op1val:0x1875cb89; valaddr_reg:x3;
val_offset:8*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f2, f18, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f27, rd==f28,fs1 == 0 and fe1 == 0x31 and fm1 == 0x011313 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f27; dest:f28; op1val:0x18811313; valaddr_reg:x3;
val_offset:9*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f28, f27, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f24, rd==f16,fs1 == 0 and fe1 == 0x34 and fm1 == 0x08f690 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f24; dest:f16; op1val:0x1a08f690; valaddr_reg:x3;
val_offset:10*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f16, f24, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f1, rd==f21,fs1 == 0 and fe1 == 0x39 and fm1 == 0x0ef3b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f1; dest:f21; op1val:0x1c8ef3b1; valaddr_reg:x3;
val_offset:11*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f21, f1, dyn, 0, 0, x3, 11*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f4, rd==f18,fs1 == 0 and fe1 == 0x39 and fm1 == 0x480000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f4; dest:f18; op1val:0x1cc80000; valaddr_reg:x3;
val_offset:12*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f18, f4, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f20, rd==f19,fs1 == 0 and fe1 == 0x39 and fm1 == 0x69d200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f20; dest:f19; op1val:0x1ce9d200; valaddr_reg:x3;
val_offset:13*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f19, f20, dyn, 0, 0, x3, 13*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f30, rd==f11,fs1 == 0 and fe1 == 0x3b and fm1 == 0x108000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f11; op1val:0x1d908000; valaddr_reg:x3;
val_offset:14*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f11, f30, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f26, rd==f22,fs1 == 0 and fe1 == 0x3c and fm1 == 0x124e58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f26; dest:f22; op1val:0x1e124e58; valaddr_reg:x3;
val_offset:15*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f22, f26, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f11, rd==f23,fs1 == 0 and fe1 == 0x3f and fm1 == 0x0577a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f11; dest:f23; op1val:0x1f8577a2; valaddr_reg:x3;
val_offset:16*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f23, f11, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f0, rd==f10,fs1 == 0 and fe1 == 0x4e and fm1 == 0x454542 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f0; dest:f10; op1val:0x27454542; valaddr_reg:x3;
val_offset:17*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f10, f0, dyn, 0, 0, x3, 17*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f31, rd==f17,fs1 == 0 and fe1 == 0x52 and fm1 == 0x216b44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f31; dest:f17; op1val:0x29216b44; valaddr_reg:x3;
val_offset:18*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f17, f31, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f13, rd==f31,fs1 == 0 and fe1 == 0x59 and fm1 == 0x0fed85 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f13; dest:f31; op1val:0x2c8fed85; valaddr_reg:x3;
val_offset:19*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f13, dyn, 0, 0, x3, 19*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f8, rd==f7,fs1 == 0 and fe1 == 0x59 and fm1 == 0x7d2000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f8; dest:f7; op1val:0x2cfd2000; valaddr_reg:x3;
val_offset:20*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f7, f8, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f12, rd==f26,fs1 == 0 and fe1 == 0x65 and fm1 == 0x064562 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f12; dest:f26; op1val:0x32864562; valaddr_reg:x3;
val_offset:21*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f26, f12, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f6, rd==f12,fs1 == 0 and fe1 == 0x65 and fm1 == 0x5b1e82 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f6; dest:f12; op1val:0x32db1e82; valaddr_reg:x3;
val_offset:22*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f12, f6, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f16, rd==f13,fs1 == 0 and fe1 == 0x66 and fm1 == 0x64c400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f16; dest:f13; op1val:0x3364c400; valaddr_reg:x3;
val_offset:23*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f13, f16, dyn, 0, 0, x3, 23*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f28, rd==f15,fs1 == 0 and fe1 == 0x6a and fm1 == 0x3e2364 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f28; dest:f15; op1val:0x353e2364; valaddr_reg:x3;
val_offset:24*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f15, f28, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f7, rd==f14,fs1 == 0 and fe1 == 0x79 and fm1 == 0x785c55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f7; dest:f14; op1val:0x3cf85c55; valaddr_reg:x3;
val_offset:25*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f14, f7, dyn, 0, 0, x3, 25*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f15, rd==f8,fs1 == 0 and fe1 == 0x7b and fm1 == 0x46c080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f15; dest:f8; op1val:0x3dc6c080; valaddr_reg:x3;
val_offset:26*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f8, f15, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f29, rd==f6,fs1 == 0 and fe1 == 0x7b and fm1 == 0x64e1f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f29; dest:f6; op1val:0x3de4e1f0; valaddr_reg:x3;
val_offset:27*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f6, f29, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f10, rd==f30,fs1 == 0 and fe1 == 0x80 and fm1 == 0x6d5a40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f10; dest:f30; op1val:0x406d5a40; valaddr_reg:x3;
val_offset:28*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f30, f10, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f3, rd==f29,fs1 == 0 and fe1 == 0x82 and fm1 == 0x044000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f3; dest:f29; op1val:0x41044000; valaddr_reg:x3;
val_offset:29*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f29, f3, dyn, 0, 0, x3, 29*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f23, rd==f24,fs1 == 0 and fe1 == 0x86 and fm1 == 0x130400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f23; dest:f24; op1val:0x43130400; valaddr_reg:x3;
val_offset:30*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f24, f23, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f19, rd==f1,fs1 == 0 and fe1 == 0x86 and fm1 == 0x704000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f19; dest:f1; op1val:0x43704000; valaddr_reg:x3;
val_offset:31*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f1, f19, dyn, 0, 0, x3, 31*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x88 and fm1 == 0x7c0400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x447c0400; valaddr_reg:x3;
val_offset:32*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x8e and fm1 == 0x689000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x47689000; valaddr_reg:x3;
val_offset:33*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x97 and fm1 == 0x5c8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x4bdc8000; valaddr_reg:x3;
val_offset:34*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x9e and fm1 == 0x38d874 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x4f38d874; valaddr_reg:x3;
val_offset:35*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 35*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xa0 and fm1 == 0x10d851 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x5010d851; valaddr_reg:x3;
val_offset:36*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x0f78f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x538f78f8; valaddr_reg:x3;
val_offset:37*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 37*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xac and fm1 == 0x13884e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x5613884e; valaddr_reg:x3;
val_offset:38*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xad and fm1 == 0x75bbd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x56f5bbd8; valaddr_reg:x3;
val_offset:39*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xb6 and fm1 == 0x479816 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x5b479816; valaddr_reg:x3;
val_offset:40*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xb7 and fm1 == 0x4bce51 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x5bcbce51; valaddr_reg:x3;
val_offset:41*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 41*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xb7 and fm1 == 0x720000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x5bf20000; valaddr_reg:x3;
val_offset:42*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xbc and fm1 == 0x68cd04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x5e68cd04; valaddr_reg:x3;
val_offset:43*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 43*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xc0 and fm1 == 0x3590aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x603590aa; valaddr_reg:x3;
val_offset:44*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xc2 and fm1 == 0x26f9c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x6126f9c3; valaddr_reg:x3;
val_offset:45*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xc7 and fm1 == 0x720000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x63f20000; valaddr_reg:x3;
val_offset:46*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xce and fm1 == 0x1168e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x671168e1; valaddr_reg:x3;
val_offset:47*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 47*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xd0 and fm1 == 0x010151 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x68010151; valaddr_reg:x3;
val_offset:48*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xd0 and fm1 == 0x095440 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x68095440; valaddr_reg:x3;
val_offset:49*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 49*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xd3 and fm1 == 0x190acf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x69990acf; valaddr_reg:x3;
val_offset:50*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xd3 and fm1 == 0x6a7f20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x69ea7f20; valaddr_reg:x3;
val_offset:51*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xdd and fm1 == 0x4096e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x6ec096e8; valaddr_reg:x3;
val_offset:52*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xe4 and fm1 == 0x1477dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x721477dc; valaddr_reg:x3;
val_offset:53*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 53*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xea and fm1 == 0x284ae6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x75284ae6; valaddr_reg:x3;
val_offset:54*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xea and fm1 == 0x4f33d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x754f33d9; valaddr_reg:x3;
val_offset:55*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 55*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xef and fm1 == 0x7bb880 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x77fbb880; valaddr_reg:x3;
val_offset:56*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xf3 and fm1 == 0x6653ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x79e653ed; valaddr_reg:x3;
val_offset:57*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x610000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7a610000; valaddr_reg:x3;
val_offset:58*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x0aadc1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7a8aadc1; valaddr_reg:x3;
val_offset:59*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 59*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2b61ee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7cab61ee; valaddr_reg:x3;
val_offset:60*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x480000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7cc80000; valaddr_reg:x3;
val_offset:61*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 61*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7ff200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7cfff200; valaddr_reg:x3;
val_offset:62*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f3827 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7f3827; valaddr_reg:x3;
val_offset:63*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fffff; valaddr_reg:x3;
val_offset:64*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x5; valaddr_reg:x3;
val_offset:65*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 65*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(352,32,FLEN)
NAN_BOXED(840051,32,FLEN)
NAN_BOXED(2880150,32,FLEN)
NAN_BOXED(93116036,32,FLEN)
NAN_BOXED(232479330,32,FLEN)
NAN_BOXED(308842496,32,FLEN)
NAN_BOXED(410373001,32,FLEN)
NAN_BOXED(411112211,32,FLEN)
NAN_BOXED(436795024,32,FLEN)
NAN_BOXED(479130545,32,FLEN)
NAN_BOXED(482869248,32,FLEN)
NAN_BOXED(485085696,32,FLEN)
NAN_BOXED(496009216,32,FLEN)
NAN_BOXED(504516184,32,FLEN)
NAN_BOXED(528840610,32,FLEN)
NAN_BOXED(658851138,32,FLEN)
NAN_BOXED(690056004,32,FLEN)
NAN_BOXED(747629957,32,FLEN)
NAN_BOXED(754786304,32,FLEN)
NAN_BOXED(847660386,32,FLEN)
NAN_BOXED(853220994,32,FLEN)
NAN_BOXED(862241792,32,FLEN)
NAN_BOXED(893264740,32,FLEN)
NAN_BOXED(1022909525,32,FLEN)
NAN_BOXED(1036435584,32,FLEN)
NAN_BOXED(1038410224,32,FLEN)
NAN_BOXED(1080908352,32,FLEN)
NAN_BOXED(1090797568,32,FLEN)
NAN_BOXED(1125319680,32,FLEN)
NAN_BOXED(1131429888,32,FLEN)
NAN_BOXED(1148978176,32,FLEN)
NAN_BOXED(1198034944,32,FLEN)
NAN_BOXED(1272741888,32,FLEN)
NAN_BOXED(1329125492,32,FLEN)
NAN_BOXED(1343281233,32,FLEN)
NAN_BOXED(1401911544,32,FLEN)
NAN_BOXED(1444120654,32,FLEN)
NAN_BOXED(1458944984,32,FLEN)
NAN_BOXED(1531418646,32,FLEN)
NAN_BOXED(1540083281,32,FLEN)
NAN_BOXED(1542586368,32,FLEN)
NAN_BOXED(1583926532,32,FLEN)
NAN_BOXED(1614123178,32,FLEN)
NAN_BOXED(1629944259,32,FLEN)
NAN_BOXED(1676804096,32,FLEN)
NAN_BOXED(1729194209,32,FLEN)
NAN_BOXED(1744896337,32,FLEN)
NAN_BOXED(1745441856,32,FLEN)
NAN_BOXED(1771637455,32,FLEN)
NAN_BOXED(1776975648,32,FLEN)
NAN_BOXED(1858115304,32,FLEN)
NAN_BOXED(1913944028,32,FLEN)
NAN_BOXED(1965574886,32,FLEN)
NAN_BOXED(1968124889,32,FLEN)
NAN_BOXED(2012985472,32,FLEN)
NAN_BOXED(2045137901,32,FLEN)
NAN_BOXED(2053177344,32,FLEN)
NAN_BOXED(2055908801,32,FLEN)
NAN_BOXED(2091606510,32,FLEN)
NAN_BOXED(2093481984,32,FLEN)
NAN_BOXED(2097148416,32,FLEN)
NAN_BOXED(2139043879,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(5,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 132*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
