
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:32 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fsub_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsub_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==f29, rs2==f29, rd==f22,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f29; op2:f29; dest:f22; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f22, f29, f29, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rd != rs2, rs1==f8, rs2==f18, rd==f8,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f8; op2:f18; dest:f8; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f8, f8, f18, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs2 == rd != rs1, rs1==f5, rs2==f31, rd==f31,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f5; op2:f31; dest:f31; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f5, f31, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rd, rs1==f14, rs2==f14, rd==f14,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f14; op2:f14; dest:f14; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f14, f14, f14, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f0, rs2==f12, rd==f17,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f0; op2:f12; dest:f17; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f17, f0, f12, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f10, rs2==f16, rd==f30,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f10; op2:f16; dest:f30; op1val:0x7c7fd01a; op2val:0x7c7fd01a;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f30, f10, f16, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f25, rs2==f20, rd==f24,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f25; op2:f20; dest:f24; op1val:0x7c7fd01a; op2val:0x7c7fd01a;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f24, f25, f20, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f4, rs2==f3, rd==f29,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f4; op2:f3; dest:f29; op1val:0x7c7fd01a; op2val:0x7c7fd01a;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f29, f4, f3, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f6, rs2==f26, rd==f28,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f6; op2:f26; dest:f28; op1val:0x7c7fd01a; op2val:0x7c7fd01a;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f28, f6, f26, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f13, rs2==f6, rd==f25,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7fd01a and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7fd01a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f13; op2:f6; dest:f25; op1val:0x7c7fd01a; op2val:0x7c7fd01a;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f25, f13, f6, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f21, rs2==f7, rd==f12,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f21; op2:f7; dest:f12; op1val:0x7c9135f9; op2val:0x7c9135f9;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f12, f21, f7, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f19, rs2==f28, rd==f26,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f19; op2:f28; dest:f26; op1val:0x7c9135f9; op2val:0x7c9135f9;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f26, f19, f28, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f16, rs2==f1, rd==f6,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f16; op2:f1; dest:f6; op1val:0x7c9135f9; op2val:0x7c9135f9;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f6, f16, f1, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f30, rs2==f5, rd==f7,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f5; dest:f7; op1val:0x7c9135f9; op2val:0x7c9135f9;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f7, f30, f5, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f15, rs2==f2, rd==f13,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1135f9 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1135f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f15; op2:f2; dest:f13; op1val:0x7c9135f9; op2val:0x7c9135f9;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f13, f15, f2, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f26, rs2==f22, rd==f27,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f26; op2:f22; dest:f27; op1val:0x7c9c56e0; op2val:0x7c9c56e0;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f27, f26, f22, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f11, rs2==f19, rd==f16,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f11; op2:f19; dest:f16; op1val:0x7c9c56e0; op2val:0x7c9c56e0;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f16, f11, f19, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f18, rs2==f21, rd==f10,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f18; op2:f21; dest:f10; op1val:0x7c9c56e0; op2val:0x7c9c56e0;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f10, f18, f21, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f7, rs2==f10, rd==f21,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f7; op2:f10; dest:f21; op1val:0x7c9c56e0; op2val:0x7c9c56e0;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f21, f7, f10, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f28, rs2==f4, rd==f18,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1c56e0 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x1c56e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f28; op2:f4; dest:f18; op1val:0x7c9c56e0; op2val:0x7c9c56e0;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f18, f28, f4, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f23, rs2==f13, rd==f1,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f23; op2:f13; dest:f1; op1val:0x7cabe0d7; op2val:0x7cabe0d7;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f1, f23, f13, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f17, rs2==f27, rd==f15,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f17; op2:f27; dest:f15; op1val:0x7cabe0d7; op2val:0x7cabe0d7;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f15, f17, f27, dyn, 32, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f31, rs2==f0, rd==f3,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f31; op2:f0; dest:f3; op1val:0x7cabe0d7; op2val:0x7cabe0d7;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f3, f31, f0, dyn, 64, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f22, rs2==f15, rd==f23,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f22; op2:f15; dest:f23; op1val:0x7cabe0d7; op2val:0x7cabe0d7;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f23, f22, f15, dyn, 96, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f27, rs2==f24, rd==f19,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2be0d7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x2be0d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f27; op2:f24; dest:f19; op1val:0x7cabe0d7; op2val:0x7cabe0d7;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f19, f27, f24, dyn, 128, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f24, rs2==f23, rd==f9,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f24; op2:f23; dest:f9; op1val:0x7cb26d35; op2val:0x7cb26d35;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f9, f24, f23, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f3, rs2==f8, rd==f2,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f3; op2:f8; dest:f2; op1val:0x7cb26d35; op2val:0x7cb26d35;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f2, f3, f8, dyn, 32, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f1, rs2==f11, rd==f5,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f1; op2:f11; dest:f5; op1val:0x7cb26d35; op2val:0x7cb26d35;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f5, f1, f11, dyn, 64, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f9, rs2==f30, rd==f0,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f9; op2:f30; dest:f0; op1val:0x7cb26d35; op2val:0x7cb26d35;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f0, f9, f30, dyn, 96, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f2, rs2==f9, rd==f20,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x326d35 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x326d35 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f2; op2:f9; dest:f20; op1val:0x7cb26d35; op2val:0x7cb26d35;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f20, f2, f9, dyn, 128, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f20, rs2==f25, rd==f11,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f20; op2:f25; dest:f11; op1val:0x7cd4206e; op2val:0x7cd4206e;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f11, f20, f25, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f12, rs2==f17, rd==f4,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f12; op2:f17; dest:f4; op1val:0x7cd4206e; op2val:0x7cd4206e;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f4, f12, f17, dyn, 32, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cd4206e; op2val:0x7cd4206e;
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cd4206e; op2val:0x7cd4206e;
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x54206e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x54206e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cd4206e; op2val:0x7cd4206e;
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf36d34; op2val:0x7cf36d34;
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf36d34; op2val:0x7cf36d34;
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf36d34; op2val:0x7cf36d34;
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf36d34; op2val:0x7cf36d34;
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x736d34 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x736d34 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf36d34; op2val:0x7cf36d34;
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf5e793; op2val:0x7cf5e793;
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf5e793; op2val:0x7cf5e793;
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf5e793; op2val:0x7cf5e793;
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf5e793; op2val:0x7cf5e793;
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x75e793 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x75e793 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cf5e793; op2val:0x7cf5e793;
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cfa1d39; op2val:0x7cfa1d39;
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cfa1d39; op2val:0x7cfa1d39;
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cfa1d39; op2val:0x7cfa1d39;
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cfa1d39; op2val:0x7cfa1d39;
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7a1d39 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x7a1d39 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7cfa1d39; op2val:0x7cfa1d39;
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d0597cb; op2val:0x7d0597cb;
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d0597cb; op2val:0x7d0597cb;
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d0597cb; op2val:0x7d0597cb;
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d0597cb; op2val:0x7d0597cb;
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0597cb and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0597cb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d0597cb; op2val:0x7d0597cb;
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d140fee; op2val:0x7d140fee;
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d140fee; op2val:0x7d140fee;
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d140fee; op2val:0x7d140fee;
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d140fee; op2val:0x7d140fee;
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x140fee and fs2 == 0 and fe2 == 0xfa and fm2 == 0x140fee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d140fee; op2val:0x7d140fee;
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d2c6927; op2val:0x7d2c6927;
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d2c6927; op2val:0x7d2c6927;
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d2c6927; op2val:0x7d2c6927;
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d2c6927; op2val:0x7d2c6927;
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2c6927 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x2c6927 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d2c6927; op2val:0x7d2c6927;
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d34967e; op2val:0x7d34967e;
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d34967e; op2val:0x7d34967e;
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d34967e; op2val:0x7d34967e;
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d34967e; op2val:0x7d34967e;
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x34967e and fs2 == 0 and fe2 == 0xfa and fm2 == 0x34967e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d34967e; op2val:0x7d34967e;
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d60d9a4; op2val:0x7d60d9a4;
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d60d9a4; op2val:0x7d60d9a4;
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d60d9a4; op2val:0x7d60d9a4;
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d60d9a4; op2val:0x7d60d9a4;
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x60d9a4 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x60d9a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d60d9a4; op2val:0x7d60d9a4;
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d66cc78; op2val:0x7d66cc78;
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d66cc78; op2val:0x7d66cc78;
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d66cc78; op2val:0x7d66cc78;
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d66cc78; op2val:0x7d66cc78;
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x66cc78 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x66cc78 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d66cc78; op2val:0x7d66cc78;
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d79f6ff; op2val:0x7d79f6ff;
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d79f6ff; op2val:0x7d79f6ff;
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d79f6ff; op2val:0x7d79f6ff;
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d79f6ff; op2val:0x7d79f6ff;
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x79f6ff and fs2 == 0 and fe2 == 0xfa and fm2 == 0x79f6ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d79f6ff; op2val:0x7d79f6ff;
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d7b1d83; op2val:0x7d7b1d83;
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d7b1d83; op2val:0x7d7b1d83;
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d7b1d83; op2val:0x7d7b1d83;
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d7b1d83; op2val:0x7d7b1d83;
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x7b1d83 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7b1d83 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d7b1d83; op2val:0x7d7b1d83;
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d82119e; op2val:0x7d82119e;
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d82119e; op2val:0x7d82119e;
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d82119e; op2val:0x7d82119e;
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d82119e; op2val:0x7d82119e;
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02119e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x02119e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d82119e; op2val:0x7d82119e;
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d902b16; op2val:0x7d902b16;
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d902b16; op2val:0x7d902b16;
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d902b16; op2val:0x7d902b16;
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d902b16; op2val:0x7d902b16;
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x102b16 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x102b16 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d902b16; op2val:0x7d902b16;
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d99cc61; op2val:0x7d99cc61;
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d99cc61; op2val:0x7d99cc61;
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d99cc61; op2val:0x7d99cc61;
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d99cc61; op2val:0x7d99cc61;
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x19cc61 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d99cc61; op2val:0x7d99cc61;
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d9df407; op2val:0x7d9df407;
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d9df407; op2val:0x7d9df407;
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d9df407; op2val:0x7d9df407;
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d9df407; op2val:0x7d9df407;
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1df407 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1df407 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7d9df407; op2val:0x7d9df407;
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da02a98; op2val:0x7da02a98;
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da02a98; op2val:0x7da02a98;
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da02a98; op2val:0x7da02a98;
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da02a98; op2val:0x7da02a98;
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x202a98 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x202a98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da02a98; op2val:0x7da02a98;
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da06546; op2val:0x7da06546;
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da06546; op2val:0x7da06546;
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da06546; op2val:0x7da06546;
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da06546; op2val:0x7da06546;
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x206546 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x206546 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da06546; op2val:0x7da06546;
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da42a08; op2val:0x7da42a08;
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da42a08; op2val:0x7da42a08;
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da42a08; op2val:0x7da42a08;
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da42a08; op2val:0x7da42a08;
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x242a08 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x242a08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da42a08; op2val:0x7da42a08;
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da70ed6; op2val:0x7da70ed6;
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da70ed6; op2val:0x7da70ed6;
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da70ed6; op2val:0x7da70ed6;
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da70ed6; op2val:0x7da70ed6;
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x270ed6 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x270ed6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da70ed6; op2val:0x7da70ed6;
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da82cad; op2val:0x7da82cad;
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da82cad; op2val:0x7da82cad;
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da82cad; op2val:0x7da82cad;
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da82cad; op2val:0x7da82cad;
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x282cad and fs2 == 0 and fe2 == 0xfb and fm2 == 0x282cad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7da82cad; op2val:0x7da82cad;
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db0cc24; op2val:0x7db0cc24;
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db0cc24; op2val:0x7db0cc24;
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db0cc24; op2val:0x7db0cc24;
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db0cc24; op2val:0x7db0cc24;
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30cc24 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x30cc24 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db0cc24; op2val:0x7db0cc24;
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db17f52; op2val:0x7db17f52;
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db17f52; op2val:0x7db17f52;
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db17f52; op2val:0x7db17f52;
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db17f52; op2val:0x7db17f52;
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x317f52 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x317f52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db17f52; op2val:0x7db17f52;
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db9afdd; op2val:0x7db9afdd;
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db9afdd; op2val:0x7db9afdd;
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db9afdd; op2val:0x7db9afdd;
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db9afdd; op2val:0x7db9afdd;
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39afdd and fs2 == 0 and fe2 == 0xfb and fm2 == 0x39afdd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7db9afdd; op2val:0x7db9afdd;
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dc032ba; op2val:0x7dc032ba;
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dc032ba; op2val:0x7dc032ba;
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dc032ba; op2val:0x7dc032ba;
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dc032ba; op2val:0x7dc032ba;
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4032ba and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4032ba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dc032ba; op2val:0x7dc032ba;
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dce622b; op2val:0x7dce622b;
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dce622b; op2val:0x7dce622b;
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dce622b; op2val:0x7dce622b;
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dce622b; op2val:0x7dce622b;
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4e622b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dce622b; op2val:0x7dce622b;
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dcfe433; op2val:0x7dcfe433;
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dcfe433; op2val:0x7dcfe433;
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dcfe433; op2val:0x7dcfe433;
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dcfe433; op2val:0x7dcfe433;
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4fe433 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x4fe433 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dcfe433; op2val:0x7dcfe433;
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7de0f718; op2val:0x7de0f718;
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7de0f718; op2val:0x7de0f718;
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7de0f718; op2val:0x7de0f718;
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7de0f718; op2val:0x7de0f718;
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60f718 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x60f718 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7de0f718; op2val:0x7de0f718;
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7decd1e1; op2val:0x7decd1e1;
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7decd1e1; op2val:0x7decd1e1;
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7decd1e1; op2val:0x7decd1e1;
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7decd1e1; op2val:0x7decd1e1;
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6cd1e1 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x6cd1e1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7decd1e1; op2val:0x7decd1e1;
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df4f142; op2val:0x7df4f142;
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df4f142; op2val:0x7df4f142;
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df4f142; op2val:0x7df4f142;
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df4f142; op2val:0x7df4f142;
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74f142 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x74f142 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df4f142; op2val:0x7df4f142;
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df52f4e; op2val:0x7df52f4e;
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df52f4e; op2val:0x7df52f4e;
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df52f4e; op2val:0x7df52f4e;
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df52f4e; op2val:0x7df52f4e;
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x752f4e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x752f4e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df52f4e; op2val:0x7df52f4e;
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df61c0c; op2val:0x7df61c0c;
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df61c0c; op2val:0x7df61c0c;
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df61c0c; op2val:0x7df61c0c;
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df61c0c; op2val:0x7df61c0c;
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x761c0c and fs2 == 0 and fe2 == 0xfb and fm2 == 0x761c0c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7df61c0c; op2val:0x7df61c0c;
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dfd2144; op2val:0x7dfd2144;
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dfd2144; op2val:0x7dfd2144;
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dfd2144; op2val:0x7dfd2144;
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dfd2144; op2val:0x7dfd2144;
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7d2144 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7dfd2144; op2val:0x7dfd2144;
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e0122a3; op2val:0x7e0122a3;
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e0122a3; op2val:0x7e0122a3;
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e0122a3; op2val:0x7e0122a3;
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e0122a3; op2val:0x7e0122a3;
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0122a3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0122a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e0122a3; op2val:0x7e0122a3;
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e04dea3; op2val:0x7e04dea3;
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e04dea3; op2val:0x7e04dea3;
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e04dea3; op2val:0x7e04dea3;
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e04dea3; op2val:0x7e04dea3;
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04dea3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x04dea3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e04dea3; op2val:0x7e04dea3;
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e07613f; op2val:0x7e07613f;
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e07613f; op2val:0x7e07613f;
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e07613f; op2val:0x7e07613f;
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e07613f; op2val:0x7e07613f;
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x07613f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x07613f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e07613f; op2val:0x7e07613f;
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e081926; op2val:0x7e081926;
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e081926; op2val:0x7e081926;
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e081926; op2val:0x7e081926;
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e081926; op2val:0x7e081926;
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x081926 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x081926 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e081926; op2val:0x7e081926;
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1a414e; op2val:0x7e1a414e;
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1a414e; op2val:0x7e1a414e;
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1a414e; op2val:0x7e1a414e;
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1a414e; op2val:0x7e1a414e;
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a414e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1a414e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1a414e; op2val:0x7e1a414e;
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1e0667; op2val:0x7e1e0667;
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1e0667; op2val:0x7e1e0667;
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1e0667; op2val:0x7e1e0667;
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1e0667; op2val:0x7e1e0667;
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1e0667 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e0667 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e1e0667; op2val:0x7e1e0667;
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2544b7; op2val:0x7e2544b7;
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2544b7; op2val:0x7e2544b7;
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2544b7; op2val:0x7e2544b7;
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2544b7; op2val:0x7e2544b7;
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2544b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2544b7; op2val:0x7e2544b7;
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e26592c; op2val:0x7e26592c;
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e26592c; op2val:0x7e26592c;
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e26592c; op2val:0x7e26592c;
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e26592c; op2val:0x7e26592c;
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x26592c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x26592c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e26592c; op2val:0x7e26592c;
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e272192; op2val:0x7e272192;
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e272192; op2val:0x7e272192;
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e272192; op2val:0x7e272192;
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e272192; op2val:0x7e272192;
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x272192 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x272192 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e272192; op2val:0x7e272192;
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e280619; op2val:0x7e280619;
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e280619; op2val:0x7e280619;
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e280619; op2val:0x7e280619;
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e280619; op2val:0x7e280619;
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x280619 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x280619 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e280619; op2val:0x7e280619;
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e296bac; op2val:0x7e296bac;
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e296bac; op2val:0x7e296bac;
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e296bac; op2val:0x7e296bac;
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e296bac; op2val:0x7e296bac;
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x296bac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x296bac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e296bac; op2val:0x7e296bac;
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2b6a13; op2val:0x7e2b6a13;
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2b6a13; op2val:0x7e2b6a13;
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2b6a13; op2val:0x7e2b6a13;
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2b6a13; op2val:0x7e2b6a13;
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b6a13 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2b6a13 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2b6a13; op2val:0x7e2b6a13;
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2fb07b; op2val:0x7e2fb07b;
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2fb07b; op2val:0x7e2fb07b;
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2fb07b; op2val:0x7e2fb07b;
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2fb07b; op2val:0x7e2fb07b;
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2fb07b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2fb07b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e2fb07b; op2val:0x7e2fb07b;
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e330244; op2val:0x7e330244;
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e330244; op2val:0x7e330244;
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e330244; op2val:0x7e330244;
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e330244; op2val:0x7e330244;
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x330244 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x330244 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e330244; op2val:0x7e330244;
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3359cb; op2val:0x7e3359cb;
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3359cb; op2val:0x7e3359cb;
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3359cb; op2val:0x7e3359cb;
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3359cb; op2val:0x7e3359cb;
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3359cb and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3359cb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3359cb; op2val:0x7e3359cb;
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e34342f; op2val:0x7e34342f;
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e34342f; op2val:0x7e34342f;
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e34342f; op2val:0x7e34342f;
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e34342f; op2val:0x7e34342f;
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34342f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x34342f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e34342f; op2val:0x7e34342f;
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e37125d; op2val:0x7e37125d;
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e37125d; op2val:0x7e37125d;
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e37125d; op2val:0x7e37125d;
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 554*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e37125d; op2val:0x7e37125d;
   valaddr_reg:x3; val_offset:556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 556*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37125d and fs2 == 0 and fe2 == 0xfc and fm2 == 0x37125d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e37125d; op2val:0x7e37125d;
   valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e396928; op2val:0x7e396928;
   valaddr_reg:x3; val_offset:560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 560*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e396928; op2val:0x7e396928;
   valaddr_reg:x3; val_offset:562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 562*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e396928; op2val:0x7e396928;
   valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e396928; op2val:0x7e396928;
   valaddr_reg:x3; val_offset:566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 566*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x396928 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x396928 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e396928; op2val:0x7e396928;
   valaddr_reg:x3; val_offset:568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 568*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3b3506; op2val:0x7e3b3506;
   valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3b3506; op2val:0x7e3b3506;
   valaddr_reg:x3; val_offset:572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 572*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3b3506; op2val:0x7e3b3506;
   valaddr_reg:x3; val_offset:574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 574*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3b3506; op2val:0x7e3b3506;
   valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b3506 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b3506 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3b3506; op2val:0x7e3b3506;
   valaddr_reg:x3; val_offset:578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 578*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3c3c39; op2val:0x7e3c3c39;
   valaddr_reg:x3; val_offset:580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 580*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3c3c39; op2val:0x7e3c3c39;
   valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3c3c39; op2val:0x7e3c3c39;
   valaddr_reg:x3; val_offset:584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 584*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3c3c39; op2val:0x7e3c3c39;
   valaddr_reg:x3; val_offset:586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 586*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3c3c39 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3c3c39 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e3c3c39; op2val:0x7e3c3c39;
   valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41cf9e; op2val:0x7e41cf9e;
   valaddr_reg:x3; val_offset:590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 590*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41cf9e; op2val:0x7e41cf9e;
   valaddr_reg:x3; val_offset:592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 592*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41cf9e; op2val:0x7e41cf9e;
   valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41cf9e; op2val:0x7e41cf9e;
   valaddr_reg:x3; val_offset:596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 596*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41cf9e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41cf9e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41cf9e; op2val:0x7e41cf9e;
   valaddr_reg:x3; val_offset:598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 598*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41fc81; op2val:0x7e41fc81;
   valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41fc81; op2val:0x7e41fc81;
   valaddr_reg:x3; val_offset:602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 602*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41fc81; op2val:0x7e41fc81;
   valaddr_reg:x3; val_offset:604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 604*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41fc81; op2val:0x7e41fc81;
   valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41fc81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x41fc81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e41fc81; op2val:0x7e41fc81;
   valaddr_reg:x3; val_offset:608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 608*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e429e75; op2val:0x7e429e75;
   valaddr_reg:x3; val_offset:610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 610*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e429e75; op2val:0x7e429e75;
   valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e429e75; op2val:0x7e429e75;
   valaddr_reg:x3; val_offset:614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 614*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e429e75; op2val:0x7e429e75;
   valaddr_reg:x3; val_offset:616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 616*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x429e75 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e429e75; op2val:0x7e429e75;
   valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4410d9; op2val:0x7e4410d9;
   valaddr_reg:x3; val_offset:620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 620*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4410d9; op2val:0x7e4410d9;
   valaddr_reg:x3; val_offset:622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 622*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4410d9; op2val:0x7e4410d9;
   valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4410d9; op2val:0x7e4410d9;
   valaddr_reg:x3; val_offset:626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 626*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4410d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4410d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4410d9; op2val:0x7e4410d9;
   valaddr_reg:x3; val_offset:628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 628*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e461ec9; op2val:0x7e461ec9;
   valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e461ec9; op2val:0x7e461ec9;
   valaddr_reg:x3; val_offset:632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 632*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e461ec9; op2val:0x7e461ec9;
   valaddr_reg:x3; val_offset:634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 634*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e461ec9; op2val:0x7e461ec9;
   valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x461ec9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e461ec9; op2val:0x7e461ec9;
   valaddr_reg:x3; val_offset:638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 638*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e46fa60; op2val:0x7e46fa60;
   valaddr_reg:x3; val_offset:640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 640*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e46fa60; op2val:0x7e46fa60;
   valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e46fa60; op2val:0x7e46fa60;
   valaddr_reg:x3; val_offset:644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 644*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e46fa60; op2val:0x7e46fa60;
   valaddr_reg:x3; val_offset:646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 646*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x46fa60 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e46fa60; op2val:0x7e46fa60;
   valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4d75cc; op2val:0x7e4d75cc;
   valaddr_reg:x3; val_offset:650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 650*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4d75cc; op2val:0x7e4d75cc;
   valaddr_reg:x3; val_offset:652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 652*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4d75cc; op2val:0x7e4d75cc;
   valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4d75cc; op2val:0x7e4d75cc;
   valaddr_reg:x3; val_offset:656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 656*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4d75cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4d75cc; op2val:0x7e4d75cc;
   valaddr_reg:x3; val_offset:658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 658*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4ece7f; op2val:0x7e4ece7f;
   valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4ece7f; op2val:0x7e4ece7f;
   valaddr_reg:x3; val_offset:662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 662*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4ece7f; op2val:0x7e4ece7f;
   valaddr_reg:x3; val_offset:664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 664*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4ece7f; op2val:0x7e4ece7f;
   valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ece7f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x4ece7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e4ece7f; op2val:0x7e4ece7f;
   valaddr_reg:x3; val_offset:668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 668*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e535f81; op2val:0x7e535f81;
   valaddr_reg:x3; val_offset:670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 670*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e535f81; op2val:0x7e535f81;
   valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e535f81; op2val:0x7e535f81;
   valaddr_reg:x3; val_offset:674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 674*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e535f81; op2val:0x7e535f81;
   valaddr_reg:x3; val_offset:676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 676*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x535f81 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x535f81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e535f81; op2val:0x7e535f81;
   valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e54e058; op2val:0x7e54e058;
   valaddr_reg:x3; val_offset:680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 680*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e54e058; op2val:0x7e54e058;
   valaddr_reg:x3; val_offset:682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 682*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e54e058; op2val:0x7e54e058;
   valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e54e058; op2val:0x7e54e058;
   valaddr_reg:x3; val_offset:686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 686*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54e058 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x54e058 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e54e058; op2val:0x7e54e058;
   valaddr_reg:x3; val_offset:688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 688*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5e8d61; op2val:0x7e5e8d61;
   valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5e8d61; op2val:0x7e5e8d61;
   valaddr_reg:x3; val_offset:692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 692*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5e8d61; op2val:0x7e5e8d61;
   valaddr_reg:x3; val_offset:694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 694*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5e8d61; op2val:0x7e5e8d61;
   valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e8d61 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5e8d61 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5e8d61; op2val:0x7e5e8d61;
   valaddr_reg:x3; val_offset:698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 698*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5f59d7; op2val:0x7e5f59d7;
   valaddr_reg:x3; val_offset:700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 700*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5f59d7; op2val:0x7e5f59d7;
   valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5f59d7; op2val:0x7e5f59d7;
   valaddr_reg:x3; val_offset:704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 704*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5f59d7; op2val:0x7e5f59d7;
   valaddr_reg:x3; val_offset:706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 706*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f59d7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5f59d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e5f59d7; op2val:0x7e5f59d7;
   valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e636240; op2val:0x7e636240;
   valaddr_reg:x3; val_offset:710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 710*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e636240; op2val:0x7e636240;
   valaddr_reg:x3; val_offset:712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 712*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e636240; op2val:0x7e636240;
   valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e636240; op2val:0x7e636240;
   valaddr_reg:x3; val_offset:716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 716*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x636240 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x636240 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e636240; op2val:0x7e636240;
   valaddr_reg:x3; val_offset:718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 718*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e68fcac; op2val:0x7e68fcac;
   valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e68fcac; op2val:0x7e68fcac;
   valaddr_reg:x3; val_offset:722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 722*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e68fcac; op2val:0x7e68fcac;
   valaddr_reg:x3; val_offset:724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 724*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e68fcac; op2val:0x7e68fcac;
   valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x68fcac and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68fcac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e68fcac; op2val:0x7e68fcac;
   valaddr_reg:x3; val_offset:728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 728*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e;
   valaddr_reg:x3; val_offset:730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 730*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e;
   valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e;
   valaddr_reg:x3; val_offset:734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 734*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e;
   valaddr_reg:x3; val_offset:736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 736*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b4e0e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b4e0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b4e0e; op2val:0x7e6b4e0e;
   valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e;
   valaddr_reg:x3; val_offset:740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 740*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e;
   valaddr_reg:x3; val_offset:742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 742*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e;
   valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e;
   valaddr_reg:x3; val_offset:746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 746*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6b9c3e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6b9c3e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6b9c3e; op2val:0x7e6b9c3e;
   valaddr_reg:x3; val_offset:748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 748*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6c05c9; op2val:0x7e6c05c9;
   valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6c05c9; op2val:0x7e6c05c9;
   valaddr_reg:x3; val_offset:752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 752*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6c05c9; op2val:0x7e6c05c9;
   valaddr_reg:x3; val_offset:754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 754*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6c05c9; op2val:0x7e6c05c9;
   valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6c05c9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6c05c9; op2val:0x7e6c05c9;
   valaddr_reg:x3; val_offset:758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 758*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8;
   valaddr_reg:x3; val_offset:760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 760*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8;
   valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8;
   valaddr_reg:x3; val_offset:764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 764*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8;
   valaddr_reg:x3; val_offset:766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 766*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e5bf8 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x6e5bf8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e6e5bf8; op2val:0x7e6e5bf8;
   valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e709985; op2val:0x7e709985;
   valaddr_reg:x3; val_offset:770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 770*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e709985; op2val:0x7e709985;
   valaddr_reg:x3; val_offset:772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 772*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e709985; op2val:0x7e709985;
   valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e709985; op2val:0x7e709985;
   valaddr_reg:x3; val_offset:776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 776*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x709985 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e709985; op2val:0x7e709985;
   valaddr_reg:x3; val_offset:778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 778*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e72bda0; op2val:0x7e72bda0;
   valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e72bda0; op2val:0x7e72bda0;
   valaddr_reg:x3; val_offset:782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 782*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e72bda0; op2val:0x7e72bda0;
   valaddr_reg:x3; val_offset:784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 784*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e72bda0; op2val:0x7e72bda0;
   valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x72bda0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e72bda0; op2val:0x7e72bda0;
   valaddr_reg:x3; val_offset:788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 788*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e7340a9; op2val:0x7e7340a9;
   valaddr_reg:x3; val_offset:790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 790*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e7340a9; op2val:0x7e7340a9;
   valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e7340a9; op2val:0x7e7340a9;
   valaddr_reg:x3; val_offset:794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 794*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e7340a9; op2val:0x7e7340a9;
   valaddr_reg:x3; val_offset:796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 796*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7340a9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7340a9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e7340a9; op2val:0x7e7340a9;
   valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e76b77e; op2val:0x7e76b77e;
   valaddr_reg:x3; val_offset:800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 800*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e76b77e; op2val:0x7e76b77e;
   valaddr_reg:x3; val_offset:802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 802*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e76b77e; op2val:0x7e76b77e;
   valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e76b77e; op2val:0x7e76b77e;
   valaddr_reg:x3; val_offset:806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 806*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76b77e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x76b77e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e76b77e; op2val:0x7e76b77e;
   valaddr_reg:x3; val_offset:808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 808*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e774c1e; op2val:0x7e774c1e;
   valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e774c1e; op2val:0x7e774c1e;
   valaddr_reg:x3; val_offset:812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 812*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e774c1e; op2val:0x7e774c1e;
   valaddr_reg:x3; val_offset:814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 814*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e774c1e; op2val:0x7e774c1e;
   valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774c1e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x774c1e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e774c1e; op2val:0x7e774c1e;
   valaddr_reg:x3; val_offset:818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 818*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e79dd8e; op2val:0x7e79dd8e;
   valaddr_reg:x3; val_offset:820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 820*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e79dd8e; op2val:0x7e79dd8e;
   valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e79dd8e; op2val:0x7e79dd8e;
   valaddr_reg:x3; val_offset:824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 824*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e79dd8e; op2val:0x7e79dd8e;
   valaddr_reg:x3; val_offset:826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 826*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79dd8e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x79dd8e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e79dd8e; op2val:0x7e79dd8e;
   valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e80624f; op2val:0x7e80624f;
   valaddr_reg:x3; val_offset:830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 830*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e80624f; op2val:0x7e80624f;
   valaddr_reg:x3; val_offset:832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 832*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e80624f; op2val:0x7e80624f;
   valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e80624f; op2val:0x7e80624f;
   valaddr_reg:x3; val_offset:836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 836*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00624f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x00624f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e80624f; op2val:0x7e80624f;
   valaddr_reg:x3; val_offset:838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 838*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e823675; op2val:0x7e823675;
   valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e823675; op2val:0x7e823675;
   valaddr_reg:x3; val_offset:842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 842*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e823675; op2val:0x7e823675;
   valaddr_reg:x3; val_offset:844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 844*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e823675; op2val:0x7e823675;
   valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x023675 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x023675 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e823675; op2val:0x7e823675;
   valaddr_reg:x3; val_offset:848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 848*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82ab65; op2val:0x7e82ab65;
   valaddr_reg:x3; val_offset:850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 850*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82ab65; op2val:0x7e82ab65;
   valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82ab65; op2val:0x7e82ab65;
   valaddr_reg:x3; val_offset:854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 854*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82ab65; op2val:0x7e82ab65;
   valaddr_reg:x3; val_offset:856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 856*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02ab65 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02ab65 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82ab65; op2val:0x7e82ab65;
   valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82e795; op2val:0x7e82e795;
   valaddr_reg:x3; val_offset:860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 860*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82e795; op2val:0x7e82e795;
   valaddr_reg:x3; val_offset:862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 862*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82e795; op2val:0x7e82e795;
   valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82e795; op2val:0x7e82e795;
   valaddr_reg:x3; val_offset:866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 866*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02e795 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x02e795 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e82e795; op2val:0x7e82e795;
   valaddr_reg:x3; val_offset:868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 868*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e844224; op2val:0x7e844224;
   valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e844224; op2val:0x7e844224;
   valaddr_reg:x3; val_offset:872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 872*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e844224; op2val:0x7e844224;
   valaddr_reg:x3; val_offset:874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 874*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e844224; op2val:0x7e844224;
   valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x044224 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x044224 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e844224; op2val:0x7e844224;
   valaddr_reg:x3; val_offset:878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 878*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e859ff9; op2val:0x7e859ff9;
   valaddr_reg:x3; val_offset:880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 880*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e859ff9; op2val:0x7e859ff9;
   valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e859ff9; op2val:0x7e859ff9;
   valaddr_reg:x3; val_offset:884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 884*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e859ff9; op2val:0x7e859ff9;
   valaddr_reg:x3; val_offset:886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 886*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x059ff9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x059ff9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e859ff9; op2val:0x7e859ff9;
   valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e884c5b; op2val:0x7e884c5b;
   valaddr_reg:x3; val_offset:890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 890*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e884c5b; op2val:0x7e884c5b;
   valaddr_reg:x3; val_offset:892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 892*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e884c5b; op2val:0x7e884c5b;
   valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e884c5b; op2val:0x7e884c5b;
   valaddr_reg:x3; val_offset:896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 896*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x084c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x084c5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e884c5b; op2val:0x7e884c5b;
   valaddr_reg:x3; val_offset:898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 898*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8901e1; op2val:0x7e8901e1;
   valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8901e1; op2val:0x7e8901e1;
   valaddr_reg:x3; val_offset:902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 902*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8901e1; op2val:0x7e8901e1;
   valaddr_reg:x3; val_offset:904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 904*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8901e1; op2val:0x7e8901e1;
   valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0901e1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0901e1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8901e1; op2val:0x7e8901e1;
   valaddr_reg:x3; val_offset:908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 908*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8eb32c; op2val:0x7e8eb32c;
   valaddr_reg:x3; val_offset:910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 910*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8eb32c; op2val:0x7e8eb32c;
   valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8eb32c; op2val:0x7e8eb32c;
   valaddr_reg:x3; val_offset:914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 914*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8eb32c; op2val:0x7e8eb32c;
   valaddr_reg:x3; val_offset:916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 916*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0eb32c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0eb32c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8eb32c; op2val:0x7e8eb32c;
   valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd;
   valaddr_reg:x3; val_offset:920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 920*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd;
   valaddr_reg:x3; val_offset:922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 922*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd;
   valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd;
   valaddr_reg:x3; val_offset:926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 926*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0fe2cd and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0fe2cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e8fe2cd; op2val:0x7e8fe2cd;
   valaddr_reg:x3; val_offset:928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 928*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9123d8; op2val:0x7e9123d8;
   valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9123d8; op2val:0x7e9123d8;
   valaddr_reg:x3; val_offset:932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 932*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9123d8; op2val:0x7e9123d8;
   valaddr_reg:x3; val_offset:934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 934*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9123d8; op2val:0x7e9123d8;
   valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1123d8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1123d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9123d8; op2val:0x7e9123d8;
   valaddr_reg:x3; val_offset:938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 938*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e91422a; op2val:0x7e91422a;
   valaddr_reg:x3; val_offset:940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 940*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e91422a; op2val:0x7e91422a;
   valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e91422a; op2val:0x7e91422a;
   valaddr_reg:x3; val_offset:944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 944*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e91422a; op2val:0x7e91422a;
   valaddr_reg:x3; val_offset:946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 946*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11422a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x11422a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e91422a; op2val:0x7e91422a;
   valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97246c; op2val:0x7e97246c;
   valaddr_reg:x3; val_offset:950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 950*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97246c; op2val:0x7e97246c;
   valaddr_reg:x3; val_offset:952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 952*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97246c; op2val:0x7e97246c;
   valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97246c; op2val:0x7e97246c;
   valaddr_reg:x3; val_offset:956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 956*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17246c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17246c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97246c; op2val:0x7e97246c;
   valaddr_reg:x3; val_offset:958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 958*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97a40d; op2val:0x7e97a40d;
   valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97a40d; op2val:0x7e97a40d;
   valaddr_reg:x3; val_offset:962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 962*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97a40d; op2val:0x7e97a40d;
   valaddr_reg:x3; val_offset:964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 964*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97a40d; op2val:0x7e97a40d;
   valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17a40d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17a40d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97a40d; op2val:0x7e97a40d;
   valaddr_reg:x3; val_offset:968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 968*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97f3eb; op2val:0x7e97f3eb;
   valaddr_reg:x3; val_offset:970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 970*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97f3eb; op2val:0x7e97f3eb;
   valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97f3eb; op2val:0x7e97f3eb;
   valaddr_reg:x3; val_offset:974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 974*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97f3eb; op2val:0x7e97f3eb;
   valaddr_reg:x3; val_offset:976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 976*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x17f3eb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x17f3eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e97f3eb; op2val:0x7e97f3eb;
   valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9a03fa; op2val:0x7e9a03fa;
   valaddr_reg:x3; val_offset:980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 980*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9a03fa; op2val:0x7e9a03fa;
   valaddr_reg:x3; val_offset:982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 982*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9a03fa; op2val:0x7e9a03fa;
   valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9a03fa; op2val:0x7e9a03fa;
   valaddr_reg:x3; val_offset:986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 986*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a03fa and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a03fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9a03fa; op2val:0x7e9a03fa;
   valaddr_reg:x3; val_offset:988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 988*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9e4d71; op2val:0x7e9e4d71;
   valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9e4d71; op2val:0x7e9e4d71;
   valaddr_reg:x3; val_offset:992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 992*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9e4d71; op2val:0x7e9e4d71;
   valaddr_reg:x3; val_offset:994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 994*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9e4d71; op2val:0x7e9e4d71;
   valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1e4d71 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1e4d71 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7e9e4d71; op2val:0x7e9e4d71;
   valaddr_reg:x3; val_offset:998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 998*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc;
   valaddr_reg:x3; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1000*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc;
   valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc;
   valaddr_reg:x3; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1004*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc;
   valaddr_reg:x3; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1006*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21a1fc and fs2 == 0 and fe2 == 0xfd and fm2 == 0x21a1fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea1a1fc; op2val:0x7ea1a1fc;
   valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea6220b; op2val:0x7ea6220b;
   valaddr_reg:x3; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1010*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea6220b; op2val:0x7ea6220b;
   valaddr_reg:x3; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1012*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea6220b; op2val:0x7ea6220b;
   valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea6220b; op2val:0x7ea6220b;
   valaddr_reg:x3; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1016*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x26220b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea6220b; op2val:0x7ea6220b;
   valaddr_reg:x3; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1018*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea640ba; op2val:0x7ea640ba;
   valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea640ba; op2val:0x7ea640ba;
   valaddr_reg:x3; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1022*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea640ba; op2val:0x7ea640ba;
   valaddr_reg:x3; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1024*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea640ba; op2val:0x7ea640ba;
   valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2640ba and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2640ba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea640ba; op2val:0x7ea640ba;
   valaddr_reg:x3; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1028*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea82619; op2val:0x7ea82619;
   valaddr_reg:x3; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1030*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea82619; op2val:0x7ea82619;
   valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea82619; op2val:0x7ea82619;
   valaddr_reg:x3; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1034*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea82619; op2val:0x7ea82619;
   valaddr_reg:x3; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1036*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x282619 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x282619 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ea82619; op2val:0x7ea82619;
   valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eaae70d; op2val:0x7eaae70d;
   valaddr_reg:x3; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1040*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eaae70d; op2val:0x7eaae70d;
   valaddr_reg:x3; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1042*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eaae70d; op2val:0x7eaae70d;
   valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eaae70d; op2val:0x7eaae70d;
   valaddr_reg:x3; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1046*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ae70d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ae70d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eaae70d; op2val:0x7eaae70d;
   valaddr_reg:x3; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1048*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eab0757; op2val:0x7eab0757;
   valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eab0757; op2val:0x7eab0757;
   valaddr_reg:x3; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1052*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eab0757; op2val:0x7eab0757;
   valaddr_reg:x3; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1054*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eab0757; op2val:0x7eab0757;
   valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b0757 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b0757 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eab0757; op2val:0x7eab0757;
   valaddr_reg:x3; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1058*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eb7de98; op2val:0x7eb7de98;
   valaddr_reg:x3; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1060*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eb7de98; op2val:0x7eb7de98;
   valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eb7de98; op2val:0x7eb7de98;
   valaddr_reg:x3; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1064*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eb7de98; op2val:0x7eb7de98;
   valaddr_reg:x3; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1066*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37de98 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37de98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eb7de98; op2val:0x7eb7de98;
   valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eba0c29; op2val:0x7eba0c29;
   valaddr_reg:x3; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1070*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eba0c29; op2val:0x7eba0c29;
   valaddr_reg:x3; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1072*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eba0c29; op2val:0x7eba0c29;
   valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eba0c29; op2val:0x7eba0c29;
   valaddr_reg:x3; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1076*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a0c29 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3a0c29 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eba0c29; op2val:0x7eba0c29;
   valaddr_reg:x3; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1078*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4;
   valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4;
   valaddr_reg:x3; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1082*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4;
   valaddr_reg:x3; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1084*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4;
   valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c0ad4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3c0ad4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebc0ad4; op2val:0x7ebc0ad4;
   valaddr_reg:x3; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1088*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebd6988; op2val:0x7ebd6988;
   valaddr_reg:x3; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1090*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebd6988; op2val:0x7ebd6988;
   valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebd6988; op2val:0x7ebd6988;
   valaddr_reg:x3; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1094*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebd6988; op2val:0x7ebd6988;
   valaddr_reg:x3; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1096*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d6988 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3d6988 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebd6988; op2val:0x7ebd6988;
   valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f;
   valaddr_reg:x3; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1100*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f;
   valaddr_reg:x3; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1102*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f;
   valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f;
   valaddr_reg:x3; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1106*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3e3f3f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3e3f3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ebe3f3f; op2val:0x7ebe3f3f;
   valaddr_reg:x3; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1108*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e;
   valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e;
   valaddr_reg:x3; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1112*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e;
   valaddr_reg:x3; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1114*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e;
   valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x40dc0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x40dc0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec0dc0e; op2val:0x7ec0dc0e;
   valaddr_reg:x3; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1118*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec1d009; op2val:0x7ec1d009;
   valaddr_reg:x3; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1120*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec1d009; op2val:0x7ec1d009;
   valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec1d009; op2val:0x7ec1d009;
   valaddr_reg:x3; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1124*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec1d009; op2val:0x7ec1d009;
   valaddr_reg:x3; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1126*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41d009 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x41d009 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec1d009; op2val:0x7ec1d009;
   valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec2076b; op2val:0x7ec2076b;
   valaddr_reg:x3; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1130*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec2076b; op2val:0x7ec2076b;
   valaddr_reg:x3; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1132*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec2076b; op2val:0x7ec2076b;
   valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec2076b; op2val:0x7ec2076b;
   valaddr_reg:x3; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1136*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42076b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x42076b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec2076b; op2val:0x7ec2076b;
   valaddr_reg:x3; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1138*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec33c5b; op2val:0x7ec33c5b;
   valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec33c5b; op2val:0x7ec33c5b;
   valaddr_reg:x3; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1142*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec33c5b; op2val:0x7ec33c5b;
   valaddr_reg:x3; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1144*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec33c5b; op2val:0x7ec33c5b;
   valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x433c5b and fs2 == 0 and fe2 == 0xfd and fm2 == 0x433c5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec33c5b; op2val:0x7ec33c5b;
   valaddr_reg:x3; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1148*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec3e270; op2val:0x7ec3e270;
   valaddr_reg:x3; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1150*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec3e270; op2val:0x7ec3e270;
   valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec3e270; op2val:0x7ec3e270;
   valaddr_reg:x3; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1154*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec3e270; op2val:0x7ec3e270;
   valaddr_reg:x3; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1156*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x43e270 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x43e270 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec3e270; op2val:0x7ec3e270;
   valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec47d56; op2val:0x7ec47d56;
   valaddr_reg:x3; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1160*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec47d56; op2val:0x7ec47d56;
   valaddr_reg:x3; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1162*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec47d56; op2val:0x7ec47d56;
   valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec47d56; op2val:0x7ec47d56;
   valaddr_reg:x3; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1166*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x447d56 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x447d56 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec47d56; op2val:0x7ec47d56;
   valaddr_reg:x3; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1168*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec549ce; op2val:0x7ec549ce;
   valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec549ce; op2val:0x7ec549ce;
   valaddr_reg:x3; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1172*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec549ce; op2val:0x7ec549ce;
   valaddr_reg:x3; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1174*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec549ce; op2val:0x7ec549ce;
   valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4549ce and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4549ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec549ce; op2val:0x7ec549ce;
   valaddr_reg:x3; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1178*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec80a54; op2val:0x7ec80a54;
   valaddr_reg:x3; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1180*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec80a54; op2val:0x7ec80a54;
   valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec80a54; op2val:0x7ec80a54;
   valaddr_reg:x3; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1184*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec80a54; op2val:0x7ec80a54;
   valaddr_reg:x3; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1186*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480a54 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x480a54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ec80a54; op2val:0x7ec80a54;
   valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecb057e; op2val:0x7ecb057e;
   valaddr_reg:x3; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1190*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecb057e; op2val:0x7ecb057e;
   valaddr_reg:x3; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1192*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecb057e; op2val:0x7ecb057e;
   valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecb057e; op2val:0x7ecb057e;
   valaddr_reg:x3; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1196*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b057e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4b057e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecb057e; op2val:0x7ecb057e;
   valaddr_reg:x3; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1198*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecec69e; op2val:0x7ecec69e;
   valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecec69e; op2val:0x7ecec69e;
   valaddr_reg:x3; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1202*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecec69e; op2val:0x7ecec69e;
   valaddr_reg:x3; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1204*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecec69e; op2val:0x7ecec69e;
   valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4ec69e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4ec69e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ecec69e; op2val:0x7ecec69e;
   valaddr_reg:x3; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1208*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d;
   valaddr_reg:x3; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1210*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d;
   valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d;
   valaddr_reg:x3; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1214*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d;
   valaddr_reg:x3; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1216*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52eb6d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52eb6d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed2eb6d; op2val:0x7ed2eb6d;
   valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1;
   valaddr_reg:x3; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1220*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1;
   valaddr_reg:x3; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1222*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1;
   valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1;
   valaddr_reg:x3; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1226*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53a9a1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x53a9a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed3a9a1; op2val:0x7ed3a9a1;
   valaddr_reg:x3; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1228*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed78fb8; op2val:0x7ed78fb8;
   valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed78fb8; op2val:0x7ed78fb8;
   valaddr_reg:x3; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1232*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed78fb8; op2val:0x7ed78fb8;
   valaddr_reg:x3; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1234*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed78fb8; op2val:0x7ed78fb8;
   valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x578fb8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x578fb8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ed78fb8; op2val:0x7ed78fb8;
   valaddr_reg:x3; val_offset:1238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1238*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edae136; op2val:0x7edae136;
   valaddr_reg:x3; val_offset:1240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1240*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edae136; op2val:0x7edae136;
   valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edae136; op2val:0x7edae136;
   valaddr_reg:x3; val_offset:1244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1244*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edae136; op2val:0x7edae136;
   valaddr_reg:x3; val_offset:1246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1246*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ae136 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ae136 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edae136; op2val:0x7edae136;
   valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edafcdb; op2val:0x7edafcdb;
   valaddr_reg:x3; val_offset:1250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1250*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edafcdb; op2val:0x7edafcdb;
   valaddr_reg:x3; val_offset:1252*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1252*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edafcdb; op2val:0x7edafcdb;
   valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edafcdb; op2val:0x7edafcdb;
   valaddr_reg:x3; val_offset:1256*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1256*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5afcdb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5afcdb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edafcdb; op2val:0x7edafcdb;
   valaddr_reg:x3; val_offset:1258*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1258*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb1c9d; op2val:0x7edb1c9d;
   valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb1c9d; op2val:0x7edb1c9d;
   valaddr_reg:x3; val_offset:1262*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1262*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb1c9d; op2val:0x7edb1c9d;
   valaddr_reg:x3; val_offset:1264*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1264*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb1c9d; op2val:0x7edb1c9d;
   valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b1c9d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b1c9d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb1c9d; op2val:0x7edb1c9d;
   valaddr_reg:x3; val_offset:1268*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1268*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb2e1a; op2val:0x7edb2e1a;
   valaddr_reg:x3; val_offset:1270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1270*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb2e1a; op2val:0x7edb2e1a;
   valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb2e1a; op2val:0x7edb2e1a;
   valaddr_reg:x3; val_offset:1274*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1274*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb2e1a; op2val:0x7edb2e1a;
   valaddr_reg:x3; val_offset:1276*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1276*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5b2e1a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b2e1a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edb2e1a; op2val:0x7edb2e1a;
   valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1278*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edddf89; op2val:0x7edddf89;
   valaddr_reg:x3; val_offset:1280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1280*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edddf89; op2val:0x7edddf89;
   valaddr_reg:x3; val_offset:1282*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1282*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edddf89; op2val:0x7edddf89;
   valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edddf89; op2val:0x7edddf89;
   valaddr_reg:x3; val_offset:1286*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1286*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ddf89 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5ddf89 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7edddf89; op2val:0x7edddf89;
   valaddr_reg:x3; val_offset:1288*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1288*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ede5495; op2val:0x7ede5495;
   valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ede5495; op2val:0x7ede5495;
   valaddr_reg:x3; val_offset:1292*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1292*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ede5495; op2val:0x7ede5495;
   valaddr_reg:x3; val_offset:1294*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1294*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ede5495; op2val:0x7ede5495;
   valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5e5495 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e5495 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ede5495; op2val:0x7ede5495;
   valaddr_reg:x3; val_offset:1298*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1298*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee51547; op2val:0x7ee51547;
   valaddr_reg:x3; val_offset:1300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1300*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee51547; op2val:0x7ee51547;
   valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee51547; op2val:0x7ee51547;
   valaddr_reg:x3; val_offset:1304*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1304*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee51547; op2val:0x7ee51547;
   valaddr_reg:x3; val_offset:1306*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1306*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x651547 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x651547 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee51547; op2val:0x7ee51547;
   valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee891ae; op2val:0x7ee891ae;
   valaddr_reg:x3; val_offset:1310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1310*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee891ae; op2val:0x7ee891ae;
   valaddr_reg:x3; val_offset:1312*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1312*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee891ae; op2val:0x7ee891ae;
   valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee891ae; op2val:0x7ee891ae;
   valaddr_reg:x3; val_offset:1316*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1316*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6891ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6891ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ee891ae; op2val:0x7ee891ae;
   valaddr_reg:x3; val_offset:1318*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1318*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eeb2e86; op2val:0x7eeb2e86;
   valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eeb2e86; op2val:0x7eeb2e86;
   valaddr_reg:x3; val_offset:1322*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1322*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eeb2e86; op2val:0x7eeb2e86;
   valaddr_reg:x3; val_offset:1324*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1324*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eeb2e86; op2val:0x7eeb2e86;
   valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b2e86 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6b2e86 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7eeb2e86; op2val:0x7eeb2e86;
   valaddr_reg:x3; val_offset:1328*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1328*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef6a41a; op2val:0x7ef6a41a;
   valaddr_reg:x3; val_offset:1330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1330*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef6a41a; op2val:0x7ef6a41a;
   valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef6a41a; op2val:0x7ef6a41a;
   valaddr_reg:x3; val_offset:1334*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1334*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef6a41a; op2val:0x7ef6a41a;
   valaddr_reg:x3; val_offset:1336*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1336*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x76a41a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x76a41a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef6a41a; op2val:0x7ef6a41a;
   valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef83b85; op2val:0x7ef83b85;
   valaddr_reg:x3; val_offset:1340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1340*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef83b85; op2val:0x7ef83b85;
   valaddr_reg:x3; val_offset:1342*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1342*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef83b85; op2val:0x7ef83b85;
   valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef83b85; op2val:0x7ef83b85;
   valaddr_reg:x3; val_offset:1346*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1346*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x783b85 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x783b85 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef83b85; op2val:0x7ef83b85;
   valaddr_reg:x3; val_offset:1348*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1348*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef92786; op2val:0x7ef92786;
   valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef92786; op2val:0x7ef92786;
   valaddr_reg:x3; val_offset:1352*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1352*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef92786; op2val:0x7ef92786;
   valaddr_reg:x3; val_offset:1354*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1354*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef92786; op2val:0x7ef92786;
   valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x792786 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x792786 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7ef92786; op2val:0x7ef92786;
   valaddr_reg:x3; val_offset:1358*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1358*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa3631; op2val:0x7efa3631;
   valaddr_reg:x3; val_offset:1360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1360*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa3631; op2val:0x7efa3631;
   valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa3631; op2val:0x7efa3631;
   valaddr_reg:x3; val_offset:1364*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1364*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa3631; op2val:0x7efa3631;
   valaddr_reg:x3; val_offset:1366*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1366*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a3631 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a3631 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa3631; op2val:0x7efa3631;
   valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa5f3d; op2val:0x7efa5f3d;
   valaddr_reg:x3; val_offset:1370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1370*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa5f3d; op2val:0x7efa5f3d;
   valaddr_reg:x3; val_offset:1372*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1372*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa5f3d; op2val:0x7efa5f3d;
   valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa5f3d; op2val:0x7efa5f3d;
   valaddr_reg:x3; val_offset:1376*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1376*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7a5f3d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7a5f3d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efa5f3d; op2val:0x7efa5f3d;
   valaddr_reg:x3; val_offset:1378*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1378*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efd54da; op2val:0x7efd54da;
   valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efd54da; op2val:0x7efd54da;
   valaddr_reg:x3; val_offset:1382*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1382*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efd54da; op2val:0x7efd54da;
   valaddr_reg:x3; val_offset:1384*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1384*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efd54da; op2val:0x7efd54da;
   valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d54da and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7d54da and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7efd54da; op2val:0x7efd54da;
   valaddr_reg:x3; val_offset:1388*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1388*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00b812; op2val:0x7f00b812;
   valaddr_reg:x3; val_offset:1390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1390*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00b812; op2val:0x7f00b812;
   valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00b812; op2val:0x7f00b812;
   valaddr_reg:x3; val_offset:1394*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1394*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00b812; op2val:0x7f00b812;
   valaddr_reg:x3; val_offset:1396*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1396*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00b812 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00b812 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00b812; op2val:0x7f00b812;
   valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f013cdf; op2val:0x7f013cdf;
   valaddr_reg:x3; val_offset:1400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1400*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f013cdf; op2val:0x7f013cdf;
   valaddr_reg:x3; val_offset:1402*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1402*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f013cdf; op2val:0x7f013cdf;
   valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f013cdf; op2val:0x7f013cdf;
   valaddr_reg:x3; val_offset:1406*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1406*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x013cdf and fs2 == 0 and fe2 == 0xfe and fm2 == 0x013cdf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f013cdf; op2val:0x7f013cdf;
   valaddr_reg:x3; val_offset:1408*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1408*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f017ed0; op2val:0x7f017ed0;
   valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f017ed0; op2val:0x7f017ed0;
   valaddr_reg:x3; val_offset:1412*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1412*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f017ed0; op2val:0x7f017ed0;
   valaddr_reg:x3; val_offset:1414*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1414*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f017ed0; op2val:0x7f017ed0;
   valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x017ed0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x017ed0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f017ed0; op2val:0x7f017ed0;
   valaddr_reg:x3; val_offset:1418*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1418*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0235b2; op2val:0x7f0235b2;
   valaddr_reg:x3; val_offset:1420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1420*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0235b2; op2val:0x7f0235b2;
   valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0235b2; op2val:0x7f0235b2;
   valaddr_reg:x3; val_offset:1424*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1424*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0235b2; op2val:0x7f0235b2;
   valaddr_reg:x3; val_offset:1426*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1426*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235b2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0235b2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0235b2; op2val:0x7f0235b2;
   valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f02dfcb; op2val:0x7f02dfcb;
   valaddr_reg:x3; val_offset:1430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1430*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f02dfcb; op2val:0x7f02dfcb;
   valaddr_reg:x3; val_offset:1432*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1432*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f02dfcb; op2val:0x7f02dfcb;
   valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f02dfcb; op2val:0x7f02dfcb;
   valaddr_reg:x3; val_offset:1436*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1436*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02dfcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02dfcb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f02dfcb; op2val:0x7f02dfcb;
   valaddr_reg:x3; val_offset:1438*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1438*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f03cf7d; op2val:0x7f03cf7d;
   valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f03cf7d; op2val:0x7f03cf7d;
   valaddr_reg:x3; val_offset:1442*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1442*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f03cf7d; op2val:0x7f03cf7d;
   valaddr_reg:x3; val_offset:1444*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1444*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f03cf7d; op2val:0x7f03cf7d;
   valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cf7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x03cf7d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f03cf7d; op2val:0x7f03cf7d;
   valaddr_reg:x3; val_offset:1448*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1448*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0421e7; op2val:0x7f0421e7;
   valaddr_reg:x3; val_offset:1450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1450*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0421e7; op2val:0x7f0421e7;
   valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0421e7; op2val:0x7f0421e7;
   valaddr_reg:x3; val_offset:1454*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1454*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0421e7; op2val:0x7f0421e7;
   valaddr_reg:x3; val_offset:1456*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1456*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0421e7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0421e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0421e7; op2val:0x7f0421e7;
   valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0466fb; op2val:0x7f0466fb;
   valaddr_reg:x3; val_offset:1460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1460*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0466fb; op2val:0x7f0466fb;
   valaddr_reg:x3; val_offset:1462*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1462*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0466fb; op2val:0x7f0466fb;
   valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0466fb; op2val:0x7f0466fb;
   valaddr_reg:x3; val_offset:1466*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1466*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0466fb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0466fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0466fb; op2val:0x7f0466fb;
   valaddr_reg:x3; val_offset:1468*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1468*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f04f88e; op2val:0x7f04f88e;
   valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f04f88e; op2val:0x7f04f88e;
   valaddr_reg:x3; val_offset:1472*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1472*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f04f88e; op2val:0x7f04f88e;
   valaddr_reg:x3; val_offset:1474*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1474*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f04f88e; op2val:0x7f04f88e;
   valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04f88e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x04f88e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f04f88e; op2val:0x7f04f88e;
   valaddr_reg:x3; val_offset:1478*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1478*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f06fbdb; op2val:0x7f06fbdb;
   valaddr_reg:x3; val_offset:1480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1480*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f06fbdb; op2val:0x7f06fbdb;
   valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f06fbdb; op2val:0x7f06fbdb;
   valaddr_reg:x3; val_offset:1484*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1484*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f06fbdb; op2val:0x7f06fbdb;
   valaddr_reg:x3; val_offset:1486*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1486*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06fbdb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06fbdb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f06fbdb; op2val:0x7f06fbdb;
   valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f072c24; op2val:0x7f072c24;
   valaddr_reg:x3; val_offset:1490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1490*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f072c24; op2val:0x7f072c24;
   valaddr_reg:x3; val_offset:1492*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1492*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f072c24; op2val:0x7f072c24;
   valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f072c24; op2val:0x7f072c24;
   valaddr_reg:x3; val_offset:1496*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1496*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x072c24 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x072c24 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f072c24; op2val:0x7f072c24;
   valaddr_reg:x3; val_offset:1498*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1498*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f08a011; op2val:0x7f08a011;
   valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f08a011; op2val:0x7f08a011;
   valaddr_reg:x3; val_offset:1502*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1502*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f08a011; op2val:0x7f08a011;
   valaddr_reg:x3; val_offset:1504*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1504*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f08a011; op2val:0x7f08a011;
   valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08a011 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08a011 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f08a011; op2val:0x7f08a011;
   valaddr_reg:x3; val_offset:1508*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1508*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f093f0c; op2val:0x7f093f0c;
   valaddr_reg:x3; val_offset:1510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1510*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f093f0c; op2val:0x7f093f0c;
   valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f093f0c; op2val:0x7f093f0c;
   valaddr_reg:x3; val_offset:1514*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1514*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f093f0c; op2val:0x7f093f0c;
   valaddr_reg:x3; val_offset:1516*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1516*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x093f0c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x093f0c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f093f0c; op2val:0x7f093f0c;
   valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0a8666; op2val:0x7f0a8666;
   valaddr_reg:x3; val_offset:1520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1520*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0a8666; op2val:0x7f0a8666;
   valaddr_reg:x3; val_offset:1522*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1522*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0a8666; op2val:0x7f0a8666;
   valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0a8666; op2val:0x7f0a8666;
   valaddr_reg:x3; val_offset:1526*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1526*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a8666 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0a8666 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0a8666; op2val:0x7f0a8666;
   valaddr_reg:x3; val_offset:1528*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1528*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0d646b; op2val:0x7f0d646b;
   valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0d646b; op2val:0x7f0d646b;
   valaddr_reg:x3; val_offset:1532*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1532*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0d646b; op2val:0x7f0d646b;
   valaddr_reg:x3; val_offset:1534*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1534*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0d646b; op2val:0x7f0d646b;
   valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d646b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0d646b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0d646b; op2val:0x7f0d646b;
   valaddr_reg:x3; val_offset:1538*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1538*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0ed153; op2val:0x7f0ed153;
   valaddr_reg:x3; val_offset:1540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1540*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0ed153; op2val:0x7f0ed153;
   valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0ed153; op2val:0x7f0ed153;
   valaddr_reg:x3; val_offset:1544*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1544*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0ed153; op2val:0x7f0ed153;
   valaddr_reg:x3; val_offset:1546*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1546*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ed153 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0ed153 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f0ed153; op2val:0x7f0ed153;
   valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f111299; op2val:0x7f111299;
   valaddr_reg:x3; val_offset:1550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1550*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f111299; op2val:0x7f111299;
   valaddr_reg:x3; val_offset:1552*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1552*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f111299; op2val:0x7f111299;
   valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f111299; op2val:0x7f111299;
   valaddr_reg:x3; val_offset:1556*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1556*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x111299 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111299 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f111299; op2val:0x7f111299;
   valaddr_reg:x3; val_offset:1558*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1558*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f117cee; op2val:0x7f117cee;
   valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f117cee; op2val:0x7f117cee;
   valaddr_reg:x3; val_offset:1562*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1562*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f117cee; op2val:0x7f117cee;
   valaddr_reg:x3; val_offset:1564*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1564*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f117cee; op2val:0x7f117cee;
   valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x117cee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x117cee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f117cee; op2val:0x7f117cee;
   valaddr_reg:x3; val_offset:1568*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1568*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f11c013; op2val:0x7f11c013;
   valaddr_reg:x3; val_offset:1570*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1570*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f11c013; op2val:0x7f11c013;
   valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f11c013; op2val:0x7f11c013;
   valaddr_reg:x3; val_offset:1574*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1574*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f11c013; op2val:0x7f11c013;
   valaddr_reg:x3; val_offset:1576*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1576*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11c013 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11c013 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f11c013; op2val:0x7f11c013;
   valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f125b96; op2val:0x7f125b96;
   valaddr_reg:x3; val_offset:1580*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1580*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f125b96; op2val:0x7f125b96;
   valaddr_reg:x3; val_offset:1582*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1582*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f125b96; op2val:0x7f125b96;
   valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f125b96; op2val:0x7f125b96;
   valaddr_reg:x3; val_offset:1586*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1586*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x125b96 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x125b96 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f125b96; op2val:0x7f125b96;
   valaddr_reg:x3; val_offset:1588*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1588*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f12a50c; op2val:0x7f12a50c;
   valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f12a50c; op2val:0x7f12a50c;
   valaddr_reg:x3; val_offset:1592*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1592*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f12a50c; op2val:0x7f12a50c;
   valaddr_reg:x3; val_offset:1594*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1594*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f12a50c; op2val:0x7f12a50c;
   valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a50c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x12a50c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f12a50c; op2val:0x7f12a50c;
   valaddr_reg:x3; val_offset:1598*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1598*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f13f0c0; op2val:0x7f13f0c0;
   valaddr_reg:x3; val_offset:1600*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1600*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f13f0c0; op2val:0x7f13f0c0;
   valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f13f0c0; op2val:0x7f13f0c0;
   valaddr_reg:x3; val_offset:1604*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1604*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f13f0c0; op2val:0x7f13f0c0;
   valaddr_reg:x3; val_offset:1606*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1606*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13f0c0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x13f0c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f13f0c0; op2val:0x7f13f0c0;
   valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f14f204; op2val:0x7f14f204;
   valaddr_reg:x3; val_offset:1610*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1610*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f14f204; op2val:0x7f14f204;
   valaddr_reg:x3; val_offset:1612*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1612*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f14f204; op2val:0x7f14f204;
   valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f14f204; op2val:0x7f14f204;
   valaddr_reg:x3; val_offset:1616*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1616*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f204 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x14f204 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f14f204; op2val:0x7f14f204;
   valaddr_reg:x3; val_offset:1618*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1618*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f150838; op2val:0x7f150838;
   valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f150838; op2val:0x7f150838;
   valaddr_reg:x3; val_offset:1622*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1622*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f150838; op2val:0x7f150838;
   valaddr_reg:x3; val_offset:1624*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1624*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f150838; op2val:0x7f150838;
   valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x150838 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x150838 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f150838; op2val:0x7f150838;
   valaddr_reg:x3; val_offset:1628*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1628*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f16201f; op2val:0x7f16201f;
   valaddr_reg:x3; val_offset:1630*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1630*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f16201f; op2val:0x7f16201f;
   valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f16201f; op2val:0x7f16201f;
   valaddr_reg:x3; val_offset:1634*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1634*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f16201f; op2val:0x7f16201f;
   valaddr_reg:x3; val_offset:1636*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1636*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16201f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x16201f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f16201f; op2val:0x7f16201f;
   valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f167638; op2val:0x7f167638;
   valaddr_reg:x3; val_offset:1640*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1640*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f167638; op2val:0x7f167638;
   valaddr_reg:x3; val_offset:1642*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1642*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f167638; op2val:0x7f167638;
   valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f167638; op2val:0x7f167638;
   valaddr_reg:x3; val_offset:1646*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1646*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167638 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x167638 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f167638; op2val:0x7f167638;
   valaddr_reg:x3; val_offset:1648*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1648*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f17517f; op2val:0x7f17517f;
   valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f17517f; op2val:0x7f17517f;
   valaddr_reg:x3; val_offset:1652*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1652*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f17517f; op2val:0x7f17517f;
   valaddr_reg:x3; val_offset:1654*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1654*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f17517f; op2val:0x7f17517f;
   valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17517f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x17517f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f17517f; op2val:0x7f17517f;
   valaddr_reg:x3; val_offset:1658*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1658*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f18a306; op2val:0x7f18a306;
   valaddr_reg:x3; val_offset:1660*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1660*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f18a306; op2val:0x7f18a306;
   valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f18a306; op2val:0x7f18a306;
   valaddr_reg:x3; val_offset:1664*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1664*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f18a306; op2val:0x7f18a306;
   valaddr_reg:x3; val_offset:1666*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1666*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18a306 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x18a306 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f18a306; op2val:0x7f18a306;
   valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f190af0; op2val:0x7f190af0;
   valaddr_reg:x3; val_offset:1670*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1670*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f190af0; op2val:0x7f190af0;
   valaddr_reg:x3; val_offset:1672*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1672*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f190af0; op2val:0x7f190af0;
   valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f190af0; op2val:0x7f190af0;
   valaddr_reg:x3; val_offset:1676*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1676*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190af0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x190af0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f190af0; op2val:0x7f190af0;
   valaddr_reg:x3; val_offset:1678*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1678*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f191a03; op2val:0x7f191a03;
   valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f191a03; op2val:0x7f191a03;
   valaddr_reg:x3; val_offset:1682*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1682*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f191a03; op2val:0x7f191a03;
   valaddr_reg:x3; val_offset:1684*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1684*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f191a03; op2val:0x7f191a03;
   valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191a03 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x191a03 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f191a03; op2val:0x7f191a03;
   valaddr_reg:x3; val_offset:1688*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1688*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f192dff; op2val:0x7f192dff;
   valaddr_reg:x3; val_offset:1690*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1690*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f192dff; op2val:0x7f192dff;
   valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f192dff; op2val:0x7f192dff;
   valaddr_reg:x3; val_offset:1694*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1694*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f192dff; op2val:0x7f192dff;
   valaddr_reg:x3; val_offset:1696*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1696*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x192dff and fs2 == 0 and fe2 == 0xfe and fm2 == 0x192dff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f192dff; op2val:0x7f192dff;
   valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1a5724; op2val:0x7f1a5724;
   valaddr_reg:x3; val_offset:1700*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1700*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1a5724; op2val:0x7f1a5724;
   valaddr_reg:x3; val_offset:1702*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1702*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1a5724; op2val:0x7f1a5724;
   valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1a5724; op2val:0x7f1a5724;
   valaddr_reg:x3; val_offset:1706*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1706*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a5724 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1a5724 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1a5724; op2val:0x7f1a5724;
   valaddr_reg:x3; val_offset:1708*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1708*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b200c; op2val:0x7f1b200c;
   valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b200c; op2val:0x7f1b200c;
   valaddr_reg:x3; val_offset:1712*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1712*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b200c; op2val:0x7f1b200c;
   valaddr_reg:x3; val_offset:1714*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1714*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b200c; op2val:0x7f1b200c;
   valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b200c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b200c; op2val:0x7f1b200c;
   valaddr_reg:x3; val_offset:1718*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1718*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7;
   valaddr_reg:x3; val_offset:1720*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1720*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7;
   valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7;
   valaddr_reg:x3; val_offset:1724*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1724*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7;
   valaddr_reg:x3; val_offset:1726*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1726*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ad7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5ad7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1b5ad7; op2val:0x7f1b5ad7;
   valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1d53d7; op2val:0x7f1d53d7;
   valaddr_reg:x3; val_offset:1730*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1730*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1d53d7; op2val:0x7f1d53d7;
   valaddr_reg:x3; val_offset:1732*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1732*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1d53d7; op2val:0x7f1d53d7;
   valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1d53d7; op2val:0x7f1d53d7;
   valaddr_reg:x3; val_offset:1736*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1736*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d53d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d53d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1d53d7; op2val:0x7f1d53d7;
   valaddr_reg:x3; val_offset:1738*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1738*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4;
   valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4;
   valaddr_reg:x3; val_offset:1742*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1742*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4;
   valaddr_reg:x3; val_offset:1744*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1744*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4;
   valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dbcd4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1dbcd4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1dbcd4; op2val:0x7f1dbcd4;
   valaddr_reg:x3; val_offset:1748*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1748*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1eee75; op2val:0x7f1eee75;
   valaddr_reg:x3; val_offset:1750*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1750*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1eee75; op2val:0x7f1eee75;
   valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1eee75; op2val:0x7f1eee75;
   valaddr_reg:x3; val_offset:1754*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1754*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1eee75; op2val:0x7f1eee75;
   valaddr_reg:x3; val_offset:1756*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1756*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1eee75 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1eee75 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1eee75; op2val:0x7f1eee75;
   valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f27c7; op2val:0x7f1f27c7;
   valaddr_reg:x3; val_offset:1760*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1760*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f27c7; op2val:0x7f1f27c7;
   valaddr_reg:x3; val_offset:1762*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1762*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f27c7; op2val:0x7f1f27c7;
   valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f27c7; op2val:0x7f1f27c7;
   valaddr_reg:x3; val_offset:1766*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1766*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f27c7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f27c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f27c7; op2val:0x7f1f27c7;
   valaddr_reg:x3; val_offset:1768*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1768*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f5de9; op2val:0x7f1f5de9;
   valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f5de9; op2val:0x7f1f5de9;
   valaddr_reg:x3; val_offset:1772*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1772*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f5de9; op2val:0x7f1f5de9;
   valaddr_reg:x3; val_offset:1774*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1774*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f5de9; op2val:0x7f1f5de9;
   valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f5de9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1f5de9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f1f5de9; op2val:0x7f1f5de9;
   valaddr_reg:x3; val_offset:1778*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1778*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f207786; op2val:0x7f207786;
   valaddr_reg:x3; val_offset:1780*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1780*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f207786; op2val:0x7f207786;
   valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f207786; op2val:0x7f207786;
   valaddr_reg:x3; val_offset:1784*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1784*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f207786; op2val:0x7f207786;
   valaddr_reg:x3; val_offset:1786*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1786*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x207786 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x207786 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f207786; op2val:0x7f207786;
   valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f20d0a1; op2val:0x7f20d0a1;
   valaddr_reg:x3; val_offset:1790*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1790*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f20d0a1; op2val:0x7f20d0a1;
   valaddr_reg:x3; val_offset:1792*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1792*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f20d0a1; op2val:0x7f20d0a1;
   valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f20d0a1; op2val:0x7f20d0a1;
   valaddr_reg:x3; val_offset:1796*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1796*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d0a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d0a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f20d0a1; op2val:0x7f20d0a1;
   valaddr_reg:x3; val_offset:1798*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1798*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f216afe; op2val:0x7f216afe;
   valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f216afe; op2val:0x7f216afe;
   valaddr_reg:x3; val_offset:1802*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1802*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f216afe; op2val:0x7f216afe;
   valaddr_reg:x3; val_offset:1804*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1804*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f216afe; op2val:0x7f216afe;
   valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x216afe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x216afe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f216afe; op2val:0x7f216afe;
   valaddr_reg:x3; val_offset:1808*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1808*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f217f53; op2val:0x7f217f53;
   valaddr_reg:x3; val_offset:1810*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1810*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f217f53; op2val:0x7f217f53;
   valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f217f53; op2val:0x7f217f53;
   valaddr_reg:x3; val_offset:1814*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1814*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f217f53; op2val:0x7f217f53;
   valaddr_reg:x3; val_offset:1816*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1816*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217f53 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217f53 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f217f53; op2val:0x7f217f53;
   valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2372bc; op2val:0x7f2372bc;
   valaddr_reg:x3; val_offset:1820*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1820*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2372bc; op2val:0x7f2372bc;
   valaddr_reg:x3; val_offset:1822*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1822*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2372bc; op2val:0x7f2372bc;
   valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2372bc; op2val:0x7f2372bc;
   valaddr_reg:x3; val_offset:1826*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1826*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2372bc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2372bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2372bc; op2val:0x7f2372bc;
   valaddr_reg:x3; val_offset:1828*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1828*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2467bb; op2val:0x7f2467bb;
   valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2467bb; op2val:0x7f2467bb;
   valaddr_reg:x3; val_offset:1832*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1832*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2467bb; op2val:0x7f2467bb;
   valaddr_reg:x3; val_offset:1834*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1834*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2467bb; op2val:0x7f2467bb;
   valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2467bb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2467bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2467bb; op2val:0x7f2467bb;
   valaddr_reg:x3; val_offset:1838*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1838*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f252cf6; op2val:0x7f252cf6;
   valaddr_reg:x3; val_offset:1840*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1840*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f252cf6; op2val:0x7f252cf6;
   valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f252cf6; op2val:0x7f252cf6;
   valaddr_reg:x3; val_offset:1844*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1844*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f252cf6; op2val:0x7f252cf6;
   valaddr_reg:x3; val_offset:1846*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1846*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x252cf6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x252cf6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f252cf6; op2val:0x7f252cf6;
   valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f25504e; op2val:0x7f25504e;
   valaddr_reg:x3; val_offset:1850*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1850*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f25504e; op2val:0x7f25504e;
   valaddr_reg:x3; val_offset:1852*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1852*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f25504e; op2val:0x7f25504e;
   valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f25504e; op2val:0x7f25504e;
   valaddr_reg:x3; val_offset:1856*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1856*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x25504e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25504e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f25504e; op2val:0x7f25504e;
   valaddr_reg:x3; val_offset:1858*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1858*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f268b6a; op2val:0x7f268b6a;
   valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f268b6a; op2val:0x7f268b6a;
   valaddr_reg:x3; val_offset:1862*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1862*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f268b6a; op2val:0x7f268b6a;
   valaddr_reg:x3; val_offset:1864*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1864*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f268b6a; op2val:0x7f268b6a;
   valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x268b6a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x268b6a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f268b6a; op2val:0x7f268b6a;
   valaddr_reg:x3; val_offset:1868*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1868*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f269d2c; op2val:0x7f269d2c;
   valaddr_reg:x3; val_offset:1870*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1870*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f269d2c; op2val:0x7f269d2c;
   valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f269d2c; op2val:0x7f269d2c;
   valaddr_reg:x3; val_offset:1874*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1874*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f269d2c; op2val:0x7f269d2c;
   valaddr_reg:x3; val_offset:1876*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1876*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269d2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x269d2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f269d2c; op2val:0x7f269d2c;
   valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f28b6bd; op2val:0x7f28b6bd;
   valaddr_reg:x3; val_offset:1880*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1880*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f28b6bd; op2val:0x7f28b6bd;
   valaddr_reg:x3; val_offset:1882*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1882*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f28b6bd; op2val:0x7f28b6bd;
   valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f28b6bd; op2val:0x7f28b6bd;
   valaddr_reg:x3; val_offset:1886*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1886*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28b6bd and fs2 == 0 and fe2 == 0xfe and fm2 == 0x28b6bd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f28b6bd; op2val:0x7f28b6bd;
   valaddr_reg:x3; val_offset:1888*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1888*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296b63; op2val:0x7f296b63;
   valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296b63; op2val:0x7f296b63;
   valaddr_reg:x3; val_offset:1892*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1892*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296b63; op2val:0x7f296b63;
   valaddr_reg:x3; val_offset:1894*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1894*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296b63; op2val:0x7f296b63;
   valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296b63 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296b63 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296b63; op2val:0x7f296b63;
   valaddr_reg:x3; val_offset:1898*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1898*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296f9b; op2val:0x7f296f9b;
   valaddr_reg:x3; val_offset:1900*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1900*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296f9b; op2val:0x7f296f9b;
   valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296f9b; op2val:0x7f296f9b;
   valaddr_reg:x3; val_offset:1904*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1904*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296f9b; op2val:0x7f296f9b;
   valaddr_reg:x3; val_offset:1906*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1906*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x296f9b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x296f9b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f296f9b; op2val:0x7f296f9b;
   valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2989af; op2val:0x7f2989af;
   valaddr_reg:x3; val_offset:1910*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1910*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2989af; op2val:0x7f2989af;
   valaddr_reg:x3; val_offset:1912*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1912*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2989af; op2val:0x7f2989af;
   valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2989af; op2val:0x7f2989af;
   valaddr_reg:x3; val_offset:1916*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1916*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2989af and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2989af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2989af; op2val:0x7f2989af;
   valaddr_reg:x3; val_offset:1918*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1918*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2a257f; op2val:0x7f2a257f;
   valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2a257f; op2val:0x7f2a257f;
   valaddr_reg:x3; val_offset:1922*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1922*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2a257f; op2val:0x7f2a257f;
   valaddr_reg:x3; val_offset:1924*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1924*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2a257f; op2val:0x7f2a257f;
   valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a257f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2a257f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2a257f; op2val:0x7f2a257f;
   valaddr_reg:x3; val_offset:1928*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1928*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b0708; op2val:0x7f2b0708;
   valaddr_reg:x3; val_offset:1930*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1930*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b0708; op2val:0x7f2b0708;
   valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b0708; op2val:0x7f2b0708;
   valaddr_reg:x3; val_offset:1934*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1934*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b0708; op2val:0x7f2b0708;
   valaddr_reg:x3; val_offset:1936*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1936*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b0708 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b0708 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b0708; op2val:0x7f2b0708;
   valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b8d52; op2val:0x7f2b8d52;
   valaddr_reg:x3; val_offset:1940*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1940*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b8d52; op2val:0x7f2b8d52;
   valaddr_reg:x3; val_offset:1942*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1942*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b8d52; op2val:0x7f2b8d52;
   valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b8d52; op2val:0x7f2b8d52;
   valaddr_reg:x3; val_offset:1946*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1946*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8d52 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b8d52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b8d52; op2val:0x7f2b8d52;
   valaddr_reg:x3; val_offset:1948*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1948*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b9a07; op2val:0x7f2b9a07;
   valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b9a07; op2val:0x7f2b9a07;
   valaddr_reg:x3; val_offset:1952*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1952*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b9a07; op2val:0x7f2b9a07;
   valaddr_reg:x3; val_offset:1954*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1954*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b9a07; op2val:0x7f2b9a07;
   valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2b9a07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2b9a07; op2val:0x7f2b9a07;
   valaddr_reg:x3; val_offset:1958*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1958*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc;
   valaddr_reg:x3; val_offset:1960*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1960*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc;
   valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc;
   valaddr_reg:x3; val_offset:1964*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1964*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc;
   valaddr_reg:x3; val_offset:1966*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1966*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcfc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2cbcfc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2cbcfc; op2val:0x7f2cbcfc;
   valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2d12f5; op2val:0x7f2d12f5;
   valaddr_reg:x3; val_offset:1970*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1970*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2d12f5; op2val:0x7f2d12f5;
   valaddr_reg:x3; val_offset:1972*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1972*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2d12f5; op2val:0x7f2d12f5;
   valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2d12f5; op2val:0x7f2d12f5;
   valaddr_reg:x3; val_offset:1976*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1976*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d12f5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d12f5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2d12f5; op2val:0x7f2d12f5;
   valaddr_reg:x3; val_offset:1978*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1978*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e21e3; op2val:0x7f2e21e3;
   valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e21e3; op2val:0x7f2e21e3;
   valaddr_reg:x3; val_offset:1982*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1982*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e21e3; op2val:0x7f2e21e3;
   valaddr_reg:x3; val_offset:1984*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1984*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e21e3; op2val:0x7f2e21e3;
   valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e21e3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e21e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e21e3; op2val:0x7f2e21e3;
   valaddr_reg:x3; val_offset:1988*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1988*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e921d; op2val:0x7f2e921d;
   valaddr_reg:x3; val_offset:1990*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 1990*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e921d; op2val:0x7f2e921d;
   valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e921d; op2val:0x7f2e921d;
   valaddr_reg:x3; val_offset:1994*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 1994*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e921d; op2val:0x7f2e921d;
   valaddr_reg:x3; val_offset:1996*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 1996*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e921d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e921d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2e921d; op2val:0x7f2e921d;
   valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ecffe; op2val:0x7f2ecffe;
   valaddr_reg:x3; val_offset:2000*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ecffe; op2val:0x7f2ecffe;
   valaddr_reg:x3; val_offset:2002*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2002*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ecffe; op2val:0x7f2ecffe;
   valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ecffe; op2val:0x7f2ecffe;
   valaddr_reg:x3; val_offset:2006*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2006*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ecffe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ecffe; op2val:0x7f2ecffe;
   valaddr_reg:x3; val_offset:2008*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2008*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ee8de; op2val:0x7f2ee8de;
   valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ee8de; op2val:0x7f2ee8de;
   valaddr_reg:x3; val_offset:2012*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2012*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ee8de; op2val:0x7f2ee8de;
   valaddr_reg:x3; val_offset:2014*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2014*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ee8de; op2val:0x7f2ee8de;
   valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ee8de and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2ee8de and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2ee8de; op2val:0x7f2ee8de;
   valaddr_reg:x3; val_offset:2018*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2018*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a;
   valaddr_reg:x3; val_offset:2020*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2020*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a;
   valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a;
   valaddr_reg:x3; val_offset:2024*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2024*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a;
   valaddr_reg:x3; val_offset:2026*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2026*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f5f0a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f5f0a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f2f5f0a; op2val:0x7f2f5f0a;
   valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f30843b; op2val:0x7f30843b;
   valaddr_reg:x3; val_offset:2030*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2030*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f30843b; op2val:0x7f30843b;
   valaddr_reg:x3; val_offset:2032*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2032*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f30843b; op2val:0x7f30843b;
   valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f30843b; op2val:0x7f30843b;
   valaddr_reg:x3; val_offset:2036*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2036*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30843b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30843b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f30843b; op2val:0x7f30843b;
   valaddr_reg:x3; val_offset:2038*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2038*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f319ce6; op2val:0x7f319ce6;
   valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f319ce6; op2val:0x7f319ce6;
   valaddr_reg:x3; val_offset:2042*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2042*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f319ce6; op2val:0x7f319ce6;
   valaddr_reg:x3; val_offset:2044*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2044*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f319ce6; op2val:0x7f319ce6;
   valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2046*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x319ce6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x319ce6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f319ce6; op2val:0x7f319ce6;
   valaddr_reg:x3; val_offset:2048*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2048*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f32fae0; op2val:0x7f32fae0;
   valaddr_reg:x3; val_offset:2050*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2050*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f32fae0; op2val:0x7f32fae0;
   valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f32fae0; op2val:0x7f32fae0;
   valaddr_reg:x3; val_offset:2054*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2054*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f32fae0; op2val:0x7f32fae0;
   valaddr_reg:x3; val_offset:2056*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2056*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32fae0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x32fae0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f32fae0; op2val:0x7f32fae0;
   valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f33cbed; op2val:0x7f33cbed;
   valaddr_reg:x3; val_offset:2060*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2060*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f33cbed; op2val:0x7f33cbed;
   valaddr_reg:x3; val_offset:2062*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2062*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f33cbed; op2val:0x7f33cbed;
   valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f33cbed; op2val:0x7f33cbed;
   valaddr_reg:x3; val_offset:2066*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2066*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33cbed and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33cbed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f33cbed; op2val:0x7f33cbed;
   valaddr_reg:x3; val_offset:2068*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2068*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f34510e; op2val:0x7f34510e;
   valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f34510e; op2val:0x7f34510e;
   valaddr_reg:x3; val_offset:2072*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2072*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f34510e; op2val:0x7f34510e;
   valaddr_reg:x3; val_offset:2074*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2074*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f34510e; op2val:0x7f34510e;
   valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34510e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x34510e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f34510e; op2val:0x7f34510e;
   valaddr_reg:x3; val_offset:2078*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2078*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f349efb; op2val:0x7f349efb;
   valaddr_reg:x3; val_offset:2080*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2080*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f349efb; op2val:0x7f349efb;
   valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f349efb; op2val:0x7f349efb;
   valaddr_reg:x3; val_offset:2084*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2084*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f349efb; op2val:0x7f349efb;
   valaddr_reg:x3; val_offset:2086*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2086*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x349efb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x349efb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f349efb; op2val:0x7f349efb;
   valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f364073; op2val:0x7f364073;
   valaddr_reg:x3; val_offset:2090*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2090*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f364073; op2val:0x7f364073;
   valaddr_reg:x3; val_offset:2092*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2092*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f364073; op2val:0x7f364073;
   valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f364073; op2val:0x7f364073;
   valaddr_reg:x3; val_offset:2096*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2096*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x364073 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x364073 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f364073; op2val:0x7f364073;
   valaddr_reg:x3; val_offset:2098*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2098*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f373a1e; op2val:0x7f373a1e;
   valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f373a1e; op2val:0x7f373a1e;
   valaddr_reg:x3; val_offset:2102*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2102*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f373a1e; op2val:0x7f373a1e;
   valaddr_reg:x3; val_offset:2104*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2104*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f373a1e; op2val:0x7f373a1e;
   valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x373a1e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x373a1e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f373a1e; op2val:0x7f373a1e;
   valaddr_reg:x3; val_offset:2108*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2108*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f37c42d; op2val:0x7f37c42d;
   valaddr_reg:x3; val_offset:2110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2110*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f37c42d; op2val:0x7f37c42d;
   valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f37c42d; op2val:0x7f37c42d;
   valaddr_reg:x3; val_offset:2114*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2114*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f37c42d; op2val:0x7f37c42d;
   valaddr_reg:x3; val_offset:2116*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2116*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c42d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x37c42d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f37c42d; op2val:0x7f37c42d;
   valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f383655; op2val:0x7f383655;
   valaddr_reg:x3; val_offset:2120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2120*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f383655; op2val:0x7f383655;
   valaddr_reg:x3; val_offset:2122*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2122*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f383655; op2val:0x7f383655;
   valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f383655; op2val:0x7f383655;
   valaddr_reg:x3; val_offset:2126*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2126*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x383655 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x383655 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f383655; op2val:0x7f383655;
   valaddr_reg:x3; val_offset:2128*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2128*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3855ca; op2val:0x7f3855ca;
   valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3855ca; op2val:0x7f3855ca;
   valaddr_reg:x3; val_offset:2132*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2132*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3855ca; op2val:0x7f3855ca;
   valaddr_reg:x3; val_offset:2134*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2134*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3855ca; op2val:0x7f3855ca;
   valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3855ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3855ca; op2val:0x7f3855ca;
   valaddr_reg:x3; val_offset:2138*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2138*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f38f857; op2val:0x7f38f857;
   valaddr_reg:x3; val_offset:2140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2140*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f38f857; op2val:0x7f38f857;
   valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f38f857; op2val:0x7f38f857;
   valaddr_reg:x3; val_offset:2144*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2144*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f38f857; op2val:0x7f38f857;
   valaddr_reg:x3; val_offset:2146*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2146*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f857 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x38f857 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f38f857; op2val:0x7f38f857;
   valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f39d661; op2val:0x7f39d661;
   valaddr_reg:x3; val_offset:2150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2150*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f39d661; op2val:0x7f39d661;
   valaddr_reg:x3; val_offset:2152*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2152*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f39d661; op2val:0x7f39d661;
   valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f39d661; op2val:0x7f39d661;
   valaddr_reg:x3; val_offset:2156*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2156*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39d661 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39d661 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f39d661; op2val:0x7f39d661;
   valaddr_reg:x3; val_offset:2158*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2158*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3a336f; op2val:0x7f3a336f;
   valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3a336f; op2val:0x7f3a336f;
   valaddr_reg:x3; val_offset:2162*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2162*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3a336f; op2val:0x7f3a336f;
   valaddr_reg:x3; val_offset:2164*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2164*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3a336f; op2val:0x7f3a336f;
   valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a336f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3a336f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3a336f; op2val:0x7f3a336f;
   valaddr_reg:x3; val_offset:2168*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2168*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3c26a4; op2val:0x7f3c26a4;
   valaddr_reg:x3; val_offset:2170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2170*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3c26a4; op2val:0x7f3c26a4;
   valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3c26a4; op2val:0x7f3c26a4;
   valaddr_reg:x3; val_offset:2174*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2174*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3c26a4; op2val:0x7f3c26a4;
   valaddr_reg:x3; val_offset:2176*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2176*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c26a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3c26a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3c26a4; op2val:0x7f3c26a4;
   valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2;
   valaddr_reg:x3; val_offset:2180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2180*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2;
   valaddr_reg:x3; val_offset:2182*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2182*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2;
   valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2;
   valaddr_reg:x3; val_offset:2186*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2186*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ca7f2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3ca7f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3ca7f2; op2val:0x7f3ca7f2;
   valaddr_reg:x3; val_offset:2188*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2188*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4;
   valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4;
   valaddr_reg:x3; val_offset:2192*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2192*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4;
   valaddr_reg:x3; val_offset:2194*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2194*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4;
   valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cc5a4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cc5a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cc5a4; op2val:0x7f3cc5a4;
   valaddr_reg:x3; val_offset:2198*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2198*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cceee; op2val:0x7f3cceee;
   valaddr_reg:x3; val_offset:2200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2200*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cceee; op2val:0x7f3cceee;
   valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cceee; op2val:0x7f3cceee;
   valaddr_reg:x3; val_offset:2204*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2204*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cceee; op2val:0x7f3cceee;
   valaddr_reg:x3; val_offset:2206*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2206*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cceee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3cceee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3cceee; op2val:0x7f3cceee;
   valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3d8377; op2val:0x7f3d8377;
   valaddr_reg:x3; val_offset:2210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2210*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3d8377; op2val:0x7f3d8377;
   valaddr_reg:x3; val_offset:2212*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2212*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3d8377; op2val:0x7f3d8377;
   valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3d8377; op2val:0x7f3d8377;
   valaddr_reg:x3; val_offset:2216*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2216*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d8377 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3d8377 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3d8377; op2val:0x7f3d8377;
   valaddr_reg:x3; val_offset:2218*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2218*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3db9f6; op2val:0x7f3db9f6;
   valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3db9f6; op2val:0x7f3db9f6;
   valaddr_reg:x3; val_offset:2222*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2222*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3db9f6; op2val:0x7f3db9f6;
   valaddr_reg:x3; val_offset:2224*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2224*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3db9f6; op2val:0x7f3db9f6;
   valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3db9f6 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3db9f6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3db9f6; op2val:0x7f3db9f6;
   valaddr_reg:x3; val_offset:2228*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2228*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3e917d; op2val:0x7f3e917d;
   valaddr_reg:x3; val_offset:2230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2230*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3e917d; op2val:0x7f3e917d;
   valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3e917d; op2val:0x7f3e917d;
   valaddr_reg:x3; val_offset:2234*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2234*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3e917d; op2val:0x7f3e917d;
   valaddr_reg:x3; val_offset:2236*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2236*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e917d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e917d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f3e917d; op2val:0x7f3e917d;
   valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 128, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:2240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 2240*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:2242*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 32, 0, x3, 2242*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 64, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x4d182e and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x4d182e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7c4d182e; op2val:0x7c4d182e;
   valaddr_reg:x3; val_offset:2246*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 96, 0, x3, 2246*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2088751130,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2089891321,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2090620640,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2091638999,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2092068149,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2094276718,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096327988,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096490387,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2096766265,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2097518539,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2098466798,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100062503,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2100598398,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103499172,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2103889016,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105145087,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105220483,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2105676190,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2106600214,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107503623,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107648664,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107663686,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2107910664,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108100310,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108173485,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108738596,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2108784466,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109321181,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2109747898,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2110776371,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2111895320,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2112672225,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113204546,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113220430,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113281036,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114003619,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114248355,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114412863,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2114459942,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115649870,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2115896935,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116442412,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116493714,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116552217,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116643756,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2116774419,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117054587,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117272132,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117294539,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117350447,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117538397,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117691688,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117809414,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2117876793,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118242206,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118253697,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118389977,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119093887,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119393153,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2119491672,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120125793,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120178135,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120442432,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120809644,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120961550,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2120981566,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121008585,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121161720,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121308549,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121448864,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121482409,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121709438,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121747486,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2121915790,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122342991,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122462837,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122492773,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122508181,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122596900,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122686457,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122861659,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2122908129,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123281196,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123358925,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123441112,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123448874,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123834476,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123867149,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2123887595,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124022778,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124303729,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124521980,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124816907,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124824762,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2124949017,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125129485,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125137751,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2125979288,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126122025,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126252756,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126342536,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126397247,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126568462,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126630921,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126645099,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126724187,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126766704,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126806358,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2126858702,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127039060,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127234430,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127480478,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127752045,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2127800737,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128056248,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128273718,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128280795,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128288925,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128293402,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128469897,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128499861,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2128942407,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129170862,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2129342086,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130093082,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130197381,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130257798,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130327089,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130337597,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130531546,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130753554,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130787551,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130804432,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130851250,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130894795,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130956157,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130977255,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2130994939,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131032206,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131164123,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131176484,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131271697,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131312396,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131396198,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131584107,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131677523,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131825305,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131852526,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131869715,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131909526,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2131928332,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132013248,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132079108,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132084792,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132156447,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132178488,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132234623,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132321030,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132347632,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132351491,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132356607,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132432676,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132499159,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132628439,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132655316,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132733557,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132748231,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132762089,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132834182,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132856993,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132896510,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2132901715,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133029564,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133092283,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133142774,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133151822,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133232490,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133237036,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133374653,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133420899,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133421979,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133428655,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133468543,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133526280,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133560658,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133638396,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133660405,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133729763,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133758493,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133780702,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133810954,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133886011,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2133957862,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134047456,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134100973,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134135054,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134155003,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134261875,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134325790,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134361133,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134390357,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134440023,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134496865,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134520687,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134648484,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134681586,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134689188,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134691566,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134737783,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134751734,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2134806909,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
NAN_BOXED(2085427246,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 200*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
