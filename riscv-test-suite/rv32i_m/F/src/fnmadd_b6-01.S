
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b6 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b6)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rd == rs2 == rs3 != rs1, rs1==f25, rs2==f29, rs3==f29, rd==f29,fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f25; op2:f29; op3:f29; dest:f29; op1val:0xa88be86; op2val:0x427e6538;
op3val:0x427e6538; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f29, f25, f29, f29, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f8, rs2==f8, rs3==f0, rd==f16,fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f8; op2:f8; op3:f0; dest:f16; op1val:0xa88be86; op2val:0xa88be86;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f16, f8, f8, f0, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f16, rs2==f27, rs3==f20, rd==f20,fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f16; op2:f27; op3:f20; dest:f20; op1val:0xa88be86; op2val:0x427e6538;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f20, f16, f27, f20, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f6, rs2==f1, rs3==f1, rd==f12,fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f6; op2:f1; op3:f1; dest:f12; op1val:0xa88be86; op2val:0x427e6538;
op3val:0x427e6538; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f12, f6, f1, f1, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f13, rs2==f9, rs3==f11, rd==f13,fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f13; op2:f9; op3:f11; dest:f13; op1val:0xa88be86; op2val:0x427e6538;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f13, f13, f9, f11, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f2, rs2==f20, rs3==f30, rd==f23,fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f2; op2:f20; op3:f30; dest:f23; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc8cd523; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f23, f2, f20, f30, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f29, rs2==f10, rs3==f14, rd==f10,fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f29; op2:f10; op3:f14; dest:f10; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc8cd523; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f10, f29, f10, f14, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 == rd != rs3, rs1==f22, rs2==f22, rs3==f15, rd==f22,fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f22; op2:f22; op3:f15; dest:f22; op1val:0xc307f67; op2val:0xc307f67;
op3val:0xc8cd523; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f22, f22, f22, f15, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f10, rs2==f19, rs3==f10, rd==f17,fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f10; op2:f19; op3:f10; dest:f17; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc307f67; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f17, f10, f19, f10, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f21, rs2==f25, rs3==f21, rd==f21,fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f21; op2:f25; op3:f21; dest:f21; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc307f67; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f21, f21, f25, f21, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 != rd, rs1==f17, rs2==f17, rs3==f17, rd==f31,fs1 == 0 and fe1 == 0x19 and fm1 == 0x285493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x674cf0 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1816e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f17; op2:f17; op3:f17; dest:f31; op1val:0xca85493; op2val:0xca85493;
op3val:0xca85493; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f17, f17, f17, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 == rd, rs1==f5, rs2==f5, rs3==f5, rd==f5,fs1 == 0 and fe1 == 0x19 and fm1 == 0x285493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x674cf0 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1816e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f5; op2:f5; op3:f5; dest:f5; op1val:0xca85493; op2val:0xca85493;
op3val:0xca85493; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f5, f5, f5, f5, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f18, rs2==f21, rs3==f19, rd==f26,fs1 == 0 and fe1 == 0x19 and fm1 == 0x285493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x674cf0 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1816e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f18; op2:f21; op3:f19; dest:f26; op1val:0xca85493; op2val:0x3f674cf0;
op3val:0xc9816e8; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f26, f18, f21, f19, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f1, rs2==f30, rs3==f2, rd==f3,fs1 == 0 and fe1 == 0x19 and fm1 == 0x285493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x674cf0 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1816e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f1; op2:f30; op3:f2; dest:f3; op1val:0xca85493; op2val:0x3f674cf0;
op3val:0xc9816e8; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f3, f1, f30, f2, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f27, rs2==f31, rs3==f18, rd==f24,fs1 == 0 and fe1 == 0x19 and fm1 == 0x285493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x674cf0 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1816e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f27; op2:f31; op3:f18; dest:f24; op1val:0xca85493; op2val:0x3f674cf0;
op3val:0xc9816e8; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f24, f27, f31, f18, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f7, rs2==f11, rs3==f25, rd==f6,fs1 == 0 and fe1 == 0x19 and fm1 == 0x4388ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x52d0ea and fs3 == 0 and fe3 == 0x16 and fm3 == 0x2105b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f7; op2:f11; op3:f25; dest:f6; op1val:0xcc388ad; op2val:0x3dd2d0ea;
op3val:0xb2105b0; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f6, f7, f11, f25, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f20, rs2==f0, rs3==f22, rd==f11,fs1 == 0 and fe1 == 0x19 and fm1 == 0x4388ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x52d0ea and fs3 == 0 and fe3 == 0x16 and fm3 == 0x2105b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f20; op2:f0; op3:f22; dest:f11; op1val:0xcc388ad; op2val:0x3dd2d0ea;
op3val:0xb2105b0; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f11, f20, f0, f22, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f3, rs2==f12, rs3==f16, rd==f28,fs1 == 0 and fe1 == 0x19 and fm1 == 0x4388ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x52d0ea and fs3 == 0 and fe3 == 0x16 and fm3 == 0x2105b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f3; op2:f12; op3:f16; dest:f28; op1val:0xcc388ad; op2val:0x3dd2d0ea;
op3val:0xb2105b0; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f28, f3, f12, f16, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f23, rs2==f14, rs3==f24, rd==f27,fs1 == 0 and fe1 == 0x19 and fm1 == 0x4388ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x52d0ea and fs3 == 0 and fe3 == 0x16 and fm3 == 0x2105b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f23; op2:f14; op3:f24; dest:f27; op1val:0xcc388ad; op2val:0x3dd2d0ea;
op3val:0xb2105b0; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f27, f23, f14, f24, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f15, rs2==f7, rs3==f6, rd==f1,fs1 == 0 and fe1 == 0x19 and fm1 == 0x4388ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x52d0ea and fs3 == 0 and fe3 == 0x16 and fm3 == 0x2105b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f15; op2:f7; op3:f6; dest:f1; op1val:0xcc388ad; op2val:0x3dd2d0ea;
op3val:0xb2105b0; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f1, f15, f7, f6, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f9, rs2==f3, rs3==f13, rd==f25,fs1 == 0 and fe1 == 0x19 and fm1 == 0x63c101 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x556a2f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3dde0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f9; op2:f3; op3:f13; dest:f25; op1val:0xce3c101; op2val:0x3fd56a2f;
op3val:0xd3dde0e; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f25, f9, f3, f13, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f24, rs2==f2, rs3==f26, rd==f8,fs1 == 0 and fe1 == 0x19 and fm1 == 0x63c101 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x556a2f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3dde0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f24; op2:f2; op3:f26; dest:f8; op1val:0xce3c101; op2val:0x3fd56a2f;
op3val:0xd3dde0e; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f8, f24, f2, f26, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f14, rs2==f6, rs3==f3, rd==f4,fs1 == 0 and fe1 == 0x19 and fm1 == 0x63c101 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x556a2f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3dde0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f14; op2:f6; op3:f3; dest:f4; op1val:0xce3c101; op2val:0x3fd56a2f;
op3val:0xd3dde0e; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f4, f14, f6, f3, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f26, rs2==f16, rs3==f9, rd==f0,fs1 == 0 and fe1 == 0x19 and fm1 == 0x63c101 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x556a2f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3dde0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f26; op2:f16; op3:f9; dest:f0; op1val:0xce3c101; op2val:0x3fd56a2f;
op3val:0xd3dde0e; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f0, f26, f16, f9, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f0, rs2==f4, rs3==f23, rd==f15,fs1 == 0 and fe1 == 0x19 and fm1 == 0x63c101 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x556a2f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3dde0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f0; op2:f4; op3:f23; dest:f15; op1val:0xce3c101; op2val:0x3fd56a2f;
op3val:0xd3dde0e; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f15, f0, f4, f23, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f31, rs2==f23, rs3==f12, rd==f30,fs1 == 0 and fe1 == 0x1a and fm1 == 0x002c46 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c78e and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01f472 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f31; op2:f23; op3:f12; dest:f30; op1val:0xd002c46; op2val:0x4001c78e;
op3val:0xd81f472; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f30, f31, f23, f12, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f11, rs2==f13, rs3==f28, rd==f9,fs1 == 0 and fe1 == 0x1a and fm1 == 0x002c46 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c78e and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01f472 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f11; op2:f13; op3:f28; dest:f9; op1val:0xd002c46; op2val:0x4001c78e;
op3val:0xd81f472; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f9, f11, f13, f28, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f4, rs2==f26, rs3==f31, rd==f19,fs1 == 0 and fe1 == 0x1a and fm1 == 0x002c46 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c78e and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01f472 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f4; op2:f26; op3:f31; dest:f19; op1val:0xd002c46; op2val:0x4001c78e;
op3val:0xd81f472; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f19, f4, f26, f31, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f19, rs2==f24, rs3==f8, rd==f14,fs1 == 0 and fe1 == 0x1a and fm1 == 0x002c46 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c78e and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01f472 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f19; op2:f24; op3:f8; dest:f14; op1val:0xd002c46; op2val:0x4001c78e;
op3val:0xd81f472; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f14, f19, f24, f8, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f30, rs2==f18, rs3==f4, rd==f7,fs1 == 0 and fe1 == 0x1a and fm1 == 0x002c46 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c78e and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01f472 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f18; op3:f4; dest:f7; op1val:0xd002c46; op2val:0x4001c78e;
op3val:0xd81f472; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f7, f30, f18, f4, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f12, rs2==f15, rs3==f7, rd==f2,fs1 == 0 and fe1 == 0x1a and fm1 == 0x1049ac and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06abc4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x17cec0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f12; op2:f15; op3:f7; dest:f2; op1val:0xd1049ac; op2val:0x4006abc4;
op3val:0xd97cec0; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f2, f12, f15, f7, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f28,fs1 == 0 and fe1 == 0x1a and fm1 == 0x1049ac and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06abc4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x17cec0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f28; op2:f30; op3:f31; dest:f22; op1val:0xd1049ac; op2val:0x4006abc4;
op3val:0xd97cec0; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f22, f28, f30, f31, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// rs2==f28,fs1 == 0 and fe1 == 0x1a and fm1 == 0x1049ac and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06abc4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x17cec0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f7; op2:f28; op3:f4; dest:f9; op1val:0xd1049ac; op2val:0x4006abc4;
op3val:0xd97cec0; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f9, f7, f28, f4, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// rs3==f27,fs1 == 0 and fe1 == 0x1a and fm1 == 0x1049ac and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06abc4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x17cec0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f8; op2:f7; op3:f27; dest:f19; op1val:0xd1049ac; op2val:0x4006abc4;
op3val:0xd97cec0; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f19, f8, f7, f27, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// rd==f18,fs1 == 0 and fe1 == 0x1a and fm1 == 0x1049ac and fs2 == 0 and fe2 == 0x80 and fm2 == 0x06abc4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x17cec0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f3; op2:f6; op3:f17; dest:f18; op1val:0xd1049ac; op2val:0x4006abc4;
op3val:0xd97cec0; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f18, f3, f6, f17, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x249c19 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42be13 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7a7107 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd249c19; op2val:0x3f42be13;
op3val:0xcfa7107; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x249c19 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42be13 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7a7107 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd249c19; op2val:0x3f42be13;
op3val:0xcfa7107; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x249c19 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42be13 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7a7107 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd249c19; op2val:0x3f42be13;
op3val:0xcfa7107; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x249c19 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42be13 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7a7107 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd249c19; op2val:0x3f42be13;
op3val:0xcfa7107; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x249c19 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42be13 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7a7107 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd249c19; op2val:0x3f42be13;
op3val:0xcfa7107; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x29c831 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x355a3f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x708ccb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd29c831; op2val:0x3fb55a3f;
op3val:0xd708ccb; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x29c831 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x355a3f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x708ccb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd29c831; op2val:0x3fb55a3f;
op3val:0xd708ccb; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x29c831 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x355a3f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x708ccb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd29c831; op2val:0x3fb55a3f;
op3val:0xd708ccb; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x29c831 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x355a3f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x708ccb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd29c831; op2val:0x3fb55a3f;
op3val:0xd708ccb; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x29c831 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x355a3f and fs3 == 0 and fe3 == 0x1a and fm3 == 0x708ccb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd29c831; op2val:0x3fb55a3f;
op3val:0xd708ccb; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x3d99bd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x461886 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x12b712 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd3d99bd; op2val:0x3fc61886;
op3val:0xd92b712; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x3d99bd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x461886 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x12b712 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd3d99bd; op2val:0x3fc61886;
op3val:0xd92b712; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x3d99bd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x461886 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x12b712 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd3d99bd; op2val:0x3fc61886;
op3val:0xd92b712; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x3d99bd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x461886 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x12b712 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd3d99bd; op2val:0x3fc61886;
op3val:0xd92b712; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x3d99bd and fs2 == 0 and fe2 == 0x7f and fm2 == 0x461886 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x12b712 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd3d99bd; op2val:0x3fc61886;
op3val:0xd92b712; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b0ecf and fs2 == 0 and fe2 == 0x7b and fm2 == 0x567a4f and fs3 == 0 and fe3 == 0x17 and fm3 == 0x2a1f65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b0ecf; op2val:0x3dd67a4f;
op3val:0xbaa1f65; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b0ecf and fs2 == 0 and fe2 == 0x7b and fm2 == 0x567a4f and fs3 == 0 and fe3 == 0x17 and fm3 == 0x2a1f65 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b0ecf; op2val:0x3dd67a4f;
op3val:0xbaa1f65; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b0ecf and fs2 == 0 and fe2 == 0x7b and fm2 == 0x567a4f and fs3 == 0 and fe3 == 0x17 and fm3 == 0x2a1f65 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b0ecf; op2val:0x3dd67a4f;
op3val:0xbaa1f65; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b0ecf and fs2 == 0 and fe2 == 0x7b and fm2 == 0x567a4f and fs3 == 0 and fe3 == 0x17 and fm3 == 0x2a1f65 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b0ecf; op2val:0x3dd67a4f;
op3val:0xbaa1f65; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b0ecf and fs2 == 0 and fe2 == 0x7b and fm2 == 0x567a4f and fs3 == 0 and fe3 == 0x17 and fm3 == 0x2a1f65 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b0ecf; op2val:0x3dd67a4f;
op3val:0xbaa1f65; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b5be7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75f3b7 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x43608e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b5be7; op2val:0x3ef5f3b7;
op3val:0xcc3608e; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b5be7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75f3b7 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x43608e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b5be7; op2val:0x3ef5f3b7;
op3val:0xcc3608e; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b5be7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75f3b7 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x43608e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b5be7; op2val:0x3ef5f3b7;
op3val:0xcc3608e; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b5be7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75f3b7 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x43608e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b5be7; op2val:0x3ef5f3b7;
op3val:0xcc3608e; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4b5be7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75f3b7 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x43608e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4b5be7; op2val:0x3ef5f3b7;
op3val:0xcc3608e; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4e0628 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2f03b4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0cd930 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4e0628; op2val:0x3faf03b4;
op3val:0xd8cd930; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4e0628 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2f03b4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0cd930 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4e0628; op2val:0x3faf03b4;
op3val:0xd8cd930; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4e0628 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2f03b4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0cd930 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4e0628; op2val:0x3faf03b4;
op3val:0xd8cd930; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4e0628 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2f03b4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0cd930 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4e0628; op2val:0x3faf03b4;
op3val:0xd8cd930; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4e0628 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2f03b4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0cd930 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4e0628; op2val:0x3faf03b4;
op3val:0xd8cd930; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4f63b4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x715671 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x4382e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4f63b4; op2val:0x3e715671;
op3val:0xc4382e4; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4f63b4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x715671 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x4382e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4f63b4; op2val:0x3e715671;
op3val:0xc4382e4; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4f63b4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x715671 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x4382e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4f63b4; op2val:0x3e715671;
op3val:0xc4382e4; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4f63b4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x715671 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x4382e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4f63b4; op2val:0x3e715671;
op3val:0xc4382e4; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x4f63b4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x715671 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x4382e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd4f63b4; op2val:0x3e715671;
op3val:0xc4382e4; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59d739 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78cd3d and fs3 == 0 and fe3 == 0x18 and fm3 == 0x53b725 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59d739; op2val:0x3e78cd3d;
op3val:0xc53b725; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59d739 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78cd3d and fs3 == 0 and fe3 == 0x18 and fm3 == 0x53b725 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59d739; op2val:0x3e78cd3d;
op3val:0xc53b725; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59d739 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78cd3d and fs3 == 0 and fe3 == 0x18 and fm3 == 0x53b725 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59d739; op2val:0x3e78cd3d;
op3val:0xc53b725; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59d739 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78cd3d and fs3 == 0 and fe3 == 0x18 and fm3 == 0x53b725 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59d739; op2val:0x3e78cd3d;
op3val:0xc53b725; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59d739 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78cd3d and fs3 == 0 and fe3 == 0x18 and fm3 == 0x53b725 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59d739; op2val:0x3e78cd3d;
op3val:0xc53b725; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59e2ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x435081 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x263c30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59e2ae; op2val:0x3dc35081;
op3val:0xba63c30; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59e2ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x435081 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x263c30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59e2ae; op2val:0x3dc35081;
op3val:0xba63c30; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59e2ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x435081 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x263c30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59e2ae; op2val:0x3dc35081;
op3val:0xba63c30; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59e2ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x435081 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x263c30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59e2ae; op2val:0x3dc35081;
op3val:0xba63c30; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x59e2ae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x435081 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x263c30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd59e2ae; op2val:0x3dc35081;
op3val:0xba63c30; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x5d50db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2e5a25 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x16bae3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd5d50db; op2val:0x3fae5a25;
op3val:0xd96bae3; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x5d50db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2e5a25 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x16bae3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd5d50db; op2val:0x3fae5a25;
op3val:0xd96bae3; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x5d50db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2e5a25 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x16bae3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd5d50db; op2val:0x3fae5a25;
op3val:0xd96bae3; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x5d50db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2e5a25 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x16bae3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd5d50db; op2val:0x3fae5a25;
op3val:0xd96bae3; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x5d50db and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2e5a25 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x16bae3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd5d50db; op2val:0x3fae5a25;
op3val:0xd96bae3; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x67bf8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2518d4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1574f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd67bf8e; op2val:0x3fa518d4;
op3val:0xd9574f1; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x67bf8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2518d4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1574f1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd67bf8e; op2val:0x3fa518d4;
op3val:0xd9574f1; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x67bf8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2518d4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1574f1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd67bf8e; op2val:0x3fa518d4;
op3val:0xd9574f1; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x67bf8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2518d4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1574f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd67bf8e; op2val:0x3fa518d4;
op3val:0xd9574f1; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x67bf8e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2518d4 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1574f1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd67bf8e; op2val:0x3fa518d4;
op3val:0xd9574f1; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x69458e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1c7d2f and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0e9874 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd69458e; op2val:0x3f9c7d2f;
op3val:0xd8e9874; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x69458e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1c7d2f and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0e9874 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd69458e; op2val:0x3f9c7d2f;
op3val:0xd8e9874; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x69458e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1c7d2f and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0e9874 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd69458e; op2val:0x3f9c7d2f;
op3val:0xd8e9874; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x69458e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1c7d2f and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0e9874 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd69458e; op2val:0x3f9c7d2f;
op3val:0xd8e9874; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x69458e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x1c7d2f and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0e9874 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd69458e; op2val:0x3f9c7d2f;
op3val:0xd8e9874; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x760f4d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47926b and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fd2a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd760f4d; op2val:0x3f47926b;
op3val:0xd3fd2a1; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x760f4d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47926b and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fd2a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd760f4d; op2val:0x3f47926b;
op3val:0xd3fd2a1; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x760f4d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47926b and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fd2a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd760f4d; op2val:0x3f47926b;
op3val:0xd3fd2a1; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x760f4d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47926b and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fd2a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd760f4d; op2val:0x3f47926b;
op3val:0xd3fd2a1; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x760f4d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47926b and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fd2a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd760f4d; op2val:0x3f47926b;
op3val:0xd3fd2a1; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x07b93f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x11c9d8 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1a95e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd87b93f; op2val:0x3f11c9d8;
op3val:0xd1a95e0; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x07b93f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x11c9d8 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1a95e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd87b93f; op2val:0x3f11c9d8;
op3val:0xd1a95e0; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x07b93f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x11c9d8 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1a95e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd87b93f; op2val:0x3f11c9d8;
op3val:0xd1a95e0; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x07b93f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x11c9d8 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1a95e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd87b93f; op2val:0x3f11c9d8;
op3val:0xd1a95e0; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x07b93f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x11c9d8 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1a95e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd87b93f; op2val:0x3f11c9d8;
op3val:0xd1a95e0; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0af57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x141db5 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x20cc19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8af57c; op2val:0x3f941db5;
op3val:0xda0cc19; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0af57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x141db5 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x20cc19 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8af57c; op2val:0x3f941db5;
op3val:0xda0cc19; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0af57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x141db5 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x20cc19 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8af57c; op2val:0x3f941db5;
op3val:0xda0cc19; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0af57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x141db5 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x20cc19 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8af57c; op2val:0x3f941db5;
op3val:0xda0cc19; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0af57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x141db5 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x20cc19 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8af57c; op2val:0x3f941db5;
op3val:0xda0cc19; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0ba57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f7788 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1c8548 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8ba57c; op2val:0x3f8f7788;
op3val:0xd9c8548; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0ba57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f7788 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1c8548 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8ba57c; op2val:0x3f8f7788;
op3val:0xd9c8548; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0ba57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f7788 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1c8548 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8ba57c; op2val:0x3f8f7788;
op3val:0xd9c8548; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0ba57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f7788 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1c8548 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8ba57c; op2val:0x3f8f7788;
op3val:0xd9c8548; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0ba57c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0f7788 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1c8548 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8ba57c; op2val:0x3f8f7788;
op3val:0xd9c8548; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0c7098 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0bd39e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x196a75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8c7098; op2val:0x3f0bd39e;
op3val:0xd196a75; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0c7098 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0bd39e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x196a75 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8c7098; op2val:0x3f0bd39e;
op3val:0xd196a75; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0c7098 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0bd39e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x196a75 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8c7098; op2val:0x3f0bd39e;
op3val:0xd196a75; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0c7098 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0bd39e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x196a75 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8c7098; op2val:0x3f0bd39e;
op3val:0xd196a75; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0c7098 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0bd39e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x196a75 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8c7098; op2val:0x3f0bd39e;
op3val:0xd196a75; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0e9ab1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x631860 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7d017f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8e9ab1; op2val:0x3de31860;
op3val:0xbfd017f; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0e9ab1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x631860 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7d017f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8e9ab1; op2val:0x3de31860;
op3val:0xbfd017f; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0e9ab1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x631860 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7d017f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8e9ab1; op2val:0x3de31860;
op3val:0xbfd017f; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0e9ab1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x631860 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7d017f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8e9ab1; op2val:0x3de31860;
op3val:0xbfd017f; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x0e9ab1 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x631860 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7d017f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd8e9ab1; op2val:0x3de31860;
op3val:0xbfd017f; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x12cb99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x210a09 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x38af9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd92cb99; op2val:0x3f210a09;
op3val:0xd38af9a; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x12cb99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x210a09 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x38af9a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd92cb99; op2val:0x3f210a09;
op3val:0xd38af9a; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x12cb99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x210a09 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x38af9a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd92cb99; op2val:0x3f210a09;
op3val:0xd38af9a; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x12cb99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x210a09 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x38af9a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd92cb99; op2val:0x3f210a09;
op3val:0xd38af9a; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x12cb99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x210a09 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x38af9a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd92cb99; op2val:0x3f210a09;
op3val:0xd38af9a; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1ca879 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x674c9e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0d8ae9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd9ca879; op2val:0x3ee74c9e;
op3val:0xd0d8ae9; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1ca879 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x674c9e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0d8ae9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd9ca879; op2val:0x3ee74c9e;
op3val:0xd0d8ae9; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1ca879 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x674c9e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0d8ae9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd9ca879; op2val:0x3ee74c9e;
op3val:0xd0d8ae9; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1ca879 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x674c9e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0d8ae9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd9ca879; op2val:0x3ee74c9e;
op3val:0xd0d8ae9; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1ca879 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x674c9e and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0d8ae9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xd9ca879; op2val:0x3ee74c9e;
op3val:0xd0d8ae9; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x218d77 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71d3ff and fs3 == 0 and fe3 == 0x1a and fm3 == 0x189bf6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xda18d77; op2val:0x3ef1d3ff;
op3val:0xd189bf6; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x218d77 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71d3ff and fs3 == 0 and fe3 == 0x1a and fm3 == 0x189bf6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xda18d77; op2val:0x3ef1d3ff;
op3val:0xd189bf6; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x218d77 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71d3ff and fs3 == 0 and fe3 == 0x1a and fm3 == 0x189bf6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xda18d77; op2val:0x3ef1d3ff;
op3val:0xd189bf6; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x218d77 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71d3ff and fs3 == 0 and fe3 == 0x1a and fm3 == 0x189bf6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xda18d77; op2val:0x3ef1d3ff;
op3val:0xd189bf6; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x218d77 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x71d3ff and fs3 == 0 and fe3 == 0x1a and fm3 == 0x189bf6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xda18d77; op2val:0x3ef1d3ff;
op3val:0xd189bf6; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xa88be86; op2val:0x427e6538;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xa88be86; op2val:0x427e6538;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xa88be86; op2val:0x427e6538;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xa88be86; op2val:0x427e6538;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x15 and fm1 == 0x08be86 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x7e6538 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07e31a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xa88be86; op2val:0x427e6538;
op3val:0xd87e31a; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc8cd523; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc8cd523; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc8cd523; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x18 and fm1 == 0x307f67 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4c450f and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0cd523 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xc307f67; op2val:0x3fcc450f;
op3val:0xc8cd523; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x285493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x674cf0 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1816e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xca85493; op2val:0x3f674cf0;
op3val:0xc9816e8; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x19 and fm1 == 0x285493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x674cf0 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1816e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xca85493; op2val:0x3f674cf0;
op3val:0xc9816e8; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 450*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(210556195,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(210556195,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(210556195,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(1063734512,32,FLEN)
NAN_BOXED(211293928,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(1063734512,32,FLEN)
NAN_BOXED(211293928,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(1063734512,32,FLEN)
NAN_BOXED(211293928,32,FLEN)
NAN_BOXED(214141101,32,FLEN)
NAN_BOXED(1037226218,32,FLEN)
NAN_BOXED(186713520,32,FLEN)
NAN_BOXED(214141101,32,FLEN)
NAN_BOXED(1037226218,32,FLEN)
NAN_BOXED(186713520,32,FLEN)
NAN_BOXED(214141101,32,FLEN)
NAN_BOXED(1037226218,32,FLEN)
NAN_BOXED(186713520,32,FLEN)
NAN_BOXED(214141101,32,FLEN)
NAN_BOXED(1037226218,32,FLEN)
NAN_BOXED(186713520,32,FLEN)
NAN_BOXED(214141101,32,FLEN)
NAN_BOXED(1037226218,32,FLEN)
NAN_BOXED(186713520,32,FLEN)
NAN_BOXED(216252673,32,FLEN)
NAN_BOXED(1070950959,32,FLEN)
NAN_BOXED(222158350,32,FLEN)
NAN_BOXED(216252673,32,FLEN)
NAN_BOXED(1070950959,32,FLEN)
NAN_BOXED(222158350,32,FLEN)
NAN_BOXED(216252673,32,FLEN)
NAN_BOXED(1070950959,32,FLEN)
NAN_BOXED(222158350,32,FLEN)
NAN_BOXED(216252673,32,FLEN)
NAN_BOXED(1070950959,32,FLEN)
NAN_BOXED(222158350,32,FLEN)
NAN_BOXED(216252673,32,FLEN)
NAN_BOXED(1070950959,32,FLEN)
NAN_BOXED(222158350,32,FLEN)
NAN_BOXED(218115142,32,FLEN)
NAN_BOXED(1073858446,32,FLEN)
NAN_BOXED(226620530,32,FLEN)
NAN_BOXED(218115142,32,FLEN)
NAN_BOXED(1073858446,32,FLEN)
NAN_BOXED(226620530,32,FLEN)
NAN_BOXED(218115142,32,FLEN)
NAN_BOXED(1073858446,32,FLEN)
NAN_BOXED(226620530,32,FLEN)
NAN_BOXED(218115142,32,FLEN)
NAN_BOXED(1073858446,32,FLEN)
NAN_BOXED(226620530,32,FLEN)
NAN_BOXED(218115142,32,FLEN)
NAN_BOXED(1073858446,32,FLEN)
NAN_BOXED(226620530,32,FLEN)
NAN_BOXED(219171244,32,FLEN)
NAN_BOXED(1074179012,32,FLEN)
NAN_BOXED(228052672,32,FLEN)
NAN_BOXED(219171244,32,FLEN)
NAN_BOXED(1074179012,32,FLEN)
NAN_BOXED(228052672,32,FLEN)
NAN_BOXED(219171244,32,FLEN)
NAN_BOXED(1074179012,32,FLEN)
NAN_BOXED(228052672,32,FLEN)
NAN_BOXED(219171244,32,FLEN)
NAN_BOXED(1074179012,32,FLEN)
NAN_BOXED(228052672,32,FLEN)
NAN_BOXED(219171244,32,FLEN)
NAN_BOXED(1074179012,32,FLEN)
NAN_BOXED(228052672,32,FLEN)
NAN_BOXED(220503065,32,FLEN)
NAN_BOXED(1061338643,32,FLEN)
NAN_BOXED(217739527,32,FLEN)
NAN_BOXED(220503065,32,FLEN)
NAN_BOXED(1061338643,32,FLEN)
NAN_BOXED(217739527,32,FLEN)
NAN_BOXED(220503065,32,FLEN)
NAN_BOXED(1061338643,32,FLEN)
NAN_BOXED(217739527,32,FLEN)
NAN_BOXED(220503065,32,FLEN)
NAN_BOXED(1061338643,32,FLEN)
NAN_BOXED(217739527,32,FLEN)
NAN_BOXED(220503065,32,FLEN)
NAN_BOXED(1061338643,32,FLEN)
NAN_BOXED(217739527,32,FLEN)
NAN_BOXED(220842033,32,FLEN)
NAN_BOXED(1068849727,32,FLEN)
NAN_BOXED(225479883,32,FLEN)
NAN_BOXED(220842033,32,FLEN)
NAN_BOXED(1068849727,32,FLEN)
NAN_BOXED(225479883,32,FLEN)
NAN_BOXED(220842033,32,FLEN)
NAN_BOXED(1068849727,32,FLEN)
NAN_BOXED(225479883,32,FLEN)
NAN_BOXED(220842033,32,FLEN)
NAN_BOXED(1068849727,32,FLEN)
NAN_BOXED(225479883,32,FLEN)
NAN_BOXED(220842033,32,FLEN)
NAN_BOXED(1068849727,32,FLEN)
NAN_BOXED(225479883,32,FLEN)
NAN_BOXED(222140861,32,FLEN)
NAN_BOXED(1069947014,32,FLEN)
NAN_BOXED(227718930,32,FLEN)
NAN_BOXED(222140861,32,FLEN)
NAN_BOXED(1069947014,32,FLEN)
NAN_BOXED(227718930,32,FLEN)
NAN_BOXED(222140861,32,FLEN)
NAN_BOXED(1069947014,32,FLEN)
NAN_BOXED(227718930,32,FLEN)
NAN_BOXED(222140861,32,FLEN)
NAN_BOXED(1069947014,32,FLEN)
NAN_BOXED(227718930,32,FLEN)
NAN_BOXED(222140861,32,FLEN)
NAN_BOXED(1069947014,32,FLEN)
NAN_BOXED(227718930,32,FLEN)
NAN_BOXED(223022799,32,FLEN)
NAN_BOXED(1037466191,32,FLEN)
NAN_BOXED(195698533,32,FLEN)
NAN_BOXED(223022799,32,FLEN)
NAN_BOXED(1037466191,32,FLEN)
NAN_BOXED(195698533,32,FLEN)
NAN_BOXED(223022799,32,FLEN)
NAN_BOXED(1037466191,32,FLEN)
NAN_BOXED(195698533,32,FLEN)
NAN_BOXED(223022799,32,FLEN)
NAN_BOXED(1037466191,32,FLEN)
NAN_BOXED(195698533,32,FLEN)
NAN_BOXED(223022799,32,FLEN)
NAN_BOXED(1037466191,32,FLEN)
NAN_BOXED(195698533,32,FLEN)
NAN_BOXED(223042535,32,FLEN)
NAN_BOXED(1056306103,32,FLEN)
NAN_BOXED(214130830,32,FLEN)
NAN_BOXED(223042535,32,FLEN)
NAN_BOXED(1056306103,32,FLEN)
NAN_BOXED(214130830,32,FLEN)
NAN_BOXED(223042535,32,FLEN)
NAN_BOXED(1056306103,32,FLEN)
NAN_BOXED(214130830,32,FLEN)
NAN_BOXED(223042535,32,FLEN)
NAN_BOXED(1056306103,32,FLEN)
NAN_BOXED(214130830,32,FLEN)
NAN_BOXED(223042535,32,FLEN)
NAN_BOXED(1056306103,32,FLEN)
NAN_BOXED(214130830,32,FLEN)
NAN_BOXED(223217192,32,FLEN)
NAN_BOXED(1068434356,32,FLEN)
NAN_BOXED(227334448,32,FLEN)
NAN_BOXED(223217192,32,FLEN)
NAN_BOXED(1068434356,32,FLEN)
NAN_BOXED(227334448,32,FLEN)
NAN_BOXED(223217192,32,FLEN)
NAN_BOXED(1068434356,32,FLEN)
NAN_BOXED(227334448,32,FLEN)
NAN_BOXED(223217192,32,FLEN)
NAN_BOXED(1068434356,32,FLEN)
NAN_BOXED(227334448,32,FLEN)
NAN_BOXED(223217192,32,FLEN)
NAN_BOXED(1068434356,32,FLEN)
NAN_BOXED(227334448,32,FLEN)
NAN_BOXED(223306676,32,FLEN)
NAN_BOXED(1047615089,32,FLEN)
NAN_BOXED(205751012,32,FLEN)
NAN_BOXED(223306676,32,FLEN)
NAN_BOXED(1047615089,32,FLEN)
NAN_BOXED(205751012,32,FLEN)
NAN_BOXED(223306676,32,FLEN)
NAN_BOXED(1047615089,32,FLEN)
NAN_BOXED(205751012,32,FLEN)
NAN_BOXED(223306676,32,FLEN)
NAN_BOXED(1047615089,32,FLEN)
NAN_BOXED(205751012,32,FLEN)
NAN_BOXED(223306676,32,FLEN)
NAN_BOXED(1047615089,32,FLEN)
NAN_BOXED(205751012,32,FLEN)
NAN_BOXED(223991609,32,FLEN)
NAN_BOXED(1048104253,32,FLEN)
NAN_BOXED(206812965,32,FLEN)
NAN_BOXED(223991609,32,FLEN)
NAN_BOXED(1048104253,32,FLEN)
NAN_BOXED(206812965,32,FLEN)
NAN_BOXED(223991609,32,FLEN)
NAN_BOXED(1048104253,32,FLEN)
NAN_BOXED(206812965,32,FLEN)
NAN_BOXED(223991609,32,FLEN)
NAN_BOXED(1048104253,32,FLEN)
NAN_BOXED(206812965,32,FLEN)
NAN_BOXED(223991609,32,FLEN)
NAN_BOXED(1048104253,32,FLEN)
NAN_BOXED(206812965,32,FLEN)
NAN_BOXED(223994542,32,FLEN)
NAN_BOXED(1036210305,32,FLEN)
NAN_BOXED(195443760,32,FLEN)
NAN_BOXED(223994542,32,FLEN)
NAN_BOXED(1036210305,32,FLEN)
NAN_BOXED(195443760,32,FLEN)
NAN_BOXED(223994542,32,FLEN)
NAN_BOXED(1036210305,32,FLEN)
NAN_BOXED(195443760,32,FLEN)
NAN_BOXED(223994542,32,FLEN)
NAN_BOXED(1036210305,32,FLEN)
NAN_BOXED(195443760,32,FLEN)
NAN_BOXED(223994542,32,FLEN)
NAN_BOXED(1036210305,32,FLEN)
NAN_BOXED(195443760,32,FLEN)
NAN_BOXED(224219355,32,FLEN)
NAN_BOXED(1068390949,32,FLEN)
NAN_BOXED(227982051,32,FLEN)
NAN_BOXED(224219355,32,FLEN)
NAN_BOXED(1068390949,32,FLEN)
NAN_BOXED(227982051,32,FLEN)
NAN_BOXED(224219355,32,FLEN)
NAN_BOXED(1068390949,32,FLEN)
NAN_BOXED(227982051,32,FLEN)
NAN_BOXED(224219355,32,FLEN)
NAN_BOXED(1068390949,32,FLEN)
NAN_BOXED(227982051,32,FLEN)
NAN_BOXED(224219355,32,FLEN)
NAN_BOXED(1068390949,32,FLEN)
NAN_BOXED(227982051,32,FLEN)
NAN_BOXED(224903054,32,FLEN)
NAN_BOXED(1067784404,32,FLEN)
NAN_BOXED(227898609,32,FLEN)
NAN_BOXED(224903054,32,FLEN)
NAN_BOXED(1067784404,32,FLEN)
NAN_BOXED(227898609,32,FLEN)
NAN_BOXED(224903054,32,FLEN)
NAN_BOXED(1067784404,32,FLEN)
NAN_BOXED(227898609,32,FLEN)
NAN_BOXED(224903054,32,FLEN)
NAN_BOXED(1067784404,32,FLEN)
NAN_BOXED(227898609,32,FLEN)
NAN_BOXED(224903054,32,FLEN)
NAN_BOXED(1067784404,32,FLEN)
NAN_BOXED(227898609,32,FLEN)
NAN_BOXED(225002894,32,FLEN)
NAN_BOXED(1067220271,32,FLEN)
NAN_BOXED(227448948,32,FLEN)
NAN_BOXED(225002894,32,FLEN)
NAN_BOXED(1067220271,32,FLEN)
NAN_BOXED(227448948,32,FLEN)
NAN_BOXED(225002894,32,FLEN)
NAN_BOXED(1067220271,32,FLEN)
NAN_BOXED(227448948,32,FLEN)
NAN_BOXED(225002894,32,FLEN)
NAN_BOXED(1067220271,32,FLEN)
NAN_BOXED(227448948,32,FLEN)
NAN_BOXED(225002894,32,FLEN)
NAN_BOXED(1067220271,32,FLEN)
NAN_BOXED(227448948,32,FLEN)
NAN_BOXED(225840973,32,FLEN)
NAN_BOXED(1061655147,32,FLEN)
NAN_BOXED(222286497,32,FLEN)
NAN_BOXED(225840973,32,FLEN)
NAN_BOXED(1061655147,32,FLEN)
NAN_BOXED(222286497,32,FLEN)
NAN_BOXED(225840973,32,FLEN)
NAN_BOXED(1061655147,32,FLEN)
NAN_BOXED(222286497,32,FLEN)
NAN_BOXED(225840973,32,FLEN)
NAN_BOXED(1061655147,32,FLEN)
NAN_BOXED(222286497,32,FLEN)
NAN_BOXED(225840973,32,FLEN)
NAN_BOXED(1061655147,32,FLEN)
NAN_BOXED(222286497,32,FLEN)
NAN_BOXED(226998591,32,FLEN)
NAN_BOXED(1058130392,32,FLEN)
NAN_BOXED(219846112,32,FLEN)
NAN_BOXED(226998591,32,FLEN)
NAN_BOXED(1058130392,32,FLEN)
NAN_BOXED(219846112,32,FLEN)
NAN_BOXED(226998591,32,FLEN)
NAN_BOXED(1058130392,32,FLEN)
NAN_BOXED(219846112,32,FLEN)
NAN_BOXED(226998591,32,FLEN)
NAN_BOXED(1058130392,32,FLEN)
NAN_BOXED(219846112,32,FLEN)
NAN_BOXED(226998591,32,FLEN)
NAN_BOXED(1058130392,32,FLEN)
NAN_BOXED(219846112,32,FLEN)
NAN_BOXED(227210620,32,FLEN)
NAN_BOXED(1066671541,32,FLEN)
NAN_BOXED(228641817,32,FLEN)
NAN_BOXED(227210620,32,FLEN)
NAN_BOXED(1066671541,32,FLEN)
NAN_BOXED(228641817,32,FLEN)
NAN_BOXED(227210620,32,FLEN)
NAN_BOXED(1066671541,32,FLEN)
NAN_BOXED(228641817,32,FLEN)
NAN_BOXED(227210620,32,FLEN)
NAN_BOXED(1066671541,32,FLEN)
NAN_BOXED(228641817,32,FLEN)
NAN_BOXED(227210620,32,FLEN)
NAN_BOXED(1066671541,32,FLEN)
NAN_BOXED(228641817,32,FLEN)
NAN_BOXED(227255676,32,FLEN)
NAN_BOXED(1066366856,32,FLEN)
NAN_BOXED(228361544,32,FLEN)
NAN_BOXED(227255676,32,FLEN)
NAN_BOXED(1066366856,32,FLEN)
NAN_BOXED(228361544,32,FLEN)
NAN_BOXED(227255676,32,FLEN)
NAN_BOXED(1066366856,32,FLEN)
NAN_BOXED(228361544,32,FLEN)
NAN_BOXED(227255676,32,FLEN)
NAN_BOXED(1066366856,32,FLEN)
NAN_BOXED(228361544,32,FLEN)
NAN_BOXED(227255676,32,FLEN)
NAN_BOXED(1066366856,32,FLEN)
NAN_BOXED(228361544,32,FLEN)
NAN_BOXED(227307672,32,FLEN)
NAN_BOXED(1057739678,32,FLEN)
NAN_BOXED(219769461,32,FLEN)
NAN_BOXED(227307672,32,FLEN)
NAN_BOXED(1057739678,32,FLEN)
NAN_BOXED(219769461,32,FLEN)
NAN_BOXED(227307672,32,FLEN)
NAN_BOXED(1057739678,32,FLEN)
NAN_BOXED(219769461,32,FLEN)
NAN_BOXED(227307672,32,FLEN)
NAN_BOXED(1057739678,32,FLEN)
NAN_BOXED(219769461,32,FLEN)
NAN_BOXED(227307672,32,FLEN)
NAN_BOXED(1057739678,32,FLEN)
NAN_BOXED(219769461,32,FLEN)
NAN_BOXED(227449521,32,FLEN)
NAN_BOXED(1038293088,32,FLEN)
NAN_BOXED(201130367,32,FLEN)
NAN_BOXED(227449521,32,FLEN)
NAN_BOXED(1038293088,32,FLEN)
NAN_BOXED(201130367,32,FLEN)
NAN_BOXED(227449521,32,FLEN)
NAN_BOXED(1038293088,32,FLEN)
NAN_BOXED(201130367,32,FLEN)
NAN_BOXED(227449521,32,FLEN)
NAN_BOXED(1038293088,32,FLEN)
NAN_BOXED(201130367,32,FLEN)
NAN_BOXED(227449521,32,FLEN)
NAN_BOXED(1038293088,32,FLEN)
NAN_BOXED(201130367,32,FLEN)
NAN_BOXED(227724185,32,FLEN)
NAN_BOXED(1059129865,32,FLEN)
NAN_BOXED(221818778,32,FLEN)
NAN_BOXED(227724185,32,FLEN)
NAN_BOXED(1059129865,32,FLEN)
NAN_BOXED(221818778,32,FLEN)
NAN_BOXED(227724185,32,FLEN)
NAN_BOXED(1059129865,32,FLEN)
NAN_BOXED(221818778,32,FLEN)
NAN_BOXED(227724185,32,FLEN)
NAN_BOXED(1059129865,32,FLEN)
NAN_BOXED(221818778,32,FLEN)
NAN_BOXED(227724185,32,FLEN)
NAN_BOXED(1059129865,32,FLEN)
NAN_BOXED(221818778,32,FLEN)
NAN_BOXED(228370553,32,FLEN)
NAN_BOXED(1055345822,32,FLEN)
NAN_BOXED(218991337,32,FLEN)
NAN_BOXED(228370553,32,FLEN)
NAN_BOXED(1055345822,32,FLEN)
NAN_BOXED(218991337,32,FLEN)
NAN_BOXED(228370553,32,FLEN)
NAN_BOXED(1055345822,32,FLEN)
NAN_BOXED(218991337,32,FLEN)
NAN_BOXED(228370553,32,FLEN)
NAN_BOXED(1055345822,32,FLEN)
NAN_BOXED(218991337,32,FLEN)
NAN_BOXED(228370553,32,FLEN)
NAN_BOXED(1055345822,32,FLEN)
NAN_BOXED(218991337,32,FLEN)
NAN_BOXED(228691319,32,FLEN)
NAN_BOXED(1056035839,32,FLEN)
NAN_BOXED(219716598,32,FLEN)
NAN_BOXED(228691319,32,FLEN)
NAN_BOXED(1056035839,32,FLEN)
NAN_BOXED(219716598,32,FLEN)
NAN_BOXED(228691319,32,FLEN)
NAN_BOXED(1056035839,32,FLEN)
NAN_BOXED(219716598,32,FLEN)
NAN_BOXED(228691319,32,FLEN)
NAN_BOXED(1056035839,32,FLEN)
NAN_BOXED(219716598,32,FLEN)
NAN_BOXED(228691319,32,FLEN)
NAN_BOXED(1056035839,32,FLEN)
NAN_BOXED(219716598,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(176733830,32,FLEN)
NAN_BOXED(1115579704,32,FLEN)
NAN_BOXED(227009306,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(210556195,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(210556195,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(210556195,32,FLEN)
NAN_BOXED(204504935,32,FLEN)
NAN_BOXED(1070351631,32,FLEN)
NAN_BOXED(210556195,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(1063734512,32,FLEN)
NAN_BOXED(211293928,32,FLEN)
NAN_BOXED(212358291,32,FLEN)
NAN_BOXED(1063734512,32,FLEN)
NAN_BOXED(211293928,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
