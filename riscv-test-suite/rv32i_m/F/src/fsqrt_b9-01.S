
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:20 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fsqrt.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fsqrt_b9 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsqrt_b9)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==f3, rd==f19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f3; dest:f19; op1val:0x0; valaddr_reg:x3;
val_offset:0*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f19, f3, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rd, rs1==f0, rd==f0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f0; dest:f0; op1val:0x1; valaddr_reg:x3;
val_offset:1*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f0, f0, dyn, 0, 0, x3, 1*FLEN/8, x4, x1, x2)

inst_2:
// rs1==f2, rd==f18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f2; dest:f18; op1val:0x3; valaddr_reg:x3;
val_offset:2*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f18, f2, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_3:
// rs1==f14, rd==f6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f14; dest:f6; op1val:0x7; valaddr_reg:x3;
val_offset:3*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f6, f14, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_4:
// rs1==f4, rd==f30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f4; dest:f30; op1val:0xf; valaddr_reg:x3;
val_offset:4*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f30, f4, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f8, rd==f23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f8; dest:f23; op1val:0x1f; valaddr_reg:x3;
val_offset:5*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f23, f8, dyn, 0, 0, x3, 5*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f18, rd==f9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f18; dest:f9; op1val:0x3f; valaddr_reg:x3;
val_offset:6*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f9, f18, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f28, rd==f4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f28; dest:f4; op1val:0x7f; valaddr_reg:x3;
val_offset:7*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f4, f28, dyn, 0, 0, x3, 7*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f27, rd==f3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f27; dest:f3; op1val:0xff; valaddr_reg:x3;
val_offset:8*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f3, f27, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f17, rd==f10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f17; dest:f10; op1val:0x1ff; valaddr_reg:x3;
val_offset:9*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f10, f17, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f11, rd==f2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f11; dest:f2; op1val:0x3ff; valaddr_reg:x3;
val_offset:10*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f2, f11, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f16, rd==f22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f16; dest:f22; op1val:0x7ff; valaddr_reg:x3;
val_offset:11*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f22, f16, dyn, 0, 0, x3, 11*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f21, rd==f26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f21; dest:f26; op1val:0xfff; valaddr_reg:x3;
val_offset:12*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f26, f21, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f19, rd==f14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f19; dest:f14; op1val:0x1fff; valaddr_reg:x3;
val_offset:13*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f14, f19, dyn, 0, 0, x3, 13*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f12, rd==f5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f12; dest:f5; op1val:0x3fff; valaddr_reg:x3;
val_offset:14*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f5, f12, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f23, rd==f25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f23; dest:f25; op1val:0x7fff; valaddr_reg:x3;
val_offset:15*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f25, f23, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f24, rd==f8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f24; dest:f8; op1val:0xffff; valaddr_reg:x3;
val_offset:16*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f8, f24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f13, rd==f20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f13; dest:f20; op1val:0x1ffff; valaddr_reg:x3;
val_offset:17*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f20, f13, dyn, 0, 0, x3, 17*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f7, rd==f28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f7; dest:f28; op1val:0x3ffff; valaddr_reg:x3;
val_offset:18*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f28, f7, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f10, rd==f11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f10; dest:f11; op1val:0x7ffff; valaddr_reg:x3;
val_offset:19*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f11, f10, dyn, 0, 0, x3, 19*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f26, rd==f31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f26; dest:f31; op1val:0xfffff; valaddr_reg:x3;
val_offset:20*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f26, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f9, rd==f27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f9; dest:f27; op1val:0x1fffff; valaddr_reg:x3;
val_offset:21*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f27, f9, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f15, rd==f1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f15; dest:f1; op1val:0x3fffff; valaddr_reg:x3;
val_offset:22*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f1, f15, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f30, rd==f16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f16; op1val:0x400000; valaddr_reg:x3;
val_offset:23*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f16, f30, dyn, 0, 0, x3, 23*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f6, rd==f13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f6; dest:f13; op1val:0x600000; valaddr_reg:x3;
val_offset:24*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f13, f6, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f1, rd==f21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f1; dest:f21; op1val:0x700000; valaddr_reg:x3;
val_offset:25*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f21, f1, dyn, 0, 0, x3, 25*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f20, rd==f17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f20; dest:f17; op1val:0x780000; valaddr_reg:x3;
val_offset:26*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f17, f20, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f29, rd==f7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f29; dest:f7; op1val:0x7c0000; valaddr_reg:x3;
val_offset:27*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f7, f29, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f25, rd==f24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f25; dest:f24; op1val:0x7e0000; valaddr_reg:x3;
val_offset:28*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f24, f25, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f31, rd==f12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f31; dest:f12; op1val:0x7f0000; valaddr_reg:x3;
val_offset:29*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f12, f31, dyn, 0, 0, x3, 29*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f22, rd==f29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f22; dest:f29; op1val:0x7f8000; valaddr_reg:x3;
val_offset:30*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f29, f22, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f5, rd==f15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f5; dest:f15; op1val:0x7fc000; valaddr_reg:x3;
val_offset:31*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f15, f5, dyn, 0, 0, x3, 31*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7fe000; valaddr_reg:x3;
val_offset:32*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ff000; valaddr_reg:x3;
val_offset:33*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ff800; valaddr_reg:x3;
val_offset:34*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ffc00; valaddr_reg:x3;
val_offset:35*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 35*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ffe00; valaddr_reg:x3;
val_offset:36*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7fff00; valaddr_reg:x3;
val_offset:37*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 37*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7fff80; valaddr_reg:x3;
val_offset:38*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7fffc0; valaddr_reg:x3;
val_offset:39*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7fffe0; valaddr_reg:x3;
val_offset:40*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ffff0; valaddr_reg:x3;
val_offset:41*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 41*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ffff8; valaddr_reg:x3;
val_offset:42*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ffffc; valaddr_reg:x3;
val_offset:43*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 43*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7ffffe; valaddr_reg:x3;
val_offset:44*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7fffff; valaddr_reg:x3;
val_offset:45*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x800000; valaddr_reg:x3;
val_offset:46*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x800001; valaddr_reg:x3;
val_offset:47*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 47*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x800003; valaddr_reg:x3;
val_offset:48*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x800007; valaddr_reg:x3;
val_offset:49*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 49*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x80000f; valaddr_reg:x3;
val_offset:50*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x80001f; valaddr_reg:x3;
val_offset:51*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x80003f; valaddr_reg:x3;
val_offset:52*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x80007f; valaddr_reg:x3;
val_offset:53*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 53*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x8000ff; valaddr_reg:x3;
val_offset:54*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x8001ff; valaddr_reg:x3;
val_offset:55*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 55*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x8003ff; valaddr_reg:x3;
val_offset:56*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x8007ff; valaddr_reg:x3;
val_offset:57*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x800fff; valaddr_reg:x3;
val_offset:58*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x801fff; valaddr_reg:x3;
val_offset:59*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 59*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x803fff; valaddr_reg:x3;
val_offset:60*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x807fff; valaddr_reg:x3;
val_offset:61*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 61*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x80ffff; valaddr_reg:x3;
val_offset:62*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x81ffff; valaddr_reg:x3;
val_offset:63*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x83ffff; valaddr_reg:x3;
val_offset:64*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x87ffff; valaddr_reg:x3;
val_offset:65*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 65*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x8fffff; valaddr_reg:x3;
val_offset:66*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x9fffff; valaddr_reg:x3;
val_offset:67*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 67*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xbfffff; valaddr_reg:x3;
val_offset:68*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xc00000; valaddr_reg:x3;
val_offset:69*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xe00000; valaddr_reg:x3;
val_offset:70*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xf00000; valaddr_reg:x3;
val_offset:71*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 71*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xf80000; valaddr_reg:x3;
val_offset:72*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfc0000; valaddr_reg:x3;
val_offset:73*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 73*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfe0000; valaddr_reg:x3;
val_offset:74*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xff0000; valaddr_reg:x3;
val_offset:75*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xff8000; valaddr_reg:x3;
val_offset:76*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xffc000; valaddr_reg:x3;
val_offset:77*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 77*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xffe000; valaddr_reg:x3;
val_offset:78*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfff000; valaddr_reg:x3;
val_offset:79*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 79*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfff800; valaddr_reg:x3;
val_offset:80*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfffc00; valaddr_reg:x3;
val_offset:81*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfffe00; valaddr_reg:x3;
val_offset:82*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xffff00; valaddr_reg:x3;
val_offset:83*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 83*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xffff80; valaddr_reg:x3;
val_offset:84*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xffffc0; valaddr_reg:x3;
val_offset:85*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 85*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xffffe0; valaddr_reg:x3;
val_offset:86*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfffff0; valaddr_reg:x3;
val_offset:87*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfffff8; valaddr_reg:x3;
val_offset:88*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfffffc; valaddr_reg:x3;
val_offset:89*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 89*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xfffffe; valaddr_reg:x3;
val_offset:90*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0xffffff; valaddr_reg:x3;
val_offset:91*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 91*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f800000; valaddr_reg:x3;
val_offset:92*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f800001; valaddr_reg:x3;
val_offset:93*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f800003; valaddr_reg:x3;
val_offset:94*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f800007; valaddr_reg:x3;
val_offset:95*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 95*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f80000f; valaddr_reg:x3;
val_offset:96*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f80001f; valaddr_reg:x3;
val_offset:97*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 97*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f80003f; valaddr_reg:x3;
val_offset:98*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f80007f; valaddr_reg:x3;
val_offset:99*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f8000ff; valaddr_reg:x3;
val_offset:100*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f8001ff; valaddr_reg:x3;
val_offset:101*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 101*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f8003ff; valaddr_reg:x3;
val_offset:102*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f8007ff; valaddr_reg:x3;
val_offset:103*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 103*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f800fff; valaddr_reg:x3;
val_offset:104*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f801fff; valaddr_reg:x3;
val_offset:105*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f803fff; valaddr_reg:x3;
val_offset:106*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f807fff; valaddr_reg:x3;
val_offset:107*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 107*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f80ffff; valaddr_reg:x3;
val_offset:108*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f81ffff; valaddr_reg:x3;
val_offset:109*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 109*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f83ffff; valaddr_reg:x3;
val_offset:110*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f87ffff; valaddr_reg:x3;
val_offset:111*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f8fffff; valaddr_reg:x3;
val_offset:112*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3f9fffff; valaddr_reg:x3;
val_offset:113*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 113*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fbfffff; valaddr_reg:x3;
val_offset:114*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fc00000; valaddr_reg:x3;
val_offset:115*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 115*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fe00000; valaddr_reg:x3;
val_offset:116*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ff00000; valaddr_reg:x3;
val_offset:117*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ff80000; valaddr_reg:x3;
val_offset:118*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffc0000; valaddr_reg:x3;
val_offset:119*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 119*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffe0000; valaddr_reg:x3;
val_offset:120*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fff0000; valaddr_reg:x3;
val_offset:121*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 121*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fff8000; valaddr_reg:x3;
val_offset:122*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fffc000; valaddr_reg:x3;
val_offset:123*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fffe000; valaddr_reg:x3;
val_offset:124*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffff000; valaddr_reg:x3;
val_offset:125*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 125*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffff800; valaddr_reg:x3;
val_offset:126*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffffc00; valaddr_reg:x3;
val_offset:127*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffffe00; valaddr_reg:x3;
val_offset:128*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fffff00; valaddr_reg:x3;
val_offset:129*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fffff80; valaddr_reg:x3;
val_offset:130*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fffffc0; valaddr_reg:x3;
val_offset:131*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 131*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fffffe0; valaddr_reg:x3;
val_offset:132*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffffff0; valaddr_reg:x3;
val_offset:133*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 133*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffffff8; valaddr_reg:x3;
val_offset:134*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffffffc; valaddr_reg:x3;
val_offset:135*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3ffffffe; valaddr_reg:x3;
val_offset:136*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x3fffffff; valaddr_reg:x3;
val_offset:137*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 137*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f000000; valaddr_reg:x3;
val_offset:138*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f000001; valaddr_reg:x3;
val_offset:139*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 139*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f000003; valaddr_reg:x3;
val_offset:140*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f000007; valaddr_reg:x3;
val_offset:141*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f00000f; valaddr_reg:x3;
val_offset:142*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f00001f; valaddr_reg:x3;
val_offset:143*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 143*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f00003f; valaddr_reg:x3;
val_offset:144*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f00007f; valaddr_reg:x3;
val_offset:145*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 145*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f0000ff; valaddr_reg:x3;
val_offset:146*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f0001ff; valaddr_reg:x3;
val_offset:147*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f0003ff; valaddr_reg:x3;
val_offset:148*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f0007ff; valaddr_reg:x3;
val_offset:149*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 149*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f000fff; valaddr_reg:x3;
val_offset:150*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f001fff; valaddr_reg:x3;
val_offset:151*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 151*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f003fff; valaddr_reg:x3;
val_offset:152*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f007fff; valaddr_reg:x3;
val_offset:153*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f00ffff; valaddr_reg:x3;
val_offset:154*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f01ffff; valaddr_reg:x3;
val_offset:155*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 155*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f03ffff; valaddr_reg:x3;
val_offset:156*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f07ffff; valaddr_reg:x3;
val_offset:157*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 157*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f0fffff; valaddr_reg:x3;
val_offset:158*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f199999; valaddr_reg:x3;
val_offset:159*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f1fffff; valaddr_reg:x3;
val_offset:160*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f249249; valaddr_reg:x3;
val_offset:161*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 161*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f333333; valaddr_reg:x3;
val_offset:162*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f36db6d; valaddr_reg:x3;
val_offset:163*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 163*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f3bbbbb; valaddr_reg:x3;
val_offset:164*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f3fffff; valaddr_reg:x3;
val_offset:165*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f400000; valaddr_reg:x3;
val_offset:166*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f444444; valaddr_reg:x3;
val_offset:167*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 167*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f4ccccc; valaddr_reg:x3;
val_offset:168*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f5b6db6; valaddr_reg:x3;
val_offset:169*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 169*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f600000; valaddr_reg:x3;
val_offset:170*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f666666; valaddr_reg:x3;
val_offset:171*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f6db6db; valaddr_reg:x3;
val_offset:172*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f700000; valaddr_reg:x3;
val_offset:173*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 173*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f780000; valaddr_reg:x3;
val_offset:174*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7c0000; valaddr_reg:x3;
val_offset:175*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 175*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7e0000; valaddr_reg:x3;
val_offset:176*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7f0000; valaddr_reg:x3;
val_offset:177*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7f8000; valaddr_reg:x3;
val_offset:178*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fc000; valaddr_reg:x3;
val_offset:179*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 179*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fe000; valaddr_reg:x3;
val_offset:180*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ff000; valaddr_reg:x3;
val_offset:181*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 181*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ff800; valaddr_reg:x3;
val_offset:182*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ffc00; valaddr_reg:x3;
val_offset:183*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ffe00; valaddr_reg:x3;
val_offset:184*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fff00; valaddr_reg:x3;
val_offset:185*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 185*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fff80; valaddr_reg:x3;
val_offset:186*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fffc0; valaddr_reg:x3;
val_offset:187*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 187*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fffe0; valaddr_reg:x3;
val_offset:188*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ffff0; valaddr_reg:x3;
val_offset:189*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ffff8; valaddr_reg:x3;
val_offset:190*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ffffc; valaddr_reg:x3;
val_offset:191*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 191*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7ffffe; valaddr_reg:x3;
val_offset:192*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x7f7fffff; valaddr_reg:x3;
val_offset:193*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 193*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsqrt.s ; op1:f30; dest:f31; op1val:0x1; valaddr_reg:x3;
val_offset:194*FLEN/8; rmval:dyn; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fsqrt.s, f31, f30, dyn, 0, 0, x3, 194*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
NAN_BOXED(8389631,32,FLEN)
NAN_BOXED(8390655,32,FLEN)
NAN_BOXED(8392703,32,FLEN)
NAN_BOXED(8396799,32,FLEN)
NAN_BOXED(8404991,32,FLEN)
NAN_BOXED(8421375,32,FLEN)
NAN_BOXED(8454143,32,FLEN)
NAN_BOXED(8519679,32,FLEN)
NAN_BOXED(8650751,32,FLEN)
NAN_BOXED(8912895,32,FLEN)
NAN_BOXED(9437183,32,FLEN)
NAN_BOXED(10485759,32,FLEN)
NAN_BOXED(12582911,32,FLEN)
NAN_BOXED(12582912,32,FLEN)
NAN_BOXED(14680064,32,FLEN)
NAN_BOXED(15728640,32,FLEN)
NAN_BOXED(16252928,32,FLEN)
NAN_BOXED(16515072,32,FLEN)
NAN_BOXED(16646144,32,FLEN)
NAN_BOXED(16711680,32,FLEN)
NAN_BOXED(16744448,32,FLEN)
NAN_BOXED(16760832,32,FLEN)
NAN_BOXED(16769024,32,FLEN)
NAN_BOXED(16773120,32,FLEN)
NAN_BOXED(16775168,32,FLEN)
NAN_BOXED(16776192,32,FLEN)
NAN_BOXED(16776704,32,FLEN)
NAN_BOXED(16776960,32,FLEN)
NAN_BOXED(16777088,32,FLEN)
NAN_BOXED(16777152,32,FLEN)
NAN_BOXED(16777184,32,FLEN)
NAN_BOXED(16777200,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(16777215,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(1065353231,32,FLEN)
NAN_BOXED(1065353247,32,FLEN)
NAN_BOXED(1065353279,32,FLEN)
NAN_BOXED(1065353343,32,FLEN)
NAN_BOXED(1065353471,32,FLEN)
NAN_BOXED(1065353727,32,FLEN)
NAN_BOXED(1065354239,32,FLEN)
NAN_BOXED(1065355263,32,FLEN)
NAN_BOXED(1065357311,32,FLEN)
NAN_BOXED(1065361407,32,FLEN)
NAN_BOXED(1065369599,32,FLEN)
NAN_BOXED(1065385983,32,FLEN)
NAN_BOXED(1065418751,32,FLEN)
NAN_BOXED(1065484287,32,FLEN)
NAN_BOXED(1065615359,32,FLEN)
NAN_BOXED(1065877503,32,FLEN)
NAN_BOXED(1066401791,32,FLEN)
NAN_BOXED(1067450367,32,FLEN)
NAN_BOXED(1069547519,32,FLEN)
NAN_BOXED(1069547520,32,FLEN)
NAN_BOXED(1071644672,32,FLEN)
NAN_BOXED(1072693248,32,FLEN)
NAN_BOXED(1073217536,32,FLEN)
NAN_BOXED(1073479680,32,FLEN)
NAN_BOXED(1073610752,32,FLEN)
NAN_BOXED(1073676288,32,FLEN)
NAN_BOXED(1073709056,32,FLEN)
NAN_BOXED(1073725440,32,FLEN)
NAN_BOXED(1073733632,32,FLEN)
NAN_BOXED(1073737728,32,FLEN)
NAN_BOXED(1073739776,32,FLEN)
NAN_BOXED(1073740800,32,FLEN)
NAN_BOXED(1073741312,32,FLEN)
NAN_BOXED(1073741568,32,FLEN)
NAN_BOXED(1073741696,32,FLEN)
NAN_BOXED(1073741760,32,FLEN)
NAN_BOXED(1073741792,32,FLEN)
NAN_BOXED(1073741808,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(1073741823,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130706447,32,FLEN)
NAN_BOXED(2130706463,32,FLEN)
NAN_BOXED(2130706495,32,FLEN)
NAN_BOXED(2130706559,32,FLEN)
NAN_BOXED(2130706687,32,FLEN)
NAN_BOXED(2130706943,32,FLEN)
NAN_BOXED(2130707455,32,FLEN)
NAN_BOXED(2130708479,32,FLEN)
NAN_BOXED(2130710527,32,FLEN)
NAN_BOXED(2130714623,32,FLEN)
NAN_BOXED(2130722815,32,FLEN)
NAN_BOXED(2130739199,32,FLEN)
NAN_BOXED(2130771967,32,FLEN)
NAN_BOXED(2130837503,32,FLEN)
NAN_BOXED(2130968575,32,FLEN)
NAN_BOXED(2131230719,32,FLEN)
NAN_BOXED(2131755007,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132803583,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134900735,32,FLEN)
NAN_BOXED(2134900736,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2136997888,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2138046464,32,FLEN)
NAN_BOXED(2138570752,32,FLEN)
NAN_BOXED(2138832896,32,FLEN)
NAN_BOXED(2138963968,32,FLEN)
NAN_BOXED(2139029504,32,FLEN)
NAN_BOXED(2139062272,32,FLEN)
NAN_BOXED(2139078656,32,FLEN)
NAN_BOXED(2139086848,32,FLEN)
NAN_BOXED(2139090944,32,FLEN)
NAN_BOXED(2139092992,32,FLEN)
NAN_BOXED(2139094016,32,FLEN)
NAN_BOXED(2139094528,32,FLEN)
NAN_BOXED(2139094784,32,FLEN)
NAN_BOXED(2139094912,32,FLEN)
NAN_BOXED(2139094976,32,FLEN)
NAN_BOXED(2139095008,32,FLEN)
NAN_BOXED(2139095024,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(1,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 134*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
