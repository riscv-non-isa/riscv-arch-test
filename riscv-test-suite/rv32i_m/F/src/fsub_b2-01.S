
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:32 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fsub_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fsub_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==f5, rs2==f5, rd==f22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x200003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f5; op2:f5; dest:f22; op1val:0x2; op2val:0x2;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f22, f5, f5, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rd != rs2, rs1==f19, rs2==f17, rd==f19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f19; op2:f17; dest:f19; op1val:0x3; op2val:0x23;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f19, f19, f17, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs2 == rd != rs1, rs1==f31, rs2==f30, rd==f30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f7ffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f31; op2:f30; dest:f30; op1val:0x3; op2val:0x807f7ffc;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f30, f31, f30, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rd, rs1==f27, rs2==f27, rd==f27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007ffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f27; op2:f27; dest:f27; op1val:0x4; op2val:0x4;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f27, f27, f27, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f7, rs2==f16, rd==f21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00fffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f7; op2:f16; dest:f21; op1val:0x4; op2val:0x8000fffc;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f21, f7, f16, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f9, rs2==f25, rd==f7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f9; op2:f25; dest:f7; op1val:0x5; op2val:0x6;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f7, f9, f25, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f2, rs2==f6, rd==f28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x040005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f2; op2:f6; dest:f28; op1val:0x5; op2val:0x40005;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f28, f2, f6, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f6, rs2==f8, rd==f9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000005 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f6; op2:f8; dest:f9; op1val:0x5; op2val:0x400006;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f9, f6, f8, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f24, rs2==f4, rd==f25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000007 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x008008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f24; op2:f4; dest:f25; op1val:0x7; op2val:0x8008;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f25, f24, f4, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f16, rs2==f26, rd==f20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000009 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f16; op2:f26; dest:f20; op1val:0x9; op2val:0x80000018;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f20, f16, f26, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f22, rs2==f10, rd==f17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x01000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f22; op2:f10; dest:f17; op1val:0xa; op2val:0x1000b;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f17, f22, f10, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f12, rs2==f2, rd==f15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f12; op2:f2; dest:f15; op1val:0xb; op2val:0x7ffffa;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f15, f12, f2, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f11, rs2==f9, rd==f16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00008d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f11; op2:f9; dest:f16; op1val:0xd; op2val:0x8d;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f16, f11, f9, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f23, rs2==f0, rd==f31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003ff2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f23; op2:f0; dest:f31; op1val:0xe; op2val:0x80003ff2;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f23, f0, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f21, rs2==f14, rd==f23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01fff3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f21; op2:f14; dest:f23; op1val:0xe; op2val:0x8001fff3;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f23, f21, f14, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f18, rs2==f31, rd==f4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x60000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f18; op2:f31; dest:f4; op1val:0xf; op2val:0x60000e;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f4, f18, f31, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f29, rs2==f11, rd==f0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001ff2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f29; op2:f11; dest:f0; op1val:0xf; op2val:0x80001ff2;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f0, f29, f11, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f1, rs2==f7, rd==f29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x004012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f1; op2:f7; dest:f29; op1val:0x11; op2val:0x4012;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f29, f1, f7, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f15, rs2==f3, rd==f24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x700010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f15; op2:f3; dest:f24; op1val:0x11; op2val:0x700010;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f24, f15, f3, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f8, rs2==f29, rd==f1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000012 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f8; op2:f29; dest:f1; op1val:0x12; op2val:0x11;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f1, f8, f29, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f14, rs2==f18, rd==f11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f14; op2:f18; dest:f11; op1val:0x15; op2val:0x18;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f11, f14, f18, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f30, rs2==f19, rd==f12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000015 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f19; dest:f12; op1val:0x15; op2val:0x8000002c;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f12, f30, f19, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f4, rs2==f20, rd==f8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000016 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f4; op2:f20; dest:f8; op1val:0x16; op2val:0x7ffff5;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f8, f4, f20, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f13, rs2==f22, rd==f2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x004019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f13; op2:f22; dest:f2; op1val:0x19; op2val:0x4019;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f2, f13, f22, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f3, rs2==f28, rd==f13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000019 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffe8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f3; op2:f28; dest:f13; op1val:0x19; op2val:0x8000ffe8;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f13, f3, f28, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f28, rs2==f15, rd==f3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7effe5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f28; op2:f15; dest:f3; op1val:0x1a; op2val:0x807effe5;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f3, f28, f15, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f25, rs2==f24, rd==f26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f25; op2:f24; dest:f26; op1val:0x1b; op2val:0x80000025;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f26, f25, f24, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f20, rs2==f21, rd==f6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffe6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f20; op2:f21; dest:f6; op1val:0x1b; op2val:0x8007ffe6;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f6, f20, f21, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f17, rs2==f13, rd==f18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffa4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f17; op2:f13; dest:f18; op1val:0x1b; op2val:0x807fffa4;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f18, f17, f13, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f0, rs2==f12, rd==f10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffe4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f0; op2:f12; dest:f10; op1val:0x1c; op2val:0x8007ffe4;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f10, f0, f12, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f10, rs2==f1, rd==f5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x77ffe3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f10; op2:f1; dest:f5; op1val:0x1c; op2val:0x8077ffe3;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f5, f10, f1, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f26, rs2==f23, rd==f14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffe2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f26; op2:f23; dest:f14; op1val:0x1c; op2val:0x807fffe2;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f14, f26, f23, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x1d; op2val:0x25;
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00009e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x1d; op2val:0x9e;
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffe4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x1d; op2val:0x801fffe4;
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x1e; op2val:0x20;
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x1e; op2val:0x22;
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fe2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x1e; op2val:0x80001fe2;
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00001f and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x1f; op2val:0x80001a;
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x080020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x20; op2val:0x80020;
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x21; op2val:0x1d;
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x100022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x21; op2val:0x100022;
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x23; op2val:0x1e;
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffa2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x23; op2val:0x7fffa2;
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000023 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fdd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x23; op2val:0x80000fdd;
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000024 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x24; op2val:0x21;
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000025 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x008025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x25; op2val:0x8025;
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000226 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x26; op2val:0x226;
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x26; op2val:0x7ff025;
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x26; op2val:0x800003db;
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff7d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x26; op2val:0x807ff7d9;
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x020029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x28; op2val:0x20029;
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fd9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x28; op2val:0x80003fd9;
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7e0029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2a; op2val:0x7e0029;
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fdfd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2a; op2val:0x807fdfd5;
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2b; op2val:0x7fff2a;
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff82b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2c; op2val:0x7ff82b;
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007fd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2c; op2val:0x80007fd5;
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7bffd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2c; op2val:0x807bffd3;
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2d; op2val:0x1c;
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffd2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2d; op2val:0x803fffd2;
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2d; op2val:0x807fffb2;
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00002f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2f; op2val:0x40002f;
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000030 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffc2f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x30; op2val:0x7ffc2f;
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x780030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x31; op2val:0x780030;
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffcf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x31; op2val:0x8003ffcf;
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5fffce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x31; op2val:0x805fffce;
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000031 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x31; op2val:0x807fffbe;
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000032 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x32; op2val:0x800000ce;
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000234 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x33; op2val:0x234;
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x020033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x33; op2val:0x20033;
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000033 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x33; op2val:0x803fffce;
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x100034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x34; op2val:0x100034;
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000034 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fbfcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x34; op2val:0x807fbfcb;
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000035 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7c0034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x35; op2val:0x7c0034;
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000036 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x080037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x36; op2val:0x80037;
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x37; op2val:0x1038;
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffc9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x38; op2val:0x800fffc9;
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3a; op2val:0x2a;
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3b; op2val:0x4b;
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffc2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3b; op2val:0x807fffc2;
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fc03e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f; op2val:0x7fc03e;
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00003f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f; op2val:0x80000041;
   valaddr_reg:x3; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 164*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0x38;
   valaddr_reg:x3; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 166*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0x41;
   valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x010040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0x10040;
   valaddr_reg:x3; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 170*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fc1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0x80000fc1;
   valaddr_reg:x3; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 172*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fefbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0x807fefbf;
   valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000040 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffdbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x40; op2val:0x807ffdbf;
   valaddr_reg:x3; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 176*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x41; op2val:0x1041;
   valaddr_reg:x3; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 178*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x002041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x41; op2val:0x2041;
   valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000041 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffe40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x41; op2val:0x7ffe40;
   valaddr_reg:x3; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 182*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffb5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x42; op2val:0x807fffb5;
   valaddr_reg:x3; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 184*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000084 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x43; op2val:0x84;
   valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x44; op2val:0x8000003d;
   valaddr_reg:x3; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 188*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000044 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffbc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x44; op2val:0x801fffbc;
   valaddr_reg:x3; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 190*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x45; op2val:0x800004;
   valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x45; op2val:0x800043;
   valaddr_reg:x3; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 194*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x46; op2val:0x57;
   valaddr_reg:x3; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 196*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x46; op2val:0x8001ffba;
   valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000088 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x48; op2val:0x88;
   valaddr_reg:x3; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 200*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7dffb6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x49; op2val:0x807dffb6;
   valaddr_reg:x3; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 202*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00044b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x4a; op2val:0x44b;
   valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f804a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x4b; op2val:0x7f804a;
   valaddr_reg:x3; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 206*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x40004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x4c; op2val:0x40004b;
   valaddr_reg:x3; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 208*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffeb3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x4c; op2val:0x807ffeb3;
   valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fe04d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x4e; op2val:0x7fe04d;
   valaddr_reg:x3; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 212*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x4e; op2val:0x800001b2;
   valaddr_reg:x3; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 214*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x50; op2val:0x47;
   valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000072 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x51; op2val:0x72;
   valaddr_reg:x3; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 218*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000051 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000151 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x51; op2val:0x151;
   valaddr_reg:x3; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 220*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x53; op2val:0x800001ae;
   valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x54; op2val:0x34;
   valaddr_reg:x3; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 224*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000155 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x54; op2val:0x155;
   valaddr_reg:x3; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 226*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000856 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x55; op2val:0x856;
   valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x55; op2val:0x800000ac;
   valaddr_reg:x3; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 230*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x200056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x56; op2val:0x200056;
   valaddr_reg:x3; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 232*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000056 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffba9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x56; op2val:0x807ffba9;
   valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x57; op2val:0x60;
   valaddr_reg:x3; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 236*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6fffa8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x57; op2val:0x806fffa8;
   valaddr_reg:x3; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 238*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000057 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x57; op2val:0x807fff28;
   valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5a; op2val:0x800007a6;
   valaddr_reg:x3; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 242*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5a; op2val:0x800007a7;
   valaddr_reg:x3; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 244*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5b; op2val:0x60;
   valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffa0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5b; op2val:0x807fffa0;
   valaddr_reg:x3; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 248*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00085d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5d; op2val:0x85d;
   valaddr_reg:x3; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 250*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5d; op2val:0x800054;
   valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffa3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5d; op2val:0x800fffa3;
   valaddr_reg:x3; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 254*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffa3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5e; op2val:0x8003ffa3;
   valaddr_reg:x3; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 256*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x002060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x5f; op2val:0x2060;
   valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000460 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x60; op2val:0x460;
   valaddr_reg:x3; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 260*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000060 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x040061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x60; op2val:0x40061;
   valaddr_reg:x3; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 262*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000061 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x61; op2val:0x60;
   valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x62; op2val:0x60;
   valaddr_reg:x3; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 266*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000062 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fff9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x62; op2val:0x803fff9e;
   valaddr_reg:x3; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 268*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f0062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x63; op2val:0x7f0062;
   valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x63; op2val:0x800060;
   valaddr_reg:x3; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 272*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00039d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x63; op2val:0x8000039d;
   valaddr_reg:x3; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 274*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800002; op2val:0x800003fe;
   valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000004 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800004; op2val:0x1000006;
   valaddr_reg:x3; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 278*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000ffa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800006; op2val:0x80000ffa;
   valaddr_reg:x3; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 280*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000009 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000084 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800009; op2val:0x1000084;
   valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80000a; op2val:0x9;
   valaddr_reg:x3; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 284*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x040006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80000b; op2val:0x1040006;
   valaddr_reg:x3; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 286*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x02 and fm2 == 0x080006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80000c; op2val:0x1080006;
   valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000072 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80000e; op2val:0x80000072;
   valaddr_reg:x3; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 290*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00000f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007ff1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80000f; op2val:0x80007ff1;
   valaddr_reg:x3; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 292*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800016; op2val:0x8000ffea;
   valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80001b; op2val:0x100000e;
   valaddr_reg:x3; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 296*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fe1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80001f; op2val:0x80001fe1;
   valaddr_reg:x3; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 298*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00001f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffe1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80001f; op2val:0x8001ffe1;
   valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000020 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x020010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800020; op2val:0x1020010;
   valaddr_reg:x3; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 302*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000410 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800021; op2val:0x1000410;
   valaddr_reg:x3; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 304*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000022 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x004011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800022; op2val:0x1004011;
   valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000023 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800023; op2val:0x1b;
   valaddr_reg:x3; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 308*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800026; op2val:0x16;
   valaddr_reg:x3; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 310*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800026; op2val:0x100001b;
   valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000026 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800026; op2val:0x800000da;
   valaddr_reg:x3; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 314*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000028 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x010014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800028; op2val:0x1010014;
   valaddr_reg:x3; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 316*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800029; op2val:0x1000015;
   valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800029; op2val:0x1000016;
   valaddr_reg:x3; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 320*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800029; op2val:0x1000054;
   valaddr_reg:x3; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 322*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000029 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000114 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800029; op2val:0x1000114;
   valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000035 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800035; op2val:0x800007cb;
   valaddr_reg:x3; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 326*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000036 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800036; op2val:0x80003fca;
   valaddr_reg:x3; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 328*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000038 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800038; op2val:0x8007ffc8;
   valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80003a; op2val:0x100003d;
   valaddr_reg:x3; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 332*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x02 and fm2 == 0x10001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80003a; op2val:0x110001d;
   valaddr_reg:x3; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 334*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003b and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00021e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80003b; op2val:0x100021e;
   valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80003b; op2val:0x80000005;
   valaddr_reg:x3; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 338*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800045; op2val:0x25;
   valaddr_reg:x3; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 340*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000046 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x008023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800046; op2val:0x1008023;
   valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800046; op2val:0x800fffba;
   valaddr_reg:x3; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 344*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000047 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800047; op2val:0x45;
   valaddr_reg:x3; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 346*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000047 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffb9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800047; op2val:0x801fffb9;
   valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800049; op2val:0x45;
   valaddr_reg:x3; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 350*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80004d; op2val:0x1000036;
   valaddr_reg:x3; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 352*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80004f; op2val:0x800001b1;
   valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000828 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800050; op2val:0x1000828;
   valaddr_reg:x3; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 356*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000054 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x20002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800054; op2val:0x120002a;
   valaddr_reg:x3; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 358*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00202a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800055; op2val:0x100202a;
   valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000059 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x00102c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800059; op2val:0x100102c;
   valaddr_reg:x3; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 362*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x00005c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffa4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x80005c; op2val:0x803fffa4;
   valaddr_reg:x3; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 364*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000060 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffa0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x800060; op2val:0x8003ffa0;
   valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000001 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800001; op2val:0x40000001;
   valaddr_reg:x3; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 368*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x100006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000b; op2val:0x40100006;
   valaddr_reg:x3; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 370*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x6b and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000c; op2val:0x35800000;
   valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000c and fs2 == 0 and fe2 == 0x80 and fm2 == 0x020006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000c; op2val:0x40020006;
   valaddr_reg:x3; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 374*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00000e and fs2 == 1 and fe2 == 0x69 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80000e; op2val:0xb4800000;
   valaddr_reg:x3; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 376*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000011 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800011; op2val:0x4000000a;
   valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000016 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7f5000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800016; op2val:0xba7f5000;
   valaddr_reg:x3; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 380*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000017 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00800c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800017; op2val:0x4000800c;
   valaddr_reg:x3; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 382*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80001a; op2val:0x4000004d;
   valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00400f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80001e; op2val:0x4000400f;
   valaddr_reg:x3; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 386*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7f8800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80001e; op2val:0xbaff8800;
   valaddr_reg:x3; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 388*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00001e and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7ff100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80001e; op2val:0xbc7ff100;
   valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000021 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x040010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800021; op2val:0x40040010;
   valaddr_reg:x3; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 392*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000028 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x6c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800028; op2val:0xb86c0000;
   valaddr_reg:x3; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 394*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80002b; op2val:0x40001016;
   valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000216 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80002d; op2val:0x40000216;
   valaddr_reg:x3; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 398*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00002e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000117 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80002e; op2val:0x40000117;
   valaddr_reg:x3; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 400*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000030 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800030; op2val:0xb6000000;
   valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000035 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00009a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800035; op2val:0x4000009a;
   valaddr_reg:x3; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 404*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000037 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800037; op2val:0x40000024;
   valaddr_reg:x3; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 406*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80003a; op2val:0x4020001d;
   valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003b and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffc50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80003b; op2val:0xbdfffc50;
   valaddr_reg:x3; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 410*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003d and fs2 == 1 and fe2 == 0x6f and fm2 == 0x430000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80003d; op2val:0xb7c30000;
   valaddr_reg:x3; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 412*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00003e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80003e; op2val:0x4000002f;
   valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000042 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7fef80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800042; op2val:0xbcffef80;
   valaddr_reg:x3; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 416*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000043 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x0c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800043; op2val:0x368c0000;
   valaddr_reg:x3; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 418*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000045 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000422 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800045; op2val:0x40000422;
   valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000046 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fba00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800046; op2val:0xbbffba00;
   valaddr_reg:x3; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 422*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000048 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800048; op2val:0x40000028;
   valaddr_reg:x3; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 424*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000049 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800049; op2val:0x40000044;
   valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004a and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ff6c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80004a; op2val:0xbd7ff6c0;
   valaddr_reg:x3; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 428*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004b and fs2 == 0 and fe2 == 0x80 and fm2 == 0x010026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80004b; op2val:0x40010026;
   valaddr_reg:x3; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 430*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004b and fs2 == 1 and fe2 == 0x72 and fm2 == 0x76a000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80004b; op2val:0xb976a000;
   valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004d and fs2 == 0 and fe2 == 0x80 and fm2 == 0x002026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80004d; op2val:0x40002026;
   valaddr_reg:x3; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 434*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004e and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffec8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80004e; op2val:0xbefffec8;
   valaddr_reg:x3; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 436*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00004f and fs2 == 1 and fe2 == 0x71 and fm2 == 0x6c4000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80004f; op2val:0xb8ec4000;
   valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000050 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000828 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800050; op2val:0x40000828;
   valaddr_reg:x3; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 440*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000053 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7ad000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800053; op2val:0xb9fad000;
   valaddr_reg:x3; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 442*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x1a0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800055; op2val:0x371a0000;
   valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000055 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffd58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800055; op2val:0xbe7ffd58;
   valaddr_reg:x3; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 446*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000057 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x08002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800057; op2val:0x4008002c;
   valaddr_reg:x3; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 448*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005a and fs2 == 0 and fe2 == 0x6e and fm2 == 0x320000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80005a; op2val:0x37320000;
   valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005e and fs2 == 1 and fe2 == 0x6d and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80005e; op2val:0xb6880000;
   valaddr_reg:x3; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 452*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x6e and fm2 == 0x3a0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80005f; op2val:0x373a0000;
   valaddr_reg:x3; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 454*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x00005f and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f80005f; op2val:0x40000030;
   valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000063 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7f3a00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3f800063; op2val:0xbb7f3a00;
   valaddr_reg:x3; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 458*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000002 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7dfffa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000002; op2val:0xfefdfffa;
   valaddr_reg:x3; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 460*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000003 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7efff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000003; op2val:0xfefefff8;
   valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000007 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000007; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 464*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3fffea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00000a; op2val:0xfebfffea;
   valaddr_reg:x3; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 466*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fdfea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00000a; op2val:0xfeffdfea;
   valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00000c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffbe6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00000c; op2val:0xfefffbe6;
   valaddr_reg:x3; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 470*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000011 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000011; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 472*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000013 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000013; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000014 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6fffd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000014; op2val:0xfeefffd6;
   valaddr_reg:x3; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 476*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000017 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000017; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 478*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001b and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00001b; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ff7c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00001d; op2val:0xfefff7c4;
   valaddr_reg:x3; val_offset:482*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 482*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00001e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00001e; op2val:0xfeffffbe;
   valaddr_reg:x3; val_offset:484*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 484*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000020 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fefbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000020; op2val:0xfeffefbe;
   valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000021 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000021; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 488*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000027 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000027; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 490*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000027 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000027; op2val:0xfeffff70;
   valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000028 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000028; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:494*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 494*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000028 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffa6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000028; op2val:0xfeffffa6;
   valaddr_reg:x3; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 496*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000029; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000029 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000029; op2val:0xfeffff8c;
   valaddr_reg:x3; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 500*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00002a; op2val:0xfeffff9a;
   valaddr_reg:x3; val_offset:502*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 502*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00002b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00002b; op2val:0xfeffff28;
   valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000033 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000033; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 506*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000038 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000038; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 508*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000039 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000039; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00003b and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00003b; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:512*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 512*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000040 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x77ff7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000040; op2val:0xfef7ff7e;
   valaddr_reg:x3; val_offset:514*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 514*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000041 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5fff7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000041; op2val:0xfedfff7c;
   valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000045 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000045; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 518*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000046 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffe72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000046; op2val:0xfefffe72;
   valaddr_reg:x3; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 520*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000047 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fbf70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000047; op2val:0xfeffbf70;
   valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffd68 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00004b; op2val:0xfefffd68;
   valaddr_reg:x3; val_offset:524*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 524*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00004e and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00004e; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:526*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 526*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000053 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000053; op2val:0xfeffff56;
   valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000056 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000056; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:530*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 530*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000056 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffea4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000056; op2val:0xfe7ffea4;
   valaddr_reg:x3; val_offset:532*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 532*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000057 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000057; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000058 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000058; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:536*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 536*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005b and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00005b; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 538*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005d and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00005d; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00005e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7f7f42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f00005e; op2val:0xfeff7f42;
   valaddr_reg:x3; val_offset:542*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 542*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000060 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000060; op2val:0x7f800000;
   valaddr_reg:x3; val_offset:544*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 544*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000061 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7bff3c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x7f000061; op2val:0xfefbff3c;
   valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000002 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x200003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x200003;
   valaddr_reg:x3; val_offset:548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 548*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3; op2val:0x23;
   valaddr_reg:x3; val_offset:550*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 550*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000003 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f7ffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x3; op2val:0x807f7ffc;
   valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000004 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007ffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:f30; op2:f29; dest:f31; op1val:0x4; op2val:0x80007ffc;
   valaddr_reg:x3; val_offset:554*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, f31, f30, f29, dyn, 0, 0, x3, 554*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2155839484,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(2147549180,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(6,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(262149,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(4194310,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(32776,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(2147483672,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(65547,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(8388602,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(141,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(2147500018,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(2147614707,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(6291470,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2147491826,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(16402,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(7340048,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(2147483692,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(8388597,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(16409,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(2147549160,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(2155806693,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(2147483685,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(2148007910,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(2155872164,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(2148007908,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(2155347939,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(2155872226,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(158,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(2149580772,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(2147491810,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(8388634,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(524320,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(1048610,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(8388514,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(2147487709,32,FLEN)
NAN_BOXED(36,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(32805,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(550,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(8384549,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(2147484635,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(2155870169,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(131113,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(2147499993,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(8257577,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(2155864021,32,FLEN)
NAN_BOXED(43,32,FLEN)
NAN_BOXED(8388394,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(8386603,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(2147516373,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(2155610067,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(2151677906,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(2155872178,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(4194351,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(8387631,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(7864368,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(2147745743,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(2153775054,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(2155872190,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(2147483854,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(564,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(131123,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(2151677902,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(1048628,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(2155855819,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(8126516,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(524343,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(4152,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(2148532169,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(2155872194,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(8372286,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2147483713,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(65600,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(2147487681,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(2155868095,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(2155871679,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(4161,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(8257,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(8388160,32,FLEN)
NAN_BOXED(66,32,FLEN)
NAN_BOXED(2155872181,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(132,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(2147483709,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(2149580732,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(8388612,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(8388675,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(2147614650,32,FLEN)
NAN_BOXED(72,32,FLEN)
NAN_BOXED(136,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(2155741110,32,FLEN)
NAN_BOXED(74,32,FLEN)
NAN_BOXED(1099,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(8355914,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(4194379,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(2155871923,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(8380493,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(2147484082,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(71,32,FLEN)
NAN_BOXED(81,32,FLEN)
NAN_BOXED(114,32,FLEN)
NAN_BOXED(81,32,FLEN)
NAN_BOXED(337,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(2147484078,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(341,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(2134,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(2147483820,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(2097238,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(2155871145,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(2154823592,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(2155872040,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(2147485606,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(2147485607,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(2155872160,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(2141,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(8388692,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(2148532131,32,FLEN)
NAN_BOXED(94,32,FLEN)
NAN_BOXED(2147745699,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(8288,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(1120,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(262241,32,FLEN)
NAN_BOXED(97,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(2151677854,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(8323170,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(8388704,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(2147484573,32,FLEN)
NAN_BOXED(8388610,32,FLEN)
NAN_BOXED(2147484670,32,FLEN)
NAN_BOXED(8388612,32,FLEN)
NAN_BOXED(16777222,32,FLEN)
NAN_BOXED(8388614,32,FLEN)
NAN_BOXED(2147487738,32,FLEN)
NAN_BOXED(8388617,32,FLEN)
NAN_BOXED(16777348,32,FLEN)
NAN_BOXED(8388618,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(8388619,32,FLEN)
NAN_BOXED(17039366,32,FLEN)
NAN_BOXED(8388620,32,FLEN)
NAN_BOXED(17301510,32,FLEN)
NAN_BOXED(8388622,32,FLEN)
NAN_BOXED(2147483762,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2147516401,32,FLEN)
NAN_BOXED(8388630,32,FLEN)
NAN_BOXED(2147549162,32,FLEN)
NAN_BOXED(8388635,32,FLEN)
NAN_BOXED(16777230,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2147491809,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2147614689,32,FLEN)
NAN_BOXED(8388640,32,FLEN)
NAN_BOXED(16908304,32,FLEN)
NAN_BOXED(8388641,32,FLEN)
NAN_BOXED(16778256,32,FLEN)
NAN_BOXED(8388642,32,FLEN)
NAN_BOXED(16793617,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(16777243,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(2147483866,32,FLEN)
NAN_BOXED(8388648,32,FLEN)
NAN_BOXED(16842772,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(16777237,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(16777238,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(16777300,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(16777492,32,FLEN)
NAN_BOXED(8388661,32,FLEN)
NAN_BOXED(2147485643,32,FLEN)
NAN_BOXED(8388662,32,FLEN)
NAN_BOXED(2147499978,32,FLEN)
NAN_BOXED(8388664,32,FLEN)
NAN_BOXED(2148007880,32,FLEN)
NAN_BOXED(8388666,32,FLEN)
NAN_BOXED(16777277,32,FLEN)
NAN_BOXED(8388666,32,FLEN)
NAN_BOXED(17825821,32,FLEN)
NAN_BOXED(8388667,32,FLEN)
NAN_BOXED(16777758,32,FLEN)
NAN_BOXED(8388667,32,FLEN)
NAN_BOXED(2147483653,32,FLEN)
NAN_BOXED(8388677,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(8388678,32,FLEN)
NAN_BOXED(16810019,32,FLEN)
NAN_BOXED(8388678,32,FLEN)
NAN_BOXED(2148532154,32,FLEN)
NAN_BOXED(8388679,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(8388679,32,FLEN)
NAN_BOXED(2149580729,32,FLEN)
NAN_BOXED(8388681,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(8388685,32,FLEN)
NAN_BOXED(16777270,32,FLEN)
NAN_BOXED(8388687,32,FLEN)
NAN_BOXED(2147484081,32,FLEN)
NAN_BOXED(8388688,32,FLEN)
NAN_BOXED(16779304,32,FLEN)
NAN_BOXED(8388692,32,FLEN)
NAN_BOXED(18874410,32,FLEN)
NAN_BOXED(8388693,32,FLEN)
NAN_BOXED(16785450,32,FLEN)
NAN_BOXED(8388697,32,FLEN)
NAN_BOXED(16781356,32,FLEN)
NAN_BOXED(8388700,32,FLEN)
NAN_BOXED(2151677860,32,FLEN)
NAN_BOXED(8388704,32,FLEN)
NAN_BOXED(2147745696,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(1073741825,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(1074790406,32,FLEN)
NAN_BOXED(1065353228,32,FLEN)
NAN_BOXED(897581056,32,FLEN)
NAN_BOXED(1065353228,32,FLEN)
NAN_BOXED(1073872902,32,FLEN)
NAN_BOXED(1065353230,32,FLEN)
NAN_BOXED(3028287488,32,FLEN)
NAN_BOXED(1065353233,32,FLEN)
NAN_BOXED(1073741834,32,FLEN)
NAN_BOXED(1065353238,32,FLEN)
NAN_BOXED(3128905728,32,FLEN)
NAN_BOXED(1065353239,32,FLEN)
NAN_BOXED(1073774604,32,FLEN)
NAN_BOXED(1065353242,32,FLEN)
NAN_BOXED(1073741901,32,FLEN)
NAN_BOXED(1065353246,32,FLEN)
NAN_BOXED(1073758223,32,FLEN)
NAN_BOXED(1065353246,32,FLEN)
NAN_BOXED(3137308672,32,FLEN)
NAN_BOXED(1065353246,32,FLEN)
NAN_BOXED(3162501376,32,FLEN)
NAN_BOXED(1065353249,32,FLEN)
NAN_BOXED(1074003984,32,FLEN)
NAN_BOXED(1065353256,32,FLEN)
NAN_BOXED(3094085632,32,FLEN)
NAN_BOXED(1065353259,32,FLEN)
NAN_BOXED(1073745942,32,FLEN)
NAN_BOXED(1065353261,32,FLEN)
NAN_BOXED(1073742358,32,FLEN)
NAN_BOXED(1065353262,32,FLEN)
NAN_BOXED(1073742103,32,FLEN)
NAN_BOXED(1065353264,32,FLEN)
NAN_BOXED(3053453312,32,FLEN)
NAN_BOXED(1065353269,32,FLEN)
NAN_BOXED(1073741978,32,FLEN)
NAN_BOXED(1065353271,32,FLEN)
NAN_BOXED(1073741860,32,FLEN)
NAN_BOXED(1065353274,32,FLEN)
NAN_BOXED(1075839005,32,FLEN)
NAN_BOXED(1065353275,32,FLEN)
NAN_BOXED(3187670096,32,FLEN)
NAN_BOXED(1065353277,32,FLEN)
NAN_BOXED(3083010048,32,FLEN)
NAN_BOXED(1065353278,32,FLEN)
NAN_BOXED(1073741871,32,FLEN)
NAN_BOXED(1065353282,32,FLEN)
NAN_BOXED(3170889600,32,FLEN)
NAN_BOXED(1065353283,32,FLEN)
NAN_BOXED(915144704,32,FLEN)
NAN_BOXED(1065353285,32,FLEN)
NAN_BOXED(1073742882,32,FLEN)
NAN_BOXED(1065353286,32,FLEN)
NAN_BOXED(3154098688,32,FLEN)
NAN_BOXED(1065353288,32,FLEN)
NAN_BOXED(1073741864,32,FLEN)
NAN_BOXED(1065353289,32,FLEN)
NAN_BOXED(1073741892,32,FLEN)
NAN_BOXED(1065353290,32,FLEN)
NAN_BOXED(3179280064,32,FLEN)
NAN_BOXED(1065353291,32,FLEN)
NAN_BOXED(1073807398,32,FLEN)
NAN_BOXED(1065353291,32,FLEN)
NAN_BOXED(3111559168,32,FLEN)
NAN_BOXED(1065353293,32,FLEN)
NAN_BOXED(1073750054,32,FLEN)
NAN_BOXED(1065353294,32,FLEN)
NAN_BOXED(3204447944,32,FLEN)
NAN_BOXED(1065353295,32,FLEN)
NAN_BOXED(3102490624,32,FLEN)
NAN_BOXED(1065353296,32,FLEN)
NAN_BOXED(1073743912,32,FLEN)
NAN_BOXED(1065353299,32,FLEN)
NAN_BOXED(3120222208,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(924450816,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(3196058968,32,FLEN)
NAN_BOXED(1065353303,32,FLEN)
NAN_BOXED(1074266156,32,FLEN)
NAN_BOXED(1065353306,32,FLEN)
NAN_BOXED(926023680,32,FLEN)
NAN_BOXED(1065353310,32,FLEN)
NAN_BOXED(3062366208,32,FLEN)
NAN_BOXED(1065353311,32,FLEN)
NAN_BOXED(926547968,32,FLEN)
NAN_BOXED(1065353311,32,FLEN)
NAN_BOXED(1073741872,32,FLEN)
NAN_BOXED(1065353315,32,FLEN)
NAN_BOXED(3145677312,32,FLEN)
NAN_BOXED(2130706434,32,FLEN)
NAN_BOXED(4278059002,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(4278124536,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706442,32,FLEN)
NAN_BOXED(4273995754,32,FLEN)
NAN_BOXED(2130706442,32,FLEN)
NAN_BOXED(4278181866,32,FLEN)
NAN_BOXED(2130706444,32,FLEN)
NAN_BOXED(4278189030,32,FLEN)
NAN_BOXED(2130706449,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706451,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706452,32,FLEN)
NAN_BOXED(4277141462,32,FLEN)
NAN_BOXED(2130706455,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706459,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706461,32,FLEN)
NAN_BOXED(4278187972,32,FLEN)
NAN_BOXED(2130706462,32,FLEN)
NAN_BOXED(4278190014,32,FLEN)
NAN_BOXED(2130706464,32,FLEN)
NAN_BOXED(4278185918,32,FLEN)
NAN_BOXED(2130706465,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706471,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706471,32,FLEN)
NAN_BOXED(4278189936,32,FLEN)
NAN_BOXED(2130706472,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706472,32,FLEN)
NAN_BOXED(4278189990,32,FLEN)
NAN_BOXED(2130706473,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706473,32,FLEN)
NAN_BOXED(4278189964,32,FLEN)
NAN_BOXED(2130706474,32,FLEN)
NAN_BOXED(4278189978,32,FLEN)
NAN_BOXED(2130706475,32,FLEN)
NAN_BOXED(4278189864,32,FLEN)
NAN_BOXED(2130706483,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706488,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706489,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706491,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706496,32,FLEN)
NAN_BOXED(4277665662,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(4276092796,32,FLEN)
NAN_BOXED(2130706501,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706502,32,FLEN)
NAN_BOXED(4278189682,32,FLEN)
NAN_BOXED(2130706503,32,FLEN)
NAN_BOXED(4278173552,32,FLEN)
NAN_BOXED(2130706507,32,FLEN)
NAN_BOXED(4278189416,32,FLEN)
NAN_BOXED(2130706510,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706515,32,FLEN)
NAN_BOXED(4278189910,32,FLEN)
NAN_BOXED(2130706518,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706518,32,FLEN)
NAN_BOXED(4269801124,32,FLEN)
NAN_BOXED(2130706519,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706520,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706523,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706525,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706526,32,FLEN)
NAN_BOXED(4278157122,32,FLEN)
NAN_BOXED(2130706528,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(2130706529,32,FLEN)
NAN_BOXED(4277927740,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(2097155,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2155839484,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(2147516412,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 44*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
