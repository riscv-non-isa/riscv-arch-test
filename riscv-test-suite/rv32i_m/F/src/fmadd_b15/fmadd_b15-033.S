
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32c00000; valaddr_reg:x3; val_offset:73728*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73728*0 + 3*0*FLEN/8, x4, x1, x2)

inst_24577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32e00000; valaddr_reg:x3; val_offset:73731*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73731*0 + 3*1*FLEN/8, x4, x1, x2)

inst_24578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32f00000; valaddr_reg:x3; val_offset:73734*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73734*0 + 3*2*FLEN/8, x4, x1, x2)

inst_24579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32f80000; valaddr_reg:x3; val_offset:73737*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73737*0 + 3*3*FLEN/8, x4, x1, x2)

inst_24580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fc0000; valaddr_reg:x3; val_offset:73740*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73740*0 + 3*4*FLEN/8, x4, x1, x2)

inst_24581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fe0000; valaddr_reg:x3; val_offset:73743*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73743*0 + 3*5*FLEN/8, x4, x1, x2)

inst_24582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ff0000; valaddr_reg:x3; val_offset:73746*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73746*0 + 3*6*FLEN/8, x4, x1, x2)

inst_24583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ff8000; valaddr_reg:x3; val_offset:73749*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73749*0 + 3*7*FLEN/8, x4, x1, x2)

inst_24584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ffc000; valaddr_reg:x3; val_offset:73752*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73752*0 + 3*8*FLEN/8, x4, x1, x2)

inst_24585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ffe000; valaddr_reg:x3; val_offset:73755*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73755*0 + 3*9*FLEN/8, x4, x1, x2)

inst_24586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fff000; valaddr_reg:x3; val_offset:73758*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73758*0 + 3*10*FLEN/8, x4, x1, x2)

inst_24587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fff800; valaddr_reg:x3; val_offset:73761*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73761*0 + 3*11*FLEN/8, x4, x1, x2)

inst_24588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fffc00; valaddr_reg:x3; val_offset:73764*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73764*0 + 3*12*FLEN/8, x4, x1, x2)

inst_24589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fffe00; valaddr_reg:x3; val_offset:73767*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73767*0 + 3*13*FLEN/8, x4, x1, x2)

inst_24590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ffff00; valaddr_reg:x3; val_offset:73770*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73770*0 + 3*14*FLEN/8, x4, x1, x2)

inst_24591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ffff80; valaddr_reg:x3; val_offset:73773*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73773*0 + 3*15*FLEN/8, x4, x1, x2)

inst_24592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ffffc0; valaddr_reg:x3; val_offset:73776*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73776*0 + 3*16*FLEN/8, x4, x1, x2)

inst_24593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ffffe0; valaddr_reg:x3; val_offset:73779*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73779*0 + 3*17*FLEN/8, x4, x1, x2)

inst_24594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fffff0; valaddr_reg:x3; val_offset:73782*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73782*0 + 3*18*FLEN/8, x4, x1, x2)

inst_24595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fffff8; valaddr_reg:x3; val_offset:73785*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73785*0 + 3*19*FLEN/8, x4, x1, x2)

inst_24596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fffffc; valaddr_reg:x3; val_offset:73788*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73788*0 + 3*20*FLEN/8, x4, x1, x2)

inst_24597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32fffffe; valaddr_reg:x3; val_offset:73791*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73791*0 + 3*21*FLEN/8, x4, x1, x2)

inst_24598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x32ffffff; valaddr_reg:x3; val_offset:73794*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73794*0 + 3*22*FLEN/8, x4, x1, x2)

inst_24599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3f800001; valaddr_reg:x3; val_offset:73797*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73797*0 + 3*23*FLEN/8, x4, x1, x2)

inst_24600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3f800003; valaddr_reg:x3; val_offset:73800*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73800*0 + 3*24*FLEN/8, x4, x1, x2)

inst_24601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3f800007; valaddr_reg:x3; val_offset:73803*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73803*0 + 3*25*FLEN/8, x4, x1, x2)

inst_24602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3f999999; valaddr_reg:x3; val_offset:73806*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73806*0 + 3*26*FLEN/8, x4, x1, x2)

inst_24603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:73809*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73809*0 + 3*27*FLEN/8, x4, x1, x2)

inst_24604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:73812*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73812*0 + 3*28*FLEN/8, x4, x1, x2)

inst_24605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:73815*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73815*0 + 3*29*FLEN/8, x4, x1, x2)

inst_24606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:73818*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73818*0 + 3*30*FLEN/8, x4, x1, x2)

inst_24607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:73821*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73821*0 + 3*31*FLEN/8, x4, x1, x2)

inst_24608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:73824*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73824*0 + 3*32*FLEN/8, x4, x1, x2)

inst_24609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:73827*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73827*0 + 3*33*FLEN/8, x4, x1, x2)

inst_24610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:73830*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73830*0 + 3*34*FLEN/8, x4, x1, x2)

inst_24611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:73833*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73833*0 + 3*35*FLEN/8, x4, x1, x2)

inst_24612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:73836*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73836*0 + 3*36*FLEN/8, x4, x1, x2)

inst_24613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:73839*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73839*0 + 3*37*FLEN/8, x4, x1, x2)

inst_24614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x738906 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x434693 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef38906; op2val:0x434693;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:73842*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73842*0 + 3*38*FLEN/8, x4, x1, x2)

inst_24615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e800000; valaddr_reg:x3; val_offset:73845*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73845*0 + 3*39*FLEN/8, x4, x1, x2)

inst_24616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e800001; valaddr_reg:x3; val_offset:73848*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73848*0 + 3*40*FLEN/8, x4, x1, x2)

inst_24617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e800003; valaddr_reg:x3; val_offset:73851*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73851*0 + 3*41*FLEN/8, x4, x1, x2)

inst_24618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e800007; valaddr_reg:x3; val_offset:73854*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73854*0 + 3*42*FLEN/8, x4, x1, x2)

inst_24619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e80000f; valaddr_reg:x3; val_offset:73857*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73857*0 + 3*43*FLEN/8, x4, x1, x2)

inst_24620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e80001f; valaddr_reg:x3; val_offset:73860*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73860*0 + 3*44*FLEN/8, x4, x1, x2)

inst_24621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e80003f; valaddr_reg:x3; val_offset:73863*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73863*0 + 3*45*FLEN/8, x4, x1, x2)

inst_24622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e80007f; valaddr_reg:x3; val_offset:73866*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73866*0 + 3*46*FLEN/8, x4, x1, x2)

inst_24623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e8000ff; valaddr_reg:x3; val_offset:73869*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73869*0 + 3*47*FLEN/8, x4, x1, x2)

inst_24624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e8001ff; valaddr_reg:x3; val_offset:73872*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73872*0 + 3*48*FLEN/8, x4, x1, x2)

inst_24625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e8003ff; valaddr_reg:x3; val_offset:73875*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73875*0 + 3*49*FLEN/8, x4, x1, x2)

inst_24626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e8007ff; valaddr_reg:x3; val_offset:73878*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73878*0 + 3*50*FLEN/8, x4, x1, x2)

inst_24627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e800fff; valaddr_reg:x3; val_offset:73881*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73881*0 + 3*51*FLEN/8, x4, x1, x2)

inst_24628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e801fff; valaddr_reg:x3; val_offset:73884*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73884*0 + 3*52*FLEN/8, x4, x1, x2)

inst_24629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e803fff; valaddr_reg:x3; val_offset:73887*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73887*0 + 3*53*FLEN/8, x4, x1, x2)

inst_24630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e807fff; valaddr_reg:x3; val_offset:73890*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73890*0 + 3*54*FLEN/8, x4, x1, x2)

inst_24631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e80ffff; valaddr_reg:x3; val_offset:73893*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73893*0 + 3*55*FLEN/8, x4, x1, x2)

inst_24632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e81ffff; valaddr_reg:x3; val_offset:73896*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73896*0 + 3*56*FLEN/8, x4, x1, x2)

inst_24633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e83ffff; valaddr_reg:x3; val_offset:73899*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73899*0 + 3*57*FLEN/8, x4, x1, x2)

inst_24634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e87ffff; valaddr_reg:x3; val_offset:73902*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73902*0 + 3*58*FLEN/8, x4, x1, x2)

inst_24635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e8fffff; valaddr_reg:x3; val_offset:73905*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73905*0 + 3*59*FLEN/8, x4, x1, x2)

inst_24636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7e9fffff; valaddr_reg:x3; val_offset:73908*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73908*0 + 3*60*FLEN/8, x4, x1, x2)

inst_24637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7ebfffff; valaddr_reg:x3; val_offset:73911*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73911*0 + 3*61*FLEN/8, x4, x1, x2)

inst_24638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7ec00000; valaddr_reg:x3; val_offset:73914*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73914*0 + 3*62*FLEN/8, x4, x1, x2)

inst_24639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7ee00000; valaddr_reg:x3; val_offset:73917*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73917*0 + 3*63*FLEN/8, x4, x1, x2)

inst_24640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7ef00000; valaddr_reg:x3; val_offset:73920*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73920*0 + 3*64*FLEN/8, x4, x1, x2)

inst_24641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7ef80000; valaddr_reg:x3; val_offset:73923*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73923*0 + 3*65*FLEN/8, x4, x1, x2)

inst_24642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efc0000; valaddr_reg:x3; val_offset:73926*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73926*0 + 3*66*FLEN/8, x4, x1, x2)

inst_24643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efe0000; valaddr_reg:x3; val_offset:73929*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73929*0 + 3*67*FLEN/8, x4, x1, x2)

inst_24644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7eff0000; valaddr_reg:x3; val_offset:73932*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73932*0 + 3*68*FLEN/8, x4, x1, x2)

inst_24645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7eff8000; valaddr_reg:x3; val_offset:73935*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73935*0 + 3*69*FLEN/8, x4, x1, x2)

inst_24646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7effc000; valaddr_reg:x3; val_offset:73938*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73938*0 + 3*70*FLEN/8, x4, x1, x2)

inst_24647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7effe000; valaddr_reg:x3; val_offset:73941*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73941*0 + 3*71*FLEN/8, x4, x1, x2)

inst_24648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efff000; valaddr_reg:x3; val_offset:73944*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73944*0 + 3*72*FLEN/8, x4, x1, x2)

inst_24649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efff800; valaddr_reg:x3; val_offset:73947*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73947*0 + 3*73*FLEN/8, x4, x1, x2)

inst_24650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efffc00; valaddr_reg:x3; val_offset:73950*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73950*0 + 3*74*FLEN/8, x4, x1, x2)

inst_24651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efffe00; valaddr_reg:x3; val_offset:73953*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73953*0 + 3*75*FLEN/8, x4, x1, x2)

inst_24652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7effff00; valaddr_reg:x3; val_offset:73956*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73956*0 + 3*76*FLEN/8, x4, x1, x2)

inst_24653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7effff80; valaddr_reg:x3; val_offset:73959*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73959*0 + 3*77*FLEN/8, x4, x1, x2)

inst_24654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7effffc0; valaddr_reg:x3; val_offset:73962*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73962*0 + 3*78*FLEN/8, x4, x1, x2)

inst_24655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7effffe0; valaddr_reg:x3; val_offset:73965*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73965*0 + 3*79*FLEN/8, x4, x1, x2)

inst_24656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efffff0; valaddr_reg:x3; val_offset:73968*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73968*0 + 3*80*FLEN/8, x4, x1, x2)

inst_24657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efffff8; valaddr_reg:x3; val_offset:73971*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73971*0 + 3*81*FLEN/8, x4, x1, x2)

inst_24658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efffffc; valaddr_reg:x3; val_offset:73974*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73974*0 + 3*82*FLEN/8, x4, x1, x2)

inst_24659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7efffffe; valaddr_reg:x3; val_offset:73977*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73977*0 + 3*83*FLEN/8, x4, x1, x2)

inst_24660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7effffff; valaddr_reg:x3; val_offset:73980*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73980*0 + 3*84*FLEN/8, x4, x1, x2)

inst_24661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f000001; valaddr_reg:x3; val_offset:73983*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73983*0 + 3*85*FLEN/8, x4, x1, x2)

inst_24662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f000003; valaddr_reg:x3; val_offset:73986*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73986*0 + 3*86*FLEN/8, x4, x1, x2)

inst_24663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f000007; valaddr_reg:x3; val_offset:73989*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73989*0 + 3*87*FLEN/8, x4, x1, x2)

inst_24664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f199999; valaddr_reg:x3; val_offset:73992*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73992*0 + 3*88*FLEN/8, x4, x1, x2)

inst_24665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f249249; valaddr_reg:x3; val_offset:73995*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73995*0 + 3*89*FLEN/8, x4, x1, x2)

inst_24666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f333333; valaddr_reg:x3; val_offset:73998*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73998*0 + 3*90*FLEN/8, x4, x1, x2)

inst_24667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:74001*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74001*0 + 3*91*FLEN/8, x4, x1, x2)

inst_24668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:74004*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74004*0 + 3*92*FLEN/8, x4, x1, x2)

inst_24669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f444444; valaddr_reg:x3; val_offset:74007*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74007*0 + 3*93*FLEN/8, x4, x1, x2)

inst_24670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:74010*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74010*0 + 3*94*FLEN/8, x4, x1, x2)

inst_24671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:74013*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74013*0 + 3*95*FLEN/8, x4, x1, x2)

inst_24672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f666666; valaddr_reg:x3; val_offset:74016*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74016*0 + 3*96*FLEN/8, x4, x1, x2)

inst_24673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:74019*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74019*0 + 3*97*FLEN/8, x4, x1, x2)

inst_24674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:74022*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74022*0 + 3*98*FLEN/8, x4, x1, x2)

inst_24675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:74025*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74025*0 + 3*99*FLEN/8, x4, x1, x2)

inst_24676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74a005 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x05f3b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4a005; op2val:0x4005f3b0;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:74028*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74028*0 + 3*100*FLEN/8, x4, x1, x2)

inst_24677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8800000; valaddr_reg:x3; val_offset:74031*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74031*0 + 3*101*FLEN/8, x4, x1, x2)

inst_24678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8800001; valaddr_reg:x3; val_offset:74034*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74034*0 + 3*102*FLEN/8, x4, x1, x2)

inst_24679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8800003; valaddr_reg:x3; val_offset:74037*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74037*0 + 3*103*FLEN/8, x4, x1, x2)

inst_24680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8800007; valaddr_reg:x3; val_offset:74040*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74040*0 + 3*104*FLEN/8, x4, x1, x2)

inst_24681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe880000f; valaddr_reg:x3; val_offset:74043*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74043*0 + 3*105*FLEN/8, x4, x1, x2)

inst_24682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe880001f; valaddr_reg:x3; val_offset:74046*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74046*0 + 3*106*FLEN/8, x4, x1, x2)

inst_24683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe880003f; valaddr_reg:x3; val_offset:74049*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74049*0 + 3*107*FLEN/8, x4, x1, x2)

inst_24684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe880007f; valaddr_reg:x3; val_offset:74052*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74052*0 + 3*108*FLEN/8, x4, x1, x2)

inst_24685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe88000ff; valaddr_reg:x3; val_offset:74055*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74055*0 + 3*109*FLEN/8, x4, x1, x2)

inst_24686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe88001ff; valaddr_reg:x3; val_offset:74058*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74058*0 + 3*110*FLEN/8, x4, x1, x2)

inst_24687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe88003ff; valaddr_reg:x3; val_offset:74061*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74061*0 + 3*111*FLEN/8, x4, x1, x2)

inst_24688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe88007ff; valaddr_reg:x3; val_offset:74064*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74064*0 + 3*112*FLEN/8, x4, x1, x2)

inst_24689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8800fff; valaddr_reg:x3; val_offset:74067*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74067*0 + 3*113*FLEN/8, x4, x1, x2)

inst_24690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8801fff; valaddr_reg:x3; val_offset:74070*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74070*0 + 3*114*FLEN/8, x4, x1, x2)

inst_24691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8803fff; valaddr_reg:x3; val_offset:74073*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74073*0 + 3*115*FLEN/8, x4, x1, x2)

inst_24692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8807fff; valaddr_reg:x3; val_offset:74076*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74076*0 + 3*116*FLEN/8, x4, x1, x2)

inst_24693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe880ffff; valaddr_reg:x3; val_offset:74079*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74079*0 + 3*117*FLEN/8, x4, x1, x2)

inst_24694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe881ffff; valaddr_reg:x3; val_offset:74082*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74082*0 + 3*118*FLEN/8, x4, x1, x2)

inst_24695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe883ffff; valaddr_reg:x3; val_offset:74085*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74085*0 + 3*119*FLEN/8, x4, x1, x2)

inst_24696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe887ffff; valaddr_reg:x3; val_offset:74088*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74088*0 + 3*120*FLEN/8, x4, x1, x2)

inst_24697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe88fffff; valaddr_reg:x3; val_offset:74091*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74091*0 + 3*121*FLEN/8, x4, x1, x2)

inst_24698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe89fffff; valaddr_reg:x3; val_offset:74094*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74094*0 + 3*122*FLEN/8, x4, x1, x2)

inst_24699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8bfffff; valaddr_reg:x3; val_offset:74097*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74097*0 + 3*123*FLEN/8, x4, x1, x2)

inst_24700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8c00000; valaddr_reg:x3; val_offset:74100*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74100*0 + 3*124*FLEN/8, x4, x1, x2)

inst_24701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8e00000; valaddr_reg:x3; val_offset:74103*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74103*0 + 3*125*FLEN/8, x4, x1, x2)

inst_24702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8f00000; valaddr_reg:x3; val_offset:74106*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74106*0 + 3*126*FLEN/8, x4, x1, x2)

inst_24703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8f80000; valaddr_reg:x3; val_offset:74109*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74109*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_24704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fc0000; valaddr_reg:x3; val_offset:74112*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74112*0 + 3*128*FLEN/8, x4, x1, x2)

inst_24705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fe0000; valaddr_reg:x3; val_offset:74115*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74115*0 + 3*129*FLEN/8, x4, x1, x2)

inst_24706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ff0000; valaddr_reg:x3; val_offset:74118*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74118*0 + 3*130*FLEN/8, x4, x1, x2)

inst_24707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ff8000; valaddr_reg:x3; val_offset:74121*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74121*0 + 3*131*FLEN/8, x4, x1, x2)

inst_24708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffc000; valaddr_reg:x3; val_offset:74124*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74124*0 + 3*132*FLEN/8, x4, x1, x2)

inst_24709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffe000; valaddr_reg:x3; val_offset:74127*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74127*0 + 3*133*FLEN/8, x4, x1, x2)

inst_24710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fff000; valaddr_reg:x3; val_offset:74130*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74130*0 + 3*134*FLEN/8, x4, x1, x2)

inst_24711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fff800; valaddr_reg:x3; val_offset:74133*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74133*0 + 3*135*FLEN/8, x4, x1, x2)

inst_24712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffc00; valaddr_reg:x3; val_offset:74136*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74136*0 + 3*136*FLEN/8, x4, x1, x2)

inst_24713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffe00; valaddr_reg:x3; val_offset:74139*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74139*0 + 3*137*FLEN/8, x4, x1, x2)

inst_24714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffff00; valaddr_reg:x3; val_offset:74142*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74142*0 + 3*138*FLEN/8, x4, x1, x2)

inst_24715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffff80; valaddr_reg:x3; val_offset:74145*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74145*0 + 3*139*FLEN/8, x4, x1, x2)

inst_24716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffffc0; valaddr_reg:x3; val_offset:74148*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74148*0 + 3*140*FLEN/8, x4, x1, x2)

inst_24717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffffe0; valaddr_reg:x3; val_offset:74151*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74151*0 + 3*141*FLEN/8, x4, x1, x2)

inst_24718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffff0; valaddr_reg:x3; val_offset:74154*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74154*0 + 3*142*FLEN/8, x4, x1, x2)

inst_24719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffff8; valaddr_reg:x3; val_offset:74157*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74157*0 + 3*143*FLEN/8, x4, x1, x2)

inst_24720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffffc; valaddr_reg:x3; val_offset:74160*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74160*0 + 3*144*FLEN/8, x4, x1, x2)

inst_24721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8fffffe; valaddr_reg:x3; val_offset:74163*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74163*0 + 3*145*FLEN/8, x4, x1, x2)

inst_24722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xd1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xe8ffffff; valaddr_reg:x3; val_offset:74166*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74166*0 + 3*146*FLEN/8, x4, x1, x2)

inst_24723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff000001; valaddr_reg:x3; val_offset:74169*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74169*0 + 3*147*FLEN/8, x4, x1, x2)

inst_24724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff000003; valaddr_reg:x3; val_offset:74172*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74172*0 + 3*148*FLEN/8, x4, x1, x2)

inst_24725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff000007; valaddr_reg:x3; val_offset:74175*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74175*0 + 3*149*FLEN/8, x4, x1, x2)

inst_24726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff199999; valaddr_reg:x3; val_offset:74178*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74178*0 + 3*150*FLEN/8, x4, x1, x2)

inst_24727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff249249; valaddr_reg:x3; val_offset:74181*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74181*0 + 3*151*FLEN/8, x4, x1, x2)

inst_24728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff333333; valaddr_reg:x3; val_offset:74184*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74184*0 + 3*152*FLEN/8, x4, x1, x2)

inst_24729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:74187*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74187*0 + 3*153*FLEN/8, x4, x1, x2)

inst_24730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:74190*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74190*0 + 3*154*FLEN/8, x4, x1, x2)

inst_24731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff444444; valaddr_reg:x3; val_offset:74193*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74193*0 + 3*155*FLEN/8, x4, x1, x2)

inst_24732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:74196*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74196*0 + 3*156*FLEN/8, x4, x1, x2)

inst_24733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:74199*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74199*0 + 3*157*FLEN/8, x4, x1, x2)

inst_24734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff666666; valaddr_reg:x3; val_offset:74202*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74202*0 + 3*158*FLEN/8, x4, x1, x2)

inst_24735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:74205*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74205*0 + 3*159*FLEN/8, x4, x1, x2)

inst_24736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:74208*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74208*0 + 3*160*FLEN/8, x4, x1, x2)

inst_24737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:74211*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74211*0 + 3*161*FLEN/8, x4, x1, x2)

inst_24738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74b97b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x05e5c0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4b97b; op2val:0xc005e5c0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:74214*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74214*0 + 3*162*FLEN/8, x4, x1, x2)

inst_24739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:74217*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74217*0 + 3*163*FLEN/8, x4, x1, x2)

inst_24740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:74220*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74220*0 + 3*164*FLEN/8, x4, x1, x2)

inst_24741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:74223*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74223*0 + 3*165*FLEN/8, x4, x1, x2)

inst_24742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:74226*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74226*0 + 3*166*FLEN/8, x4, x1, x2)

inst_24743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:74229*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74229*0 + 3*167*FLEN/8, x4, x1, x2)

inst_24744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:74232*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74232*0 + 3*168*FLEN/8, x4, x1, x2)

inst_24745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:74235*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74235*0 + 3*169*FLEN/8, x4, x1, x2)

inst_24746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:74238*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74238*0 + 3*170*FLEN/8, x4, x1, x2)

inst_24747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:74241*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74241*0 + 3*171*FLEN/8, x4, x1, x2)

inst_24748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:74244*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74244*0 + 3*172*FLEN/8, x4, x1, x2)

inst_24749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:74247*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74247*0 + 3*173*FLEN/8, x4, x1, x2)

inst_24750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:74250*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74250*0 + 3*174*FLEN/8, x4, x1, x2)

inst_24751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:74253*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74253*0 + 3*175*FLEN/8, x4, x1, x2)

inst_24752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:74256*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74256*0 + 3*176*FLEN/8, x4, x1, x2)

inst_24753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:74259*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74259*0 + 3*177*FLEN/8, x4, x1, x2)

inst_24754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:74262*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74262*0 + 3*178*FLEN/8, x4, x1, x2)

inst_24755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:74265*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74265*0 + 3*179*FLEN/8, x4, x1, x2)

inst_24756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:74268*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74268*0 + 3*180*FLEN/8, x4, x1, x2)

inst_24757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:74271*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74271*0 + 3*181*FLEN/8, x4, x1, x2)

inst_24758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:74274*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74274*0 + 3*182*FLEN/8, x4, x1, x2)

inst_24759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:74277*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74277*0 + 3*183*FLEN/8, x4, x1, x2)

inst_24760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:74280*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74280*0 + 3*184*FLEN/8, x4, x1, x2)

inst_24761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:74283*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74283*0 + 3*185*FLEN/8, x4, x1, x2)

inst_24762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:74286*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74286*0 + 3*186*FLEN/8, x4, x1, x2)

inst_24763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:74289*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74289*0 + 3*187*FLEN/8, x4, x1, x2)

inst_24764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:74292*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74292*0 + 3*188*FLEN/8, x4, x1, x2)

inst_24765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:74295*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74295*0 + 3*189*FLEN/8, x4, x1, x2)

inst_24766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:74298*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74298*0 + 3*190*FLEN/8, x4, x1, x2)

inst_24767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:74301*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74301*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:74304*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74304*0 + 3*192*FLEN/8, x4, x1, x2)

inst_24769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:74307*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74307*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:74310*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74310*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:74313*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74313*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:74316*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74316*0 + 3*196*FLEN/8, x4, x1, x2)

inst_24773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:74319*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74319*0 + 3*197*FLEN/8, x4, x1, x2)

inst_24774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:74322*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74322*0 + 3*198*FLEN/8, x4, x1, x2)

inst_24775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:74325*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74325*0 + 3*199*FLEN/8, x4, x1, x2)

inst_24776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:74328*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74328*0 + 3*200*FLEN/8, x4, x1, x2)

inst_24777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:74331*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74331*0 + 3*201*FLEN/8, x4, x1, x2)

inst_24778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:74334*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74334*0 + 3*202*FLEN/8, x4, x1, x2)

inst_24779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:74337*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74337*0 + 3*203*FLEN/8, x4, x1, x2)

inst_24780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:74340*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74340*0 + 3*204*FLEN/8, x4, x1, x2)

inst_24781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:74343*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74343*0 + 3*205*FLEN/8, x4, x1, x2)

inst_24782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:74346*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74346*0 + 3*206*FLEN/8, x4, x1, x2)

inst_24783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:74349*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74349*0 + 3*207*FLEN/8, x4, x1, x2)

inst_24784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:74352*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74352*0 + 3*208*FLEN/8, x4, x1, x2)

inst_24785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:74355*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74355*0 + 3*209*FLEN/8, x4, x1, x2)

inst_24786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:74358*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74358*0 + 3*210*FLEN/8, x4, x1, x2)

inst_24787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:74361*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74361*0 + 3*211*FLEN/8, x4, x1, x2)

inst_24788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:74364*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74364*0 + 3*212*FLEN/8, x4, x1, x2)

inst_24789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:74367*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74367*0 + 3*213*FLEN/8, x4, x1, x2)

inst_24790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:74370*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74370*0 + 3*214*FLEN/8, x4, x1, x2)

inst_24791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:74373*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74373*0 + 3*215*FLEN/8, x4, x1, x2)

inst_24792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:74376*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74376*0 + 3*216*FLEN/8, x4, x1, x2)

inst_24793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:74379*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74379*0 + 3*217*FLEN/8, x4, x1, x2)

inst_24794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7521af and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef521af; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:74382*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74382*0 + 3*218*FLEN/8, x4, x1, x2)

inst_24795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:74385*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74385*0 + 3*219*FLEN/8, x4, x1, x2)

inst_24796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:74388*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74388*0 + 3*220*FLEN/8, x4, x1, x2)

inst_24797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:74391*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74391*0 + 3*221*FLEN/8, x4, x1, x2)

inst_24798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:74394*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74394*0 + 3*222*FLEN/8, x4, x1, x2)

inst_24799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:74397*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74397*0 + 3*223*FLEN/8, x4, x1, x2)

inst_24800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:74400*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74400*0 + 3*224*FLEN/8, x4, x1, x2)

inst_24801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:74403*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74403*0 + 3*225*FLEN/8, x4, x1, x2)

inst_24802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:74406*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74406*0 + 3*226*FLEN/8, x4, x1, x2)

inst_24803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:74409*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74409*0 + 3*227*FLEN/8, x4, x1, x2)

inst_24804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:74412*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74412*0 + 3*228*FLEN/8, x4, x1, x2)

inst_24805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:74415*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74415*0 + 3*229*FLEN/8, x4, x1, x2)

inst_24806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:74418*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74418*0 + 3*230*FLEN/8, x4, x1, x2)

inst_24807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:74421*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74421*0 + 3*231*FLEN/8, x4, x1, x2)

inst_24808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:74424*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74424*0 + 3*232*FLEN/8, x4, x1, x2)

inst_24809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:74427*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74427*0 + 3*233*FLEN/8, x4, x1, x2)

inst_24810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:74430*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74430*0 + 3*234*FLEN/8, x4, x1, x2)

inst_24811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:74433*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74433*0 + 3*235*FLEN/8, x4, x1, x2)

inst_24812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:74436*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74436*0 + 3*236*FLEN/8, x4, x1, x2)

inst_24813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:74439*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74439*0 + 3*237*FLEN/8, x4, x1, x2)

inst_24814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:74442*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74442*0 + 3*238*FLEN/8, x4, x1, x2)

inst_24815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:74445*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74445*0 + 3*239*FLEN/8, x4, x1, x2)

inst_24816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:74448*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74448*0 + 3*240*FLEN/8, x4, x1, x2)

inst_24817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:74451*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74451*0 + 3*241*FLEN/8, x4, x1, x2)

inst_24818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:74454*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74454*0 + 3*242*FLEN/8, x4, x1, x2)

inst_24819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:74457*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74457*0 + 3*243*FLEN/8, x4, x1, x2)

inst_24820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:74460*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74460*0 + 3*244*FLEN/8, x4, x1, x2)

inst_24821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:74463*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74463*0 + 3*245*FLEN/8, x4, x1, x2)

inst_24822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:74466*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74466*0 + 3*246*FLEN/8, x4, x1, x2)

inst_24823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:74469*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74469*0 + 3*247*FLEN/8, x4, x1, x2)

inst_24824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:74472*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74472*0 + 3*248*FLEN/8, x4, x1, x2)

inst_24825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:74475*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74475*0 + 3*249*FLEN/8, x4, x1, x2)

inst_24826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:74478*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74478*0 + 3*250*FLEN/8, x4, x1, x2)

inst_24827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:74481*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74481*0 + 3*251*FLEN/8, x4, x1, x2)

inst_24828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:74484*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74484*0 + 3*252*FLEN/8, x4, x1, x2)

inst_24829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:74487*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74487*0 + 3*253*FLEN/8, x4, x1, x2)

inst_24830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:74490*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74490*0 + 3*254*FLEN/8, x4, x1, x2)

inst_24831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:74493*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74493*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_24832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:74496*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74496*0 + 3*256*FLEN/8, x4, x1, x2)

inst_24833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:74499*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74499*0 + 3*257*FLEN/8, x4, x1, x2)

inst_24834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:74502*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74502*0 + 3*258*FLEN/8, x4, x1, x2)

inst_24835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:74505*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74505*0 + 3*259*FLEN/8, x4, x1, x2)

inst_24836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:74508*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74508*0 + 3*260*FLEN/8, x4, x1, x2)

inst_24837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:74511*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74511*0 + 3*261*FLEN/8, x4, x1, x2)

inst_24838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:74514*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74514*0 + 3*262*FLEN/8, x4, x1, x2)

inst_24839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:74517*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74517*0 + 3*263*FLEN/8, x4, x1, x2)

inst_24840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:74520*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74520*0 + 3*264*FLEN/8, x4, x1, x2)

inst_24841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:74523*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74523*0 + 3*265*FLEN/8, x4, x1, x2)

inst_24842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:74526*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74526*0 + 3*266*FLEN/8, x4, x1, x2)

inst_24843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:74529*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74529*0 + 3*267*FLEN/8, x4, x1, x2)

inst_24844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:74532*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74532*0 + 3*268*FLEN/8, x4, x1, x2)

inst_24845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:74535*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74535*0 + 3*269*FLEN/8, x4, x1, x2)

inst_24846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:74538*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74538*0 + 3*270*FLEN/8, x4, x1, x2)

inst_24847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:74541*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74541*0 + 3*271*FLEN/8, x4, x1, x2)

inst_24848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:74544*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74544*0 + 3*272*FLEN/8, x4, x1, x2)

inst_24849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:74547*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74547*0 + 3*273*FLEN/8, x4, x1, x2)

inst_24850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:74550*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74550*0 + 3*274*FLEN/8, x4, x1, x2)

inst_24851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:74553*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74553*0 + 3*275*FLEN/8, x4, x1, x2)

inst_24852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:74556*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74556*0 + 3*276*FLEN/8, x4, x1, x2)

inst_24853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:74559*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74559*0 + 3*277*FLEN/8, x4, x1, x2)

inst_24854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:74562*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74562*0 + 3*278*FLEN/8, x4, x1, x2)

inst_24855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:74565*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74565*0 + 3*279*FLEN/8, x4, x1, x2)

inst_24856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75544f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5544f; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:74568*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74568*0 + 3*280*FLEN/8, x4, x1, x2)

inst_24857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:74571*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74571*0 + 3*281*FLEN/8, x4, x1, x2)

inst_24858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:74574*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74574*0 + 3*282*FLEN/8, x4, x1, x2)

inst_24859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:74577*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74577*0 + 3*283*FLEN/8, x4, x1, x2)

inst_24860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:74580*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74580*0 + 3*284*FLEN/8, x4, x1, x2)

inst_24861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:74583*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74583*0 + 3*285*FLEN/8, x4, x1, x2)

inst_24862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:74586*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74586*0 + 3*286*FLEN/8, x4, x1, x2)

inst_24863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:74589*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74589*0 + 3*287*FLEN/8, x4, x1, x2)

inst_24864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:74592*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74592*0 + 3*288*FLEN/8, x4, x1, x2)

inst_24865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:74595*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74595*0 + 3*289*FLEN/8, x4, x1, x2)

inst_24866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:74598*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74598*0 + 3*290*FLEN/8, x4, x1, x2)

inst_24867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:74601*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74601*0 + 3*291*FLEN/8, x4, x1, x2)

inst_24868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:74604*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74604*0 + 3*292*FLEN/8, x4, x1, x2)

inst_24869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:74607*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74607*0 + 3*293*FLEN/8, x4, x1, x2)

inst_24870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:74610*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74610*0 + 3*294*FLEN/8, x4, x1, x2)

inst_24871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:74613*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74613*0 + 3*295*FLEN/8, x4, x1, x2)

inst_24872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:74616*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74616*0 + 3*296*FLEN/8, x4, x1, x2)

inst_24873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:74619*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74619*0 + 3*297*FLEN/8, x4, x1, x2)

inst_24874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:74622*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74622*0 + 3*298*FLEN/8, x4, x1, x2)

inst_24875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:74625*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74625*0 + 3*299*FLEN/8, x4, x1, x2)

inst_24876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:74628*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74628*0 + 3*300*FLEN/8, x4, x1, x2)

inst_24877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:74631*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74631*0 + 3*301*FLEN/8, x4, x1, x2)

inst_24878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:74634*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74634*0 + 3*302*FLEN/8, x4, x1, x2)

inst_24879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:74637*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74637*0 + 3*303*FLEN/8, x4, x1, x2)

inst_24880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:74640*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74640*0 + 3*304*FLEN/8, x4, x1, x2)

inst_24881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:74643*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74643*0 + 3*305*FLEN/8, x4, x1, x2)

inst_24882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:74646*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74646*0 + 3*306*FLEN/8, x4, x1, x2)

inst_24883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:74649*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74649*0 + 3*307*FLEN/8, x4, x1, x2)

inst_24884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:74652*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74652*0 + 3*308*FLEN/8, x4, x1, x2)

inst_24885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:74655*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74655*0 + 3*309*FLEN/8, x4, x1, x2)

inst_24886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:74658*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74658*0 + 3*310*FLEN/8, x4, x1, x2)

inst_24887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:74661*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74661*0 + 3*311*FLEN/8, x4, x1, x2)

inst_24888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:74664*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74664*0 + 3*312*FLEN/8, x4, x1, x2)

inst_24889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:74667*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74667*0 + 3*313*FLEN/8, x4, x1, x2)

inst_24890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:74670*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74670*0 + 3*314*FLEN/8, x4, x1, x2)

inst_24891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:74673*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74673*0 + 3*315*FLEN/8, x4, x1, x2)

inst_24892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:74676*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74676*0 + 3*316*FLEN/8, x4, x1, x2)

inst_24893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:74679*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74679*0 + 3*317*FLEN/8, x4, x1, x2)

inst_24894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:74682*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74682*0 + 3*318*FLEN/8, x4, x1, x2)

inst_24895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:74685*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74685*0 + 3*319*FLEN/8, x4, x1, x2)

inst_24896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:74688*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74688*0 + 3*320*FLEN/8, x4, x1, x2)

inst_24897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:74691*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74691*0 + 3*321*FLEN/8, x4, x1, x2)

inst_24898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:74694*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74694*0 + 3*322*FLEN/8, x4, x1, x2)

inst_24899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:74697*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74697*0 + 3*323*FLEN/8, x4, x1, x2)

inst_24900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:74700*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74700*0 + 3*324*FLEN/8, x4, x1, x2)

inst_24901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:74703*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74703*0 + 3*325*FLEN/8, x4, x1, x2)

inst_24902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:74706*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74706*0 + 3*326*FLEN/8, x4, x1, x2)

inst_24903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:74709*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74709*0 + 3*327*FLEN/8, x4, x1, x2)

inst_24904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:74712*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74712*0 + 3*328*FLEN/8, x4, x1, x2)

inst_24905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:74715*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74715*0 + 3*329*FLEN/8, x4, x1, x2)

inst_24906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:74718*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74718*0 + 3*330*FLEN/8, x4, x1, x2)

inst_24907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:74721*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74721*0 + 3*331*FLEN/8, x4, x1, x2)

inst_24908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:74724*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74724*0 + 3*332*FLEN/8, x4, x1, x2)

inst_24909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:74727*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74727*0 + 3*333*FLEN/8, x4, x1, x2)

inst_24910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:74730*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74730*0 + 3*334*FLEN/8, x4, x1, x2)

inst_24911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:74733*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74733*0 + 3*335*FLEN/8, x4, x1, x2)

inst_24912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:74736*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74736*0 + 3*336*FLEN/8, x4, x1, x2)

inst_24913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:74739*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74739*0 + 3*337*FLEN/8, x4, x1, x2)

inst_24914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:74742*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74742*0 + 3*338*FLEN/8, x4, x1, x2)

inst_24915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:74745*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74745*0 + 3*339*FLEN/8, x4, x1, x2)

inst_24916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:74748*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74748*0 + 3*340*FLEN/8, x4, x1, x2)

inst_24917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:74751*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74751*0 + 3*341*FLEN/8, x4, x1, x2)

inst_24918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75ec2d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5ec2d; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:74754*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74754*0 + 3*342*FLEN/8, x4, x1, x2)

inst_24919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:74757*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74757*0 + 3*343*FLEN/8, x4, x1, x2)

inst_24920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:74760*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74760*0 + 3*344*FLEN/8, x4, x1, x2)

inst_24921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:74763*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74763*0 + 3*345*FLEN/8, x4, x1, x2)

inst_24922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:74766*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74766*0 + 3*346*FLEN/8, x4, x1, x2)

inst_24923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:74769*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74769*0 + 3*347*FLEN/8, x4, x1, x2)

inst_24924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:74772*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74772*0 + 3*348*FLEN/8, x4, x1, x2)

inst_24925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:74775*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74775*0 + 3*349*FLEN/8, x4, x1, x2)

inst_24926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:74778*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74778*0 + 3*350*FLEN/8, x4, x1, x2)

inst_24927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:74781*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74781*0 + 3*351*FLEN/8, x4, x1, x2)

inst_24928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:74784*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74784*0 + 3*352*FLEN/8, x4, x1, x2)

inst_24929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:74787*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74787*0 + 3*353*FLEN/8, x4, x1, x2)

inst_24930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:74790*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74790*0 + 3*354*FLEN/8, x4, x1, x2)

inst_24931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:74793*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74793*0 + 3*355*FLEN/8, x4, x1, x2)

inst_24932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:74796*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74796*0 + 3*356*FLEN/8, x4, x1, x2)

inst_24933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:74799*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74799*0 + 3*357*FLEN/8, x4, x1, x2)

inst_24934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:74802*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74802*0 + 3*358*FLEN/8, x4, x1, x2)

inst_24935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a800000; valaddr_reg:x3; val_offset:74805*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74805*0 + 3*359*FLEN/8, x4, x1, x2)

inst_24936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a800001; valaddr_reg:x3; val_offset:74808*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74808*0 + 3*360*FLEN/8, x4, x1, x2)

inst_24937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a800003; valaddr_reg:x3; val_offset:74811*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74811*0 + 3*361*FLEN/8, x4, x1, x2)

inst_24938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a800007; valaddr_reg:x3; val_offset:74814*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74814*0 + 3*362*FLEN/8, x4, x1, x2)

inst_24939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a80000f; valaddr_reg:x3; val_offset:74817*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74817*0 + 3*363*FLEN/8, x4, x1, x2)

inst_24940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a80001f; valaddr_reg:x3; val_offset:74820*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74820*0 + 3*364*FLEN/8, x4, x1, x2)

inst_24941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a80003f; valaddr_reg:x3; val_offset:74823*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74823*0 + 3*365*FLEN/8, x4, x1, x2)

inst_24942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a80007f; valaddr_reg:x3; val_offset:74826*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74826*0 + 3*366*FLEN/8, x4, x1, x2)

inst_24943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a8000ff; valaddr_reg:x3; val_offset:74829*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74829*0 + 3*367*FLEN/8, x4, x1, x2)

inst_24944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a8001ff; valaddr_reg:x3; val_offset:74832*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74832*0 + 3*368*FLEN/8, x4, x1, x2)

inst_24945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a8003ff; valaddr_reg:x3; val_offset:74835*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74835*0 + 3*369*FLEN/8, x4, x1, x2)

inst_24946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a8007ff; valaddr_reg:x3; val_offset:74838*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74838*0 + 3*370*FLEN/8, x4, x1, x2)

inst_24947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a800fff; valaddr_reg:x3; val_offset:74841*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74841*0 + 3*371*FLEN/8, x4, x1, x2)

inst_24948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a801fff; valaddr_reg:x3; val_offset:74844*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74844*0 + 3*372*FLEN/8, x4, x1, x2)

inst_24949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a803fff; valaddr_reg:x3; val_offset:74847*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74847*0 + 3*373*FLEN/8, x4, x1, x2)

inst_24950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a807fff; valaddr_reg:x3; val_offset:74850*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74850*0 + 3*374*FLEN/8, x4, x1, x2)

inst_24951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a80ffff; valaddr_reg:x3; val_offset:74853*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74853*0 + 3*375*FLEN/8, x4, x1, x2)

inst_24952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a81ffff; valaddr_reg:x3; val_offset:74856*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74856*0 + 3*376*FLEN/8, x4, x1, x2)

inst_24953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a83ffff; valaddr_reg:x3; val_offset:74859*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74859*0 + 3*377*FLEN/8, x4, x1, x2)

inst_24954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a87ffff; valaddr_reg:x3; val_offset:74862*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74862*0 + 3*378*FLEN/8, x4, x1, x2)

inst_24955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a8fffff; valaddr_reg:x3; val_offset:74865*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74865*0 + 3*379*FLEN/8, x4, x1, x2)

inst_24956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8a9fffff; valaddr_reg:x3; val_offset:74868*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74868*0 + 3*380*FLEN/8, x4, x1, x2)

inst_24957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8abfffff; valaddr_reg:x3; val_offset:74871*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74871*0 + 3*381*FLEN/8, x4, x1, x2)

inst_24958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8ac00000; valaddr_reg:x3; val_offset:74874*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74874*0 + 3*382*FLEN/8, x4, x1, x2)

inst_24959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8ae00000; valaddr_reg:x3; val_offset:74877*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74877*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_24960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8af00000; valaddr_reg:x3; val_offset:74880*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74880*0 + 3*384*FLEN/8, x4, x1, x2)

inst_24961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8af80000; valaddr_reg:x3; val_offset:74883*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74883*0 + 3*385*FLEN/8, x4, x1, x2)

inst_24962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afc0000; valaddr_reg:x3; val_offset:74886*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74886*0 + 3*386*FLEN/8, x4, x1, x2)

inst_24963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afe0000; valaddr_reg:x3; val_offset:74889*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74889*0 + 3*387*FLEN/8, x4, x1, x2)

inst_24964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8aff0000; valaddr_reg:x3; val_offset:74892*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74892*0 + 3*388*FLEN/8, x4, x1, x2)

inst_24965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8aff8000; valaddr_reg:x3; val_offset:74895*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74895*0 + 3*389*FLEN/8, x4, x1, x2)

inst_24966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8affc000; valaddr_reg:x3; val_offset:74898*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74898*0 + 3*390*FLEN/8, x4, x1, x2)

inst_24967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8affe000; valaddr_reg:x3; val_offset:74901*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74901*0 + 3*391*FLEN/8, x4, x1, x2)

inst_24968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afff000; valaddr_reg:x3; val_offset:74904*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74904*0 + 3*392*FLEN/8, x4, x1, x2)

inst_24969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afff800; valaddr_reg:x3; val_offset:74907*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74907*0 + 3*393*FLEN/8, x4, x1, x2)

inst_24970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afffc00; valaddr_reg:x3; val_offset:74910*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74910*0 + 3*394*FLEN/8, x4, x1, x2)

inst_24971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afffe00; valaddr_reg:x3; val_offset:74913*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74913*0 + 3*395*FLEN/8, x4, x1, x2)

inst_24972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8affff00; valaddr_reg:x3; val_offset:74916*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74916*0 + 3*396*FLEN/8, x4, x1, x2)

inst_24973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8affff80; valaddr_reg:x3; val_offset:74919*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74919*0 + 3*397*FLEN/8, x4, x1, x2)

inst_24974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8affffc0; valaddr_reg:x3; val_offset:74922*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74922*0 + 3*398*FLEN/8, x4, x1, x2)

inst_24975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8affffe0; valaddr_reg:x3; val_offset:74925*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74925*0 + 3*399*FLEN/8, x4, x1, x2)

inst_24976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afffff0; valaddr_reg:x3; val_offset:74928*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74928*0 + 3*400*FLEN/8, x4, x1, x2)

inst_24977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afffff8; valaddr_reg:x3; val_offset:74931*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74931*0 + 3*401*FLEN/8, x4, x1, x2)

inst_24978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afffffc; valaddr_reg:x3; val_offset:74934*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74934*0 + 3*402*FLEN/8, x4, x1, x2)

inst_24979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8afffffe; valaddr_reg:x3; val_offset:74937*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74937*0 + 3*403*FLEN/8, x4, x1, x2)

inst_24980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x762497 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef62497; op2val:0x80000000;
op3val:0x8affffff; valaddr_reg:x3; val_offset:74940*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74940*0 + 3*404*FLEN/8, x4, x1, x2)

inst_24981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28800000; valaddr_reg:x3; val_offset:74943*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74943*0 + 3*405*FLEN/8, x4, x1, x2)

inst_24982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28800001; valaddr_reg:x3; val_offset:74946*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74946*0 + 3*406*FLEN/8, x4, x1, x2)

inst_24983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28800003; valaddr_reg:x3; val_offset:74949*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74949*0 + 3*407*FLEN/8, x4, x1, x2)

inst_24984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28800007; valaddr_reg:x3; val_offset:74952*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74952*0 + 3*408*FLEN/8, x4, x1, x2)

inst_24985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2880000f; valaddr_reg:x3; val_offset:74955*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74955*0 + 3*409*FLEN/8, x4, x1, x2)

inst_24986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2880001f; valaddr_reg:x3; val_offset:74958*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74958*0 + 3*410*FLEN/8, x4, x1, x2)

inst_24987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2880003f; valaddr_reg:x3; val_offset:74961*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74961*0 + 3*411*FLEN/8, x4, x1, x2)

inst_24988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2880007f; valaddr_reg:x3; val_offset:74964*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74964*0 + 3*412*FLEN/8, x4, x1, x2)

inst_24989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x288000ff; valaddr_reg:x3; val_offset:74967*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74967*0 + 3*413*FLEN/8, x4, x1, x2)

inst_24990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x288001ff; valaddr_reg:x3; val_offset:74970*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74970*0 + 3*414*FLEN/8, x4, x1, x2)

inst_24991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x288003ff; valaddr_reg:x3; val_offset:74973*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74973*0 + 3*415*FLEN/8, x4, x1, x2)

inst_24992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x288007ff; valaddr_reg:x3; val_offset:74976*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74976*0 + 3*416*FLEN/8, x4, x1, x2)

inst_24993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28800fff; valaddr_reg:x3; val_offset:74979*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74979*0 + 3*417*FLEN/8, x4, x1, x2)

inst_24994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28801fff; valaddr_reg:x3; val_offset:74982*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74982*0 + 3*418*FLEN/8, x4, x1, x2)

inst_24995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28803fff; valaddr_reg:x3; val_offset:74985*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74985*0 + 3*419*FLEN/8, x4, x1, x2)

inst_24996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28807fff; valaddr_reg:x3; val_offset:74988*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74988*0 + 3*420*FLEN/8, x4, x1, x2)

inst_24997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2880ffff; valaddr_reg:x3; val_offset:74991*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74991*0 + 3*421*FLEN/8, x4, x1, x2)

inst_24998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2881ffff; valaddr_reg:x3; val_offset:74994*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74994*0 + 3*422*FLEN/8, x4, x1, x2)

inst_24999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2883ffff; valaddr_reg:x3; val_offset:74997*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74997*0 + 3*423*FLEN/8, x4, x1, x2)

inst_25000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x2887ffff; valaddr_reg:x3; val_offset:75000*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75000*0 + 3*424*FLEN/8, x4, x1, x2)

inst_25001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x288fffff; valaddr_reg:x3; val_offset:75003*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75003*0 + 3*425*FLEN/8, x4, x1, x2)

inst_25002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x289fffff; valaddr_reg:x3; val_offset:75006*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75006*0 + 3*426*FLEN/8, x4, x1, x2)

inst_25003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28bfffff; valaddr_reg:x3; val_offset:75009*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75009*0 + 3*427*FLEN/8, x4, x1, x2)

inst_25004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28c00000; valaddr_reg:x3; val_offset:75012*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75012*0 + 3*428*FLEN/8, x4, x1, x2)

inst_25005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28e00000; valaddr_reg:x3; val_offset:75015*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75015*0 + 3*429*FLEN/8, x4, x1, x2)

inst_25006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28f00000; valaddr_reg:x3; val_offset:75018*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75018*0 + 3*430*FLEN/8, x4, x1, x2)

inst_25007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28f80000; valaddr_reg:x3; val_offset:75021*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75021*0 + 3*431*FLEN/8, x4, x1, x2)

inst_25008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fc0000; valaddr_reg:x3; val_offset:75024*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75024*0 + 3*432*FLEN/8, x4, x1, x2)

inst_25009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fe0000; valaddr_reg:x3; val_offset:75027*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75027*0 + 3*433*FLEN/8, x4, x1, x2)

inst_25010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ff0000; valaddr_reg:x3; val_offset:75030*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75030*0 + 3*434*FLEN/8, x4, x1, x2)

inst_25011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ff8000; valaddr_reg:x3; val_offset:75033*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75033*0 + 3*435*FLEN/8, x4, x1, x2)

inst_25012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ffc000; valaddr_reg:x3; val_offset:75036*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75036*0 + 3*436*FLEN/8, x4, x1, x2)

inst_25013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ffe000; valaddr_reg:x3; val_offset:75039*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75039*0 + 3*437*FLEN/8, x4, x1, x2)

inst_25014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fff000; valaddr_reg:x3; val_offset:75042*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75042*0 + 3*438*FLEN/8, x4, x1, x2)

inst_25015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fff800; valaddr_reg:x3; val_offset:75045*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75045*0 + 3*439*FLEN/8, x4, x1, x2)

inst_25016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fffc00; valaddr_reg:x3; val_offset:75048*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75048*0 + 3*440*FLEN/8, x4, x1, x2)

inst_25017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fffe00; valaddr_reg:x3; val_offset:75051*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75051*0 + 3*441*FLEN/8, x4, x1, x2)

inst_25018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ffff00; valaddr_reg:x3; val_offset:75054*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75054*0 + 3*442*FLEN/8, x4, x1, x2)

inst_25019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ffff80; valaddr_reg:x3; val_offset:75057*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75057*0 + 3*443*FLEN/8, x4, x1, x2)

inst_25020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ffffc0; valaddr_reg:x3; val_offset:75060*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75060*0 + 3*444*FLEN/8, x4, x1, x2)

inst_25021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ffffe0; valaddr_reg:x3; val_offset:75063*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75063*0 + 3*445*FLEN/8, x4, x1, x2)

inst_25022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fffff0; valaddr_reg:x3; val_offset:75066*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75066*0 + 3*446*FLEN/8, x4, x1, x2)

inst_25023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fffff8; valaddr_reg:x3; val_offset:75069*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75069*0 + 3*447*FLEN/8, x4, x1, x2)

inst_25024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fffffc; valaddr_reg:x3; val_offset:75072*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75072*0 + 3*448*FLEN/8, x4, x1, x2)

inst_25025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28fffffe; valaddr_reg:x3; val_offset:75075*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75075*0 + 3*449*FLEN/8, x4, x1, x2)

inst_25026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x28ffffff; valaddr_reg:x3; val_offset:75078*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75078*0 + 3*450*FLEN/8, x4, x1, x2)

inst_25027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3f800001; valaddr_reg:x3; val_offset:75081*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75081*0 + 3*451*FLEN/8, x4, x1, x2)

inst_25028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3f800003; valaddr_reg:x3; val_offset:75084*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75084*0 + 3*452*FLEN/8, x4, x1, x2)

inst_25029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3f800007; valaddr_reg:x3; val_offset:75087*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75087*0 + 3*453*FLEN/8, x4, x1, x2)

inst_25030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3f999999; valaddr_reg:x3; val_offset:75090*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75090*0 + 3*454*FLEN/8, x4, x1, x2)

inst_25031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:75093*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75093*0 + 3*455*FLEN/8, x4, x1, x2)

inst_25032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:75096*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75096*0 + 3*456*FLEN/8, x4, x1, x2)

inst_25033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:75099*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75099*0 + 3*457*FLEN/8, x4, x1, x2)

inst_25034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:75102*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75102*0 + 3*458*FLEN/8, x4, x1, x2)

inst_25035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:75105*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75105*0 + 3*459*FLEN/8, x4, x1, x2)

inst_25036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:75108*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75108*0 + 3*460*FLEN/8, x4, x1, x2)

inst_25037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:75111*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75111*0 + 3*461*FLEN/8, x4, x1, x2)

inst_25038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:75114*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75114*0 + 3*462*FLEN/8, x4, x1, x2)

inst_25039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:75117*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75117*0 + 3*463*FLEN/8, x4, x1, x2)

inst_25040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:75120*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75120*0 + 3*464*FLEN/8, x4, x1, x2)

inst_25041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:75123*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75123*0 + 3*465*FLEN/8, x4, x1, x2)

inst_25042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x763835 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x428acf and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef63835; op2val:0x428acf;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:75126*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75126*0 + 3*466*FLEN/8, x4, x1, x2)

inst_25043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:75129*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75129*0 + 3*467*FLEN/8, x4, x1, x2)

inst_25044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:75132*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75132*0 + 3*468*FLEN/8, x4, x1, x2)

inst_25045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:75135*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75135*0 + 3*469*FLEN/8, x4, x1, x2)

inst_25046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:75138*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75138*0 + 3*470*FLEN/8, x4, x1, x2)

inst_25047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:75141*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75141*0 + 3*471*FLEN/8, x4, x1, x2)

inst_25048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:75144*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75144*0 + 3*472*FLEN/8, x4, x1, x2)

inst_25049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:75147*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75147*0 + 3*473*FLEN/8, x4, x1, x2)

inst_25050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:75150*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75150*0 + 3*474*FLEN/8, x4, x1, x2)

inst_25051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:75153*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75153*0 + 3*475*FLEN/8, x4, x1, x2)

inst_25052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:75156*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75156*0 + 3*476*FLEN/8, x4, x1, x2)

inst_25053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:75159*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75159*0 + 3*477*FLEN/8, x4, x1, x2)

inst_25054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:75162*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75162*0 + 3*478*FLEN/8, x4, x1, x2)

inst_25055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:75165*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75165*0 + 3*479*FLEN/8, x4, x1, x2)

inst_25056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:75168*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75168*0 + 3*480*FLEN/8, x4, x1, x2)

inst_25057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:75171*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75171*0 + 3*481*FLEN/8, x4, x1, x2)

inst_25058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:75174*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75174*0 + 3*482*FLEN/8, x4, x1, x2)

inst_25059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9000000; valaddr_reg:x3; val_offset:75177*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75177*0 + 3*483*FLEN/8, x4, x1, x2)

inst_25060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9000001; valaddr_reg:x3; val_offset:75180*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75180*0 + 3*484*FLEN/8, x4, x1, x2)

inst_25061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9000003; valaddr_reg:x3; val_offset:75183*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75183*0 + 3*485*FLEN/8, x4, x1, x2)

inst_25062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9000007; valaddr_reg:x3; val_offset:75186*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75186*0 + 3*486*FLEN/8, x4, x1, x2)

inst_25063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc900000f; valaddr_reg:x3; val_offset:75189*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75189*0 + 3*487*FLEN/8, x4, x1, x2)

inst_25064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc900001f; valaddr_reg:x3; val_offset:75192*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75192*0 + 3*488*FLEN/8, x4, x1, x2)

inst_25065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc900003f; valaddr_reg:x3; val_offset:75195*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75195*0 + 3*489*FLEN/8, x4, x1, x2)

inst_25066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc900007f; valaddr_reg:x3; val_offset:75198*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75198*0 + 3*490*FLEN/8, x4, x1, x2)

inst_25067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc90000ff; valaddr_reg:x3; val_offset:75201*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75201*0 + 3*491*FLEN/8, x4, x1, x2)

inst_25068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc90001ff; valaddr_reg:x3; val_offset:75204*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75204*0 + 3*492*FLEN/8, x4, x1, x2)

inst_25069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc90003ff; valaddr_reg:x3; val_offset:75207*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75207*0 + 3*493*FLEN/8, x4, x1, x2)

inst_25070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc90007ff; valaddr_reg:x3; val_offset:75210*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75210*0 + 3*494*FLEN/8, x4, x1, x2)

inst_25071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9000fff; valaddr_reg:x3; val_offset:75213*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75213*0 + 3*495*FLEN/8, x4, x1, x2)

inst_25072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9001fff; valaddr_reg:x3; val_offset:75216*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75216*0 + 3*496*FLEN/8, x4, x1, x2)

inst_25073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9003fff; valaddr_reg:x3; val_offset:75219*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75219*0 + 3*497*FLEN/8, x4, x1, x2)

inst_25074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9007fff; valaddr_reg:x3; val_offset:75222*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75222*0 + 3*498*FLEN/8, x4, x1, x2)

inst_25075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc900ffff; valaddr_reg:x3; val_offset:75225*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75225*0 + 3*499*FLEN/8, x4, x1, x2)

inst_25076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc901ffff; valaddr_reg:x3; val_offset:75228*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75228*0 + 3*500*FLEN/8, x4, x1, x2)

inst_25077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc903ffff; valaddr_reg:x3; val_offset:75231*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75231*0 + 3*501*FLEN/8, x4, x1, x2)

inst_25078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc907ffff; valaddr_reg:x3; val_offset:75234*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75234*0 + 3*502*FLEN/8, x4, x1, x2)

inst_25079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc90fffff; valaddr_reg:x3; val_offset:75237*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75237*0 + 3*503*FLEN/8, x4, x1, x2)

inst_25080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc91fffff; valaddr_reg:x3; val_offset:75240*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75240*0 + 3*504*FLEN/8, x4, x1, x2)

inst_25081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc93fffff; valaddr_reg:x3; val_offset:75243*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75243*0 + 3*505*FLEN/8, x4, x1, x2)

inst_25082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9400000; valaddr_reg:x3; val_offset:75246*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75246*0 + 3*506*FLEN/8, x4, x1, x2)

inst_25083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9600000; valaddr_reg:x3; val_offset:75249*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75249*0 + 3*507*FLEN/8, x4, x1, x2)

inst_25084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9700000; valaddr_reg:x3; val_offset:75252*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75252*0 + 3*508*FLEN/8, x4, x1, x2)

inst_25085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc9780000; valaddr_reg:x3; val_offset:75255*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75255*0 + 3*509*FLEN/8, x4, x1, x2)

inst_25086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97c0000; valaddr_reg:x3; val_offset:75258*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75258*0 + 3*510*FLEN/8, x4, x1, x2)

inst_25087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97e0000; valaddr_reg:x3; val_offset:75261*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75261*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_25088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97f0000; valaddr_reg:x3; val_offset:75264*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75264*0 + 3*512*FLEN/8, x4, x1, x2)

inst_25089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97f8000; valaddr_reg:x3; val_offset:75267*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75267*0 + 3*513*FLEN/8, x4, x1, x2)

inst_25090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fc000; valaddr_reg:x3; val_offset:75270*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75270*0 + 3*514*FLEN/8, x4, x1, x2)

inst_25091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fe000; valaddr_reg:x3; val_offset:75273*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75273*0 + 3*515*FLEN/8, x4, x1, x2)

inst_25092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ff000; valaddr_reg:x3; val_offset:75276*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75276*0 + 3*516*FLEN/8, x4, x1, x2)

inst_25093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ff800; valaddr_reg:x3; val_offset:75279*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75279*0 + 3*517*FLEN/8, x4, x1, x2)

inst_25094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffc00; valaddr_reg:x3; val_offset:75282*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75282*0 + 3*518*FLEN/8, x4, x1, x2)

inst_25095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffe00; valaddr_reg:x3; val_offset:75285*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75285*0 + 3*519*FLEN/8, x4, x1, x2)

inst_25096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fff00; valaddr_reg:x3; val_offset:75288*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75288*0 + 3*520*FLEN/8, x4, x1, x2)

inst_25097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fff80; valaddr_reg:x3; val_offset:75291*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75291*0 + 3*521*FLEN/8, x4, x1, x2)

inst_25098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fffc0; valaddr_reg:x3; val_offset:75294*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75294*0 + 3*522*FLEN/8, x4, x1, x2)

inst_25099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fffe0; valaddr_reg:x3; val_offset:75297*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75297*0 + 3*523*FLEN/8, x4, x1, x2)

inst_25100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffff0; valaddr_reg:x3; val_offset:75300*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75300*0 + 3*524*FLEN/8, x4, x1, x2)

inst_25101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffff8; valaddr_reg:x3; val_offset:75303*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75303*0 + 3*525*FLEN/8, x4, x1, x2)

inst_25102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffffc; valaddr_reg:x3; val_offset:75306*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75306*0 + 3*526*FLEN/8, x4, x1, x2)

inst_25103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97ffffe; valaddr_reg:x3; val_offset:75309*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75309*0 + 3*527*FLEN/8, x4, x1, x2)

inst_25104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7759e0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x423ce2 and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef759e0; op2val:0x80423ce2;
op3val:0xc97fffff; valaddr_reg:x3; val_offset:75312*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75312*0 + 3*528*FLEN/8, x4, x1, x2)

inst_25105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf800001; valaddr_reg:x3; val_offset:75315*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75315*0 + 3*529*FLEN/8, x4, x1, x2)

inst_25106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf800003; valaddr_reg:x3; val_offset:75318*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75318*0 + 3*530*FLEN/8, x4, x1, x2)

inst_25107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf800007; valaddr_reg:x3; val_offset:75321*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75321*0 + 3*531*FLEN/8, x4, x1, x2)

inst_25108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbf999999; valaddr_reg:x3; val_offset:75324*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75324*0 + 3*532*FLEN/8, x4, x1, x2)

inst_25109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:75327*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75327*0 + 3*533*FLEN/8, x4, x1, x2)

inst_25110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:75330*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75330*0 + 3*534*FLEN/8, x4, x1, x2)

inst_25111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:75333*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75333*0 + 3*535*FLEN/8, x4, x1, x2)

inst_25112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:75336*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75336*0 + 3*536*FLEN/8, x4, x1, x2)

inst_25113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:75339*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75339*0 + 3*537*FLEN/8, x4, x1, x2)

inst_25114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:75342*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75342*0 + 3*538*FLEN/8, x4, x1, x2)

inst_25115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:75345*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75345*0 + 3*539*FLEN/8, x4, x1, x2)

inst_25116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:75348*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75348*0 + 3*540*FLEN/8, x4, x1, x2)

inst_25117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:75351*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75351*0 + 3*541*FLEN/8, x4, x1, x2)

inst_25118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:75354*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75354*0 + 3*542*FLEN/8, x4, x1, x2)

inst_25119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:75357*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75357*0 + 3*543*FLEN/8, x4, x1, x2)

inst_25120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:75360*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75360*0 + 3*544*FLEN/8, x4, x1, x2)

inst_25121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800000; valaddr_reg:x3; val_offset:75363*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75363*0 + 3*545*FLEN/8, x4, x1, x2)

inst_25122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800001; valaddr_reg:x3; val_offset:75366*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75366*0 + 3*546*FLEN/8, x4, x1, x2)

inst_25123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800003; valaddr_reg:x3; val_offset:75369*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75369*0 + 3*547*FLEN/8, x4, x1, x2)

inst_25124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800007; valaddr_reg:x3; val_offset:75372*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75372*0 + 3*548*FLEN/8, x4, x1, x2)

inst_25125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180000f; valaddr_reg:x3; val_offset:75375*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75375*0 + 3*549*FLEN/8, x4, x1, x2)

inst_25126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180001f; valaddr_reg:x3; val_offset:75378*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75378*0 + 3*550*FLEN/8, x4, x1, x2)

inst_25127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180003f; valaddr_reg:x3; val_offset:75381*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75381*0 + 3*551*FLEN/8, x4, x1, x2)

inst_25128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180007f; valaddr_reg:x3; val_offset:75384*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75384*0 + 3*552*FLEN/8, x4, x1, x2)

inst_25129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18000ff; valaddr_reg:x3; val_offset:75387*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75387*0 + 3*553*FLEN/8, x4, x1, x2)

inst_25130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18001ff; valaddr_reg:x3; val_offset:75390*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75390*0 + 3*554*FLEN/8, x4, x1, x2)

inst_25131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18003ff; valaddr_reg:x3; val_offset:75393*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75393*0 + 3*555*FLEN/8, x4, x1, x2)

inst_25132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18007ff; valaddr_reg:x3; val_offset:75396*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75396*0 + 3*556*FLEN/8, x4, x1, x2)

inst_25133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1800fff; valaddr_reg:x3; val_offset:75399*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75399*0 + 3*557*FLEN/8, x4, x1, x2)

inst_25134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1801fff; valaddr_reg:x3; val_offset:75402*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75402*0 + 3*558*FLEN/8, x4, x1, x2)

inst_25135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1803fff; valaddr_reg:x3; val_offset:75405*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75405*0 + 3*559*FLEN/8, x4, x1, x2)

inst_25136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1807fff; valaddr_reg:x3; val_offset:75408*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75408*0 + 3*560*FLEN/8, x4, x1, x2)

inst_25137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc180ffff; valaddr_reg:x3; val_offset:75411*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75411*0 + 3*561*FLEN/8, x4, x1, x2)

inst_25138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc181ffff; valaddr_reg:x3; val_offset:75414*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75414*0 + 3*562*FLEN/8, x4, x1, x2)

inst_25139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc183ffff; valaddr_reg:x3; val_offset:75417*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75417*0 + 3*563*FLEN/8, x4, x1, x2)

inst_25140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc187ffff; valaddr_reg:x3; val_offset:75420*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75420*0 + 3*564*FLEN/8, x4, x1, x2)

inst_25141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc18fffff; valaddr_reg:x3; val_offset:75423*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75423*0 + 3*565*FLEN/8, x4, x1, x2)

inst_25142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc19fffff; valaddr_reg:x3; val_offset:75426*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75426*0 + 3*566*FLEN/8, x4, x1, x2)

inst_25143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1bfffff; valaddr_reg:x3; val_offset:75429*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75429*0 + 3*567*FLEN/8, x4, x1, x2)

inst_25144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1c00000; valaddr_reg:x3; val_offset:75432*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75432*0 + 3*568*FLEN/8, x4, x1, x2)

inst_25145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1e00000; valaddr_reg:x3; val_offset:75435*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75435*0 + 3*569*FLEN/8, x4, x1, x2)

inst_25146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1f00000; valaddr_reg:x3; val_offset:75438*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75438*0 + 3*570*FLEN/8, x4, x1, x2)

inst_25147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1f80000; valaddr_reg:x3; val_offset:75441*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75441*0 + 3*571*FLEN/8, x4, x1, x2)

inst_25148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fc0000; valaddr_reg:x3; val_offset:75444*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75444*0 + 3*572*FLEN/8, x4, x1, x2)

inst_25149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fe0000; valaddr_reg:x3; val_offset:75447*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75447*0 + 3*573*FLEN/8, x4, x1, x2)

inst_25150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ff0000; valaddr_reg:x3; val_offset:75450*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75450*0 + 3*574*FLEN/8, x4, x1, x2)

inst_25151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ff8000; valaddr_reg:x3; val_offset:75453*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75453*0 + 3*575*FLEN/8, x4, x1, x2)

inst_25152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffc000; valaddr_reg:x3; val_offset:75456*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75456*0 + 3*576*FLEN/8, x4, x1, x2)

inst_25153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffe000; valaddr_reg:x3; val_offset:75459*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75459*0 + 3*577*FLEN/8, x4, x1, x2)

inst_25154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fff000; valaddr_reg:x3; val_offset:75462*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75462*0 + 3*578*FLEN/8, x4, x1, x2)

inst_25155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fff800; valaddr_reg:x3; val_offset:75465*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75465*0 + 3*579*FLEN/8, x4, x1, x2)

inst_25156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffc00; valaddr_reg:x3; val_offset:75468*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75468*0 + 3*580*FLEN/8, x4, x1, x2)

inst_25157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffe00; valaddr_reg:x3; val_offset:75471*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75471*0 + 3*581*FLEN/8, x4, x1, x2)

inst_25158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffff00; valaddr_reg:x3; val_offset:75474*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75474*0 + 3*582*FLEN/8, x4, x1, x2)

inst_25159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffff80; valaddr_reg:x3; val_offset:75477*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75477*0 + 3*583*FLEN/8, x4, x1, x2)

inst_25160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffffc0; valaddr_reg:x3; val_offset:75480*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75480*0 + 3*584*FLEN/8, x4, x1, x2)

inst_25161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffffe0; valaddr_reg:x3; val_offset:75483*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75483*0 + 3*585*FLEN/8, x4, x1, x2)

inst_25162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffff0; valaddr_reg:x3; val_offset:75486*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75486*0 + 3*586*FLEN/8, x4, x1, x2)

inst_25163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffff8; valaddr_reg:x3; val_offset:75489*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75489*0 + 3*587*FLEN/8, x4, x1, x2)

inst_25164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffffc; valaddr_reg:x3; val_offset:75492*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75492*0 + 3*588*FLEN/8, x4, x1, x2)

inst_25165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1fffffe; valaddr_reg:x3; val_offset:75495*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75495*0 + 3*589*FLEN/8, x4, x1, x2)

inst_25166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a83e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4227ec and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7a83e; op2val:0x804227ec;
op3val:0xc1ffffff; valaddr_reg:x3; val_offset:75498*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75498*0 + 3*590*FLEN/8, x4, x1, x2)

inst_25167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f800001; valaddr_reg:x3; val_offset:75501*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75501*0 + 3*591*FLEN/8, x4, x1, x2)

inst_25168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f800003; valaddr_reg:x3; val_offset:75504*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75504*0 + 3*592*FLEN/8, x4, x1, x2)

inst_25169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f800007; valaddr_reg:x3; val_offset:75507*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75507*0 + 3*593*FLEN/8, x4, x1, x2)

inst_25170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3f999999; valaddr_reg:x3; val_offset:75510*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75510*0 + 3*594*FLEN/8, x4, x1, x2)

inst_25171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:75513*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75513*0 + 3*595*FLEN/8, x4, x1, x2)

inst_25172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:75516*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75516*0 + 3*596*FLEN/8, x4, x1, x2)

inst_25173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:75519*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75519*0 + 3*597*FLEN/8, x4, x1, x2)

inst_25174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:75522*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75522*0 + 3*598*FLEN/8, x4, x1, x2)

inst_25175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:75525*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75525*0 + 3*599*FLEN/8, x4, x1, x2)

inst_25176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:75528*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75528*0 + 3*600*FLEN/8, x4, x1, x2)

inst_25177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:75531*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75531*0 + 3*601*FLEN/8, x4, x1, x2)

inst_25178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:75534*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75534*0 + 3*602*FLEN/8, x4, x1, x2)

inst_25179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:75537*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75537*0 + 3*603*FLEN/8, x4, x1, x2)

inst_25180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:75540*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75540*0 + 3*604*FLEN/8, x4, x1, x2)

inst_25181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:75543*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75543*0 + 3*605*FLEN/8, x4, x1, x2)

inst_25182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:75546*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75546*0 + 3*606*FLEN/8, x4, x1, x2)

inst_25183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000000; valaddr_reg:x3; val_offset:75549*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75549*0 + 3*607*FLEN/8, x4, x1, x2)

inst_25184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000001; valaddr_reg:x3; val_offset:75552*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75552*0 + 3*608*FLEN/8, x4, x1, x2)

inst_25185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000003; valaddr_reg:x3; val_offset:75555*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75555*0 + 3*609*FLEN/8, x4, x1, x2)

inst_25186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000007; valaddr_reg:x3; val_offset:75558*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75558*0 + 3*610*FLEN/8, x4, x1, x2)

inst_25187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00000f; valaddr_reg:x3; val_offset:75561*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75561*0 + 3*611*FLEN/8, x4, x1, x2)

inst_25188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00001f; valaddr_reg:x3; val_offset:75564*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75564*0 + 3*612*FLEN/8, x4, x1, x2)

inst_25189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00003f; valaddr_reg:x3; val_offset:75567*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75567*0 + 3*613*FLEN/8, x4, x1, x2)

inst_25190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00007f; valaddr_reg:x3; val_offset:75570*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75570*0 + 3*614*FLEN/8, x4, x1, x2)

inst_25191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0000ff; valaddr_reg:x3; val_offset:75573*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75573*0 + 3*615*FLEN/8, x4, x1, x2)

inst_25192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0001ff; valaddr_reg:x3; val_offset:75576*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75576*0 + 3*616*FLEN/8, x4, x1, x2)

inst_25193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0003ff; valaddr_reg:x3; val_offset:75579*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75579*0 + 3*617*FLEN/8, x4, x1, x2)

inst_25194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0007ff; valaddr_reg:x3; val_offset:75582*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75582*0 + 3*618*FLEN/8, x4, x1, x2)

inst_25195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c000fff; valaddr_reg:x3; val_offset:75585*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75585*0 + 3*619*FLEN/8, x4, x1, x2)

inst_25196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c001fff; valaddr_reg:x3; val_offset:75588*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75588*0 + 3*620*FLEN/8, x4, x1, x2)

inst_25197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c003fff; valaddr_reg:x3; val_offset:75591*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75591*0 + 3*621*FLEN/8, x4, x1, x2)

inst_25198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c007fff; valaddr_reg:x3; val_offset:75594*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75594*0 + 3*622*FLEN/8, x4, x1, x2)

inst_25199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c00ffff; valaddr_reg:x3; val_offset:75597*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75597*0 + 3*623*FLEN/8, x4, x1, x2)

inst_25200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c01ffff; valaddr_reg:x3; val_offset:75600*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75600*0 + 3*624*FLEN/8, x4, x1, x2)

inst_25201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c03ffff; valaddr_reg:x3; val_offset:75603*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75603*0 + 3*625*FLEN/8, x4, x1, x2)

inst_25202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c07ffff; valaddr_reg:x3; val_offset:75606*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75606*0 + 3*626*FLEN/8, x4, x1, x2)

inst_25203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c0fffff; valaddr_reg:x3; val_offset:75609*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75609*0 + 3*627*FLEN/8, x4, x1, x2)

inst_25204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c1fffff; valaddr_reg:x3; val_offset:75612*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75612*0 + 3*628*FLEN/8, x4, x1, x2)

inst_25205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c3fffff; valaddr_reg:x3; val_offset:75615*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75615*0 + 3*629*FLEN/8, x4, x1, x2)

inst_25206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c400000; valaddr_reg:x3; val_offset:75618*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75618*0 + 3*630*FLEN/8, x4, x1, x2)

inst_25207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c600000; valaddr_reg:x3; val_offset:75621*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75621*0 + 3*631*FLEN/8, x4, x1, x2)

inst_25208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c700000; valaddr_reg:x3; val_offset:75624*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75624*0 + 3*632*FLEN/8, x4, x1, x2)

inst_25209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c780000; valaddr_reg:x3; val_offset:75627*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75627*0 + 3*633*FLEN/8, x4, x1, x2)

inst_25210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7c0000; valaddr_reg:x3; val_offset:75630*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75630*0 + 3*634*FLEN/8, x4, x1, x2)

inst_25211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7e0000; valaddr_reg:x3; val_offset:75633*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75633*0 + 3*635*FLEN/8, x4, x1, x2)

inst_25212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7f0000; valaddr_reg:x3; val_offset:75636*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75636*0 + 3*636*FLEN/8, x4, x1, x2)

inst_25213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7f8000; valaddr_reg:x3; val_offset:75639*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75639*0 + 3*637*FLEN/8, x4, x1, x2)

inst_25214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fc000; valaddr_reg:x3; val_offset:75642*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75642*0 + 3*638*FLEN/8, x4, x1, x2)

inst_25215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fe000; valaddr_reg:x3; val_offset:75645*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75645*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_25216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ff000; valaddr_reg:x3; val_offset:75648*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75648*0 + 3*640*FLEN/8, x4, x1, x2)

inst_25217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ff800; valaddr_reg:x3; val_offset:75651*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75651*0 + 3*641*FLEN/8, x4, x1, x2)

inst_25218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffc00; valaddr_reg:x3; val_offset:75654*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75654*0 + 3*642*FLEN/8, x4, x1, x2)

inst_25219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffe00; valaddr_reg:x3; val_offset:75657*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75657*0 + 3*643*FLEN/8, x4, x1, x2)

inst_25220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fff00; valaddr_reg:x3; val_offset:75660*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75660*0 + 3*644*FLEN/8, x4, x1, x2)

inst_25221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fff80; valaddr_reg:x3; val_offset:75663*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75663*0 + 3*645*FLEN/8, x4, x1, x2)

inst_25222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fffc0; valaddr_reg:x3; val_offset:75666*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75666*0 + 3*646*FLEN/8, x4, x1, x2)

inst_25223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fffe0; valaddr_reg:x3; val_offset:75669*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75669*0 + 3*647*FLEN/8, x4, x1, x2)

inst_25224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffff0; valaddr_reg:x3; val_offset:75672*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75672*0 + 3*648*FLEN/8, x4, x1, x2)

inst_25225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffff8; valaddr_reg:x3; val_offset:75675*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75675*0 + 3*649*FLEN/8, x4, x1, x2)

inst_25226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffffc; valaddr_reg:x3; val_offset:75678*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75678*0 + 3*650*FLEN/8, x4, x1, x2)

inst_25227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7ffffe; valaddr_reg:x3; val_offset:75681*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75681*0 + 3*651*FLEN/8, x4, x1, x2)

inst_25228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7930c1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x41bfb8 and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef930c1; op2val:0x41bfb8;
op3val:0x4c7fffff; valaddr_reg:x3; val_offset:75684*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75684*0 + 3*652*FLEN/8, x4, x1, x2)

inst_25229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf800001; valaddr_reg:x3; val_offset:75687*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75687*0 + 3*653*FLEN/8, x4, x1, x2)

inst_25230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf800003; valaddr_reg:x3; val_offset:75690*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75690*0 + 3*654*FLEN/8, x4, x1, x2)

inst_25231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf800007; valaddr_reg:x3; val_offset:75693*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75693*0 + 3*655*FLEN/8, x4, x1, x2)

inst_25232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbf999999; valaddr_reg:x3; val_offset:75696*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75696*0 + 3*656*FLEN/8, x4, x1, x2)

inst_25233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:75699*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75699*0 + 3*657*FLEN/8, x4, x1, x2)

inst_25234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:75702*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75702*0 + 3*658*FLEN/8, x4, x1, x2)

inst_25235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:75705*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75705*0 + 3*659*FLEN/8, x4, x1, x2)

inst_25236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:75708*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75708*0 + 3*660*FLEN/8, x4, x1, x2)

inst_25237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:75711*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75711*0 + 3*661*FLEN/8, x4, x1, x2)

inst_25238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:75714*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75714*0 + 3*662*FLEN/8, x4, x1, x2)

inst_25239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:75717*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75717*0 + 3*663*FLEN/8, x4, x1, x2)

inst_25240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:75720*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75720*0 + 3*664*FLEN/8, x4, x1, x2)

inst_25241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:75723*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75723*0 + 3*665*FLEN/8, x4, x1, x2)

inst_25242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:75726*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75726*0 + 3*666*FLEN/8, x4, x1, x2)

inst_25243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:75729*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75729*0 + 3*667*FLEN/8, x4, x1, x2)

inst_25244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:75732*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75732*0 + 3*668*FLEN/8, x4, x1, x2)

inst_25245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800000; valaddr_reg:x3; val_offset:75735*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75735*0 + 3*669*FLEN/8, x4, x1, x2)

inst_25246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800001; valaddr_reg:x3; val_offset:75738*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75738*0 + 3*670*FLEN/8, x4, x1, x2)

inst_25247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800003; valaddr_reg:x3; val_offset:75741*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75741*0 + 3*671*FLEN/8, x4, x1, x2)

inst_25248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800007; valaddr_reg:x3; val_offset:75744*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75744*0 + 3*672*FLEN/8, x4, x1, x2)

inst_25249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080000f; valaddr_reg:x3; val_offset:75747*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75747*0 + 3*673*FLEN/8, x4, x1, x2)

inst_25250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080001f; valaddr_reg:x3; val_offset:75750*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75750*0 + 3*674*FLEN/8, x4, x1, x2)

inst_25251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080003f; valaddr_reg:x3; val_offset:75753*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75753*0 + 3*675*FLEN/8, x4, x1, x2)

inst_25252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080007f; valaddr_reg:x3; val_offset:75756*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75756*0 + 3*676*FLEN/8, x4, x1, x2)

inst_25253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08000ff; valaddr_reg:x3; val_offset:75759*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75759*0 + 3*677*FLEN/8, x4, x1, x2)

inst_25254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08001ff; valaddr_reg:x3; val_offset:75762*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75762*0 + 3*678*FLEN/8, x4, x1, x2)

inst_25255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08003ff; valaddr_reg:x3; val_offset:75765*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75765*0 + 3*679*FLEN/8, x4, x1, x2)

inst_25256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08007ff; valaddr_reg:x3; val_offset:75768*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75768*0 + 3*680*FLEN/8, x4, x1, x2)

inst_25257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0800fff; valaddr_reg:x3; val_offset:75771*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75771*0 + 3*681*FLEN/8, x4, x1, x2)

inst_25258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0801fff; valaddr_reg:x3; val_offset:75774*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75774*0 + 3*682*FLEN/8, x4, x1, x2)

inst_25259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0803fff; valaddr_reg:x3; val_offset:75777*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75777*0 + 3*683*FLEN/8, x4, x1, x2)

inst_25260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0807fff; valaddr_reg:x3; val_offset:75780*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75780*0 + 3*684*FLEN/8, x4, x1, x2)

inst_25261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc080ffff; valaddr_reg:x3; val_offset:75783*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75783*0 + 3*685*FLEN/8, x4, x1, x2)

inst_25262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc081ffff; valaddr_reg:x3; val_offset:75786*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75786*0 + 3*686*FLEN/8, x4, x1, x2)

inst_25263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc083ffff; valaddr_reg:x3; val_offset:75789*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75789*0 + 3*687*FLEN/8, x4, x1, x2)

inst_25264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc087ffff; valaddr_reg:x3; val_offset:75792*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75792*0 + 3*688*FLEN/8, x4, x1, x2)

inst_25265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc08fffff; valaddr_reg:x3; val_offset:75795*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75795*0 + 3*689*FLEN/8, x4, x1, x2)

inst_25266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc09fffff; valaddr_reg:x3; val_offset:75798*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75798*0 + 3*690*FLEN/8, x4, x1, x2)

inst_25267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0bfffff; valaddr_reg:x3; val_offset:75801*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75801*0 + 3*691*FLEN/8, x4, x1, x2)

inst_25268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0c00000; valaddr_reg:x3; val_offset:75804*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75804*0 + 3*692*FLEN/8, x4, x1, x2)

inst_25269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0e00000; valaddr_reg:x3; val_offset:75807*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75807*0 + 3*693*FLEN/8, x4, x1, x2)

inst_25270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0f00000; valaddr_reg:x3; val_offset:75810*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75810*0 + 3*694*FLEN/8, x4, x1, x2)

inst_25271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0f80000; valaddr_reg:x3; val_offset:75813*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75813*0 + 3*695*FLEN/8, x4, x1, x2)

inst_25272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fc0000; valaddr_reg:x3; val_offset:75816*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75816*0 + 3*696*FLEN/8, x4, x1, x2)

inst_25273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fe0000; valaddr_reg:x3; val_offset:75819*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75819*0 + 3*697*FLEN/8, x4, x1, x2)

inst_25274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ff0000; valaddr_reg:x3; val_offset:75822*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75822*0 + 3*698*FLEN/8, x4, x1, x2)

inst_25275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ff8000; valaddr_reg:x3; val_offset:75825*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75825*0 + 3*699*FLEN/8, x4, x1, x2)

inst_25276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffc000; valaddr_reg:x3; val_offset:75828*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75828*0 + 3*700*FLEN/8, x4, x1, x2)

inst_25277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffe000; valaddr_reg:x3; val_offset:75831*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75831*0 + 3*701*FLEN/8, x4, x1, x2)

inst_25278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fff000; valaddr_reg:x3; val_offset:75834*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75834*0 + 3*702*FLEN/8, x4, x1, x2)

inst_25279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fff800; valaddr_reg:x3; val_offset:75837*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75837*0 + 3*703*FLEN/8, x4, x1, x2)

inst_25280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffc00; valaddr_reg:x3; val_offset:75840*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75840*0 + 3*704*FLEN/8, x4, x1, x2)

inst_25281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffe00; valaddr_reg:x3; val_offset:75843*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75843*0 + 3*705*FLEN/8, x4, x1, x2)

inst_25282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffff00; valaddr_reg:x3; val_offset:75846*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75846*0 + 3*706*FLEN/8, x4, x1, x2)

inst_25283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffff80; valaddr_reg:x3; val_offset:75849*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75849*0 + 3*707*FLEN/8, x4, x1, x2)

inst_25284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffffc0; valaddr_reg:x3; val_offset:75852*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75852*0 + 3*708*FLEN/8, x4, x1, x2)

inst_25285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffffe0; valaddr_reg:x3; val_offset:75855*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75855*0 + 3*709*FLEN/8, x4, x1, x2)

inst_25286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffff0; valaddr_reg:x3; val_offset:75858*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75858*0 + 3*710*FLEN/8, x4, x1, x2)

inst_25287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffff8; valaddr_reg:x3; val_offset:75861*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75861*0 + 3*711*FLEN/8, x4, x1, x2)

inst_25288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffffc; valaddr_reg:x3; val_offset:75864*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75864*0 + 3*712*FLEN/8, x4, x1, x2)

inst_25289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0fffffe; valaddr_reg:x3; val_offset:75867*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75867*0 + 3*713*FLEN/8, x4, x1, x2)

inst_25290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7af83f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x414864 and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efaf83f; op2val:0x80414864;
op3val:0xc0ffffff; valaddr_reg:x3; val_offset:75870*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75870*0 + 3*714*FLEN/8, x4, x1, x2)

inst_25291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:75873*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75873*0 + 3*715*FLEN/8, x4, x1, x2)

inst_25292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:75876*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75876*0 + 3*716*FLEN/8, x4, x1, x2)

inst_25293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:75879*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75879*0 + 3*717*FLEN/8, x4, x1, x2)

inst_25294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:75882*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75882*0 + 3*718*FLEN/8, x4, x1, x2)

inst_25295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:75885*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75885*0 + 3*719*FLEN/8, x4, x1, x2)

inst_25296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:75888*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75888*0 + 3*720*FLEN/8, x4, x1, x2)

inst_25297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:75891*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75891*0 + 3*721*FLEN/8, x4, x1, x2)

inst_25298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:75894*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75894*0 + 3*722*FLEN/8, x4, x1, x2)

inst_25299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:75897*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75897*0 + 3*723*FLEN/8, x4, x1, x2)

inst_25300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:75900*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75900*0 + 3*724*FLEN/8, x4, x1, x2)

inst_25301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:75903*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75903*0 + 3*725*FLEN/8, x4, x1, x2)

inst_25302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:75906*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75906*0 + 3*726*FLEN/8, x4, x1, x2)

inst_25303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:75909*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75909*0 + 3*727*FLEN/8, x4, x1, x2)

inst_25304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:75912*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75912*0 + 3*728*FLEN/8, x4, x1, x2)

inst_25305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:75915*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75915*0 + 3*729*FLEN/8, x4, x1, x2)

inst_25306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:75918*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75918*0 + 3*730*FLEN/8, x4, x1, x2)

inst_25307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:75921*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75921*0 + 3*731*FLEN/8, x4, x1, x2)

inst_25308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:75924*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75924*0 + 3*732*FLEN/8, x4, x1, x2)

inst_25309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:75927*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75927*0 + 3*733*FLEN/8, x4, x1, x2)

inst_25310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:75930*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75930*0 + 3*734*FLEN/8, x4, x1, x2)

inst_25311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:75933*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75933*0 + 3*735*FLEN/8, x4, x1, x2)

inst_25312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:75936*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75936*0 + 3*736*FLEN/8, x4, x1, x2)

inst_25313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:75939*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75939*0 + 3*737*FLEN/8, x4, x1, x2)

inst_25314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:75942*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75942*0 + 3*738*FLEN/8, x4, x1, x2)

inst_25315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:75945*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75945*0 + 3*739*FLEN/8, x4, x1, x2)

inst_25316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:75948*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75948*0 + 3*740*FLEN/8, x4, x1, x2)

inst_25317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:75951*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75951*0 + 3*741*FLEN/8, x4, x1, x2)

inst_25318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:75954*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75954*0 + 3*742*FLEN/8, x4, x1, x2)

inst_25319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:75957*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75957*0 + 3*743*FLEN/8, x4, x1, x2)

inst_25320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:75960*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75960*0 + 3*744*FLEN/8, x4, x1, x2)

inst_25321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:75963*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75963*0 + 3*745*FLEN/8, x4, x1, x2)

inst_25322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:75966*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75966*0 + 3*746*FLEN/8, x4, x1, x2)

inst_25323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:75969*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75969*0 + 3*747*FLEN/8, x4, x1, x2)

inst_25324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:75972*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75972*0 + 3*748*FLEN/8, x4, x1, x2)

inst_25325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:75975*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75975*0 + 3*749*FLEN/8, x4, x1, x2)

inst_25326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:75978*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75978*0 + 3*750*FLEN/8, x4, x1, x2)

inst_25327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:75981*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75981*0 + 3*751*FLEN/8, x4, x1, x2)

inst_25328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:75984*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75984*0 + 3*752*FLEN/8, x4, x1, x2)

inst_25329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:75987*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75987*0 + 3*753*FLEN/8, x4, x1, x2)

inst_25330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:75990*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75990*0 + 3*754*FLEN/8, x4, x1, x2)

inst_25331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:75993*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75993*0 + 3*755*FLEN/8, x4, x1, x2)

inst_25332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:75996*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75996*0 + 3*756*FLEN/8, x4, x1, x2)

inst_25333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:75999*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75999*0 + 3*757*FLEN/8, x4, x1, x2)

inst_25334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:76002*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76002*0 + 3*758*FLEN/8, x4, x1, x2)

inst_25335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:76005*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76005*0 + 3*759*FLEN/8, x4, x1, x2)

inst_25336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:76008*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76008*0 + 3*760*FLEN/8, x4, x1, x2)

inst_25337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:76011*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76011*0 + 3*761*FLEN/8, x4, x1, x2)

inst_25338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:76014*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76014*0 + 3*762*FLEN/8, x4, x1, x2)

inst_25339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:76017*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76017*0 + 3*763*FLEN/8, x4, x1, x2)

inst_25340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:76020*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76020*0 + 3*764*FLEN/8, x4, x1, x2)

inst_25341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ff800; valaddr_reg:x3; val_offset:76023*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76023*0 + 3*765*FLEN/8, x4, x1, x2)

inst_25342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ffc00; valaddr_reg:x3; val_offset:76026*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76026*0 + 3*766*FLEN/8, x4, x1, x2)

inst_25343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7befa5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efbefa5; op2val:0x0;
op3val:0x107ffe00; valaddr_reg:x3; val_offset:76029*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76029*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(851443712,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(853540864,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(854589440,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855113728,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855375872,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855506944,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855572480,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855605248,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855621632,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855629824,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855633920,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855635968,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855636992,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855637504,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855637760,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855637888,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855637952,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855637984,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855638000,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855638008,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855638012,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855638014,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(855638015,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2129889542,32,FLEN)
NAN_BOXED(4408979,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317824,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317825,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317827,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317831,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317839,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317855,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317887,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122317951,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122318079,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122318335,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122318847,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122319871,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122321919,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122326015,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122334207,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122350591,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122383359,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122448895,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122579967,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2122842111,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2123366399,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2124414975,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2126512127,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2126512128,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2128609280,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2129657856,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130182144,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130444288,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130575360,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130640896,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130673664,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130690048,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130698240,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130702336,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130704384,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130705408,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130705920,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706176,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706304,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706368,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706400,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706416,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706424,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706428,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706430,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706431,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2129960965,32,FLEN)
NAN_BOXED(1074131888,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702720,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702721,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702723,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702727,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702735,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702751,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702783,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702847,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900702975,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900703231,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900703743,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900704767,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900706815,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900710911,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900719103,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900735487,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900768255,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900833791,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3900964863,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3901227007,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3901751295,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3902799871,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3904897023,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3904897024,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3906994176,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3908042752,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3908567040,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3908829184,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3908960256,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909025792,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909058560,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909074944,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909083136,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909087232,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909089280,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909090304,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909090816,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091072,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091200,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091264,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091296,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091312,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091320,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091324,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091326,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(3909091327,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2129967483,32,FLEN)
NAN_BOXED(3221611968,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2129994159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269632,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269633,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269635,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269639,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269647,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269663,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269695,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269759,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269887,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270143,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243270655,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243271679,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243273727,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243277823,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243286015,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243302399,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243335167,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243400703,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243531775,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243793919,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(244318207,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(245366783,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463935,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(247463936,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(249561088,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(250609664,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251133952,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251396096,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251527168,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251592704,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251625472,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251641856,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251650048,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251654144,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251656192,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2130007119,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2130045997,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644416,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644417,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644419,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644423,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644431,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644447,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644479,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644543,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644671,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644927,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323645439,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323646463,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323648511,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323652607,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323660799,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323677183,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323709951,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323775487,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323906559,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324168703,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2324692991,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2325741567,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838719,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2327838720,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2329935872,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2330984448,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331508736,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331770880,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331901952,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2331967488,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332000256,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332016640,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332024832,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332028928,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332030976,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032000,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032512,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032768,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032896,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032960,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032992,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033008,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033016,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033020,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033022,32,FLEN)
NAN_BOXED(2130060439,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033023,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477248,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477249,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477251,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477255,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477263,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477279,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477311,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477375,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477503,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679477759,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679478271,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679479295,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679481343,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679485439,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679493631,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679510015,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679542783,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679608319,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(679739391,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(680001535,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(680525823,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(681574399,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(683671551,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(683671552,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(685768704,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(686817280,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687341568,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687603712,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687734784,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687800320,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687833088,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687849472,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687857664,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687861760,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687863808,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687864832,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865344,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865600,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865728,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865792,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865824,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865840,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865848,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865852,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865854,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(687865855,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130065461,32,FLEN)
NAN_BOXED(4360911,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220416,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220417,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220419,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220423,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220431,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220447,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220479,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220543,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220671,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372220927,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372221439,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372222463,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372224511,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372228607,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372236799,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372253183,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372285951,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372351487,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372482559,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3372744703,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3373268991,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3374317567,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3376414719,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3376414720,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3378511872,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3379560448,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380084736,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380346880,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380477952,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380543488,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380576256,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380592640,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380600832,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380604928,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380606976,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608000,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608512,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608768,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608896,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608960,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380608992,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609008,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609016,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609020,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609022,32,FLEN)
NAN_BOXED(2130139616,32,FLEN)
NAN_BOXED(2151824610,32,FLEN)
NAN_BOXED(3380609023,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391296,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391297,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391299,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391303,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391311,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391327,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391359,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391423,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391551,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246391807,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246392319,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246393343,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246395391,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246399487,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246407679,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246424063,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246456831,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246522367,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246653439,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3246915583,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3247439871,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3248488447,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3250585599,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3250585600,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3252682752,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3253731328,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254255616,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254517760,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254648832,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254714368,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254747136,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254763520,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254771712,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254775808,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254777856,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254778880,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779392,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779648,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779776,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779840,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779872,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779888,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779896,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779900,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779902,32,FLEN)
NAN_BOXED(2130159678,32,FLEN)
NAN_BOXED(2151819244,32,FLEN)
NAN_BOXED(3254779903,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068416,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068417,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068419,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068423,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068431,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068447,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068479,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068543,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068671,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275068927,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275069439,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275070463,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275072511,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275076607,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275084799,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275101183,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275133951,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275199487,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275330559,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1275592703,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1276116991,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1277165567,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1279262719,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1279262720,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1281359872,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1282408448,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1282932736,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283194880,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283325952,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283391488,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283424256,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283440640,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283448832,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283452928,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283454976,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456000,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456512,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456768,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456896,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456960,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283456992,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457008,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457016,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457020,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457022,32,FLEN)
NAN_BOXED(2130260161,32,FLEN)
NAN_BOXED(4308920,32,FLEN)
NAN_BOXED(1283457023,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614080,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614081,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614083,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614087,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614095,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614111,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614143,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614207,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614335,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229614591,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229615103,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229616127,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229618175,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229622271,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229630463,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229646847,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229679615,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229745151,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3229876223,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3230138367,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3230662655,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3231711231,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3233808383,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3233808384,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3235905536,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3236954112,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237478400,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237740544,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237871616,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237937152,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237969920,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237986304,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237994496,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3237998592,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238000640,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238001664,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002176,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002432,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002560,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002624,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002656,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002672,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002680,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002684,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002686,32,FLEN)
NAN_BOXED(2130376767,32,FLEN)
NAN_BOXED(2151762020,32,FLEN)
NAN_BOXED(3238002687,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435457,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435459,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435463,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435471,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435487,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435519,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435583,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435711,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435967,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268436479,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268437503,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268439551,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268443647,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268451839,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268468223,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268500991,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268566527,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268697599,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268959743,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(269484031,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(270532607,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629759,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629760,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(274726912,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(275775488,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276299776,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276561920,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276692992,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276758528,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276791296,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276807680,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276815872,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276819968,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276822016,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823040,32,FLEN)
NAN_BOXED(2130440101,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823552,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
