
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b4 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b4)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f9, rs2==f26, rs3==f21, rd==f26,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f9; op2:f26; op3:f21; dest:f26; op1val:0x7aae79de; op2val:0x4290e842;
op3val:0x7f274f48; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f26, f9, f26, f21, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 == rd, rs1==f5, rs2==f5, rs3==f5, rd==f5,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f5; op2:f5; op3:f5; dest:f5; op1val:0x7aae79de; op2val:0x7aae79de;
op3val:0x7aae79de; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f5, f5, f5, f5, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f7, rs2==f7, rs3==f14, rd==f7,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f7; op2:f7; op3:f14; dest:f7; op1val:0x7aae79de; op2val:0x7aae79de;
op3val:0x7f274f48; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f7, f7, f7, f14, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f18, rs2==f13, rs3==f12, rd==f20,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f18; op2:f13; op3:f12; dest:f20; op1val:0x7aae79de; op2val:0x4290e842;
op3val:0x7f274f48; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f20, f18, f13, f12, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f10, rs2==f10, rs3==f10, rd==f17,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f10; op2:f10; op3:f10; dest:f17; op1val:0x7aae79de; op2val:0x7aae79de;
op3val:0x7aae79de; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f17, f10, f10, f10, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f15, rs2==f16, rs3==f13, rd==f15,fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f15; op2:f16; op3:f13; dest:f15; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x7f0229d2; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f15, f15, f16, f13, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rd == rs2 == rs3 != rs1, rs1==f2, rs2==f30, rs3==f30, rd==f30,fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f2; op2:f30; op3:f30; dest:f30; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x44757d05; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f30, f2, f30, f30, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f0, rs2==f0, rs3==f22, rd==f21,fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f0; op2:f0; op3:f22; dest:f21; op1val:0x7b26497d; op2val:0x7b26497d;
op3val:0x7f0229d2; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f21, f0, f0, f22, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f30, rs2==f23, rs3==f23, rd==f10,fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f23; op3:f23; dest:f10; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x44757d05; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f10, f30, f23, f23, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f28, rs2==f31, rs3==f28, rd==f28,fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f28; op2:f31; op3:f28; dest:f28; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x7b26497d; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f28, f28, f31, f28, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f24, rs2==f29, rs3==f24, rd==f3,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ee85e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f24; op2:f29; op3:f24; dest:f3; op1val:0x7c2125ab; op2val:0x426ee85e;
op3val:0x7c2125ab; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f3, f24, f29, f24, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f27, rs2==f19, rs3==f16, rd==f16,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ee85e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f27; op2:f19; op3:f16; dest:f16; op1val:0x7c2125ab; op2val:0x426ee85e;
op3val:0x7e2672cf; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f16, f27, f19, f16, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f12, rs2==f1, rs3==f19, rd==f0,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ee85e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f12; op2:f1; op3:f19; dest:f0; op1val:0x7c2125ab; op2val:0x426ee85e;
op3val:0x7e2672cf; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f0, f12, f1, f19, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f8, rs2==f20, rs3==f7, rd==f25,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ee85e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f8; op2:f20; op3:f7; dest:f25; op1val:0x7c2125ab; op2val:0x426ee85e;
op3val:0x7e2672cf; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f25, f8, f20, f7, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f22, rs2==f12, rs3==f15, rd==f9,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ee85e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f22; op2:f12; op3:f15; dest:f9; op1val:0x7c2125ab; op2val:0x426ee85e;
op3val:0x7e2672cf; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f9, f22, f12, f15, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f1, rs2==f18, rs3==f11, rd==f2,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x13634a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f1; op2:f18; op3:f11; dest:f2; op1val:0x7cb23547; op2val:0x4193634a;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f2, f1, f18, f11, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f3, rs2==f17, rs3==f6, rd==f31,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x13634a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f3; op2:f17; op3:f6; dest:f31; op1val:0x7cb23547; op2val:0x4193634a;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f3, f17, f6, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f17, rs2==f28, rs3==f26, rd==f11,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x13634a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f17; op2:f28; op3:f26; dest:f11; op1val:0x7cb23547; op2val:0x4193634a;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f11, f17, f28, f26, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f26, rs2==f22, rs3==f18, rd==f12,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x13634a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f26; op2:f22; op3:f18; dest:f12; op1val:0x7cb23547; op2val:0x4193634a;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f12, f26, f22, f18, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f6, rs2==f21, rs3==f27, rd==f23,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x13634a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f6; op2:f21; op3:f27; dest:f23; op1val:0x7cb23547; op2val:0x4193634a;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f23, f6, f21, f27, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f14, rs2==f3, rs3==f20, rd==f1,fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x547929 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f14; op2:f3; op3:f20; dest:f1; op1val:0x7ddfcc51; op2val:0x41547929;
op3val:0x7d481bf3; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f1, f14, f3, f20, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f31, rs2==f6, rs3==f17, rd==f18,fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x547929 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f31; op2:f6; op3:f17; dest:f18; op1val:0x7ddfcc51; op2val:0x41547929;
op3val:0x7d481bf3; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f18, f31, f6, f17, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f29, rs2==f4, rs3==f2, rd==f13,fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x547929 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f29; op2:f4; op3:f2; dest:f13; op1val:0x7ddfcc51; op2val:0x41547929;
op3val:0x7d481bf3; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f13, f29, f4, f2, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f23, rs2==f8, rs3==f9, rd==f29,fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x547929 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f23; op2:f8; op3:f9; dest:f29; op1val:0x7ddfcc51; op2val:0x41547929;
op3val:0x7d481bf3; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f29, f23, f8, f9, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f16, rs2==f14, rs3==f1, rd==f19,fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x547929 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f16; op2:f14; op3:f1; dest:f19; op1val:0x7ddfcc51; op2val:0x41547929;
op3val:0x7d481bf3; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f19, f16, f14, f1, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f13, rs2==f15, rs3==f4, rd==f22,fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09d19b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f13; op2:f15; op3:f4; dest:f22; op1val:0x7e1d454a; op2val:0xc009d19b;
op3val:0x7f34aad9; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f22, f13, f15, f4, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f20, rs2==f9, rs3==f29, rd==f27,fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09d19b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f20; op2:f9; op3:f29; dest:f27; op1val:0x7e1d454a; op2val:0xc009d19b;
op3val:0x7f34aad9; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f27, f20, f9, f29, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f19, rs2==f24, rs3==f25, rd==f6,fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09d19b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f19; op2:f24; op3:f25; dest:f6; op1val:0x7e1d454a; op2val:0xc009d19b;
op3val:0x7f34aad9; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f6, f19, f24, f25, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f11, rs2==f25, rs3==f3, rd==f14,fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09d19b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f11; op2:f25; op3:f3; dest:f14; op1val:0x7e1d454a; op2val:0xc009d19b;
op3val:0x7f34aad9; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f14, f11, f25, f3, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f25, rs2==f2, rs3==f31, rd==f4,fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x80 and fm2 == 0x09d19b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f25; op2:f2; op3:f31; dest:f4; op1val:0x7e1d454a; op2val:0xc009d19b;
op3val:0x7f34aad9; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f4, f25, f2, f31, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f4, rs2==f27, rs3==f0, rd==f24,fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5d2c9b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f4; op2:f27; op3:f0; dest:f24; op1val:0x7e20dccc; op2val:0xbedd2c9b;
op3val:0x7e257d51; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f24, f4, f27, f0, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f21,fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5d2c9b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f21; op2:f16; op3:f20; dest:f6; op1val:0x7e20dccc; op2val:0xbedd2c9b;
op3val:0x7e257d51; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f6, f21, f16, f20, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// rs2==f11,fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5d2c9b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f16; op2:f11; op3:f6; dest:f10; op1val:0x7e20dccc; op2val:0xbedd2c9b;
op3val:0x7e257d51; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f10, f16, f11, f6, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// rs3==f8,fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5d2c9b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f17; op2:f18; op3:f8; dest:f27; op1val:0x7e20dccc; op2val:0xbedd2c9b;
op3val:0x7e257d51; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f27, f17, f18, f8, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// rd==f8,fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5d2c9b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f16; op2:f23; op3:f10; dest:f8; op1val:0x7e20dccc; op2val:0xbedd2c9b;
op3val:0x7e257d51; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f8, f16, f23, f10, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x194070 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e56a477; op2val:0x3e994070;
op3val:0x7f2ff034; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x194070 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e56a477; op2val:0x3e994070;
op3val:0x7f2ff034; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x194070 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e56a477; op2val:0x3e994070;
op3val:0x7f2ff034; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x194070 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e56a477; op2val:0x3e994070;
op3val:0x7f2ff034; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x194070 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e56a477; op2val:0x3e994070;
op3val:0x7f2ff034; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1d6497 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5e2fb5; op2val:0xc01d6497;
op3val:0x7f389a90; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1d6497 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5e2fb5; op2val:0xc01d6497;
op3val:0x7f389a90; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1d6497 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5e2fb5; op2val:0xc01d6497;
op3val:0x7f389a90; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1d6497 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5e2fb5; op2val:0xc01d6497;
op3val:0x7f389a90; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1d6497 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5e2fb5; op2val:0xc01d6497;
op3val:0x7f389a90; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a34d7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67719b; op2val:0xc10a34d7;
op3val:0x7ee7981f; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a34d7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67719b; op2val:0xc10a34d7;
op3val:0x7ee7981f; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a34d7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67719b; op2val:0xc10a34d7;
op3val:0x7ee7981f; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a34d7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67719b; op2val:0xc10a34d7;
op3val:0x7ee7981f; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0a34d7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e67719b; op2val:0xc10a34d7;
op3val:0x7ee7981f; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x56dae4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e728772; op2val:0xc1d6dae4;
op3val:0x7eb8c9b0; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x56dae4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e728772; op2val:0xc1d6dae4;
op3val:0x7eb8c9b0; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x56dae4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e728772; op2val:0xc1d6dae4;
op3val:0x7eb8c9b0; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x56dae4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e728772; op2val:0xc1d6dae4;
op3val:0x7eb8c9b0; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x56dae4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e728772; op2val:0xc1d6dae4;
op3val:0x7eb8c9b0; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4c157d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81c09c; op2val:0xc14c157d;
op3val:0x7e6e0c34; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4c157d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81c09c; op2val:0xc14c157d;
op3val:0x7e6e0c34; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4c157d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81c09c; op2val:0xc14c157d;
op3val:0x7e6e0c34; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4c157d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81c09c; op2val:0xc14c157d;
op3val:0x7e6e0c34; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4c157d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e81c09c; op2val:0xc14c157d;
op3val:0x7e6e0c34; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4e9922 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ab269; op2val:0xc04e9922;
op3val:0x7dfee893; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4e9922 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ab269; op2val:0xc04e9922;
op3val:0x7dfee893; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4e9922 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ab269; op2val:0xc04e9922;
op3val:0x7dfee893; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4e9922 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ab269; op2val:0xc04e9922;
op3val:0x7dfee893; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4e9922 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ab269; op2val:0xc04e9922;
op3val:0x7dfee893; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d988d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb41f5c; op2val:0x3fcd988d;
op3val:0x7e3d5e30; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d988d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb41f5c; op2val:0x3fcd988d;
op3val:0x7e3d5e30; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d988d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb41f5c; op2val:0x3fcd988d;
op3val:0x7e3d5e30; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d988d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb41f5c; op2val:0x3fcd988d;
op3val:0x7e3d5e30; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4d988d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb41f5c; op2val:0x3fcd988d;
op3val:0x7e3d5e30; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5c3f35 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf0fd2; op2val:0xbfdc3f35;
op3val:0x7f0224b8; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5c3f35 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf0fd2; op2val:0xbfdc3f35;
op3val:0x7f0224b8; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5c3f35 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf0fd2; op2val:0xbfdc3f35;
op3val:0x7f0224b8; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5c3f35 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf0fd2; op2val:0xbfdc3f35;
op3val:0x7f0224b8; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5c3f35 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecf0fd2; op2val:0xbfdc3f35;
op3val:0x7f0224b8; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x489620 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0cddd; op2val:0x3f489620;
op3val:0x7edc64b6; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x489620 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0cddd; op2val:0x3f489620;
op3val:0x7edc64b6; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x489620 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0cddd; op2val:0x3f489620;
op3val:0x7edc64b6; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x489620 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0cddd; op2val:0x3f489620;
op3val:0x7edc64b6; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x489620 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0cddd; op2val:0x3f489620;
op3val:0x7edc64b6; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3509c8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed1a0c; op2val:0x3fb509c8;
op3val:0x7dc29c29; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3509c8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed1a0c; op2val:0x3fb509c8;
op3val:0x7dc29c29; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3509c8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed1a0c; op2val:0x3fb509c8;
op3val:0x7dc29c29; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3509c8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed1a0c; op2val:0x3fb509c8;
op3val:0x7dc29c29; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3509c8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed1a0c; op2val:0x3fb509c8;
op3val:0x7dc29c29; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x543d9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eef31b9; op2val:0x3ed43d9b;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x543d9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eef31b9; op2val:0x3ed43d9b;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x543d9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eef31b9; op2val:0x3ed43d9b;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x543d9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eef31b9; op2val:0x3ed43d9b;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x543d9b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eef31b9; op2val:0x3ed43d9b;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07e718 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f049a6e; op2val:0xc007e718;
op3val:0x7f399491; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07e718 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f049a6e; op2val:0xc007e718;
op3val:0x7f399491; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07e718 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f049a6e; op2val:0xc007e718;
op3val:0x7f399491; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07e718 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f049a6e; op2val:0xc007e718;
op3val:0x7f399491; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x07e718 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f049a6e; op2val:0xc007e718;
op3val:0x7f399491; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x570014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0f7e; op2val:0x3dd70014;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x570014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0f7e; op2val:0x3dd70014;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x570014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0f7e; op2val:0x3dd70014;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x570014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0f7e; op2val:0x3dd70014;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 0 and fe2 == 0x7b and fm2 == 0x570014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0f7e; op2val:0x3dd70014;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c7b65 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1304ef; op2val:0x3f8c7b65;
op3val:0x7df526ed; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c7b65 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1304ef; op2val:0x3f8c7b65;
op3val:0x7df526ed; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c7b65 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1304ef; op2val:0x3f8c7b65;
op3val:0x7df526ed; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c7b65 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1304ef; op2val:0x3f8c7b65;
op3val:0x7df526ed; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0c7b65 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1304ef; op2val:0x3f8c7b65;
op3val:0x7df526ed; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x1437ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18ad5a; op2val:0x3d9437ba;
op3val:0x7f34f350; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x1437ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18ad5a; op2val:0x3d9437ba;
op3val:0x7f34f350; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x1437ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18ad5a; op2val:0x3d9437ba;
op3val:0x7f34f350; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x1437ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18ad5a; op2val:0x3d9437ba;
op3val:0x7f34f350; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x1437ba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18ad5a; op2val:0x3d9437ba;
op3val:0x7f34f350; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a4a56 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f190d5e; op2val:0x3f8a4a56;
op3val:0x7dd52591; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a4a56 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f190d5e; op2val:0x3f8a4a56;
op3val:0x7dd52591; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a4a56 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f190d5e; op2val:0x3f8a4a56;
op3val:0x7dd52591; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a4a56 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f190d5e; op2val:0x3f8a4a56;
op3val:0x7dd52591; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x0a4a56 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f190d5e; op2val:0x3f8a4a56;
op3val:0x7dd52591; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 0 and fe2 == 0x82 and fm2 == 0x12fb98 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d27cc; op2val:0x4112fb98;
op3val:0x7eb89b2c; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 0 and fe2 == 0x82 and fm2 == 0x12fb98 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d27cc; op2val:0x4112fb98;
op3val:0x7eb89b2c; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 0 and fe2 == 0x82 and fm2 == 0x12fb98 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d27cc; op2val:0x4112fb98;
op3val:0x7eb89b2c; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 0 and fe2 == 0x82 and fm2 == 0x12fb98 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d27cc; op2val:0x4112fb98;
op3val:0x7eb89b2c; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 0 and fe2 == 0x82 and fm2 == 0x12fb98 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d27cc; op2val:0x4112fb98;
op3val:0x7eb89b2c; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48da2e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9930; op2val:0x3f48da2e;
op3val:0x7e657849; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48da2e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9930; op2val:0x3f48da2e;
op3val:0x7e657849; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48da2e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9930; op2val:0x3f48da2e;
op3val:0x7e657849; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48da2e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9930; op2val:0x3f48da2e;
op3val:0x7e657849; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48da2e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9930; op2val:0x3f48da2e;
op3val:0x7e657849; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bfdd2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf90f; op2val:0x3f7bfdd2;
op3val:0x7dade265; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bfdd2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf90f; op2val:0x3f7bfdd2;
op3val:0x7dade265; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bfdd2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf90f; op2val:0x3f7bfdd2;
op3val:0x7dade265; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bfdd2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf90f; op2val:0x3f7bfdd2;
op3val:0x7dade265; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bfdd2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf90f; op2val:0x3f7bfdd2;
op3val:0x7dade265; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3e843a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351fde; op2val:0x3ebe843a;
op3val:0x7ef934ca; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3e843a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351fde; op2val:0x3ebe843a;
op3val:0x7ef934ca; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3e843a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351fde; op2val:0x3ebe843a;
op3val:0x7ef934ca; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3e843a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351fde; op2val:0x3ebe843a;
op3val:0x7ef934ca; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3e843a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351fde; op2val:0x3ebe843a;
op3val:0x7ef934ca; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01f3de and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c9ff5; op2val:0xbf81f3de;
op3val:0x7f278095; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01f3de and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c9ff5; op2val:0xbf81f3de;
op3val:0x7f278095; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01f3de and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c9ff5; op2val:0xbf81f3de;
op3val:0x7f278095; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01f3de and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c9ff5; op2val:0xbf81f3de;
op3val:0x7f278095; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01f3de and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c9ff5; op2val:0xbf81f3de;
op3val:0x7f278095; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7aae79de; op2val:0x4290e842;
op3val:0x7f274f48; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7aae79de; op2val:0x4290e842;
op3val:0x7f274f48; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7aae79de; op2val:0x4290e842;
op3val:0x7f274f48; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 0 and fe2 == 0x85 and fm2 == 0x10e842 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7aae79de; op2val:0x4290e842;
op3val:0x7f274f48; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x7f0229d2; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x7f0229d2; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x7f0229d2; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 64, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x7f0229d2; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 96, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 0 and fe2 == 0x88 and fm2 == 0x757d05 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b26497d; op2val:0x44757d05;
op3val:0x7f0229d2; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 128, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ee85e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c2125ab; op2val:0x426ee85e;
op3val:0x7e2672cf; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 0 and fe2 == 0x84 and fm2 == 0x6ee85e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c2125ab; op2val:0x426ee85e;
op3val:0x7e2672cf; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 32, 0, x3, 450*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(1116792898,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(1116792898,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(1114564702,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(1114564702,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(1114564702,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(1114564702,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(1114564702,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(1100178250,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(1100178250,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(1100178250,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(1100178250,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(1100178250,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(1096055081,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(1096055081,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(1096055081,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(1096055081,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(1096055081,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3221868955,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3221868955,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3221868955,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3221868955,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3221868955,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3202165915,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3202165915,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3202165915,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3202165915,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3202165915,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(1050230896,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(1050230896,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(1050230896,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(1050230896,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(1050230896,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3223151767,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3223151767,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3223151767,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3223151767,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3223151767,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3238671575,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3238671575,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3238671575,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3238671575,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3238671575,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3252083428,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3252083428,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3252083428,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3252083428,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3252083428,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3242988925,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3242988925,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3242988925,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3242988925,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3242988925,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3226376482,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3226376482,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3226376482,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3226376482,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3226376482,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(1070438541,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(1070438541,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(1070438541,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(1070438541,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(1070438541,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3218882357,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3218882357,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3218882357,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3218882357,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3218882357,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(1061721632,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(1061721632,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(1061721632,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(1061721632,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(1061721632,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(1068829128,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(1068829128,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(1068829128,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(1068829128,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(1068829128,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(1054096795,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(1054096795,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(1054096795,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(1054096795,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(1054096795,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3221743384,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3221743384,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3221743384,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3221743384,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3221743384,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(1037500436,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(1037500436,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(1037500436,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(1037500436,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(1037500436,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(1066171237,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(1066171237,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(1066171237,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(1066171237,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(1066171237,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(1033123770,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(1033123770,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(1033123770,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(1033123770,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(1033123770,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(1066027606,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(1066027606,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(1066027606,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(1066027606,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(1066027606,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(1091763096,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(1091763096,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(1091763096,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(1091763096,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(1091763096,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(1061739054,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(1061739054,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(1061739054,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(1061739054,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(1061739054,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(1065090514,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(1065090514,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(1065090514,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(1065090514,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(1065090514,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(1052673082,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(1052673082,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(1052673082,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(1052673082,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(1052673082,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3212964830,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3212964830,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3212964830,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3212964830,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3212964830,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(1116792898,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(1116792898,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(1116792898,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(1116792898,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(1148550405,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(1114564702,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(1114564702,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
