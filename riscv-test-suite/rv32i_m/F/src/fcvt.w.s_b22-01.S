
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:26 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fcvt.w.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fcvt.w.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fcvt.w.s_b22 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fcvt.w.s_b22)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x8,test_dataset_0)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1==f25, rd==x13,fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f25; dest:x13; op1val:0x3e4923b8; valaddr_reg:x8;
val_offset:0*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x13, f25, dyn, 0, 0, x8, 0*FLEN/8, x15, x2, x3,FLREG)

inst_1:// rs1==f2, rd==x19,fs1 == 0 and fe1 == 0x7d and fm1 == 0x36e5d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f2; dest:x19; op1val:0x3eb6e5d6; valaddr_reg:x8;
val_offset:1*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x19, f2, dyn, 0, 0, x8, 1*FLEN/8, x15, x2, x3,FLREG)

inst_2:// rs1==f3, rd==x1,fs1 == 0 and fe1 == 0x7e and fm1 == 0x49fee5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f3; dest:x1; op1val:0x3f49fee5; valaddr_reg:x8;
val_offset:2*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x1, f3, dyn, 0, 0, x8, 2*FLEN/8, x15, x2, x3,FLREG)

inst_3:// rs1==f14, rd==x12,fs1 == 0 and fe1 == 0x7f and fm1 == 0x1a616d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f14; dest:x12; op1val:0x3f9a616d; valaddr_reg:x8;
val_offset:3*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x12, f14, dyn, 0, 0, x8, 3*FLEN/8, x15, x2, x3,FLREG)

inst_4:// rs1==f20, rd==x20,fs1 == 0 and fe1 == 0x80 and fm1 == 0x681ae9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f20; dest:x20; op1val:0x40681ae9; valaddr_reg:x8;
val_offset:4*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x20, f20, dyn, 0, 0, x8, 4*FLEN/8, x15, x2, x3,FLREG)

inst_5:// rs1==f13, rd==x28,fs1 == 0 and fe1 == 0x81 and fm1 == 0x696b5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f13; dest:x28; op1val:0x40e96b5c; valaddr_reg:x8;
val_offset:5*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x28, f13, dyn, 0, 0, x8, 5*FLEN/8, x15, x2, x3,FLREG)

inst_6:// rs1==f28, rd==x9,fs1 == 0 and fe1 == 0x83 and fm1 == 0x148266 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f28; dest:x9; op1val:0x41948266; valaddr_reg:x8;
val_offset:6*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x9, f28, dyn, 0, 0, x8, 6*FLEN/8, x15, x2, x3,FLREG)

inst_7:// rs1==f10, rd==x7,fs1 == 0 and fe1 == 0x84 and fm1 == 0x42a54b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f10; dest:x7; op1val:0x4242a54b; valaddr_reg:x8;
val_offset:7*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x7, f10, dyn, 0, 0, x8, 7*FLEN/8, x15, x2, x3,FLREG)

inst_8:// rs1==f27, rd==x5,fs1 == 0 and fe1 == 0x85 and fm1 == 0x29f475 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f27; dest:x5; op1val:0x42a9f475; valaddr_reg:x8;
val_offset:8*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x5, f27, dyn, 0, 0, x8, 8*FLEN/8, x15, x2, x3,FLREG)

inst_9:// rs1==f8, rd==x16,fs1 == 0 and fe1 == 0x88 and fm1 == 0x7f8f2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f8; dest:x16; op1val:0x447f8f2d; valaddr_reg:x8;
val_offset:9*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x16, f8, dyn, 0, 0, x8, 9*FLEN/8, x15, x2, x3,FLREG)

inst_10:// rs1==f22, rd==x4,fs1 == 0 and fe1 == 0x89 and fm1 == 0x05b406 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f22; dest:x4; op1val:0x4485b406; valaddr_reg:x8;
val_offset:10*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x4, f22, dyn, 0, 0, x8, 10*FLEN/8, x15, x2, x3,FLREG)

inst_11:// rs1==f31, rd==x10,fs1 == 0 and fe1 == 0x8a and fm1 == 0x6e19c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x10; op1val:0x456e19c1; valaddr_reg:x8;
val_offset:11*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x10, f31, dyn, 0, 0, x8, 11*FLEN/8, x15, x2, x3,FLREG)

inst_12:// rs1==f15, rd==x31,fs1 == 0 and fe1 == 0x8b and fm1 == 0x4d3559 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f15; dest:x31; op1val:0x45cd3559; valaddr_reg:x8;
val_offset:12*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f15, dyn, 0, 0, x8, 12*FLEN/8, x15, x2, x3,FLREG)

inst_13:// rs1==f16, rd==x23,fs1 == 0 and fe1 == 0x8c and fm1 == 0x30d877 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f16; dest:x23; op1val:0x4630d877; valaddr_reg:x8;
val_offset:13*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x23, f16, dyn, 0, 0, x8, 13*FLEN/8, x15, x2, x3,FLREG)

inst_14:// rs1==f7, rd==x14,fs1 == 0 and fe1 == 0x8e and fm1 == 0x56653f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f7; dest:x14; op1val:0x4756653f; valaddr_reg:x8;
val_offset:14*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x14, f7, dyn, 0, 0, x8, 14*FLEN/8, x15, x2, x3,FLREG)

inst_15:// rs1==f0, rd==x17,fs1 == 0 and fe1 == 0x8f and fm1 == 0x3a7971 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f0; dest:x17; op1val:0x47ba7971; valaddr_reg:x8;
val_offset:15*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x17, f0, dyn, 0, 0, x8, 15*FLEN/8, x15, x2, x3,FLREG)

inst_16:// rs1==f18, rd==x18,fs1 == 0 and fe1 == 0x90 and fm1 == 0x57ca4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f18; dest:x18; op1val:0x4857ca4f; valaddr_reg:x8;
val_offset:16*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x18, f18, dyn, 0, 0, x8, 16*FLEN/8, x15, x2, x3,FLREG)

inst_17:// rs1==f24, rd==x24,fs1 == 0 and fe1 == 0x91 and fm1 == 0x54b761 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f24; dest:x24; op1val:0x48d4b761; valaddr_reg:x8;
val_offset:17*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x24, f24, dyn, 0, 0, x8, 17*FLEN/8, x15, x2, x3,FLREG)

inst_18:// rs1==f4, rd==x26,fs1 == 0 and fe1 == 0x92 and fm1 == 0x11056d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f4; dest:x26; op1val:0x4911056d; valaddr_reg:x8;
val_offset:18*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x26, f4, dyn, 0, 0, x8, 18*FLEN/8, x15, x2, x3,FLREG)

inst_19:// rs1==f21, rd==x6,fs1 == 0 and fe1 == 0x94 and fm1 == 0x7dbfb7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f21; dest:x6; op1val:0x4a7dbfb7; valaddr_reg:x8;
val_offset:19*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x6, f21, dyn, 0, 0, x8, 19*FLEN/8, x15, x2, x3,FLREG)

inst_20:// rs1==f6, rd==x29,fs1 == 0 and fe1 == 0x95 and fm1 == 0x7c14e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f6; dest:x29; op1val:0x4afc14e9; valaddr_reg:x8;
val_offset:20*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x29, f6, dyn, 0, 0, x8, 20*FLEN/8, x15, x2, x3,FLREG)

inst_21:// rs1==f17, rd==x0,fs1 == 0 and fe1 == 0x96 and fm1 == 0x4e817e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f17; dest:x0; op1val:0x4b4e817e; valaddr_reg:x8;
val_offset:21*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x0, f17, dyn, 0, 0, x8, 21*FLEN/8, x15, x2, x3,FLREG)

inst_22:// rs1==f11, rd==x25,fs1 == 0 and fe1 == 0x98 and fm1 == 0x0084e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f11; dest:x25; op1val:0x4c0084e1; valaddr_reg:x8;
val_offset:22*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x25, f11, dyn, 0, 0, x8, 22*FLEN/8, x15, x2, x3,FLREG)

inst_23:// rs1==f26, rd==x11,fs1 == 0 and fe1 == 0x99 and fm1 == 0x112603 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f26; dest:x11; op1val:0x4c912603; valaddr_reg:x8;
val_offset:23*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x11, f26, dyn, 0, 0, x8, 23*FLEN/8, x15, x2, x3,FLREG)

inst_24:// rs1==f19, rd==x27,fs1 == 0 and fe1 == 0x9d and fm1 == 0x72f818 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f19; dest:x27; op1val:0x4ef2f818; valaddr_reg:x8;
val_offset:24*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x27, f19, dyn, 0, 0, x8, 24*FLEN/8, x15, x2, x3,FLREG)
RVTEST_VALBASEUPD(x5,test_dataset_1)

inst_25:// rs1==f5, rd==x21,fs1 == 0 and fe1 == 0x9f and fm1 == 0x46450c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f5; dest:x21; op1val:0x4fc6450c; valaddr_reg:x5;
val_offset:0*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x21, f5, dyn, 0, 0, x5, 0*FLEN/8, x6, x2, x3,FLREG)

inst_26:// rs1==f1, rd==x15,fs1 == 0 and fe1 == 0xa0 and fm1 == 0x37cfdc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f1; dest:x15; op1val:0x5037cfdc; valaddr_reg:x5;
val_offset:1*FLEN/8; rmval:dyn; correctval:0; testreg:x3;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x15, f1, dyn, 0, 0, x5, 1*FLEN/8, x6, x2, x3,FLREG)

inst_27:// rs1==f12, rd==x22,fs1 == 1 and fe1 == 0x29 and fm1 == 0x4ad269 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f12; dest:x22; op1val:0x94cad269; valaddr_reg:x5;
val_offset:2*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x22, f12, dyn, 0, 0, x5, 2*FLEN/8, x6, x2, x4,FLREG)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:// rs1==f23, rd==x30,fs1 == 1 and fe1 == 0x82 and fm1 == 0x53a4fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f23; dest:x30; op1val:0xc153a4fc; valaddr_reg:x5;
val_offset:3*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x30, f23, dyn, 0, 0, x5, 3*FLEN/8, x6, x1, x4,FLREG)

inst_29:// rs1==f29, rd==x3,fs1 == 1 and fe1 == 0x86 and fm1 == 0x1fffe4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f29; dest:x3; op1val:0xc31fffe4; valaddr_reg:x5;
val_offset:4*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x3, f29, dyn, 0, 0, x5, 4*FLEN/8, x6, x1, x4,FLREG)

inst_30:// rs1==f9, rd==x8,fs1 == 1 and fe1 == 0x87 and fm1 == 0x79f5e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f9; dest:x8; op1val:0xc3f9f5e7; valaddr_reg:x5;
val_offset:5*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x8, f9, dyn, 0, 0, x5, 5*FLEN/8, x6, x1, x4,FLREG)

inst_31:// rs1==f30, rd==x2,fs1 == 1 and fe1 == 0x8d and fm1 == 0x244d9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f30; dest:x2; op1val:0xc6a44d9a; valaddr_reg:x5;
val_offset:6*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x2, f30, dyn, 0, 0, x5, 6*FLEN/8, x6, x1, x4,FLREG)

inst_32:// fs1 == 1 and fe1 == 0x93 and fm1 == 0x624882 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xc9e24882; valaddr_reg:x5;
val_offset:7*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 7*FLEN/8, x6, x1, x4,FLREG)

inst_33:// fs1 == 1 and fe1 == 0x97 and fm1 == 0x05aa55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xcb85aa55; valaddr_reg:x5;
val_offset:8*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 8*FLEN/8, x6, x1, x4,FLREG)

inst_34:// fs1 == 1 and fe1 == 0x9a and fm1 == 0x7872c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xcd7872c3; valaddr_reg:x5;
val_offset:9*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 9*FLEN/8, x6, x1, x4,FLREG)

inst_35:// fs1 == 1 and fe1 == 0x9b and fm1 == 0x26c422 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xcda6c422; valaddr_reg:x5;
val_offset:10*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 10*FLEN/8, x6, x1, x4,FLREG)

inst_36:// fs1 == 1 and fe1 == 0x9c and fm1 == 0x2edddb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xce2edddb; valaddr_reg:x5;
val_offset:11*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 11*FLEN/8, x6, x1, x4,FLREG)

inst_37:// fs1 == 1 and fe1 == 0x9e and fm1 == 0x283d12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xcf283d12; valaddr_reg:x5;
val_offset:12*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 12*FLEN/8, x6, x1, x4,FLREG)

inst_38:// fs1 == 1 and fe1 == 0xa1 and fm1 == 0x0851ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xd08851ba; valaddr_reg:x5;
val_offset:13*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 13*FLEN/8, x6, x1, x4,FLREG)

inst_39:// fs1 == 1 and fe1 == 0xb6 and fm1 == 0x403ed1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0xdb403ed1; valaddr_reg:x5;
val_offset:14*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 14*FLEN/8, x6, x1, x4,FLREG)

inst_40:// fs1 == 0 and fe1 == 0x96 and fm1 == 0x4e817e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fcvt.w.s ; op1:f31; dest:x31; op1val:0x4b4e817e; valaddr_reg:x5;
val_offset:15*FLEN/8; rmval:dyn; correctval:0; testreg:x4;
fcsr_val:0*/
TEST_FPID_OP(fcvt.w.s, x31, f31, dyn, 0, 0, x5, 15*FLEN/8, x6, x1, x4,FLREG)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1044980664,32,FLEN)
NAN_BOXED(1052173782,32,FLEN)
NAN_BOXED(1061813989,32,FLEN)
NAN_BOXED(1067082093,32,FLEN)
NAN_BOXED(1080564457,32,FLEN)
NAN_BOXED(1089039196,32,FLEN)
NAN_BOXED(1100251750,32,FLEN)
NAN_BOXED(1111663947,32,FLEN)
NAN_BOXED(1118434421,32,FLEN)
NAN_BOXED(1149210413,32,FLEN)
NAN_BOXED(1149613062,32,FLEN)
NAN_BOXED(1164843457,32,FLEN)
NAN_BOXED(1171076441,32,FLEN)
NAN_BOXED(1177606263,32,FLEN)
NAN_BOXED(1196844351,32,FLEN)
NAN_BOXED(1203403121,32,FLEN)
NAN_BOXED(1213712975,32,FLEN)
NAN_BOXED(1221900129,32,FLEN)
NAN_BOXED(1225852269,32,FLEN)
NAN_BOXED(1249755063,32,FLEN)
NAN_BOXED(1258034409,32,FLEN)
NAN_BOXED(1263436158,32,FLEN)
NAN_BOXED(1275102433,32,FLEN)
NAN_BOXED(1284580867,32,FLEN)
NAN_BOXED(1324546072,32,FLEN)
test_dataset_1:
NAN_BOXED(1338393868,32,FLEN)
NAN_BOXED(1345834972,32,FLEN)
NAN_BOXED(2496320105,32,FLEN)
NAN_BOXED(3243484412,32,FLEN)
NAN_BOXED(3273654244,32,FLEN)
NAN_BOXED(3287938535,32,FLEN)
NAN_BOXED(3332656538,32,FLEN)
NAN_BOXED(3387050114,32,FLEN)
NAN_BOXED(3414534741,32,FLEN)
NAN_BOXED(3447222979,32,FLEN)
NAN_BOXED(3450258466,32,FLEN)
NAN_BOXED(3459177947,32,FLEN)
NAN_BOXED(3475520786,32,FLEN)
NAN_BOXED(3498594746,32,FLEN)
NAN_BOXED(3678420689,32,FLEN)
NAN_BOXED(1263436158,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x2_1:
    .fill 56*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_0:
    .fill 26*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
