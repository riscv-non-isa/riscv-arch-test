
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Tue Jul 23 02:30:04 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/pager/Desktop/work/Zfh/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/pager/Desktop/work/Zfh/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32H/rv32h_fcvt.s.h.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fcvt.s.h instruction of the RISC-V RV32F_Zicsr_Zfh,RV64F_Zicsr_Zfh extension for the fcvt.s.h_b1 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr_Zfh,RV64IF_Zicsr_Zfh")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*Zfh.*);def TEST_CASE_1=True;",fcvt.s.h_b1)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// fs1 == 0 and fe1 == 0x0 and fm1 == 0x00 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x0; valaddr_reg:x3;
val_offset:0*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// fs1 == 1 and fe1 == 0x0 and fm1 == 0x00 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x8000; valaddr_reg:x3;
val_offset:1*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 1*FLEN/8, x4, x1, x2)

inst_2:
// fs1 == 0 and fe1 == 0x0 and fm1 == 0x01 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x1; valaddr_reg:x3;
val_offset:2*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_3:
// fs1 == 1 and fe1 == 0x0 and fm1 == 0x01 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x8001; valaddr_reg:x3;
val_offset:3*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_4:
// fs1 == 0 and fe1 == 0x0 and fm1 == 0x02 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x2; valaddr_reg:x3;
val_offset:4*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_5:
// fs1 == 1 and fe1 == 0xd and fm1 == 0x7e and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0xb47e; valaddr_reg:x3;
val_offset:5*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 5*FLEN/8, x4, x1, x2)

inst_6:
// fs1 == 0 and fe1 == 0x0 and fm1 == 0xff and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0xff; valaddr_reg:x3;
val_offset:6*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_7:
// fs1 == 1 and fe1 == 0x0 and fm1 == 0xff and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x80ff; valaddr_reg:x3;
val_offset:7*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 7*FLEN/8, x4, x1, x2)

inst_8:
// fs1 == 0 and fe1 == 0x1 and fm1 == 0x00 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x400; valaddr_reg:x3;
val_offset:8*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_9:
// fs1 == 1 and fe1 == 0x1 and fm1 == 0x00 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x8400; valaddr_reg:x3;
val_offset:9*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_10:
// fs1 == 0 and fe1 == 0x1 and fm1 == 0x01 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x401; valaddr_reg:x3;
val_offset:10*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_11:
// fs1 == 1 and fe1 == 0x1 and fm1 == 0x55 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x8455; valaddr_reg:x3;
val_offset:11*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 11*FLEN/8, x4, x1, x2)

inst_12:
// fs1 == 0 and fe1 == 0xe and fm1 == 0xff and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x38ff; valaddr_reg:x3;
val_offset:12*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_13:
// fs1 == 1 and fe1 == 0xe and fm1 == 0xff and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0xb8ff; valaddr_reg:x3;
val_offset:13*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 13*FLEN/8, x4, x1, x2)

inst_14:
// fs1 == 0 and fe1 == 0xf and fm1 == 0x00 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x3c00; valaddr_reg:x3;
val_offset:14*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_15:
// fs1 == 1 and fe1 == 0xf and fm1 == 0x00 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0xbc00; valaddr_reg:x3;
val_offset:15*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_16:
// fs1 == 0 and fe1 == 0xf and fm1 == 0x01 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0x3c01; valaddr_reg:x3;
val_offset:16*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_17:
// fs1 == 1 and fe1 == 0xf and fm1 == 0xaa and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0xbcaa; valaddr_reg:x3;
val_offset:17*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 17*FLEN/8, x4, x1, x2)

inst_18:
// fs1 == 1 and fe1 == 0xf and fm1 == 0x55 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffff  
/* opcode: fcvt.s.h ; op1:f30; dest:f31; op1val:0xbc55; valaddr_reg:x3;
val_offset:18*FLEN/8; rmval:dyn; correctval:??; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP(fcvt.s.h, f31, f30, 0, 0, x3, 18*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,16,FLEN)
NAN_BOXED(32768,16,FLEN)
NAN_BOXED(1,16,FLEN)
NAN_BOXED(32769,16,FLEN)
NAN_BOXED(2,16,FLEN)
NAN_BOXED(46206,16,FLEN)
NAN_BOXED(255,16,FLEN)
NAN_BOXED(33023,16,FLEN)
NAN_BOXED(1024,16,FLEN)
NAN_BOXED(33792,16,FLEN)
NAN_BOXED(1025,16,FLEN)
NAN_BOXED(33877,16,FLEN)
NAN_BOXED(14591,16,FLEN)
NAN_BOXED(47359,16,FLEN)
NAN_BOXED(15360,16,FLEN)
NAN_BOXED(48128,16,FLEN)
NAN_BOXED(15361,16,FLEN)
NAN_BOXED(48298,16,FLEN)
NAN_BOXED(48213,16,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 38*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
