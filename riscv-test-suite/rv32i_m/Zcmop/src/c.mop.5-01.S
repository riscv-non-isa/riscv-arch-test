
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Mon Oct 16 22:40:56 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/zcmop.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.mop.5 instruction of the RISC-V RV32CZcmop extension for the c.mop.5 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32ICZcmop")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*C.*Zcmop.*);def TEST_CASE_1=True;",c.mop.5)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// imm_val == 21, 
// opcode:c.mop.5; immval:0x15
TEST_CMOP_OP(c.mop.5, x5, 0x15, x1, x2, 0*XLEN/8)

inst_1:
// imm_val == 1, 
// opcode:c.mop.5; immval:0x1
TEST_CMOP_OP(c.mop.5, x5, 0x1, x1, x2, 1*XLEN/8)

inst_2:
// imm_val == -2, 
// opcode:c.mop.5; immval:0x2
TEST_CMOP_OP(c.mop.5, x5, 0x2, x1, x2, 2*XLEN/8)

inst_3:
// imm_val == 31, 
// opcode:c.mop.5; immval:0x1f
TEST_CMOP_OP(c.mop.5, x5, 0x1f, x1, x2, 3*XLEN/8)

inst_4:
// imm_val == 4, 
// opcode:c.mop.5; immval:0x4
TEST_CMOP_OP(c.mop.5, x5, 0x4, x1, x2, 4*XLEN/8)

inst_5:
// imm_val == 8, 
// opcode:c.mop.5; immval:0x8
TEST_CMOP_OP(c.mop.5, x5, 0x8, x1, x2, 5*XLEN/8)

inst_6:
// imm_val == 16, 
// opcode:c.mop.5; immval:0x10
TEST_CMOP_OP(c.mop.5, x5, 0x10, x1, x2, 6*XLEN/8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 7*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
