
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Mon Oct 30 21:59:55 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv32zabha.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the amocas.h instruction of the RISC-V RV32Zacas extension for the amocas.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZacas")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*A.*Zabha.*Zacas.*);def TEST_CASE_1=True;",amocas.h)

RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x22, rd==x29, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: amocas.h ; dest:x29; addr:x24; src:x22; swap_val:-0x6; swreg:x3; 0*XLEN/8
TEST_CAS_OP(amocas.h, x29, x24, x22, -0x6, x3, 0*XLEN/8);

inst_1:
// rs1==x27, rs2==x9, rd==x24, rs1_val == (2**(xlen-1)-1), rs2_val == 8, rs1_val == 2147483647
// opcode: amocas.h ; dest:x24; addr:x27; src:x9; swap_val:0x8; swreg:x3; 1*XLEN/8
TEST_CAS_OP(amocas.h, x24, x27, x9, 0x8, x3, 1*XLEN/8);

inst_2:
// rs1==x21, rs2==x5, rd==x10, rs1_val == 0, rs2_val == 524288
// opcode: amocas.h ; dest:x10; addr:x21; src:x5; swap_val:0x80000; swreg:x3; 2*XLEN/8
TEST_CAS_OP(amocas.h, x10, x21, x5, 0x80000, x3, 2*XLEN/8);

inst_3:
// rs1==x31, rs2==x13, rd==x12, rs1_val == 1, 
// opcode: amocas.h ; dest:x12; addr:x31; src:x13; swap_val:-0x4; swreg:x3; 3*XLEN/8
TEST_CAS_OP(amocas.h, x12, x31, x13, -0x4, x3, 3*XLEN/8);

inst_4:
// rs1==x4, rs2==x24, rd==x30, rs2_val == (-2**(xlen-1)), rs1_val == 131072, rs2_val == -2147483648
// opcode: amocas.h ; dest:x30; addr:x4; src:x24; swap_val:-0x80000000; swreg:x3; 4*XLEN/8
TEST_CAS_OP(amocas.h, x30, x4, x24, -0x80000000, x3, 4*XLEN/8);

inst_5:
// rs1==x23, rs2==x2, rd==x8, rs2_val == (2**(xlen-1)-1), rs1_val == -8193, rs2_val == 2147483647
// opcode: amocas.h ; dest:x8; addr:x23; src:x2; swap_val:0x7fffffff; swreg:x3; 5*XLEN/8
TEST_CAS_OP(amocas.h, x8, x23, x2, 0x7fffffff, x3, 5*XLEN/8);

inst_6:
// rs1==x9, rs2==x29, rd==x14, rs2_val == 0, rs1_val == -17
// opcode: amocas.h ; dest:x14; addr:x9; src:x29; swap_val:0x0; swreg:x3; 6*XLEN/8
TEST_CAS_OP(amocas.h, x14, x9, x29, 0x0, x3, 6*XLEN/8);

inst_7:
// rs1==x14, rs2==x10, rd==x23, rs2_val == -2, rs1_val == 536870912
// opcode: amocas.h ; dest:x23; addr:x14; src:x10; swap_val:-0x2; swreg:x3; 7*XLEN/8
TEST_CAS_OP(amocas.h, x23, x14, x10, -0x2, x3, 7*XLEN/8);

inst_8:
// rs1==x25, rs2==x1, rd==x5, rs2_val == -3, rs1_val == 134217728
// opcode: amocas.h ; dest:x5; addr:x25; src:x1; swap_val:-0x3; swreg:x3; 8*XLEN/8
TEST_CAS_OP(amocas.h, x5, x25, x1, -0x3, x3, 8*XLEN/8);

inst_9:
// rs1==x15, rs2==x17, rd==x0, rs2_val == -5, rs1_val == 1024
// opcode: amocas.h ; dest:x0; addr:x15; src:x17; swap_val:-0x5; swreg:x3; 9*XLEN/8
TEST_CAS_OP(amocas.h, x0, x15, x17, -0x5, x3, 9*XLEN/8);

inst_10:
// rs1==x11, rs2==x19, rd==x15, rs2_val == -9, rs1_val == -65
// opcode: amocas.h ; dest:x15; addr:x11; src:x19; swap_val:-0x9; swreg:x3; 10*XLEN/8
TEST_CAS_OP(amocas.h, x15, x11, x19, -0x9, x3, 10*XLEN/8);

inst_11:
// rs1==x10, rs2==x6, rd==x4, rs2_val == -17, rs1_val == -1431655766
// opcode: amocas.h ; dest:x4; addr:x10; src:x6; swap_val:-0x11; swreg:x3; 11*XLEN/8
TEST_CAS_OP(amocas.h, x4, x10, x6, -0x11, x3, 11*XLEN/8);

inst_12:
// rs1==x2, rs2==x23, rd==x26, rs2_val == -33, 
// opcode: amocas.h ; dest:x26; addr:x2; src:x23; swap_val:-0x21; swreg:x3; 12*XLEN/8
TEST_CAS_OP(amocas.h, x26, x2, x23, -0x21, x3, 12*XLEN/8);

inst_13:
// rs1==x16, rs2==x30, rd==x11, rs2_val == -65, 
// opcode: amocas.h ; dest:x11; addr:x16; src:x30; swap_val:-0x41; swreg:x3; 13*XLEN/8
TEST_CAS_OP(amocas.h, x11, x16, x30, -0x41, x3, 13*XLEN/8);
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x12, rs2==x26, rd==x3, rs2_val == -129, 
// opcode: amocas.h ; dest:x3; addr:x12; src:x26; swap_val:-0x81; swreg:x4; 0*XLEN/8
TEST_CAS_OP(amocas.h, x3, x12, x26, -0x81, x4, 0*XLEN/8);

inst_15:
// rs1==x6, rs2==x3, rd==x19, rs2_val == -257, rs1_val == 524288
// opcode: amocas.h ; dest:x19; addr:x6; src:x3; swap_val:-0x101; swreg:x4; 1*XLEN/8
TEST_CAS_OP(amocas.h, x19, x6, x3, -0x101, x4, 1*XLEN/8);

inst_16:
// rs1==x13, rs2==x18, rd==x7, rs2_val == -513, rs1_val == 8388608
// opcode: amocas.h ; dest:x7; addr:x13; src:x18; swap_val:-0x201; swreg:x4; 2*XLEN/8
TEST_CAS_OP(amocas.h, x7, x13, x18, -0x201, x4, 2*XLEN/8);

inst_17:
// rs1==x19, rs2==x11, rd==x13, rs2_val == -1025, 
// opcode: amocas.h ; dest:x13; addr:x19; src:x11; swap_val:-0x401; swreg:x4; 3*XLEN/8
TEST_CAS_OP(amocas.h, x13, x19, x11, -0x401, x4, 3*XLEN/8);

inst_18:
// rs1==x26, rs2==x7, rd==x22, rs2_val == -2049, rs1_val == -9
// opcode: amocas.h ; dest:x22; addr:x26; src:x7; swap_val:-0x801; swreg:x4; 4*XLEN/8
TEST_CAS_OP(amocas.h, x22, x26, x7, -0x801, x4, 4*XLEN/8);

inst_19:
// rs1==x22, rs2==x21, rd==x27, rs2_val == -4097, rs1_val == -131073
// opcode: amocas.h ; dest:x27; addr:x22; src:x21; swap_val:-0x1001; swreg:x4; 5*XLEN/8
TEST_CAS_OP(amocas.h, x27, x22, x21, -0x1001, x4, 5*XLEN/8);

inst_20:
// rs1==x29, rs2==x14, rd==x21, rs2_val == -8193, rs1_val == 16384
// opcode: amocas.h ; dest:x21; addr:x29; src:x14; swap_val:-0x2001; swreg:x4; 6*XLEN/8
TEST_CAS_OP(amocas.h, x21, x29, x14, -0x2001, x4, 6*XLEN/8);

inst_21:
// rs1==x30, rs2==x31, rd==x2, rs2_val == -16385, rs1_val == 8
// opcode: amocas.h ; dest:x2; addr:x30; src:x31; swap_val:-0x4001; swreg:x4; 7*XLEN/8
TEST_CAS_OP(amocas.h, x2, x30, x31, -0x4001, x4, 7*XLEN/8);

inst_22:
// rs1==x1, rs2==x25, rd==x18, rs2_val == -32769, rs1_val == 4
// opcode: amocas.h ; dest:x18; addr:x1; src:x25; swap_val:-0x8001; swreg:x4; 8*XLEN/8
TEST_CAS_OP(amocas.h, x18, x1, x25, -0x8001, x4, 8*XLEN/8);

inst_23:
// rs1==x17, rs2==x12, rd==x16, rs2_val == -65537, rs1_val == -4097
// opcode: amocas.h ; dest:x16; addr:x17; src:x12; swap_val:-0x10001; swreg:x4; 9*XLEN/8
TEST_CAS_OP(amocas.h, x16, x17, x12, -0x10001, x4, 9*XLEN/8);

inst_24:
// rs1==x18, rs2==x28, rd==x25, rs2_val == -131073, rs1_val == -67108865
// opcode: amocas.h ; dest:x25; addr:x18; src:x28; swap_val:-0x20001; swreg:x4; 10*XLEN/8
TEST_CAS_OP(amocas.h, x25, x18, x28, -0x20001, x4, 10*XLEN/8);

inst_25:
// rs1==x5, rs2==x27, rd==x6, rs2_val == -262145, rs1_val == -8388609
// opcode: amocas.h ; dest:x6; addr:x5; src:x27; swap_val:-0x40001; swreg:x4; 11*XLEN/8
TEST_CAS_OP(amocas.h, x6, x5, x27, -0x40001, x4, 11*XLEN/8);

inst_26:
// rs1==x20, rs2==x0, rd==x17, rs2_val == -524289, rs1_val == -32769
// opcode: amocas.h ; dest:x17; addr:x20; src:x0; swap_val:0x0; swreg:x4; 12*XLEN/8
TEST_CAS_OP(amocas.h, x17, x20, x0, 0x0, x4, 12*XLEN/8);

inst_27:
// rs1==x3, rs2==x16, rd==x9, rs2_val == -1048577, rs1_val == 8192
// opcode: amocas.h ; dest:x9; addr:x3; src:x16; swap_val:-0x100001; swreg:x4; 13*XLEN/8
TEST_CAS_OP(amocas.h, x9, x3, x16, -0x100001, x4, 13*XLEN/8);

inst_28:
// rs1==x28, rs2==x20, rd==x1, rs2_val == -2097153, 
// opcode: amocas.h ; dest:x1; addr:x28; src:x20; swap_val:-0x200001; swreg:x4; 14*XLEN/8
TEST_CAS_OP(amocas.h, x1, x28, x20, -0x200001, x4, 14*XLEN/8);

inst_29:
// rs1==x7, rs2==x15, rd==x31, rs2_val == -4194305, rs1_val == 4096
// opcode: amocas.h ; dest:x31; addr:x7; src:x15; swap_val:-0x400001; swreg:x4; 15*XLEN/8
TEST_CAS_OP(amocas.h, x31, x7, x15, -0x400001, x4, 15*XLEN/8);
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x8, rs2==x4, rd==x28, rs2_val == -8388609, rs1_val == 262144
// opcode: amocas.h ; dest:x28; addr:x8; src:x4; swap_val:-0x800001; swreg:x1; 0*XLEN/8
TEST_CAS_OP(amocas.h, x28, x8, x4, -0x800001, x1, 0*XLEN/8);

inst_31:
// rs2==x8, rd==x20, rs2_val == -16777217, rs1_val == 1431655765
// opcode: amocas.h ; dest:x20; addr:x24; src:x8; swap_val:-0x1000001; swreg:x1; 1*XLEN/8
TEST_CAS_OP(amocas.h, x20, x24, x8, -0x1000001, x1, 1*XLEN/8);

inst_32:
// rs2_val == -33554433, rs1_val == 128
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x2000001; swreg:x1; 2*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x2000001, x1, 2*XLEN/8);

inst_33:
// rs2_val == -67108865, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x4000001; swreg:x1; 3*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x4000001, x1, 3*XLEN/8);

inst_34:
// rs2_val == -134217729, rs1_val == 1073741824
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x8000001; swreg:x1; 4*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x8000001, x1, 4*XLEN/8);

inst_35:
// rs2_val == -268435457, rs1_val == 1048576
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x10000001; swreg:x1; 5*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x10000001, x1, 5*XLEN/8);

inst_36:
// rs2_val == -536870913, rs1_val == -129
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x20000001; swreg:x1; 6*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x20000001, x1, 6*XLEN/8);

inst_37:
// rs2_val == -1073741825, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x40000001; swreg:x1; 7*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x40000001, x1, 7*XLEN/8);

inst_38:
// rs1_val == -2, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x40000000; swreg:x1; 8*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x40000000, x1, 8*XLEN/8);

inst_39:
// rs1_val == -3, rs2_val == 268435456
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x10000000; swreg:x1; 9*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x10000000, x1, 9*XLEN/8);

inst_40:
// rs1_val == -5, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x20000001; swreg:x1; 10*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x20000001, x1, 10*XLEN/8);

inst_41:
// rs1_val == 33554432, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x400001; swreg:x1; 11*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x400001, x1, 11*XLEN/8);

inst_42:
// rs1_val == 67108864, rs2_val == 134217728
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x8000000; swreg:x1; 12*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x8000000, x1, 12*XLEN/8);

inst_43:
// rs1_val == 268435456, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x81; swreg:x1; 13*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x81, x1, 13*XLEN/8);

inst_44:
// rs2_val == -1431655766, rs1_val == -33
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x55555556; swreg:x1; 14*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x55555556, x1, 14*XLEN/8);

inst_45:
// rs1_val == -257, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x8; swreg:x1; 15*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x8, x1, 15*XLEN/8);

inst_46:
// rs1_val == -513, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x3; swreg:x1; 16*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x3, x1, 16*XLEN/8);

inst_47:
// rs1_val == -1025, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x8000000; swreg:x1; 17*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x8000000, x1, 17*XLEN/8);

inst_48:
// rs1_val == -2049, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x7; swreg:x1; 18*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x7, x1, 18*XLEN/8);

inst_49:
// rs1_val == -16385, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x6; swreg:x1; 19*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x6, x1, 19*XLEN/8);

inst_50:
// rs1_val == -65537, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x9; swreg:x1; 20*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x9, x1, 20*XLEN/8);

inst_51:
// rs1_val == -262145, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x100001; swreg:x1; 21*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x100001, x1, 21*XLEN/8);

inst_52:
// rs1_val == -524289, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x801; swreg:x1; 22*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x801, x1, 22*XLEN/8);

inst_53:
// rs1_val == -1048577, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x5; swreg:x1; 23*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x5, x1, 23*XLEN/8);

inst_54:
// rs1_val == -2097153, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x0; swreg:x1; 24*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x0, x1, 24*XLEN/8);

inst_55:
// rs1_val == -4194305, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x11; swreg:x1; 25*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x11, x1, 25*XLEN/8);

inst_56:
// rs1_val == -16777217, rs2_val == 1048576
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x100000; swreg:x1; 26*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x100000, x1, 26*XLEN/8);

inst_57:
// rs1_val == -33554433, rs2_val == 65536
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x10000; swreg:x1; 27*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x10000, x1, 27*XLEN/8);

inst_58:
// rs1_val == -134217729, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x80000; swreg:x1; 28*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x80000, x1, 28*XLEN/8);

inst_59:
// rs1_val == -268435457, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x801; swreg:x1; 29*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x801, x1, 29*XLEN/8);

inst_60:
// rs1_val == -536870913, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x8000001; swreg:x1; 30*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x8000001, x1, 30*XLEN/8);

inst_61:
// rs1_val == -1073741825, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x80000000; swreg:x1; 31*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x80000000, x1, 31*XLEN/8);

inst_62:
// rs2_val == 1, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x1; swreg:x1; 32*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x1, x1, 32*XLEN/8);

inst_63:
// rs2_val == 2, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x2; swreg:x1; 33*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x2, x1, 33*XLEN/8);

inst_64:
// rs2_val == 4, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x4; swreg:x1; 34*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x4, x1, 34*XLEN/8);

inst_65:
// rs2_val == 16, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x10; swreg:x1; 35*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x10, x1, 35*XLEN/8);

inst_66:
// rs2_val == 32, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x20; swreg:x1; 36*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x20, x1, 36*XLEN/8);

inst_67:
// rs2_val == 64, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x40; swreg:x1; 37*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x40, x1, 37*XLEN/8);

inst_68:
// rs2_val == 128, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x80; swreg:x1; 38*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x80, x1, 38*XLEN/8);

inst_69:
// rs2_val == 256, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x100; swreg:x1; 39*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x100, x1, 39*XLEN/8);

inst_70:
// rs2_val == 512, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x200; swreg:x1; 40*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x200, x1, 40*XLEN/8);

inst_71:
// rs2_val == 1024, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x400; swreg:x1; 41*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x400, x1, 41*XLEN/8);

inst_72:
// rs2_val == 2048, rs1_val == 256
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x800; swreg:x1; 42*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x800, x1, 42*XLEN/8);

inst_73:
// rs2_val == 4096, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x1000; swreg:x1; 43*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x1000, x1, 43*XLEN/8);

inst_74:
// rs2_val == 8192, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x2000; swreg:x1; 44*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x2000, x1, 44*XLEN/8);

inst_75:
// rs2_val == 16384, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x4000; swreg:x1; 45*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x4000, x1, 45*XLEN/8);

inst_76:
// rs2_val == 32768, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x8000; swreg:x1; 46*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x8000, x1, 46*XLEN/8);

inst_77:
// rs2_val == 131072, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x20000; swreg:x1; 47*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x20000, x1, 47*XLEN/8);

inst_78:
// rs2_val == 262144, rs1_val == 2
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x40000; swreg:x1; 48*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x40000, x1, 48*XLEN/8);

inst_79:
// rs2_val == 2097152, rs1_val == 64
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x200000; swreg:x1; 49*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x200000, x1, 49*XLEN/8);

inst_80:
// rs2_val == 4194304, rs1_val == 65536
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x400000; swreg:x1; 50*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x400000, x1, 50*XLEN/8);

inst_81:
// rs2_val == 8388608, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x800000; swreg:x1; 51*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x800000, x1, 51*XLEN/8);

inst_82:
// rs2_val == 33554432, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x2000000; swreg:x1; 52*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x2000000, x1, 52*XLEN/8);

inst_83:
// rs2_val == 67108864, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x4000000; swreg:x1; 53*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x4000000, x1, 53*XLEN/8);

inst_84:
// rs2_val == 536870912, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x20000000; swreg:x1; 54*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x20000000, x1, 54*XLEN/8);

inst_85:
// rs2_val == 1073741824, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x40000000; swreg:x1; 55*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x40000000, x1, 55*XLEN/8);

inst_86:
// rs2_val == 1431655765, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x55555555; swreg:x1; 56*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x55555555, x1, 56*XLEN/8);

inst_87:
// rs1_val == 16, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x2000000; swreg:x1; 57*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x2000000, x1, 57*XLEN/8);

inst_88:
// rs1_val == 32, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x400001; swreg:x1; 58*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x400001, x1, 58*XLEN/8);

inst_89:
// rs1_val == 512, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x101; swreg:x1; 59*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x101, x1, 59*XLEN/8);

inst_90:
// rs1_val == 2048, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x55555556; swreg:x1; 60*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x55555556, x1, 60*XLEN/8);

inst_91:
// rs1_val == 32768, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0xa; swreg:x1; 61*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0xa, x1, 61*XLEN/8);

inst_92:
// rs1_val == 16777216, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x40; swreg:x1; 62*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x40, x1, 62*XLEN/8);

inst_93:
// rs1_val == 2097152, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x5; swreg:x1; 63*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x5, x1, 63*XLEN/8);

inst_94:
// rs1_val == 4194304, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x100001; swreg:x1; 64*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x100001, x1, 64*XLEN/8);

inst_95:
// rs2_val == 16777216, 
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:0x1000000; swreg:x1; 65*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, 0x1000000, x1, 65*XLEN/8);

inst_96:
// rs2_val == -524289, rs1_val == -32769
// opcode: amocas.h ; dest:x31; addr:x30; src:x29; swap_val:-0x80001; swreg:x1; 66*XLEN/8
TEST_CAS_OP(amocas.h, x31, x30, x29, -0x80001, x1, 66*XLEN/8);
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x3_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 16*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 67*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
