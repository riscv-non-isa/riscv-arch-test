
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Mon Oct 30 20:23:31 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv32zabha.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the amoswap.b instruction of the RISC-V RV32A extension for the amoswap.b covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IA")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*A.*Zabha.*);def TEST_CASE_1=True;",amoswap.b)

RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs2 == rd != rs1, rs1==x27, rs2==x31, rd==x31, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: amoswap.b ; op1:x27; op2:x31; dest:x31; op1val:0x10000;  op2val:-0x80000000
TEST_AMO_OP(amoswap.b, x31, x27, x31, 0x10000, -0x80000000, x2, 0*XLEN/8)

inst_1:
// rs1 == rd != rs2, rs1==x1, rs2==x26, rd==x1, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: amoswap.b ; op1:x1; op2:x26; dest:x1; op1val:0xfdffffff;  op2val:0x7fffffff
TEST_AMO_OP(amoswap.b, x1, x1, x26, 0xfdffffff, 0x7fffffff, x2, 2*XLEN/8)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x22, rd==x11, rs2_val == 0, 
// opcode: amoswap.b ; op1:x24; op2:x22; dest:x11; op1val:-0x40001;  op2val:0x0
TEST_AMO_OP(amoswap.b, x11, x24, x22, -0x40001, 0x0, x2, 4*XLEN/8)

inst_3:
// rs1==x19, rs2==x23, rd==x28, rs2_val == 1, 
// opcode: amoswap.b ; op1:x19; op2:x23; dest:x28; op1val:0x2000;  op2val:0x1
TEST_AMO_OP(amoswap.b, x28, x19, x23, 0x2000, 0x1, x2, 6*XLEN/8)

inst_4:
// rs1==x21, rs2==x27, rd==x5, rs2_val == 1431655765, 
// opcode: amoswap.b ; op1:x21; op2:x27; dest:x5; op1val:0xfdffffff;  op2val:0x55555555
TEST_AMO_OP(amoswap.b, x5, x21, x27, 0xfdffffff, 0x55555555, x2, 8*XLEN/8)

inst_5:
// rs1==x4, rs2==x0, rd==x19, rs2_val == -1431655766, 
// opcode: amoswap.b ; op1:x4; op2:x0; dest:x19; op1val:-0x10001;  op2val:0x0
TEST_AMO_OP(amoswap.b, x19, x4, x0, -0x10001, 0x0, x2, 10*XLEN/8)

inst_6:
// rs1==x29, rs2==x11, rd==x7, rs2_val == 2, 
// opcode: amoswap.b ; op1:x29; op2:x11; dest:x7; op1val:0x1000000;  op2val:0x2
TEST_AMO_OP(amoswap.b, x7, x29, x11, 0x1000000, 0x2, x2, 12*XLEN/8)

inst_7:
// rs1==x12, rs2==x30, rd==x4, rs2_val == -2, 
// opcode: amoswap.b ; op1:x12; op2:x30; dest:x4; op1val:0x80;  op2val:-0x2
TEST_AMO_OP(amoswap.b, x4, x12, x30, 0x80, -0x2, x2, 14*XLEN/8)

inst_8:
// rs1==x18, rs2==x15, rd==x6, rs2_val == -3, 
// opcode: amoswap.b ; op1:x18; op2:x15; dest:x6; op1val:-0x40000001;  op2val:-0x3
TEST_AMO_OP(amoswap.b, x6, x18, x15, -0x40000001, -0x3, x2, 16*XLEN/8)

inst_9:
// rs1==x10, rs2==x24, rd==x3, rs2_val == -5, 
// opcode: amoswap.b ; op1:x10; op2:x24; dest:x3; op1val:0x9;  op2val:-0x5
TEST_AMO_OP(amoswap.b, x3, x10, x24, 0x9, -0x5, x2, 18*XLEN/8)

inst_10:
// rs1==x26, rs2==x12, rd==x9, rs2_val == -9, 
// opcode: amoswap.b ; op1:x26; op2:x12; dest:x9; op1val:-0x6;  op2val:-0x9
TEST_AMO_OP(amoswap.b, x9, x26, x12, -0x6, -0x9, x2, 20*XLEN/8)

inst_11:
// rs1==x15, rs2==x28, rd==x12, rs2_val == -17, 
// opcode: amoswap.b ; op1:x15; op2:x28; dest:x12; op1val:0x200000;  op2val:-0x11
TEST_AMO_OP(amoswap.b, x12, x15, x28, 0x200000, -0x11, x2, 22*XLEN/8)

inst_12:
// rs1==x23, rs2==x17, rd==x25, rs2_val == -33, 
// opcode: amoswap.b ; op1:x23; op2:x17; dest:x25; op1val:0x1;  op2val:-0x21
TEST_AMO_OP(amoswap.b, x25, x23, x17, 0x1, -0x21, x2, 24*XLEN/8)

inst_13:
// rs1==x3, rs2==x1, rd==x22, rs2_val == -65, 
// opcode: amoswap.b ; op1:x3; op2:x1; dest:x22; op1val:0x11;  op2val:-0x41
TEST_AMO_OP(amoswap.b, x22, x3, x1, 0x11, -0x41, x2, 26*XLEN/8)

inst_14:
// rs1==x9, rs2==x21, rd==x16, rs2_val == -129, 
// opcode: amoswap.b ; op1:x9; op2:x21; dest:x16; op1val:0x40000;  op2val:-0x81
TEST_AMO_OP(amoswap.b, x16, x9, x21, 0x40000, -0x81, x2, 28*XLEN/8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x25, rs2==x13, rd==x8, rs2_val == -257, 
// opcode: amoswap.b ; op1:x25; op2:x13; dest:x8; op1val:0xfffffffb;  op2val:-0x101
TEST_AMO_OP(amoswap.b, x8, x25, x13, 0xfffffffb, -0x101, x1, 0*XLEN/8)

inst_16:
// rs1==x28, rs2==x16, rd==x2, rs2_val == -513, 
// opcode: amoswap.b ; op1:x28; op2:x16; dest:x2; op1val:-0x80000000;  op2val:-0x201
TEST_AMO_OP(amoswap.b, x2, x28, x16, -0x80000000, -0x201, x1, 2*XLEN/8)

inst_17:
// rs1==x7, rs2==x5, rd==x23, rs2_val == -1025, 
// opcode: amoswap.b ; op1:x7; op2:x5; dest:x23; op1val:0xfbffffff;  op2val:-0x401
TEST_AMO_OP(amoswap.b, x23, x7, x5, 0xfbffffff, -0x401, x1, 4*XLEN/8)

inst_18:
// rs1==x22, rs2==x25, rd==x14, rs2_val == -2049, 
// opcode: amoswap.b ; op1:x22; op2:x25; dest:x14; op1val:0x0;  op2val:-0x801
TEST_AMO_OP(amoswap.b, x14, x22, x25, 0x0, -0x801, x1, 6*XLEN/8)

inst_19:
// rs1==x17, rs2==x6, rd==x27, rs2_val == -4097, 
// opcode: amoswap.b ; op1:x17; op2:x6; dest:x27; op1val:-0x1000001;  op2val:-0x1001
TEST_AMO_OP(amoswap.b, x27, x17, x6, -0x1000001, -0x1001, x1, 8*XLEN/8)

inst_20:
// rs1==x5, rs2==x29, rd==x20, rs2_val == -8193, 
// opcode: amoswap.b ; op1:x5; op2:x29; dest:x20; op1val:0x8000;  op2val:-0x2001
TEST_AMO_OP(amoswap.b, x20, x5, x29, 0x8000, -0x2001, x1, 10*XLEN/8)

inst_21:
// rs1==x14, rs2==x20, rd==x21, rs2_val == -16385, 
// opcode: amoswap.b ; op1:x14; op2:x20; dest:x21; op1val:0x0;  op2val:-0x4001
TEST_AMO_OP(amoswap.b, x21, x14, x20, 0x0, -0x4001, x1, 12*XLEN/8)

inst_22:
// rs1==x13, rs2==x19, rd==x15, rs2_val == -32769, 
// opcode: amoswap.b ; op1:x13; op2:x19; dest:x15; op1val:0x80000;  op2val:-0x8001
TEST_AMO_OP(amoswap.b, x15, x13, x19, 0x80000, -0x8001, x1, 14*XLEN/8)

inst_23:
// rs1==x8, rs2==x7, rd==x24, rs2_val == -65537, 
// opcode: amoswap.b ; op1:x8; op2:x7; dest:x24; op1val:-0x9;  op2val:-0x10001
TEST_AMO_OP(amoswap.b, x24, x8, x7, -0x9, -0x10001, x1, 16*XLEN/8)

inst_24:
// rs1==x31, rs2==x9, rd==x17, rs2_val == -131073, 
// opcode: amoswap.b ; op1:x31; op2:x9; dest:x17; op1val:0x100;  op2val:-0x20001
TEST_AMO_OP(amoswap.b, x17, x31, x9, 0x100, -0x20001, x1, 18*XLEN/8)

inst_25:
// rs1==x11, rs2==x14, rd==x10, rs2_val == -262145, 
// opcode: amoswap.b ; op1:x11; op2:x14; dest:x10; op1val:0x20000;  op2val:-0x40001
TEST_AMO_OP(amoswap.b, x10, x11, x14, 0x20000, -0x40001, x1, 20*XLEN/8)

inst_26:
// rs1==x16, rs2==x18, rd==x13, rs2_val == -524289, 
// opcode: amoswap.b ; op1:x16; op2:x18; dest:x13; op1val:0xff7fffff;  op2val:-0x80001
TEST_AMO_OP(amoswap.b, x13, x16, x18, 0xff7fffff, -0x80001, x1, 22*XLEN/8)

inst_27:
// rs1==x20, rs2==x2, rd==x29, rs2_val == -1048577, 
// opcode: amoswap.b ; op1:x20; op2:x2; dest:x29; op1val:-0x2;  op2val:-0x100001
TEST_AMO_OP(amoswap.b, x29, x20, x2, -0x2, -0x100001, x1, 24*XLEN/8)

inst_28:
// rs1==x6, rs2==x8, rd==x30, rs2_val == -2097153, 
// opcode: amoswap.b ; op1:x6; op2:x8; dest:x30; op1val:0x4000;  op2val:-0x200001
TEST_AMO_OP(amoswap.b, x30, x6, x8, 0x4000, -0x200001, x1, 26*XLEN/8)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29:
// rs1==x2, rs2==x10, rd==x0, rs2_val == -4194305, 
// opcode: amoswap.b ; op1:x2; op2:x10; dest:x0; op1val:0x20000;  op2val:-0x400001
TEST_AMO_OP(amoswap.b, x0, x2, x10, 0x20000, -0x400001, x1, 0*XLEN/8)

inst_30:
// rs1==x30, rs2==x3, rd==x26, rs2_val == -8388609, 
// opcode: amoswap.b ; op1:x30; op2:x3; dest:x26; op1val:0x8;  op2val:-0x800001
TEST_AMO_OP(amoswap.b, x26, x30, x3, 0x8, -0x800001, x1, 2*XLEN/8)

inst_31:
// rs2==x4, rd==x18, rs2_val == -16777217, 
// opcode: amoswap.b ; op1:x26; op2:x4; dest:x18; op1val:0x800000;  op2val:-0x1000001
TEST_AMO_OP(amoswap.b, x18, x26, x4, 0x800000, -0x1000001, x1, 4*XLEN/8)

inst_32:
// rs2_val == -33554433, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:-0x2000001
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x7fffffff, -0x2000001, x1, 6*XLEN/8)

inst_33:
// rs2_val == -67108865, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:-0x4000001
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x80000, -0x4000001, x1, 8*XLEN/8)

inst_34:
// rs2_val == -134217729, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:-0x8000001
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xbfffffff, -0x8000001, x1, 10*XLEN/8)

inst_35:
// rs2_val == -268435457, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x10000001;  op2val:-0x10000001
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x10000001, -0x10000001, x1, 12*XLEN/8)

inst_36:
// rs2_val == 134217728, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0x8000000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xbfffffff, 0x8000000, x1, 14*XLEN/8)

inst_37:
// rs2_val == 268435456, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0x10000000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x20000000, 0x10000000, x1, 16*XLEN/8)

inst_38:
// rs2_val == 536870912, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0x20000000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xffff7fff, 0x20000000, x1, 18*XLEN/8)

inst_39:
// rs2_val == 1073741824, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7;  op2val:0x40000000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xfffffff7, 0x40000000, x1, 20*XLEN/8)

inst_40:
// rs2_val == -536870913, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:-0x20000001
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x10000000, -0x20000001, x1, 22*XLEN/8)

inst_41:
// rs2_val == -1073741825, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:-0x40000001
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xefffffff, -0x40000001, x1, 24*XLEN/8)

inst_42:
// rs2_val == 4, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x801;  op2val:0x4
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x801, 0x4, x1, 26*XLEN/8)

inst_43:
// rs2_val == 8, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0x8
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x10, 0x8, x1, 28*XLEN/8)

inst_44:
// rs2_val == 16, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x10
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x2, 0x10, x1, 30*XLEN/8)

inst_45:
// rs2_val == 32, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x20
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xfffffeff, 0x20, x1, 32*XLEN/8)

inst_46:
// rs2_val == 64, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xa;  op2val:0x40
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xa, 0x40, x1, 34*XLEN/8)

inst_47:
// rs2_val == 128, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:0x80
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xfffffdff, 0x80, x1, 36*XLEN/8)

inst_48:
// rs2_val == 256, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x100
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x4000, 0x100, x1, 38*XLEN/8)

inst_49:
// rs2_val == 512, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0x200
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x7fffffff, 0x200, x1, 40*XLEN/8)

inst_50:
// rs2_val == 1024, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x2000001;  op2val:0x400
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x2000001, 0x400, x1, 42*XLEN/8)

inst_51:
// rs2_val == 2048, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x801;  op2val:0x800
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x801, 0x800, x1, 44*XLEN/8)

inst_52:
// rs2_val == 4096, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0x1000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xffdfffff, 0x1000, x1, 46*XLEN/8)

inst_53:
// rs2_val == 8192, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x2000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x2, 0x2000, x1, 48*XLEN/8)

inst_54:
// rs2_val == 16384, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0x4000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xffffffdf, 0x4000, x1, 50*XLEN/8)

inst_55:
// rs2_val == 32768, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x8000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x4, 0x8000, x1, 52*XLEN/8)

inst_56:
// rs2_val == 65536, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x800001;  op2val:0x10000
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x800001, 0x10000, x1, 54*XLEN/8)

inst_57:
// rs2_val == 131072, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0x20000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xfffbffff, 0x20000, x1, 56*XLEN/8)

inst_58:
// rs2_val == 262144, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0x40000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xffbfffff, 0x40000, x1, 58*XLEN/8)

inst_59:
// rs2_val == 524288, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0x80000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x20, 0x80000, x1, 60*XLEN/8)

inst_60:
// rs2_val == 1048576, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x10000001;  op2val:0x100000
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x10000001, 0x100000, x1, 62*XLEN/8)

inst_61:
// rs2_val == 2097152, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0x200000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x200, 0x200000, x1, 64*XLEN/8)

inst_62:
// rs2_val == 4194304, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0x400000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x20, 0x400000, x1, 66*XLEN/8)

inst_63:
// rs2_val == 8388608, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0x800000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x8000, 0x800000, x1, 68*XLEN/8)

inst_64:
// rs2_val == 16777216, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0x1000000
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0xffffffef, 0x1000000, x1, 70*XLEN/8)

inst_65:
// rs2_val == 33554432, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x8;  op2val:0x2000000
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x8, 0x2000000, x1, 72*XLEN/8)

inst_66:
// rs2_val == 67108864, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x21;  op2val:0x4000000
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x21, 0x4000000, x1, 74*XLEN/8)

inst_67:
// rs2_val == -1431655766, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:-0x10001;  op2val:-0x55555556
TEST_AMO_OP(amoswap.b, x31, x30, x29, -0x10001, -0x55555556, x1, 76*XLEN/8)

inst_68:
// rs2_val == -4194305, 
// opcode: amoswap.b ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:-0x400001
TEST_AMO_OP(amoswap.b, x31, x30, x29, 0x20000, -0x400001, x1, 78*XLEN/8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 30*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 28*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 80*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
