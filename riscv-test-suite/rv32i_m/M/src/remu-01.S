
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:44:35 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32im.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the remu instruction of the RISC-V M extension for the remu covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IM")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*M.*);def TEST_CASE_1=True;",remu)

RVTEST_SIGBASE( x11,signature_x11_1)

inst_0:
// rs2 == rd != rs1, rs1==x4, rs2==x7, rd==x7, rs1_val > 0 and rs2_val > 0, rs2_val == 32, rs1_val == 536870912, rs1_val != rs2_val
// opcode: remu ; op1:x4; op2:x7; dest:x7; op1val:536870912;  op2val:32
TEST_RR_OP(remu, x7, x4, x7, 0x00000000, 536870912, 32, x11, 0, x30)

inst_1:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_val > 0 and rs2_val < 0, rs1_val == 8192
// opcode: remu ; op1:x19; op2:x19; dest:x19; op1val:8192;  op2val:-1431655765
TEST_RR_OP(remu, x19, x19, x19, 0x00000000, 8192, -1431655765, x11, 4, x30)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x12, rd==x3, rs1_val < 0 and rs2_val < 0, rs1_val==-1431655766 and rs2_val==-1431655765, rs1_val == -1431655766
// opcode: remu ; op1:x17; op2:x12; dest:x3; op1val:-1431655766;  op2val:-1431655765
TEST_RR_OP(remu, x3, x17, x12, 0x00000000, -1431655766, -1431655765, x11, 8, x30)

inst_3:
// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x14, rs1_val < 0 and rs2_val > 0, rs1_val == -262145, rs2_val == 1
// opcode: remu ; op1:x24; op2:x24; dest:x14; op1val:-262145;  op2val:1
TEST_RR_OP(remu, x14, x24, x24, 0x00000000, -262145, 1, x11, 12, x30)

inst_4:
// rs1 == rd != rs2, rs1==x31, rs2==x28, rd==x31, rs1_val == rs2_val, rs1_val==858993460 and rs2_val==858993460
// opcode: remu ; op1:x31; op2:x28; dest:x31; op1val:858993460;  op2val:858993460
TEST_RR_OP(remu, x31, x31, x28, 0x00000000, 858993460, 858993460, x11, 16, x30)

inst_5:
// rs1==x25, rs2==x9, rd==x27, rs2_val == (-2**(xlen-1)), rs1_val == 4096, rs2_val == -2147483648
// opcode: remu ; op1:x25; op2:x9; dest:x27; op1val:4096;  op2val:-2147483648
TEST_RR_OP(remu, x27, x25, x9, 0x00000000, 4096, -2147483648, x11, 20, x30)

inst_6:
// rs1==x21, rs2==x16, rd==x0, rs2_val == 0, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: remu ; op1:x21; op2:x16; dest:x0; op1val:2147483647;  op2val:0
TEST_RR_OP(remu, x0, x21, x16, 0x00000000, 2147483647, 0, x11, 24, x30)

inst_7:
// rs1==x15, rs2==x13, rd==x24, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: remu ; op1:x15; op2:x13; dest:x24; op1val:9;  op2val:2147483647
TEST_RR_OP(remu, x24, x15, x13, 0x00000000, 9, 2147483647, x11, 28, x30)

inst_8:
// rs1==x10, rs2==x0, rd==x15, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, rs2_val == -16777217
// opcode: remu ; op1:x10; op2:x0; dest:x15; op1val:-2147483648;  op2val:-16777217
TEST_RR_OP(remu, x15, x10, x0, 0x00000000, -2147483648, -16777217, x11, 32, x30)

inst_9:
// rs1==x28, rs2==x14, rd==x16, rs1_val == 0, rs2_val == -17
// opcode: remu ; op1:x28; op2:x14; dest:x16; op1val:0;  op2val:-17
TEST_RR_OP(remu, x16, x28, x14, 0x00000000, 0, -17, x11, 36, x30)

inst_10:
// rs1==x3, rs2==x6, rd==x10, rs1_val == 1, rs2_val == -4194305
// opcode: remu ; op1:x3; op2:x6; dest:x10; op1val:1;  op2val:-4194305
TEST_RR_OP(remu, x10, x3, x6, 0x00000000, 1, -4194305, x11, 40, x30)

inst_11:
// rs1==x26, rs2==x5, rd==x2, rs2_val == 2, rs1_val == 32768
// opcode: remu ; op1:x26; op2:x5; dest:x2; op1val:32768;  op2val:2
TEST_RR_OP(remu, x2, x26, x5, 0x00000000, 32768, 2, x11, 44, x30)

inst_12:
// rs1==x20, rs2==x26, rd==x12, rs2_val == 4, rs1_val == 2048
// opcode: remu ; op1:x20; op2:x26; dest:x12; op1val:2048;  op2val:4
TEST_RR_OP(remu, x12, x20, x26, 0x00000000, 2048, 4, x11, 48, x30)

inst_13:
// rs1==x16, rs2==x29, rd==x20, rs2_val == 8, rs1_val == -2049
// opcode: remu ; op1:x16; op2:x29; dest:x20; op1val:-2049;  op2val:8
TEST_RR_OP(remu, x20, x16, x29, 0x00000000, -2049, 8, x11, 52, x30)

inst_14:
// rs1==x14, rs2==x25, rd==x28, rs2_val == 16, 
// opcode: remu ; op1:x14; op2:x25; dest:x28; op1val:-6;  op2val:16
TEST_RR_OP(remu, x28, x14, x25, 0x00000000, -6, 16, x11, 56, x30)

inst_15:
// rs1==x0, rs2==x31, rd==x8, rs2_val == 64, 
// opcode: remu ; op1:x0; op2:x31; dest:x8; op1val:-1431655766;  op2val:64
TEST_RR_OP(remu, x8, x0, x31, 0x00000000, -1431655766, 64, x11, 60, x30)

inst_16:
// rs1==x27, rs2==x1, rd==x5, rs2_val == 128, rs1_val == 2
// opcode: remu ; op1:x27; op2:x1; dest:x5; op1val:2;  op2val:128
TEST_RR_OP(remu, x5, x27, x1, 0x00000000, 2, 128, x11, 64, x30)

inst_17:
// rs1==x18, rs2==x23, rd==x22, rs2_val == 256, 
// opcode: remu ; op1:x18; op2:x23; dest:x22; op1val:2;  op2val:256
TEST_RR_OP(remu, x22, x18, x23, 0x00000000, 2, 256, x11, 68, x30)
RVTEST_SIGBASE( x14,signature_x14_0)

inst_18:
// rs1==x6, rs2==x17, rd==x23, rs2_val == 512, rs1_val == -32769
// opcode: remu ; op1:x6; op2:x17; dest:x23; op1val:-32769;  op2val:512
TEST_RR_OP(remu, x23, x6, x17, 0x00000000, -32769, 512, x14, 0, x16)

inst_19:
// rs1==x13, rs2==x4, rd==x6, rs2_val == 1024, 
// opcode: remu ; op1:x13; op2:x4; dest:x6; op1val:5;  op2val:1024
TEST_RR_OP(remu, x6, x13, x4, 0x00000000, 5, 1024, x14, 4, x16)

inst_20:
// rs1==x2, rs2==x11, rd==x17, rs2_val == 2048, 
// opcode: remu ; op1:x2; op2:x11; dest:x17; op1val:-262145;  op2val:2048
TEST_RR_OP(remu, x17, x2, x11, 0x00000000, -262145, 2048, x14, 8, x16)

inst_21:
// rs1==x23, rs2==x18, rd==x25, rs2_val == 4096, rs1_val == 128
// opcode: remu ; op1:x23; op2:x18; dest:x25; op1val:128;  op2val:4096
TEST_RR_OP(remu, x25, x23, x18, 0x00000000, 128, 4096, x14, 12, x16)

inst_22:
// rs1==x8, rs2==x10, rd==x11, rs2_val == 8192, rs1_val == 134217728
// opcode: remu ; op1:x8; op2:x10; dest:x11; op1val:134217728;  op2val:8192
TEST_RR_OP(remu, x11, x8, x10, 0x00000000, 134217728, 8192, x14, 16, x16)

inst_23:
// rs1==x5, rs2==x15, rd==x13, rs2_val == 16384, rs1_val == -33
// opcode: remu ; op1:x5; op2:x15; dest:x13; op1val:-33;  op2val:16384
TEST_RR_OP(remu, x13, x5, x15, 0x00000000, -33, 16384, x14, 20, x16)

inst_24:
// rs1==x1, rs2==x3, rd==x29, rs2_val == 32768, rs1_val == 1431655765
// opcode: remu ; op1:x1; op2:x3; dest:x29; op1val:1431655765;  op2val:32768
TEST_RR_OP(remu, x29, x1, x3, 0x00000000, 1431655765, 32768, x14, 24, x16)

inst_25:
// rs1==x12, rs2==x30, rd==x1, rs2_val == 65536, 
// opcode: remu ; op1:x12; op2:x30; dest:x1; op1val:3;  op2val:65536
TEST_RR_OP(remu, x1, x12, x30, 0x00000000, 3, 65536, x14, 28, x16)

inst_26:
// rs1==x22, rs2==x21, rd==x9, rs2_val == 131072, 
// opcode: remu ; op1:x22; op2:x21; dest:x9; op1val:8192;  op2val:131072
TEST_RR_OP(remu, x9, x22, x21, 0x00000000, 8192, 131072, x14, 32, x16)

inst_27:
// rs1==x9, rs2==x22, rd==x21, rs2_val == 262144, rs1_val == -17
// opcode: remu ; op1:x9; op2:x22; dest:x21; op1val:-17;  op2val:262144
TEST_RR_OP(remu, x21, x9, x22, 0x00000000, -17, 262144, x14, 36, x16)

inst_28:
// rs1==x11, rs2==x8, rd==x18, rs2_val == 524288, 
// opcode: remu ; op1:x11; op2:x8; dest:x18; op1val:-262145;  op2val:524288
TEST_RR_OP(remu, x18, x11, x8, 0x00000000, -262145, 524288, x14, 40, x16)

inst_29:
// rs1==x30, rs2==x20, rd==x4, rs2_val == 1048576, 
// opcode: remu ; op1:x30; op2:x20; dest:x4; op1val:-7;  op2val:1048576
TEST_RR_OP(remu, x4, x30, x20, 0x00000000, -7, 1048576, x14, 44, x16)

inst_30:
// rs1==x7, rs2==x2, rd==x30, rs2_val == 2097152, 
// opcode: remu ; op1:x7; op2:x2; dest:x30; op1val:5;  op2val:2097152
TEST_RR_OP(remu, x30, x7, x2, 0x00000000, 5, 2097152, x14, 48, x16)

inst_31:
// rs1==x29, rs2==x27, rd==x26, rs2_val == 4194304, 
// opcode: remu ; op1:x29; op2:x27; dest:x26; op1val:9;  op2val:4194304
TEST_RR_OP(remu, x26, x29, x27, 0x00000000, 9, 4194304, x14, 52, x16)

inst_32:
// rs2_val == 8388608, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:8388608
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 7, 8388608, x14, 56, x16)

inst_33:
// rs2_val == 16777216, rs1_val == 16777216
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:16777216
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 16777216, 16777216, x14, 60, x16)

inst_34:
// rs2_val == 33554432, rs1_val == -16385
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:33554432
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -16385, 33554432, x14, 64, x16)

inst_35:
// rs2_val == 67108864, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:67108864
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 67108864, x14, 68, x16)

inst_36:
// rs2_val == 134217728, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-8;  op2val:134217728
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -8, 134217728, x14, 72, x16)

inst_37:
// rs2_val == 268435456, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-6;  op2val:268435456
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -6, 268435456, x14, 76, x16)

inst_38:
// rs2_val == 536870912, rs1_val == -33554433
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:536870912
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -33554433, 536870912, x14, 80, x16)

inst_39:
// rs2_val == 1073741824, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:1073741824
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 1073741824, x14, 84, x16)

inst_40:
// rs2_val == -2, rs1_val == -65537
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -65537, -2, x14, 88, x16)

inst_41:
// rs2_val == -3, rs1_val == -4194305
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:-3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -4194305, -3, x14, 92, x16)

inst_42:
// rs2_val == -5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:-5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, -5, x14, 96, x16)

inst_43:
// rs2_val == -9, rs1_val == -67108865
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-9
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -67108865, -9, x14, 100, x16)

inst_44:
// rs2_val == -33, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-4;  op2val:-33
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -4, -33, x14, 104, x16)

inst_45:
// rs2_val == -65, rs1_val == 131072
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:-65
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 131072, -65, x14, 108, x16)

inst_46:
// rs2_val == -129, rs1_val == 1024
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:-129
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1024, -129, x14, 112, x16)

inst_47:
// rs2_val == -257, rs1_val == 64
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:64;  op2val:-257
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 64, -257, x14, 116, x16)

inst_48:
// rs2_val == -513, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:-513
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, -513, x14, 120, x16)

inst_49:
// rs2_val == -1025, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:-1025
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, -1025, x14, 124, x16)

inst_50:
// rs2_val == -2049, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-2049
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, -2049, x14, 128, x16)

inst_51:
// rs2_val == -4097, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-4097
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, -4097, x14, 132, x16)

inst_52:
// rs2_val == -8193, rs1_val == -8193
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-8193
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -8193, -8193, x14, 136, x16)

inst_53:
// rs2_val == -16385, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-16385
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, -16385, x14, 140, x16)

inst_54:
// rs2_val == -32769, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:-32769
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, -32769, x14, 144, x16)

inst_55:
// rs2_val == -65537, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-65537
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, -65537, x14, 148, x16)

inst_56:
// rs2_val == -131073, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1073741824;  op2val:-131073
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1073741824, -131073, x14, 152, x16)

inst_57:
// rs2_val == -262145, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:-262145
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -262145, -262145, x14, 156, x16)

inst_58:
// rs2_val == -524289, rs1_val == 16384
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:-524289
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 16384, -524289, x14, 160, x16)

inst_59:
// rs2_val == -1048577, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1024;  op2val:-1048577
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1024, -1048577, x14, 164, x16)

inst_60:
// rs2_val == -2097153, rs1_val == -65
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:-2097153
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -65, -2097153, x14, 168, x16)

inst_61:
// rs2_val == -8388609, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-2147483648;  op2val:-8388609
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -2147483648, -8388609, x14, 172, x16)

inst_62:
// rs2_val == -33554433, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-10;  op2val:-33554433
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -10, -33554433, x14, 176, x16)

inst_63:
// rs2_val == -67108865, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:-67108865
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, -67108865, x14, 180, x16)

inst_64:
// rs2_val == -134217729, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-134217729
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, -134217729, x14, 184, x16)

inst_65:
// rs2_val == -268435457, rs1_val == -2
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-268435457
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -2, -268435457, x14, 188, x16)

inst_66:
// rs2_val == -536870913, rs1_val == 4
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-536870913
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, -536870913, x14, 192, x16)

inst_67:
// rs2_val == -1073741825, rs1_val == 524288
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:-1073741825
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 524288, -1073741825, x14, 196, x16)

inst_68:
// rs2_val == 1431655765, rs1_val==-46340 and rs2_val==1431655765
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 1431655765, x14, 200, x16)

inst_69:
// rs2_val == -1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1073741824;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1073741824, -1431655766, x14, 204, x16)

inst_70:
// rs1_val == 8, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 8, 1717986917, x14, 208, x16)

inst_71:
// rs1_val == 16, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:134217728
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 16, 134217728, x14, 212, x16)

inst_72:
// rs1_val == 32, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:16
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 32, 16, x14, 216, x16)

inst_73:
// rs1_val == 256, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:256;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 256, 858993460, x14, 220, x16)

inst_74:
// rs1_val == 512, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:-2147483648
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 512, -2147483648, x14, 224, x16)

inst_75:
// rs1_val == 65536, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:65536;  op2val:4194304
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 65536, 4194304, x14, 228, x16)

inst_76:
// rs1_val == 262144, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:-536870913
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 262144, -536870913, x14, 232, x16)

inst_77:
// rs1_val == 1048576, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1048576, 46340, x14, 236, x16)

inst_78:
// rs1_val == 2097152, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2097152, 2, x14, 240, x16)

inst_79:
// rs1_val == 4194304, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4194304, 6, x14, 244, x16)

inst_80:
// rs1_val == 8388608, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 8388608, 1717986918, x14, 248, x16)

inst_81:
// rs1_val == 33554432, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 33554432, 6, x14, 252, x16)

inst_82:
// rs1_val == 67108864, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:-8
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 67108864, -8, x14, 256, x16)

inst_83:
// rs1_val == 268435456, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:128
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 268435456, 128, x14, 260, x16)

inst_84:
// rs1_val == 1073741824, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:8192
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1073741824, 8192, x14, 264, x16)

inst_85:
// rs1_val == -3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -3, -46340, x14, 268, x16)

inst_86:
// rs1_val == -5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-2049
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -5, -2049, x14, 272, x16)

inst_87:
// rs1_val == -9, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -9, 46341, x14, 276, x16)

inst_88:
// rs1_val == -129, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:-129
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -129, -129, x14, 280, x16)

inst_89:
// rs1_val == -257, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:268435456
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -257, 268435456, x14, 284, x16)

inst_90:
// rs1_val == -513, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -513, 0, x14, 288, x16)

inst_91:
// rs1_val == -1025, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1025, 0, x14, 292, x16)

inst_92:
// rs1_val == -4097, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -4097, 858993459, x14, 296, x16)

inst_93:
// rs1_val == -131073, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:-536870913
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -131073, -536870913, x14, 300, x16)

inst_94:
// rs1_val == -524289, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:9
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -524289, 9, x14, 304, x16)

inst_95:
// rs1_val == -1048577, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1048577, 5, x14, 308, x16)

inst_96:
// rs1_val == -2097153, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -2097153, 1431655765, x14, 312, x16)

inst_97:
// rs1_val == -8388609, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -8388609, 2, x14, 316, x16)

inst_98:
// rs1_val == -16777217, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:524288
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -16777217, 524288, x14, 320, x16)

inst_99:
// rs1_val == -134217729, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:128
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -134217729, 128, x14, 324, x16)

inst_100:
// rs1_val == -268435457, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -268435457, 6, x14, 328, x16)

inst_101:
// rs1_val == -536870913, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:-524289
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -536870913, -524289, x14, 332, x16)

inst_102:
// rs1_val == -1073741825, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1073741825, 1431655766, x14, 336, x16)

inst_103:
// rs1_val==3 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 3, x14, 340, x16)

inst_104:
// rs1_val==3 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 1431655765, x14, 344, x16)

inst_105:
// rs1_val==3 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, -1431655766, x14, 348, x16)

inst_106:
// rs1_val==3 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 5, x14, 352, x16)

inst_107:
// rs1_val==3 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 858993459, x14, 356, x16)

inst_108:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 1717986918, x14, 360, x16)

inst_109:
// rs1_val==3 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, -46340, x14, 364, x16)

inst_110:
// rs1_val==3 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 46340, x14, 368, x16)

inst_111:
// rs1_val==3 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 2, x14, 372, x16)

inst_112:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 1431655764, x14, 376, x16)

inst_113:
// rs1_val==3 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 0, x14, 380, x16)

inst_114:
// rs1_val==3 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 4, x14, 384, x16)

inst_115:
// rs1_val==3 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 858993458, x14, 388, x16)

inst_116:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 1717986917, x14, 392, x16)

inst_117:
// rs1_val==3 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 46339, x14, 396, x16)

inst_118:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 1431655766, x14, 400, x16)

inst_119:
// rs1_val==3 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, -1431655765, x14, 404, x16)

inst_120:
// rs1_val==3 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 6, x14, 408, x16)

inst_121:
// rs1_val==3 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 858993460, x14, 412, x16)

inst_122:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 1717986919, x14, 416, x16)

inst_123:
// rs1_val==3 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, -46339, x14, 420, x16)

inst_124:
// rs1_val==3 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 3, 46341, x14, 424, x16)

inst_125:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 3, x14, 428, x16)

inst_126:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 1431655765, x14, 432, x16)

inst_127:
// rs1_val==1431655765 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, -1431655766, x14, 436, x16)

inst_128:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 5, x14, 440, x16)

inst_129:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 858993459, x14, 444, x16)

inst_130:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 1717986918, x14, 448, x16)

inst_131:
// rs1_val==1431655765 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, -46340, x14, 452, x16)

inst_132:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 46340, x14, 456, x16)

inst_133:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 2, x14, 460, x16)

inst_134:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 1431655764, x14, 464, x16)

inst_135:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 0, x14, 468, x16)

inst_136:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 4, x14, 472, x16)

inst_137:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 858993458, x14, 476, x16)

inst_138:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 1717986917, x14, 480, x16)

inst_139:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 46339, x14, 484, x16)

inst_140:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 1431655766, x14, 488, x16)

inst_141:
// rs1_val==1431655765 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, -1431655765, x14, 492, x16)

inst_142:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 6, x14, 496, x16)

inst_143:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 858993460, x14, 500, x16)

inst_144:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 1717986919, x14, 504, x16)

inst_145:
// rs1_val==1431655765 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, -46339, x14, 508, x16)

inst_146:
// rs1_val==1431655765 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655765, 46341, x14, 512, x16)

inst_147:
// rs1_val==-1431655766 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 3, x14, 516, x16)

inst_148:
// rs1_val==-1431655766 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 1431655765, x14, 520, x16)

inst_149:
// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, -1431655766, x14, 524, x16)

inst_150:
// rs1_val==-1431655766 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 5, x14, 528, x16)

inst_151:
// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 858993459, x14, 532, x16)

inst_152:
// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 1717986918, x14, 536, x16)

inst_153:
// rs1_val==-1431655766 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, -46340, x14, 540, x16)

inst_154:
// rs1_val==-1431655766 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 46340, x14, 544, x16)

inst_155:
// rs1_val==-1431655766 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 2, x14, 548, x16)

inst_156:
// rs1_val==-1431655766 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 1431655764, x14, 552, x16)

inst_157:
// rs1_val==-1431655766 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 0, x14, 556, x16)

inst_158:
// rs1_val==-1431655766 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 4, x14, 560, x16)

inst_159:
// rs1_val==-1431655766 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 858993458, x14, 564, x16)

inst_160:
// rs1_val==-1431655766 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 1717986917, x14, 568, x16)

inst_161:
// rs1_val==-1431655766 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 46339, x14, 572, x16)

inst_162:
// rs1_val==-1431655766 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 1431655766, x14, 576, x16)

inst_163:
// rs1_val==-1431655766 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 6, x14, 580, x16)

inst_164:
// rs1_val==-1431655766 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 858993460, x14, 584, x16)

inst_165:
// rs1_val==-1431655766 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 1717986919, x14, 588, x16)

inst_166:
// rs1_val==-1431655766 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, -46339, x14, 592, x16)

inst_167:
// rs1_val==-1431655766 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 46341, x14, 596, x16)

inst_168:
// rs1_val==5 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 3, x14, 600, x16)

inst_169:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 1431655765, x14, 604, x16)

inst_170:
// rs1_val==5 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, -1431655766, x14, 608, x16)

inst_171:
// rs1_val==5 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 5, x14, 612, x16)

inst_172:
// rs1_val==5 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 858993459, x14, 616, x16)

inst_173:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 1717986918, x14, 620, x16)

inst_174:
// rs1_val==5 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, -46340, x14, 624, x16)

inst_175:
// rs1_val==5 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 46340, x14, 628, x16)

inst_176:
// rs1_val==5 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 2, x14, 632, x16)

inst_177:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 1431655764, x14, 636, x16)

inst_178:
// rs1_val==5 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 0, x14, 640, x16)

inst_179:
// rs1_val==5 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 4, x14, 644, x16)

inst_180:
// rs1_val==5 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 858993458, x14, 648, x16)

inst_181:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 1717986917, x14, 652, x16)

inst_182:
// rs1_val==5 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 46339, x14, 656, x16)

inst_183:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 1431655766, x14, 660, x16)

inst_184:
// rs1_val==5 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, -1431655765, x14, 664, x16)

inst_185:
// rs1_val==5 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 6, x14, 668, x16)

inst_186:
// rs1_val==5 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 858993460, x14, 672, x16)

inst_187:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 1717986919, x14, 676, x16)

inst_188:
// rs1_val==5 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, -46339, x14, 680, x16)

inst_189:
// rs1_val==5 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:5;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 5, 46341, x14, 684, x16)

inst_190:
// rs1_val==858993459 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 3, x14, 688, x16)

inst_191:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 1431655765, x14, 692, x16)

inst_192:
// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, -1431655766, x14, 696, x16)

inst_193:
// rs1_val==858993459 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 5, x14, 700, x16)

inst_194:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 858993459, x14, 704, x16)

inst_195:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 1717986918, x14, 708, x16)

inst_196:
// rs1_val==858993459 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, -46340, x14, 712, x16)

inst_197:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 46340, x14, 716, x16)

inst_198:
// rs1_val==858993459 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 2, x14, 720, x16)

inst_199:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 1431655764, x14, 724, x16)

inst_200:
// rs1_val==858993459 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 0, x14, 728, x16)

inst_201:
// rs1_val==858993459 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 4, x14, 732, x16)

inst_202:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 858993458, x14, 736, x16)

inst_203:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 1717986917, x14, 740, x16)

inst_204:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 46339, x14, 744, x16)

inst_205:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 1431655766, x14, 748, x16)

inst_206:
// rs1_val==858993459 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, -1431655765, x14, 752, x16)

inst_207:
// rs1_val==858993459 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 6, x14, 756, x16)

inst_208:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 858993460, x14, 760, x16)

inst_209:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 1717986919, x14, 764, x16)

inst_210:
// rs1_val==858993459 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, -46339, x14, 768, x16)

inst_211:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993459;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993459, 46341, x14, 772, x16)

inst_212:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 3, x14, 776, x16)

inst_213:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 1431655765, x14, 780, x16)

inst_214:
// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, -1431655766, x14, 784, x16)

inst_215:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 5, x14, 788, x16)

inst_216:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 858993459, x14, 792, x16)

inst_217:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 1717986918, x14, 796, x16)

inst_218:
// rs1_val==1717986918 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, -46340, x14, 800, x16)

inst_219:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 46340, x14, 804, x16)

inst_220:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 2, x14, 808, x16)

inst_221:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 1431655764, x14, 812, x16)

inst_222:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 0, x14, 816, x16)

inst_223:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 4, x14, 820, x16)

inst_224:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 858993458, x14, 824, x16)

inst_225:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 1717986917, x14, 828, x16)

inst_226:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 46339, x14, 832, x16)

inst_227:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 1431655766, x14, 836, x16)

inst_228:
// rs1_val==1717986918 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, -1431655765, x14, 840, x16)

inst_229:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 6, x14, 844, x16)

inst_230:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 858993460, x14, 848, x16)

inst_231:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 1717986919, x14, 852, x16)

inst_232:
// rs1_val==1717986918 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, -46339, x14, 856, x16)

inst_233:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986918;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986918, 46341, x14, 860, x16)

inst_234:
// rs1_val==-46340 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 3, x14, 864, x16)

inst_235:
// rs1_val==-46340 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, -1431655766, x14, 868, x16)

inst_236:
// rs1_val==-46340 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 5, x14, 872, x16)

inst_237:
// rs1_val==-46340 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 858993459, x14, 876, x16)

inst_238:
// rs1_val==-46340 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 1717986918, x14, 880, x16)

inst_239:
// rs1_val==-46340 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, -46340, x14, 884, x16)

inst_240:
// rs1_val==-46340 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 46340, x14, 888, x16)

inst_241:
// rs1_val==-46340 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 2, x14, 892, x16)

inst_242:
// rs1_val==-46340 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 1431655764, x14, 896, x16)

inst_243:
// rs1_val==-46340 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 0, x14, 900, x16)

inst_244:
// rs1_val==-46340 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 4, x14, 904, x16)

inst_245:
// rs1_val==-46340 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 858993458, x14, 908, x16)

inst_246:
// rs1_val==-46340 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 1717986917, x14, 912, x16)

inst_247:
// rs1_val==-46340 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 46339, x14, 916, x16)

inst_248:
// rs1_val==-46340 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 1431655766, x14, 920, x16)

inst_249:
// rs1_val==-46340 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, -1431655765, x14, 924, x16)

inst_250:
// rs1_val==-46340 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 6, x14, 928, x16)

inst_251:
// rs1_val==-46340 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 858993460, x14, 932, x16)

inst_252:
// rs1_val==-46340 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 1717986919, x14, 936, x16)

inst_253:
// rs1_val==-46340 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, -46339, x14, 940, x16)

inst_254:
// rs1_val==-46340 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46340;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46340, 46341, x14, 944, x16)

inst_255:
// rs1_val==46340 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 3, x14, 948, x16)

inst_256:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 1431655765, x14, 952, x16)

inst_257:
// rs1_val==46340 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, -1431655766, x14, 956, x16)

inst_258:
// rs1_val==46340 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 5, x14, 960, x16)

inst_259:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 858993459, x14, 964, x16)

inst_260:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 1717986918, x14, 968, x16)

inst_261:
// rs1_val==46340 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, -46340, x14, 972, x16)

inst_262:
// rs1_val==46340 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 46340, x14, 976, x16)

inst_263:
// rs1_val==46340 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 2, x14, 980, x16)

inst_264:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 1431655764, x14, 984, x16)

inst_265:
// rs1_val==46340 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 0, x14, 988, x16)

inst_266:
// rs1_val==46340 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 4, x14, 992, x16)

inst_267:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 858993458, x14, 996, x16)

inst_268:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 1717986917, x14, 1000, x16)

inst_269:
// rs1_val==46340 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 46339, x14, 1004, x16)

inst_270:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 1431655766, x14, 1008, x16)

inst_271:
// rs1_val==46340 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, -1431655765, x14, 1012, x16)

inst_272:
// rs1_val==46340 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 6, x14, 1016, x16)

inst_273:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 858993460, x14, 1020, x16)

inst_274:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 1717986919, x14, 1024, x16)

inst_275:
// rs1_val==46340 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, -46339, x14, 1028, x16)

inst_276:
// rs1_val==46340 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46340;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46340, 46341, x14, 1032, x16)

inst_277:
// rs1_val==2 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 3, x14, 1036, x16)

inst_278:
// rs1_val==2 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 1431655765, x14, 1040, x16)

inst_279:
// rs1_val==2 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, -1431655766, x14, 1044, x16)

inst_280:
// rs1_val==2 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 5, x14, 1048, x16)

inst_281:
// rs1_val==2 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 858993459, x14, 1052, x16)

inst_282:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 1717986918, x14, 1056, x16)

inst_283:
// rs1_val==2 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, -46340, x14, 1060, x16)

inst_284:
// rs1_val==2 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 46340, x14, 1064, x16)

inst_285:
// rs1_val==2 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 2, x14, 1068, x16)

inst_286:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 1431655764, x14, 1072, x16)

inst_287:
// rs1_val==2 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 0, x14, 1076, x16)

inst_288:
// rs1_val==2 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 4, x14, 1080, x16)

inst_289:
// rs1_val==2 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 858993458, x14, 1084, x16)

inst_290:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 1717986917, x14, 1088, x16)

inst_291:
// rs1_val==2 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 46339, x14, 1092, x16)

inst_292:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 1431655766, x14, 1096, x16)

inst_293:
// rs1_val==2 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, -1431655765, x14, 1100, x16)

inst_294:
// rs1_val==2 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 6, x14, 1104, x16)

inst_295:
// rs1_val==2 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 858993460, x14, 1108, x16)

inst_296:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 1717986919, x14, 1112, x16)

inst_297:
// rs1_val==2 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, -46339, x14, 1116, x16)

inst_298:
// rs1_val==2 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2, 46341, x14, 1120, x16)

inst_299:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 3, x14, 1124, x16)

inst_300:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 1431655765, x14, 1128, x16)

inst_301:
// rs1_val==1431655764 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, -1431655766, x14, 1132, x16)

inst_302:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 5, x14, 1136, x16)

inst_303:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 858993459, x14, 1140, x16)

inst_304:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 1717986918, x14, 1144, x16)

inst_305:
// rs1_val==1431655764 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, -46340, x14, 1148, x16)

inst_306:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 46340, x14, 1152, x16)

inst_307:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 2, x14, 1156, x16)

inst_308:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 1431655764, x14, 1160, x16)

inst_309:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 0, x14, 1164, x16)

inst_310:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 4, x14, 1168, x16)

inst_311:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 858993458, x14, 1172, x16)

inst_312:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 1717986917, x14, 1176, x16)

inst_313:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 46339, x14, 1180, x16)

inst_314:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 1431655766, x14, 1184, x16)

inst_315:
// rs1_val==1431655764 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, -1431655765, x14, 1188, x16)

inst_316:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 6, x14, 1192, x16)

inst_317:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 858993460, x14, 1196, x16)

inst_318:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 1717986919, x14, 1200, x16)

inst_319:
// rs1_val==1431655764 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, -46339, x14, 1204, x16)

inst_320:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655764;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655764, 46341, x14, 1208, x16)

inst_321:
// rs1_val==0 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 3, x14, 1212, x16)

inst_322:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 1431655765, x14, 1216, x16)

inst_323:
// rs1_val==0 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, -1431655766, x14, 1220, x16)

inst_324:
// rs1_val==0 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 5, x14, 1224, x16)

inst_325:
// rs1_val==0 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 858993459, x14, 1228, x16)

inst_326:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 1717986918, x14, 1232, x16)

inst_327:
// rs1_val==0 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, -46340, x14, 1236, x16)

inst_328:
// rs1_val==0 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 46340, x14, 1240, x16)

inst_329:
// rs1_val==-1431655765 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, -1431655765, x14, 1244, x16)

inst_330:
// rs1_val==-1431655765 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 6, x14, 1248, x16)

inst_331:
// rs1_val==-1431655765 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 858993460, x14, 1252, x16)

inst_332:
// rs1_val==-1431655765 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 1717986919, x14, 1256, x16)

inst_333:
// rs1_val==-1431655765 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, -46339, x14, 1260, x16)

inst_334:
// rs1_val==-1431655765 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 46341, x14, 1264, x16)

inst_335:
// rs1_val==6 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 3, x14, 1268, x16)

inst_336:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 1431655765, x14, 1272, x16)

inst_337:
// rs1_val==6 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, -1431655766, x14, 1276, x16)

inst_338:
// rs1_val==6 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 5, x14, 1280, x16)

inst_339:
// rs1_val==6 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 858993459, x14, 1284, x16)

inst_340:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 1717986918, x14, 1288, x16)

inst_341:
// rs1_val==6 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, -46340, x14, 1292, x16)

inst_342:
// rs1_val==6 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 46340, x14, 1296, x16)

inst_343:
// rs1_val==6 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 2, x14, 1300, x16)

inst_344:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 1431655764, x14, 1304, x16)

inst_345:
// rs1_val==6 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 0, x14, 1308, x16)

inst_346:
// rs1_val==6 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 4, x14, 1312, x16)

inst_347:
// rs1_val==6 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 858993458, x14, 1316, x16)

inst_348:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 1717986917, x14, 1320, x16)

inst_349:
// rs1_val==6 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 46339, x14, 1324, x16)

inst_350:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 1431655766, x14, 1328, x16)

inst_351:
// rs1_val==6 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, -1431655765, x14, 1332, x16)

inst_352:
// rs1_val==6 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 6, x14, 1336, x16)

inst_353:
// rs1_val==6 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 858993460, x14, 1340, x16)

inst_354:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 1717986919, x14, 1344, x16)

inst_355:
// rs1_val==6 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, -46339, x14, 1348, x16)

inst_356:
// rs1_val==6 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 6, 46341, x14, 1352, x16)

inst_357:
// rs1_val==858993460 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 3, x14, 1356, x16)

inst_358:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 1431655765, x14, 1360, x16)

inst_359:
// rs1_val==858993460 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, -1431655766, x14, 1364, x16)

inst_360:
// rs1_val==858993460 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 5, x14, 1368, x16)

inst_361:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 858993459, x14, 1372, x16)

inst_362:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 1717986918, x14, 1376, x16)

inst_363:
// rs1_val==858993460 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, -46340, x14, 1380, x16)

inst_364:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 46340, x14, 1384, x16)

inst_365:
// rs1_val==858993460 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 2, x14, 1388, x16)

inst_366:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 1431655764, x14, 1392, x16)

inst_367:
// rs1_val==858993460 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 0, x14, 1396, x16)

inst_368:
// rs1_val==858993460 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 4, x14, 1400, x16)

inst_369:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 858993458, x14, 1404, x16)

inst_370:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 1717986917, x14, 1408, x16)

inst_371:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 46339, x14, 1412, x16)

inst_372:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 1431655766, x14, 1416, x16)

inst_373:
// rs1_val==858993460 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, -1431655765, x14, 1420, x16)

inst_374:
// rs1_val==858993460 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 6, x14, 1424, x16)

inst_375:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 1717986919, x14, 1428, x16)

inst_376:
// rs1_val==858993460 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, -46339, x14, 1432, x16)

inst_377:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993460;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993460, 46341, x14, 1436, x16)

inst_378:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 3, x14, 1440, x16)

inst_379:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 1431655765, x14, 1444, x16)

inst_380:
// rs1_val==1717986919 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, -1431655766, x14, 1448, x16)

inst_381:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 5, x14, 1452, x16)

inst_382:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 858993459, x14, 1456, x16)

inst_383:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 1717986918, x14, 1460, x16)

inst_384:
// rs1_val==1717986919 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, -46340, x14, 1464, x16)

inst_385:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 46340, x14, 1468, x16)

inst_386:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 2, x14, 1472, x16)

inst_387:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 1431655764, x14, 1476, x16)

inst_388:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 0, x14, 1480, x16)

inst_389:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 4, x14, 1484, x16)

inst_390:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 858993458, x14, 1488, x16)

inst_391:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 1717986917, x14, 1492, x16)

inst_392:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 46339, x14, 1496, x16)

inst_393:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 1431655766, x14, 1500, x16)

inst_394:
// rs1_val==1717986919 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, -1431655765, x14, 1504, x16)

inst_395:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 6, x14, 1508, x16)

inst_396:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 858993460, x14, 1512, x16)

inst_397:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 1717986919, x14, 1516, x16)

inst_398:
// rs1_val==1717986919 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, -46339, x14, 1520, x16)

inst_399:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986919;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986919, 46341, x14, 1524, x16)

inst_400:
// rs1_val==-46339 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 3, x14, 1528, x16)

inst_401:
// rs1_val==-46339 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 1431655765, x14, 1532, x16)

inst_402:
// rs1_val==-46339 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, -1431655766, x14, 1536, x16)

inst_403:
// rs1_val==-46339 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 5, x14, 1540, x16)

inst_404:
// rs1_val==-46339 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 858993459, x14, 1544, x16)

inst_405:
// rs1_val==-46339 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 1717986918, x14, 1548, x16)

inst_406:
// rs1_val==-46339 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, -46340, x14, 1552, x16)

inst_407:
// rs1_val==-46339 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 46340, x14, 1556, x16)

inst_408:
// rs1_val==-46339 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 2, x14, 1560, x16)

inst_409:
// rs1_val==-46339 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 1431655764, x14, 1564, x16)

inst_410:
// rs1_val==-46339 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 0, x14, 1568, x16)

inst_411:
// rs1_val==-46339 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 4, x14, 1572, x16)

inst_412:
// rs1_val==-46339 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 858993458, x14, 1576, x16)

inst_413:
// rs1_val==-46339 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 1717986917, x14, 1580, x16)

inst_414:
// rs1_val==-46339 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 46339, x14, 1584, x16)

inst_415:
// rs1_val==-46339 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 1431655766, x14, 1588, x16)

inst_416:
// rs1_val==-46339 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, -1431655765, x14, 1592, x16)

inst_417:
// rs1_val==-46339 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 6, x14, 1596, x16)

inst_418:
// rs1_val==-46339 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 858993460, x14, 1600, x16)

inst_419:
// rs1_val==-46339 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 1717986919, x14, 1604, x16)

inst_420:
// rs1_val==-46339 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, -46339, x14, 1608, x16)

inst_421:
// rs1_val==-46339 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-46339;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -46339, 46341, x14, 1612, x16)

inst_422:
// rs1_val==46341 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 3, x14, 1616, x16)

inst_423:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 1431655765, x14, 1620, x16)

inst_424:
// rs1_val==46341 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, -1431655766, x14, 1624, x16)

inst_425:
// rs1_val==46341 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 5, x14, 1628, x16)

inst_426:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 858993459, x14, 1632, x16)

inst_427:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 1717986918, x14, 1636, x16)

inst_428:
// rs1_val==46341 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, -46340, x14, 1640, x16)

inst_429:
// rs1_val==46341 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 46340, x14, 1644, x16)

inst_430:
// rs1_val==46341 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 2, x14, 1648, x16)

inst_431:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 1431655764, x14, 1652, x16)

inst_432:
// rs1_val==46341 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 0, x14, 1656, x16)

inst_433:
// rs1_val==46341 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 4, x14, 1660, x16)

inst_434:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 858993458, x14, 1664, x16)

inst_435:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 1717986917, x14, 1668, x16)

inst_436:
// rs1_val==46341 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 46339, x14, 1672, x16)

inst_437:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 1431655766, x14, 1676, x16)

inst_438:
// rs1_val==46341 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, -1431655765, x14, 1680, x16)

inst_439:
// rs1_val==46341 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 6, x14, 1684, x16)

inst_440:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 858993460, x14, 1688, x16)

inst_441:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 1717986919, x14, 1692, x16)

inst_442:
// rs1_val==46341 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, -46339, x14, 1696, x16)

inst_443:
// rs1_val==46341 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46341;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46341, 46341, x14, 1700, x16)

inst_444:
// rs1_val==0 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 2, x14, 1704, x16)

inst_445:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 1431655764, x14, 1708, x16)

inst_446:
// rs1_val==0 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 0, x14, 1712, x16)

inst_447:
// rs1_val==0 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 4, x14, 1716, x16)

inst_448:
// rs1_val==0 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 858993458, x14, 1720, x16)

inst_449:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 1717986917, x14, 1724, x16)

inst_450:
// rs1_val==0 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 46339, x14, 1728, x16)

inst_451:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 1431655766, x14, 1732, x16)

inst_452:
// rs1_val==0 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, -1431655765, x14, 1736, x16)

inst_453:
// rs1_val==0 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 6, x14, 1740, x16)

inst_454:
// rs1_val==0 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 858993460, x14, 1744, x16)

inst_455:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 1717986919, x14, 1748, x16)

inst_456:
// rs1_val==0 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, -46339, x14, 1752, x16)

inst_457:
// rs1_val==0 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:0;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 0, 46341, x14, 1756, x16)

inst_458:
// rs1_val==4 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 3, x14, 1760, x16)

inst_459:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 1431655765, x14, 1764, x16)

inst_460:
// rs1_val==4 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, -1431655766, x14, 1768, x16)

inst_461:
// rs1_val==4 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 5, x14, 1772, x16)

inst_462:
// rs1_val==4 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 858993459, x14, 1776, x16)

inst_463:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 1717986918, x14, 1780, x16)

inst_464:
// rs1_val==4 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, -46340, x14, 1784, x16)

inst_465:
// rs1_val==4 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 46340, x14, 1788, x16)

inst_466:
// rs1_val==4 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 2, x14, 1792, x16)

inst_467:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 1431655764, x14, 1796, x16)

inst_468:
// rs1_val==4 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 0, x14, 1800, x16)

inst_469:
// rs1_val==4 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 4, x14, 1804, x16)

inst_470:
// rs1_val==4 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 858993458, x14, 1808, x16)

inst_471:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 1717986917, x14, 1812, x16)

inst_472:
// rs1_val==4 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 46339, x14, 1816, x16)

inst_473:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 1431655766, x14, 1820, x16)

inst_474:
// rs1_val==4 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, -1431655765, x14, 1824, x16)

inst_475:
// rs1_val==4 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 6, x14, 1828, x16)

inst_476:
// rs1_val==4 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 858993460, x14, 1832, x16)

inst_477:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 1717986919, x14, 1836, x16)

inst_478:
// rs1_val==4 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, -46339, x14, 1840, x16)

inst_479:
// rs1_val==4 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 4, 46341, x14, 1844, x16)

inst_480:
// rs1_val==858993458 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 3, x14, 1848, x16)

inst_481:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 1431655765, x14, 1852, x16)

inst_482:
// rs1_val==858993458 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, -1431655766, x14, 1856, x16)

inst_483:
// rs1_val==858993458 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 5, x14, 1860, x16)

inst_484:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 858993459, x14, 1864, x16)

inst_485:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 1717986918, x14, 1868, x16)

inst_486:
// rs1_val==858993458 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, -46340, x14, 1872, x16)

inst_487:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 46340, x14, 1876, x16)

inst_488:
// rs1_val==858993458 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 2, x14, 1880, x16)

inst_489:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 1431655764, x14, 1884, x16)

inst_490:
// rs1_val==858993458 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 0, x14, 1888, x16)

inst_491:
// rs1_val==858993458 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 4, x14, 1892, x16)

inst_492:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 858993458, x14, 1896, x16)

inst_493:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 1717986917, x14, 1900, x16)

inst_494:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 46339, x14, 1904, x16)

inst_495:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 1431655766, x14, 1908, x16)

inst_496:
// rs1_val==858993458 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, -1431655765, x14, 1912, x16)

inst_497:
// rs1_val==858993458 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 6, x14, 1916, x16)

inst_498:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 858993460, x14, 1920, x16)

inst_499:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 1717986919, x14, 1924, x16)

inst_500:
// rs1_val==858993458 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, -46339, x14, 1928, x16)

inst_501:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:858993458;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 858993458, 46341, x14, 1932, x16)

inst_502:
// rs1_val==1717986917 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 3, x14, 1936, x16)

inst_503:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 1431655765, x14, 1940, x16)

inst_504:
// rs1_val==1717986917 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, -1431655766, x14, 1944, x16)

inst_505:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 5, x14, 1948, x16)

inst_506:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 858993459, x14, 1952, x16)

inst_507:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 1717986918, x14, 1956, x16)

inst_508:
// rs1_val==1717986917 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, -46340, x14, 1960, x16)

inst_509:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 46340, x14, 1964, x16)

inst_510:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 2, x14, 1968, x16)

inst_511:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 1431655764, x14, 1972, x16)

inst_512:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 0, x14, 1976, x16)

inst_513:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 4, x14, 1980, x16)

inst_514:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 858993458, x14, 1984, x16)

inst_515:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 1717986917, x14, 1988, x16)

inst_516:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 46339, x14, 1992, x16)

inst_517:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 1431655766, x14, 1996, x16)

inst_518:
// rs1_val==1717986917 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, -1431655765, x14, 2000, x16)

inst_519:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 6, x14, 2004, x16)

inst_520:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 858993460, x14, 2008, x16)

inst_521:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 1717986919, x14, 2012, x16)

inst_522:
// rs1_val==1717986917 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, -46339, x14, 2016, x16)

inst_523:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1717986917;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1717986917, 46341, x14, 2020, x16)

inst_524:
// rs1_val==46339 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 3, x14, 2024, x16)

inst_525:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 1431655765, x14, 2028, x16)

inst_526:
// rs1_val==46339 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, -1431655766, x14, 2032, x16)

inst_527:
// rs1_val==46339 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 5, x14, 2036, x16)

inst_528:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 858993459, x14, 2040, x16)

inst_529:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 1717986918, x14, 2044, x16)
RVTEST_SIGBASE( x14,signature_x14_1)

inst_530:
// rs1_val==46339 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, -46340, x14, 0, x16)

inst_531:
// rs1_val==46339 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 46340, x14, 4, x16)

inst_532:
// rs1_val==46339 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 2, x14, 8, x16)

inst_533:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 1431655764, x14, 12, x16)

inst_534:
// rs1_val==46339 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 0, x14, 16, x16)

inst_535:
// rs1_val==46339 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 4, x14, 20, x16)

inst_536:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 858993458, x14, 24, x16)

inst_537:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 1717986917, x14, 28, x16)

inst_538:
// rs1_val==46339 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 46339, x14, 32, x16)

inst_539:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 1431655766, x14, 36, x16)

inst_540:
// rs1_val==46339 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, -1431655765, x14, 40, x16)

inst_541:
// rs1_val==46339 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 6, x14, 44, x16)

inst_542:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 858993460, x14, 48, x16)

inst_543:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 1717986919, x14, 52, x16)

inst_544:
// rs1_val==46339 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, -46339, x14, 56, x16)

inst_545:
// rs1_val==46339 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:46339;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 46339, 46341, x14, 60, x16)

inst_546:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 3, x14, 64, x16)

inst_547:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 1431655765, x14, 68, x16)

inst_548:
// rs1_val==1431655766 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, -1431655766, x14, 72, x16)

inst_549:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 5, x14, 76, x16)

inst_550:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 858993459, x14, 80, x16)

inst_551:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 1717986918, x14, 84, x16)

inst_552:
// rs1_val==1431655766 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, -46340, x14, 88, x16)

inst_553:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 46340, x14, 92, x16)

inst_554:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 2, x14, 96, x16)

inst_555:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 1431655764, x14, 100, x16)

inst_556:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 0, x14, 104, x16)

inst_557:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 4, x14, 108, x16)

inst_558:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 858993458, x14, 112, x16)

inst_559:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 1717986917, x14, 116, x16)

inst_560:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 46339, x14, 120, x16)

inst_561:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 1431655766, x14, 124, x16)

inst_562:
// rs1_val==1431655766 and rs2_val==-1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:-1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, -1431655765, x14, 128, x16)

inst_563:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:6
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 6, x14, 132, x16)

inst_564:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:858993460
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 858993460, x14, 136, x16)

inst_565:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:1717986919
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 1717986919, x14, 140, x16)

inst_566:
// rs1_val==1431655766 and rs2_val==-46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:-46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, -46339, x14, 144, x16)

inst_567:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:1431655766;  op2val:46341
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 1431655766, 46341, x14, 148, x16)

inst_568:
// rs1_val==-1431655765 and rs2_val==3, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:3
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 3, x14, 152, x16)

inst_569:
// rs1_val==-1431655765 and rs2_val==1431655765, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:1431655765
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 1431655765, x14, 156, x16)

inst_570:
// rs1_val==-1431655765 and rs2_val==-1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:-1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, -1431655766, x14, 160, x16)

inst_571:
// rs1_val==-1431655765 and rs2_val==5, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:5
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 5, x14, 164, x16)

inst_572:
// rs1_val==-1431655765 and rs2_val==858993459, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:858993459
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 858993459, x14, 168, x16)

inst_573:
// rs1_val==-1431655765 and rs2_val==1717986918, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:1717986918
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 1717986918, x14, 172, x16)

inst_574:
// rs1_val==-1431655765 and rs2_val==-46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:-46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, -46340, x14, 176, x16)

inst_575:
// rs1_val==-1431655765 and rs2_val==46340, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:46340
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 46340, x14, 180, x16)

inst_576:
// rs1_val==-1431655765 and rs2_val==2, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:2
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 2, x14, 184, x16)

inst_577:
// rs1_val==-1431655765 and rs2_val==1431655764, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:1431655764
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 1431655764, x14, 188, x16)

inst_578:
// rs1_val==-1431655765 and rs2_val==0, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 0, x14, 192, x16)

inst_579:
// rs1_val==-1431655765 and rs2_val==4, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:4
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 4, x14, 196, x16)

inst_580:
// rs1_val==-1431655765 and rs2_val==858993458, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:858993458
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 858993458, x14, 200, x16)

inst_581:
// rs1_val==-1431655765 and rs2_val==1717986917, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:1717986917
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 1717986917, x14, 204, x16)

inst_582:
// rs1_val==-1431655765 and rs2_val==46339, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:46339
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 46339, x14, 208, x16)

inst_583:
// rs1_val==-1431655765 and rs2_val==1431655766, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655765;  op2val:1431655766
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655765, 1431655766, x14, 212, x16)

inst_584:
// rs1_val < 0 and rs2_val > 0, rs1_val == -262145, rs2_val == 1
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:1
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -262145, 1, x14, 216, x16)

inst_585:
// rs2_val == 0, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:2147483647;  op2val:0
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, 2147483647, 0, x14, 220, x16)

inst_586:
// rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, rs2_val == -16777217
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-2147483648;  op2val:-16777217
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -2147483648, -16777217, x14, 224, x16)

inst_587:
// rs2_val == 64, 
// opcode: remu ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:64
TEST_RR_OP(remu, x12, x10, x11, 0x00000000, -1431655766, 64, x14, 228, x16)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x14_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 58*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
