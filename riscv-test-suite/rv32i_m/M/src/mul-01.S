
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Wed Oct 25 12:11:39 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/ali/.WORKDIR/riscv-ctg-alitariq/sample_cgfs/dataset.cgf \
//                  --cgf /home/ali/.WORKDIR/riscv-ctg-alitariq/sample_cgfs/rv32im.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mul instruction of the RISC-V RV32M extension for the mul covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IM")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*M.*);def TEST_CASE_1=True;",mul)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs1_val != rs2_val, rs1_val==46341 and rs2_val==-46339, rs1_val > 0 and rs2_val < 0
// opcode: mul ; op1:x31; op2:x31; dest:x31; op1val:0xb505;  op2val:0xb505
TEST_RR_OP(mul, x31, x31, x31, 0x80001219, 0xb505, 0xb505, x1, 0*XLEN/8, x2)

inst_1:
// rs1 == rd != rs2, rs1==x30, rs2==x29, rd==x30, rs1_val < 0 and rs2_val < 0, rs1_val==-46339 and rs2_val==-46339, rs1_val == rs2_val
// opcode: mul ; op1:x30; op2:x29; dest:x30; op1val:-0xb503;  op2val:-0xb503
TEST_RR_OP(mul, x30, x30, x29, 0x7ffd3e09, -0xb503, -0xb503, x1, 1*XLEN/8, x2)

inst_2:
// rs2 == rd != rs1, rs1==x29, rs2==x28, rd==x28, rs1_val < 0 and rs2_val > 0, rs1_val==-46339 and rs2_val==46341
// opcode: mul ; op1:x29; op2:x28; dest:x28; op1val:-0xb503;  op2val:0xb505
TEST_RR_OP(mul, x28, x29, x28, 0x800157f1, -0xb503, 0xb505, x1, 2*XLEN/8, x2)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x30, rd==x29, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: mul ; op1:x28; op2:x30; dest:x29; op1val:-0x80000000;  op2val:0xb505
TEST_RR_OP(mul, x29, x28, x30, 0x80000000, -0x80000000, 0xb505, x1, 3*XLEN/8, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 2147483647
// opcode: mul ; op1:x26; op2:x26; dest:x27; op1val:0x7fffffff;  op2val:0x7fffffff
TEST_RR_OP(mul, x27, x26, x26, 0x1, 0x7fffffff, 0x7fffffff, x1, 4*XLEN/8, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, rs1_val == -0x80000000 and rs2_val == -0x01, 
// opcode: mul ; op1:x27; op2:x25; dest:x26; op1val:-0x80000000;  op2val:-0x1
TEST_RR_OP(mul, x26, x27, x25, 0x80000000, -0x80000000, -0x1, x1, 5*XLEN/8, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, rs2_val == -2, 
// opcode: mul ; op1:x24; op2:x27; dest:x25; op1val:0xb505;  op2val:-0x2
TEST_RR_OP(mul, x25, x24, x27, 0xfffe95f6, 0xb505, -0x2, x1, 6*XLEN/8, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, rs2_val == -3, 
// opcode: mul ; op1:x25; op2:x23; dest:x24; op1val:0xb505;  op2val:-0x3
TEST_RR_OP(mul, x24, x25, x23, 0xfffde0f1, 0xb505, -0x3, x1, 7*XLEN/8, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, rs2_val == -5, 
// opcode: mul ; op1:x22; op2:x24; dest:x23; op1val:0xb505;  op2val:-0x5
TEST_RR_OP(mul, x23, x22, x24, 0xfffc76e7, 0xb505, -0x5, x1, 8*XLEN/8, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, rs2_val == -9, 
// opcode: mul ; op1:x23; op2:x21; dest:x22; op1val:0xb505;  op2val:-0x9
TEST_RR_OP(mul, x22, x23, x21, 0xfff9a2d3, 0xb505, -0x9, x1, 9*XLEN/8, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, rs2_val == -17, 
// opcode: mul ; op1:x20; op2:x22; dest:x21; op1val:0xb505;  op2val:-0x11
TEST_RR_OP(mul, x21, x20, x22, 0xfff3faab, 0xb505, -0x11, x1, 10*XLEN/8, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, rs2_val == -33, 
// opcode: mul ; op1:x21; op2:x19; dest:x20; op1val:0xb505;  op2val:-0x21
TEST_RR_OP(mul, x20, x21, x19, 0xffe8aa5b, 0xb505, -0x21, x1, 11*XLEN/8, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, rs2_val == -65, 
// opcode: mul ; op1:x18; op2:x20; dest:x19; op1val:0xb505;  op2val:-0x41
TEST_RR_OP(mul, x19, x18, x20, 0xffd209bb, 0xb505, -0x41, x1, 12*XLEN/8, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, rs2_val == -129, 
// opcode: mul ; op1:x19; op2:x17; dest:x18; op1val:0xb505;  op2val:-0x81
TEST_RR_OP(mul, x18, x19, x17, 0xffa4c87b, 0xb505, -0x81, x1, 13*XLEN/8, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, rs2_val == -257, 
// opcode: mul ; op1:x16; op2:x18; dest:x17; op1val:0xb505;  op2val:-0x101
TEST_RR_OP(mul, x17, x16, x18, 0xff4a45fb, 0xb505, -0x101, x1, 14*XLEN/8, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, rs2_val == -513, 
// opcode: mul ; op1:x17; op2:x15; dest:x16; op1val:0xb505;  op2val:-0x201
TEST_RR_OP(mul, x16, x17, x15, 0xfe9540fb, 0xb505, -0x201, x1, 15*XLEN/8, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, rs2_val == -1025, 
// opcode: mul ; op1:x14; op2:x16; dest:x15; op1val:0xb505;  op2val:-0x401
TEST_RR_OP(mul, x15, x14, x16, 0xfd2b36fb, 0xb505, -0x401, x1, 16*XLEN/8, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, rs2_val == -2049, 
// opcode: mul ; op1:x15; op2:x13; dest:x14; op1val:0xb505;  op2val:-0x801
TEST_RR_OP(mul, x14, x15, x13, 0xfa5722fb, 0xb505, -0x801, x1, 17*XLEN/8, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, rs2_val == -4097, 
// opcode: mul ; op1:x12; op2:x14; dest:x13; op1val:0xb505;  op2val:-0x1001
TEST_RR_OP(mul, x13, x12, x14, 0xf4aefafb, 0xb505, -0x1001, x1, 18*XLEN/8, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, rs2_val == -8193, 
// opcode: mul ; op1:x13; op2:x11; dest:x12; op1val:0xb505;  op2val:-0x2001
TEST_RR_OP(mul, x12, x13, x11, 0xe95eaafb, 0xb505, -0x2001, x1, 19*XLEN/8, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, rs2_val == -16385, 
// opcode: mul ; op1:x10; op2:x12; dest:x11; op1val:0xb505;  op2val:-0x4001
TEST_RR_OP(mul, x11, x10, x12, 0xd2be0afb, 0xb505, -0x4001, x1, 20*XLEN/8, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, rs2_val == -32769, 
// opcode: mul ; op1:x11; op2:x9; dest:x10; op1val:0xb505;  op2val:-0x8001
TEST_RR_OP(mul, x10, x11, x9, 0xa57ccafb, 0xb505, -0x8001, x1, 21*XLEN/8, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, rs2_val == -65537, 
// opcode: mul ; op1:x8; op2:x10; dest:x9; op1val:0xb505;  op2val:-0x10001
TEST_RR_OP(mul, x9, x8, x10, 0x4afa4afb, 0xb505, -0x10001, x1, 22*XLEN/8, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, rs2_val == -131073, 
// opcode: mul ; op1:x9; op2:x7; dest:x8; op1val:0xb505;  op2val:-0x20001
TEST_RR_OP(mul, x8, x9, x7, 0x95f54afb, 0xb505, -0x20001, x1, 23*XLEN/8, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, rs2_val == -262145, 
// opcode: mul ; op1:x6; op2:x8; dest:x7; op1val:0xb505;  op2val:-0x40001
TEST_RR_OP(mul, x7, x6, x8, 0x2beb4afb, 0xb505, -0x40001, x1, 24*XLEN/8, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x7, rs2==x5, rd==x6, rs2_val == -524289, 
// opcode: mul ; op1:x7; op2:x5; dest:x6; op1val:0xb505;  op2val:-0x80001
TEST_RR_OP(mul, x6, x7, x5, 0x57d74afb, 0xb505, -0x80001, x8, 0*XLEN/8, x9)

inst_26:
// rs1==x4, rs2==x6, rd==x5, rs2_val == -1048577, 
// opcode: mul ; op1:x4; op2:x6; dest:x5; op1val:0xb505;  op2val:-0x100001
TEST_RR_OP(mul, x5, x4, x6, 0xafaf4afb, 0xb505, -0x100001, x8, 1*XLEN/8, x9)

inst_27:
// rs1==x5, rs2==x3, rd==x4, rs2_val == -2097153, 
// opcode: mul ; op1:x5; op2:x3; dest:x4; op1val:0xb505;  op2val:-0x200001
TEST_RR_OP(mul, x4, x5, x3, 0x5f5f4afb, 0xb505, -0x200001, x8, 2*XLEN/8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3, rs2_val == -4194305, 
// opcode: mul ; op1:x2; op2:x4; dest:x3; op1val:0xb505;  op2val:-0x400001
TEST_RR_OP(mul, x3, x2, x4, 0xbebf4afb, 0xb505, -0x400001, x8, 3*XLEN/8, x9)

inst_29:
// rs1==x3, rs2==x1, rd==x2, rs2_val == -8388609, 
// opcode: mul ; op1:x3; op2:x1; dest:x2; op1val:0xb505;  op2val:-0x800001
TEST_RR_OP(mul, x2, x3, x1, 0x7d7f4afb, 0xb505, -0x800001, x8, 4*XLEN/8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1, rs2_val == -16777217, 
// opcode: mul ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:-0x1000001
TEST_RR_OP(mul, x1, x0, x2, 0x0, 0x0, -0x1000001, x8, 5*XLEN/8, x9)

inst_31:
// rs1==x1, rs2_val == -33554433, 
// opcode: mul ; op1:x1; op2:x30; dest:x31; op1val:0xb505;  op2val:-0x2000001
TEST_RR_OP(mul, x31, x1, x30, 0xf5ff4afb, 0xb505, -0x2000001, x8, 6*XLEN/8, x9)

inst_32:
// rs2==x0, rs2_val == -67108865, 
// opcode: mul ; op1:x30; op2:x0; dest:x31; op1val:0xb505;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x0, 0x0, 0xb505, 0x0, x8, 7*XLEN/8, x9)

inst_33:
// rd==x0, rs2_val == -134217729, 
// opcode: mul ; op1:x31; op2:x30; dest:x0; op1val:0xb505;  op2val:-0x8000001
TEST_RR_OP(mul, x0, x31, x30, 0, 0xb505, -0x8000001, x8, 8*XLEN/8, x9)

inst_34:
// rs2_val == -268435457, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x10000001
TEST_RR_OP(mul, x31, x30, x29, 0xafff4afb, 0xb505, -0x10000001, x8, 9*XLEN/8, x9)

inst_35:
// rs2_val == -536870913, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x20000001
TEST_RR_OP(mul, x31, x30, x29, 0x5fff4afb, 0xb505, -0x20000001, x8, 10*XLEN/8, x9)

inst_36:
// rs2_val == -1073741825, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x40000001
TEST_RR_OP(mul, x31, x30, x29, 0xbfff4afb, 0xb505, -0x40000001, x8, 11*XLEN/8, x9)

inst_37:
// rs2_val == 2147483647, rs2_val == (2**(xlen-1)-1)
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x7fffffff
TEST_RR_OP(mul, x31, x30, x29, 0x7fff4afb, 0xb505, 0x7fffffff, x8, 12*XLEN/8, x9)

inst_38:
// rs1_val == -2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x2;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfffe95f6, -0x2, 0xb505, x8, 13*XLEN/8, x9)

inst_39:
// rs1_val == -3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x3;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfffde0f1, -0x3, 0xb505, x8, 14*XLEN/8, x9)

inst_40:
// rs1_val == -5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x5;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfffc76e7, -0x5, 0xb505, x8, 15*XLEN/8, x9)

inst_41:
// rs1_val == -9, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x9;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfff9a2d3, -0x9, 0xb505, x8, 16*XLEN/8, x9)

inst_42:
// rs1_val == -17, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x11;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfff3faab, -0x11, 0xb505, x8, 17*XLEN/8, x9)

inst_43:
// rs1_val == -33, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x21;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xffe8aa5b, -0x21, 0xb505, x8, 18*XLEN/8, x9)

inst_44:
// rs1_val == -65, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x41;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xffd209bb, -0x41, 0xb505, x8, 19*XLEN/8, x9)

inst_45:
// rs1_val == -129, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x81;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xffa4c87b, -0x81, 0xb505, x8, 20*XLEN/8, x9)

inst_46:
// rs1_val == -257, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x101;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xff4a45fb, -0x101, 0xb505, x8, 21*XLEN/8, x9)

inst_47:
// rs1_val == -513, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x201;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfe9540fb, -0x201, 0xb505, x8, 22*XLEN/8, x9)

inst_48:
// rs1_val == -1025, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x401;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfd2b36fb, -0x401, 0xb505, x8, 23*XLEN/8, x9)

inst_49:
// rs1_val == -2049, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x801;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfa5722fb, -0x801, 0xb505, x8, 24*XLEN/8, x9)

inst_50:
// rs1_val == -4097, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x1001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xf4aefafb, -0x1001, 0xb505, x8, 25*XLEN/8, x9)

inst_51:
// rs1_val == -8193, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x2001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xe95eaafb, -0x2001, 0xb505, x8, 26*XLEN/8, x9)

inst_52:
// rs1_val == -16385, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x4001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xd2be0afb, -0x4001, 0xb505, x8, 27*XLEN/8, x9)

inst_53:
// rs1_val == -32769, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x8001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xa57ccafb, -0x8001, 0xb505, x8, 28*XLEN/8, x9)

inst_54:
// rs1_val == -65537, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x10001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x4afa4afb, -0x10001, 0xb505, x8, 29*XLEN/8, x9)

inst_55:
// rs1_val == -131073, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x20001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x95f54afb, -0x20001, 0xb505, x8, 30*XLEN/8, x9)

inst_56:
// rs1_val == -262145, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x40001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x2beb4afb, -0x40001, 0xb505, x8, 31*XLEN/8, x9)

inst_57:
// rs1_val == -524289, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x80001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x57d74afb, -0x80001, 0xb505, x8, 32*XLEN/8, x9)

inst_58:
// rs1_val == -1048577, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x100001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xafaf4afb, -0x100001, 0xb505, x8, 33*XLEN/8, x9)

inst_59:
// rs1_val == -2097153, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x200001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x5f5f4afb, -0x200001, 0xb505, x8, 34*XLEN/8, x9)

inst_60:
// rs1_val == -4194305, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x400001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xbebf4afb, -0x400001, 0xb505, x8, 35*XLEN/8, x9)

inst_61:
// rs1_val == -8388609, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x800001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x7d7f4afb, -0x800001, 0xb505, x8, 36*XLEN/8, x9)

inst_62:
// rs1_val == -16777217, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x1000001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xfaff4afb, -0x1000001, 0xb505, x8, 37*XLEN/8, x9)

inst_63:
// rs1_val == -33554433, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x2000001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xf5ff4afb, -0x2000001, 0xb505, x8, 38*XLEN/8, x9)

inst_64:
// rs1_val == -67108865, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x4000001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xebff4afb, -0x4000001, 0xb505, x8, 39*XLEN/8, x9)

inst_65:
// rs1_val == -134217729, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x8000001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xd7ff4afb, -0x8000001, 0xb505, x8, 40*XLEN/8, x9)

inst_66:
// rs1_val == -268435457, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x10000001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xafff4afb, -0x10000001, 0xb505, x8, 41*XLEN/8, x9)

inst_67:
// rs1_val == -536870913, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x20000001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x5fff4afb, -0x20000001, 0xb505, x8, 42*XLEN/8, x9)

inst_68:
// rs1_val == -1073741825, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x40000001;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xbfff4afb, -0x40000001, 0xb505, x8, 43*XLEN/8, x9)

inst_69:
// rs2_val == 1, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x1
TEST_RR_OP(mul, x31, x30, x29, 0xb505, 0xb505, 0x1, x8, 44*XLEN/8, x9)

inst_70:
// rs2_val == 2, rs1_val==46341 and rs2_val==2
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a, 0xb505, 0x2, x8, 45*XLEN/8, x9)

inst_71:
// rs2_val == 4, rs1_val==46341 and rs2_val==4
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x2d414, 0xb505, 0x4, x8, 46*XLEN/8, x9)

inst_72:
// rs2_val == 8, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x8
TEST_RR_OP(mul, x31, x30, x29, 0x5a828, 0xb505, 0x8, x8, 47*XLEN/8, x9)

inst_73:
// rs2_val == 16, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x10
TEST_RR_OP(mul, x31, x30, x29, 0xb5050, 0xb505, 0x10, x8, 48*XLEN/8, x9)

inst_74:
// rs2_val == 32, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x20
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a0, 0xb505, 0x20, x8, 49*XLEN/8, x9)

inst_75:
// rs2_val == 64, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x40
TEST_RR_OP(mul, x31, x30, x29, 0x2d4140, 0xb505, 0x40, x8, 50*XLEN/8, x9)

inst_76:
// rs2_val == 128, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x80
TEST_RR_OP(mul, x31, x30, x29, 0x5a8280, 0xb505, 0x80, x8, 51*XLEN/8, x9)

inst_77:
// rs2_val == 256, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x100
TEST_RR_OP(mul, x31, x30, x29, 0xb50500, 0xb505, 0x100, x8, 52*XLEN/8, x9)

inst_78:
// rs2_val == 512, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x200
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a00, 0xb505, 0x200, x8, 53*XLEN/8, x9)

inst_79:
// rs2_val == 1024, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x400
TEST_RR_OP(mul, x31, x30, x29, 0x2d41400, 0xb505, 0x400, x8, 54*XLEN/8, x9)

inst_80:
// rs2_val == 2048, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x800
TEST_RR_OP(mul, x31, x30, x29, 0x5a82800, 0xb505, 0x800, x8, 55*XLEN/8, x9)

inst_81:
// rs2_val == 4096, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x1000
TEST_RR_OP(mul, x31, x30, x29, 0xb505000, 0xb505, 0x1000, x8, 56*XLEN/8, x9)

inst_82:
// rs2_val == 8192, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x2000
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a000, 0xb505, 0x2000, x8, 57*XLEN/8, x9)

inst_83:
// rs2_val == 16384, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x4000
TEST_RR_OP(mul, x31, x30, x29, 0x2d414000, 0xb505, 0x4000, x8, 58*XLEN/8, x9)

inst_84:
// rs2_val == 32768, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x8000
TEST_RR_OP(mul, x31, x30, x29, 0x5a828000, 0xb505, 0x8000, x8, 59*XLEN/8, x9)

inst_85:
// rs2_val == 65536, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x10000
TEST_RR_OP(mul, x31, x30, x29, 0xb5050000, 0xb505, 0x10000, x8, 60*XLEN/8, x9)

inst_86:
// rs2_val == 131072, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x20000
TEST_RR_OP(mul, x31, x30, x29, 0x6a0a0000, 0xb505, 0x20000, x8, 61*XLEN/8, x9)

inst_87:
// rs2_val == 262144, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x40000
TEST_RR_OP(mul, x31, x30, x29, 0xd4140000, 0xb505, 0x40000, x8, 62*XLEN/8, x9)

inst_88:
// rs2_val == 524288, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x80000
TEST_RR_OP(mul, x31, x30, x29, 0xa8280000, 0xb505, 0x80000, x8, 63*XLEN/8, x9)

inst_89:
// rs2_val == 1048576, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x100000
TEST_RR_OP(mul, x31, x30, x29, 0x50500000, 0xb505, 0x100000, x8, 64*XLEN/8, x9)

inst_90:
// rs2_val == 2097152, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x200000
TEST_RR_OP(mul, x31, x30, x29, 0xa0a00000, 0xb505, 0x200000, x8, 65*XLEN/8, x9)

inst_91:
// rs2_val == 4194304, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x400000
TEST_RR_OP(mul, x31, x30, x29, 0x41400000, 0xb505, 0x400000, x8, 66*XLEN/8, x9)

inst_92:
// rs2_val == 8388608, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x800000
TEST_RR_OP(mul, x31, x30, x29, 0x82800000, 0xb505, 0x800000, x8, 67*XLEN/8, x9)

inst_93:
// rs2_val == 16777216, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x1000000
TEST_RR_OP(mul, x31, x30, x29, 0x5000000, 0xb505, 0x1000000, x8, 68*XLEN/8, x9)

inst_94:
// rs2_val == 33554432, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x2000000
TEST_RR_OP(mul, x31, x30, x29, 0xa000000, 0xb505, 0x2000000, x8, 69*XLEN/8, x9)

inst_95:
// rs2_val == 67108864, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x4000000
TEST_RR_OP(mul, x31, x30, x29, 0x14000000, 0xb505, 0x4000000, x8, 70*XLEN/8, x9)

inst_96:
// rs2_val == 134217728, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x8000000
TEST_RR_OP(mul, x31, x30, x29, 0x28000000, 0xb505, 0x8000000, x8, 71*XLEN/8, x9)

inst_97:
// rs2_val == 268435456, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x10000000
TEST_RR_OP(mul, x31, x30, x29, 0x50000000, 0xb505, 0x10000000, x8, 72*XLEN/8, x9)

inst_98:
// rs2_val == 536870912, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x20000000
TEST_RR_OP(mul, x31, x30, x29, 0xa0000000, 0xb505, 0x20000000, x8, 73*XLEN/8, x9)

inst_99:
// rs2_val == 1073741824, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x40000000
TEST_RR_OP(mul, x31, x30, x29, 0x40000000, 0xb505, 0x40000000, x8, 74*XLEN/8, x9)

inst_100:
// rs2_val == -2147483648, rs2_val == (-2**(xlen-1))
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x80000000
TEST_RR_OP(mul, x31, x30, x29, 0x80000000, 0xb505, -0x80000000, x8, 75*XLEN/8, x9)

inst_101:
// rs1_val == 1, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xb505, 0x1, 0xb505, x8, 76*XLEN/8, x9)

inst_102:
// rs1_val == 2, rs1_val==2 and rs2_val==46341
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a, 0x2, 0xb505, x8, 77*XLEN/8, x9)

inst_103:
// rs1_val == 4, rs1_val==4 and rs2_val==46341
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x2d414, 0x4, 0xb505, x8, 78*XLEN/8, x9)

inst_104:
// rs1_val == 8, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x5a828, 0x8, 0xb505, x8, 79*XLEN/8, x9)

inst_105:
// rs1_val == 16, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xb5050, 0x10, 0xb505, x8, 80*XLEN/8, x9)

inst_106:
// rs1_val == 32, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a0, 0x20, 0xb505, x8, 81*XLEN/8, x9)

inst_107:
// rs1_val == 64, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x2d4140, 0x40, 0xb505, x8, 82*XLEN/8, x9)

inst_108:
// rs1_val == 128, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x5a8280, 0x80, 0xb505, x8, 83*XLEN/8, x9)

inst_109:
// rs1_val == 256, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xb50500, 0x100, 0xb505, x8, 84*XLEN/8, x9)

inst_110:
// rs1_val == 512, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a00, 0x200, 0xb505, x8, 85*XLEN/8, x9)

inst_111:
// rs1_val == 1024, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x2d41400, 0x400, 0xb505, x8, 86*XLEN/8, x9)

inst_112:
// rs1_val == 2048, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x5a82800, 0x800, 0xb505, x8, 87*XLEN/8, x9)

inst_113:
// rs1_val == 4096, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xb505000, 0x1000, 0xb505, x8, 88*XLEN/8, x9)

inst_114:
// rs1_val == 8192, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x16a0a000, 0x2000, 0xb505, x8, 89*XLEN/8, x9)

inst_115:
// rs1_val == 16384, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x2d414000, 0x4000, 0xb505, x8, 90*XLEN/8, x9)

inst_116:
// rs1_val == 32768, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x5a828000, 0x8000, 0xb505, x8, 91*XLEN/8, x9)

inst_117:
// rs1_val == 65536, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xb5050000, 0x10000, 0xb505, x8, 92*XLEN/8, x9)

inst_118:
// rs1_val == 131072, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x6a0a0000, 0x20000, 0xb505, x8, 93*XLEN/8, x9)

inst_119:
// rs1_val == 262144, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xd4140000, 0x40000, 0xb505, x8, 94*XLEN/8, x9)

inst_120:
// rs1_val == 524288, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xa8280000, 0x80000, 0xb505, x8, 95*XLEN/8, x9)

inst_121:
// rs1_val == 1048576, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x50500000, 0x100000, 0xb505, x8, 96*XLEN/8, x9)

inst_122:
// rs1_val == 2097152, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xa0a00000, 0x200000, 0xb505, x8, 97*XLEN/8, x9)

inst_123:
// rs1_val == 4194304, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x41400000, 0x400000, 0xb505, x8, 98*XLEN/8, x9)

inst_124:
// rs1_val == 8388608, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x82800000, 0x800000, 0xb505, x8, 99*XLEN/8, x9)

inst_125:
// rs1_val == 16777216, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x5000000, 0x1000000, 0xb505, x8, 100*XLEN/8, x9)

inst_126:
// rs1_val == 33554432, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xa000000, 0x2000000, 0xb505, x8, 101*XLEN/8, x9)

inst_127:
// rs1_val == 67108864, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x14000000, 0x4000000, 0xb505, x8, 102*XLEN/8, x9)

inst_128:
// rs1_val == 134217728, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x28000000, 0x8000000, 0xb505, x8, 103*XLEN/8, x9)

inst_129:
// rs1_val == 268435456, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x50000000, 0x10000000, 0xb505, x8, 104*XLEN/8, x9)

inst_130:
// rs1_val == 536870912, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xa0000000, 0x20000000, 0xb505, x8, 105*XLEN/8, x9)

inst_131:
// rs1_val == 1073741824, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x40000000, 0x40000000, 0xb505, x8, 106*XLEN/8, x9)

inst_132:
// rs1_val==3 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x9, 0x3, 0x3, x8, 107*XLEN/8, x9)

inst_133:
// rs1_val==3 and rs2_val==1431655765, rs2_val == 1431655765
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xffffffff, 0x3, 0x55555555, x8, 108*XLEN/8, x9)

inst_134:
// rs1_val==3 and rs2_val==-1431655766, rs2_val == -1431655766
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffe, 0x3, -0x55555556, x8, 109*XLEN/8, x9)

inst_135:
// rs1_val==3 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xf, 0x3, 0x5, x8, 110*XLEN/8, x9)

inst_136:
// rs1_val==3 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x99999999, 0x3, 0x33333333, x8, 111*XLEN/8, x9)

inst_137:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x33333332, 0x3, 0x66666666, x8, 112*XLEN/8, x9)

inst_138:
// rs1_val==3 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xfffde0f4, 0x3, -0xb504, x8, 113*XLEN/8, x9)

inst_139:
// rs1_val==3 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x21f0c, 0x3, 0xb504, x8, 114*XLEN/8, x9)

inst_140:
// rs1_val==3 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x6, 0x3, 0x2, x8, 115*XLEN/8, x9)

inst_141:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffc, 0x3, 0x55555554, x8, 116*XLEN/8, x9)

inst_142:
// rs1_val==3 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x99999996, 0x3, 0x33333332, x8, 117*XLEN/8, x9)

inst_143:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x3333332f, 0x3, 0x66666665, x8, 118*XLEN/8, x9)

inst_144:
// rs1_val == 1431655765, rs1_val==1431655765 and rs2_val==46341
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xffffc3a9, 0x55555555, 0xb505, x8, 119*XLEN/8, x9)

inst_145:
// rs1_val==3 and rs2_val==0, rs2_val == 0
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x3, 0x0, x8, 120*XLEN/8, x9)

inst_146:
// rs1_val==3 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x21f09, 0x3, 0xb503, x8, 121*XLEN/8, x9)

inst_147:
// rs1_val == -1431655766, rs1_val==-1431655766 and rs2_val==46341
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xffff8752, -0x55555556, 0xb505, x8, 122*XLEN/8, x9)

inst_148:
// rs1_val==3 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xc, 0x3, 0x4, x8, 123*XLEN/8, x9)

inst_149:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x2, 0x3, 0x55555556, x8, 124*XLEN/8, x9)

inst_150:
// rs1_val==3 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x1, 0x3, -0x55555555, x8, 125*XLEN/8, x9)

inst_151:
// rs1_val==3 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x12, 0x3, 0x6, x8, 126*XLEN/8, x9)

inst_152:
// rs1_val==3 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x9999999c, 0x3, 0x33333334, x8, 127*XLEN/8, x9)

inst_153:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x33333335, 0x3, 0x66666667, x8, 128*XLEN/8, x9)

inst_154:
// rs1_val == 0, rs1_val==0 and rs2_val==46341
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0xb505, x8, 129*XLEN/8, x9)

inst_155:
// rs1_val==3 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xfffde0f7, 0x3, -0xb503, x8, 130*XLEN/8, x9)

inst_156:
// rs1_val==3 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x21f0f, 0x3, 0xb505, x8, 131*XLEN/8, x9)

inst_157:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0xffffffff, 0x55555555, 0x3, x8, 132*XLEN/8, x9)

inst_158:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x38e38e39, 0x55555555, 0x55555555, x8, 133*XLEN/8, x9)

inst_159:
// rs1_val==1431655765 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x71c71c72, 0x55555555, -0x55555556, x8, 134*XLEN/8, x9)

inst_160:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa9, 0x55555555, 0x5, x8, 135*XLEN/8, x9)

inst_161:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xeeeeeeef, 0x55555555, 0x33333333, x8, 136*XLEN/8, x9)

inst_162:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xddddddde, 0x55555555, 0x66666666, x8, 137*XLEN/8, x9)

inst_163:
// rs1_val==1431655765 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x555591ac, 0x55555555, -0xb504, x8, 138*XLEN/8, x9)

inst_164:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa6e54, 0x55555555, 0xb504, x8, 139*XLEN/8, x9)

inst_165:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaaa, 0x55555555, 0x2, x8, 140*XLEN/8, x9)

inst_166:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xe38e38e4, 0x55555555, 0x55555554, x8, 141*XLEN/8, x9)

inst_167:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x9999999a, 0x55555555, 0x33333332, x8, 142*XLEN/8, x9)

inst_168:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x88888889, 0x55555555, 0x66666665, x8, 143*XLEN/8, x9)

inst_169:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x55555555, 0x0, x8, 144*XLEN/8, x9)

inst_170:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x555518ff, 0x55555555, 0xb503, x8, 145*XLEN/8, x9)

inst_171:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x55555554, 0x55555555, 0x4, x8, 146*XLEN/8, x9)

inst_172:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x8e38e38e, 0x55555555, 0x55555556, x8, 147*XLEN/8, x9)

inst_173:
// rs1_val==1431655765 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xc71c71c7, 0x55555555, -0x55555555, x8, 148*XLEN/8, x9)

inst_174:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffe, 0x55555555, 0x6, x8, 149*XLEN/8, x9)

inst_175:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x44444444, 0x55555555, 0x33333334, x8, 150*XLEN/8, x9)

inst_176:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x33333333, 0x55555555, 0x66666667, x8, 151*XLEN/8, x9)

inst_177:
// rs1_val==1431655765 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xaaaae701, 0x55555555, -0xb503, x8, 152*XLEN/8, x9)

inst_178:
// rs1_val==-1431655766 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffe, -0x55555556, 0x3, x8, 153*XLEN/8, x9)

inst_179:
// rs1_val==-1431655766 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x71c71c72, -0x55555556, 0x55555555, x8, 154*XLEN/8, x9)

inst_180:
// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xe38e38e4, -0x55555556, -0x55555556, x8, 155*XLEN/8, x9)

inst_181:
// rs1_val==-1431655766 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x55555552, -0x55555556, 0x5, x8, 156*XLEN/8, x9)

inst_182:
// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xddddddde, -0x55555556, 0x33333333, x8, 157*XLEN/8, x9)

inst_183:
// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xbbbbbbbc, -0x55555556, 0x66666666, x8, 158*XLEN/8, x9)

inst_184:
// rs1_val==-1431655766 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xaaab2358, -0x55555556, -0xb504, x8, 159*XLEN/8, x9)

inst_185:
// rs1_val==-1431655766 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x5554dca8, -0x55555556, 0xb504, x8, 160*XLEN/8, x9)

inst_186:
// rs1_val==-1431655766 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x55555554, -0x55555556, 0x2, x8, 161*XLEN/8, x9)

inst_187:
// rs1_val==-1431655766 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xc71c71c8, -0x55555556, 0x55555554, x8, 162*XLEN/8, x9)

inst_188:
// rs1_val==-1431655766 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x33333334, -0x55555556, 0x33333332, x8, 163*XLEN/8, x9)

inst_189:
// rs1_val==-1431655766 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x11111112, -0x55555556, 0x66666665, x8, 164*XLEN/8, x9)

inst_190:
// rs1_val==-1431655766 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, -0x55555556, 0x0, x8, 165*XLEN/8, x9)

inst_191:
// rs1_val==-1431655766 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa31fe, -0x55555556, 0xb503, x8, 166*XLEN/8, x9)

inst_192:
// rs1_val==-1431655766 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa8, -0x55555556, 0x4, x8, 167*XLEN/8, x9)

inst_193:
// rs1_val==-1431655766 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x1c71c71c, -0x55555556, 0x55555556, x8, 168*XLEN/8, x9)

inst_194:
// rs1_val==-1431655766 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x8e38e38e, -0x55555556, -0x55555555, x8, 169*XLEN/8, x9)

inst_195:
// rs1_val==-1431655766 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffc, -0x55555556, 0x6, x8, 170*XLEN/8, x9)

inst_196:
// rs1_val==-1431655766 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x88888888, -0x55555556, 0x33333334, x8, 171*XLEN/8, x9)

inst_197:
// rs1_val==-1431655766 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x66666666, -0x55555556, 0x66666667, x8, 172*XLEN/8, x9)

inst_198:
// rs1_val==-1431655766 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x5555ce02, -0x55555556, -0xb503, x8, 173*XLEN/8, x9)

inst_199:
// rs1_val==5 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0xf, 0x5, 0x3, x8, 174*XLEN/8, x9)

inst_200:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa9, 0x5, 0x55555555, x8, 175*XLEN/8, x9)

inst_201:
// rs1_val==5 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x55555552, 0x5, -0x55555556, x8, 176*XLEN/8, x9)

inst_202:
// rs1_val==5 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x19, 0x5, 0x5, x8, 177*XLEN/8, x9)

inst_203:
// rs1_val==5 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xffffffff, 0x5, 0x33333333, x8, 178*XLEN/8, x9)

inst_204:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffe, 0x5, 0x66666666, x8, 179*XLEN/8, x9)

inst_205:
// rs1_val==5 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xfffc76ec, 0x5, -0xb504, x8, 180*XLEN/8, x9)

inst_206:
// rs1_val==5 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x38914, 0x5, 0xb504, x8, 181*XLEN/8, x9)

inst_207:
// rs1_val==5 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xa, 0x5, 0x2, x8, 182*XLEN/8, x9)

inst_208:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa4, 0x5, 0x55555554, x8, 183*XLEN/8, x9)

inst_209:
// rs1_val==5 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffa, 0x5, 0x33333332, x8, 184*XLEN/8, x9)

inst_210:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xfffffff9, 0x5, 0x66666665, x8, 185*XLEN/8, x9)

inst_211:
// rs1_val==5 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x5, 0x0, x8, 186*XLEN/8, x9)

inst_212:
// rs1_val==5 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x3890f, 0x5, 0xb503, x8, 187*XLEN/8, x9)

inst_213:
// rs1_val==5 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x14, 0x5, 0x4, x8, 188*XLEN/8, x9)

inst_214:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaae, 0x5, 0x55555556, x8, 189*XLEN/8, x9)

inst_215:
// rs1_val==5 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x55555557, 0x5, -0x55555555, x8, 190*XLEN/8, x9)

inst_216:
// rs1_val==5 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x1e, 0x5, 0x6, x8, 191*XLEN/8, x9)

inst_217:
// rs1_val==5 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x4, 0x5, 0x33333334, x8, 192*XLEN/8, x9)

inst_218:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x3, 0x5, 0x66666667, x8, 193*XLEN/8, x9)

inst_219:
// rs1_val==5 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xfffc76f1, 0x5, -0xb503, x8, 194*XLEN/8, x9)

inst_220:
// rs1_val==5 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x38919, 0x5, 0xb505, x8, 195*XLEN/8, x9)

inst_221:
// rs1_val==858993459 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x99999999, 0x33333333, 0x3, x8, 196*XLEN/8, x9)

inst_222:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xeeeeeeef, 0x33333333, 0x55555555, x8, 197*XLEN/8, x9)

inst_223:
// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xddddddde, 0x33333333, -0x55555556, x8, 198*XLEN/8, x9)

inst_224:
// rs1_val==858993459 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xffffffff, 0x33333333, 0x5, x8, 199*XLEN/8, x9)

inst_225:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xc28f5c29, 0x33333333, 0x33333333, x8, 200*XLEN/8, x9)

inst_226:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x851eb852, 0x33333333, 0x66666666, x8, 201*XLEN/8, x9)

inst_227:
// rs1_val==858993459 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x2434, 0x33333333, -0xb504, x8, 202*XLEN/8, x9)

inst_228:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xffffdbcc, 0x33333333, 0xb504, x8, 203*XLEN/8, x9)

inst_229:
// rs1_val==858993459 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x66666666, 0x33333333, 0x2, x8, 204*XLEN/8, x9)

inst_230:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xbbbbbbbc, 0x33333333, 0x55555554, x8, 205*XLEN/8, x9)

inst_231:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x8f5c28f6, 0x33333333, 0x33333332, x8, 206*XLEN/8, x9)

inst_232:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x51eb851f, 0x33333333, 0x66666665, x8, 207*XLEN/8, x9)

inst_233:
// rs1_val==858993459 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x33333333, 0x0, x8, 208*XLEN/8, x9)

inst_234:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xcccca899, 0x33333333, 0xb503, x8, 209*XLEN/8, x9)

inst_235:
// rs1_val==858993459 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x33333333, 0x4, x8, 210*XLEN/8, x9)

inst_236:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x22222222, 0x33333333, 0x55555556, x8, 211*XLEN/8, x9)

inst_237:
// rs1_val==858993459 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x11111111, 0x33333333, -0x55555555, x8, 212*XLEN/8, x9)

inst_238:
// rs1_val==858993459 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x33333332, 0x33333333, 0x6, x8, 213*XLEN/8, x9)

inst_239:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xf5c28f5c, 0x33333333, 0x33333334, x8, 214*XLEN/8, x9)

inst_240:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0xb851eb85, 0x33333333, 0x66666667, x8, 215*XLEN/8, x9)

inst_241:
// rs1_val==858993459 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x33335767, 0x33333333, -0xb503, x8, 216*XLEN/8, x9)

inst_242:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x33330eff, 0x33333333, 0xb505, x8, 217*XLEN/8, x9)

inst_243:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x33333332, 0x66666666, 0x3, x8, 218*XLEN/8, x9)

inst_244:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xddddddde, 0x66666666, 0x55555555, x8, 219*XLEN/8, x9)

inst_245:
// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xbbbbbbbc, 0x66666666, -0x55555556, x8, 220*XLEN/8, x9)

inst_246:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffe, 0x66666666, 0x5, x8, 221*XLEN/8, x9)

inst_247:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x851eb852, 0x66666666, 0x33333333, x8, 222*XLEN/8, x9)

inst_248:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xa3d70a4, 0x66666666, 0x66666666, x8, 223*XLEN/8, x9)

inst_249:
// rs1_val==1717986918 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x4868, 0x66666666, -0xb504, x8, 224*XLEN/8, x9)

inst_250:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xffffb798, 0x66666666, 0xb504, x8, 225*XLEN/8, x9)

inst_251:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x66666666, 0x2, x8, 226*XLEN/8, x9)

inst_252:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x77777778, 0x66666666, 0x55555554, x8, 227*XLEN/8, x9)

inst_253:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x1eb851ec, 0x66666666, 0x33333332, x8, 228*XLEN/8, x9)

inst_254:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xa3d70a3e, 0x66666666, 0x66666665, x8, 229*XLEN/8, x9)

inst_255:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x66666666, 0x0, x8, 230*XLEN/8, x9)

inst_256:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x99995132, 0x66666666, 0xb503, x8, 231*XLEN/8, x9)

inst_257:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x99999998, 0x66666666, 0x4, x8, 232*XLEN/8, x9)

inst_258:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x44444444, 0x66666666, 0x55555556, x8, 233*XLEN/8, x9)

inst_259:
// rs1_val==1717986918 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x22222222, 0x66666666, -0x55555555, x8, 234*XLEN/8, x9)

inst_260:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x66666664, 0x66666666, 0x6, x8, 235*XLEN/8, x9)

inst_261:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xeb851eb8, 0x66666666, 0x33333334, x8, 236*XLEN/8, x9)

inst_262:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x70a3d70a, 0x66666666, 0x66666667, x8, 237*XLEN/8, x9)

inst_263:
// rs1_val==1717986918 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x6666aece, 0x66666666, -0xb503, x8, 238*XLEN/8, x9)

inst_264:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x66661dfe, 0x66666666, 0xb505, x8, 239*XLEN/8, x9)

inst_265:
// rs1_val==-46340 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0xfffde0f4, -0xb504, 0x3, x8, 240*XLEN/8, x9)

inst_266:
// rs1_val==-46340 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x555591ac, -0xb504, 0x55555555, x8, 241*XLEN/8, x9)

inst_267:
// rs1_val==-46340 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xaaab2358, -0xb504, -0x55555556, x8, 242*XLEN/8, x9)

inst_268:
// rs1_val==-46340 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xfffc76ec, -0xb504, 0x5, x8, 243*XLEN/8, x9)

inst_269:
// rs1_val==-46340 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x2434, -0xb504, 0x33333333, x8, 244*XLEN/8, x9)

inst_270:
// rs1_val==-46340 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x4868, -0xb504, 0x66666666, x8, 245*XLEN/8, x9)

inst_271:
// rs1_val==-46340 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x7ffea810, -0xb504, -0xb504, x8, 246*XLEN/8, x9)

inst_272:
// rs1_val==-46340 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x800157f0, -0xb504, 0xb504, x8, 247*XLEN/8, x9)

inst_273:
// rs1_val==-46340 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xfffe95f8, -0xb504, 0x2, x8, 248*XLEN/8, x9)

inst_274:
// rs1_val==-46340 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x555646b0, -0xb504, 0x55555554, x8, 249*XLEN/8, x9)

inst_275:
// rs1_val==-46340 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xd938, -0xb504, 0x33333332, x8, 250*XLEN/8, x9)

inst_276:
// rs1_val==-46340 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xfd6c, -0xb504, 0x66666665, x8, 251*XLEN/8, x9)

inst_277:
// rs1_val==-46340 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, -0xb504, 0x0, x8, 252*XLEN/8, x9)

inst_278:
// rs1_val==-46340 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x80020cf4, -0xb504, 0xb503, x8, 253*XLEN/8, x9)

inst_279:
// rs1_val==-46340 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xfffd2bf0, -0xb504, 0x4, x8, 254*XLEN/8, x9)

inst_280:
// rs1_val==-46340 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x5554dca8, -0xb504, 0x55555556, x8, 255*XLEN/8, x9)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_281:
// rs1_val==-46340 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa6e54, -0xb504, -0x55555555, x8, 0*XLEN/8, x9)

inst_282:
// rs1_val==-46340 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0xfffbc1e8, -0xb504, 0x6, x8, 1*XLEN/8, x9)

inst_283:
// rs1_val==-46340 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xffff6f30, -0xb504, 0x33333334, x8, 2*XLEN/8, x9)

inst_284:
// rs1_val==-46340 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0xffff9364, -0xb504, 0x66666667, x8, 3*XLEN/8, x9)

inst_285:
// rs1_val==-46340 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x7ffdf30c, -0xb504, -0xb503, x8, 4*XLEN/8, x9)

inst_286:
// rs1_val==-46340 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb504;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x8000a2ec, -0xb504, 0xb505, x8, 5*XLEN/8, x9)

inst_287:
// rs1_val==46340 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x21f0c, 0xb504, 0x3, x8, 6*XLEN/8, x9)

inst_288:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa6e54, 0xb504, 0x55555555, x8, 7*XLEN/8, x9)

inst_289:
// rs1_val==46340 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x5554dca8, 0xb504, -0x55555556, x8, 8*XLEN/8, x9)

inst_290:
// rs1_val==46340 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x38914, 0xb504, 0x5, x8, 9*XLEN/8, x9)

inst_291:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xffffdbcc, 0xb504, 0x33333333, x8, 10*XLEN/8, x9)

inst_292:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xffffb798, 0xb504, 0x66666666, x8, 11*XLEN/8, x9)

inst_293:
// rs1_val==46340 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x800157f0, 0xb504, -0xb504, x8, 12*XLEN/8, x9)

inst_294:
// rs1_val==46340 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x7ffea810, 0xb504, 0xb504, x8, 13*XLEN/8, x9)

inst_295:
// rs1_val==46340 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x16a08, 0xb504, 0x2, x8, 14*XLEN/8, x9)

inst_296:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xaaa9b950, 0xb504, 0x55555554, x8, 15*XLEN/8, x9)

inst_297:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xffff26c8, 0xb504, 0x33333332, x8, 16*XLEN/8, x9)

inst_298:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xffff0294, 0xb504, 0x66666665, x8, 17*XLEN/8, x9)

inst_299:
// rs1_val==46340 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0xb504, 0x0, x8, 18*XLEN/8, x9)

inst_300:
// rs1_val==46340 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x7ffdf30c, 0xb504, 0xb503, x8, 19*XLEN/8, x9)

inst_301:
// rs1_val==46340 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x2d410, 0xb504, 0x4, x8, 20*XLEN/8, x9)

inst_302:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xaaab2358, 0xb504, 0x55555556, x8, 21*XLEN/8, x9)

inst_303:
// rs1_val==46340 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x555591ac, 0xb504, -0x55555555, x8, 22*XLEN/8, x9)

inst_304:
// rs1_val==46340 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x43e18, 0xb504, 0x6, x8, 23*XLEN/8, x9)

inst_305:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x90d0, 0xb504, 0x33333334, x8, 24*XLEN/8, x9)

inst_306:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x6c9c, 0xb504, 0x66666667, x8, 25*XLEN/8, x9)

inst_307:
// rs1_val==46340 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x80020cf4, 0xb504, -0xb503, x8, 26*XLEN/8, x9)

inst_308:
// rs1_val==46340 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb504;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x7fff5d14, 0xb504, 0xb505, x8, 27*XLEN/8, x9)

inst_309:
// rs1_val==2 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x6, 0x2, 0x3, x8, 28*XLEN/8, x9)

inst_310:
// rs1_val==2 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaaa, 0x2, 0x55555555, x8, 29*XLEN/8, x9)

inst_311:
// rs1_val==2 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x55555554, 0x2, -0x55555556, x8, 30*XLEN/8, x9)

inst_312:
// rs1_val==2 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xa, 0x2, 0x5, x8, 31*XLEN/8, x9)

inst_313:
// rs1_val==2 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x66666666, 0x2, 0x33333333, x8, 32*XLEN/8, x9)

inst_314:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x2, 0x66666666, x8, 33*XLEN/8, x9)

inst_315:
// rs1_val==2 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xfffe95f8, 0x2, -0xb504, x8, 34*XLEN/8, x9)

inst_316:
// rs1_val==2 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x16a08, 0x2, 0xb504, x8, 35*XLEN/8, x9)

inst_317:
// rs1_val==2 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x4, 0x2, 0x2, x8, 36*XLEN/8, x9)

inst_318:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa8, 0x2, 0x55555554, x8, 37*XLEN/8, x9)

inst_319:
// rs1_val==2 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x66666664, 0x2, 0x33333332, x8, 38*XLEN/8, x9)

inst_320:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xccccccca, 0x2, 0x66666665, x8, 39*XLEN/8, x9)

inst_321:
// rs1_val==2 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x2, 0x0, x8, 40*XLEN/8, x9)

inst_322:
// rs1_val==2 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x16a06, 0x2, 0xb503, x8, 41*XLEN/8, x9)

inst_323:
// rs1_val==2 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x8, 0x2, 0x4, x8, 42*XLEN/8, x9)

inst_324:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaac, 0x2, 0x55555556, x8, 43*XLEN/8, x9)

inst_325:
// rs1_val==2 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x55555556, 0x2, -0x55555555, x8, 44*XLEN/8, x9)

inst_326:
// rs1_val==2 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0xc, 0x2, 0x6, x8, 45*XLEN/8, x9)

inst_327:
// rs1_val==2 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x66666668, 0x2, 0x33333334, x8, 46*XLEN/8, x9)

inst_328:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0xccccccce, 0x2, 0x66666667, x8, 47*XLEN/8, x9)

inst_329:
// rs1_val==2 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xfffe95fa, 0x2, -0xb503, x8, 48*XLEN/8, x9)

inst_330:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffc, 0x55555554, 0x3, x8, 49*XLEN/8, x9)

inst_331:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xe38e38e4, 0x55555554, 0x55555555, x8, 50*XLEN/8, x9)

inst_332:
// rs1_val==1431655764 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xc71c71c8, 0x55555554, -0x55555556, x8, 51*XLEN/8, x9)

inst_333:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa4, 0x55555554, 0x5, x8, 52*XLEN/8, x9)

inst_334:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xbbbbbbbc, 0x55555554, 0x33333333, x8, 53*XLEN/8, x9)

inst_335:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x77777778, 0x55555554, 0x66666666, x8, 54*XLEN/8, x9)

inst_336:
// rs1_val==1431655764 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x555646b0, 0x55555554, -0xb504, x8, 55*XLEN/8, x9)

inst_337:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xaaa9b950, 0x55555554, 0xb504, x8, 56*XLEN/8, x9)

inst_338:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa8, 0x55555554, 0x2, x8, 57*XLEN/8, x9)

inst_339:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x8e38e390, 0x55555554, 0x55555554, x8, 58*XLEN/8, x9)

inst_340:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x66666668, 0x55555554, 0x33333332, x8, 59*XLEN/8, x9)

inst_341:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x22222224, 0x55555554, 0x66666665, x8, 60*XLEN/8, x9)

inst_342:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x55555554, 0x0, x8, 61*XLEN/8, x9)

inst_343:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x555463fc, 0x55555554, 0xb503, x8, 62*XLEN/8, x9)

inst_344:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x55555550, 0x55555554, 0x4, x8, 63*XLEN/8, x9)

inst_345:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x38e38e38, 0x55555554, 0x55555556, x8, 64*XLEN/8, x9)

inst_346:
// rs1_val==1431655764 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x1c71c71c, 0x55555554, -0x55555555, x8, 65*XLEN/8, x9)

inst_347:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0xfffffff8, 0x55555554, 0x6, x8, 66*XLEN/8, x9)

inst_348:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x11111110, 0x55555554, 0x33333334, x8, 67*XLEN/8, x9)

inst_349:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x55555554, 0x66666667, x8, 68*XLEN/8, x9)

inst_350:
// rs1_val==1431655764 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xaaab9c04, 0x55555554, -0xb503, x8, 69*XLEN/8, x9)

inst_351:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0xffff0ea4, 0x55555554, 0xb505, x8, 70*XLEN/8, x9)

inst_352:
// rs1_val==858993458 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x99999996, 0x33333332, 0x3, x8, 71*XLEN/8, x9)

inst_353:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x9999999a, 0x33333332, 0x55555555, x8, 72*XLEN/8, x9)

inst_354:
// rs1_val==-1431655765 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaac, -0x55555555, 0x4, x8, 73*XLEN/8, x9)

inst_355:
// rs1_val==-1431655765 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x71c71c72, -0x55555555, 0x55555556, x8, 74*XLEN/8, x9)

inst_356:
// rs1_val==-1431655765 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x38e38e39, -0x55555555, -0x55555555, x8, 75*XLEN/8, x9)

inst_357:
// rs1_val==-1431655765 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x2, -0x55555555, 0x6, x8, 76*XLEN/8, x9)

inst_358:
// rs1_val==-1431655765 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xbbbbbbbc, -0x55555555, 0x33333334, x8, 77*XLEN/8, x9)

inst_359:
// rs1_val==-1431655765 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccd, -0x55555555, 0x66666667, x8, 78*XLEN/8, x9)

inst_360:
// rs1_val==-1431655765 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x555518ff, -0x55555555, -0xb503, x8, 79*XLEN/8, x9)

inst_361:
// rs1_val==-1431655765 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x3c57, -0x55555555, 0xb505, x8, 80*XLEN/8, x9)

inst_362:
// rs1_val==6 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x12, 0x6, 0x3, x8, 81*XLEN/8, x9)

inst_363:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffe, 0x6, 0x55555555, x8, 82*XLEN/8, x9)

inst_364:
// rs1_val==6 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffc, 0x6, -0x55555556, x8, 83*XLEN/8, x9)

inst_365:
// rs1_val==6 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x1e, 0x6, 0x5, x8, 84*XLEN/8, x9)

inst_366:
// rs1_val==6 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x33333332, 0x6, 0x33333333, x8, 85*XLEN/8, x9)

inst_367:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x66666664, 0x6, 0x66666666, x8, 86*XLEN/8, x9)

inst_368:
// rs1_val==6 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xfffbc1e8, 0x6, -0xb504, x8, 87*XLEN/8, x9)

inst_369:
// rs1_val==6 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x43e18, 0x6, 0xb504, x8, 88*XLEN/8, x9)

inst_370:
// rs1_val==6 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xc, 0x6, 0x2, x8, 89*XLEN/8, x9)

inst_371:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xfffffff8, 0x6, 0x55555554, x8, 90*XLEN/8, x9)

inst_372:
// rs1_val==6 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x3333332c, 0x6, 0x33333332, x8, 91*XLEN/8, x9)

inst_373:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x6666665e, 0x6, 0x66666665, x8, 92*XLEN/8, x9)

inst_374:
// rs1_val==6 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x6, 0x0, x8, 93*XLEN/8, x9)

inst_375:
// rs1_val==6 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x43e12, 0x6, 0xb503, x8, 94*XLEN/8, x9)

inst_376:
// rs1_val==6 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x18, 0x6, 0x4, x8, 95*XLEN/8, x9)

inst_377:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x4, 0x6, 0x55555556, x8, 96*XLEN/8, x9)

inst_378:
// rs1_val==6 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x2, 0x6, -0x55555555, x8, 97*XLEN/8, x9)

inst_379:
// rs1_val==6 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x24, 0x6, 0x6, x8, 98*XLEN/8, x9)

inst_380:
// rs1_val==6 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x33333338, 0x6, 0x33333334, x8, 99*XLEN/8, x9)

inst_381:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x6666666a, 0x6, 0x66666667, x8, 100*XLEN/8, x9)

inst_382:
// rs1_val==6 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xfffbc1ee, 0x6, -0xb503, x8, 101*XLEN/8, x9)

inst_383:
// rs1_val==6 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x43e1e, 0x6, 0xb505, x8, 102*XLEN/8, x9)

inst_384:
// rs1_val==858993460 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x9999999c, 0x33333334, 0x3, x8, 103*XLEN/8, x9)

inst_385:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x44444444, 0x33333334, 0x55555555, x8, 104*XLEN/8, x9)

inst_386:
// rs1_val==858993460 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x88888888, 0x33333334, -0x55555556, x8, 105*XLEN/8, x9)

inst_387:
// rs1_val==858993460 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x4, 0x33333334, 0x5, x8, 106*XLEN/8, x9)

inst_388:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xf5c28f5c, 0x33333334, 0x33333333, x8, 107*XLEN/8, x9)

inst_389:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xeb851eb8, 0x33333334, 0x66666666, x8, 108*XLEN/8, x9)

inst_390:
// rs1_val==858993460 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xffff6f30, 0x33333334, -0xb504, x8, 109*XLEN/8, x9)

inst_391:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x90d0, 0x33333334, 0xb504, x8, 110*XLEN/8, x9)

inst_392:
// rs1_val==858993460 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x66666668, 0x33333334, 0x2, x8, 111*XLEN/8, x9)

inst_393:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x11111110, 0x33333334, 0x55555554, x8, 112*XLEN/8, x9)

inst_394:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xc28f5c28, 0x33333334, 0x33333332, x8, 113*XLEN/8, x9)

inst_395:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xb851eb84, 0x33333334, 0x66666665, x8, 114*XLEN/8, x9)

inst_396:
// rs1_val==858993460 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x33333334, 0x0, x8, 115*XLEN/8, x9)

inst_397:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xcccd5d9c, 0x33333334, 0xb503, x8, 116*XLEN/8, x9)

inst_398:
// rs1_val==858993460 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xccccccd0, 0x33333334, 0x4, x8, 117*XLEN/8, x9)

inst_399:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x77777778, 0x33333334, 0x55555556, x8, 118*XLEN/8, x9)

inst_400:
// rs1_val==858993460 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xbbbbbbbc, 0x33333334, -0x55555555, x8, 119*XLEN/8, x9)

inst_401:
// rs1_val==858993460 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x33333338, 0x33333334, 0x6, x8, 120*XLEN/8, x9)

inst_402:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x28f5c290, 0x33333334, 0x33333334, x8, 121*XLEN/8, x9)

inst_403:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x1eb851ec, 0x33333334, 0x66666667, x8, 122*XLEN/8, x9)

inst_404:
// rs1_val==858993460 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x3332a264, 0x33333334, -0xb503, x8, 123*XLEN/8, x9)

inst_405:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x3333c404, 0x33333334, 0xb505, x8, 124*XLEN/8, x9)

inst_406:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x33333335, 0x66666667, 0x3, x8, 125*XLEN/8, x9)

inst_407:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x33333333, 0x66666667, 0x55555555, x8, 126*XLEN/8, x9)

inst_408:
// rs1_val==1717986919 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x66666666, 0x66666667, -0x55555556, x8, 127*XLEN/8, x9)

inst_409:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x3, 0x66666667, 0x5, x8, 128*XLEN/8, x9)

inst_410:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xb851eb85, 0x66666667, 0x33333333, x8, 129*XLEN/8, x9)

inst_411:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x70a3d70a, 0x66666667, 0x66666666, x8, 130*XLEN/8, x9)

inst_412:
// rs1_val==1717986919 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xffff9364, 0x66666667, -0xb504, x8, 131*XLEN/8, x9)

inst_413:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x6c9c, 0x66666667, 0xb504, x8, 132*XLEN/8, x9)

inst_414:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xccccccce, 0x66666667, 0x2, x8, 133*XLEN/8, x9)

inst_415:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x66666667, 0x55555554, x8, 134*XLEN/8, x9)

inst_416:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x51eb851e, 0x66666667, 0x33333332, x8, 135*XLEN/8, x9)

inst_417:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xa3d70a3, 0x66666667, 0x66666665, x8, 136*XLEN/8, x9)

inst_418:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x66666667, 0x0, x8, 137*XLEN/8, x9)

inst_419:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x999a0635, 0x66666667, 0xb503, x8, 138*XLEN/8, x9)

inst_420:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x9999999c, 0x66666667, 0x4, x8, 139*XLEN/8, x9)

inst_421:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x9999999a, 0x66666667, 0x55555556, x8, 140*XLEN/8, x9)

inst_422:
// rs1_val==1717986919 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccd, 0x66666667, -0x55555555, x8, 141*XLEN/8, x9)

inst_423:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x6666666a, 0x66666667, 0x6, x8, 142*XLEN/8, x9)

inst_424:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x1eb851ec, 0x66666667, 0x33333334, x8, 143*XLEN/8, x9)

inst_425:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0xd70a3d71, 0x66666667, 0x66666667, x8, 144*XLEN/8, x9)

inst_426:
// rs1_val==1717986919 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x6665f9cb, 0x66666667, -0xb503, x8, 145*XLEN/8, x9)

inst_427:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x6666d303, 0x66666667, 0xb505, x8, 146*XLEN/8, x9)

inst_428:
// rs1_val==-46339 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0xfffde0f7, -0xb503, 0x3, x8, 147*XLEN/8, x9)

inst_429:
// rs1_val==-46339 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xaaaae701, -0xb503, 0x55555555, x8, 148*XLEN/8, x9)

inst_430:
// rs1_val==-46339 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x5555ce02, -0xb503, -0x55555556, x8, 149*XLEN/8, x9)

inst_431:
// rs1_val==-46339 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xfffc76f1, -0xb503, 0x5, x8, 150*XLEN/8, x9)

inst_432:
// rs1_val==-46339 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x33335767, -0xb503, 0x33333333, x8, 151*XLEN/8, x9)

inst_433:
// rs1_val==-46339 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x6666aece, -0xb503, 0x66666666, x8, 152*XLEN/8, x9)

inst_434:
// rs1_val==-46339 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x7ffdf30c, -0xb503, -0xb504, x8, 153*XLEN/8, x9)

inst_435:
// rs1_val==-46339 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x80020cf4, -0xb503, 0xb504, x8, 154*XLEN/8, x9)

inst_436:
// rs1_val==-46339 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xfffe95fa, -0xb503, 0x2, x8, 155*XLEN/8, x9)

inst_437:
// rs1_val==-46339 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xaaab9c04, -0xb503, 0x55555554, x8, 156*XLEN/8, x9)

inst_438:
// rs1_val==-46339 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x33340c6a, -0xb503, 0x33333332, x8, 157*XLEN/8, x9)

inst_439:
// rs1_val==-46339 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x666763d1, -0xb503, 0x66666665, x8, 158*XLEN/8, x9)

inst_440:
// rs1_val==-46339 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, -0xb503, 0x0, x8, 159*XLEN/8, x9)

inst_441:
// rs1_val==-46339 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x8002c1f7, -0xb503, 0xb503, x8, 160*XLEN/8, x9)

inst_442:
// rs1_val==-46339 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xfffd2bf4, -0xb503, 0x4, x8, 161*XLEN/8, x9)

inst_443:
// rs1_val==-46339 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa31fe, -0xb503, 0x55555556, x8, 162*XLEN/8, x9)

inst_444:
// rs1_val==-46339 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x555518ff, -0xb503, -0x55555555, x8, 163*XLEN/8, x9)

inst_445:
// rs1_val==-46339 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0xfffbc1ee, -0xb503, 0x6, x8, 164*XLEN/8, x9)

inst_446:
// rs1_val==-46339 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x3332a264, -0xb503, 0x33333334, x8, 165*XLEN/8, x9)

inst_447:
// rs1_val==-46339 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0xb503;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x6665f9cb, -0xb503, 0x66666667, x8, 166*XLEN/8, x9)

inst_448:
// rs1_val==46341 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x21f0f, 0xb505, 0x3, x8, 167*XLEN/8, x9)

inst_449:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xffffc3a9, 0xb505, 0x55555555, x8, 168*XLEN/8, x9)

inst_450:
// rs1_val==46341 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xffff8752, 0xb505, -0x55555556, x8, 169*XLEN/8, x9)

inst_451:
// rs1_val==46341 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x38919, 0xb505, 0x5, x8, 170*XLEN/8, x9)

inst_452:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x33330eff, 0xb505, 0x33333333, x8, 171*XLEN/8, x9)

inst_453:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x66661dfe, 0xb505, 0x66666666, x8, 172*XLEN/8, x9)

inst_454:
// rs1_val==46341 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x8000a2ec, 0xb505, -0xb504, x8, 173*XLEN/8, x9)

inst_455:
// rs1_val==46341 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x7fff5d14, 0xb505, 0xb504, x8, 174*XLEN/8, x9)

inst_456:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0xffff0ea4, 0xb505, 0x55555554, x8, 175*XLEN/8, x9)

inst_457:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x333259fa, 0xb505, 0x33333332, x8, 176*XLEN/8, x9)

inst_458:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x666568f9, 0xb505, 0x66666665, x8, 177*XLEN/8, x9)

inst_459:
// rs1_val==46341 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0xb505, 0x0, x8, 178*XLEN/8, x9)

inst_460:
// rs1_val==46341 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x7ffea80f, 0xb505, 0xb503, x8, 179*XLEN/8, x9)

inst_461:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x78ae, 0xb505, 0x55555556, x8, 180*XLEN/8, x9)

inst_462:
// rs1_val==46341 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x3c57, 0xb505, -0x55555555, x8, 181*XLEN/8, x9)

inst_463:
// rs1_val==46341 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x43e1e, 0xb505, 0x6, x8, 182*XLEN/8, x9)

inst_464:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x3333c404, 0xb505, 0x33333334, x8, 183*XLEN/8, x9)

inst_465:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x6666d303, 0xb505, 0x66666667, x8, 184*XLEN/8, x9)

inst_466:
// rs1_val==46341 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x80001219, 0xb505, 0xb505, x8, 185*XLEN/8, x9)

inst_467:
// rs1_val==858993458 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x33333334, 0x33333332, -0x55555556, x8, 186*XLEN/8, x9)

inst_468:
// rs1_val==858993458 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xfffffffa, 0x33333332, 0x5, x8, 187*XLEN/8, x9)

inst_469:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x8f5c28f6, 0x33333332, 0x33333333, x8, 188*XLEN/8, x9)

inst_470:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x1eb851ec, 0x33333332, 0x66666666, x8, 189*XLEN/8, x9)

inst_471:
// rs1_val==858993458 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xd938, 0x33333332, -0xb504, x8, 190*XLEN/8, x9)

inst_472:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xffff26c8, 0x33333332, 0xb504, x8, 191*XLEN/8, x9)

inst_473:
// rs1_val==858993458 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x66666664, 0x33333332, 0x2, x8, 192*XLEN/8, x9)

inst_474:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x66666668, 0x33333332, 0x55555554, x8, 193*XLEN/8, x9)

inst_475:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x5c28f5c4, 0x33333332, 0x33333332, x8, 194*XLEN/8, x9)

inst_476:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xeb851eba, 0x33333332, 0x66666665, x8, 195*XLEN/8, x9)

inst_477:
// rs1_val==858993458 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x33333332, 0x0, x8, 196*XLEN/8, x9)

inst_478:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xcccbf396, 0x33333332, 0xb503, x8, 197*XLEN/8, x9)

inst_479:
// rs1_val==858993458 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0xccccccc8, 0x33333332, 0x4, x8, 198*XLEN/8, x9)

inst_480:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x33333332, 0x55555556, x8, 199*XLEN/8, x9)

inst_481:
// rs1_val==858993458 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x66666666, 0x33333332, -0x55555555, x8, 200*XLEN/8, x9)

inst_482:
// rs1_val==858993458 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x3333332c, 0x33333332, 0x6, x8, 201*XLEN/8, x9)

inst_483:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xc28f5c28, 0x33333332, 0x33333334, x8, 202*XLEN/8, x9)

inst_484:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x51eb851e, 0x33333332, 0x66666667, x8, 203*XLEN/8, x9)

inst_485:
// rs1_val==858993458 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x33340c6a, 0x33333332, -0xb503, x8, 204*XLEN/8, x9)

inst_486:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x333259fa, 0x33333332, 0xb505, x8, 205*XLEN/8, x9)

inst_487:
// rs1_val==1717986917 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x3333332f, 0x66666665, 0x3, x8, 206*XLEN/8, x9)

inst_488:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x88888889, 0x66666665, 0x55555555, x8, 207*XLEN/8, x9)

inst_489:
// rs1_val==1717986917 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x11111112, 0x66666665, -0x55555556, x8, 208*XLEN/8, x9)

inst_490:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xfffffff9, 0x66666665, 0x5, x8, 209*XLEN/8, x9)

inst_491:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x51eb851f, 0x66666665, 0x33333333, x8, 210*XLEN/8, x9)

inst_492:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0xa3d70a3e, 0x66666665, 0x66666666, x8, 211*XLEN/8, x9)

inst_493:
// rs1_val==1717986917 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xfd6c, 0x66666665, -0xb504, x8, 212*XLEN/8, x9)

inst_494:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xffff0294, 0x66666665, 0xb504, x8, 213*XLEN/8, x9)

inst_495:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xccccccca, 0x66666665, 0x2, x8, 214*XLEN/8, x9)

inst_496:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x22222224, 0x66666665, 0x55555554, x8, 215*XLEN/8, x9)

inst_497:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xeb851eba, 0x66666665, 0x33333332, x8, 216*XLEN/8, x9)

inst_498:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x3d70a3d9, 0x66666665, 0x66666665, x8, 217*XLEN/8, x9)

inst_499:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x66666665, 0x0, x8, 218*XLEN/8, x9)

inst_500:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x99989c2f, 0x66666665, 0xb503, x8, 219*XLEN/8, x9)

inst_501:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x99999994, 0x66666665, 0x4, x8, 220*XLEN/8, x9)

inst_502:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xeeeeeeee, 0x66666665, 0x55555556, x8, 221*XLEN/8, x9)

inst_503:
// rs1_val==1717986917 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x77777777, 0x66666665, -0x55555555, x8, 222*XLEN/8, x9)

inst_504:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x6666665e, 0x66666665, 0x6, x8, 223*XLEN/8, x9)

inst_505:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xb851eb84, 0x66666665, 0x33333334, x8, 224*XLEN/8, x9)

inst_506:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0xa3d70a3, 0x66666665, 0x66666667, x8, 225*XLEN/8, x9)

inst_507:
// rs1_val==1717986917 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x666763d1, 0x66666665, -0xb503, x8, 226*XLEN/8, x9)

inst_508:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x666568f9, 0x66666665, 0xb505, x8, 227*XLEN/8, x9)

inst_509:
// rs1_val==0 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x3, x8, 228*XLEN/8, x9)

inst_510:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x55555555, x8, 229*XLEN/8, x9)

inst_511:
// rs1_val==0 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, -0x55555556, x8, 230*XLEN/8, x9)

inst_512:
// rs1_val==0 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x5, x8, 231*XLEN/8, x9)

inst_513:
// rs1_val==0 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x33333333, x8, 232*XLEN/8, x9)

inst_514:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x66666666, x8, 233*XLEN/8, x9)

inst_515:
// rs1_val==0 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, -0xb504, x8, 234*XLEN/8, x9)

inst_516:
// rs1_val==0 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0xb504, x8, 235*XLEN/8, x9)

inst_517:
// rs1_val==0 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x2, x8, 236*XLEN/8, x9)

inst_518:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x55555554, x8, 237*XLEN/8, x9)

inst_519:
// rs1_val==0 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x33333332, x8, 238*XLEN/8, x9)

inst_520:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x66666665, x8, 239*XLEN/8, x9)

inst_521:
// rs1_val==0 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x0, x8, 240*XLEN/8, x9)

inst_522:
// rs1_val==0 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0xb503, x8, 241*XLEN/8, x9)

inst_523:
// rs1_val==0 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x4, x8, 242*XLEN/8, x9)

inst_524:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x55555556, x8, 243*XLEN/8, x9)

inst_525:
// rs1_val==0 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, -0x55555555, x8, 244*XLEN/8, x9)

inst_526:
// rs1_val==0 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x6, x8, 245*XLEN/8, x9)

inst_527:
// rs1_val==0 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x33333334, x8, 246*XLEN/8, x9)

inst_528:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, 0x66666667, x8, 247*XLEN/8, x9)

inst_529:
// rs1_val==0 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x0, -0xb503, x8, 248*XLEN/8, x9)

inst_530:
// rs1_val==46339 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x21f09, 0xb503, 0x3, x8, 249*XLEN/8, x9)

inst_531:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x555518ff, 0xb503, 0x55555555, x8, 250*XLEN/8, x9)

inst_532:
// rs1_val==46339 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa31fe, 0xb503, -0x55555556, x8, 251*XLEN/8, x9)

inst_533:
// rs1_val==46339 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x3890f, 0xb503, 0x5, x8, 252*XLEN/8, x9)

inst_534:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xcccca899, 0xb503, 0x33333333, x8, 253*XLEN/8, x9)

inst_535:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x99995132, 0xb503, 0x66666666, x8, 254*XLEN/8, x9)

inst_536:
// rs1_val==46339 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x80020cf4, 0xb503, -0xb504, x8, 255*XLEN/8, x9)
RVTEST_SIGBASE(x8,signature_x8_2)

inst_537:
// rs1_val==46339 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x7ffdf30c, 0xb503, 0xb504, x8, 0*XLEN/8, x9)

inst_538:
// rs1_val==46339 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x16a06, 0xb503, 0x2, x8, 1*XLEN/8, x9)

inst_539:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x555463fc, 0xb503, 0x55555554, x8, 2*XLEN/8, x9)

inst_540:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xcccbf396, 0xb503, 0x33333332, x8, 3*XLEN/8, x9)

inst_541:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x99989c2f, 0xb503, 0x66666665, x8, 4*XLEN/8, x9)

inst_542:
// rs1_val==46339 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0xb503, 0x0, x8, 5*XLEN/8, x9)

inst_543:
// rs1_val==46339 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x7ffd3e09, 0xb503, 0xb503, x8, 6*XLEN/8, x9)

inst_544:
// rs1_val==46339 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x2d40c, 0xb503, 0x4, x8, 7*XLEN/8, x9)

inst_545:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x5555ce02, 0xb503, 0x55555556, x8, 8*XLEN/8, x9)

inst_546:
// rs1_val==46339 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xaaaae701, 0xb503, -0x55555555, x8, 9*XLEN/8, x9)

inst_547:
// rs1_val==46339 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x43e12, 0xb503, 0x6, x8, 10*XLEN/8, x9)

inst_548:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xcccd5d9c, 0xb503, 0x33333334, x8, 11*XLEN/8, x9)

inst_549:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x999a0635, 0xb503, 0x66666667, x8, 12*XLEN/8, x9)

inst_550:
// rs1_val==46339 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x8002c1f7, 0xb503, -0xb503, x8, 13*XLEN/8, x9)

inst_551:
// rs1_val==46339 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb503;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x7ffea80f, 0xb503, 0xb505, x8, 14*XLEN/8, x9)

inst_552:
// rs1_val==4 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0xc, 0x4, 0x3, x8, 15*XLEN/8, x9)

inst_553:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x55555554, 0x4, 0x55555555, x8, 16*XLEN/8, x9)

inst_554:
// rs1_val==4 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaa8, 0x4, -0x55555556, x8, 17*XLEN/8, x9)

inst_555:
// rs1_val==4 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x14, 0x4, 0x5, x8, 18*XLEN/8, x9)

inst_556:
// rs1_val==4 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x4, 0x33333333, x8, 19*XLEN/8, x9)

inst_557:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x99999998, 0x4, 0x66666666, x8, 20*XLEN/8, x9)

inst_558:
// rs1_val==4 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xfffd2bf0, 0x4, -0xb504, x8, 21*XLEN/8, x9)

inst_559:
// rs1_val==4 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x2d410, 0x4, 0xb504, x8, 22*XLEN/8, x9)

inst_560:
// rs1_val==4 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x8, 0x4, 0x2, x8, 23*XLEN/8, x9)

inst_561:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x55555550, 0x4, 0x55555554, x8, 24*XLEN/8, x9)

inst_562:
// rs1_val==4 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xccccccc8, 0x4, 0x33333332, x8, 25*XLEN/8, x9)

inst_563:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x99999994, 0x4, 0x66666665, x8, 26*XLEN/8, x9)

inst_564:
// rs1_val==4 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x4, 0x0, x8, 27*XLEN/8, x9)

inst_565:
// rs1_val==4 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x2d40c, 0x4, 0xb503, x8, 28*XLEN/8, x9)

inst_566:
// rs1_val==4 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x10, 0x4, 0x4, x8, 29*XLEN/8, x9)

inst_567:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x55555558, 0x4, 0x55555556, x8, 30*XLEN/8, x9)

inst_568:
// rs1_val==4 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaac, 0x4, -0x55555555, x8, 31*XLEN/8, x9)

inst_569:
// rs1_val==4 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x18, 0x4, 0x6, x8, 32*XLEN/8, x9)

inst_570:
// rs1_val==4 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0xccccccd0, 0x4, 0x33333334, x8, 33*XLEN/8, x9)

inst_571:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x9999999c, 0x4, 0x66666667, x8, 34*XLEN/8, x9)

inst_572:
// rs1_val==4 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xfffd2bf4, 0x4, -0xb503, x8, 35*XLEN/8, x9)

inst_573:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x2, 0x55555556, 0x3, x8, 36*XLEN/8, x9)

inst_574:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x8e38e38e, 0x55555556, 0x55555555, x8, 37*XLEN/8, x9)

inst_575:
// rs1_val==1431655766 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x1c71c71c, 0x55555556, -0x55555556, x8, 38*XLEN/8, x9)

inst_576:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaae, 0x55555556, 0x5, x8, 39*XLEN/8, x9)

inst_577:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x22222222, 0x55555556, 0x33333333, x8, 40*XLEN/8, x9)

inst_578:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x44444444, 0x55555556, 0x66666666, x8, 41*XLEN/8, x9)

inst_579:
// rs1_val==1431655766 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x5554dca8, 0x55555556, -0xb504, x8, 42*XLEN/8, x9)

inst_580:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xaaab2358, 0x55555556, 0xb504, x8, 43*XLEN/8, x9)

inst_581:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0xaaaaaaac, 0x55555556, 0x2, x8, 44*XLEN/8, x9)

inst_582:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x38e38e38, 0x55555556, 0x55555554, x8, 45*XLEN/8, x9)

inst_583:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0xcccccccc, 0x55555556, 0x33333332, x8, 46*XLEN/8, x9)

inst_584:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0xeeeeeeee, 0x55555556, 0x66666665, x8, 47*XLEN/8, x9)

inst_585:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, 0x55555556, 0x0, x8, 48*XLEN/8, x9)

inst_586:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x5555ce02, 0x55555556, 0xb503, x8, 49*XLEN/8, x9)

inst_587:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x4
TEST_RR_OP(mul, x31, x30, x29, 0x55555558, 0x55555556, 0x4, x8, 50*XLEN/8, x9)

inst_588:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0xe38e38e4, 0x55555556, 0x55555556, x8, 51*XLEN/8, x9)

inst_589:
// rs1_val==1431655766 and rs2_val==-1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0x71c71c72, 0x55555556, -0x55555555, x8, 52*XLEN/8, x9)

inst_590:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x6
TEST_RR_OP(mul, x31, x30, x29, 0x4, 0x55555556, 0x6, x8, 53*XLEN/8, x9)

inst_591:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(mul, x31, x30, x29, 0x77777778, 0x55555556, 0x33333334, x8, 54*XLEN/8, x9)

inst_592:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(mul, x31, x30, x29, 0x9999999a, 0x55555556, 0x66666667, x8, 55*XLEN/8, x9)

inst_593:
// rs1_val==1431655766 and rs2_val==-46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa31fe, 0x55555556, -0xb503, x8, 56*XLEN/8, x9)

inst_594:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x78ae, 0x55555556, 0xb505, x8, 57*XLEN/8, x9)

inst_595:
// rs1_val==-1431655765 and rs2_val==3, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x3
TEST_RR_OP(mul, x31, x30, x29, 0x1, -0x55555555, 0x3, x8, 58*XLEN/8, x9)

inst_596:
// rs1_val==-1431655765 and rs2_val==1431655765, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x55555555
TEST_RR_OP(mul, x31, x30, x29, 0xc71c71c7, -0x55555555, 0x55555555, x8, 59*XLEN/8, x9)

inst_597:
// rs1_val==-1431655765 and rs2_val==-1431655766, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x55555556
TEST_RR_OP(mul, x31, x30, x29, 0x8e38e38e, -0x55555555, -0x55555556, x8, 60*XLEN/8, x9)

inst_598:
// rs1_val==-1431655765 and rs2_val==5, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x5
TEST_RR_OP(mul, x31, x30, x29, 0x55555557, -0x55555555, 0x5, x8, 61*XLEN/8, x9)

inst_599:
// rs1_val==-1431655765 and rs2_val==858993459, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x33333333
TEST_RR_OP(mul, x31, x30, x29, 0x11111111, -0x55555555, 0x33333333, x8, 62*XLEN/8, x9)

inst_600:
// rs1_val==-1431655765 and rs2_val==1717986918, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x66666666
TEST_RR_OP(mul, x31, x30, x29, 0x22222222, -0x55555555, 0x66666666, x8, 63*XLEN/8, x9)

inst_601:
// rs1_val==-1431655765 and rs2_val==-46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0xb504
TEST_RR_OP(mul, x31, x30, x29, 0xaaaa6e54, -0x55555555, -0xb504, x8, 64*XLEN/8, x9)

inst_602:
// rs1_val==-1431655765 and rs2_val==46340, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0xb504
TEST_RR_OP(mul, x31, x30, x29, 0x555591ac, -0x55555555, 0xb504, x8, 65*XLEN/8, x9)

inst_603:
// rs1_val==-1431655765 and rs2_val==2, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x2
TEST_RR_OP(mul, x31, x30, x29, 0x55555556, -0x55555555, 0x2, x8, 66*XLEN/8, x9)

inst_604:
// rs1_val==-1431655765 and rs2_val==1431655764, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x55555554
TEST_RR_OP(mul, x31, x30, x29, 0x1c71c71c, -0x55555555, 0x55555554, x8, 67*XLEN/8, x9)

inst_605:
// rs1_val==-1431655765 and rs2_val==858993458, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x33333332
TEST_RR_OP(mul, x31, x30, x29, 0x66666666, -0x55555555, 0x33333332, x8, 68*XLEN/8, x9)

inst_606:
// rs1_val==-1431655765 and rs2_val==1717986917, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x66666665
TEST_RR_OP(mul, x31, x30, x29, 0x77777777, -0x55555555, 0x66666665, x8, 69*XLEN/8, x9)

inst_607:
// rs1_val==-1431655765 and rs2_val==0, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x0
TEST_RR_OP(mul, x31, x30, x29, 0x0, -0x55555555, 0x0, x8, 70*XLEN/8, x9)

inst_608:
// rs1_val==-1431655765 and rs2_val==46339, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0xb503
TEST_RR_OP(mul, x31, x30, x29, 0xaaaae701, -0x55555555, 0xb503, x8, 71*XLEN/8, x9)

inst_609:
// rs1_val != rs2_val, rs1_val==46341 and rs2_val==-46339, rs1_val > 0 and rs2_val < 0
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0xb503
TEST_RR_OP(mul, x31, x30, x29, 0x800157f1, 0xb505, -0xb503, x8, 72*XLEN/8, x9)

inst_610:
// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 2147483647
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xb505
TEST_RR_OP(mul, x31, x30, x29, 0x7fff4afb, 0x7fffffff, 0xb505, x8, 73*XLEN/8, x9)

inst_611:
// rs2_val == -16777217, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x1000001
TEST_RR_OP(mul, x31, x30, x29, 0xfaff4afb, 0xb505, -0x1000001, x8, 74*XLEN/8, x9)

inst_612:
// rs2_val == -67108865, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x4000001
TEST_RR_OP(mul, x31, x30, x29, 0xebff4afb, 0xb505, -0x4000001, x8, 75*XLEN/8, x9)

inst_613:
// rs2_val == -134217729, 
// opcode: mul ; op1:x30; op2:x29; dest:x31; op1val:0xb505;  op2val:-0x8000001
TEST_RR_OP(mul, x31, x30, x29, 0xd7ff4afb, 0xb505, -0x8000001, x8, 76*XLEN/8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 25*((XLEN/8)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x8_1:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x8_2:
    .fill 77*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
