 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:13 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32im.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mulh instruction of the RISC-V M extension for the mulh covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IM")

.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*M.*);def TEST_CASE_1=True;",mulh)

RVTEST_SIGBASE( x3,signature_x3_1)

inst_0:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x12, rs1_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs2_val == -536870913, rs1_val == -2147483648, rs1_val != rs2_val
// opcode: mulh ; op1:x15; op2:x15; dest:x12; op1val:-2147483648;  op2val:-536870913
TEST_RR_OP(mulh, x12, x15, x15, 0x00000000, -2147483648, -536870913, x3, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x6, rd==x19, rs1_val == 0, rs2_val == -268435457
// opcode: mulh ; op1:x30; op2:x6; dest:x19; op1val:0;  op2val:-268435457
TEST_RR_OP(mulh, x19, x30, x6, 0x00000000, 0, -268435457, x3, 4, x16)

inst_2:
// rs2 == rd != rs1, rs1==x24, rs2==x5, rd==x5, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 2147483647, rs2_val == 33554432
// opcode: mulh ; op1:x24; op2:x5; dest:x5; op1val:2147483647;  op2val:33554432
TEST_RR_OP(mulh, x5, x24, x5, 0x00000000, 2147483647, 33554432, x3, 8, x16)

inst_3:
// rs1 == rd != rs2, rs1==x2, rs2==x27, rd==x2, rs1_val == 1, rs1_val > 0 and rs2_val < 0, rs2_val == -131073
// opcode: mulh ; op1:x2; op2:x27; dest:x2; op1val:1;  op2val:-131073
TEST_RR_OP(mulh, x2, x2, x27, 0x00000000, 1, -131073, x3, 12, x16)

inst_4:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs2_val == (-2**(xlen-1)), rs1_val == 134217728, rs2_val == -2147483648
// opcode: mulh ; op1:x22; op2:x22; dest:x22; op1val:134217728;  op2val:-2147483648
TEST_RR_OP(mulh, x22, x22, x22, 0x00000000, 134217728, -2147483648, x3, 16, x16)

inst_5:
// rs1==x10, rs2==x9, rd==x4, rs2_val == 0, rs1_val == 2
// opcode: mulh ; op1:x10; op2:x9; dest:x4; op1val:2;  op2val:0
TEST_RR_OP(mulh, x4, x10, x9, 0x00000000, 2, 0, x3, 20, x16)

inst_6:
// rs1==x28, rs2==x7, rd==x13, rs2_val == (2**(xlen-1)-1), rs1_val == rs2_val, rs2_val == 2147483647
// opcode: mulh ; op1:x28; op2:x7; dest:x13; op1val:2147483647;  op2val:2147483647
TEST_RR_OP(mulh, x13, x28, x7, 0x00000000, 2147483647, 2147483647, x3, 24, x16)

inst_7:
// rs1==x20, rs2==x17, rd==x26, rs2_val == 1, rs1_val == 268435456
// opcode: mulh ; op1:x20; op2:x17; dest:x26; op1val:268435456;  op2val:1
TEST_RR_OP(mulh, x26, x20, x17, 0x00000000, 268435456, 1, x3, 28, x16)

inst_8:
// rs1==x5, rs2==x1, rd==x11, rs1_val < 0 and rs2_val > 0, rs1_val == -4194305, rs2_val == 16777216
// opcode: mulh ; op1:x5; op2:x1; dest:x11; op1val:-4194305;  op2val:16777216
TEST_RR_OP(mulh, x11, x5, x1, 0x00000000, -4194305, 16777216, x3, 32, x16)

inst_9:
// rs1==x14, rs2==x23, rd==x9, rs1_val == 4, rs2_val == -8388609
// opcode: mulh ; op1:x14; op2:x23; dest:x9; op1val:4;  op2val:-8388609
TEST_RR_OP(mulh, x9, x14, x23, 0x00000000, 4, -8388609, x3, 36, x16)

inst_10:
// rs1==x7, rs2==x31, rd==x29, rs1_val == 8, rs2_val == 65536
// opcode: mulh ; op1:x7; op2:x31; dest:x29; op1val:8;  op2val:65536
TEST_RR_OP(mulh, x29, x7, x31, 0x00000000, 8, 65536, x3, 40, x16)

inst_11:
// rs1==x29, rs2==x30, rd==x0, rs1_val == 16, rs2_val == 131072
// opcode: mulh ; op1:x29; op2:x30; dest:x0; op1val:16;  op2val:131072
TEST_RR_OP(mulh, x0, x29, x30, 0x00000000, 16, 131072, x3, 44, x16)

inst_12:
// rs1==x4, rs2==x2, rd==x1, rs1_val == 32, rs2_val == 64
// opcode: mulh ; op1:x4; op2:x2; dest:x1; op1val:32;  op2val:64
TEST_RR_OP(mulh, x1, x4, x2, 0x00000000, 32, 64, x3, 48, x16)

inst_13:
// rs1==x11, rs2==x25, rd==x8, rs1_val == 64, rs2_val == 16
// opcode: mulh ; op1:x11; op2:x25; dest:x8; op1val:64;  op2val:16
TEST_RR_OP(mulh, x8, x11, x25, 0x00000000, 64, 16, x3, 52, x16)

inst_14:
// rs1==x18, rs2==x14, rd==x28, rs1_val == 128, rs2_val == -524289
// opcode: mulh ; op1:x18; op2:x14; dest:x28; op1val:128;  op2val:-524289
TEST_RR_OP(mulh, x28, x18, x14, 0x00000000, 128, -524289, x3, 56, x5)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_15:
// rs1==x12, rs2==x20, rd==x15, rs1_val == 256, rs2_val == -4097
// opcode: mulh ; op1:x12; op2:x20; dest:x15; op1val:256;  op2val:-4097
TEST_RR_OP(mulh, x15, x12, x20, 0x00000000, 256, -4097, x2, 0, x5)

inst_16:
// rs1==x1, rs2==x28, rd==x25, rs1_val == 512, 
// opcode: mulh ; op1:x1; op2:x28; dest:x25; op1val:512;  op2val:-7
TEST_RR_OP(mulh, x25, x1, x28, 0x00000000, 512, -7, x2, 4, x5)

inst_17:
// rs1==x25, rs2==x16, rd==x20, rs1_val == 1024, 
// opcode: mulh ; op1:x25; op2:x16; dest:x20; op1val:1024;  op2val:0
TEST_RR_OP(mulh, x20, x25, x16, 0x00000000, 1024, 0, x2, 8, x5)

inst_18:
// rs1==x9, rs2==x4, rd==x23, rs1_val == 2048, rs2_val == 8388608
// opcode: mulh ; op1:x9; op2:x4; dest:x23; op1val:2048;  op2val:8388608
TEST_RR_OP(mulh, x23, x9, x4, 0x00000000, 2048, 8388608, x2, 12, x5)

inst_19:
// rs1==x23, rs2==x11, rd==x7, rs1_val == 4096, 
// opcode: mulh ; op1:x23; op2:x11; dest:x7; op1val:4096;  op2val:-4
TEST_RR_OP(mulh, x7, x23, x11, 0x00000000, 4096, -4, x2, 16, x5)

inst_20:
// rs1==x6, rs2==x13, rd==x3, rs1_val == 8192, rs2_val == -5
// opcode: mulh ; op1:x6; op2:x13; dest:x3; op1val:8192;  op2val:-5
TEST_RR_OP(mulh, x3, x6, x13, 0x00000000, 8192, -5, x2, 20, x5)

inst_21:
// rs1==x19, rs2==x0, rd==x30, rs1_val == 16384, rs2_val == -2
// opcode: mulh ; op1:x19; op2:x0; dest:x30; op1val:16384;  op2val:-2
TEST_RR_OP(mulh, x30, x19, x0, 0x00000000, 16384, -2, x2, 24, x5)

inst_22:
// rs1==x17, rs2==x10, rd==x21, rs1_val == 32768, rs2_val == -2049
// opcode: mulh ; op1:x17; op2:x10; dest:x21; op1val:32768;  op2val:-2049
TEST_RR_OP(mulh, x21, x17, x10, 0x00000000, 32768, -2049, x2, 28, x5)

inst_23:
// rs1==x31, rs2==x26, rd==x24, rs1_val == 65536, 
// opcode: mulh ; op1:x31; op2:x26; dest:x24; op1val:65536;  op2val:-4097
TEST_RR_OP(mulh, x24, x31, x26, 0x00000000, 65536, -4097, x2, 32, x5)

inst_24:
// rs1==x0, rs2==x12, rd==x16, rs1_val == 131072, rs2_val == 262144
// opcode: mulh ; op1:x0; op2:x12; dest:x16; op1val:131072;  op2val:262144
TEST_RR_OP(mulh, x16, x0, x12, 0x00000000, 131072, 262144, x2, 36, x5)

inst_25:
// rs1==x27, rs2==x18, rd==x17, rs1_val == 262144, 
// opcode: mulh ; op1:x27; op2:x18; dest:x17; op1val:262144;  op2val:1073741823
TEST_RR_OP(mulh, x17, x27, x18, 0x00000000, 262144, 1073741823, x2, 40, x5)

inst_26:
// rs1==x13, rs2==x8, rd==x18, rs1_val == 524288, 
// opcode: mulh ; op1:x13; op2:x8; dest:x18; op1val:524288;  op2val:8388608
TEST_RR_OP(mulh, x18, x13, x8, 0x00000000, 524288, 8388608, x2, 44, x5)

inst_27:
// rs1==x16, rs2==x24, rd==x31, rs1_val == 1048576, 
// opcode: mulh ; op1:x16; op2:x24; dest:x31; op1val:1048576;  op2val:-10
TEST_RR_OP(mulh, x31, x16, x24, 0x00000000, 1048576, -10, x2, 48, x4)

inst_28:
// rs1==x8, rs2==x19, rd==x27, rs1_val == 2097152, 
// opcode: mulh ; op1:x8; op2:x19; dest:x27; op1val:2097152;  op2val:-5
TEST_RR_OP(mulh, x27, x8, x19, 0x00000000, 2097152, -5, x2, 52, x4)

inst_29:
// rs1==x3, rs2==x29, rd==x6, rs1_val == 4194304, 
// opcode: mulh ; op1:x3; op2:x29; dest:x6; op1val:4194304;  op2val:3
TEST_RR_OP(mulh, x6, x3, x29, 0x00000000, 4194304, 3, x2, 56, x4)

inst_30:
// rs1==x26, rs2==x3, rd==x10, rs1_val == 8388608, 
// opcode: mulh ; op1:x26; op2:x3; dest:x10; op1val:8388608;  op2val:1073741823
TEST_RR_OP(mulh, x10, x26, x3, 0x00000000, 8388608, 1073741823, x2, 60, x4)

inst_31:
// rs1==x21, rs1_val == 16777216, rs2_val == -9
// opcode: mulh ; op1:x21; op2:x20; dest:x18; op1val:16777216;  op2val:-9
TEST_RR_OP(mulh, x18, x21, x20, 0x00000000, 16777216, -9, x2, 64, x4)

inst_32:
// rs2==x21, rs1_val == 33554432, 
// opcode: mulh ; op1:x28; op2:x21; dest:x29; op1val:33554432;  op2val:-4097
TEST_RR_OP(mulh, x29, x28, x21, 0x00000000, 33554432, -4097, x2, 68, x4)

inst_33:
// rd==x14, rs1_val == 67108864, 
// opcode: mulh ; op1:x11; op2:x9; dest:x14; op1val:67108864;  op2val:131072
TEST_RR_OP(mulh, x14, x11, x9, 0x00000000, 67108864, 131072, x2, 72, x4)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_34:
// rs1_val == 536870912, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:-10
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 536870912, -10, x1, 0, x4)

inst_35:
// rs1_val == 1073741824, rs2_val == -33
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-33
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 1073741824, -33, x1, 4, x4)

inst_36:
// rs1_val == -2, rs2_val == 8192
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:8192
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -2, 8192, x1, 8, x4)

inst_37:
// rs1_val == -3, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:8388608
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -3, 8388608, x1, 12, x4)

inst_38:
// rs1_val == -5, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-2049
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -5, -2049, x1, 16, x4)

inst_39:
// rs1_val == -9, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-536870913
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -9, -536870913, x1, 20, x4)

inst_40:
// rs1_val == -17, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:-10
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -17, -10, x1, 24, x4)

inst_41:
// rs1_val == -33, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:262144
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -33, 262144, x1, 28, x4)

inst_42:
// rs1_val == -65, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:-8
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -65, -8, x1, 32, x4)

inst_43:
// rs1_val == -129, rs2_val == 1073741824
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:1073741824
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -129, 1073741824, x1, 36, x4)

inst_44:
// rs1_val == -257, rs2_val == -513
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:-513
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -257, -513, x1, 40, x4)

inst_45:
// rs1_val == -513, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-131073
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -513, -131073, x1, 44, x4)

inst_46:
// rs2_val == -262145, rs1_val == -1048577
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:-262145
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -1048577, -262145, x1, 48, x4)

inst_47:
// rs2_val == -1048577, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:-1048577
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 524288, -1048577, x1, 52, x4)

inst_48:
// rs2_val == -2097153, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:-2097153
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 16384, -2097153, x1, 56, x4)

inst_49:
// rs2_val == -4194305, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:3;  op2val:-4194305
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 3, -4194305, x1, 60, x4)

inst_50:
// rs2_val == -16777217, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:-16777217
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -1048577, -16777217, x1, 64, x4)

inst_51:
// rs2_val == -33554433, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:8192;  op2val:-33554433
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 8192, -33554433, x1, 68, x4)

inst_52:
// rs2_val == -67108865, rs1_val == -65537
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-67108865
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -65537, -67108865, x1, 72, x4)

inst_53:
// rs2_val == -134217729, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-134217729
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -513, -134217729, x1, 76, x4)

inst_54:
// rs2_val == -1073741825, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:-1073741825
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 1, -1073741825, x1, 80, x4)

inst_55:
// rs2_val == 1431655765, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:1431655765
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 512, 1431655765, x1, 84, x4)

inst_56:
// rs2_val == -1431655766, rs1_val == -33554433
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-1431655766
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -33554433, -1431655766, x1, 88, x4)

inst_57:
// rs1_val == -1025, rs2_val == 4
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:4
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -1025, 4, x1, 92, x4)

inst_58:
// rs1_val == -2049, rs2_val == 32
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:32
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -2049, 32, x1, 96, x4)

inst_59:
// rs1_val == -4097, rs2_val == 67108864
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:67108864
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -4097, 67108864, x1, 100, x4)

inst_60:
// rs1_val == -8193, rs2_val == -16385
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-16385
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -8193, -16385, x1, 104, x4)

inst_61:
// rs1_val == -16385, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:-2097153
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -16385, -2097153, x1, 108, x4)

inst_62:
// rs1_val == -32769, rs2_val == 512
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-32769;  op2val:512
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -32769, 512, x1, 112, x4)

inst_63:
// rs1_val == -131073, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:8388608
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -131073, 8388608, x1, 116, x4)

inst_64:
// rs1_val == -262145, rs2_val == 2097152
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:2097152
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -262145, 2097152, x1, 120, x4)

inst_65:
// rs1_val == -524289, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:16777216
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -524289, 16777216, x1, 124, x4)

inst_66:
// rs1_val == -2097153, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:4
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -2097153, 4, x1, 128, x4)

inst_67:
// rs1_val == -8388609, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:-8388609
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -8388609, -8388609, x1, 132, x4)

inst_68:
// rs1_val == -16777217, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:-268435457
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -16777217, -268435457, x1, 136, x4)

inst_69:
// rs1_val == -67108865, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-7
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -67108865, -7, x1, 140, x4)

inst_70:
// rs1_val == -134217729, rs2_val == -65537
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:-65537
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -134217729, -65537, x1, 144, x4)

inst_71:
// rs1_val == -268435457, rs2_val == -17
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:-17
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -268435457, -17, x1, 148, x4)

inst_72:
// rs1_val == -536870913, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:-268435457
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -536870913, -268435457, x1, 152, x4)

inst_73:
// rs1_val == -1073741825, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:-131073
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -1073741825, -131073, x1, 156, x4)

inst_74:
// rs1_val == 1431655765, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:-16777217
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 1431655765, -16777217, x1, 160, x4)

inst_75:
// rs1_val == -1431655766, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1073741824
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -1431655766, 1073741824, x1, 164, x4)

inst_76:
// rs2_val == 2, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-2147483648;  op2val:2
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -2147483648, 2, x1, 168, x4)

inst_77:
// rs2_val == 8, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:1073741823;  op2val:8
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 1073741823, 8, x1, 172, x4)

inst_78:
// rs2_val == 128, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:128
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 4, 128, x1, 176, x4)

inst_79:
// rs2_val == 256, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:256
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 2, 256, x1, 180, x4)

inst_80:
// rs2_val == 1024, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:256;  op2val:1024
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 256, 1024, x1, 184, x4)

inst_81:
// rs2_val == 2048, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:2048
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 4, 2048, x1, 188, x4)

inst_82:
// rs2_val == 4096, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:4096
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 8388608, 4096, x1, 192, x4)

inst_83:
// rs2_val == 524288, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:524288
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -3, 524288, x1, 196, x4)

inst_84:
// rs2_val == 1048576, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:1048576
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -33554433, 1048576, x1, 200, x4)

inst_85:
// rs2_val == 4194304, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:4194304
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -8388609, 4194304, x1, 204, x4)

inst_86:
// rs2_val == 134217728, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:134217728
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -4097, 134217728, x1, 208, x4)

inst_87:
// rs2_val == 268435456, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-7;  op2val:268435456
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -7, 268435456, x1, 212, x4)

inst_88:
// rs2_val == 536870912, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:536870912
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 1048576, 536870912, x1, 216, x4)

inst_89:
// rs2_val == -3, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-3
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -2, -3, x1, 220, x4)

inst_90:
// rs2_val == -65, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:256;  op2val:-65
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 256, -65, x1, 224, x4)

inst_91:
// rs2_val == -129, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-129
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -9, -129, x1, 228, x4)

inst_92:
// rs2_val == 32768, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:32768
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 6, 32768, x1, 232, x4)

inst_93:
// rs2_val == -257, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-257
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -67108865, -257, x1, 236, x4)

inst_94:
// rs2_val == -1025, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:-1025
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 8, -1025, x1, 240, x4)

inst_95:
// rs2_val == -8193, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:8;  op2val:-8193
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 8, -8193, x1, 244, x4)

inst_96:
// rs2_val == 16384, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:16384
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 4194304, 16384, x1, 248, x4)

inst_97:
// rs2_val == -32769, 
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:-1073741824;  op2val:-32769
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, -1073741824, -32769, x1, 252, x4)

inst_98:
// rs2_val == (-2**(xlen-1)), rs1_val == 134217728, rs2_val == -2147483648
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-2147483648
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 134217728, -2147483648, x1, 256, x4)

inst_99:
// rs1_val == 16, rs2_val == 131072
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:131072
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 16, 131072, x1, 260, x4)

inst_100:
// rs1_val == 16384, rs2_val == -2
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:16384;  op2val:-2
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 16384, -2, x1, 264, x4)

inst_101:
// rs1_val == 131072, rs2_val == 262144
// opcode: mulh ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:262144
TEST_RR_OP(mulh, x12, x10, x11, 0x00000000, 131072, 262144, x1, 268, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 68*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
