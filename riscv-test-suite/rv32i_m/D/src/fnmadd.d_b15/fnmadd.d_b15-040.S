
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29952:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efff80000000000; valaddr_reg:x3; val_offset:89856*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89856*0 + 3*0*FLEN/8, x4, x1, x2)

inst_29953:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffc0000000000; valaddr_reg:x3; val_offset:89859*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89859*0 + 3*1*FLEN/8, x4, x1, x2)

inst_29954:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffe0000000000; valaddr_reg:x3; val_offset:89862*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89862*0 + 3*2*FLEN/8, x4, x1, x2)

inst_29955:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effff0000000000; valaddr_reg:x3; val_offset:89865*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89865*0 + 3*3*FLEN/8, x4, x1, x2)

inst_29956:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effff8000000000; valaddr_reg:x3; val_offset:89868*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89868*0 + 3*4*FLEN/8, x4, x1, x2)

inst_29957:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffc000000000; valaddr_reg:x3; val_offset:89871*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89871*0 + 3*5*FLEN/8, x4, x1, x2)

inst_29958:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffe000000000; valaddr_reg:x3; val_offset:89874*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89874*0 + 3*6*FLEN/8, x4, x1, x2)

inst_29959:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffff000000000; valaddr_reg:x3; val_offset:89877*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89877*0 + 3*7*FLEN/8, x4, x1, x2)

inst_29960:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffff800000000; valaddr_reg:x3; val_offset:89880*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89880*0 + 3*8*FLEN/8, x4, x1, x2)

inst_29961:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffc00000000; valaddr_reg:x3; val_offset:89883*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89883*0 + 3*9*FLEN/8, x4, x1, x2)

inst_29962:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffe00000000; valaddr_reg:x3; val_offset:89886*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89886*0 + 3*10*FLEN/8, x4, x1, x2)

inst_29963:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffff00000000; valaddr_reg:x3; val_offset:89889*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89889*0 + 3*11*FLEN/8, x4, x1, x2)

inst_29964:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffff80000000; valaddr_reg:x3; val_offset:89892*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89892*0 + 3*12*FLEN/8, x4, x1, x2)

inst_29965:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffc0000000; valaddr_reg:x3; val_offset:89895*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89895*0 + 3*13*FLEN/8, x4, x1, x2)

inst_29966:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffe0000000; valaddr_reg:x3; val_offset:89898*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89898*0 + 3*14*FLEN/8, x4, x1, x2)

inst_29967:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffff0000000; valaddr_reg:x3; val_offset:89901*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89901*0 + 3*15*FLEN/8, x4, x1, x2)

inst_29968:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffff8000000; valaddr_reg:x3; val_offset:89904*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89904*0 + 3*16*FLEN/8, x4, x1, x2)

inst_29969:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffc000000; valaddr_reg:x3; val_offset:89907*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89907*0 + 3*17*FLEN/8, x4, x1, x2)

inst_29970:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffe000000; valaddr_reg:x3; val_offset:89910*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89910*0 + 3*18*FLEN/8, x4, x1, x2)

inst_29971:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffff000000; valaddr_reg:x3; val_offset:89913*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89913*0 + 3*19*FLEN/8, x4, x1, x2)

inst_29972:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffff800000; valaddr_reg:x3; val_offset:89916*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89916*0 + 3*20*FLEN/8, x4, x1, x2)

inst_29973:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffc00000; valaddr_reg:x3; val_offset:89919*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89919*0 + 3*21*FLEN/8, x4, x1, x2)

inst_29974:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffe00000; valaddr_reg:x3; val_offset:89922*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89922*0 + 3*22*FLEN/8, x4, x1, x2)

inst_29975:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffff00000; valaddr_reg:x3; val_offset:89925*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89925*0 + 3*23*FLEN/8, x4, x1, x2)

inst_29976:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffff80000; valaddr_reg:x3; val_offset:89928*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89928*0 + 3*24*FLEN/8, x4, x1, x2)

inst_29977:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffc0000; valaddr_reg:x3; val_offset:89931*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89931*0 + 3*25*FLEN/8, x4, x1, x2)

inst_29978:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffe0000; valaddr_reg:x3; val_offset:89934*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89934*0 + 3*26*FLEN/8, x4, x1, x2)

inst_29979:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffff0000; valaddr_reg:x3; val_offset:89937*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89937*0 + 3*27*FLEN/8, x4, x1, x2)

inst_29980:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffff8000; valaddr_reg:x3; val_offset:89940*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89940*0 + 3*28*FLEN/8, x4, x1, x2)

inst_29981:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffffc000; valaddr_reg:x3; val_offset:89943*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89943*0 + 3*29*FLEN/8, x4, x1, x2)

inst_29982:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffffe000; valaddr_reg:x3; val_offset:89946*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89946*0 + 3*30*FLEN/8, x4, x1, x2)

inst_29983:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffff000; valaddr_reg:x3; val_offset:89949*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89949*0 + 3*31*FLEN/8, x4, x1, x2)

inst_29984:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffff800; valaddr_reg:x3; val_offset:89952*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89952*0 + 3*32*FLEN/8, x4, x1, x2)

inst_29985:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffffc00; valaddr_reg:x3; val_offset:89955*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89955*0 + 3*33*FLEN/8, x4, x1, x2)

inst_29986:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffffe00; valaddr_reg:x3; val_offset:89958*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89958*0 + 3*34*FLEN/8, x4, x1, x2)

inst_29987:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffffff00; valaddr_reg:x3; val_offset:89961*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89961*0 + 3*35*FLEN/8, x4, x1, x2)

inst_29988:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffffff80; valaddr_reg:x3; val_offset:89964*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89964*0 + 3*36*FLEN/8, x4, x1, x2)

inst_29989:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffffffc0; valaddr_reg:x3; val_offset:89967*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89967*0 + 3*37*FLEN/8, x4, x1, x2)

inst_29990:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffffffe0; valaddr_reg:x3; val_offset:89970*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89970*0 + 3*38*FLEN/8, x4, x1, x2)

inst_29991:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffffff0; valaddr_reg:x3; val_offset:89973*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89973*0 + 3*39*FLEN/8, x4, x1, x2)

inst_29992:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffffff8; valaddr_reg:x3; val_offset:89976*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89976*0 + 3*40*FLEN/8, x4, x1, x2)

inst_29993:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffffffc; valaddr_reg:x3; val_offset:89979*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89979*0 + 3*41*FLEN/8, x4, x1, x2)

inst_29994:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3efffffffffffffe; valaddr_reg:x3; val_offset:89982*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89982*0 + 3*42*FLEN/8, x4, x1, x2)

inst_29995:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ef and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3effffffffffffff; valaddr_reg:x3; val_offset:89985*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89985*0 + 3*43*FLEN/8, x4, x1, x2)

inst_29996:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:89988*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89988*0 + 3*44*FLEN/8, x4, x1, x2)

inst_29997:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:89991*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89991*0 + 3*45*FLEN/8, x4, x1, x2)

inst_29998:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:89994*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89994*0 + 3*46*FLEN/8, x4, x1, x2)

inst_29999:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:89997*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 89997*0 + 3*47*FLEN/8, x4, x1, x2)

inst_30000:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:90000*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90000*0 + 3*48*FLEN/8, x4, x1, x2)

inst_30001:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:90003*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90003*0 + 3*49*FLEN/8, x4, x1, x2)

inst_30002:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:90006*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90006*0 + 3*50*FLEN/8, x4, x1, x2)

inst_30003:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:90009*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90009*0 + 3*51*FLEN/8, x4, x1, x2)

inst_30004:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:90012*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90012*0 + 3*52*FLEN/8, x4, x1, x2)

inst_30005:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:90015*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90015*0 + 3*53*FLEN/8, x4, x1, x2)

inst_30006:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:90018*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90018*0 + 3*54*FLEN/8, x4, x1, x2)

inst_30007:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:90021*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90021*0 + 3*55*FLEN/8, x4, x1, x2)

inst_30008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:90024*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90024*0 + 3*56*FLEN/8, x4, x1, x2)

inst_30009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:90027*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90027*0 + 3*57*FLEN/8, x4, x1, x2)

inst_30010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:90030*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90030*0 + 3*58*FLEN/8, x4, x1, x2)

inst_30011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:90033*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90033*0 + 3*59*FLEN/8, x4, x1, x2)

inst_30012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:90036*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90036*0 + 3*60*FLEN/8, x4, x1, x2)

inst_30013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:90039*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90039*0 + 3*61*FLEN/8, x4, x1, x2)

inst_30014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:90042*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90042*0 + 3*62*FLEN/8, x4, x1, x2)

inst_30015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:90045*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90045*0 + 3*63*FLEN/8, x4, x1, x2)

inst_30016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:90048*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90048*0 + 3*64*FLEN/8, x4, x1, x2)

inst_30017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ea557c83fcb1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb1164751f657e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ea557c83fcb1; op2val:0x204b1164751f657e;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:90051*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90051*0 + 3*65*FLEN/8, x4, x1, x2)

inst_30018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000000000; valaddr_reg:x3; val_offset:90054*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90054*0 + 3*66*FLEN/8, x4, x1, x2)

inst_30019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000000001; valaddr_reg:x3; val_offset:90057*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90057*0 + 3*67*FLEN/8, x4, x1, x2)

inst_30020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000000003; valaddr_reg:x3; val_offset:90060*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90060*0 + 3*68*FLEN/8, x4, x1, x2)

inst_30021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000000007; valaddr_reg:x3; val_offset:90063*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90063*0 + 3*69*FLEN/8, x4, x1, x2)

inst_30022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000000000f; valaddr_reg:x3; val_offset:90066*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90066*0 + 3*70*FLEN/8, x4, x1, x2)

inst_30023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000000001f; valaddr_reg:x3; val_offset:90069*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90069*0 + 3*71*FLEN/8, x4, x1, x2)

inst_30024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000000003f; valaddr_reg:x3; val_offset:90072*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90072*0 + 3*72*FLEN/8, x4, x1, x2)

inst_30025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000000007f; valaddr_reg:x3; val_offset:90075*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90075*0 + 3*73*FLEN/8, x4, x1, x2)

inst_30026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000000000ff; valaddr_reg:x3; val_offset:90078*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90078*0 + 3*74*FLEN/8, x4, x1, x2)

inst_30027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000000001ff; valaddr_reg:x3; val_offset:90081*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90081*0 + 3*75*FLEN/8, x4, x1, x2)

inst_30028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000000003ff; valaddr_reg:x3; val_offset:90084*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90084*0 + 3*76*FLEN/8, x4, x1, x2)

inst_30029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000000007ff; valaddr_reg:x3; val_offset:90087*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90087*0 + 3*77*FLEN/8, x4, x1, x2)

inst_30030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000000fff; valaddr_reg:x3; val_offset:90090*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90090*0 + 3*78*FLEN/8, x4, x1, x2)

inst_30031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000001fff; valaddr_reg:x3; val_offset:90093*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90093*0 + 3*79*FLEN/8, x4, x1, x2)

inst_30032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000003fff; valaddr_reg:x3; val_offset:90096*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90096*0 + 3*80*FLEN/8, x4, x1, x2)

inst_30033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000007fff; valaddr_reg:x3; val_offset:90099*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90099*0 + 3*81*FLEN/8, x4, x1, x2)

inst_30034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000000ffff; valaddr_reg:x3; val_offset:90102*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90102*0 + 3*82*FLEN/8, x4, x1, x2)

inst_30035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000001ffff; valaddr_reg:x3; val_offset:90105*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90105*0 + 3*83*FLEN/8, x4, x1, x2)

inst_30036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000003ffff; valaddr_reg:x3; val_offset:90108*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90108*0 + 3*84*FLEN/8, x4, x1, x2)

inst_30037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000007ffff; valaddr_reg:x3; val_offset:90111*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90111*0 + 3*85*FLEN/8, x4, x1, x2)

inst_30038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000000fffff; valaddr_reg:x3; val_offset:90114*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90114*0 + 3*86*FLEN/8, x4, x1, x2)

inst_30039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000001fffff; valaddr_reg:x3; val_offset:90117*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90117*0 + 3*87*FLEN/8, x4, x1, x2)

inst_30040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000003fffff; valaddr_reg:x3; val_offset:90120*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90120*0 + 3*88*FLEN/8, x4, x1, x2)

inst_30041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000007fffff; valaddr_reg:x3; val_offset:90123*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90123*0 + 3*89*FLEN/8, x4, x1, x2)

inst_30042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000000ffffff; valaddr_reg:x3; val_offset:90126*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90126*0 + 3*90*FLEN/8, x4, x1, x2)

inst_30043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000001ffffff; valaddr_reg:x3; val_offset:90129*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90129*0 + 3*91*FLEN/8, x4, x1, x2)

inst_30044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000003ffffff; valaddr_reg:x3; val_offset:90132*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90132*0 + 3*92*FLEN/8, x4, x1, x2)

inst_30045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000007ffffff; valaddr_reg:x3; val_offset:90135*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90135*0 + 3*93*FLEN/8, x4, x1, x2)

inst_30046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000000fffffff; valaddr_reg:x3; val_offset:90138*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90138*0 + 3*94*FLEN/8, x4, x1, x2)

inst_30047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000001fffffff; valaddr_reg:x3; val_offset:90141*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90141*0 + 3*95*FLEN/8, x4, x1, x2)

inst_30048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000003fffffff; valaddr_reg:x3; val_offset:90144*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90144*0 + 3*96*FLEN/8, x4, x1, x2)

inst_30049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000007fffffff; valaddr_reg:x3; val_offset:90147*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90147*0 + 3*97*FLEN/8, x4, x1, x2)

inst_30050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500000ffffffff; valaddr_reg:x3; val_offset:90150*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90150*0 + 3*98*FLEN/8, x4, x1, x2)

inst_30051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500001ffffffff; valaddr_reg:x3; val_offset:90153*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90153*0 + 3*99*FLEN/8, x4, x1, x2)

inst_30052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500003ffffffff; valaddr_reg:x3; val_offset:90156*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90156*0 + 3*100*FLEN/8, x4, x1, x2)

inst_30053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500007ffffffff; valaddr_reg:x3; val_offset:90159*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90159*0 + 3*101*FLEN/8, x4, x1, x2)

inst_30054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50000fffffffff; valaddr_reg:x3; val_offset:90162*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90162*0 + 3*102*FLEN/8, x4, x1, x2)

inst_30055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50001fffffffff; valaddr_reg:x3; val_offset:90165*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90165*0 + 3*103*FLEN/8, x4, x1, x2)

inst_30056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50003fffffffff; valaddr_reg:x3; val_offset:90168*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90168*0 + 3*104*FLEN/8, x4, x1, x2)

inst_30057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50007fffffffff; valaddr_reg:x3; val_offset:90171*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90171*0 + 3*105*FLEN/8, x4, x1, x2)

inst_30058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5000ffffffffff; valaddr_reg:x3; val_offset:90174*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90174*0 + 3*106*FLEN/8, x4, x1, x2)

inst_30059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5001ffffffffff; valaddr_reg:x3; val_offset:90177*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90177*0 + 3*107*FLEN/8, x4, x1, x2)

inst_30060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5003ffffffffff; valaddr_reg:x3; val_offset:90180*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90180*0 + 3*108*FLEN/8, x4, x1, x2)

inst_30061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5007ffffffffff; valaddr_reg:x3; val_offset:90183*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90183*0 + 3*109*FLEN/8, x4, x1, x2)

inst_30062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f500fffffffffff; valaddr_reg:x3; val_offset:90186*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90186*0 + 3*110*FLEN/8, x4, x1, x2)

inst_30063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f501fffffffffff; valaddr_reg:x3; val_offset:90189*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90189*0 + 3*111*FLEN/8, x4, x1, x2)

inst_30064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f503fffffffffff; valaddr_reg:x3; val_offset:90192*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90192*0 + 3*112*FLEN/8, x4, x1, x2)

inst_30065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f507fffffffffff; valaddr_reg:x3; val_offset:90195*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90195*0 + 3*113*FLEN/8, x4, x1, x2)

inst_30066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f50ffffffffffff; valaddr_reg:x3; val_offset:90198*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90198*0 + 3*114*FLEN/8, x4, x1, x2)

inst_30067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f51ffffffffffff; valaddr_reg:x3; val_offset:90201*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90201*0 + 3*115*FLEN/8, x4, x1, x2)

inst_30068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f53ffffffffffff; valaddr_reg:x3; val_offset:90204*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90204*0 + 3*116*FLEN/8, x4, x1, x2)

inst_30069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f57ffffffffffff; valaddr_reg:x3; val_offset:90207*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90207*0 + 3*117*FLEN/8, x4, x1, x2)

inst_30070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f58000000000000; valaddr_reg:x3; val_offset:90210*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90210*0 + 3*118*FLEN/8, x4, x1, x2)

inst_30071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5c000000000000; valaddr_reg:x3; val_offset:90213*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90213*0 + 3*119*FLEN/8, x4, x1, x2)

inst_30072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5e000000000000; valaddr_reg:x3; val_offset:90216*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90216*0 + 3*120*FLEN/8, x4, x1, x2)

inst_30073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5f000000000000; valaddr_reg:x3; val_offset:90219*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90219*0 + 3*121*FLEN/8, x4, x1, x2)

inst_30074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5f800000000000; valaddr_reg:x3; val_offset:90222*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90222*0 + 3*122*FLEN/8, x4, x1, x2)

inst_30075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fc00000000000; valaddr_reg:x3; val_offset:90225*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90225*0 + 3*123*FLEN/8, x4, x1, x2)

inst_30076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fe00000000000; valaddr_reg:x3; val_offset:90228*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90228*0 + 3*124*FLEN/8, x4, x1, x2)

inst_30077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ff00000000000; valaddr_reg:x3; val_offset:90231*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90231*0 + 3*125*FLEN/8, x4, x1, x2)

inst_30078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ff80000000000; valaddr_reg:x3; val_offset:90234*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90234*0 + 3*126*FLEN/8, x4, x1, x2)

inst_30079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffc0000000000; valaddr_reg:x3; val_offset:90237*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90237*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_30080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffe0000000000; valaddr_reg:x3; val_offset:90240*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90240*0 + 3*128*FLEN/8, x4, x1, x2)

inst_30081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fff0000000000; valaddr_reg:x3; val_offset:90243*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90243*0 + 3*129*FLEN/8, x4, x1, x2)

inst_30082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fff8000000000; valaddr_reg:x3; val_offset:90246*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90246*0 + 3*130*FLEN/8, x4, x1, x2)

inst_30083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffc000000000; valaddr_reg:x3; val_offset:90249*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90249*0 + 3*131*FLEN/8, x4, x1, x2)

inst_30084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffe000000000; valaddr_reg:x3; val_offset:90252*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90252*0 + 3*132*FLEN/8, x4, x1, x2)

inst_30085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffff000000000; valaddr_reg:x3; val_offset:90255*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90255*0 + 3*133*FLEN/8, x4, x1, x2)

inst_30086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffff800000000; valaddr_reg:x3; val_offset:90258*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90258*0 + 3*134*FLEN/8, x4, x1, x2)

inst_30087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffc00000000; valaddr_reg:x3; val_offset:90261*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90261*0 + 3*135*FLEN/8, x4, x1, x2)

inst_30088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffe00000000; valaddr_reg:x3; val_offset:90264*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90264*0 + 3*136*FLEN/8, x4, x1, x2)

inst_30089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffff00000000; valaddr_reg:x3; val_offset:90267*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90267*0 + 3*137*FLEN/8, x4, x1, x2)

inst_30090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffff80000000; valaddr_reg:x3; val_offset:90270*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90270*0 + 3*138*FLEN/8, x4, x1, x2)

inst_30091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffc0000000; valaddr_reg:x3; val_offset:90273*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90273*0 + 3*139*FLEN/8, x4, x1, x2)

inst_30092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffe0000000; valaddr_reg:x3; val_offset:90276*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90276*0 + 3*140*FLEN/8, x4, x1, x2)

inst_30093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffff0000000; valaddr_reg:x3; val_offset:90279*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90279*0 + 3*141*FLEN/8, x4, x1, x2)

inst_30094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffff8000000; valaddr_reg:x3; val_offset:90282*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90282*0 + 3*142*FLEN/8, x4, x1, x2)

inst_30095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffc000000; valaddr_reg:x3; val_offset:90285*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90285*0 + 3*143*FLEN/8, x4, x1, x2)

inst_30096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffe000000; valaddr_reg:x3; val_offset:90288*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90288*0 + 3*144*FLEN/8, x4, x1, x2)

inst_30097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffff000000; valaddr_reg:x3; val_offset:90291*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90291*0 + 3*145*FLEN/8, x4, x1, x2)

inst_30098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffff800000; valaddr_reg:x3; val_offset:90294*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90294*0 + 3*146*FLEN/8, x4, x1, x2)

inst_30099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffc00000; valaddr_reg:x3; val_offset:90297*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90297*0 + 3*147*FLEN/8, x4, x1, x2)

inst_30100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffe00000; valaddr_reg:x3; val_offset:90300*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90300*0 + 3*148*FLEN/8, x4, x1, x2)

inst_30101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffff00000; valaddr_reg:x3; val_offset:90303*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90303*0 + 3*149*FLEN/8, x4, x1, x2)

inst_30102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffff80000; valaddr_reg:x3; val_offset:90306*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90306*0 + 3*150*FLEN/8, x4, x1, x2)

inst_30103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffc0000; valaddr_reg:x3; val_offset:90309*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90309*0 + 3*151*FLEN/8, x4, x1, x2)

inst_30104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffe0000; valaddr_reg:x3; val_offset:90312*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90312*0 + 3*152*FLEN/8, x4, x1, x2)

inst_30105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffff0000; valaddr_reg:x3; val_offset:90315*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90315*0 + 3*153*FLEN/8, x4, x1, x2)

inst_30106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffff8000; valaddr_reg:x3; val_offset:90318*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90318*0 + 3*154*FLEN/8, x4, x1, x2)

inst_30107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffffc000; valaddr_reg:x3; val_offset:90321*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90321*0 + 3*155*FLEN/8, x4, x1, x2)

inst_30108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffffe000; valaddr_reg:x3; val_offset:90324*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90324*0 + 3*156*FLEN/8, x4, x1, x2)

inst_30109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffff000; valaddr_reg:x3; val_offset:90327*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90327*0 + 3*157*FLEN/8, x4, x1, x2)

inst_30110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffff800; valaddr_reg:x3; val_offset:90330*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90330*0 + 3*158*FLEN/8, x4, x1, x2)

inst_30111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffffc00; valaddr_reg:x3; val_offset:90333*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90333*0 + 3*159*FLEN/8, x4, x1, x2)

inst_30112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffffe00; valaddr_reg:x3; val_offset:90336*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90336*0 + 3*160*FLEN/8, x4, x1, x2)

inst_30113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffffff00; valaddr_reg:x3; val_offset:90339*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90339*0 + 3*161*FLEN/8, x4, x1, x2)

inst_30114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffffff80; valaddr_reg:x3; val_offset:90342*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90342*0 + 3*162*FLEN/8, x4, x1, x2)

inst_30115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffffffc0; valaddr_reg:x3; val_offset:90345*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90345*0 + 3*163*FLEN/8, x4, x1, x2)

inst_30116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffffffe0; valaddr_reg:x3; val_offset:90348*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90348*0 + 3*164*FLEN/8, x4, x1, x2)

inst_30117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffffff0; valaddr_reg:x3; val_offset:90351*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90351*0 + 3*165*FLEN/8, x4, x1, x2)

inst_30118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffffff8; valaddr_reg:x3; val_offset:90354*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90354*0 + 3*166*FLEN/8, x4, x1, x2)

inst_30119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffffffc; valaddr_reg:x3; val_offset:90357*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90357*0 + 3*167*FLEN/8, x4, x1, x2)

inst_30120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5ffffffffffffe; valaddr_reg:x3; val_offset:90360*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90360*0 + 3*168*FLEN/8, x4, x1, x2)

inst_30121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3f5 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3f5fffffffffffff; valaddr_reg:x3; val_offset:90363*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90363*0 + 3*169*FLEN/8, x4, x1, x2)

inst_30122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:90366*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90366*0 + 3*170*FLEN/8, x4, x1, x2)

inst_30123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:90369*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90369*0 + 3*171*FLEN/8, x4, x1, x2)

inst_30124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:90372*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90372*0 + 3*172*FLEN/8, x4, x1, x2)

inst_30125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:90375*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90375*0 + 3*173*FLEN/8, x4, x1, x2)

inst_30126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:90378*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90378*0 + 3*174*FLEN/8, x4, x1, x2)

inst_30127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:90381*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90381*0 + 3*175*FLEN/8, x4, x1, x2)

inst_30128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:90384*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90384*0 + 3*176*FLEN/8, x4, x1, x2)

inst_30129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:90387*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90387*0 + 3*177*FLEN/8, x4, x1, x2)

inst_30130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:90390*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90390*0 + 3*178*FLEN/8, x4, x1, x2)

inst_30131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:90393*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90393*0 + 3*179*FLEN/8, x4, x1, x2)

inst_30132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:90396*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90396*0 + 3*180*FLEN/8, x4, x1, x2)

inst_30133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:90399*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90399*0 + 3*181*FLEN/8, x4, x1, x2)

inst_30134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:90402*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90402*0 + 3*182*FLEN/8, x4, x1, x2)

inst_30135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:90405*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90405*0 + 3*183*FLEN/8, x4, x1, x2)

inst_30136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:90408*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90408*0 + 3*184*FLEN/8, x4, x1, x2)

inst_30137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:90411*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90411*0 + 3*185*FLEN/8, x4, x1, x2)

inst_30138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:90414*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90414*0 + 3*186*FLEN/8, x4, x1, x2)

inst_30139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:90417*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90417*0 + 3*187*FLEN/8, x4, x1, x2)

inst_30140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:90420*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90420*0 + 3*188*FLEN/8, x4, x1, x2)

inst_30141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:90423*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90423*0 + 3*189*FLEN/8, x4, x1, x2)

inst_30142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:90426*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90426*0 + 3*190*FLEN/8, x4, x1, x2)

inst_30143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ed5ed0195b97 and fs2 == 0 and fe2 == 0x204 and fm2 == 0xb0d0ccc60d4c1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ed5ed0195b97; op2val:0x204b0d0ccc60d4c1;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:90429*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90429*0 + 3*191*FLEN/8, x4, x1, x2)

inst_30144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:90432*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90432*0 + 3*192*FLEN/8, x4, x1, x2)

inst_30145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:90435*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90435*0 + 3*193*FLEN/8, x4, x1, x2)

inst_30146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:90438*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90438*0 + 3*194*FLEN/8, x4, x1, x2)

inst_30147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:90441*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90441*0 + 3*195*FLEN/8, x4, x1, x2)

inst_30148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:90444*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90444*0 + 3*196*FLEN/8, x4, x1, x2)

inst_30149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:90447*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90447*0 + 3*197*FLEN/8, x4, x1, x2)

inst_30150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:90450*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90450*0 + 3*198*FLEN/8, x4, x1, x2)

inst_30151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:90453*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90453*0 + 3*199*FLEN/8, x4, x1, x2)

inst_30152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:90456*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90456*0 + 3*200*FLEN/8, x4, x1, x2)

inst_30153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:90459*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90459*0 + 3*201*FLEN/8, x4, x1, x2)

inst_30154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:90462*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90462*0 + 3*202*FLEN/8, x4, x1, x2)

inst_30155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:90465*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90465*0 + 3*203*FLEN/8, x4, x1, x2)

inst_30156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:90468*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90468*0 + 3*204*FLEN/8, x4, x1, x2)

inst_30157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:90471*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90471*0 + 3*205*FLEN/8, x4, x1, x2)

inst_30158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:90474*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90474*0 + 3*206*FLEN/8, x4, x1, x2)

inst_30159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:90477*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90477*0 + 3*207*FLEN/8, x4, x1, x2)

inst_30160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:90480*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90480*0 + 3*208*FLEN/8, x4, x1, x2)

inst_30161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:90483*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90483*0 + 3*209*FLEN/8, x4, x1, x2)

inst_30162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:90486*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90486*0 + 3*210*FLEN/8, x4, x1, x2)

inst_30163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:90489*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90489*0 + 3*211*FLEN/8, x4, x1, x2)

inst_30164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:90492*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90492*0 + 3*212*FLEN/8, x4, x1, x2)

inst_30165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:90495*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90495*0 + 3*213*FLEN/8, x4, x1, x2)

inst_30166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000000000; valaddr_reg:x3; val_offset:90498*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90498*0 + 3*214*FLEN/8, x4, x1, x2)

inst_30167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000000001; valaddr_reg:x3; val_offset:90501*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90501*0 + 3*215*FLEN/8, x4, x1, x2)

inst_30168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000000003; valaddr_reg:x3; val_offset:90504*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90504*0 + 3*216*FLEN/8, x4, x1, x2)

inst_30169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000000007; valaddr_reg:x3; val_offset:90507*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90507*0 + 3*217*FLEN/8, x4, x1, x2)

inst_30170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000000000f; valaddr_reg:x3; val_offset:90510*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90510*0 + 3*218*FLEN/8, x4, x1, x2)

inst_30171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000000001f; valaddr_reg:x3; val_offset:90513*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90513*0 + 3*219*FLEN/8, x4, x1, x2)

inst_30172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000000003f; valaddr_reg:x3; val_offset:90516*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90516*0 + 3*220*FLEN/8, x4, x1, x2)

inst_30173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000000007f; valaddr_reg:x3; val_offset:90519*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90519*0 + 3*221*FLEN/8, x4, x1, x2)

inst_30174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000000000ff; valaddr_reg:x3; val_offset:90522*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90522*0 + 3*222*FLEN/8, x4, x1, x2)

inst_30175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000000001ff; valaddr_reg:x3; val_offset:90525*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90525*0 + 3*223*FLEN/8, x4, x1, x2)

inst_30176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000000003ff; valaddr_reg:x3; val_offset:90528*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90528*0 + 3*224*FLEN/8, x4, x1, x2)

inst_30177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000000007ff; valaddr_reg:x3; val_offset:90531*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90531*0 + 3*225*FLEN/8, x4, x1, x2)

inst_30178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000000fff; valaddr_reg:x3; val_offset:90534*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90534*0 + 3*226*FLEN/8, x4, x1, x2)

inst_30179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000001fff; valaddr_reg:x3; val_offset:90537*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90537*0 + 3*227*FLEN/8, x4, x1, x2)

inst_30180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000003fff; valaddr_reg:x3; val_offset:90540*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90540*0 + 3*228*FLEN/8, x4, x1, x2)

inst_30181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000007fff; valaddr_reg:x3; val_offset:90543*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90543*0 + 3*229*FLEN/8, x4, x1, x2)

inst_30182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000000ffff; valaddr_reg:x3; val_offset:90546*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90546*0 + 3*230*FLEN/8, x4, x1, x2)

inst_30183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000001ffff; valaddr_reg:x3; val_offset:90549*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90549*0 + 3*231*FLEN/8, x4, x1, x2)

inst_30184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000003ffff; valaddr_reg:x3; val_offset:90552*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90552*0 + 3*232*FLEN/8, x4, x1, x2)

inst_30185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000007ffff; valaddr_reg:x3; val_offset:90555*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90555*0 + 3*233*FLEN/8, x4, x1, x2)

inst_30186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000000fffff; valaddr_reg:x3; val_offset:90558*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90558*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000001fffff; valaddr_reg:x3; val_offset:90561*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90561*0 + 3*235*FLEN/8, x4, x1, x2)

inst_30188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000003fffff; valaddr_reg:x3; val_offset:90564*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90564*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000007fffff; valaddr_reg:x3; val_offset:90567*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90567*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000000ffffff; valaddr_reg:x3; val_offset:90570*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90570*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000001ffffff; valaddr_reg:x3; val_offset:90573*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90573*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000003ffffff; valaddr_reg:x3; val_offset:90576*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90576*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000007ffffff; valaddr_reg:x3; val_offset:90579*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90579*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000000fffffff; valaddr_reg:x3; val_offset:90582*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90582*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000001fffffff; valaddr_reg:x3; val_offset:90585*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90585*0 + 3*243*FLEN/8, x4, x1, x2)

inst_30196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000003fffffff; valaddr_reg:x3; val_offset:90588*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90588*0 + 3*244*FLEN/8, x4, x1, x2)

inst_30197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000007fffffff; valaddr_reg:x3; val_offset:90591*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90591*0 + 3*245*FLEN/8, x4, x1, x2)

inst_30198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700000ffffffff; valaddr_reg:x3; val_offset:90594*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90594*0 + 3*246*FLEN/8, x4, x1, x2)

inst_30199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700001ffffffff; valaddr_reg:x3; val_offset:90597*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90597*0 + 3*247*FLEN/8, x4, x1, x2)

inst_30200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700003ffffffff; valaddr_reg:x3; val_offset:90600*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90600*0 + 3*248*FLEN/8, x4, x1, x2)

inst_30201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700007ffffffff; valaddr_reg:x3; val_offset:90603*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90603*0 + 3*249*FLEN/8, x4, x1, x2)

inst_30202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270000fffffffff; valaddr_reg:x3; val_offset:90606*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90606*0 + 3*250*FLEN/8, x4, x1, x2)

inst_30203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270001fffffffff; valaddr_reg:x3; val_offset:90609*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90609*0 + 3*251*FLEN/8, x4, x1, x2)

inst_30204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270003fffffffff; valaddr_reg:x3; val_offset:90612*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90612*0 + 3*252*FLEN/8, x4, x1, x2)

inst_30205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270007fffffffff; valaddr_reg:x3; val_offset:90615*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90615*0 + 3*253*FLEN/8, x4, x1, x2)

inst_30206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27000ffffffffff; valaddr_reg:x3; val_offset:90618*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90618*0 + 3*254*FLEN/8, x4, x1, x2)

inst_30207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27001ffffffffff; valaddr_reg:x3; val_offset:90621*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90621*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_30208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27003ffffffffff; valaddr_reg:x3; val_offset:90624*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90624*0 + 3*256*FLEN/8, x4, x1, x2)

inst_30209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27007ffffffffff; valaddr_reg:x3; val_offset:90627*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90627*0 + 3*257*FLEN/8, x4, x1, x2)

inst_30210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2700fffffffffff; valaddr_reg:x3; val_offset:90630*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90630*0 + 3*258*FLEN/8, x4, x1, x2)

inst_30211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2701fffffffffff; valaddr_reg:x3; val_offset:90633*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90633*0 + 3*259*FLEN/8, x4, x1, x2)

inst_30212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2703fffffffffff; valaddr_reg:x3; val_offset:90636*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90636*0 + 3*260*FLEN/8, x4, x1, x2)

inst_30213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x2707fffffffffff; valaddr_reg:x3; val_offset:90639*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90639*0 + 3*261*FLEN/8, x4, x1, x2)

inst_30214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x270ffffffffffff; valaddr_reg:x3; val_offset:90642*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90642*0 + 3*262*FLEN/8, x4, x1, x2)

inst_30215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x271ffffffffffff; valaddr_reg:x3; val_offset:90645*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90645*0 + 3*263*FLEN/8, x4, x1, x2)

inst_30216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x273ffffffffffff; valaddr_reg:x3; val_offset:90648*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90648*0 + 3*264*FLEN/8, x4, x1, x2)

inst_30217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x277ffffffffffff; valaddr_reg:x3; val_offset:90651*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90651*0 + 3*265*FLEN/8, x4, x1, x2)

inst_30218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x278000000000000; valaddr_reg:x3; val_offset:90654*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90654*0 + 3*266*FLEN/8, x4, x1, x2)

inst_30219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27c000000000000; valaddr_reg:x3; val_offset:90657*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90657*0 + 3*267*FLEN/8, x4, x1, x2)

inst_30220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27e000000000000; valaddr_reg:x3; val_offset:90660*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90660*0 + 3*268*FLEN/8, x4, x1, x2)

inst_30221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27f000000000000; valaddr_reg:x3; val_offset:90663*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90663*0 + 3*269*FLEN/8, x4, x1, x2)

inst_30222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27f800000000000; valaddr_reg:x3; val_offset:90666*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90666*0 + 3*270*FLEN/8, x4, x1, x2)

inst_30223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fc00000000000; valaddr_reg:x3; val_offset:90669*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90669*0 + 3*271*FLEN/8, x4, x1, x2)

inst_30224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fe00000000000; valaddr_reg:x3; val_offset:90672*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90672*0 + 3*272*FLEN/8, x4, x1, x2)

inst_30225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ff00000000000; valaddr_reg:x3; val_offset:90675*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90675*0 + 3*273*FLEN/8, x4, x1, x2)

inst_30226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ff80000000000; valaddr_reg:x3; val_offset:90678*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90678*0 + 3*274*FLEN/8, x4, x1, x2)

inst_30227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffc0000000000; valaddr_reg:x3; val_offset:90681*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90681*0 + 3*275*FLEN/8, x4, x1, x2)

inst_30228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffe0000000000; valaddr_reg:x3; val_offset:90684*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90684*0 + 3*276*FLEN/8, x4, x1, x2)

inst_30229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fff0000000000; valaddr_reg:x3; val_offset:90687*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90687*0 + 3*277*FLEN/8, x4, x1, x2)

inst_30230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fff8000000000; valaddr_reg:x3; val_offset:90690*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90690*0 + 3*278*FLEN/8, x4, x1, x2)

inst_30231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffc000000000; valaddr_reg:x3; val_offset:90693*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90693*0 + 3*279*FLEN/8, x4, x1, x2)

inst_30232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffe000000000; valaddr_reg:x3; val_offset:90696*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90696*0 + 3*280*FLEN/8, x4, x1, x2)

inst_30233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffff000000000; valaddr_reg:x3; val_offset:90699*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90699*0 + 3*281*FLEN/8, x4, x1, x2)

inst_30234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffff800000000; valaddr_reg:x3; val_offset:90702*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90702*0 + 3*282*FLEN/8, x4, x1, x2)

inst_30235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffc00000000; valaddr_reg:x3; val_offset:90705*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90705*0 + 3*283*FLEN/8, x4, x1, x2)

inst_30236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffe00000000; valaddr_reg:x3; val_offset:90708*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90708*0 + 3*284*FLEN/8, x4, x1, x2)

inst_30237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffff00000000; valaddr_reg:x3; val_offset:90711*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90711*0 + 3*285*FLEN/8, x4, x1, x2)

inst_30238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffff80000000; valaddr_reg:x3; val_offset:90714*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90714*0 + 3*286*FLEN/8, x4, x1, x2)

inst_30239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffc0000000; valaddr_reg:x3; val_offset:90717*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90717*0 + 3*287*FLEN/8, x4, x1, x2)

inst_30240:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffe0000000; valaddr_reg:x3; val_offset:90720*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90720*0 + 3*288*FLEN/8, x4, x1, x2)

inst_30241:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffff0000000; valaddr_reg:x3; val_offset:90723*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90723*0 + 3*289*FLEN/8, x4, x1, x2)

inst_30242:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffff8000000; valaddr_reg:x3; val_offset:90726*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90726*0 + 3*290*FLEN/8, x4, x1, x2)

inst_30243:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffc000000; valaddr_reg:x3; val_offset:90729*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90729*0 + 3*291*FLEN/8, x4, x1, x2)

inst_30244:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffe000000; valaddr_reg:x3; val_offset:90732*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90732*0 + 3*292*FLEN/8, x4, x1, x2)

inst_30245:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffff000000; valaddr_reg:x3; val_offset:90735*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90735*0 + 3*293*FLEN/8, x4, x1, x2)

inst_30246:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffff800000; valaddr_reg:x3; val_offset:90738*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90738*0 + 3*294*FLEN/8, x4, x1, x2)

inst_30247:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffc00000; valaddr_reg:x3; val_offset:90741*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90741*0 + 3*295*FLEN/8, x4, x1, x2)

inst_30248:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffe00000; valaddr_reg:x3; val_offset:90744*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90744*0 + 3*296*FLEN/8, x4, x1, x2)

inst_30249:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffff00000; valaddr_reg:x3; val_offset:90747*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90747*0 + 3*297*FLEN/8, x4, x1, x2)

inst_30250:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffff80000; valaddr_reg:x3; val_offset:90750*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90750*0 + 3*298*FLEN/8, x4, x1, x2)

inst_30251:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffc0000; valaddr_reg:x3; val_offset:90753*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90753*0 + 3*299*FLEN/8, x4, x1, x2)

inst_30252:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffe0000; valaddr_reg:x3; val_offset:90756*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90756*0 + 3*300*FLEN/8, x4, x1, x2)

inst_30253:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffff0000; valaddr_reg:x3; val_offset:90759*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90759*0 + 3*301*FLEN/8, x4, x1, x2)

inst_30254:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffff8000; valaddr_reg:x3; val_offset:90762*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90762*0 + 3*302*FLEN/8, x4, x1, x2)

inst_30255:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffffc000; valaddr_reg:x3; val_offset:90765*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90765*0 + 3*303*FLEN/8, x4, x1, x2)

inst_30256:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffffe000; valaddr_reg:x3; val_offset:90768*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90768*0 + 3*304*FLEN/8, x4, x1, x2)

inst_30257:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffff000; valaddr_reg:x3; val_offset:90771*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90771*0 + 3*305*FLEN/8, x4, x1, x2)

inst_30258:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffff800; valaddr_reg:x3; val_offset:90774*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90774*0 + 3*306*FLEN/8, x4, x1, x2)

inst_30259:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffffc00; valaddr_reg:x3; val_offset:90777*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90777*0 + 3*307*FLEN/8, x4, x1, x2)

inst_30260:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffffe00; valaddr_reg:x3; val_offset:90780*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90780*0 + 3*308*FLEN/8, x4, x1, x2)

inst_30261:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffffff00; valaddr_reg:x3; val_offset:90783*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90783*0 + 3*309*FLEN/8, x4, x1, x2)

inst_30262:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffffff80; valaddr_reg:x3; val_offset:90786*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90786*0 + 3*310*FLEN/8, x4, x1, x2)

inst_30263:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffffffc0; valaddr_reg:x3; val_offset:90789*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90789*0 + 3*311*FLEN/8, x4, x1, x2)

inst_30264:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffffffe0; valaddr_reg:x3; val_offset:90792*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90792*0 + 3*312*FLEN/8, x4, x1, x2)

inst_30265:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffffff0; valaddr_reg:x3; val_offset:90795*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90795*0 + 3*313*FLEN/8, x4, x1, x2)

inst_30266:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffffff8; valaddr_reg:x3; val_offset:90798*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90798*0 + 3*314*FLEN/8, x4, x1, x2)

inst_30267:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffffffc; valaddr_reg:x3; val_offset:90801*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90801*0 + 3*315*FLEN/8, x4, x1, x2)

inst_30268:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27ffffffffffffe; valaddr_reg:x3; val_offset:90804*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90804*0 + 3*316*FLEN/8, x4, x1, x2)

inst_30269:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f80f68f79525 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x027 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f80f68f79525; op2val:0x0;
op3val:0x27fffffffffffff; valaddr_reg:x3; val_offset:90807*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90807*0 + 3*317*FLEN/8, x4, x1, x2)

inst_30270:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:90810*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90810*0 + 3*318*FLEN/8, x4, x1, x2)

inst_30271:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:90813*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90813*0 + 3*319*FLEN/8, x4, x1, x2)

inst_30272:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:90816*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90816*0 + 3*320*FLEN/8, x4, x1, x2)

inst_30273:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:90819*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90819*0 + 3*321*FLEN/8, x4, x1, x2)

inst_30274:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:90822*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90822*0 + 3*322*FLEN/8, x4, x1, x2)

inst_30275:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:90825*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90825*0 + 3*323*FLEN/8, x4, x1, x2)

inst_30276:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:90828*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90828*0 + 3*324*FLEN/8, x4, x1, x2)

inst_30277:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:90831*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90831*0 + 3*325*FLEN/8, x4, x1, x2)

inst_30278:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:90834*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90834*0 + 3*326*FLEN/8, x4, x1, x2)

inst_30279:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:90837*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90837*0 + 3*327*FLEN/8, x4, x1, x2)

inst_30280:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:90840*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90840*0 + 3*328*FLEN/8, x4, x1, x2)

inst_30281:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:90843*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90843*0 + 3*329*FLEN/8, x4, x1, x2)

inst_30282:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:90846*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90846*0 + 3*330*FLEN/8, x4, x1, x2)

inst_30283:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:90849*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90849*0 + 3*331*FLEN/8, x4, x1, x2)

inst_30284:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:90852*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90852*0 + 3*332*FLEN/8, x4, x1, x2)

inst_30285:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:90855*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90855*0 + 3*333*FLEN/8, x4, x1, x2)

inst_30286:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:90858*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90858*0 + 3*334*FLEN/8, x4, x1, x2)

inst_30287:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:90861*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90861*0 + 3*335*FLEN/8, x4, x1, x2)

inst_30288:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:90864*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90864*0 + 3*336*FLEN/8, x4, x1, x2)

inst_30289:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:90867*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90867*0 + 3*337*FLEN/8, x4, x1, x2)

inst_30290:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:90870*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90870*0 + 3*338*FLEN/8, x4, x1, x2)

inst_30291:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:90873*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90873*0 + 3*339*FLEN/8, x4, x1, x2)

inst_30292:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000000000; valaddr_reg:x3; val_offset:90876*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90876*0 + 3*340*FLEN/8, x4, x1, x2)

inst_30293:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000000001; valaddr_reg:x3; val_offset:90879*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90879*0 + 3*341*FLEN/8, x4, x1, x2)

inst_30294:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000000003; valaddr_reg:x3; val_offset:90882*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90882*0 + 3*342*FLEN/8, x4, x1, x2)

inst_30295:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000000007; valaddr_reg:x3; val_offset:90885*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90885*0 + 3*343*FLEN/8, x4, x1, x2)

inst_30296:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000000000f; valaddr_reg:x3; val_offset:90888*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90888*0 + 3*344*FLEN/8, x4, x1, x2)

inst_30297:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000000001f; valaddr_reg:x3; val_offset:90891*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90891*0 + 3*345*FLEN/8, x4, x1, x2)

inst_30298:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000000003f; valaddr_reg:x3; val_offset:90894*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90894*0 + 3*346*FLEN/8, x4, x1, x2)

inst_30299:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000000007f; valaddr_reg:x3; val_offset:90897*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90897*0 + 3*347*FLEN/8, x4, x1, x2)

inst_30300:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000000000ff; valaddr_reg:x3; val_offset:90900*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90900*0 + 3*348*FLEN/8, x4, x1, x2)

inst_30301:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000000001ff; valaddr_reg:x3; val_offset:90903*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90903*0 + 3*349*FLEN/8, x4, x1, x2)

inst_30302:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000000003ff; valaddr_reg:x3; val_offset:90906*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90906*0 + 3*350*FLEN/8, x4, x1, x2)

inst_30303:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000000007ff; valaddr_reg:x3; val_offset:90909*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90909*0 + 3*351*FLEN/8, x4, x1, x2)

inst_30304:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000000fff; valaddr_reg:x3; val_offset:90912*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90912*0 + 3*352*FLEN/8, x4, x1, x2)

inst_30305:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000001fff; valaddr_reg:x3; val_offset:90915*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90915*0 + 3*353*FLEN/8, x4, x1, x2)

inst_30306:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000003fff; valaddr_reg:x3; val_offset:90918*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90918*0 + 3*354*FLEN/8, x4, x1, x2)

inst_30307:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000007fff; valaddr_reg:x3; val_offset:90921*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90921*0 + 3*355*FLEN/8, x4, x1, x2)

inst_30308:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000000ffff; valaddr_reg:x3; val_offset:90924*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90924*0 + 3*356*FLEN/8, x4, x1, x2)

inst_30309:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000001ffff; valaddr_reg:x3; val_offset:90927*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90927*0 + 3*357*FLEN/8, x4, x1, x2)

inst_30310:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000003ffff; valaddr_reg:x3; val_offset:90930*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90930*0 + 3*358*FLEN/8, x4, x1, x2)

inst_30311:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000007ffff; valaddr_reg:x3; val_offset:90933*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90933*0 + 3*359*FLEN/8, x4, x1, x2)

inst_30312:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000000fffff; valaddr_reg:x3; val_offset:90936*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90936*0 + 3*360*FLEN/8, x4, x1, x2)

inst_30313:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000001fffff; valaddr_reg:x3; val_offset:90939*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90939*0 + 3*361*FLEN/8, x4, x1, x2)

inst_30314:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000003fffff; valaddr_reg:x3; val_offset:90942*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90942*0 + 3*362*FLEN/8, x4, x1, x2)

inst_30315:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000007fffff; valaddr_reg:x3; val_offset:90945*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90945*0 + 3*363*FLEN/8, x4, x1, x2)

inst_30316:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000000ffffff; valaddr_reg:x3; val_offset:90948*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90948*0 + 3*364*FLEN/8, x4, x1, x2)

inst_30317:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000001ffffff; valaddr_reg:x3; val_offset:90951*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90951*0 + 3*365*FLEN/8, x4, x1, x2)

inst_30318:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000003ffffff; valaddr_reg:x3; val_offset:90954*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90954*0 + 3*366*FLEN/8, x4, x1, x2)

inst_30319:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000007ffffff; valaddr_reg:x3; val_offset:90957*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90957*0 + 3*367*FLEN/8, x4, x1, x2)

inst_30320:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000000fffffff; valaddr_reg:x3; val_offset:90960*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90960*0 + 3*368*FLEN/8, x4, x1, x2)

inst_30321:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000001fffffff; valaddr_reg:x3; val_offset:90963*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90963*0 + 3*369*FLEN/8, x4, x1, x2)

inst_30322:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000003fffffff; valaddr_reg:x3; val_offset:90966*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90966*0 + 3*370*FLEN/8, x4, x1, x2)

inst_30323:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000007fffffff; valaddr_reg:x3; val_offset:90969*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90969*0 + 3*371*FLEN/8, x4, x1, x2)

inst_30324:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00000ffffffff; valaddr_reg:x3; val_offset:90972*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90972*0 + 3*372*FLEN/8, x4, x1, x2)

inst_30325:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00001ffffffff; valaddr_reg:x3; val_offset:90975*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90975*0 + 3*373*FLEN/8, x4, x1, x2)

inst_30326:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00003ffffffff; valaddr_reg:x3; val_offset:90978*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90978*0 + 3*374*FLEN/8, x4, x1, x2)

inst_30327:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00007ffffffff; valaddr_reg:x3; val_offset:90981*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90981*0 + 3*375*FLEN/8, x4, x1, x2)

inst_30328:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0000fffffffff; valaddr_reg:x3; val_offset:90984*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90984*0 + 3*376*FLEN/8, x4, x1, x2)

inst_30329:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0001fffffffff; valaddr_reg:x3; val_offset:90987*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90987*0 + 3*377*FLEN/8, x4, x1, x2)

inst_30330:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0003fffffffff; valaddr_reg:x3; val_offset:90990*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90990*0 + 3*378*FLEN/8, x4, x1, x2)

inst_30331:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0007fffffffff; valaddr_reg:x3; val_offset:90993*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90993*0 + 3*379*FLEN/8, x4, x1, x2)

inst_30332:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c000ffffffffff; valaddr_reg:x3; val_offset:90996*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90996*0 + 3*380*FLEN/8, x4, x1, x2)

inst_30333:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c001ffffffffff; valaddr_reg:x3; val_offset:90999*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 90999*0 + 3*381*FLEN/8, x4, x1, x2)

inst_30334:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c003ffffffffff; valaddr_reg:x3; val_offset:91002*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91002*0 + 3*382*FLEN/8, x4, x1, x2)

inst_30335:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c007ffffffffff; valaddr_reg:x3; val_offset:91005*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91005*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_30336:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c00fffffffffff; valaddr_reg:x3; val_offset:91008*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91008*0 + 3*384*FLEN/8, x4, x1, x2)

inst_30337:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c01fffffffffff; valaddr_reg:x3; val_offset:91011*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91011*0 + 3*385*FLEN/8, x4, x1, x2)

inst_30338:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c03fffffffffff; valaddr_reg:x3; val_offset:91014*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91014*0 + 3*386*FLEN/8, x4, x1, x2)

inst_30339:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c07fffffffffff; valaddr_reg:x3; val_offset:91017*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91017*0 + 3*387*FLEN/8, x4, x1, x2)

inst_30340:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c0ffffffffffff; valaddr_reg:x3; val_offset:91020*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91020*0 + 3*388*FLEN/8, x4, x1, x2)

inst_30341:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c1ffffffffffff; valaddr_reg:x3; val_offset:91023*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91023*0 + 3*389*FLEN/8, x4, x1, x2)

inst_30342:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c3ffffffffffff; valaddr_reg:x3; val_offset:91026*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91026*0 + 3*390*FLEN/8, x4, x1, x2)

inst_30343:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c7ffffffffffff; valaddr_reg:x3; val_offset:91029*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91029*0 + 3*391*FLEN/8, x4, x1, x2)

inst_30344:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2c8000000000000; valaddr_reg:x3; val_offset:91032*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91032*0 + 3*392*FLEN/8, x4, x1, x2)

inst_30345:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cc000000000000; valaddr_reg:x3; val_offset:91035*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91035*0 + 3*393*FLEN/8, x4, x1, x2)

inst_30346:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2ce000000000000; valaddr_reg:x3; val_offset:91038*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91038*0 + 3*394*FLEN/8, x4, x1, x2)

inst_30347:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cf000000000000; valaddr_reg:x3; val_offset:91041*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91041*0 + 3*395*FLEN/8, x4, x1, x2)

inst_30348:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cf800000000000; valaddr_reg:x3; val_offset:91044*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91044*0 + 3*396*FLEN/8, x4, x1, x2)

inst_30349:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfc00000000000; valaddr_reg:x3; val_offset:91047*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91047*0 + 3*397*FLEN/8, x4, x1, x2)

inst_30350:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfe00000000000; valaddr_reg:x3; val_offset:91050*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91050*0 + 3*398*FLEN/8, x4, x1, x2)

inst_30351:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cff00000000000; valaddr_reg:x3; val_offset:91053*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91053*0 + 3*399*FLEN/8, x4, x1, x2)

inst_30352:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cff80000000000; valaddr_reg:x3; val_offset:91056*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91056*0 + 3*400*FLEN/8, x4, x1, x2)

inst_30353:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffc0000000000; valaddr_reg:x3; val_offset:91059*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91059*0 + 3*401*FLEN/8, x4, x1, x2)

inst_30354:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffe0000000000; valaddr_reg:x3; val_offset:91062*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91062*0 + 3*402*FLEN/8, x4, x1, x2)

inst_30355:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfff0000000000; valaddr_reg:x3; val_offset:91065*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91065*0 + 3*403*FLEN/8, x4, x1, x2)

inst_30356:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfff8000000000; valaddr_reg:x3; val_offset:91068*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91068*0 + 3*404*FLEN/8, x4, x1, x2)

inst_30357:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffc000000000; valaddr_reg:x3; val_offset:91071*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91071*0 + 3*405*FLEN/8, x4, x1, x2)

inst_30358:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffe000000000; valaddr_reg:x3; val_offset:91074*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91074*0 + 3*406*FLEN/8, x4, x1, x2)

inst_30359:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffff000000000; valaddr_reg:x3; val_offset:91077*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91077*0 + 3*407*FLEN/8, x4, x1, x2)

inst_30360:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffff800000000; valaddr_reg:x3; val_offset:91080*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91080*0 + 3*408*FLEN/8, x4, x1, x2)

inst_30361:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffc00000000; valaddr_reg:x3; val_offset:91083*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91083*0 + 3*409*FLEN/8, x4, x1, x2)

inst_30362:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffe00000000; valaddr_reg:x3; val_offset:91086*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91086*0 + 3*410*FLEN/8, x4, x1, x2)

inst_30363:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffff00000000; valaddr_reg:x3; val_offset:91089*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91089*0 + 3*411*FLEN/8, x4, x1, x2)

inst_30364:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffff80000000; valaddr_reg:x3; val_offset:91092*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91092*0 + 3*412*FLEN/8, x4, x1, x2)

inst_30365:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffc0000000; valaddr_reg:x3; val_offset:91095*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91095*0 + 3*413*FLEN/8, x4, x1, x2)

inst_30366:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffe0000000; valaddr_reg:x3; val_offset:91098*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91098*0 + 3*414*FLEN/8, x4, x1, x2)

inst_30367:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffff0000000; valaddr_reg:x3; val_offset:91101*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91101*0 + 3*415*FLEN/8, x4, x1, x2)

inst_30368:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffff8000000; valaddr_reg:x3; val_offset:91104*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91104*0 + 3*416*FLEN/8, x4, x1, x2)

inst_30369:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffc000000; valaddr_reg:x3; val_offset:91107*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91107*0 + 3*417*FLEN/8, x4, x1, x2)

inst_30370:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffe000000; valaddr_reg:x3; val_offset:91110*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91110*0 + 3*418*FLEN/8, x4, x1, x2)

inst_30371:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffff000000; valaddr_reg:x3; val_offset:91113*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91113*0 + 3*419*FLEN/8, x4, x1, x2)

inst_30372:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffff800000; valaddr_reg:x3; val_offset:91116*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91116*0 + 3*420*FLEN/8, x4, x1, x2)

inst_30373:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffc00000; valaddr_reg:x3; val_offset:91119*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91119*0 + 3*421*FLEN/8, x4, x1, x2)

inst_30374:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffe00000; valaddr_reg:x3; val_offset:91122*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91122*0 + 3*422*FLEN/8, x4, x1, x2)

inst_30375:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffff00000; valaddr_reg:x3; val_offset:91125*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91125*0 + 3*423*FLEN/8, x4, x1, x2)

inst_30376:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffff80000; valaddr_reg:x3; val_offset:91128*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91128*0 + 3*424*FLEN/8, x4, x1, x2)

inst_30377:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffc0000; valaddr_reg:x3; val_offset:91131*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91131*0 + 3*425*FLEN/8, x4, x1, x2)

inst_30378:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffe0000; valaddr_reg:x3; val_offset:91134*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91134*0 + 3*426*FLEN/8, x4, x1, x2)

inst_30379:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffff0000; valaddr_reg:x3; val_offset:91137*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91137*0 + 3*427*FLEN/8, x4, x1, x2)

inst_30380:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffff8000; valaddr_reg:x3; val_offset:91140*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91140*0 + 3*428*FLEN/8, x4, x1, x2)

inst_30381:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffffc000; valaddr_reg:x3; val_offset:91143*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91143*0 + 3*429*FLEN/8, x4, x1, x2)

inst_30382:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffffe000; valaddr_reg:x3; val_offset:91146*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91146*0 + 3*430*FLEN/8, x4, x1, x2)

inst_30383:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffff000; valaddr_reg:x3; val_offset:91149*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91149*0 + 3*431*FLEN/8, x4, x1, x2)

inst_30384:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffff800; valaddr_reg:x3; val_offset:91152*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91152*0 + 3*432*FLEN/8, x4, x1, x2)

inst_30385:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffffc00; valaddr_reg:x3; val_offset:91155*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91155*0 + 3*433*FLEN/8, x4, x1, x2)

inst_30386:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffffe00; valaddr_reg:x3; val_offset:91158*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91158*0 + 3*434*FLEN/8, x4, x1, x2)

inst_30387:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffffff00; valaddr_reg:x3; val_offset:91161*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91161*0 + 3*435*FLEN/8, x4, x1, x2)

inst_30388:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffffff80; valaddr_reg:x3; val_offset:91164*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91164*0 + 3*436*FLEN/8, x4, x1, x2)

inst_30389:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffffffc0; valaddr_reg:x3; val_offset:91167*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91167*0 + 3*437*FLEN/8, x4, x1, x2)

inst_30390:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffffffe0; valaddr_reg:x3; val_offset:91170*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91170*0 + 3*438*FLEN/8, x4, x1, x2)

inst_30391:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffffff0; valaddr_reg:x3; val_offset:91173*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91173*0 + 3*439*FLEN/8, x4, x1, x2)

inst_30392:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffffff8; valaddr_reg:x3; val_offset:91176*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91176*0 + 3*440*FLEN/8, x4, x1, x2)

inst_30393:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffffffc; valaddr_reg:x3; val_offset:91179*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91179*0 + 3*441*FLEN/8, x4, x1, x2)

inst_30394:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cffffffffffffe; valaddr_reg:x3; val_offset:91182*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91182*0 + 3*442*FLEN/8, x4, x1, x2)

inst_30395:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3000545397b2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93000545397b2f; op2val:0x0;
op3val:0x2cfffffffffffff; valaddr_reg:x3; val_offset:91185*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91185*0 + 3*443*FLEN/8, x4, x1, x2)

inst_30396:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000000000; valaddr_reg:x3; val_offset:91188*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91188*0 + 3*444*FLEN/8, x4, x1, x2)

inst_30397:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000000001; valaddr_reg:x3; val_offset:91191*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91191*0 + 3*445*FLEN/8, x4, x1, x2)

inst_30398:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000000003; valaddr_reg:x3; val_offset:91194*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91194*0 + 3*446*FLEN/8, x4, x1, x2)

inst_30399:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000000007; valaddr_reg:x3; val_offset:91197*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91197*0 + 3*447*FLEN/8, x4, x1, x2)

inst_30400:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000000000f; valaddr_reg:x3; val_offset:91200*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91200*0 + 3*448*FLEN/8, x4, x1, x2)

inst_30401:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000000001f; valaddr_reg:x3; val_offset:91203*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91203*0 + 3*449*FLEN/8, x4, x1, x2)

inst_30402:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000000003f; valaddr_reg:x3; val_offset:91206*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91206*0 + 3*450*FLEN/8, x4, x1, x2)

inst_30403:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000000007f; valaddr_reg:x3; val_offset:91209*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91209*0 + 3*451*FLEN/8, x4, x1, x2)

inst_30404:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000000000ff; valaddr_reg:x3; val_offset:91212*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91212*0 + 3*452*FLEN/8, x4, x1, x2)

inst_30405:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000000001ff; valaddr_reg:x3; val_offset:91215*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91215*0 + 3*453*FLEN/8, x4, x1, x2)

inst_30406:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000000003ff; valaddr_reg:x3; val_offset:91218*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91218*0 + 3*454*FLEN/8, x4, x1, x2)

inst_30407:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000000007ff; valaddr_reg:x3; val_offset:91221*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91221*0 + 3*455*FLEN/8, x4, x1, x2)

inst_30408:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000000fff; valaddr_reg:x3; val_offset:91224*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91224*0 + 3*456*FLEN/8, x4, x1, x2)

inst_30409:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000001fff; valaddr_reg:x3; val_offset:91227*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91227*0 + 3*457*FLEN/8, x4, x1, x2)

inst_30410:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000003fff; valaddr_reg:x3; val_offset:91230*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91230*0 + 3*458*FLEN/8, x4, x1, x2)

inst_30411:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000007fff; valaddr_reg:x3; val_offset:91233*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91233*0 + 3*459*FLEN/8, x4, x1, x2)

inst_30412:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000000ffff; valaddr_reg:x3; val_offset:91236*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91236*0 + 3*460*FLEN/8, x4, x1, x2)

inst_30413:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000001ffff; valaddr_reg:x3; val_offset:91239*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91239*0 + 3*461*FLEN/8, x4, x1, x2)

inst_30414:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000003ffff; valaddr_reg:x3; val_offset:91242*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91242*0 + 3*462*FLEN/8, x4, x1, x2)

inst_30415:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000007ffff; valaddr_reg:x3; val_offset:91245*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91245*0 + 3*463*FLEN/8, x4, x1, x2)

inst_30416:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000000fffff; valaddr_reg:x3; val_offset:91248*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91248*0 + 3*464*FLEN/8, x4, x1, x2)

inst_30417:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000001fffff; valaddr_reg:x3; val_offset:91251*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91251*0 + 3*465*FLEN/8, x4, x1, x2)

inst_30418:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000003fffff; valaddr_reg:x3; val_offset:91254*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91254*0 + 3*466*FLEN/8, x4, x1, x2)

inst_30419:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000007fffff; valaddr_reg:x3; val_offset:91257*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91257*0 + 3*467*FLEN/8, x4, x1, x2)

inst_30420:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000000ffffff; valaddr_reg:x3; val_offset:91260*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91260*0 + 3*468*FLEN/8, x4, x1, x2)

inst_30421:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000001ffffff; valaddr_reg:x3; val_offset:91263*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91263*0 + 3*469*FLEN/8, x4, x1, x2)

inst_30422:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000003ffffff; valaddr_reg:x3; val_offset:91266*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91266*0 + 3*470*FLEN/8, x4, x1, x2)

inst_30423:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000007ffffff; valaddr_reg:x3; val_offset:91269*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91269*0 + 3*471*FLEN/8, x4, x1, x2)

inst_30424:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000000fffffff; valaddr_reg:x3; val_offset:91272*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91272*0 + 3*472*FLEN/8, x4, x1, x2)

inst_30425:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000001fffffff; valaddr_reg:x3; val_offset:91275*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91275*0 + 3*473*FLEN/8, x4, x1, x2)

inst_30426:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000003fffffff; valaddr_reg:x3; val_offset:91278*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91278*0 + 3*474*FLEN/8, x4, x1, x2)

inst_30427:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000007fffffff; valaddr_reg:x3; val_offset:91281*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91281*0 + 3*475*FLEN/8, x4, x1, x2)

inst_30428:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400000ffffffff; valaddr_reg:x3; val_offset:91284*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91284*0 + 3*476*FLEN/8, x4, x1, x2)

inst_30429:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400001ffffffff; valaddr_reg:x3; val_offset:91287*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91287*0 + 3*477*FLEN/8, x4, x1, x2)

inst_30430:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400003ffffffff; valaddr_reg:x3; val_offset:91290*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91290*0 + 3*478*FLEN/8, x4, x1, x2)

inst_30431:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400007ffffffff; valaddr_reg:x3; val_offset:91293*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91293*0 + 3*479*FLEN/8, x4, x1, x2)

inst_30432:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40000fffffffff; valaddr_reg:x3; val_offset:91296*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91296*0 + 3*480*FLEN/8, x4, x1, x2)

inst_30433:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40001fffffffff; valaddr_reg:x3; val_offset:91299*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91299*0 + 3*481*FLEN/8, x4, x1, x2)

inst_30434:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40003fffffffff; valaddr_reg:x3; val_offset:91302*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91302*0 + 3*482*FLEN/8, x4, x1, x2)

inst_30435:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40007fffffffff; valaddr_reg:x3; val_offset:91305*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91305*0 + 3*483*FLEN/8, x4, x1, x2)

inst_30436:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4000ffffffffff; valaddr_reg:x3; val_offset:91308*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91308*0 + 3*484*FLEN/8, x4, x1, x2)

inst_30437:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4001ffffffffff; valaddr_reg:x3; val_offset:91311*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91311*0 + 3*485*FLEN/8, x4, x1, x2)

inst_30438:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4003ffffffffff; valaddr_reg:x3; val_offset:91314*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91314*0 + 3*486*FLEN/8, x4, x1, x2)

inst_30439:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4007ffffffffff; valaddr_reg:x3; val_offset:91317*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91317*0 + 3*487*FLEN/8, x4, x1, x2)

inst_30440:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a400fffffffffff; valaddr_reg:x3; val_offset:91320*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91320*0 + 3*488*FLEN/8, x4, x1, x2)

inst_30441:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a401fffffffffff; valaddr_reg:x3; val_offset:91323*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91323*0 + 3*489*FLEN/8, x4, x1, x2)

inst_30442:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a403fffffffffff; valaddr_reg:x3; val_offset:91326*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91326*0 + 3*490*FLEN/8, x4, x1, x2)

inst_30443:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a407fffffffffff; valaddr_reg:x3; val_offset:91329*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91329*0 + 3*491*FLEN/8, x4, x1, x2)

inst_30444:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a40ffffffffffff; valaddr_reg:x3; val_offset:91332*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91332*0 + 3*492*FLEN/8, x4, x1, x2)

inst_30445:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a41ffffffffffff; valaddr_reg:x3; val_offset:91335*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91335*0 + 3*493*FLEN/8, x4, x1, x2)

inst_30446:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a43ffffffffffff; valaddr_reg:x3; val_offset:91338*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91338*0 + 3*494*FLEN/8, x4, x1, x2)

inst_30447:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a47ffffffffffff; valaddr_reg:x3; val_offset:91341*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91341*0 + 3*495*FLEN/8, x4, x1, x2)

inst_30448:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a48000000000000; valaddr_reg:x3; val_offset:91344*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91344*0 + 3*496*FLEN/8, x4, x1, x2)

inst_30449:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4c000000000000; valaddr_reg:x3; val_offset:91347*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91347*0 + 3*497*FLEN/8, x4, x1, x2)

inst_30450:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4e000000000000; valaddr_reg:x3; val_offset:91350*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91350*0 + 3*498*FLEN/8, x4, x1, x2)

inst_30451:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4f000000000000; valaddr_reg:x3; val_offset:91353*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91353*0 + 3*499*FLEN/8, x4, x1, x2)

inst_30452:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4f800000000000; valaddr_reg:x3; val_offset:91356*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91356*0 + 3*500*FLEN/8, x4, x1, x2)

inst_30453:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fc00000000000; valaddr_reg:x3; val_offset:91359*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91359*0 + 3*501*FLEN/8, x4, x1, x2)

inst_30454:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fe00000000000; valaddr_reg:x3; val_offset:91362*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91362*0 + 3*502*FLEN/8, x4, x1, x2)

inst_30455:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ff00000000000; valaddr_reg:x3; val_offset:91365*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91365*0 + 3*503*FLEN/8, x4, x1, x2)

inst_30456:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ff80000000000; valaddr_reg:x3; val_offset:91368*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91368*0 + 3*504*FLEN/8, x4, x1, x2)

inst_30457:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffc0000000000; valaddr_reg:x3; val_offset:91371*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91371*0 + 3*505*FLEN/8, x4, x1, x2)

inst_30458:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffe0000000000; valaddr_reg:x3; val_offset:91374*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91374*0 + 3*506*FLEN/8, x4, x1, x2)

inst_30459:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fff0000000000; valaddr_reg:x3; val_offset:91377*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91377*0 + 3*507*FLEN/8, x4, x1, x2)

inst_30460:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fff8000000000; valaddr_reg:x3; val_offset:91380*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91380*0 + 3*508*FLEN/8, x4, x1, x2)

inst_30461:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffc000000000; valaddr_reg:x3; val_offset:91383*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91383*0 + 3*509*FLEN/8, x4, x1, x2)

inst_30462:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffe000000000; valaddr_reg:x3; val_offset:91386*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91386*0 + 3*510*FLEN/8, x4, x1, x2)

inst_30463:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffff000000000; valaddr_reg:x3; val_offset:91389*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91389*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_30464:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffff800000000; valaddr_reg:x3; val_offset:91392*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91392*0 + 3*512*FLEN/8, x4, x1, x2)

inst_30465:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffc00000000; valaddr_reg:x3; val_offset:91395*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91395*0 + 3*513*FLEN/8, x4, x1, x2)

inst_30466:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffe00000000; valaddr_reg:x3; val_offset:91398*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91398*0 + 3*514*FLEN/8, x4, x1, x2)

inst_30467:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffff00000000; valaddr_reg:x3; val_offset:91401*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91401*0 + 3*515*FLEN/8, x4, x1, x2)

inst_30468:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffff80000000; valaddr_reg:x3; val_offset:91404*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91404*0 + 3*516*FLEN/8, x4, x1, x2)

inst_30469:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffc0000000; valaddr_reg:x3; val_offset:91407*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91407*0 + 3*517*FLEN/8, x4, x1, x2)

inst_30470:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffe0000000; valaddr_reg:x3; val_offset:91410*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91410*0 + 3*518*FLEN/8, x4, x1, x2)

inst_30471:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffff0000000; valaddr_reg:x3; val_offset:91413*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91413*0 + 3*519*FLEN/8, x4, x1, x2)

inst_30472:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffff8000000; valaddr_reg:x3; val_offset:91416*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91416*0 + 3*520*FLEN/8, x4, x1, x2)

inst_30473:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffc000000; valaddr_reg:x3; val_offset:91419*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91419*0 + 3*521*FLEN/8, x4, x1, x2)

inst_30474:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffe000000; valaddr_reg:x3; val_offset:91422*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91422*0 + 3*522*FLEN/8, x4, x1, x2)

inst_30475:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffff000000; valaddr_reg:x3; val_offset:91425*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91425*0 + 3*523*FLEN/8, x4, x1, x2)

inst_30476:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffff800000; valaddr_reg:x3; val_offset:91428*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91428*0 + 3*524*FLEN/8, x4, x1, x2)

inst_30477:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffc00000; valaddr_reg:x3; val_offset:91431*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91431*0 + 3*525*FLEN/8, x4, x1, x2)

inst_30478:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffe00000; valaddr_reg:x3; val_offset:91434*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91434*0 + 3*526*FLEN/8, x4, x1, x2)

inst_30479:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffff00000; valaddr_reg:x3; val_offset:91437*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91437*0 + 3*527*FLEN/8, x4, x1, x2)

inst_30480:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffff80000; valaddr_reg:x3; val_offset:91440*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91440*0 + 3*528*FLEN/8, x4, x1, x2)

inst_30481:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffc0000; valaddr_reg:x3; val_offset:91443*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91443*0 + 3*529*FLEN/8, x4, x1, x2)

inst_30482:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffe0000; valaddr_reg:x3; val_offset:91446*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91446*0 + 3*530*FLEN/8, x4, x1, x2)

inst_30483:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffff0000; valaddr_reg:x3; val_offset:91449*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91449*0 + 3*531*FLEN/8, x4, x1, x2)

inst_30484:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffff8000; valaddr_reg:x3; val_offset:91452*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91452*0 + 3*532*FLEN/8, x4, x1, x2)

inst_30485:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffffc000; valaddr_reg:x3; val_offset:91455*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91455*0 + 3*533*FLEN/8, x4, x1, x2)

inst_30486:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffffe000; valaddr_reg:x3; val_offset:91458*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91458*0 + 3*534*FLEN/8, x4, x1, x2)

inst_30487:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffff000; valaddr_reg:x3; val_offset:91461*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91461*0 + 3*535*FLEN/8, x4, x1, x2)

inst_30488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffff800; valaddr_reg:x3; val_offset:91464*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91464*0 + 3*536*FLEN/8, x4, x1, x2)

inst_30489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffffc00; valaddr_reg:x3; val_offset:91467*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91467*0 + 3*537*FLEN/8, x4, x1, x2)

inst_30490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffffe00; valaddr_reg:x3; val_offset:91470*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91470*0 + 3*538*FLEN/8, x4, x1, x2)

inst_30491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffffff00; valaddr_reg:x3; val_offset:91473*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91473*0 + 3*539*FLEN/8, x4, x1, x2)

inst_30492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffffff80; valaddr_reg:x3; val_offset:91476*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91476*0 + 3*540*FLEN/8, x4, x1, x2)

inst_30493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffffffc0; valaddr_reg:x3; val_offset:91479*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91479*0 + 3*541*FLEN/8, x4, x1, x2)

inst_30494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffffffe0; valaddr_reg:x3; val_offset:91482*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91482*0 + 3*542*FLEN/8, x4, x1, x2)

inst_30495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffffff0; valaddr_reg:x3; val_offset:91485*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91485*0 + 3*543*FLEN/8, x4, x1, x2)

inst_30496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffffff8; valaddr_reg:x3; val_offset:91488*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91488*0 + 3*544*FLEN/8, x4, x1, x2)

inst_30497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffffffc; valaddr_reg:x3; val_offset:91491*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91491*0 + 3*545*FLEN/8, x4, x1, x2)

inst_30498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4ffffffffffffe; valaddr_reg:x3; val_offset:91494*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91494*0 + 3*546*FLEN/8, x4, x1, x2)

inst_30499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3a4 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3a4fffffffffffff; valaddr_reg:x3; val_offset:91497*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91497*0 + 3*547*FLEN/8, x4, x1, x2)

inst_30500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:91500*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91500*0 + 3*548*FLEN/8, x4, x1, x2)

inst_30501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:91503*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91503*0 + 3*549*FLEN/8, x4, x1, x2)

inst_30502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:91506*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91506*0 + 3*550*FLEN/8, x4, x1, x2)

inst_30503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:91509*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91509*0 + 3*551*FLEN/8, x4, x1, x2)

inst_30504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:91512*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91512*0 + 3*552*FLEN/8, x4, x1, x2)

inst_30505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:91515*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91515*0 + 3*553*FLEN/8, x4, x1, x2)

inst_30506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:91518*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91518*0 + 3*554*FLEN/8, x4, x1, x2)

inst_30507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:91521*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91521*0 + 3*555*FLEN/8, x4, x1, x2)

inst_30508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:91524*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91524*0 + 3*556*FLEN/8, x4, x1, x2)

inst_30509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:91527*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91527*0 + 3*557*FLEN/8, x4, x1, x2)

inst_30510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:91530*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91530*0 + 3*558*FLEN/8, x4, x1, x2)

inst_30511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:91533*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91533*0 + 3*559*FLEN/8, x4, x1, x2)

inst_30512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:91536*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91536*0 + 3*560*FLEN/8, x4, x1, x2)

inst_30513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:91539*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91539*0 + 3*561*FLEN/8, x4, x1, x2)

inst_30514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:91542*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91542*0 + 3*562*FLEN/8, x4, x1, x2)

inst_30515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:91545*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91545*0 + 3*563*FLEN/8, x4, x1, x2)

inst_30516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:91548*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91548*0 + 3*564*FLEN/8, x4, x1, x2)

inst_30517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:91551*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91551*0 + 3*565*FLEN/8, x4, x1, x2)

inst_30518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:91554*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91554*0 + 3*566*FLEN/8, x4, x1, x2)

inst_30519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:91557*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91557*0 + 3*567*FLEN/8, x4, x1, x2)

inst_30520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:91560*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91560*0 + 3*568*FLEN/8, x4, x1, x2)

inst_30521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3107675f3637d and fs2 == 0 and fe2 == 0x204 and fm2 == 0xadb419a70bfa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93107675f3637d; op2val:0x204adb419a70bfa6;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:91563*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91563*0 + 3*569*FLEN/8, x4, x1, x2)

inst_30522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:91566*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91566*0 + 3*570*FLEN/8, x4, x1, x2)

inst_30523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:91569*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91569*0 + 3*571*FLEN/8, x4, x1, x2)

inst_30524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:91572*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91572*0 + 3*572*FLEN/8, x4, x1, x2)

inst_30525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:91575*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91575*0 + 3*573*FLEN/8, x4, x1, x2)

inst_30526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:91578*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91578*0 + 3*574*FLEN/8, x4, x1, x2)

inst_30527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:91581*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91581*0 + 3*575*FLEN/8, x4, x1, x2)

inst_30528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:91584*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91584*0 + 3*576*FLEN/8, x4, x1, x2)

inst_30529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:91587*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91587*0 + 3*577*FLEN/8, x4, x1, x2)

inst_30530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:91590*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91590*0 + 3*578*FLEN/8, x4, x1, x2)

inst_30531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:91593*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91593*0 + 3*579*FLEN/8, x4, x1, x2)

inst_30532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:91596*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91596*0 + 3*580*FLEN/8, x4, x1, x2)

inst_30533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:91599*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91599*0 + 3*581*FLEN/8, x4, x1, x2)

inst_30534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:91602*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91602*0 + 3*582*FLEN/8, x4, x1, x2)

inst_30535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:91605*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91605*0 + 3*583*FLEN/8, x4, x1, x2)

inst_30536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:91608*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91608*0 + 3*584*FLEN/8, x4, x1, x2)

inst_30537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:91611*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91611*0 + 3*585*FLEN/8, x4, x1, x2)

inst_30538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:91614*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91614*0 + 3*586*FLEN/8, x4, x1, x2)

inst_30539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:91617*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91617*0 + 3*587*FLEN/8, x4, x1, x2)

inst_30540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:91620*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91620*0 + 3*588*FLEN/8, x4, x1, x2)

inst_30541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:91623*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91623*0 + 3*589*FLEN/8, x4, x1, x2)

inst_30542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:91626*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91626*0 + 3*590*FLEN/8, x4, x1, x2)

inst_30543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:91629*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91629*0 + 3*591*FLEN/8, x4, x1, x2)

inst_30544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000000000; valaddr_reg:x3; val_offset:91632*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91632*0 + 3*592*FLEN/8, x4, x1, x2)

inst_30545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000000001; valaddr_reg:x3; val_offset:91635*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91635*0 + 3*593*FLEN/8, x4, x1, x2)

inst_30546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000000003; valaddr_reg:x3; val_offset:91638*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91638*0 + 3*594*FLEN/8, x4, x1, x2)

inst_30547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000000007; valaddr_reg:x3; val_offset:91641*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91641*0 + 3*595*FLEN/8, x4, x1, x2)

inst_30548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000000000f; valaddr_reg:x3; val_offset:91644*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91644*0 + 3*596*FLEN/8, x4, x1, x2)

inst_30549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000000001f; valaddr_reg:x3; val_offset:91647*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91647*0 + 3*597*FLEN/8, x4, x1, x2)

inst_30550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000000003f; valaddr_reg:x3; val_offset:91650*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91650*0 + 3*598*FLEN/8, x4, x1, x2)

inst_30551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000000007f; valaddr_reg:x3; val_offset:91653*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91653*0 + 3*599*FLEN/8, x4, x1, x2)

inst_30552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000000000ff; valaddr_reg:x3; val_offset:91656*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91656*0 + 3*600*FLEN/8, x4, x1, x2)

inst_30553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000000001ff; valaddr_reg:x3; val_offset:91659*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91659*0 + 3*601*FLEN/8, x4, x1, x2)

inst_30554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000000003ff; valaddr_reg:x3; val_offset:91662*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91662*0 + 3*602*FLEN/8, x4, x1, x2)

inst_30555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000000007ff; valaddr_reg:x3; val_offset:91665*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91665*0 + 3*603*FLEN/8, x4, x1, x2)

inst_30556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000000fff; valaddr_reg:x3; val_offset:91668*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91668*0 + 3*604*FLEN/8, x4, x1, x2)

inst_30557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000001fff; valaddr_reg:x3; val_offset:91671*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91671*0 + 3*605*FLEN/8, x4, x1, x2)

inst_30558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000003fff; valaddr_reg:x3; val_offset:91674*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91674*0 + 3*606*FLEN/8, x4, x1, x2)

inst_30559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000007fff; valaddr_reg:x3; val_offset:91677*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91677*0 + 3*607*FLEN/8, x4, x1, x2)

inst_30560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000000ffff; valaddr_reg:x3; val_offset:91680*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91680*0 + 3*608*FLEN/8, x4, x1, x2)

inst_30561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000001ffff; valaddr_reg:x3; val_offset:91683*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91683*0 + 3*609*FLEN/8, x4, x1, x2)

inst_30562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000003ffff; valaddr_reg:x3; val_offset:91686*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91686*0 + 3*610*FLEN/8, x4, x1, x2)

inst_30563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000007ffff; valaddr_reg:x3; val_offset:91689*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91689*0 + 3*611*FLEN/8, x4, x1, x2)

inst_30564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000000fffff; valaddr_reg:x3; val_offset:91692*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91692*0 + 3*612*FLEN/8, x4, x1, x2)

inst_30565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000001fffff; valaddr_reg:x3; val_offset:91695*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91695*0 + 3*613*FLEN/8, x4, x1, x2)

inst_30566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000003fffff; valaddr_reg:x3; val_offset:91698*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91698*0 + 3*614*FLEN/8, x4, x1, x2)

inst_30567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000007fffff; valaddr_reg:x3; val_offset:91701*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91701*0 + 3*615*FLEN/8, x4, x1, x2)

inst_30568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000000ffffff; valaddr_reg:x3; val_offset:91704*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91704*0 + 3*616*FLEN/8, x4, x1, x2)

inst_30569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000001ffffff; valaddr_reg:x3; val_offset:91707*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91707*0 + 3*617*FLEN/8, x4, x1, x2)

inst_30570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000003ffffff; valaddr_reg:x3; val_offset:91710*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91710*0 + 3*618*FLEN/8, x4, x1, x2)

inst_30571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000007ffffff; valaddr_reg:x3; val_offset:91713*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91713*0 + 3*619*FLEN/8, x4, x1, x2)

inst_30572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000000fffffff; valaddr_reg:x3; val_offset:91716*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91716*0 + 3*620*FLEN/8, x4, x1, x2)

inst_30573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000001fffffff; valaddr_reg:x3; val_offset:91719*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91719*0 + 3*621*FLEN/8, x4, x1, x2)

inst_30574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000003fffffff; valaddr_reg:x3; val_offset:91722*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91722*0 + 3*622*FLEN/8, x4, x1, x2)

inst_30575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000007fffffff; valaddr_reg:x3; val_offset:91725*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91725*0 + 3*623*FLEN/8, x4, x1, x2)

inst_30576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200000ffffffff; valaddr_reg:x3; val_offset:91728*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91728*0 + 3*624*FLEN/8, x4, x1, x2)

inst_30577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200001ffffffff; valaddr_reg:x3; val_offset:91731*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91731*0 + 3*625*FLEN/8, x4, x1, x2)

inst_30578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200003ffffffff; valaddr_reg:x3; val_offset:91734*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91734*0 + 3*626*FLEN/8, x4, x1, x2)

inst_30579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200007ffffffff; valaddr_reg:x3; val_offset:91737*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91737*0 + 3*627*FLEN/8, x4, x1, x2)

inst_30580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220000fffffffff; valaddr_reg:x3; val_offset:91740*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91740*0 + 3*628*FLEN/8, x4, x1, x2)

inst_30581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220001fffffffff; valaddr_reg:x3; val_offset:91743*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91743*0 + 3*629*FLEN/8, x4, x1, x2)

inst_30582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220003fffffffff; valaddr_reg:x3; val_offset:91746*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91746*0 + 3*630*FLEN/8, x4, x1, x2)

inst_30583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220007fffffffff; valaddr_reg:x3; val_offset:91749*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91749*0 + 3*631*FLEN/8, x4, x1, x2)

inst_30584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822000ffffffffff; valaddr_reg:x3; val_offset:91752*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91752*0 + 3*632*FLEN/8, x4, x1, x2)

inst_30585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822001ffffffffff; valaddr_reg:x3; val_offset:91755*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91755*0 + 3*633*FLEN/8, x4, x1, x2)

inst_30586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822003ffffffffff; valaddr_reg:x3; val_offset:91758*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91758*0 + 3*634*FLEN/8, x4, x1, x2)

inst_30587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822007ffffffffff; valaddr_reg:x3; val_offset:91761*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91761*0 + 3*635*FLEN/8, x4, x1, x2)

inst_30588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82200fffffffffff; valaddr_reg:x3; val_offset:91764*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91764*0 + 3*636*FLEN/8, x4, x1, x2)

inst_30589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82201fffffffffff; valaddr_reg:x3; val_offset:91767*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91767*0 + 3*637*FLEN/8, x4, x1, x2)

inst_30590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82203fffffffffff; valaddr_reg:x3; val_offset:91770*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91770*0 + 3*638*FLEN/8, x4, x1, x2)

inst_30591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x82207fffffffffff; valaddr_reg:x3; val_offset:91773*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91773*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_30592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8220ffffffffffff; valaddr_reg:x3; val_offset:91776*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91776*0 + 3*640*FLEN/8, x4, x1, x2)

inst_30593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8221ffffffffffff; valaddr_reg:x3; val_offset:91779*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91779*0 + 3*641*FLEN/8, x4, x1, x2)

inst_30594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8223ffffffffffff; valaddr_reg:x3; val_offset:91782*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91782*0 + 3*642*FLEN/8, x4, x1, x2)

inst_30595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8227ffffffffffff; valaddr_reg:x3; val_offset:91785*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91785*0 + 3*643*FLEN/8, x4, x1, x2)

inst_30596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x8228000000000000; valaddr_reg:x3; val_offset:91788*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91788*0 + 3*644*FLEN/8, x4, x1, x2)

inst_30597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822c000000000000; valaddr_reg:x3; val_offset:91791*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91791*0 + 3*645*FLEN/8, x4, x1, x2)

inst_30598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822e000000000000; valaddr_reg:x3; val_offset:91794*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91794*0 + 3*646*FLEN/8, x4, x1, x2)

inst_30599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822f000000000000; valaddr_reg:x3; val_offset:91797*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91797*0 + 3*647*FLEN/8, x4, x1, x2)

inst_30600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822f800000000000; valaddr_reg:x3; val_offset:91800*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91800*0 + 3*648*FLEN/8, x4, x1, x2)

inst_30601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fc00000000000; valaddr_reg:x3; val_offset:91803*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91803*0 + 3*649*FLEN/8, x4, x1, x2)

inst_30602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fe00000000000; valaddr_reg:x3; val_offset:91806*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91806*0 + 3*650*FLEN/8, x4, x1, x2)

inst_30603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ff00000000000; valaddr_reg:x3; val_offset:91809*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91809*0 + 3*651*FLEN/8, x4, x1, x2)

inst_30604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ff80000000000; valaddr_reg:x3; val_offset:91812*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91812*0 + 3*652*FLEN/8, x4, x1, x2)

inst_30605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffc0000000000; valaddr_reg:x3; val_offset:91815*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91815*0 + 3*653*FLEN/8, x4, x1, x2)

inst_30606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffe0000000000; valaddr_reg:x3; val_offset:91818*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91818*0 + 3*654*FLEN/8, x4, x1, x2)

inst_30607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fff0000000000; valaddr_reg:x3; val_offset:91821*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91821*0 + 3*655*FLEN/8, x4, x1, x2)

inst_30608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fff8000000000; valaddr_reg:x3; val_offset:91824*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91824*0 + 3*656*FLEN/8, x4, x1, x2)

inst_30609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffc000000000; valaddr_reg:x3; val_offset:91827*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91827*0 + 3*657*FLEN/8, x4, x1, x2)

inst_30610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffe000000000; valaddr_reg:x3; val_offset:91830*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91830*0 + 3*658*FLEN/8, x4, x1, x2)

inst_30611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffff000000000; valaddr_reg:x3; val_offset:91833*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91833*0 + 3*659*FLEN/8, x4, x1, x2)

inst_30612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffff800000000; valaddr_reg:x3; val_offset:91836*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91836*0 + 3*660*FLEN/8, x4, x1, x2)

inst_30613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffc00000000; valaddr_reg:x3; val_offset:91839*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91839*0 + 3*661*FLEN/8, x4, x1, x2)

inst_30614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffe00000000; valaddr_reg:x3; val_offset:91842*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91842*0 + 3*662*FLEN/8, x4, x1, x2)

inst_30615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffff00000000; valaddr_reg:x3; val_offset:91845*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91845*0 + 3*663*FLEN/8, x4, x1, x2)

inst_30616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffff80000000; valaddr_reg:x3; val_offset:91848*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91848*0 + 3*664*FLEN/8, x4, x1, x2)

inst_30617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffc0000000; valaddr_reg:x3; val_offset:91851*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91851*0 + 3*665*FLEN/8, x4, x1, x2)

inst_30618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffe0000000; valaddr_reg:x3; val_offset:91854*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91854*0 + 3*666*FLEN/8, x4, x1, x2)

inst_30619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffff0000000; valaddr_reg:x3; val_offset:91857*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91857*0 + 3*667*FLEN/8, x4, x1, x2)

inst_30620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffff8000000; valaddr_reg:x3; val_offset:91860*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91860*0 + 3*668*FLEN/8, x4, x1, x2)

inst_30621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffc000000; valaddr_reg:x3; val_offset:91863*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91863*0 + 3*669*FLEN/8, x4, x1, x2)

inst_30622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffe000000; valaddr_reg:x3; val_offset:91866*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91866*0 + 3*670*FLEN/8, x4, x1, x2)

inst_30623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffff000000; valaddr_reg:x3; val_offset:91869*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91869*0 + 3*671*FLEN/8, x4, x1, x2)

inst_30624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffff800000; valaddr_reg:x3; val_offset:91872*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91872*0 + 3*672*FLEN/8, x4, x1, x2)

inst_30625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffc00000; valaddr_reg:x3; val_offset:91875*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91875*0 + 3*673*FLEN/8, x4, x1, x2)

inst_30626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffe00000; valaddr_reg:x3; val_offset:91878*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91878*0 + 3*674*FLEN/8, x4, x1, x2)

inst_30627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffff00000; valaddr_reg:x3; val_offset:91881*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91881*0 + 3*675*FLEN/8, x4, x1, x2)

inst_30628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffff80000; valaddr_reg:x3; val_offset:91884*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91884*0 + 3*676*FLEN/8, x4, x1, x2)

inst_30629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffc0000; valaddr_reg:x3; val_offset:91887*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91887*0 + 3*677*FLEN/8, x4, x1, x2)

inst_30630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffe0000; valaddr_reg:x3; val_offset:91890*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91890*0 + 3*678*FLEN/8, x4, x1, x2)

inst_30631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffff0000; valaddr_reg:x3; val_offset:91893*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91893*0 + 3*679*FLEN/8, x4, x1, x2)

inst_30632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffff8000; valaddr_reg:x3; val_offset:91896*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91896*0 + 3*680*FLEN/8, x4, x1, x2)

inst_30633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffffc000; valaddr_reg:x3; val_offset:91899*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91899*0 + 3*681*FLEN/8, x4, x1, x2)

inst_30634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffffe000; valaddr_reg:x3; val_offset:91902*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91902*0 + 3*682*FLEN/8, x4, x1, x2)

inst_30635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffff000; valaddr_reg:x3; val_offset:91905*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91905*0 + 3*683*FLEN/8, x4, x1, x2)

inst_30636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffff800; valaddr_reg:x3; val_offset:91908*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91908*0 + 3*684*FLEN/8, x4, x1, x2)

inst_30637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffffc00; valaddr_reg:x3; val_offset:91911*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91911*0 + 3*685*FLEN/8, x4, x1, x2)

inst_30638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffffe00; valaddr_reg:x3; val_offset:91914*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91914*0 + 3*686*FLEN/8, x4, x1, x2)

inst_30639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffffff00; valaddr_reg:x3; val_offset:91917*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91917*0 + 3*687*FLEN/8, x4, x1, x2)

inst_30640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffffff80; valaddr_reg:x3; val_offset:91920*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91920*0 + 3*688*FLEN/8, x4, x1, x2)

inst_30641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffffffc0; valaddr_reg:x3; val_offset:91923*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91923*0 + 3*689*FLEN/8, x4, x1, x2)

inst_30642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffffffe0; valaddr_reg:x3; val_offset:91926*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91926*0 + 3*690*FLEN/8, x4, x1, x2)

inst_30643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffffff0; valaddr_reg:x3; val_offset:91929*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91929*0 + 3*691*FLEN/8, x4, x1, x2)

inst_30644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffffff8; valaddr_reg:x3; val_offset:91932*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91932*0 + 3*692*FLEN/8, x4, x1, x2)

inst_30645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffffffc; valaddr_reg:x3; val_offset:91935*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91935*0 + 3*693*FLEN/8, x4, x1, x2)

inst_30646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822ffffffffffffe; valaddr_reg:x3; val_offset:91938*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91938*0 + 3*694*FLEN/8, x4, x1, x2)

inst_30647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x317b0e28ce6a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9317b0e28ce6a5; op2val:0x8000;
op3val:0x822fffffffffffff; valaddr_reg:x3; val_offset:91941*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91941*0 + 3*695*FLEN/8, x4, x1, x2)

inst_30648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:91944*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91944*0 + 3*696*FLEN/8, x4, x1, x2)

inst_30649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:91947*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91947*0 + 3*697*FLEN/8, x4, x1, x2)

inst_30650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:91950*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91950*0 + 3*698*FLEN/8, x4, x1, x2)

inst_30651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:91953*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91953*0 + 3*699*FLEN/8, x4, x1, x2)

inst_30652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:91956*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91956*0 + 3*700*FLEN/8, x4, x1, x2)

inst_30653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:91959*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91959*0 + 3*701*FLEN/8, x4, x1, x2)

inst_30654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:91962*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91962*0 + 3*702*FLEN/8, x4, x1, x2)

inst_30655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:91965*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91965*0 + 3*703*FLEN/8, x4, x1, x2)

inst_30656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:91968*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91968*0 + 3*704*FLEN/8, x4, x1, x2)

inst_30657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:91971*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91971*0 + 3*705*FLEN/8, x4, x1, x2)

inst_30658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:91974*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91974*0 + 3*706*FLEN/8, x4, x1, x2)

inst_30659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:91977*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91977*0 + 3*707*FLEN/8, x4, x1, x2)

inst_30660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:91980*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91980*0 + 3*708*FLEN/8, x4, x1, x2)

inst_30661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:91983*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91983*0 + 3*709*FLEN/8, x4, x1, x2)

inst_30662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:91986*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91986*0 + 3*710*FLEN/8, x4, x1, x2)

inst_30663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:91989*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91989*0 + 3*711*FLEN/8, x4, x1, x2)

inst_30664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:91992*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91992*0 + 3*712*FLEN/8, x4, x1, x2)

inst_30665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:91995*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91995*0 + 3*713*FLEN/8, x4, x1, x2)

inst_30666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:91998*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 91998*0 + 3*714*FLEN/8, x4, x1, x2)

inst_30667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:92001*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92001*0 + 3*715*FLEN/8, x4, x1, x2)

inst_30668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:92004*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92004*0 + 3*716*FLEN/8, x4, x1, x2)

inst_30669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:92007*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92007*0 + 3*717*FLEN/8, x4, x1, x2)

inst_30670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000000000; valaddr_reg:x3; val_offset:92010*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92010*0 + 3*718*FLEN/8, x4, x1, x2)

inst_30671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000000001; valaddr_reg:x3; val_offset:92013*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92013*0 + 3*719*FLEN/8, x4, x1, x2)

inst_30672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000000003; valaddr_reg:x3; val_offset:92016*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92016*0 + 3*720*FLEN/8, x4, x1, x2)

inst_30673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000000007; valaddr_reg:x3; val_offset:92019*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92019*0 + 3*721*FLEN/8, x4, x1, x2)

inst_30674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000000000f; valaddr_reg:x3; val_offset:92022*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92022*0 + 3*722*FLEN/8, x4, x1, x2)

inst_30675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000000001f; valaddr_reg:x3; val_offset:92025*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92025*0 + 3*723*FLEN/8, x4, x1, x2)

inst_30676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000000003f; valaddr_reg:x3; val_offset:92028*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92028*0 + 3*724*FLEN/8, x4, x1, x2)

inst_30677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000000007f; valaddr_reg:x3; val_offset:92031*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92031*0 + 3*725*FLEN/8, x4, x1, x2)

inst_30678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000000000ff; valaddr_reg:x3; val_offset:92034*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92034*0 + 3*726*FLEN/8, x4, x1, x2)

inst_30679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000000001ff; valaddr_reg:x3; val_offset:92037*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92037*0 + 3*727*FLEN/8, x4, x1, x2)

inst_30680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000000003ff; valaddr_reg:x3; val_offset:92040*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92040*0 + 3*728*FLEN/8, x4, x1, x2)

inst_30681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000000007ff; valaddr_reg:x3; val_offset:92043*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92043*0 + 3*729*FLEN/8, x4, x1, x2)

inst_30682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000000fff; valaddr_reg:x3; val_offset:92046*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92046*0 + 3*730*FLEN/8, x4, x1, x2)

inst_30683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000001fff; valaddr_reg:x3; val_offset:92049*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92049*0 + 3*731*FLEN/8, x4, x1, x2)

inst_30684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000003fff; valaddr_reg:x3; val_offset:92052*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92052*0 + 3*732*FLEN/8, x4, x1, x2)

inst_30685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000007fff; valaddr_reg:x3; val_offset:92055*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92055*0 + 3*733*FLEN/8, x4, x1, x2)

inst_30686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000000ffff; valaddr_reg:x3; val_offset:92058*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92058*0 + 3*734*FLEN/8, x4, x1, x2)

inst_30687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000001ffff; valaddr_reg:x3; val_offset:92061*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92061*0 + 3*735*FLEN/8, x4, x1, x2)

inst_30688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000003ffff; valaddr_reg:x3; val_offset:92064*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92064*0 + 3*736*FLEN/8, x4, x1, x2)

inst_30689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000007ffff; valaddr_reg:x3; val_offset:92067*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92067*0 + 3*737*FLEN/8, x4, x1, x2)

inst_30690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000000fffff; valaddr_reg:x3; val_offset:92070*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92070*0 + 3*738*FLEN/8, x4, x1, x2)

inst_30691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000001fffff; valaddr_reg:x3; val_offset:92073*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92073*0 + 3*739*FLEN/8, x4, x1, x2)

inst_30692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000003fffff; valaddr_reg:x3; val_offset:92076*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92076*0 + 3*740*FLEN/8, x4, x1, x2)

inst_30693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000007fffff; valaddr_reg:x3; val_offset:92079*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92079*0 + 3*741*FLEN/8, x4, x1, x2)

inst_30694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000000ffffff; valaddr_reg:x3; val_offset:92082*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92082*0 + 3*742*FLEN/8, x4, x1, x2)

inst_30695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000001ffffff; valaddr_reg:x3; val_offset:92085*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92085*0 + 3*743*FLEN/8, x4, x1, x2)

inst_30696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000003ffffff; valaddr_reg:x3; val_offset:92088*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92088*0 + 3*744*FLEN/8, x4, x1, x2)

inst_30697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000007ffffff; valaddr_reg:x3; val_offset:92091*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92091*0 + 3*745*FLEN/8, x4, x1, x2)

inst_30698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000000fffffff; valaddr_reg:x3; val_offset:92094*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92094*0 + 3*746*FLEN/8, x4, x1, x2)

inst_30699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000001fffffff; valaddr_reg:x3; val_offset:92097*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92097*0 + 3*747*FLEN/8, x4, x1, x2)

inst_30700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000003fffffff; valaddr_reg:x3; val_offset:92100*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92100*0 + 3*748*FLEN/8, x4, x1, x2)

inst_30701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000007fffffff; valaddr_reg:x3; val_offset:92103*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92103*0 + 3*749*FLEN/8, x4, x1, x2)

inst_30702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400000ffffffff; valaddr_reg:x3; val_offset:92106*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92106*0 + 3*750*FLEN/8, x4, x1, x2)

inst_30703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400001ffffffff; valaddr_reg:x3; val_offset:92109*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92109*0 + 3*751*FLEN/8, x4, x1, x2)

inst_30704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400003ffffffff; valaddr_reg:x3; val_offset:92112*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92112*0 + 3*752*FLEN/8, x4, x1, x2)

inst_30705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400007ffffffff; valaddr_reg:x3; val_offset:92115*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92115*0 + 3*753*FLEN/8, x4, x1, x2)

inst_30706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40000fffffffff; valaddr_reg:x3; val_offset:92118*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92118*0 + 3*754*FLEN/8, x4, x1, x2)

inst_30707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40001fffffffff; valaddr_reg:x3; val_offset:92121*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92121*0 + 3*755*FLEN/8, x4, x1, x2)

inst_30708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40003fffffffff; valaddr_reg:x3; val_offset:92124*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92124*0 + 3*756*FLEN/8, x4, x1, x2)

inst_30709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40007fffffffff; valaddr_reg:x3; val_offset:92127*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92127*0 + 3*757*FLEN/8, x4, x1, x2)

inst_30710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4000ffffffffff; valaddr_reg:x3; val_offset:92130*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92130*0 + 3*758*FLEN/8, x4, x1, x2)

inst_30711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4001ffffffffff; valaddr_reg:x3; val_offset:92133*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92133*0 + 3*759*FLEN/8, x4, x1, x2)

inst_30712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4003ffffffffff; valaddr_reg:x3; val_offset:92136*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92136*0 + 3*760*FLEN/8, x4, x1, x2)

inst_30713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x4007ffffffffff; valaddr_reg:x3; val_offset:92139*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92139*0 + 3*761*FLEN/8, x4, x1, x2)

inst_30714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x400fffffffffff; valaddr_reg:x3; val_offset:92142*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92142*0 + 3*762*FLEN/8, x4, x1, x2)

inst_30715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x401fffffffffff; valaddr_reg:x3; val_offset:92145*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92145*0 + 3*763*FLEN/8, x4, x1, x2)

inst_30716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x403fffffffffff; valaddr_reg:x3; val_offset:92148*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92148*0 + 3*764*FLEN/8, x4, x1, x2)

inst_30717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x407fffffffffff; valaddr_reg:x3; val_offset:92151*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92151*0 + 3*765*FLEN/8, x4, x1, x2)

inst_30718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x40ffffffffffff; valaddr_reg:x3; val_offset:92154*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92154*0 + 3*766*FLEN/8, x4, x1, x2)

inst_30719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x31e31ed8a5b4d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x004 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f931e31ed8a5b4d; op2val:0x0;
op3val:0x41ffffffffffff; valaddr_reg:x3; val_offset:92157*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 92157*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539619628296437760,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539624026342948864,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539626225366204416,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539627324877832192,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539627874633646080,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628149511553024,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628286950506496,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628355669983232,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628390029721600,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628407209590784,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628415799525376,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628420094492672,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628422241976320,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628423315718144,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628423852589056,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424121024512,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424255242240,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424322351104,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424355905536,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424372682752,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424381071360,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424385265664,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424387362816,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424388411392,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424388935680,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389197824,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389328896,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389394432,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389427200,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389443584,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389451776,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389455872,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389457920,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389458944,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459456,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459712,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459840,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459904,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459936,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459952,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459960,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459964,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459966,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4539628424389459967,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886824433085054129,64,FLEN)
NAN_BOXED(2326972755626386814,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312448,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312449,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312451,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312455,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312463,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312479,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312511,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312575,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312703,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526312959,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526313471,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526314495,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526316543,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526320639,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526328831,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526345215,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526377983,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526443519,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526574591,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422526836735,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422527361023,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422528409599,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422530506751,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422534701055,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422543089663,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422559866879,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422593421311,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422660530175,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146422794747903,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146423063183359,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146423600054271,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146424673796095,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146426821279743,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146431116247039,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146439706181631,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146456886050815,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146491245789183,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146559965265919,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146697404219391,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562146972282126335,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562147522037940223,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562148621549567999,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562150820572823551,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562155218619334655,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562164014712356863,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562181606898401279,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562216791270490111,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562287160014667775,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562427897503023103,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4562709372479733759,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4563272322433155071,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4564398222339997695,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4564398222339997696,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4565524122246840320,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566087072200261632,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566368547176972288,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566509284665327616,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566579653409505280,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566614837781594112,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566632429967638528,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566641226060660736,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566645624107171840,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566647823130427392,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566648922642055168,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566649472397869056,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566649747275776000,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566649884714729472,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566649953434206208,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566649987793944576,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650004973813760,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650013563748352,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650017858715648,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650020006199296,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650021079941120,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650021616812032,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650021885247488,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022019465216,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022086574080,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022120128512,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022136905728,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022145294336,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022149488640,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022151585792,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022152634368,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153158656,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153420800,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153551872,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153617408,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153650176,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153666560,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153674752,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153678848,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153680896,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153681920,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682432,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682688,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682816,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682880,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682912,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682928,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682936,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682940,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682942,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4566650022153682943,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886827771676941207,64,FLEN)
NAN_BOXED(2326967981086659777,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449344,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449345,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449347,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449351,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449359,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449375,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449407,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449471,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449599,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467449855,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467450367,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467451391,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467453439,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467457535,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467465727,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467482111,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467514879,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467580415,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467711487,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385467973631,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385468497919,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385469546495,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385471643647,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385475837951,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385484226559,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385501003775,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385534558207,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385601667071,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640385735884799,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640386004320255,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640386541191167,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640387614932991,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640389762416639,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640394057383935,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640402647318527,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640419827187711,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640454186926079,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640522906402815,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640660345356287,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175640935223263231,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175641484979077119,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175642584490704895,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175644783513960447,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175649181560471551,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175657977653493759,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175675569839538175,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175710754211627007,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175781122955804671,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(175921860444159999,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(176203335420870655,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(176766285374291967,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(177892185281134591,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(177892185281134592,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(179018085187977216,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(179581035141398528,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(179862510118109184,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180003247606464512,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180073616350642176,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180108800722731008,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180126392908775424,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180135189001797632,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180139587048308736,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180141786071564288,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180142885583192064,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143435339005952,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143710216912896,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143847655866368,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143916375343104,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143950735081472,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143967914950656,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143976504885248,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143980799852544,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143982947336192,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143984021078016,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143984557948928,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143984826384384,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143984960602112,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985027710976,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985061265408,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985078042624,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985086431232,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985090625536,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985092722688,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985093771264,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094295552,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094557696,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094688768,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094754304,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094787072,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094803456,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094811648,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094815744,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094817792,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094818816,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819328,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819584,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819712,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819776,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819808,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819824,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819832,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819836,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819838,64,FLEN)
NAN_BOXED(6886839525272163621,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(180143985094819839,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301824,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301825,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301827,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301831,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301839,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301855,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301887,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301951,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604302079,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604302335,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604302847,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604303871,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604305919,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604310015,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604318207,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604334591,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604367359,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604432895,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604563967,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604826111,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383605350399,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383606398975,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383608496127,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383612690431,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383621079039,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383637856255,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383671410687,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383738519551,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383872737279,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158384141172735,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158384678043647,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158385751785471,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158387899269119,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158392194236415,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158400784171007,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158417964040191,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158452323778559,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158521043255295,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158658482208767,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158933360115711,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198159483115929599,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198160582627557375,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198162781650812927,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198167179697324031,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198175975790346239,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198193567976390655,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198228752348479487,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198299121092657151,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198439858581012479,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198721333557723135,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(199284283511144447,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(200410183417987071,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(200410183417987072,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(201536083324829696,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202099033278251008,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202380508254961664,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202521245743316992,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202591614487494656,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202626798859583488,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202644391045627904,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202653187138650112,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202657585185161216,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202659784208416768,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202660883720044544,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661433475858432,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661708353765376,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661845792718848,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661914512195584,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661948871933952,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661966051803136,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661974641737728,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661978936705024,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661981084188672,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661982157930496,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661982694801408,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661982963236864,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983097454592,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983164563456,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983198117888,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983214895104,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983223283712,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983227478016,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983229575168,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983230623744,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231148032,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231410176,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231541248,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231606784,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231639552,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231655936,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231664128,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231668224,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231670272,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231671296,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231671808,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672064,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672192,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672256,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672288,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672304,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672312,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672316,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672318,64,FLEN)
NAN_BOXED(6886848277815851823,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(202661983231672319,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302272,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302273,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302275,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302279,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302287,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302303,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302335,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302399,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302527,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709302783,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709303295,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709304319,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709306367,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709310463,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709318655,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709335039,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709367807,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709433343,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709564415,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852709826559,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852710350847,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852711399423,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852713496575,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852717690879,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852726079487,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852742856703,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852776411135,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852843519999,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354852977737727,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354853246173183,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354853783044095,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354854856785919,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354857004269567,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354861299236863,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354869889171455,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354887069040639,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354921428779007,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197354990148255743,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197355127587209215,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197355402465116159,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197355952220930047,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197357051732557823,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197359250755813375,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197363648802324479,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197372444895346687,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197390037081391103,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197425221453479935,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197495590197657599,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197636327686012927,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4197917802662723583,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4198480752616144895,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4199606652522987519,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4199606652522987520,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4200732552429830144,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201295502383251456,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201576977359962112,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201717714848317440,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201788083592495104,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201823267964583936,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201840860150628352,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201849656243650560,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201854054290161664,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201856253313417216,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201857352825044992,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201857902580858880,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858177458765824,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858314897719296,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858383617196032,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858417976934400,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858435156803584,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858443746738176,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858448041705472,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858450189189120,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858451262930944,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858451799801856,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452068237312,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452202455040,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452269563904,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452303118336,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452319895552,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452328284160,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452332478464,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452334575616,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452335624192,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336148480,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336410624,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336541696,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336607232,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336640000,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336656384,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336664576,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336668672,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336670720,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336671744,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672256,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672512,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672640,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672704,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672736,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672752,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672760,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672764,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672766,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4201858452336672767,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886866356150690685,64,FLEN)
NAN_BOXED(2326913232300720038,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372672,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372673,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372675,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372679,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372687,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372703,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372735,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372799,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372927,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185373183,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185373695,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185374719,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185376767,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185380863,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185389055,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185405439,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185438207,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185503743,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185634815,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185896959,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424186421247,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424187469823,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424189566975,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424193761279,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424202149887,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424218927103,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424252481535,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424319590399,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424453808127,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424722243583,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494425259114495,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494426332856319,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494428480339967,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494432775307263,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494441365241855,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494458545111039,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494492904849407,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494561624326143,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494699063279615,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494973941186559,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376495523697000447,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376496623208628223,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376498822231883775,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376503220278394879,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376512016371417087,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376529608557461503,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376564792929550335,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376635161673727999,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376775899162083327,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9377057374138793983,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9377620324092215295,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9378746223999057919,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9378746223999057920,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9379872123905900544,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380435073859321856,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380716548836032512,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380857286324387840,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380927655068565504,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380962839440654336,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380980431626698752,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380989227719720960,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380993625766232064,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380995824789487616,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380996924301115392,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997474056929280,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997748934836224,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997886373789696,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997955093266432,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997989453004800,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998006632873984,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998015222808576,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998019517775872,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998021665259520,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998022739001344,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023275872256,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023544307712,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023678525440,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023745634304,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023779188736,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023795965952,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023804354560,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023808548864,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023810646016,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023811694592,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812218880,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812481024,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812612096,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812677632,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812710400,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812726784,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812734976,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812739072,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812741120,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812742144,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812742656,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812742912,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743040,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743104,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743136,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743152,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743160,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743164,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743166,64,FLEN)
NAN_BOXED(6886874303662188197,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743167,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509481984,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509481985,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509481987,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509481991,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509481999,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509482015,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509482047,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509482111,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509482239,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509482495,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509483007,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509484031,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509486079,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509490175,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509498367,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509514751,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509547519,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509613055,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398509744127,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398510006271,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398510530559,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398511579135,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398513676287,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398517870591,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398526259199,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398543036415,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398576590847,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398643699711,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014398777917439,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014399046352895,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014399583223807,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014400656965631,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014402804449279,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014407099416575,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014415689351167,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014432869220351,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014467228958719,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014535948435455,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014673387388927,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18014948265295871,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18015498021109759,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18016597532737535,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18018796555993087,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18023194602504191,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18031990695526399,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18049582881570815,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18084767253659647,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18155135997837311,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18295873486192639,64,FLEN)
NAN_BOXED(6886881454967118669,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(18577348462903295,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
