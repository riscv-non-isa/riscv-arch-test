
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35328:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd000000003ffff; valaddr_reg:x3; val_offset:105984*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105984*0 + 3*0*FLEN/8, x4, x1, x2)

inst_35329:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd000000007ffff; valaddr_reg:x3; val_offset:105987*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105987*0 + 3*1*FLEN/8, x4, x1, x2)

inst_35330:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00000000fffff; valaddr_reg:x3; val_offset:105990*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105990*0 + 3*2*FLEN/8, x4, x1, x2)

inst_35331:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00000001fffff; valaddr_reg:x3; val_offset:105993*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105993*0 + 3*3*FLEN/8, x4, x1, x2)

inst_35332:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00000003fffff; valaddr_reg:x3; val_offset:105996*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105996*0 + 3*4*FLEN/8, x4, x1, x2)

inst_35333:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00000007fffff; valaddr_reg:x3; val_offset:105999*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105999*0 + 3*5*FLEN/8, x4, x1, x2)

inst_35334:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0000000ffffff; valaddr_reg:x3; val_offset:106002*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106002*0 + 3*6*FLEN/8, x4, x1, x2)

inst_35335:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0000001ffffff; valaddr_reg:x3; val_offset:106005*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106005*0 + 3*7*FLEN/8, x4, x1, x2)

inst_35336:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0000003ffffff; valaddr_reg:x3; val_offset:106008*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106008*0 + 3*8*FLEN/8, x4, x1, x2)

inst_35337:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0000007ffffff; valaddr_reg:x3; val_offset:106011*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106011*0 + 3*9*FLEN/8, x4, x1, x2)

inst_35338:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd000000fffffff; valaddr_reg:x3; val_offset:106014*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106014*0 + 3*10*FLEN/8, x4, x1, x2)

inst_35339:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd000001fffffff; valaddr_reg:x3; val_offset:106017*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106017*0 + 3*11*FLEN/8, x4, x1, x2)

inst_35340:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd000003fffffff; valaddr_reg:x3; val_offset:106020*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106020*0 + 3*12*FLEN/8, x4, x1, x2)

inst_35341:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd000007fffffff; valaddr_reg:x3; val_offset:106023*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106023*0 + 3*13*FLEN/8, x4, x1, x2)

inst_35342:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00000ffffffff; valaddr_reg:x3; val_offset:106026*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106026*0 + 3*14*FLEN/8, x4, x1, x2)

inst_35343:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00001ffffffff; valaddr_reg:x3; val_offset:106029*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106029*0 + 3*15*FLEN/8, x4, x1, x2)

inst_35344:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00003ffffffff; valaddr_reg:x3; val_offset:106032*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106032*0 + 3*16*FLEN/8, x4, x1, x2)

inst_35345:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00007ffffffff; valaddr_reg:x3; val_offset:106035*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106035*0 + 3*17*FLEN/8, x4, x1, x2)

inst_35346:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0000fffffffff; valaddr_reg:x3; val_offset:106038*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106038*0 + 3*18*FLEN/8, x4, x1, x2)

inst_35347:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0001fffffffff; valaddr_reg:x3; val_offset:106041*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106041*0 + 3*19*FLEN/8, x4, x1, x2)

inst_35348:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0003fffffffff; valaddr_reg:x3; val_offset:106044*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106044*0 + 3*20*FLEN/8, x4, x1, x2)

inst_35349:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0007fffffffff; valaddr_reg:x3; val_offset:106047*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106047*0 + 3*21*FLEN/8, x4, x1, x2)

inst_35350:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd000ffffffffff; valaddr_reg:x3; val_offset:106050*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106050*0 + 3*22*FLEN/8, x4, x1, x2)

inst_35351:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd001ffffffffff; valaddr_reg:x3; val_offset:106053*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106053*0 + 3*23*FLEN/8, x4, x1, x2)

inst_35352:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd003ffffffffff; valaddr_reg:x3; val_offset:106056*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106056*0 + 3*24*FLEN/8, x4, x1, x2)

inst_35353:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd007ffffffffff; valaddr_reg:x3; val_offset:106059*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106059*0 + 3*25*FLEN/8, x4, x1, x2)

inst_35354:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd00fffffffffff; valaddr_reg:x3; val_offset:106062*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106062*0 + 3*26*FLEN/8, x4, x1, x2)

inst_35355:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd01fffffffffff; valaddr_reg:x3; val_offset:106065*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106065*0 + 3*27*FLEN/8, x4, x1, x2)

inst_35356:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd03fffffffffff; valaddr_reg:x3; val_offset:106068*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106068*0 + 3*28*FLEN/8, x4, x1, x2)

inst_35357:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd07fffffffffff; valaddr_reg:x3; val_offset:106071*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106071*0 + 3*29*FLEN/8, x4, x1, x2)

inst_35358:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd0ffffffffffff; valaddr_reg:x3; val_offset:106074*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106074*0 + 3*30*FLEN/8, x4, x1, x2)

inst_35359:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd1ffffffffffff; valaddr_reg:x3; val_offset:106077*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106077*0 + 3*31*FLEN/8, x4, x1, x2)

inst_35360:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd3ffffffffffff; valaddr_reg:x3; val_offset:106080*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106080*0 + 3*32*FLEN/8, x4, x1, x2)

inst_35361:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd7ffffffffffff; valaddr_reg:x3; val_offset:106083*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106083*0 + 3*33*FLEN/8, x4, x1, x2)

inst_35362:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdd8000000000000; valaddr_reg:x3; val_offset:106086*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106086*0 + 3*34*FLEN/8, x4, x1, x2)

inst_35363:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddc000000000000; valaddr_reg:x3; val_offset:106089*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106089*0 + 3*35*FLEN/8, x4, x1, x2)

inst_35364:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbdde000000000000; valaddr_reg:x3; val_offset:106092*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106092*0 + 3*36*FLEN/8, x4, x1, x2)

inst_35365:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddf000000000000; valaddr_reg:x3; val_offset:106095*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106095*0 + 3*37*FLEN/8, x4, x1, x2)

inst_35366:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddf800000000000; valaddr_reg:x3; val_offset:106098*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106098*0 + 3*38*FLEN/8, x4, x1, x2)

inst_35367:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfc00000000000; valaddr_reg:x3; val_offset:106101*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106101*0 + 3*39*FLEN/8, x4, x1, x2)

inst_35368:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfe00000000000; valaddr_reg:x3; val_offset:106104*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106104*0 + 3*40*FLEN/8, x4, x1, x2)

inst_35369:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddff00000000000; valaddr_reg:x3; val_offset:106107*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106107*0 + 3*41*FLEN/8, x4, x1, x2)

inst_35370:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddff80000000000; valaddr_reg:x3; val_offset:106110*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106110*0 + 3*42*FLEN/8, x4, x1, x2)

inst_35371:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffc0000000000; valaddr_reg:x3; val_offset:106113*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106113*0 + 3*43*FLEN/8, x4, x1, x2)

inst_35372:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffe0000000000; valaddr_reg:x3; val_offset:106116*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106116*0 + 3*44*FLEN/8, x4, x1, x2)

inst_35373:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfff0000000000; valaddr_reg:x3; val_offset:106119*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106119*0 + 3*45*FLEN/8, x4, x1, x2)

inst_35374:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfff8000000000; valaddr_reg:x3; val_offset:106122*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106122*0 + 3*46*FLEN/8, x4, x1, x2)

inst_35375:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffc000000000; valaddr_reg:x3; val_offset:106125*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106125*0 + 3*47*FLEN/8, x4, x1, x2)

inst_35376:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffe000000000; valaddr_reg:x3; val_offset:106128*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106128*0 + 3*48*FLEN/8, x4, x1, x2)

inst_35377:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffff000000000; valaddr_reg:x3; val_offset:106131*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106131*0 + 3*49*FLEN/8, x4, x1, x2)

inst_35378:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffff800000000; valaddr_reg:x3; val_offset:106134*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106134*0 + 3*50*FLEN/8, x4, x1, x2)

inst_35379:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffc00000000; valaddr_reg:x3; val_offset:106137*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106137*0 + 3*51*FLEN/8, x4, x1, x2)

inst_35380:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffe00000000; valaddr_reg:x3; val_offset:106140*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106140*0 + 3*52*FLEN/8, x4, x1, x2)

inst_35381:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffff00000000; valaddr_reg:x3; val_offset:106143*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106143*0 + 3*53*FLEN/8, x4, x1, x2)

inst_35382:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffff80000000; valaddr_reg:x3; val_offset:106146*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106146*0 + 3*54*FLEN/8, x4, x1, x2)

inst_35383:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffc0000000; valaddr_reg:x3; val_offset:106149*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106149*0 + 3*55*FLEN/8, x4, x1, x2)

inst_35384:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffe0000000; valaddr_reg:x3; val_offset:106152*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106152*0 + 3*56*FLEN/8, x4, x1, x2)

inst_35385:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffff0000000; valaddr_reg:x3; val_offset:106155*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106155*0 + 3*57*FLEN/8, x4, x1, x2)

inst_35386:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffff8000000; valaddr_reg:x3; val_offset:106158*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106158*0 + 3*58*FLEN/8, x4, x1, x2)

inst_35387:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffc000000; valaddr_reg:x3; val_offset:106161*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106161*0 + 3*59*FLEN/8, x4, x1, x2)

inst_35388:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffe000000; valaddr_reg:x3; val_offset:106164*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106164*0 + 3*60*FLEN/8, x4, x1, x2)

inst_35389:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffff000000; valaddr_reg:x3; val_offset:106167*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106167*0 + 3*61*FLEN/8, x4, x1, x2)

inst_35390:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffff800000; valaddr_reg:x3; val_offset:106170*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106170*0 + 3*62*FLEN/8, x4, x1, x2)

inst_35391:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffc00000; valaddr_reg:x3; val_offset:106173*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106173*0 + 3*63*FLEN/8, x4, x1, x2)

inst_35392:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffe00000; valaddr_reg:x3; val_offset:106176*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106176*0 + 3*64*FLEN/8, x4, x1, x2)

inst_35393:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffff00000; valaddr_reg:x3; val_offset:106179*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106179*0 + 3*65*FLEN/8, x4, x1, x2)

inst_35394:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffff80000; valaddr_reg:x3; val_offset:106182*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106182*0 + 3*66*FLEN/8, x4, x1, x2)

inst_35395:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffc0000; valaddr_reg:x3; val_offset:106185*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106185*0 + 3*67*FLEN/8, x4, x1, x2)

inst_35396:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffe0000; valaddr_reg:x3; val_offset:106188*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106188*0 + 3*68*FLEN/8, x4, x1, x2)

inst_35397:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffff0000; valaddr_reg:x3; val_offset:106191*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106191*0 + 3*69*FLEN/8, x4, x1, x2)

inst_35398:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffff8000; valaddr_reg:x3; val_offset:106194*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106194*0 + 3*70*FLEN/8, x4, x1, x2)

inst_35399:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffffc000; valaddr_reg:x3; val_offset:106197*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106197*0 + 3*71*FLEN/8, x4, x1, x2)

inst_35400:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffffe000; valaddr_reg:x3; val_offset:106200*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106200*0 + 3*72*FLEN/8, x4, x1, x2)

inst_35401:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffff000; valaddr_reg:x3; val_offset:106203*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106203*0 + 3*73*FLEN/8, x4, x1, x2)

inst_35402:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffff800; valaddr_reg:x3; val_offset:106206*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106206*0 + 3*74*FLEN/8, x4, x1, x2)

inst_35403:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffffc00; valaddr_reg:x3; val_offset:106209*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106209*0 + 3*75*FLEN/8, x4, x1, x2)

inst_35404:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffffe00; valaddr_reg:x3; val_offset:106212*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106212*0 + 3*76*FLEN/8, x4, x1, x2)

inst_35405:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffffff00; valaddr_reg:x3; val_offset:106215*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106215*0 + 3*77*FLEN/8, x4, x1, x2)

inst_35406:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffffff80; valaddr_reg:x3; val_offset:106218*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106218*0 + 3*78*FLEN/8, x4, x1, x2)

inst_35407:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffffffc0; valaddr_reg:x3; val_offset:106221*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106221*0 + 3*79*FLEN/8, x4, x1, x2)

inst_35408:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffffffe0; valaddr_reg:x3; val_offset:106224*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106224*0 + 3*80*FLEN/8, x4, x1, x2)

inst_35409:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffffff0; valaddr_reg:x3; val_offset:106227*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106227*0 + 3*81*FLEN/8, x4, x1, x2)

inst_35410:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffffff8; valaddr_reg:x3; val_offset:106230*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106230*0 + 3*82*FLEN/8, x4, x1, x2)

inst_35411:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffffffc; valaddr_reg:x3; val_offset:106233*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106233*0 + 3*83*FLEN/8, x4, x1, x2)

inst_35412:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddffffffffffffe; valaddr_reg:x3; val_offset:106236*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106236*0 + 3*84*FLEN/8, x4, x1, x2)

inst_35413:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbddfffffffffffff; valaddr_reg:x3; val_offset:106239*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106239*0 + 3*85*FLEN/8, x4, x1, x2)

inst_35414:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:106242*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106242*0 + 3*86*FLEN/8, x4, x1, x2)

inst_35415:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:106245*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106245*0 + 3*87*FLEN/8, x4, x1, x2)

inst_35416:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:106248*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106248*0 + 3*88*FLEN/8, x4, x1, x2)

inst_35417:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:106251*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106251*0 + 3*89*FLEN/8, x4, x1, x2)

inst_35418:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:106254*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106254*0 + 3*90*FLEN/8, x4, x1, x2)

inst_35419:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:106257*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106257*0 + 3*91*FLEN/8, x4, x1, x2)

inst_35420:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:106260*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106260*0 + 3*92*FLEN/8, x4, x1, x2)

inst_35421:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:106263*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106263*0 + 3*93*FLEN/8, x4, x1, x2)

inst_35422:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:106266*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106266*0 + 3*94*FLEN/8, x4, x1, x2)

inst_35423:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:106269*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106269*0 + 3*95*FLEN/8, x4, x1, x2)

inst_35424:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:106272*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106272*0 + 3*96*FLEN/8, x4, x1, x2)

inst_35425:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:106275*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106275*0 + 3*97*FLEN/8, x4, x1, x2)

inst_35426:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:106278*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106278*0 + 3*98*FLEN/8, x4, x1, x2)

inst_35427:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:106281*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106281*0 + 3*99*FLEN/8, x4, x1, x2)

inst_35428:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:106284*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106284*0 + 3*100*FLEN/8, x4, x1, x2)

inst_35429:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:106287*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106287*0 + 3*101*FLEN/8, x4, x1, x2)

inst_35430:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:106290*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106290*0 + 3*102*FLEN/8, x4, x1, x2)

inst_35431:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:106293*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106293*0 + 3*103*FLEN/8, x4, x1, x2)

inst_35432:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:106296*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106296*0 + 3*104*FLEN/8, x4, x1, x2)

inst_35433:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:106299*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106299*0 + 3*105*FLEN/8, x4, x1, x2)

inst_35434:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:106302*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106302*0 + 3*106*FLEN/8, x4, x1, x2)

inst_35435:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5acc1595f449d and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x79f3328f12f71 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95acc1595f449d; op2val:0x9fd79f3328f12f71;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:106305*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106305*0 + 3*107*FLEN/8, x4, x1, x2)

inst_35436:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000000000; valaddr_reg:x3; val_offset:106308*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106308*0 + 3*108*FLEN/8, x4, x1, x2)

inst_35437:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000000001; valaddr_reg:x3; val_offset:106311*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106311*0 + 3*109*FLEN/8, x4, x1, x2)

inst_35438:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000000003; valaddr_reg:x3; val_offset:106314*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106314*0 + 3*110*FLEN/8, x4, x1, x2)

inst_35439:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000000007; valaddr_reg:x3; val_offset:106317*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106317*0 + 3*111*FLEN/8, x4, x1, x2)

inst_35440:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000000000f; valaddr_reg:x3; val_offset:106320*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106320*0 + 3*112*FLEN/8, x4, x1, x2)

inst_35441:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000000001f; valaddr_reg:x3; val_offset:106323*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106323*0 + 3*113*FLEN/8, x4, x1, x2)

inst_35442:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000000003f; valaddr_reg:x3; val_offset:106326*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106326*0 + 3*114*FLEN/8, x4, x1, x2)

inst_35443:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000000007f; valaddr_reg:x3; val_offset:106329*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106329*0 + 3*115*FLEN/8, x4, x1, x2)

inst_35444:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000000000ff; valaddr_reg:x3; val_offset:106332*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106332*0 + 3*116*FLEN/8, x4, x1, x2)

inst_35445:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000000001ff; valaddr_reg:x3; val_offset:106335*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106335*0 + 3*117*FLEN/8, x4, x1, x2)

inst_35446:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000000003ff; valaddr_reg:x3; val_offset:106338*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106338*0 + 3*118*FLEN/8, x4, x1, x2)

inst_35447:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000000007ff; valaddr_reg:x3; val_offset:106341*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106341*0 + 3*119*FLEN/8, x4, x1, x2)

inst_35448:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000000fff; valaddr_reg:x3; val_offset:106344*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106344*0 + 3*120*FLEN/8, x4, x1, x2)

inst_35449:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000001fff; valaddr_reg:x3; val_offset:106347*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106347*0 + 3*121*FLEN/8, x4, x1, x2)

inst_35450:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000003fff; valaddr_reg:x3; val_offset:106350*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106350*0 + 3*122*FLEN/8, x4, x1, x2)

inst_35451:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000007fff; valaddr_reg:x3; val_offset:106353*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106353*0 + 3*123*FLEN/8, x4, x1, x2)

inst_35452:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000000ffff; valaddr_reg:x3; val_offset:106356*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106356*0 + 3*124*FLEN/8, x4, x1, x2)

inst_35453:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000001ffff; valaddr_reg:x3; val_offset:106359*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106359*0 + 3*125*FLEN/8, x4, x1, x2)

inst_35454:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000003ffff; valaddr_reg:x3; val_offset:106362*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106362*0 + 3*126*FLEN/8, x4, x1, x2)

inst_35455:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000007ffff; valaddr_reg:x3; val_offset:106365*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106365*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_35456:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000000fffff; valaddr_reg:x3; val_offset:106368*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106368*0 + 3*128*FLEN/8, x4, x1, x2)

inst_35457:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000001fffff; valaddr_reg:x3; val_offset:106371*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106371*0 + 3*129*FLEN/8, x4, x1, x2)

inst_35458:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000003fffff; valaddr_reg:x3; val_offset:106374*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106374*0 + 3*130*FLEN/8, x4, x1, x2)

inst_35459:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000007fffff; valaddr_reg:x3; val_offset:106377*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106377*0 + 3*131*FLEN/8, x4, x1, x2)

inst_35460:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000000ffffff; valaddr_reg:x3; val_offset:106380*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106380*0 + 3*132*FLEN/8, x4, x1, x2)

inst_35461:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000001ffffff; valaddr_reg:x3; val_offset:106383*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106383*0 + 3*133*FLEN/8, x4, x1, x2)

inst_35462:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000003ffffff; valaddr_reg:x3; val_offset:106386*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106386*0 + 3*134*FLEN/8, x4, x1, x2)

inst_35463:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000007ffffff; valaddr_reg:x3; val_offset:106389*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106389*0 + 3*135*FLEN/8, x4, x1, x2)

inst_35464:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000000fffffff; valaddr_reg:x3; val_offset:106392*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106392*0 + 3*136*FLEN/8, x4, x1, x2)

inst_35465:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000001fffffff; valaddr_reg:x3; val_offset:106395*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106395*0 + 3*137*FLEN/8, x4, x1, x2)

inst_35466:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000003fffffff; valaddr_reg:x3; val_offset:106398*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106398*0 + 3*138*FLEN/8, x4, x1, x2)

inst_35467:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000007fffffff; valaddr_reg:x3; val_offset:106401*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106401*0 + 3*139*FLEN/8, x4, x1, x2)

inst_35468:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800000ffffffff; valaddr_reg:x3; val_offset:106404*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106404*0 + 3*140*FLEN/8, x4, x1, x2)

inst_35469:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800001ffffffff; valaddr_reg:x3; val_offset:106407*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106407*0 + 3*141*FLEN/8, x4, x1, x2)

inst_35470:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800003ffffffff; valaddr_reg:x3; val_offset:106410*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106410*0 + 3*142*FLEN/8, x4, x1, x2)

inst_35471:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800007ffffffff; valaddr_reg:x3; val_offset:106413*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106413*0 + 3*143*FLEN/8, x4, x1, x2)

inst_35472:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80000fffffffff; valaddr_reg:x3; val_offset:106416*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106416*0 + 3*144*FLEN/8, x4, x1, x2)

inst_35473:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80001fffffffff; valaddr_reg:x3; val_offset:106419*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106419*0 + 3*145*FLEN/8, x4, x1, x2)

inst_35474:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80003fffffffff; valaddr_reg:x3; val_offset:106422*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106422*0 + 3*146*FLEN/8, x4, x1, x2)

inst_35475:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80007fffffffff; valaddr_reg:x3; val_offset:106425*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106425*0 + 3*147*FLEN/8, x4, x1, x2)

inst_35476:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8000ffffffffff; valaddr_reg:x3; val_offset:106428*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106428*0 + 3*148*FLEN/8, x4, x1, x2)

inst_35477:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8001ffffffffff; valaddr_reg:x3; val_offset:106431*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106431*0 + 3*149*FLEN/8, x4, x1, x2)

inst_35478:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8003ffffffffff; valaddr_reg:x3; val_offset:106434*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106434*0 + 3*150*FLEN/8, x4, x1, x2)

inst_35479:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8007ffffffffff; valaddr_reg:x3; val_offset:106437*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106437*0 + 3*151*FLEN/8, x4, x1, x2)

inst_35480:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d800fffffffffff; valaddr_reg:x3; val_offset:106440*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106440*0 + 3*152*FLEN/8, x4, x1, x2)

inst_35481:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d801fffffffffff; valaddr_reg:x3; val_offset:106443*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106443*0 + 3*153*FLEN/8, x4, x1, x2)

inst_35482:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d803fffffffffff; valaddr_reg:x3; val_offset:106446*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106446*0 + 3*154*FLEN/8, x4, x1, x2)

inst_35483:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d807fffffffffff; valaddr_reg:x3; val_offset:106449*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106449*0 + 3*155*FLEN/8, x4, x1, x2)

inst_35484:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d80ffffffffffff; valaddr_reg:x3; val_offset:106452*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106452*0 + 3*156*FLEN/8, x4, x1, x2)

inst_35485:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d81ffffffffffff; valaddr_reg:x3; val_offset:106455*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106455*0 + 3*157*FLEN/8, x4, x1, x2)

inst_35486:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d83ffffffffffff; valaddr_reg:x3; val_offset:106458*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106458*0 + 3*158*FLEN/8, x4, x1, x2)

inst_35487:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d87ffffffffffff; valaddr_reg:x3; val_offset:106461*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106461*0 + 3*159*FLEN/8, x4, x1, x2)

inst_35488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d88000000000000; valaddr_reg:x3; val_offset:106464*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106464*0 + 3*160*FLEN/8, x4, x1, x2)

inst_35489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8c000000000000; valaddr_reg:x3; val_offset:106467*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106467*0 + 3*161*FLEN/8, x4, x1, x2)

inst_35490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8e000000000000; valaddr_reg:x3; val_offset:106470*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106470*0 + 3*162*FLEN/8, x4, x1, x2)

inst_35491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8f000000000000; valaddr_reg:x3; val_offset:106473*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106473*0 + 3*163*FLEN/8, x4, x1, x2)

inst_35492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8f800000000000; valaddr_reg:x3; val_offset:106476*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106476*0 + 3*164*FLEN/8, x4, x1, x2)

inst_35493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fc00000000000; valaddr_reg:x3; val_offset:106479*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106479*0 + 3*165*FLEN/8, x4, x1, x2)

inst_35494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fe00000000000; valaddr_reg:x3; val_offset:106482*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106482*0 + 3*166*FLEN/8, x4, x1, x2)

inst_35495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ff00000000000; valaddr_reg:x3; val_offset:106485*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106485*0 + 3*167*FLEN/8, x4, x1, x2)

inst_35496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ff80000000000; valaddr_reg:x3; val_offset:106488*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106488*0 + 3*168*FLEN/8, x4, x1, x2)

inst_35497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffc0000000000; valaddr_reg:x3; val_offset:106491*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106491*0 + 3*169*FLEN/8, x4, x1, x2)

inst_35498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffe0000000000; valaddr_reg:x3; val_offset:106494*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106494*0 + 3*170*FLEN/8, x4, x1, x2)

inst_35499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fff0000000000; valaddr_reg:x3; val_offset:106497*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106497*0 + 3*171*FLEN/8, x4, x1, x2)

inst_35500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fff8000000000; valaddr_reg:x3; val_offset:106500*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106500*0 + 3*172*FLEN/8, x4, x1, x2)

inst_35501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffc000000000; valaddr_reg:x3; val_offset:106503*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106503*0 + 3*173*FLEN/8, x4, x1, x2)

inst_35502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffe000000000; valaddr_reg:x3; val_offset:106506*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106506*0 + 3*174*FLEN/8, x4, x1, x2)

inst_35503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffff000000000; valaddr_reg:x3; val_offset:106509*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106509*0 + 3*175*FLEN/8, x4, x1, x2)

inst_35504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffff800000000; valaddr_reg:x3; val_offset:106512*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106512*0 + 3*176*FLEN/8, x4, x1, x2)

inst_35505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffc00000000; valaddr_reg:x3; val_offset:106515*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106515*0 + 3*177*FLEN/8, x4, x1, x2)

inst_35506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffe00000000; valaddr_reg:x3; val_offset:106518*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106518*0 + 3*178*FLEN/8, x4, x1, x2)

inst_35507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffff00000000; valaddr_reg:x3; val_offset:106521*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106521*0 + 3*179*FLEN/8, x4, x1, x2)

inst_35508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffff80000000; valaddr_reg:x3; val_offset:106524*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106524*0 + 3*180*FLEN/8, x4, x1, x2)

inst_35509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffc0000000; valaddr_reg:x3; val_offset:106527*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106527*0 + 3*181*FLEN/8, x4, x1, x2)

inst_35510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffe0000000; valaddr_reg:x3; val_offset:106530*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106530*0 + 3*182*FLEN/8, x4, x1, x2)

inst_35511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffff0000000; valaddr_reg:x3; val_offset:106533*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106533*0 + 3*183*FLEN/8, x4, x1, x2)

inst_35512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffff8000000; valaddr_reg:x3; val_offset:106536*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106536*0 + 3*184*FLEN/8, x4, x1, x2)

inst_35513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffc000000; valaddr_reg:x3; val_offset:106539*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106539*0 + 3*185*FLEN/8, x4, x1, x2)

inst_35514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffe000000; valaddr_reg:x3; val_offset:106542*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106542*0 + 3*186*FLEN/8, x4, x1, x2)

inst_35515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffff000000; valaddr_reg:x3; val_offset:106545*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106545*0 + 3*187*FLEN/8, x4, x1, x2)

inst_35516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffff800000; valaddr_reg:x3; val_offset:106548*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106548*0 + 3*188*FLEN/8, x4, x1, x2)

inst_35517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffc00000; valaddr_reg:x3; val_offset:106551*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106551*0 + 3*189*FLEN/8, x4, x1, x2)

inst_35518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffe00000; valaddr_reg:x3; val_offset:106554*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106554*0 + 3*190*FLEN/8, x4, x1, x2)

inst_35519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffff00000; valaddr_reg:x3; val_offset:106557*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106557*0 + 3*191*FLEN/8, x4, x1, x2)

inst_35520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffff80000; valaddr_reg:x3; val_offset:106560*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106560*0 + 3*192*FLEN/8, x4, x1, x2)

inst_35521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffc0000; valaddr_reg:x3; val_offset:106563*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106563*0 + 3*193*FLEN/8, x4, x1, x2)

inst_35522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffe0000; valaddr_reg:x3; val_offset:106566*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106566*0 + 3*194*FLEN/8, x4, x1, x2)

inst_35523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffff0000; valaddr_reg:x3; val_offset:106569*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106569*0 + 3*195*FLEN/8, x4, x1, x2)

inst_35524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffff8000; valaddr_reg:x3; val_offset:106572*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106572*0 + 3*196*FLEN/8, x4, x1, x2)

inst_35525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffffc000; valaddr_reg:x3; val_offset:106575*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106575*0 + 3*197*FLEN/8, x4, x1, x2)

inst_35526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffffe000; valaddr_reg:x3; val_offset:106578*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106578*0 + 3*198*FLEN/8, x4, x1, x2)

inst_35527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffff000; valaddr_reg:x3; val_offset:106581*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106581*0 + 3*199*FLEN/8, x4, x1, x2)

inst_35528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffff800; valaddr_reg:x3; val_offset:106584*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106584*0 + 3*200*FLEN/8, x4, x1, x2)

inst_35529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffffc00; valaddr_reg:x3; val_offset:106587*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106587*0 + 3*201*FLEN/8, x4, x1, x2)

inst_35530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffffe00; valaddr_reg:x3; val_offset:106590*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106590*0 + 3*202*FLEN/8, x4, x1, x2)

inst_35531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffffff00; valaddr_reg:x3; val_offset:106593*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106593*0 + 3*203*FLEN/8, x4, x1, x2)

inst_35532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffffff80; valaddr_reg:x3; val_offset:106596*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106596*0 + 3*204*FLEN/8, x4, x1, x2)

inst_35533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffffffc0; valaddr_reg:x3; val_offset:106599*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106599*0 + 3*205*FLEN/8, x4, x1, x2)

inst_35534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffffffe0; valaddr_reg:x3; val_offset:106602*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106602*0 + 3*206*FLEN/8, x4, x1, x2)

inst_35535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffffff0; valaddr_reg:x3; val_offset:106605*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106605*0 + 3*207*FLEN/8, x4, x1, x2)

inst_35536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffffff8; valaddr_reg:x3; val_offset:106608*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106608*0 + 3*208*FLEN/8, x4, x1, x2)

inst_35537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffffffc; valaddr_reg:x3; val_offset:106611*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106611*0 + 3*209*FLEN/8, x4, x1, x2)

inst_35538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8ffffffffffffe; valaddr_reg:x3; val_offset:106614*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106614*0 + 3*210*FLEN/8, x4, x1, x2)

inst_35539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3d8 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3d8fffffffffffff; valaddr_reg:x3; val_offset:106617*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106617*0 + 3*211*FLEN/8, x4, x1, x2)

inst_35540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:106620*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106620*0 + 3*212*FLEN/8, x4, x1, x2)

inst_35541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:106623*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106623*0 + 3*213*FLEN/8, x4, x1, x2)

inst_35542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:106626*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106626*0 + 3*214*FLEN/8, x4, x1, x2)

inst_35543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:106629*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106629*0 + 3*215*FLEN/8, x4, x1, x2)

inst_35544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:106632*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106632*0 + 3*216*FLEN/8, x4, x1, x2)

inst_35545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:106635*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106635*0 + 3*217*FLEN/8, x4, x1, x2)

inst_35546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:106638*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106638*0 + 3*218*FLEN/8, x4, x1, x2)

inst_35547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:106641*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106641*0 + 3*219*FLEN/8, x4, x1, x2)

inst_35548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:106644*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106644*0 + 3*220*FLEN/8, x4, x1, x2)

inst_35549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:106647*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106647*0 + 3*221*FLEN/8, x4, x1, x2)

inst_35550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:106650*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106650*0 + 3*222*FLEN/8, x4, x1, x2)

inst_35551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:106653*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106653*0 + 3*223*FLEN/8, x4, x1, x2)

inst_35552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:106656*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106656*0 + 3*224*FLEN/8, x4, x1, x2)

inst_35553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:106659*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106659*0 + 3*225*FLEN/8, x4, x1, x2)

inst_35554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:106662*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106662*0 + 3*226*FLEN/8, x4, x1, x2)

inst_35555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:106665*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106665*0 + 3*227*FLEN/8, x4, x1, x2)

inst_35556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:106668*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106668*0 + 3*228*FLEN/8, x4, x1, x2)

inst_35557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:106671*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106671*0 + 3*229*FLEN/8, x4, x1, x2)

inst_35558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:106674*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106674*0 + 3*230*FLEN/8, x4, x1, x2)

inst_35559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:106677*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106677*0 + 3*231*FLEN/8, x4, x1, x2)

inst_35560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:106680*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106680*0 + 3*232*FLEN/8, x4, x1, x2)

inst_35561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5afbe8ab8e775 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x79bf1adcbab8e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95afbe8ab8e775; op2val:0x20479bf1adcbab8e;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:106683*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106683*0 + 3*233*FLEN/8, x4, x1, x2)

inst_35562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:106686*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106686*0 + 3*234*FLEN/8, x4, x1, x2)

inst_35563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:106689*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106689*0 + 3*235*FLEN/8, x4, x1, x2)

inst_35564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:106692*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106692*0 + 3*236*FLEN/8, x4, x1, x2)

inst_35565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:106695*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106695*0 + 3*237*FLEN/8, x4, x1, x2)

inst_35566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:106698*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106698*0 + 3*238*FLEN/8, x4, x1, x2)

inst_35567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:106701*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106701*0 + 3*239*FLEN/8, x4, x1, x2)

inst_35568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:106704*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106704*0 + 3*240*FLEN/8, x4, x1, x2)

inst_35569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:106707*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106707*0 + 3*241*FLEN/8, x4, x1, x2)

inst_35570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:106710*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106710*0 + 3*242*FLEN/8, x4, x1, x2)

inst_35571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:106713*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106713*0 + 3*243*FLEN/8, x4, x1, x2)

inst_35572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:106716*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106716*0 + 3*244*FLEN/8, x4, x1, x2)

inst_35573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:106719*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106719*0 + 3*245*FLEN/8, x4, x1, x2)

inst_35574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:106722*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106722*0 + 3*246*FLEN/8, x4, x1, x2)

inst_35575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:106725*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106725*0 + 3*247*FLEN/8, x4, x1, x2)

inst_35576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:106728*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106728*0 + 3*248*FLEN/8, x4, x1, x2)

inst_35577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:106731*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106731*0 + 3*249*FLEN/8, x4, x1, x2)

inst_35578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:106734*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106734*0 + 3*250*FLEN/8, x4, x1, x2)

inst_35579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:106737*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106737*0 + 3*251*FLEN/8, x4, x1, x2)

inst_35580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:106740*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106740*0 + 3*252*FLEN/8, x4, x1, x2)

inst_35581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:106743*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106743*0 + 3*253*FLEN/8, x4, x1, x2)

inst_35582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:106746*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106746*0 + 3*254*FLEN/8, x4, x1, x2)

inst_35583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:106749*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106749*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_35584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000000000; valaddr_reg:x3; val_offset:106752*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106752*0 + 3*256*FLEN/8, x4, x1, x2)

inst_35585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000000001; valaddr_reg:x3; val_offset:106755*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106755*0 + 3*257*FLEN/8, x4, x1, x2)

inst_35586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000000003; valaddr_reg:x3; val_offset:106758*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106758*0 + 3*258*FLEN/8, x4, x1, x2)

inst_35587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000000007; valaddr_reg:x3; val_offset:106761*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106761*0 + 3*259*FLEN/8, x4, x1, x2)

inst_35588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000000000f; valaddr_reg:x3; val_offset:106764*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106764*0 + 3*260*FLEN/8, x4, x1, x2)

inst_35589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000000001f; valaddr_reg:x3; val_offset:106767*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106767*0 + 3*261*FLEN/8, x4, x1, x2)

inst_35590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000000003f; valaddr_reg:x3; val_offset:106770*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106770*0 + 3*262*FLEN/8, x4, x1, x2)

inst_35591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000000007f; valaddr_reg:x3; val_offset:106773*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106773*0 + 3*263*FLEN/8, x4, x1, x2)

inst_35592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000000000ff; valaddr_reg:x3; val_offset:106776*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106776*0 + 3*264*FLEN/8, x4, x1, x2)

inst_35593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000000001ff; valaddr_reg:x3; val_offset:106779*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106779*0 + 3*265*FLEN/8, x4, x1, x2)

inst_35594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000000003ff; valaddr_reg:x3; val_offset:106782*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106782*0 + 3*266*FLEN/8, x4, x1, x2)

inst_35595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000000007ff; valaddr_reg:x3; val_offset:106785*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106785*0 + 3*267*FLEN/8, x4, x1, x2)

inst_35596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000000fff; valaddr_reg:x3; val_offset:106788*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106788*0 + 3*268*FLEN/8, x4, x1, x2)

inst_35597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000001fff; valaddr_reg:x3; val_offset:106791*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106791*0 + 3*269*FLEN/8, x4, x1, x2)

inst_35598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000003fff; valaddr_reg:x3; val_offset:106794*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106794*0 + 3*270*FLEN/8, x4, x1, x2)

inst_35599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000007fff; valaddr_reg:x3; val_offset:106797*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106797*0 + 3*271*FLEN/8, x4, x1, x2)

inst_35600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000000ffff; valaddr_reg:x3; val_offset:106800*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106800*0 + 3*272*FLEN/8, x4, x1, x2)

inst_35601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000001ffff; valaddr_reg:x3; val_offset:106803*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106803*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000003ffff; valaddr_reg:x3; val_offset:106806*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106806*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000007ffff; valaddr_reg:x3; val_offset:106809*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106809*0 + 3*275*FLEN/8, x4, x1, x2)

inst_35604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000000fffff; valaddr_reg:x3; val_offset:106812*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106812*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000001fffff; valaddr_reg:x3; val_offset:106815*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106815*0 + 3*277*FLEN/8, x4, x1, x2)

inst_35606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000003fffff; valaddr_reg:x3; val_offset:106818*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106818*0 + 3*278*FLEN/8, x4, x1, x2)

inst_35607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000007fffff; valaddr_reg:x3; val_offset:106821*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106821*0 + 3*279*FLEN/8, x4, x1, x2)

inst_35608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000000ffffff; valaddr_reg:x3; val_offset:106824*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106824*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000001ffffff; valaddr_reg:x3; val_offset:106827*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106827*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000003ffffff; valaddr_reg:x3; val_offset:106830*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106830*0 + 3*282*FLEN/8, x4, x1, x2)

inst_35611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000007ffffff; valaddr_reg:x3; val_offset:106833*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106833*0 + 3*283*FLEN/8, x4, x1, x2)

inst_35612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000000fffffff; valaddr_reg:x3; val_offset:106836*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106836*0 + 3*284*FLEN/8, x4, x1, x2)

inst_35613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000001fffffff; valaddr_reg:x3; val_offset:106839*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106839*0 + 3*285*FLEN/8, x4, x1, x2)

inst_35614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000003fffffff; valaddr_reg:x3; val_offset:106842*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106842*0 + 3*286*FLEN/8, x4, x1, x2)

inst_35615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000007fffffff; valaddr_reg:x3; val_offset:106845*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106845*0 + 3*287*FLEN/8, x4, x1, x2)

inst_35616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000000ffffffff; valaddr_reg:x3; val_offset:106848*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106848*0 + 3*288*FLEN/8, x4, x1, x2)

inst_35617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000001ffffffff; valaddr_reg:x3; val_offset:106851*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106851*0 + 3*289*FLEN/8, x4, x1, x2)

inst_35618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000003ffffffff; valaddr_reg:x3; val_offset:106854*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106854*0 + 3*290*FLEN/8, x4, x1, x2)

inst_35619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000007ffffffff; valaddr_reg:x3; val_offset:106857*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106857*0 + 3*291*FLEN/8, x4, x1, x2)

inst_35620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200000fffffffff; valaddr_reg:x3; val_offset:106860*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106860*0 + 3*292*FLEN/8, x4, x1, x2)

inst_35621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200001fffffffff; valaddr_reg:x3; val_offset:106863*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106863*0 + 3*293*FLEN/8, x4, x1, x2)

inst_35622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200003fffffffff; valaddr_reg:x3; val_offset:106866*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106866*0 + 3*294*FLEN/8, x4, x1, x2)

inst_35623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200007fffffffff; valaddr_reg:x3; val_offset:106869*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106869*0 + 3*295*FLEN/8, x4, x1, x2)

inst_35624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820000ffffffffff; valaddr_reg:x3; val_offset:106872*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106872*0 + 3*296*FLEN/8, x4, x1, x2)

inst_35625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820001ffffffffff; valaddr_reg:x3; val_offset:106875*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106875*0 + 3*297*FLEN/8, x4, x1, x2)

inst_35626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820003ffffffffff; valaddr_reg:x3; val_offset:106878*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106878*0 + 3*298*FLEN/8, x4, x1, x2)

inst_35627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820007ffffffffff; valaddr_reg:x3; val_offset:106881*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106881*0 + 3*299*FLEN/8, x4, x1, x2)

inst_35628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82000fffffffffff; valaddr_reg:x3; val_offset:106884*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106884*0 + 3*300*FLEN/8, x4, x1, x2)

inst_35629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82001fffffffffff; valaddr_reg:x3; val_offset:106887*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106887*0 + 3*301*FLEN/8, x4, x1, x2)

inst_35630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82003fffffffffff; valaddr_reg:x3; val_offset:106890*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106890*0 + 3*302*FLEN/8, x4, x1, x2)

inst_35631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x82007fffffffffff; valaddr_reg:x3; val_offset:106893*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106893*0 + 3*303*FLEN/8, x4, x1, x2)

inst_35632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8200ffffffffffff; valaddr_reg:x3; val_offset:106896*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106896*0 + 3*304*FLEN/8, x4, x1, x2)

inst_35633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8201ffffffffffff; valaddr_reg:x3; val_offset:106899*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106899*0 + 3*305*FLEN/8, x4, x1, x2)

inst_35634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8203ffffffffffff; valaddr_reg:x3; val_offset:106902*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106902*0 + 3*306*FLEN/8, x4, x1, x2)

inst_35635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8207ffffffffffff; valaddr_reg:x3; val_offset:106905*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106905*0 + 3*307*FLEN/8, x4, x1, x2)

inst_35636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x8208000000000000; valaddr_reg:x3; val_offset:106908*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106908*0 + 3*308*FLEN/8, x4, x1, x2)

inst_35637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820c000000000000; valaddr_reg:x3; val_offset:106911*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106911*0 + 3*309*FLEN/8, x4, x1, x2)

inst_35638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820e000000000000; valaddr_reg:x3; val_offset:106914*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106914*0 + 3*310*FLEN/8, x4, x1, x2)

inst_35639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820f000000000000; valaddr_reg:x3; val_offset:106917*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106917*0 + 3*311*FLEN/8, x4, x1, x2)

inst_35640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820f800000000000; valaddr_reg:x3; val_offset:106920*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106920*0 + 3*312*FLEN/8, x4, x1, x2)

inst_35641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fc00000000000; valaddr_reg:x3; val_offset:106923*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106923*0 + 3*313*FLEN/8, x4, x1, x2)

inst_35642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fe00000000000; valaddr_reg:x3; val_offset:106926*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106926*0 + 3*314*FLEN/8, x4, x1, x2)

inst_35643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ff00000000000; valaddr_reg:x3; val_offset:106929*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106929*0 + 3*315*FLEN/8, x4, x1, x2)

inst_35644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ff80000000000; valaddr_reg:x3; val_offset:106932*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106932*0 + 3*316*FLEN/8, x4, x1, x2)

inst_35645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffc0000000000; valaddr_reg:x3; val_offset:106935*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106935*0 + 3*317*FLEN/8, x4, x1, x2)

inst_35646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffe0000000000; valaddr_reg:x3; val_offset:106938*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106938*0 + 3*318*FLEN/8, x4, x1, x2)

inst_35647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fff0000000000; valaddr_reg:x3; val_offset:106941*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106941*0 + 3*319*FLEN/8, x4, x1, x2)

inst_35648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fff8000000000; valaddr_reg:x3; val_offset:106944*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106944*0 + 3*320*FLEN/8, x4, x1, x2)

inst_35649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffc000000000; valaddr_reg:x3; val_offset:106947*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106947*0 + 3*321*FLEN/8, x4, x1, x2)

inst_35650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffe000000000; valaddr_reg:x3; val_offset:106950*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106950*0 + 3*322*FLEN/8, x4, x1, x2)

inst_35651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffff000000000; valaddr_reg:x3; val_offset:106953*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106953*0 + 3*323*FLEN/8, x4, x1, x2)

inst_35652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffff800000000; valaddr_reg:x3; val_offset:106956*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106956*0 + 3*324*FLEN/8, x4, x1, x2)

inst_35653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffc00000000; valaddr_reg:x3; val_offset:106959*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106959*0 + 3*325*FLEN/8, x4, x1, x2)

inst_35654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffe00000000; valaddr_reg:x3; val_offset:106962*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106962*0 + 3*326*FLEN/8, x4, x1, x2)

inst_35655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffff00000000; valaddr_reg:x3; val_offset:106965*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106965*0 + 3*327*FLEN/8, x4, x1, x2)

inst_35656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffff80000000; valaddr_reg:x3; val_offset:106968*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106968*0 + 3*328*FLEN/8, x4, x1, x2)

inst_35657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffc0000000; valaddr_reg:x3; val_offset:106971*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106971*0 + 3*329*FLEN/8, x4, x1, x2)

inst_35658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffe0000000; valaddr_reg:x3; val_offset:106974*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106974*0 + 3*330*FLEN/8, x4, x1, x2)

inst_35659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffff0000000; valaddr_reg:x3; val_offset:106977*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106977*0 + 3*331*FLEN/8, x4, x1, x2)

inst_35660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffff8000000; valaddr_reg:x3; val_offset:106980*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106980*0 + 3*332*FLEN/8, x4, x1, x2)

inst_35661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffc000000; valaddr_reg:x3; val_offset:106983*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106983*0 + 3*333*FLEN/8, x4, x1, x2)

inst_35662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffe000000; valaddr_reg:x3; val_offset:106986*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106986*0 + 3*334*FLEN/8, x4, x1, x2)

inst_35663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffff000000; valaddr_reg:x3; val_offset:106989*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106989*0 + 3*335*FLEN/8, x4, x1, x2)

inst_35664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffff800000; valaddr_reg:x3; val_offset:106992*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106992*0 + 3*336*FLEN/8, x4, x1, x2)

inst_35665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffc00000; valaddr_reg:x3; val_offset:106995*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106995*0 + 3*337*FLEN/8, x4, x1, x2)

inst_35666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffe00000; valaddr_reg:x3; val_offset:106998*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 106998*0 + 3*338*FLEN/8, x4, x1, x2)

inst_35667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffff00000; valaddr_reg:x3; val_offset:107001*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107001*0 + 3*339*FLEN/8, x4, x1, x2)

inst_35668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffff80000; valaddr_reg:x3; val_offset:107004*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107004*0 + 3*340*FLEN/8, x4, x1, x2)

inst_35669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffc0000; valaddr_reg:x3; val_offset:107007*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107007*0 + 3*341*FLEN/8, x4, x1, x2)

inst_35670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffe0000; valaddr_reg:x3; val_offset:107010*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107010*0 + 3*342*FLEN/8, x4, x1, x2)

inst_35671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffff0000; valaddr_reg:x3; val_offset:107013*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107013*0 + 3*343*FLEN/8, x4, x1, x2)

inst_35672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffff8000; valaddr_reg:x3; val_offset:107016*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107016*0 + 3*344*FLEN/8, x4, x1, x2)

inst_35673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffffc000; valaddr_reg:x3; val_offset:107019*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107019*0 + 3*345*FLEN/8, x4, x1, x2)

inst_35674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffffe000; valaddr_reg:x3; val_offset:107022*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107022*0 + 3*346*FLEN/8, x4, x1, x2)

inst_35675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffff000; valaddr_reg:x3; val_offset:107025*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107025*0 + 3*347*FLEN/8, x4, x1, x2)

inst_35676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffff800; valaddr_reg:x3; val_offset:107028*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107028*0 + 3*348*FLEN/8, x4, x1, x2)

inst_35677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffffc00; valaddr_reg:x3; val_offset:107031*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107031*0 + 3*349*FLEN/8, x4, x1, x2)

inst_35678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffffe00; valaddr_reg:x3; val_offset:107034*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107034*0 + 3*350*FLEN/8, x4, x1, x2)

inst_35679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffffff00; valaddr_reg:x3; val_offset:107037*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107037*0 + 3*351*FLEN/8, x4, x1, x2)

inst_35680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffffff80; valaddr_reg:x3; val_offset:107040*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107040*0 + 3*352*FLEN/8, x4, x1, x2)

inst_35681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffffffc0; valaddr_reg:x3; val_offset:107043*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107043*0 + 3*353*FLEN/8, x4, x1, x2)

inst_35682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffffffe0; valaddr_reg:x3; val_offset:107046*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107046*0 + 3*354*FLEN/8, x4, x1, x2)

inst_35683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffffff0; valaddr_reg:x3; val_offset:107049*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107049*0 + 3*355*FLEN/8, x4, x1, x2)

inst_35684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffffff8; valaddr_reg:x3; val_offset:107052*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107052*0 + 3*356*FLEN/8, x4, x1, x2)

inst_35685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffffffc; valaddr_reg:x3; val_offset:107055*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107055*0 + 3*357*FLEN/8, x4, x1, x2)

inst_35686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820ffffffffffffe; valaddr_reg:x3; val_offset:107058*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107058*0 + 3*358*FLEN/8, x4, x1, x2)

inst_35687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5ea96bd4dabb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x020 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95ea96bd4dabb5; op2val:0x8000;
op3val:0x820fffffffffffff; valaddr_reg:x3; val_offset:107061*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107061*0 + 3*359*FLEN/8, x4, x1, x2)

inst_35688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000000000; valaddr_reg:x3; val_offset:107064*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107064*0 + 3*360*FLEN/8, x4, x1, x2)

inst_35689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000000001; valaddr_reg:x3; val_offset:107067*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107067*0 + 3*361*FLEN/8, x4, x1, x2)

inst_35690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000000003; valaddr_reg:x3; val_offset:107070*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107070*0 + 3*362*FLEN/8, x4, x1, x2)

inst_35691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000000007; valaddr_reg:x3; val_offset:107073*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107073*0 + 3*363*FLEN/8, x4, x1, x2)

inst_35692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000000000f; valaddr_reg:x3; val_offset:107076*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107076*0 + 3*364*FLEN/8, x4, x1, x2)

inst_35693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000000001f; valaddr_reg:x3; val_offset:107079*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107079*0 + 3*365*FLEN/8, x4, x1, x2)

inst_35694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000000003f; valaddr_reg:x3; val_offset:107082*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107082*0 + 3*366*FLEN/8, x4, x1, x2)

inst_35695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000000007f; valaddr_reg:x3; val_offset:107085*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107085*0 + 3*367*FLEN/8, x4, x1, x2)

inst_35696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000000000ff; valaddr_reg:x3; val_offset:107088*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107088*0 + 3*368*FLEN/8, x4, x1, x2)

inst_35697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000000001ff; valaddr_reg:x3; val_offset:107091*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107091*0 + 3*369*FLEN/8, x4, x1, x2)

inst_35698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000000003ff; valaddr_reg:x3; val_offset:107094*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107094*0 + 3*370*FLEN/8, x4, x1, x2)

inst_35699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000000007ff; valaddr_reg:x3; val_offset:107097*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107097*0 + 3*371*FLEN/8, x4, x1, x2)

inst_35700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000000fff; valaddr_reg:x3; val_offset:107100*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107100*0 + 3*372*FLEN/8, x4, x1, x2)

inst_35701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000001fff; valaddr_reg:x3; val_offset:107103*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107103*0 + 3*373*FLEN/8, x4, x1, x2)

inst_35702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000003fff; valaddr_reg:x3; val_offset:107106*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107106*0 + 3*374*FLEN/8, x4, x1, x2)

inst_35703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000007fff; valaddr_reg:x3; val_offset:107109*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107109*0 + 3*375*FLEN/8, x4, x1, x2)

inst_35704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000000ffff; valaddr_reg:x3; val_offset:107112*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107112*0 + 3*376*FLEN/8, x4, x1, x2)

inst_35705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000001ffff; valaddr_reg:x3; val_offset:107115*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107115*0 + 3*377*FLEN/8, x4, x1, x2)

inst_35706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000003ffff; valaddr_reg:x3; val_offset:107118*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107118*0 + 3*378*FLEN/8, x4, x1, x2)

inst_35707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000007ffff; valaddr_reg:x3; val_offset:107121*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107121*0 + 3*379*FLEN/8, x4, x1, x2)

inst_35708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000000fffff; valaddr_reg:x3; val_offset:107124*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107124*0 + 3*380*FLEN/8, x4, x1, x2)

inst_35709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000001fffff; valaddr_reg:x3; val_offset:107127*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107127*0 + 3*381*FLEN/8, x4, x1, x2)

inst_35710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000003fffff; valaddr_reg:x3; val_offset:107130*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107130*0 + 3*382*FLEN/8, x4, x1, x2)

inst_35711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000007fffff; valaddr_reg:x3; val_offset:107133*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107133*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_35712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000000ffffff; valaddr_reg:x3; val_offset:107136*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107136*0 + 3*384*FLEN/8, x4, x1, x2)

inst_35713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000001ffffff; valaddr_reg:x3; val_offset:107139*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107139*0 + 3*385*FLEN/8, x4, x1, x2)

inst_35714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000003ffffff; valaddr_reg:x3; val_offset:107142*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107142*0 + 3*386*FLEN/8, x4, x1, x2)

inst_35715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000007ffffff; valaddr_reg:x3; val_offset:107145*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107145*0 + 3*387*FLEN/8, x4, x1, x2)

inst_35716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000000fffffff; valaddr_reg:x3; val_offset:107148*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107148*0 + 3*388*FLEN/8, x4, x1, x2)

inst_35717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000001fffffff; valaddr_reg:x3; val_offset:107151*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107151*0 + 3*389*FLEN/8, x4, x1, x2)

inst_35718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000003fffffff; valaddr_reg:x3; val_offset:107154*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107154*0 + 3*390*FLEN/8, x4, x1, x2)

inst_35719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000007fffffff; valaddr_reg:x3; val_offset:107157*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107157*0 + 3*391*FLEN/8, x4, x1, x2)

inst_35720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200000ffffffff; valaddr_reg:x3; val_offset:107160*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107160*0 + 3*392*FLEN/8, x4, x1, x2)

inst_35721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200001ffffffff; valaddr_reg:x3; val_offset:107163*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107163*0 + 3*393*FLEN/8, x4, x1, x2)

inst_35722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200003ffffffff; valaddr_reg:x3; val_offset:107166*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107166*0 + 3*394*FLEN/8, x4, x1, x2)

inst_35723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200007ffffffff; valaddr_reg:x3; val_offset:107169*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107169*0 + 3*395*FLEN/8, x4, x1, x2)

inst_35724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820000fffffffff; valaddr_reg:x3; val_offset:107172*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107172*0 + 3*396*FLEN/8, x4, x1, x2)

inst_35725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820001fffffffff; valaddr_reg:x3; val_offset:107175*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107175*0 + 3*397*FLEN/8, x4, x1, x2)

inst_35726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820003fffffffff; valaddr_reg:x3; val_offset:107178*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107178*0 + 3*398*FLEN/8, x4, x1, x2)

inst_35727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820007fffffffff; valaddr_reg:x3; val_offset:107181*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107181*0 + 3*399*FLEN/8, x4, x1, x2)

inst_35728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382000ffffffffff; valaddr_reg:x3; val_offset:107184*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107184*0 + 3*400*FLEN/8, x4, x1, x2)

inst_35729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382001ffffffffff; valaddr_reg:x3; val_offset:107187*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107187*0 + 3*401*FLEN/8, x4, x1, x2)

inst_35730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382003ffffffffff; valaddr_reg:x3; val_offset:107190*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107190*0 + 3*402*FLEN/8, x4, x1, x2)

inst_35731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382007ffffffffff; valaddr_reg:x3; val_offset:107193*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107193*0 + 3*403*FLEN/8, x4, x1, x2)

inst_35732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38200fffffffffff; valaddr_reg:x3; val_offset:107196*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107196*0 + 3*404*FLEN/8, x4, x1, x2)

inst_35733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38201fffffffffff; valaddr_reg:x3; val_offset:107199*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107199*0 + 3*405*FLEN/8, x4, x1, x2)

inst_35734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38203fffffffffff; valaddr_reg:x3; val_offset:107202*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107202*0 + 3*406*FLEN/8, x4, x1, x2)

inst_35735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x38207fffffffffff; valaddr_reg:x3; val_offset:107205*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107205*0 + 3*407*FLEN/8, x4, x1, x2)

inst_35736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3820ffffffffffff; valaddr_reg:x3; val_offset:107208*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107208*0 + 3*408*FLEN/8, x4, x1, x2)

inst_35737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3821ffffffffffff; valaddr_reg:x3; val_offset:107211*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107211*0 + 3*409*FLEN/8, x4, x1, x2)

inst_35738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3823ffffffffffff; valaddr_reg:x3; val_offset:107214*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107214*0 + 3*410*FLEN/8, x4, x1, x2)

inst_35739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3827ffffffffffff; valaddr_reg:x3; val_offset:107217*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107217*0 + 3*411*FLEN/8, x4, x1, x2)

inst_35740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3828000000000000; valaddr_reg:x3; val_offset:107220*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107220*0 + 3*412*FLEN/8, x4, x1, x2)

inst_35741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382c000000000000; valaddr_reg:x3; val_offset:107223*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107223*0 + 3*413*FLEN/8, x4, x1, x2)

inst_35742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382e000000000000; valaddr_reg:x3; val_offset:107226*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107226*0 + 3*414*FLEN/8, x4, x1, x2)

inst_35743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382f000000000000; valaddr_reg:x3; val_offset:107229*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107229*0 + 3*415*FLEN/8, x4, x1, x2)

inst_35744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382f800000000000; valaddr_reg:x3; val_offset:107232*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107232*0 + 3*416*FLEN/8, x4, x1, x2)

inst_35745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fc00000000000; valaddr_reg:x3; val_offset:107235*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107235*0 + 3*417*FLEN/8, x4, x1, x2)

inst_35746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fe00000000000; valaddr_reg:x3; val_offset:107238*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107238*0 + 3*418*FLEN/8, x4, x1, x2)

inst_35747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ff00000000000; valaddr_reg:x3; val_offset:107241*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107241*0 + 3*419*FLEN/8, x4, x1, x2)

inst_35748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ff80000000000; valaddr_reg:x3; val_offset:107244*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107244*0 + 3*420*FLEN/8, x4, x1, x2)

inst_35749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffc0000000000; valaddr_reg:x3; val_offset:107247*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107247*0 + 3*421*FLEN/8, x4, x1, x2)

inst_35750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffe0000000000; valaddr_reg:x3; val_offset:107250*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107250*0 + 3*422*FLEN/8, x4, x1, x2)

inst_35751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fff0000000000; valaddr_reg:x3; val_offset:107253*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107253*0 + 3*423*FLEN/8, x4, x1, x2)

inst_35752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fff8000000000; valaddr_reg:x3; val_offset:107256*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107256*0 + 3*424*FLEN/8, x4, x1, x2)

inst_35753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffc000000000; valaddr_reg:x3; val_offset:107259*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107259*0 + 3*425*FLEN/8, x4, x1, x2)

inst_35754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffe000000000; valaddr_reg:x3; val_offset:107262*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107262*0 + 3*426*FLEN/8, x4, x1, x2)

inst_35755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffff000000000; valaddr_reg:x3; val_offset:107265*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107265*0 + 3*427*FLEN/8, x4, x1, x2)

inst_35756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffff800000000; valaddr_reg:x3; val_offset:107268*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107268*0 + 3*428*FLEN/8, x4, x1, x2)

inst_35757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffc00000000; valaddr_reg:x3; val_offset:107271*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107271*0 + 3*429*FLEN/8, x4, x1, x2)

inst_35758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffe00000000; valaddr_reg:x3; val_offset:107274*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107274*0 + 3*430*FLEN/8, x4, x1, x2)

inst_35759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffff00000000; valaddr_reg:x3; val_offset:107277*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107277*0 + 3*431*FLEN/8, x4, x1, x2)

inst_35760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffff80000000; valaddr_reg:x3; val_offset:107280*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107280*0 + 3*432*FLEN/8, x4, x1, x2)

inst_35761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffc0000000; valaddr_reg:x3; val_offset:107283*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107283*0 + 3*433*FLEN/8, x4, x1, x2)

inst_35762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffe0000000; valaddr_reg:x3; val_offset:107286*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107286*0 + 3*434*FLEN/8, x4, x1, x2)

inst_35763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffff0000000; valaddr_reg:x3; val_offset:107289*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107289*0 + 3*435*FLEN/8, x4, x1, x2)

inst_35764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffff8000000; valaddr_reg:x3; val_offset:107292*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107292*0 + 3*436*FLEN/8, x4, x1, x2)

inst_35765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffc000000; valaddr_reg:x3; val_offset:107295*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107295*0 + 3*437*FLEN/8, x4, x1, x2)

inst_35766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffe000000; valaddr_reg:x3; val_offset:107298*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107298*0 + 3*438*FLEN/8, x4, x1, x2)

inst_35767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffff000000; valaddr_reg:x3; val_offset:107301*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107301*0 + 3*439*FLEN/8, x4, x1, x2)

inst_35768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffff800000; valaddr_reg:x3; val_offset:107304*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107304*0 + 3*440*FLEN/8, x4, x1, x2)

inst_35769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffc00000; valaddr_reg:x3; val_offset:107307*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107307*0 + 3*441*FLEN/8, x4, x1, x2)

inst_35770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffe00000; valaddr_reg:x3; val_offset:107310*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107310*0 + 3*442*FLEN/8, x4, x1, x2)

inst_35771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffff00000; valaddr_reg:x3; val_offset:107313*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107313*0 + 3*443*FLEN/8, x4, x1, x2)

inst_35772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffff80000; valaddr_reg:x3; val_offset:107316*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107316*0 + 3*444*FLEN/8, x4, x1, x2)

inst_35773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffc0000; valaddr_reg:x3; val_offset:107319*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107319*0 + 3*445*FLEN/8, x4, x1, x2)

inst_35774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffe0000; valaddr_reg:x3; val_offset:107322*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107322*0 + 3*446*FLEN/8, x4, x1, x2)

inst_35775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffff0000; valaddr_reg:x3; val_offset:107325*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107325*0 + 3*447*FLEN/8, x4, x1, x2)

inst_35776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffff8000; valaddr_reg:x3; val_offset:107328*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107328*0 + 3*448*FLEN/8, x4, x1, x2)

inst_35777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffffc000; valaddr_reg:x3; val_offset:107331*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107331*0 + 3*449*FLEN/8, x4, x1, x2)

inst_35778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffffe000; valaddr_reg:x3; val_offset:107334*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107334*0 + 3*450*FLEN/8, x4, x1, x2)

inst_35779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffff000; valaddr_reg:x3; val_offset:107337*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107337*0 + 3*451*FLEN/8, x4, x1, x2)

inst_35780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffff800; valaddr_reg:x3; val_offset:107340*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107340*0 + 3*452*FLEN/8, x4, x1, x2)

inst_35781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffffc00; valaddr_reg:x3; val_offset:107343*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107343*0 + 3*453*FLEN/8, x4, x1, x2)

inst_35782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffffe00; valaddr_reg:x3; val_offset:107346*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107346*0 + 3*454*FLEN/8, x4, x1, x2)

inst_35783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffffff00; valaddr_reg:x3; val_offset:107349*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107349*0 + 3*455*FLEN/8, x4, x1, x2)

inst_35784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffffff80; valaddr_reg:x3; val_offset:107352*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107352*0 + 3*456*FLEN/8, x4, x1, x2)

inst_35785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffffffc0; valaddr_reg:x3; val_offset:107355*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107355*0 + 3*457*FLEN/8, x4, x1, x2)

inst_35786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffffffe0; valaddr_reg:x3; val_offset:107358*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107358*0 + 3*458*FLEN/8, x4, x1, x2)

inst_35787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffffff0; valaddr_reg:x3; val_offset:107361*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107361*0 + 3*459*FLEN/8, x4, x1, x2)

inst_35788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffffff8; valaddr_reg:x3; val_offset:107364*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107364*0 + 3*460*FLEN/8, x4, x1, x2)

inst_35789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffffffc; valaddr_reg:x3; val_offset:107367*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107367*0 + 3*461*FLEN/8, x4, x1, x2)

inst_35790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382ffffffffffffe; valaddr_reg:x3; val_offset:107370*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107370*0 + 3*462*FLEN/8, x4, x1, x2)

inst_35791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x382 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x382fffffffffffff; valaddr_reg:x3; val_offset:107373*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107373*0 + 3*463*FLEN/8, x4, x1, x2)

inst_35792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:107376*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107376*0 + 3*464*FLEN/8, x4, x1, x2)

inst_35793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:107379*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107379*0 + 3*465*FLEN/8, x4, x1, x2)

inst_35794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:107382*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107382*0 + 3*466*FLEN/8, x4, x1, x2)

inst_35795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:107385*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107385*0 + 3*467*FLEN/8, x4, x1, x2)

inst_35796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:107388*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107388*0 + 3*468*FLEN/8, x4, x1, x2)

inst_35797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:107391*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107391*0 + 3*469*FLEN/8, x4, x1, x2)

inst_35798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:107394*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107394*0 + 3*470*FLEN/8, x4, x1, x2)

inst_35799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:107397*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107397*0 + 3*471*FLEN/8, x4, x1, x2)

inst_35800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:107400*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107400*0 + 3*472*FLEN/8, x4, x1, x2)

inst_35801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:107403*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107403*0 + 3*473*FLEN/8, x4, x1, x2)

inst_35802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:107406*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107406*0 + 3*474*FLEN/8, x4, x1, x2)

inst_35803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:107409*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107409*0 + 3*475*FLEN/8, x4, x1, x2)

inst_35804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:107412*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107412*0 + 3*476*FLEN/8, x4, x1, x2)

inst_35805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:107415*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107415*0 + 3*477*FLEN/8, x4, x1, x2)

inst_35806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:107418*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107418*0 + 3*478*FLEN/8, x4, x1, x2)

inst_35807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:107421*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107421*0 + 3*479*FLEN/8, x4, x1, x2)

inst_35808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:107424*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107424*0 + 3*480*FLEN/8, x4, x1, x2)

inst_35809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:107427*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107427*0 + 3*481*FLEN/8, x4, x1, x2)

inst_35810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:107430*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107430*0 + 3*482*FLEN/8, x4, x1, x2)

inst_35811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:107433*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107433*0 + 3*483*FLEN/8, x4, x1, x2)

inst_35812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:107436*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107436*0 + 3*484*FLEN/8, x4, x1, x2)

inst_35813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5f952b35e0a9b and fs2 == 0 and fe2 == 0x204 and fm2 == 0x74ce3c90276d3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95f952b35e0a9b; op2val:0x20474ce3c90276d3;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:107439*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107439*0 + 3*485*FLEN/8, x4, x1, x2)

inst_35814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:107442*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107442*0 + 3*486*FLEN/8, x4, x1, x2)

inst_35815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:107445*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107445*0 + 3*487*FLEN/8, x4, x1, x2)

inst_35816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:107448*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107448*0 + 3*488*FLEN/8, x4, x1, x2)

inst_35817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:107451*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107451*0 + 3*489*FLEN/8, x4, x1, x2)

inst_35818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:107454*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107454*0 + 3*490*FLEN/8, x4, x1, x2)

inst_35819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:107457*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107457*0 + 3*491*FLEN/8, x4, x1, x2)

inst_35820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:107460*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107460*0 + 3*492*FLEN/8, x4, x1, x2)

inst_35821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:107463*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107463*0 + 3*493*FLEN/8, x4, x1, x2)

inst_35822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:107466*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107466*0 + 3*494*FLEN/8, x4, x1, x2)

inst_35823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:107469*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107469*0 + 3*495*FLEN/8, x4, x1, x2)

inst_35824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:107472*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107472*0 + 3*496*FLEN/8, x4, x1, x2)

inst_35825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:107475*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107475*0 + 3*497*FLEN/8, x4, x1, x2)

inst_35826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:107478*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107478*0 + 3*498*FLEN/8, x4, x1, x2)

inst_35827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:107481*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107481*0 + 3*499*FLEN/8, x4, x1, x2)

inst_35828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:107484*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107484*0 + 3*500*FLEN/8, x4, x1, x2)

inst_35829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:107487*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107487*0 + 3*501*FLEN/8, x4, x1, x2)

inst_35830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:107490*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107490*0 + 3*502*FLEN/8, x4, x1, x2)

inst_35831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:107493*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107493*0 + 3*503*FLEN/8, x4, x1, x2)

inst_35832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:107496*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107496*0 + 3*504*FLEN/8, x4, x1, x2)

inst_35833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:107499*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107499*0 + 3*505*FLEN/8, x4, x1, x2)

inst_35834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:107502*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107502*0 + 3*506*FLEN/8, x4, x1, x2)

inst_35835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:107505*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107505*0 + 3*507*FLEN/8, x4, x1, x2)

inst_35836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000000000; valaddr_reg:x3; val_offset:107508*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107508*0 + 3*508*FLEN/8, x4, x1, x2)

inst_35837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000000001; valaddr_reg:x3; val_offset:107511*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107511*0 + 3*509*FLEN/8, x4, x1, x2)

inst_35838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000000003; valaddr_reg:x3; val_offset:107514*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107514*0 + 3*510*FLEN/8, x4, x1, x2)

inst_35839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000000007; valaddr_reg:x3; val_offset:107517*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107517*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_35840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000000000f; valaddr_reg:x3; val_offset:107520*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107520*0 + 3*512*FLEN/8, x4, x1, x2)

inst_35841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000000001f; valaddr_reg:x3; val_offset:107523*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107523*0 + 3*513*FLEN/8, x4, x1, x2)

inst_35842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000000003f; valaddr_reg:x3; val_offset:107526*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107526*0 + 3*514*FLEN/8, x4, x1, x2)

inst_35843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000000007f; valaddr_reg:x3; val_offset:107529*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107529*0 + 3*515*FLEN/8, x4, x1, x2)

inst_35844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000000000ff; valaddr_reg:x3; val_offset:107532*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107532*0 + 3*516*FLEN/8, x4, x1, x2)

inst_35845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000000001ff; valaddr_reg:x3; val_offset:107535*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107535*0 + 3*517*FLEN/8, x4, x1, x2)

inst_35846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000000003ff; valaddr_reg:x3; val_offset:107538*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107538*0 + 3*518*FLEN/8, x4, x1, x2)

inst_35847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000000007ff; valaddr_reg:x3; val_offset:107541*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107541*0 + 3*519*FLEN/8, x4, x1, x2)

inst_35848:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000000fff; valaddr_reg:x3; val_offset:107544*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107544*0 + 3*520*FLEN/8, x4, x1, x2)

inst_35849:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000001fff; valaddr_reg:x3; val_offset:107547*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107547*0 + 3*521*FLEN/8, x4, x1, x2)

inst_35850:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000003fff; valaddr_reg:x3; val_offset:107550*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107550*0 + 3*522*FLEN/8, x4, x1, x2)

inst_35851:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000007fff; valaddr_reg:x3; val_offset:107553*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107553*0 + 3*523*FLEN/8, x4, x1, x2)

inst_35852:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000000ffff; valaddr_reg:x3; val_offset:107556*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107556*0 + 3*524*FLEN/8, x4, x1, x2)

inst_35853:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000001ffff; valaddr_reg:x3; val_offset:107559*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107559*0 + 3*525*FLEN/8, x4, x1, x2)

inst_35854:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000003ffff; valaddr_reg:x3; val_offset:107562*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107562*0 + 3*526*FLEN/8, x4, x1, x2)

inst_35855:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000007ffff; valaddr_reg:x3; val_offset:107565*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107565*0 + 3*527*FLEN/8, x4, x1, x2)

inst_35856:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000000fffff; valaddr_reg:x3; val_offset:107568*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107568*0 + 3*528*FLEN/8, x4, x1, x2)

inst_35857:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000001fffff; valaddr_reg:x3; val_offset:107571*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107571*0 + 3*529*FLEN/8, x4, x1, x2)

inst_35858:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000003fffff; valaddr_reg:x3; val_offset:107574*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107574*0 + 3*530*FLEN/8, x4, x1, x2)

inst_35859:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000007fffff; valaddr_reg:x3; val_offset:107577*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107577*0 + 3*531*FLEN/8, x4, x1, x2)

inst_35860:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000000ffffff; valaddr_reg:x3; val_offset:107580*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107580*0 + 3*532*FLEN/8, x4, x1, x2)

inst_35861:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000001ffffff; valaddr_reg:x3; val_offset:107583*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107583*0 + 3*533*FLEN/8, x4, x1, x2)

inst_35862:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000003ffffff; valaddr_reg:x3; val_offset:107586*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107586*0 + 3*534*FLEN/8, x4, x1, x2)

inst_35863:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000007ffffff; valaddr_reg:x3; val_offset:107589*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107589*0 + 3*535*FLEN/8, x4, x1, x2)

inst_35864:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000000fffffff; valaddr_reg:x3; val_offset:107592*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107592*0 + 3*536*FLEN/8, x4, x1, x2)

inst_35865:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000001fffffff; valaddr_reg:x3; val_offset:107595*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107595*0 + 3*537*FLEN/8, x4, x1, x2)

inst_35866:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000003fffffff; valaddr_reg:x3; val_offset:107598*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107598*0 + 3*538*FLEN/8, x4, x1, x2)

inst_35867:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000007fffffff; valaddr_reg:x3; val_offset:107601*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107601*0 + 3*539*FLEN/8, x4, x1, x2)

inst_35868:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00000ffffffff; valaddr_reg:x3; val_offset:107604*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107604*0 + 3*540*FLEN/8, x4, x1, x2)

inst_35869:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00001ffffffff; valaddr_reg:x3; val_offset:107607*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107607*0 + 3*541*FLEN/8, x4, x1, x2)

inst_35870:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00003ffffffff; valaddr_reg:x3; val_offset:107610*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107610*0 + 3*542*FLEN/8, x4, x1, x2)

inst_35871:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00007ffffffff; valaddr_reg:x3; val_offset:107613*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107613*0 + 3*543*FLEN/8, x4, x1, x2)

inst_35872:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0000fffffffff; valaddr_reg:x3; val_offset:107616*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107616*0 + 3*544*FLEN/8, x4, x1, x2)

inst_35873:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0001fffffffff; valaddr_reg:x3; val_offset:107619*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107619*0 + 3*545*FLEN/8, x4, x1, x2)

inst_35874:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0003fffffffff; valaddr_reg:x3; val_offset:107622*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107622*0 + 3*546*FLEN/8, x4, x1, x2)

inst_35875:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0007fffffffff; valaddr_reg:x3; val_offset:107625*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107625*0 + 3*547*FLEN/8, x4, x1, x2)

inst_35876:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c000ffffffffff; valaddr_reg:x3; val_offset:107628*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107628*0 + 3*548*FLEN/8, x4, x1, x2)

inst_35877:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c001ffffffffff; valaddr_reg:x3; val_offset:107631*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107631*0 + 3*549*FLEN/8, x4, x1, x2)

inst_35878:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c003ffffffffff; valaddr_reg:x3; val_offset:107634*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107634*0 + 3*550*FLEN/8, x4, x1, x2)

inst_35879:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c007ffffffffff; valaddr_reg:x3; val_offset:107637*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107637*0 + 3*551*FLEN/8, x4, x1, x2)

inst_35880:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c00fffffffffff; valaddr_reg:x3; val_offset:107640*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107640*0 + 3*552*FLEN/8, x4, x1, x2)

inst_35881:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c01fffffffffff; valaddr_reg:x3; val_offset:107643*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107643*0 + 3*553*FLEN/8, x4, x1, x2)

inst_35882:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c03fffffffffff; valaddr_reg:x3; val_offset:107646*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107646*0 + 3*554*FLEN/8, x4, x1, x2)

inst_35883:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c07fffffffffff; valaddr_reg:x3; val_offset:107649*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107649*0 + 3*555*FLEN/8, x4, x1, x2)

inst_35884:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c0ffffffffffff; valaddr_reg:x3; val_offset:107652*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107652*0 + 3*556*FLEN/8, x4, x1, x2)

inst_35885:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c1ffffffffffff; valaddr_reg:x3; val_offset:107655*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107655*0 + 3*557*FLEN/8, x4, x1, x2)

inst_35886:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c3ffffffffffff; valaddr_reg:x3; val_offset:107658*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107658*0 + 3*558*FLEN/8, x4, x1, x2)

inst_35887:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c7ffffffffffff; valaddr_reg:x3; val_offset:107661*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107661*0 + 3*559*FLEN/8, x4, x1, x2)

inst_35888:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83c8000000000000; valaddr_reg:x3; val_offset:107664*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107664*0 + 3*560*FLEN/8, x4, x1, x2)

inst_35889:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cc000000000000; valaddr_reg:x3; val_offset:107667*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107667*0 + 3*561*FLEN/8, x4, x1, x2)

inst_35890:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83ce000000000000; valaddr_reg:x3; val_offset:107670*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107670*0 + 3*562*FLEN/8, x4, x1, x2)

inst_35891:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cf000000000000; valaddr_reg:x3; val_offset:107673*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107673*0 + 3*563*FLEN/8, x4, x1, x2)

inst_35892:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cf800000000000; valaddr_reg:x3; val_offset:107676*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107676*0 + 3*564*FLEN/8, x4, x1, x2)

inst_35893:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfc00000000000; valaddr_reg:x3; val_offset:107679*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107679*0 + 3*565*FLEN/8, x4, x1, x2)

inst_35894:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfe00000000000; valaddr_reg:x3; val_offset:107682*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107682*0 + 3*566*FLEN/8, x4, x1, x2)

inst_35895:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cff00000000000; valaddr_reg:x3; val_offset:107685*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107685*0 + 3*567*FLEN/8, x4, x1, x2)

inst_35896:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cff80000000000; valaddr_reg:x3; val_offset:107688*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107688*0 + 3*568*FLEN/8, x4, x1, x2)

inst_35897:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffc0000000000; valaddr_reg:x3; val_offset:107691*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107691*0 + 3*569*FLEN/8, x4, x1, x2)

inst_35898:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffe0000000000; valaddr_reg:x3; val_offset:107694*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107694*0 + 3*570*FLEN/8, x4, x1, x2)

inst_35899:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfff0000000000; valaddr_reg:x3; val_offset:107697*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107697*0 + 3*571*FLEN/8, x4, x1, x2)

inst_35900:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfff8000000000; valaddr_reg:x3; val_offset:107700*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107700*0 + 3*572*FLEN/8, x4, x1, x2)

inst_35901:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffc000000000; valaddr_reg:x3; val_offset:107703*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107703*0 + 3*573*FLEN/8, x4, x1, x2)

inst_35902:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffe000000000; valaddr_reg:x3; val_offset:107706*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107706*0 + 3*574*FLEN/8, x4, x1, x2)

inst_35903:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffff000000000; valaddr_reg:x3; val_offset:107709*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107709*0 + 3*575*FLEN/8, x4, x1, x2)

inst_35904:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffff800000000; valaddr_reg:x3; val_offset:107712*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107712*0 + 3*576*FLEN/8, x4, x1, x2)

inst_35905:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffc00000000; valaddr_reg:x3; val_offset:107715*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107715*0 + 3*577*FLEN/8, x4, x1, x2)

inst_35906:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffe00000000; valaddr_reg:x3; val_offset:107718*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107718*0 + 3*578*FLEN/8, x4, x1, x2)

inst_35907:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffff00000000; valaddr_reg:x3; val_offset:107721*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107721*0 + 3*579*FLEN/8, x4, x1, x2)

inst_35908:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffff80000000; valaddr_reg:x3; val_offset:107724*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107724*0 + 3*580*FLEN/8, x4, x1, x2)

inst_35909:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffc0000000; valaddr_reg:x3; val_offset:107727*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107727*0 + 3*581*FLEN/8, x4, x1, x2)

inst_35910:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffe0000000; valaddr_reg:x3; val_offset:107730*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107730*0 + 3*582*FLEN/8, x4, x1, x2)

inst_35911:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffff0000000; valaddr_reg:x3; val_offset:107733*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107733*0 + 3*583*FLEN/8, x4, x1, x2)

inst_35912:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffff8000000; valaddr_reg:x3; val_offset:107736*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107736*0 + 3*584*FLEN/8, x4, x1, x2)

inst_35913:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffc000000; valaddr_reg:x3; val_offset:107739*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107739*0 + 3*585*FLEN/8, x4, x1, x2)

inst_35914:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffe000000; valaddr_reg:x3; val_offset:107742*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107742*0 + 3*586*FLEN/8, x4, x1, x2)

inst_35915:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffff000000; valaddr_reg:x3; val_offset:107745*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107745*0 + 3*587*FLEN/8, x4, x1, x2)

inst_35916:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffff800000; valaddr_reg:x3; val_offset:107748*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107748*0 + 3*588*FLEN/8, x4, x1, x2)

inst_35917:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffc00000; valaddr_reg:x3; val_offset:107751*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107751*0 + 3*589*FLEN/8, x4, x1, x2)

inst_35918:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffe00000; valaddr_reg:x3; val_offset:107754*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107754*0 + 3*590*FLEN/8, x4, x1, x2)

inst_35919:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffff00000; valaddr_reg:x3; val_offset:107757*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107757*0 + 3*591*FLEN/8, x4, x1, x2)

inst_35920:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffff80000; valaddr_reg:x3; val_offset:107760*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107760*0 + 3*592*FLEN/8, x4, x1, x2)

inst_35921:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffc0000; valaddr_reg:x3; val_offset:107763*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107763*0 + 3*593*FLEN/8, x4, x1, x2)

inst_35922:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffe0000; valaddr_reg:x3; val_offset:107766*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107766*0 + 3*594*FLEN/8, x4, x1, x2)

inst_35923:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffff0000; valaddr_reg:x3; val_offset:107769*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107769*0 + 3*595*FLEN/8, x4, x1, x2)

inst_35924:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffff8000; valaddr_reg:x3; val_offset:107772*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107772*0 + 3*596*FLEN/8, x4, x1, x2)

inst_35925:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffffc000; valaddr_reg:x3; val_offset:107775*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107775*0 + 3*597*FLEN/8, x4, x1, x2)

inst_35926:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffffe000; valaddr_reg:x3; val_offset:107778*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107778*0 + 3*598*FLEN/8, x4, x1, x2)

inst_35927:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffff000; valaddr_reg:x3; val_offset:107781*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107781*0 + 3*599*FLEN/8, x4, x1, x2)

inst_35928:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffff800; valaddr_reg:x3; val_offset:107784*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107784*0 + 3*600*FLEN/8, x4, x1, x2)

inst_35929:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffffc00; valaddr_reg:x3; val_offset:107787*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107787*0 + 3*601*FLEN/8, x4, x1, x2)

inst_35930:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffffe00; valaddr_reg:x3; val_offset:107790*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107790*0 + 3*602*FLEN/8, x4, x1, x2)

inst_35931:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffffff00; valaddr_reg:x3; val_offset:107793*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107793*0 + 3*603*FLEN/8, x4, x1, x2)

inst_35932:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffffff80; valaddr_reg:x3; val_offset:107796*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107796*0 + 3*604*FLEN/8, x4, x1, x2)

inst_35933:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffffffc0; valaddr_reg:x3; val_offset:107799*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107799*0 + 3*605*FLEN/8, x4, x1, x2)

inst_35934:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffffffe0; valaddr_reg:x3; val_offset:107802*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107802*0 + 3*606*FLEN/8, x4, x1, x2)

inst_35935:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffffff0; valaddr_reg:x3; val_offset:107805*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107805*0 + 3*607*FLEN/8, x4, x1, x2)

inst_35936:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffffff8; valaddr_reg:x3; val_offset:107808*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107808*0 + 3*608*FLEN/8, x4, x1, x2)

inst_35937:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffffffc; valaddr_reg:x3; val_offset:107811*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107811*0 + 3*609*FLEN/8, x4, x1, x2)

inst_35938:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cffffffffffffe; valaddr_reg:x3; val_offset:107814*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107814*0 + 3*610*FLEN/8, x4, x1, x2)

inst_35939:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b0632528095 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b0632528095; op2val:0x8000;
op3val:0x83cfffffffffffff; valaddr_reg:x3; val_offset:107817*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107817*0 + 3*611*FLEN/8, x4, x1, x2)

inst_35940:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:107820*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107820*0 + 3*612*FLEN/8, x4, x1, x2)

inst_35941:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:107823*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107823*0 + 3*613*FLEN/8, x4, x1, x2)

inst_35942:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:107826*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107826*0 + 3*614*FLEN/8, x4, x1, x2)

inst_35943:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:107829*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107829*0 + 3*615*FLEN/8, x4, x1, x2)

inst_35944:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:107832*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107832*0 + 3*616*FLEN/8, x4, x1, x2)

inst_35945:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:107835*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107835*0 + 3*617*FLEN/8, x4, x1, x2)

inst_35946:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:107838*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107838*0 + 3*618*FLEN/8, x4, x1, x2)

inst_35947:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:107841*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107841*0 + 3*619*FLEN/8, x4, x1, x2)

inst_35948:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:107844*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107844*0 + 3*620*FLEN/8, x4, x1, x2)

inst_35949:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:107847*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107847*0 + 3*621*FLEN/8, x4, x1, x2)

inst_35950:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:107850*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107850*0 + 3*622*FLEN/8, x4, x1, x2)

inst_35951:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:107853*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107853*0 + 3*623*FLEN/8, x4, x1, x2)

inst_35952:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:107856*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107856*0 + 3*624*FLEN/8, x4, x1, x2)

inst_35953:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:107859*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107859*0 + 3*625*FLEN/8, x4, x1, x2)

inst_35954:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:107862*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107862*0 + 3*626*FLEN/8, x4, x1, x2)

inst_35955:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:107865*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107865*0 + 3*627*FLEN/8, x4, x1, x2)

inst_35956:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:107868*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107868*0 + 3*628*FLEN/8, x4, x1, x2)

inst_35957:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:107871*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107871*0 + 3*629*FLEN/8, x4, x1, x2)

inst_35958:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:107874*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107874*0 + 3*630*FLEN/8, x4, x1, x2)

inst_35959:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:107877*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107877*0 + 3*631*FLEN/8, x4, x1, x2)

inst_35960:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:107880*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107880*0 + 3*632*FLEN/8, x4, x1, x2)

inst_35961:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:107883*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107883*0 + 3*633*FLEN/8, x4, x1, x2)

inst_35962:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000000000; valaddr_reg:x3; val_offset:107886*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107886*0 + 3*634*FLEN/8, x4, x1, x2)

inst_35963:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000000001; valaddr_reg:x3; val_offset:107889*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107889*0 + 3*635*FLEN/8, x4, x1, x2)

inst_35964:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000000003; valaddr_reg:x3; val_offset:107892*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107892*0 + 3*636*FLEN/8, x4, x1, x2)

inst_35965:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000000007; valaddr_reg:x3; val_offset:107895*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107895*0 + 3*637*FLEN/8, x4, x1, x2)

inst_35966:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000000000f; valaddr_reg:x3; val_offset:107898*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107898*0 + 3*638*FLEN/8, x4, x1, x2)

inst_35967:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000000001f; valaddr_reg:x3; val_offset:107901*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107901*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_35968:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000000003f; valaddr_reg:x3; val_offset:107904*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107904*0 + 3*640*FLEN/8, x4, x1, x2)

inst_35969:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000000007f; valaddr_reg:x3; val_offset:107907*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107907*0 + 3*641*FLEN/8, x4, x1, x2)

inst_35970:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000000000ff; valaddr_reg:x3; val_offset:107910*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107910*0 + 3*642*FLEN/8, x4, x1, x2)

inst_35971:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000000001ff; valaddr_reg:x3; val_offset:107913*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107913*0 + 3*643*FLEN/8, x4, x1, x2)

inst_35972:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000000003ff; valaddr_reg:x3; val_offset:107916*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107916*0 + 3*644*FLEN/8, x4, x1, x2)

inst_35973:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000000007ff; valaddr_reg:x3; val_offset:107919*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107919*0 + 3*645*FLEN/8, x4, x1, x2)

inst_35974:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000000fff; valaddr_reg:x3; val_offset:107922*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107922*0 + 3*646*FLEN/8, x4, x1, x2)

inst_35975:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000001fff; valaddr_reg:x3; val_offset:107925*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107925*0 + 3*647*FLEN/8, x4, x1, x2)

inst_35976:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000003fff; valaddr_reg:x3; val_offset:107928*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107928*0 + 3*648*FLEN/8, x4, x1, x2)

inst_35977:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000007fff; valaddr_reg:x3; val_offset:107931*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107931*0 + 3*649*FLEN/8, x4, x1, x2)

inst_35978:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000000ffff; valaddr_reg:x3; val_offset:107934*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107934*0 + 3*650*FLEN/8, x4, x1, x2)

inst_35979:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000001ffff; valaddr_reg:x3; val_offset:107937*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107937*0 + 3*651*FLEN/8, x4, x1, x2)

inst_35980:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000003ffff; valaddr_reg:x3; val_offset:107940*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107940*0 + 3*652*FLEN/8, x4, x1, x2)

inst_35981:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000007ffff; valaddr_reg:x3; val_offset:107943*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107943*0 + 3*653*FLEN/8, x4, x1, x2)

inst_35982:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000000fffff; valaddr_reg:x3; val_offset:107946*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107946*0 + 3*654*FLEN/8, x4, x1, x2)

inst_35983:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000001fffff; valaddr_reg:x3; val_offset:107949*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107949*0 + 3*655*FLEN/8, x4, x1, x2)

inst_35984:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000003fffff; valaddr_reg:x3; val_offset:107952*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107952*0 + 3*656*FLEN/8, x4, x1, x2)

inst_35985:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000007fffff; valaddr_reg:x3; val_offset:107955*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107955*0 + 3*657*FLEN/8, x4, x1, x2)

inst_35986:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000000ffffff; valaddr_reg:x3; val_offset:107958*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107958*0 + 3*658*FLEN/8, x4, x1, x2)

inst_35987:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000001ffffff; valaddr_reg:x3; val_offset:107961*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107961*0 + 3*659*FLEN/8, x4, x1, x2)

inst_35988:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000003ffffff; valaddr_reg:x3; val_offset:107964*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107964*0 + 3*660*FLEN/8, x4, x1, x2)

inst_35989:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000007ffffff; valaddr_reg:x3; val_offset:107967*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107967*0 + 3*661*FLEN/8, x4, x1, x2)

inst_35990:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000000fffffff; valaddr_reg:x3; val_offset:107970*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107970*0 + 3*662*FLEN/8, x4, x1, x2)

inst_35991:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000001fffffff; valaddr_reg:x3; val_offset:107973*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107973*0 + 3*663*FLEN/8, x4, x1, x2)

inst_35992:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000003fffffff; valaddr_reg:x3; val_offset:107976*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107976*0 + 3*664*FLEN/8, x4, x1, x2)

inst_35993:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000007fffffff; valaddr_reg:x3; val_offset:107979*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107979*0 + 3*665*FLEN/8, x4, x1, x2)

inst_35994:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00000ffffffff; valaddr_reg:x3; val_offset:107982*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107982*0 + 3*666*FLEN/8, x4, x1, x2)

inst_35995:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00001ffffffff; valaddr_reg:x3; val_offset:107985*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107985*0 + 3*667*FLEN/8, x4, x1, x2)

inst_35996:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00003ffffffff; valaddr_reg:x3; val_offset:107988*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107988*0 + 3*668*FLEN/8, x4, x1, x2)

inst_35997:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00007ffffffff; valaddr_reg:x3; val_offset:107991*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107991*0 + 3*669*FLEN/8, x4, x1, x2)

inst_35998:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0000fffffffff; valaddr_reg:x3; val_offset:107994*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107994*0 + 3*670*FLEN/8, x4, x1, x2)

inst_35999:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0001fffffffff; valaddr_reg:x3; val_offset:107997*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 107997*0 + 3*671*FLEN/8, x4, x1, x2)

inst_36000:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0003fffffffff; valaddr_reg:x3; val_offset:108000*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108000*0 + 3*672*FLEN/8, x4, x1, x2)

inst_36001:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0007fffffffff; valaddr_reg:x3; val_offset:108003*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108003*0 + 3*673*FLEN/8, x4, x1, x2)

inst_36002:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c000ffffffffff; valaddr_reg:x3; val_offset:108006*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108006*0 + 3*674*FLEN/8, x4, x1, x2)

inst_36003:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c001ffffffffff; valaddr_reg:x3; val_offset:108009*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108009*0 + 3*675*FLEN/8, x4, x1, x2)

inst_36004:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c003ffffffffff; valaddr_reg:x3; val_offset:108012*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108012*0 + 3*676*FLEN/8, x4, x1, x2)

inst_36005:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c007ffffffffff; valaddr_reg:x3; val_offset:108015*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108015*0 + 3*677*FLEN/8, x4, x1, x2)

inst_36006:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c00fffffffffff; valaddr_reg:x3; val_offset:108018*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108018*0 + 3*678*FLEN/8, x4, x1, x2)

inst_36007:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c01fffffffffff; valaddr_reg:x3; val_offset:108021*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108021*0 + 3*679*FLEN/8, x4, x1, x2)

inst_36008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c03fffffffffff; valaddr_reg:x3; val_offset:108024*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108024*0 + 3*680*FLEN/8, x4, x1, x2)

inst_36009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c07fffffffffff; valaddr_reg:x3; val_offset:108027*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108027*0 + 3*681*FLEN/8, x4, x1, x2)

inst_36010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c0ffffffffffff; valaddr_reg:x3; val_offset:108030*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108030*0 + 3*682*FLEN/8, x4, x1, x2)

inst_36011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c1ffffffffffff; valaddr_reg:x3; val_offset:108033*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108033*0 + 3*683*FLEN/8, x4, x1, x2)

inst_36012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c3ffffffffffff; valaddr_reg:x3; val_offset:108036*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108036*0 + 3*684*FLEN/8, x4, x1, x2)

inst_36013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c7ffffffffffff; valaddr_reg:x3; val_offset:108039*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108039*0 + 3*685*FLEN/8, x4, x1, x2)

inst_36014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81c8000000000000; valaddr_reg:x3; val_offset:108042*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108042*0 + 3*686*FLEN/8, x4, x1, x2)

inst_36015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cc000000000000; valaddr_reg:x3; val_offset:108045*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108045*0 + 3*687*FLEN/8, x4, x1, x2)

inst_36016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81ce000000000000; valaddr_reg:x3; val_offset:108048*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108048*0 + 3*688*FLEN/8, x4, x1, x2)

inst_36017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cf000000000000; valaddr_reg:x3; val_offset:108051*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108051*0 + 3*689*FLEN/8, x4, x1, x2)

inst_36018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cf800000000000; valaddr_reg:x3; val_offset:108054*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108054*0 + 3*690*FLEN/8, x4, x1, x2)

inst_36019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfc00000000000; valaddr_reg:x3; val_offset:108057*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108057*0 + 3*691*FLEN/8, x4, x1, x2)

inst_36020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfe00000000000; valaddr_reg:x3; val_offset:108060*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108060*0 + 3*692*FLEN/8, x4, x1, x2)

inst_36021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cff00000000000; valaddr_reg:x3; val_offset:108063*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108063*0 + 3*693*FLEN/8, x4, x1, x2)

inst_36022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cff80000000000; valaddr_reg:x3; val_offset:108066*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108066*0 + 3*694*FLEN/8, x4, x1, x2)

inst_36023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffc0000000000; valaddr_reg:x3; val_offset:108069*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108069*0 + 3*695*FLEN/8, x4, x1, x2)

inst_36024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffe0000000000; valaddr_reg:x3; val_offset:108072*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108072*0 + 3*696*FLEN/8, x4, x1, x2)

inst_36025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfff0000000000; valaddr_reg:x3; val_offset:108075*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108075*0 + 3*697*FLEN/8, x4, x1, x2)

inst_36026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfff8000000000; valaddr_reg:x3; val_offset:108078*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108078*0 + 3*698*FLEN/8, x4, x1, x2)

inst_36027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffc000000000; valaddr_reg:x3; val_offset:108081*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108081*0 + 3*699*FLEN/8, x4, x1, x2)

inst_36028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffe000000000; valaddr_reg:x3; val_offset:108084*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108084*0 + 3*700*FLEN/8, x4, x1, x2)

inst_36029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffff000000000; valaddr_reg:x3; val_offset:108087*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108087*0 + 3*701*FLEN/8, x4, x1, x2)

inst_36030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffff800000000; valaddr_reg:x3; val_offset:108090*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108090*0 + 3*702*FLEN/8, x4, x1, x2)

inst_36031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffc00000000; valaddr_reg:x3; val_offset:108093*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108093*0 + 3*703*FLEN/8, x4, x1, x2)

inst_36032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffe00000000; valaddr_reg:x3; val_offset:108096*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108096*0 + 3*704*FLEN/8, x4, x1, x2)

inst_36033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffff00000000; valaddr_reg:x3; val_offset:108099*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108099*0 + 3*705*FLEN/8, x4, x1, x2)

inst_36034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffff80000000; valaddr_reg:x3; val_offset:108102*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108102*0 + 3*706*FLEN/8, x4, x1, x2)

inst_36035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffc0000000; valaddr_reg:x3; val_offset:108105*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108105*0 + 3*707*FLEN/8, x4, x1, x2)

inst_36036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffe0000000; valaddr_reg:x3; val_offset:108108*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108108*0 + 3*708*FLEN/8, x4, x1, x2)

inst_36037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffff0000000; valaddr_reg:x3; val_offset:108111*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108111*0 + 3*709*FLEN/8, x4, x1, x2)

inst_36038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffff8000000; valaddr_reg:x3; val_offset:108114*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108114*0 + 3*710*FLEN/8, x4, x1, x2)

inst_36039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffc000000; valaddr_reg:x3; val_offset:108117*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108117*0 + 3*711*FLEN/8, x4, x1, x2)

inst_36040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffe000000; valaddr_reg:x3; val_offset:108120*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108120*0 + 3*712*FLEN/8, x4, x1, x2)

inst_36041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffff000000; valaddr_reg:x3; val_offset:108123*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108123*0 + 3*713*FLEN/8, x4, x1, x2)

inst_36042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffff800000; valaddr_reg:x3; val_offset:108126*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108126*0 + 3*714*FLEN/8, x4, x1, x2)

inst_36043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffc00000; valaddr_reg:x3; val_offset:108129*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108129*0 + 3*715*FLEN/8, x4, x1, x2)

inst_36044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffe00000; valaddr_reg:x3; val_offset:108132*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108132*0 + 3*716*FLEN/8, x4, x1, x2)

inst_36045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffff00000; valaddr_reg:x3; val_offset:108135*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108135*0 + 3*717*FLEN/8, x4, x1, x2)

inst_36046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffff80000; valaddr_reg:x3; val_offset:108138*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108138*0 + 3*718*FLEN/8, x4, x1, x2)

inst_36047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffc0000; valaddr_reg:x3; val_offset:108141*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108141*0 + 3*719*FLEN/8, x4, x1, x2)

inst_36048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffe0000; valaddr_reg:x3; val_offset:108144*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108144*0 + 3*720*FLEN/8, x4, x1, x2)

inst_36049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffff0000; valaddr_reg:x3; val_offset:108147*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108147*0 + 3*721*FLEN/8, x4, x1, x2)

inst_36050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffff8000; valaddr_reg:x3; val_offset:108150*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108150*0 + 3*722*FLEN/8, x4, x1, x2)

inst_36051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffffc000; valaddr_reg:x3; val_offset:108153*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108153*0 + 3*723*FLEN/8, x4, x1, x2)

inst_36052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffffe000; valaddr_reg:x3; val_offset:108156*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108156*0 + 3*724*FLEN/8, x4, x1, x2)

inst_36053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffff000; valaddr_reg:x3; val_offset:108159*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108159*0 + 3*725*FLEN/8, x4, x1, x2)

inst_36054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffff800; valaddr_reg:x3; val_offset:108162*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108162*0 + 3*726*FLEN/8, x4, x1, x2)

inst_36055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffffc00; valaddr_reg:x3; val_offset:108165*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108165*0 + 3*727*FLEN/8, x4, x1, x2)

inst_36056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffffe00; valaddr_reg:x3; val_offset:108168*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108168*0 + 3*728*FLEN/8, x4, x1, x2)

inst_36057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffffff00; valaddr_reg:x3; val_offset:108171*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108171*0 + 3*729*FLEN/8, x4, x1, x2)

inst_36058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffffff80; valaddr_reg:x3; val_offset:108174*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108174*0 + 3*730*FLEN/8, x4, x1, x2)

inst_36059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffffffc0; valaddr_reg:x3; val_offset:108177*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108177*0 + 3*731*FLEN/8, x4, x1, x2)

inst_36060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffffffe0; valaddr_reg:x3; val_offset:108180*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108180*0 + 3*732*FLEN/8, x4, x1, x2)

inst_36061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffffff0; valaddr_reg:x3; val_offset:108183*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108183*0 + 3*733*FLEN/8, x4, x1, x2)

inst_36062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffffff8; valaddr_reg:x3; val_offset:108186*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108186*0 + 3*734*FLEN/8, x4, x1, x2)

inst_36063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffffffc; valaddr_reg:x3; val_offset:108189*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108189*0 + 3*735*FLEN/8, x4, x1, x2)

inst_36064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cffffffffffffe; valaddr_reg:x3; val_offset:108192*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108192*0 + 3*736*FLEN/8, x4, x1, x2)

inst_36065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ab1b902cc91 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ab1b902cc91; op2val:0x8000;
op3val:0x81cfffffffffffff; valaddr_reg:x3; val_offset:108195*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108195*0 + 3*737*FLEN/8, x4, x1, x2)

inst_36066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:108198*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108198*0 + 3*738*FLEN/8, x4, x1, x2)

inst_36067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:108201*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108201*0 + 3*739*FLEN/8, x4, x1, x2)

inst_36068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:108204*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108204*0 + 3*740*FLEN/8, x4, x1, x2)

inst_36069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:108207*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108207*0 + 3*741*FLEN/8, x4, x1, x2)

inst_36070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:108210*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108210*0 + 3*742*FLEN/8, x4, x1, x2)

inst_36071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:108213*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108213*0 + 3*743*FLEN/8, x4, x1, x2)

inst_36072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:108216*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108216*0 + 3*744*FLEN/8, x4, x1, x2)

inst_36073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:108219*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108219*0 + 3*745*FLEN/8, x4, x1, x2)

inst_36074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:108222*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108222*0 + 3*746*FLEN/8, x4, x1, x2)

inst_36075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:108225*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108225*0 + 3*747*FLEN/8, x4, x1, x2)

inst_36076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:108228*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108228*0 + 3*748*FLEN/8, x4, x1, x2)

inst_36077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:108231*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108231*0 + 3*749*FLEN/8, x4, x1, x2)

inst_36078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:108234*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108234*0 + 3*750*FLEN/8, x4, x1, x2)

inst_36079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:108237*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108237*0 + 3*751*FLEN/8, x4, x1, x2)

inst_36080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:108240*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108240*0 + 3*752*FLEN/8, x4, x1, x2)

inst_36081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:108243*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108243*0 + 3*753*FLEN/8, x4, x1, x2)

inst_36082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:108246*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108246*0 + 3*754*FLEN/8, x4, x1, x2)

inst_36083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:108249*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108249*0 + 3*755*FLEN/8, x4, x1, x2)

inst_36084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:108252*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108252*0 + 3*756*FLEN/8, x4, x1, x2)

inst_36085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:108255*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108255*0 + 3*757*FLEN/8, x4, x1, x2)

inst_36086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:108258*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108258*0 + 3*758*FLEN/8, x4, x1, x2)

inst_36087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:108261*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108261*0 + 3*759*FLEN/8, x4, x1, x2)

inst_36088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c0000000000000; valaddr_reg:x3; val_offset:108264*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108264*0 + 3*760*FLEN/8, x4, x1, x2)

inst_36089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c0000000000001; valaddr_reg:x3; val_offset:108267*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108267*0 + 3*761*FLEN/8, x4, x1, x2)

inst_36090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c0000000000003; valaddr_reg:x3; val_offset:108270*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108270*0 + 3*762*FLEN/8, x4, x1, x2)

inst_36091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c0000000000007; valaddr_reg:x3; val_offset:108273*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108273*0 + 3*763*FLEN/8, x4, x1, x2)

inst_36092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c000000000000f; valaddr_reg:x3; val_offset:108276*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108276*0 + 3*764*FLEN/8, x4, x1, x2)

inst_36093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c000000000001f; valaddr_reg:x3; val_offset:108279*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108279*0 + 3*765*FLEN/8, x4, x1, x2)

inst_36094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c000000000003f; valaddr_reg:x3; val_offset:108282*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108282*0 + 3*766*FLEN/8, x4, x1, x2)

inst_36095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x61ff4a1d8d08d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f961ff4a1d8d08d; op2val:0x0;
op3val:0x1c000000000007f; valaddr_reg:x3; val_offset:108285*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108285*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068324458495,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068324720639,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068325244927,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068326293503,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068328390655,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068332584959,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068340973567,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068357750783,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068391305215,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068458414079,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068592631807,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432068861067263,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432069397938175,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432070471679999,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432072619163647,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432076914130943,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432085504065535,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432102683934719,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432137043673087,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432205763149823,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432343202103295,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677432618080010239,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677433167835824127,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677434267347451903,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677436466370707455,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677440864417218559,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677449660510240767,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677467252696285183,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677502437068374015,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677572805812551679,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677713543300907007,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13677995018277617663,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13678557968231038975,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13679683868137881599,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13679683868137881600,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13680809768044724224,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681372717998145536,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681654192974856192,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681794930463211520,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681865299207389184,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681900483579478016,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681918075765522432,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681926871858544640,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681931269905055744,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681933468928311296,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681934568439939072,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935118195752960,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935393073659904,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935530512613376,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935599232090112,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935633591828480,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935650771697664,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935659361632256,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935663656599552,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935665804083200,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935666877825024,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667414695936,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667683131392,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667817349120,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667884457984,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667918012416,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667934789632,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667943178240,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667947372544,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667949469696,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667950518272,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951042560,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951304704,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951435776,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951501312,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951534080,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951550464,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951558656,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951562752,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951564800,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951565824,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566336,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566592,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566720,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566784,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566816,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566832,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566840,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566844,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566846,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13681935667951566847,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6887601151561122973,64,FLEN)
NAN_BOXED(11517849614102376305,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568064,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568065,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568067,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568071,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568079,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568095,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568127,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568191,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568319,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332568575,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332569087,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332570111,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332572159,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332576255,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332584447,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332600831,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332633599,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332699135,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033332830207,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033333092351,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033333616639,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033334665215,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033336762367,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033340956671,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033349345279,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033366122495,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033399676927,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033466785791,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033601003519,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542033869438975,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542034406309887,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542035480051711,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542037627535359,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542041922502655,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542050512437247,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542067692306431,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542102052044799,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542170771521535,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542308210475007,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431542583088381951,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431543132844195839,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431544232355823615,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431546431379079167,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431550829425590271,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431559625518612479,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431577217704656895,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431612402076745727,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431682770820923391,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4431823508309278719,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4432104983285989375,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4432667933239410687,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4433793833146253311,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4433793833146253312,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4434919733053095936,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4435482683006517248,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4435764157983227904,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4435904895471583232,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4435975264215760896,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436010448587849728,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436028040773894144,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436036836866916352,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436041234913427456,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436043433936683008,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436044533448310784,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045083204124672,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045358082031616,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045495520985088,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045564240461824,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045598600200192,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045615780069376,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045624370003968,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045628664971264,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045630812454912,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045631886196736,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632423067648,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632691503104,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632825720832,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632892829696,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632926384128,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632943161344,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632951549952,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632955744256,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632957841408,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632958889984,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959414272,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959676416,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959807488,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959873024,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959905792,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959922176,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959930368,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959934464,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959936512,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959937536,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938048,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938304,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938432,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938496,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938528,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938544,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938552,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938556,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938558,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4436045632959938559,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6887604438039062389,64,FLEN)
NAN_BOXED(2325999194865380238,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631680,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631681,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631683,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631687,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631695,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631711,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631743,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631807,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631935,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930632191,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930632703,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930633727,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930635775,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930639871,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930648063,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930664447,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930697215,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930762751,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930893823,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224931155967,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224931680255,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224932728831,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224934825983,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224939020287,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224947408895,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224964186111,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224997740543,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487225064849407,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487225199067135,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487225467502591,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487226004373503,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487227078115327,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487229225598975,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487233520566271,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487242110500863,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487259290370047,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487293650108415,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487362369585151,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487499808538623,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487774686445567,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367488324442259455,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367489423953887231,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367491622977142783,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367496021023653887,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367504817116676095,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367522409302720511,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367557593674809343,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367627962418987007,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367768699907342335,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9368050174884052991,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9368613124837474303,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9369739024744316927,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9369739024744316928,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9370864924651159552,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371427874604580864,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371709349581291520,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371850087069646848,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371920455813824512,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371955640185913344,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371973232371957760,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371982028464979968,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371986426511491072,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371988625534746624,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371989725046374400,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990274802188288,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990549680095232,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990687119048704,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990755838525440,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990790198263808,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990807378132992,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990815968067584,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990820263034880,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990822410518528,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990823484260352,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824021131264,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824289566720,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824423784448,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824490893312,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824524447744,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824541224960,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824549613568,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824553807872,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824555905024,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824556953600,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557477888,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557740032,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557871104,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557936640,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557969408,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557985792,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557993984,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824557998080,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558000128,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558001152,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558001664,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558001920,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002048,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002112,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002144,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002160,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002168,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002172,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002174,64,FLEN)
NAN_BOXED(6887669138275019701,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002175,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705408,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705409,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705411,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705415,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705423,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705439,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705471,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705535,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705663,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378705919,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378706431,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378707455,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378709503,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378713599,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378721791,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378738175,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378770943,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378836479,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465378967551,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465379229695,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465379753983,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465380802559,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465382899711,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465387094015,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465395482623,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465412259839,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465445814271,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465512923135,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465647140863,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232465915576319,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232466452447231,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232467526189055,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232469673672703,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232473968639999,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232482558574591,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232499738443775,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232534098182143,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232602817658879,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044232740256612351,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044233015134519295,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044233564890333183,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044234664401960959,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044236863425216511,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044241261471727615,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044250057564749823,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044267649750794239,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044302834122883071,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044373202867060735,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044513940355416063,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4044795415332126719,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4045358365285548031,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4046484265192390655,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4046484265192390656,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4047610165099233280,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048173115052654592,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048454590029365248,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048595327517720576,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048665696261898240,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048700880633987072,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048718472820031488,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048727268913053696,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048731666959564800,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048733865982820352,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048734965494448128,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048735515250262016,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048735790128168960,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048735927567122432,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048735996286599168,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736030646337536,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736047826206720,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736056416141312,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736060711108608,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736062858592256,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736063932334080,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736064469204992,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736064737640448,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736064871858176,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736064938967040,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736064972521472,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736064989298688,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736064997687296,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065001881600,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065003978752,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065005027328,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065005551616,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065005813760,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065005944832,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006010368,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006043136,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006059520,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006067712,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006071808,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006073856,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006074880,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075392,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075648,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075776,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075840,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075872,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075888,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075896,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075900,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075902,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4048736065006075903,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6887685338724960923,64,FLEN)
NAN_BOXED(2325912273773819603,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005568,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005569,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005571,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005575,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005583,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005599,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005631,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005695,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005823,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497006079,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497006591,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497007615,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497009663,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497013759,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497021951,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497038335,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497071103,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497136639,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497267711,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497529855,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014498054143,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014499102719,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014501199871,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014505394175,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014513782783,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014530559999,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014564114431,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014631223295,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014765441023,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588015033876479,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588015570747391,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588016644489215,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588018791972863,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588023086940159,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588031676874751,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588048856743935,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588083216482303,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588151935959039,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588289374912511,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588564252819455,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493589114008633343,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493590213520261119,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493592412543516671,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493596810590027775,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493605606683049983,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493623198869094399,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493658383241183231,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493728751985360895,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493869489473716223,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9494150964450426879,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9494713914403848191,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9495839814310690815,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9495839814310690816,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9496965714217533440,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497528664170954752,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497810139147665408,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497950876636020736,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498021245380198400,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498056429752287232,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498074021938331648,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498082818031353856,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498087216077864960,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498089415101120512,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498090514612748288,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091064368562176,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091339246469120,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091476685422592,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091545404899328,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091579764637696,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091596944506880,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091605534441472,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091609829408768,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091611976892416,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613050634240,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613587505152,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613855940608,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613990158336,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614057267200,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614090821632,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614107598848,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614115987456,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614120181760,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614122278912,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614123327488,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614123851776,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124113920,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124244992,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124310528,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124343296,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124359680,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124367872,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124371968,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124374016,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375040,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375552,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375808,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375936,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376000,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376032,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376048,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376056,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376060,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376062,64,FLEN)
NAN_BOXED(6887704801351729301,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376063,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149696,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149697,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149699,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149703,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149711,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149727,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149759,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149823,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149951,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421150207,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421150719,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421151743,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421153791,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421157887,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421166079,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421182463,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421215231,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421280767,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421411839,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421673983,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826422198271,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826423246847,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826425343999,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826429538303,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826437926911,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826454704127,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826488258559,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826555367423,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826689585151,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826958020607,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472827494891519,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472828568633343,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472830716116991,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472835011084287,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472843601018879,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472860780888063,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472895140626431,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472963860103167,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349473101299056639,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349473376176963583,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349473925932777471,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349475025444405247,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349477224467660799,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349481622514171903,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349490418607194111,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349508010793238527,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349543195165327359,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349613563909505023,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349754301397860351,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9350035776374571007,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9350598726327992319,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9351724626234834943,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9351724626234834944,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9352850526141677568,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353413476095098880,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353694951071809536,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353835688560164864,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353906057304342528,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353941241676431360,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353958833862475776,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353967629955497984,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353972028002009088,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353974227025264640,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353975326536892416,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353975876292706304,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976151170613248,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976288609566720,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976357329043456,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976391688781824,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976408868651008,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976417458585600,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976421753552896,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976423901036544,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976424974778368,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976425511649280,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976425780084736,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976425914302464,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976425981411328,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426014965760,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426031742976,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426040131584,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426044325888,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426046423040,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426047471616,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426047995904,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048258048,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048389120,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048454656,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048487424,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048503808,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048512000,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048516096,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048518144,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048519168,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048519680,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048519936,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520064,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520128,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520160,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520176,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520184,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520188,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520190,64,FLEN)
NAN_BOXED(6887722030725254289,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9353976426048520191,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566373888,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566373889,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566373891,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566373895,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566373903,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566373919,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566373951,64,FLEN)
NAN_BOXED(6887727815657574541,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789566374015,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
