
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28416:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000000000003; valaddr_reg:x3; val_offset:85248*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85248*0 + 3*0*FLEN/8, x4, x1, x2)

inst_28417:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000000000007; valaddr_reg:x3; val_offset:85251*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85251*0 + 3*1*FLEN/8, x4, x1, x2)

inst_28418:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000000000f; valaddr_reg:x3; val_offset:85254*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85254*0 + 3*2*FLEN/8, x4, x1, x2)

inst_28419:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000000001f; valaddr_reg:x3; val_offset:85257*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85257*0 + 3*3*FLEN/8, x4, x1, x2)

inst_28420:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000000003f; valaddr_reg:x3; val_offset:85260*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85260*0 + 3*4*FLEN/8, x4, x1, x2)

inst_28421:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000000007f; valaddr_reg:x3; val_offset:85263*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85263*0 + 3*5*FLEN/8, x4, x1, x2)

inst_28422:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000000000ff; valaddr_reg:x3; val_offset:85266*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85266*0 + 3*6*FLEN/8, x4, x1, x2)

inst_28423:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000000001ff; valaddr_reg:x3; val_offset:85269*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85269*0 + 3*7*FLEN/8, x4, x1, x2)

inst_28424:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000000003ff; valaddr_reg:x3; val_offset:85272*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85272*0 + 3*8*FLEN/8, x4, x1, x2)

inst_28425:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000000007ff; valaddr_reg:x3; val_offset:85275*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85275*0 + 3*9*FLEN/8, x4, x1, x2)

inst_28426:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000000000fff; valaddr_reg:x3; val_offset:85278*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85278*0 + 3*10*FLEN/8, x4, x1, x2)

inst_28427:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000000001fff; valaddr_reg:x3; val_offset:85281*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85281*0 + 3*11*FLEN/8, x4, x1, x2)

inst_28428:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000000003fff; valaddr_reg:x3; val_offset:85284*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85284*0 + 3*12*FLEN/8, x4, x1, x2)

inst_28429:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000000007fff; valaddr_reg:x3; val_offset:85287*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85287*0 + 3*13*FLEN/8, x4, x1, x2)

inst_28430:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000000ffff; valaddr_reg:x3; val_offset:85290*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85290*0 + 3*14*FLEN/8, x4, x1, x2)

inst_28431:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000001ffff; valaddr_reg:x3; val_offset:85293*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85293*0 + 3*15*FLEN/8, x4, x1, x2)

inst_28432:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000003ffff; valaddr_reg:x3; val_offset:85296*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85296*0 + 3*16*FLEN/8, x4, x1, x2)

inst_28433:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000007ffff; valaddr_reg:x3; val_offset:85299*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85299*0 + 3*17*FLEN/8, x4, x1, x2)

inst_28434:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000000fffff; valaddr_reg:x3; val_offset:85302*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85302*0 + 3*18*FLEN/8, x4, x1, x2)

inst_28435:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000001fffff; valaddr_reg:x3; val_offset:85305*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85305*0 + 3*19*FLEN/8, x4, x1, x2)

inst_28436:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000003fffff; valaddr_reg:x3; val_offset:85308*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85308*0 + 3*20*FLEN/8, x4, x1, x2)

inst_28437:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000007fffff; valaddr_reg:x3; val_offset:85311*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85311*0 + 3*21*FLEN/8, x4, x1, x2)

inst_28438:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000000ffffff; valaddr_reg:x3; val_offset:85314*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85314*0 + 3*22*FLEN/8, x4, x1, x2)

inst_28439:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000001ffffff; valaddr_reg:x3; val_offset:85317*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85317*0 + 3*23*FLEN/8, x4, x1, x2)

inst_28440:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000003ffffff; valaddr_reg:x3; val_offset:85320*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85320*0 + 3*24*FLEN/8, x4, x1, x2)

inst_28441:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000007ffffff; valaddr_reg:x3; val_offset:85323*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85323*0 + 3*25*FLEN/8, x4, x1, x2)

inst_28442:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000000fffffff; valaddr_reg:x3; val_offset:85326*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85326*0 + 3*26*FLEN/8, x4, x1, x2)

inst_28443:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000001fffffff; valaddr_reg:x3; val_offset:85329*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85329*0 + 3*27*FLEN/8, x4, x1, x2)

inst_28444:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000003fffffff; valaddr_reg:x3; val_offset:85332*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85332*0 + 3*28*FLEN/8, x4, x1, x2)

inst_28445:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000007fffffff; valaddr_reg:x3; val_offset:85335*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85335*0 + 3*29*FLEN/8, x4, x1, x2)

inst_28446:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00000ffffffff; valaddr_reg:x3; val_offset:85338*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85338*0 + 3*30*FLEN/8, x4, x1, x2)

inst_28447:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00001ffffffff; valaddr_reg:x3; val_offset:85341*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85341*0 + 3*31*FLEN/8, x4, x1, x2)

inst_28448:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00003ffffffff; valaddr_reg:x3; val_offset:85344*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85344*0 + 3*32*FLEN/8, x4, x1, x2)

inst_28449:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00007ffffffff; valaddr_reg:x3; val_offset:85347*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85347*0 + 3*33*FLEN/8, x4, x1, x2)

inst_28450:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0000fffffffff; valaddr_reg:x3; val_offset:85350*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85350*0 + 3*34*FLEN/8, x4, x1, x2)

inst_28451:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0001fffffffff; valaddr_reg:x3; val_offset:85353*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85353*0 + 3*35*FLEN/8, x4, x1, x2)

inst_28452:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0003fffffffff; valaddr_reg:x3; val_offset:85356*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85356*0 + 3*36*FLEN/8, x4, x1, x2)

inst_28453:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0007fffffffff; valaddr_reg:x3; val_offset:85359*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85359*0 + 3*37*FLEN/8, x4, x1, x2)

inst_28454:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe000ffffffffff; valaddr_reg:x3; val_offset:85362*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85362*0 + 3*38*FLEN/8, x4, x1, x2)

inst_28455:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe001ffffffffff; valaddr_reg:x3; val_offset:85365*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85365*0 + 3*39*FLEN/8, x4, x1, x2)

inst_28456:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe003ffffffffff; valaddr_reg:x3; val_offset:85368*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85368*0 + 3*40*FLEN/8, x4, x1, x2)

inst_28457:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe007ffffffffff; valaddr_reg:x3; val_offset:85371*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85371*0 + 3*41*FLEN/8, x4, x1, x2)

inst_28458:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe00fffffffffff; valaddr_reg:x3; val_offset:85374*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85374*0 + 3*42*FLEN/8, x4, x1, x2)

inst_28459:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe01fffffffffff; valaddr_reg:x3; val_offset:85377*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85377*0 + 3*43*FLEN/8, x4, x1, x2)

inst_28460:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe03fffffffffff; valaddr_reg:x3; val_offset:85380*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85380*0 + 3*44*FLEN/8, x4, x1, x2)

inst_28461:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe07fffffffffff; valaddr_reg:x3; val_offset:85383*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85383*0 + 3*45*FLEN/8, x4, x1, x2)

inst_28462:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe0ffffffffffff; valaddr_reg:x3; val_offset:85386*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85386*0 + 3*46*FLEN/8, x4, x1, x2)

inst_28463:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe1ffffffffffff; valaddr_reg:x3; val_offset:85389*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85389*0 + 3*47*FLEN/8, x4, x1, x2)

inst_28464:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe3ffffffffffff; valaddr_reg:x3; val_offset:85392*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85392*0 + 3*48*FLEN/8, x4, x1, x2)

inst_28465:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe7ffffffffffff; valaddr_reg:x3; val_offset:85395*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85395*0 + 3*49*FLEN/8, x4, x1, x2)

inst_28466:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xe8000000000000; valaddr_reg:x3; val_offset:85398*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85398*0 + 3*50*FLEN/8, x4, x1, x2)

inst_28467:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xec000000000000; valaddr_reg:x3; val_offset:85401*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85401*0 + 3*51*FLEN/8, x4, x1, x2)

inst_28468:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xee000000000000; valaddr_reg:x3; val_offset:85404*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85404*0 + 3*52*FLEN/8, x4, x1, x2)

inst_28469:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xef000000000000; valaddr_reg:x3; val_offset:85407*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85407*0 + 3*53*FLEN/8, x4, x1, x2)

inst_28470:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xef800000000000; valaddr_reg:x3; val_offset:85410*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85410*0 + 3*54*FLEN/8, x4, x1, x2)

inst_28471:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefc00000000000; valaddr_reg:x3; val_offset:85413*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85413*0 + 3*55*FLEN/8, x4, x1, x2)

inst_28472:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefe00000000000; valaddr_reg:x3; val_offset:85416*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85416*0 + 3*56*FLEN/8, x4, x1, x2)

inst_28473:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeff00000000000; valaddr_reg:x3; val_offset:85419*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85419*0 + 3*57*FLEN/8, x4, x1, x2)

inst_28474:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeff80000000000; valaddr_reg:x3; val_offset:85422*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85422*0 + 3*58*FLEN/8, x4, x1, x2)

inst_28475:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffc0000000000; valaddr_reg:x3; val_offset:85425*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85425*0 + 3*59*FLEN/8, x4, x1, x2)

inst_28476:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffe0000000000; valaddr_reg:x3; val_offset:85428*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85428*0 + 3*60*FLEN/8, x4, x1, x2)

inst_28477:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefff0000000000; valaddr_reg:x3; val_offset:85431*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85431*0 + 3*61*FLEN/8, x4, x1, x2)

inst_28478:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefff8000000000; valaddr_reg:x3; val_offset:85434*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85434*0 + 3*62*FLEN/8, x4, x1, x2)

inst_28479:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffc000000000; valaddr_reg:x3; val_offset:85437*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85437*0 + 3*63*FLEN/8, x4, x1, x2)

inst_28480:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffe000000000; valaddr_reg:x3; val_offset:85440*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85440*0 + 3*64*FLEN/8, x4, x1, x2)

inst_28481:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffff000000000; valaddr_reg:x3; val_offset:85443*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85443*0 + 3*65*FLEN/8, x4, x1, x2)

inst_28482:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffff800000000; valaddr_reg:x3; val_offset:85446*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85446*0 + 3*66*FLEN/8, x4, x1, x2)

inst_28483:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffc00000000; valaddr_reg:x3; val_offset:85449*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85449*0 + 3*67*FLEN/8, x4, x1, x2)

inst_28484:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffe00000000; valaddr_reg:x3; val_offset:85452*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85452*0 + 3*68*FLEN/8, x4, x1, x2)

inst_28485:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffff00000000; valaddr_reg:x3; val_offset:85455*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85455*0 + 3*69*FLEN/8, x4, x1, x2)

inst_28486:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffff80000000; valaddr_reg:x3; val_offset:85458*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85458*0 + 3*70*FLEN/8, x4, x1, x2)

inst_28487:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffc0000000; valaddr_reg:x3; val_offset:85461*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85461*0 + 3*71*FLEN/8, x4, x1, x2)

inst_28488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffe0000000; valaddr_reg:x3; val_offset:85464*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85464*0 + 3*72*FLEN/8, x4, x1, x2)

inst_28489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffff0000000; valaddr_reg:x3; val_offset:85467*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85467*0 + 3*73*FLEN/8, x4, x1, x2)

inst_28490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffff8000000; valaddr_reg:x3; val_offset:85470*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85470*0 + 3*74*FLEN/8, x4, x1, x2)

inst_28491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffc000000; valaddr_reg:x3; val_offset:85473*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85473*0 + 3*75*FLEN/8, x4, x1, x2)

inst_28492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffe000000; valaddr_reg:x3; val_offset:85476*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85476*0 + 3*76*FLEN/8, x4, x1, x2)

inst_28493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffff000000; valaddr_reg:x3; val_offset:85479*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85479*0 + 3*77*FLEN/8, x4, x1, x2)

inst_28494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffff800000; valaddr_reg:x3; val_offset:85482*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85482*0 + 3*78*FLEN/8, x4, x1, x2)

inst_28495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffc00000; valaddr_reg:x3; val_offset:85485*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85485*0 + 3*79*FLEN/8, x4, x1, x2)

inst_28496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffe00000; valaddr_reg:x3; val_offset:85488*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85488*0 + 3*80*FLEN/8, x4, x1, x2)

inst_28497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffff00000; valaddr_reg:x3; val_offset:85491*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85491*0 + 3*81*FLEN/8, x4, x1, x2)

inst_28498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffff80000; valaddr_reg:x3; val_offset:85494*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85494*0 + 3*82*FLEN/8, x4, x1, x2)

inst_28499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffc0000; valaddr_reg:x3; val_offset:85497*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85497*0 + 3*83*FLEN/8, x4, x1, x2)

inst_28500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffe0000; valaddr_reg:x3; val_offset:85500*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85500*0 + 3*84*FLEN/8, x4, x1, x2)

inst_28501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffff0000; valaddr_reg:x3; val_offset:85503*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85503*0 + 3*85*FLEN/8, x4, x1, x2)

inst_28502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffff8000; valaddr_reg:x3; val_offset:85506*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85506*0 + 3*86*FLEN/8, x4, x1, x2)

inst_28503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffffc000; valaddr_reg:x3; val_offset:85509*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85509*0 + 3*87*FLEN/8, x4, x1, x2)

inst_28504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffffe000; valaddr_reg:x3; val_offset:85512*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85512*0 + 3*88*FLEN/8, x4, x1, x2)

inst_28505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffff000; valaddr_reg:x3; val_offset:85515*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85515*0 + 3*89*FLEN/8, x4, x1, x2)

inst_28506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffff800; valaddr_reg:x3; val_offset:85518*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85518*0 + 3*90*FLEN/8, x4, x1, x2)

inst_28507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffffc00; valaddr_reg:x3; val_offset:85521*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85521*0 + 3*91*FLEN/8, x4, x1, x2)

inst_28508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffffe00; valaddr_reg:x3; val_offset:85524*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85524*0 + 3*92*FLEN/8, x4, x1, x2)

inst_28509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffffff00; valaddr_reg:x3; val_offset:85527*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85527*0 + 3*93*FLEN/8, x4, x1, x2)

inst_28510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffffff80; valaddr_reg:x3; val_offset:85530*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85530*0 + 3*94*FLEN/8, x4, x1, x2)

inst_28511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffffffc0; valaddr_reg:x3; val_offset:85533*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85533*0 + 3*95*FLEN/8, x4, x1, x2)

inst_28512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffffffe0; valaddr_reg:x3; val_offset:85536*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85536*0 + 3*96*FLEN/8, x4, x1, x2)

inst_28513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffffff0; valaddr_reg:x3; val_offset:85539*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85539*0 + 3*97*FLEN/8, x4, x1, x2)

inst_28514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffffff8; valaddr_reg:x3; val_offset:85542*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85542*0 + 3*98*FLEN/8, x4, x1, x2)

inst_28515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffffffc; valaddr_reg:x3; val_offset:85545*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85545*0 + 3*99*FLEN/8, x4, x1, x2)

inst_28516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xeffffffffffffe; valaddr_reg:x3; val_offset:85548*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85548*0 + 3*100*FLEN/8, x4, x1, x2)

inst_28517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1df92a57e81fb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00e and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91df92a57e81fb; op2val:0x0;
op3val:0xefffffffffffff; valaddr_reg:x3; val_offset:85551*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85551*0 + 3*101*FLEN/8, x4, x1, x2)

inst_28518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000000000; valaddr_reg:x3; val_offset:85554*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85554*0 + 3*102*FLEN/8, x4, x1, x2)

inst_28519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000000001; valaddr_reg:x3; val_offset:85557*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85557*0 + 3*103*FLEN/8, x4, x1, x2)

inst_28520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000000003; valaddr_reg:x3; val_offset:85560*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85560*0 + 3*104*FLEN/8, x4, x1, x2)

inst_28521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000000007; valaddr_reg:x3; val_offset:85563*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85563*0 + 3*105*FLEN/8, x4, x1, x2)

inst_28522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000000000f; valaddr_reg:x3; val_offset:85566*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85566*0 + 3*106*FLEN/8, x4, x1, x2)

inst_28523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000000001f; valaddr_reg:x3; val_offset:85569*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85569*0 + 3*107*FLEN/8, x4, x1, x2)

inst_28524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000000003f; valaddr_reg:x3; val_offset:85572*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85572*0 + 3*108*FLEN/8, x4, x1, x2)

inst_28525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000000007f; valaddr_reg:x3; val_offset:85575*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85575*0 + 3*109*FLEN/8, x4, x1, x2)

inst_28526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000000000ff; valaddr_reg:x3; val_offset:85578*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85578*0 + 3*110*FLEN/8, x4, x1, x2)

inst_28527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000000001ff; valaddr_reg:x3; val_offset:85581*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85581*0 + 3*111*FLEN/8, x4, x1, x2)

inst_28528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000000003ff; valaddr_reg:x3; val_offset:85584*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85584*0 + 3*112*FLEN/8, x4, x1, x2)

inst_28529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000000007ff; valaddr_reg:x3; val_offset:85587*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85587*0 + 3*113*FLEN/8, x4, x1, x2)

inst_28530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000000fff; valaddr_reg:x3; val_offset:85590*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85590*0 + 3*114*FLEN/8, x4, x1, x2)

inst_28531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000001fff; valaddr_reg:x3; val_offset:85593*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85593*0 + 3*115*FLEN/8, x4, x1, x2)

inst_28532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000003fff; valaddr_reg:x3; val_offset:85596*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85596*0 + 3*116*FLEN/8, x4, x1, x2)

inst_28533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000007fff; valaddr_reg:x3; val_offset:85599*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85599*0 + 3*117*FLEN/8, x4, x1, x2)

inst_28534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000000ffff; valaddr_reg:x3; val_offset:85602*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85602*0 + 3*118*FLEN/8, x4, x1, x2)

inst_28535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000001ffff; valaddr_reg:x3; val_offset:85605*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85605*0 + 3*119*FLEN/8, x4, x1, x2)

inst_28536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000003ffff; valaddr_reg:x3; val_offset:85608*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85608*0 + 3*120*FLEN/8, x4, x1, x2)

inst_28537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000007ffff; valaddr_reg:x3; val_offset:85611*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85611*0 + 3*121*FLEN/8, x4, x1, x2)

inst_28538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000000fffff; valaddr_reg:x3; val_offset:85614*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85614*0 + 3*122*FLEN/8, x4, x1, x2)

inst_28539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000001fffff; valaddr_reg:x3; val_offset:85617*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85617*0 + 3*123*FLEN/8, x4, x1, x2)

inst_28540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000003fffff; valaddr_reg:x3; val_offset:85620*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85620*0 + 3*124*FLEN/8, x4, x1, x2)

inst_28541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000007fffff; valaddr_reg:x3; val_offset:85623*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85623*0 + 3*125*FLEN/8, x4, x1, x2)

inst_28542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000000ffffff; valaddr_reg:x3; val_offset:85626*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85626*0 + 3*126*FLEN/8, x4, x1, x2)

inst_28543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000001ffffff; valaddr_reg:x3; val_offset:85629*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85629*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_28544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000003ffffff; valaddr_reg:x3; val_offset:85632*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85632*0 + 3*128*FLEN/8, x4, x1, x2)

inst_28545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000007ffffff; valaddr_reg:x3; val_offset:85635*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85635*0 + 3*129*FLEN/8, x4, x1, x2)

inst_28546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000000fffffff; valaddr_reg:x3; val_offset:85638*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85638*0 + 3*130*FLEN/8, x4, x1, x2)

inst_28547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000001fffffff; valaddr_reg:x3; val_offset:85641*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85641*0 + 3*131*FLEN/8, x4, x1, x2)

inst_28548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000003fffffff; valaddr_reg:x3; val_offset:85644*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85644*0 + 3*132*FLEN/8, x4, x1, x2)

inst_28549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000007fffffff; valaddr_reg:x3; val_offset:85647*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85647*0 + 3*133*FLEN/8, x4, x1, x2)

inst_28550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900000ffffffff; valaddr_reg:x3; val_offset:85650*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85650*0 + 3*134*FLEN/8, x4, x1, x2)

inst_28551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900001ffffffff; valaddr_reg:x3; val_offset:85653*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85653*0 + 3*135*FLEN/8, x4, x1, x2)

inst_28552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900003ffffffff; valaddr_reg:x3; val_offset:85656*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85656*0 + 3*136*FLEN/8, x4, x1, x2)

inst_28553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900007ffffffff; valaddr_reg:x3; val_offset:85659*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85659*0 + 3*137*FLEN/8, x4, x1, x2)

inst_28554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990000fffffffff; valaddr_reg:x3; val_offset:85662*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85662*0 + 3*138*FLEN/8, x4, x1, x2)

inst_28555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990001fffffffff; valaddr_reg:x3; val_offset:85665*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85665*0 + 3*139*FLEN/8, x4, x1, x2)

inst_28556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990003fffffffff; valaddr_reg:x3; val_offset:85668*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85668*0 + 3*140*FLEN/8, x4, x1, x2)

inst_28557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990007fffffffff; valaddr_reg:x3; val_offset:85671*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85671*0 + 3*141*FLEN/8, x4, x1, x2)

inst_28558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99000ffffffffff; valaddr_reg:x3; val_offset:85674*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85674*0 + 3*142*FLEN/8, x4, x1, x2)

inst_28559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99001ffffffffff; valaddr_reg:x3; val_offset:85677*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85677*0 + 3*143*FLEN/8, x4, x1, x2)

inst_28560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99003ffffffffff; valaddr_reg:x3; val_offset:85680*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85680*0 + 3*144*FLEN/8, x4, x1, x2)

inst_28561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99007ffffffffff; valaddr_reg:x3; val_offset:85683*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85683*0 + 3*145*FLEN/8, x4, x1, x2)

inst_28562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9900fffffffffff; valaddr_reg:x3; val_offset:85686*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85686*0 + 3*146*FLEN/8, x4, x1, x2)

inst_28563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9901fffffffffff; valaddr_reg:x3; val_offset:85689*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85689*0 + 3*147*FLEN/8, x4, x1, x2)

inst_28564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9903fffffffffff; valaddr_reg:x3; val_offset:85692*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85692*0 + 3*148*FLEN/8, x4, x1, x2)

inst_28565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb9907fffffffffff; valaddr_reg:x3; val_offset:85695*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85695*0 + 3*149*FLEN/8, x4, x1, x2)

inst_28566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb990ffffffffffff; valaddr_reg:x3; val_offset:85698*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85698*0 + 3*150*FLEN/8, x4, x1, x2)

inst_28567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb991ffffffffffff; valaddr_reg:x3; val_offset:85701*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85701*0 + 3*151*FLEN/8, x4, x1, x2)

inst_28568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb993ffffffffffff; valaddr_reg:x3; val_offset:85704*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85704*0 + 3*152*FLEN/8, x4, x1, x2)

inst_28569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb997ffffffffffff; valaddr_reg:x3; val_offset:85707*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85707*0 + 3*153*FLEN/8, x4, x1, x2)

inst_28570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb998000000000000; valaddr_reg:x3; val_offset:85710*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85710*0 + 3*154*FLEN/8, x4, x1, x2)

inst_28571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99c000000000000; valaddr_reg:x3; val_offset:85713*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85713*0 + 3*155*FLEN/8, x4, x1, x2)

inst_28572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99e000000000000; valaddr_reg:x3; val_offset:85716*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85716*0 + 3*156*FLEN/8, x4, x1, x2)

inst_28573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99f000000000000; valaddr_reg:x3; val_offset:85719*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85719*0 + 3*157*FLEN/8, x4, x1, x2)

inst_28574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99f800000000000; valaddr_reg:x3; val_offset:85722*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85722*0 + 3*158*FLEN/8, x4, x1, x2)

inst_28575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fc00000000000; valaddr_reg:x3; val_offset:85725*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85725*0 + 3*159*FLEN/8, x4, x1, x2)

inst_28576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fe00000000000; valaddr_reg:x3; val_offset:85728*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85728*0 + 3*160*FLEN/8, x4, x1, x2)

inst_28577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ff00000000000; valaddr_reg:x3; val_offset:85731*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85731*0 + 3*161*FLEN/8, x4, x1, x2)

inst_28578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ff80000000000; valaddr_reg:x3; val_offset:85734*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85734*0 + 3*162*FLEN/8, x4, x1, x2)

inst_28579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffc0000000000; valaddr_reg:x3; val_offset:85737*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85737*0 + 3*163*FLEN/8, x4, x1, x2)

inst_28580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffe0000000000; valaddr_reg:x3; val_offset:85740*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85740*0 + 3*164*FLEN/8, x4, x1, x2)

inst_28581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fff0000000000; valaddr_reg:x3; val_offset:85743*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85743*0 + 3*165*FLEN/8, x4, x1, x2)

inst_28582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fff8000000000; valaddr_reg:x3; val_offset:85746*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85746*0 + 3*166*FLEN/8, x4, x1, x2)

inst_28583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffc000000000; valaddr_reg:x3; val_offset:85749*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85749*0 + 3*167*FLEN/8, x4, x1, x2)

inst_28584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffe000000000; valaddr_reg:x3; val_offset:85752*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85752*0 + 3*168*FLEN/8, x4, x1, x2)

inst_28585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffff000000000; valaddr_reg:x3; val_offset:85755*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85755*0 + 3*169*FLEN/8, x4, x1, x2)

inst_28586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffff800000000; valaddr_reg:x3; val_offset:85758*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85758*0 + 3*170*FLEN/8, x4, x1, x2)

inst_28587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffc00000000; valaddr_reg:x3; val_offset:85761*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85761*0 + 3*171*FLEN/8, x4, x1, x2)

inst_28588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffe00000000; valaddr_reg:x3; val_offset:85764*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85764*0 + 3*172*FLEN/8, x4, x1, x2)

inst_28589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffff00000000; valaddr_reg:x3; val_offset:85767*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85767*0 + 3*173*FLEN/8, x4, x1, x2)

inst_28590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffff80000000; valaddr_reg:x3; val_offset:85770*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85770*0 + 3*174*FLEN/8, x4, x1, x2)

inst_28591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffc0000000; valaddr_reg:x3; val_offset:85773*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85773*0 + 3*175*FLEN/8, x4, x1, x2)

inst_28592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffe0000000; valaddr_reg:x3; val_offset:85776*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85776*0 + 3*176*FLEN/8, x4, x1, x2)

inst_28593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffff0000000; valaddr_reg:x3; val_offset:85779*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85779*0 + 3*177*FLEN/8, x4, x1, x2)

inst_28594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffff8000000; valaddr_reg:x3; val_offset:85782*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85782*0 + 3*178*FLEN/8, x4, x1, x2)

inst_28595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffc000000; valaddr_reg:x3; val_offset:85785*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85785*0 + 3*179*FLEN/8, x4, x1, x2)

inst_28596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffe000000; valaddr_reg:x3; val_offset:85788*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85788*0 + 3*180*FLEN/8, x4, x1, x2)

inst_28597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffff000000; valaddr_reg:x3; val_offset:85791*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85791*0 + 3*181*FLEN/8, x4, x1, x2)

inst_28598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffff800000; valaddr_reg:x3; val_offset:85794*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85794*0 + 3*182*FLEN/8, x4, x1, x2)

inst_28599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffc00000; valaddr_reg:x3; val_offset:85797*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85797*0 + 3*183*FLEN/8, x4, x1, x2)

inst_28600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffe00000; valaddr_reg:x3; val_offset:85800*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85800*0 + 3*184*FLEN/8, x4, x1, x2)

inst_28601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffff00000; valaddr_reg:x3; val_offset:85803*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85803*0 + 3*185*FLEN/8, x4, x1, x2)

inst_28602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffff80000; valaddr_reg:x3; val_offset:85806*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85806*0 + 3*186*FLEN/8, x4, x1, x2)

inst_28603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffc0000; valaddr_reg:x3; val_offset:85809*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85809*0 + 3*187*FLEN/8, x4, x1, x2)

inst_28604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffe0000; valaddr_reg:x3; val_offset:85812*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85812*0 + 3*188*FLEN/8, x4, x1, x2)

inst_28605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffff0000; valaddr_reg:x3; val_offset:85815*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85815*0 + 3*189*FLEN/8, x4, x1, x2)

inst_28606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffff8000; valaddr_reg:x3; val_offset:85818*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85818*0 + 3*190*FLEN/8, x4, x1, x2)

inst_28607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffffc000; valaddr_reg:x3; val_offset:85821*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85821*0 + 3*191*FLEN/8, x4, x1, x2)

inst_28608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffffe000; valaddr_reg:x3; val_offset:85824*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85824*0 + 3*192*FLEN/8, x4, x1, x2)

inst_28609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffff000; valaddr_reg:x3; val_offset:85827*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85827*0 + 3*193*FLEN/8, x4, x1, x2)

inst_28610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffff800; valaddr_reg:x3; val_offset:85830*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85830*0 + 3*194*FLEN/8, x4, x1, x2)

inst_28611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffffc00; valaddr_reg:x3; val_offset:85833*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85833*0 + 3*195*FLEN/8, x4, x1, x2)

inst_28612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffffe00; valaddr_reg:x3; val_offset:85836*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85836*0 + 3*196*FLEN/8, x4, x1, x2)

inst_28613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffffff00; valaddr_reg:x3; val_offset:85839*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85839*0 + 3*197*FLEN/8, x4, x1, x2)

inst_28614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffffff80; valaddr_reg:x3; val_offset:85842*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85842*0 + 3*198*FLEN/8, x4, x1, x2)

inst_28615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffffffc0; valaddr_reg:x3; val_offset:85845*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85845*0 + 3*199*FLEN/8, x4, x1, x2)

inst_28616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffffffe0; valaddr_reg:x3; val_offset:85848*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85848*0 + 3*200*FLEN/8, x4, x1, x2)

inst_28617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffffff0; valaddr_reg:x3; val_offset:85851*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85851*0 + 3*201*FLEN/8, x4, x1, x2)

inst_28618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffffff8; valaddr_reg:x3; val_offset:85854*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85854*0 + 3*202*FLEN/8, x4, x1, x2)

inst_28619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffffffc; valaddr_reg:x3; val_offset:85857*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85857*0 + 3*203*FLEN/8, x4, x1, x2)

inst_28620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99ffffffffffffe; valaddr_reg:x3; val_offset:85860*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85860*0 + 3*204*FLEN/8, x4, x1, x2)

inst_28621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xb99fffffffffffff; valaddr_reg:x3; val_offset:85863*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85863*0 + 3*205*FLEN/8, x4, x1, x2)

inst_28622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:85866*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85866*0 + 3*206*FLEN/8, x4, x1, x2)

inst_28623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:85869*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85869*0 + 3*207*FLEN/8, x4, x1, x2)

inst_28624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:85872*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85872*0 + 3*208*FLEN/8, x4, x1, x2)

inst_28625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:85875*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85875*0 + 3*209*FLEN/8, x4, x1, x2)

inst_28626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:85878*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85878*0 + 3*210*FLEN/8, x4, x1, x2)

inst_28627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:85881*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85881*0 + 3*211*FLEN/8, x4, x1, x2)

inst_28628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:85884*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85884*0 + 3*212*FLEN/8, x4, x1, x2)

inst_28629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:85887*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85887*0 + 3*213*FLEN/8, x4, x1, x2)

inst_28630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:85890*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85890*0 + 3*214*FLEN/8, x4, x1, x2)

inst_28631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:85893*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85893*0 + 3*215*FLEN/8, x4, x1, x2)

inst_28632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:85896*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85896*0 + 3*216*FLEN/8, x4, x1, x2)

inst_28633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:85899*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85899*0 + 3*217*FLEN/8, x4, x1, x2)

inst_28634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:85902*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85902*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:85905*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85905*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:85908*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85908*0 + 3*220*FLEN/8, x4, x1, x2)

inst_28637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:85911*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85911*0 + 3*221*FLEN/8, x4, x1, x2)

inst_28638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:85914*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85914*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:85917*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85917*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:85920*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85920*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:85923*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85923*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:85926*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85926*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1f868e0b71f1b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xc7dcaca4e1451 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91f868e0b71f1b; op2val:0x9fdc7dcaca4e1451;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:85929*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85929*0 + 3*227*FLEN/8, x4, x1, x2)

inst_28644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000000000; valaddr_reg:x3; val_offset:85932*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85932*0 + 3*228*FLEN/8, x4, x1, x2)

inst_28645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000000001; valaddr_reg:x3; val_offset:85935*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85935*0 + 3*229*FLEN/8, x4, x1, x2)

inst_28646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000000003; valaddr_reg:x3; val_offset:85938*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85938*0 + 3*230*FLEN/8, x4, x1, x2)

inst_28647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000000007; valaddr_reg:x3; val_offset:85941*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85941*0 + 3*231*FLEN/8, x4, x1, x2)

inst_28648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000000000f; valaddr_reg:x3; val_offset:85944*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85944*0 + 3*232*FLEN/8, x4, x1, x2)

inst_28649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000000001f; valaddr_reg:x3; val_offset:85947*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85947*0 + 3*233*FLEN/8, x4, x1, x2)

inst_28650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000000003f; valaddr_reg:x3; val_offset:85950*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85950*0 + 3*234*FLEN/8, x4, x1, x2)

inst_28651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000000007f; valaddr_reg:x3; val_offset:85953*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85953*0 + 3*235*FLEN/8, x4, x1, x2)

inst_28652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000000000ff; valaddr_reg:x3; val_offset:85956*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85956*0 + 3*236*FLEN/8, x4, x1, x2)

inst_28653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000000001ff; valaddr_reg:x3; val_offset:85959*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85959*0 + 3*237*FLEN/8, x4, x1, x2)

inst_28654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000000003ff; valaddr_reg:x3; val_offset:85962*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85962*0 + 3*238*FLEN/8, x4, x1, x2)

inst_28655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000000007ff; valaddr_reg:x3; val_offset:85965*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85965*0 + 3*239*FLEN/8, x4, x1, x2)

inst_28656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000000fff; valaddr_reg:x3; val_offset:85968*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85968*0 + 3*240*FLEN/8, x4, x1, x2)

inst_28657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000001fff; valaddr_reg:x3; val_offset:85971*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85971*0 + 3*241*FLEN/8, x4, x1, x2)

inst_28658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000003fff; valaddr_reg:x3; val_offset:85974*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85974*0 + 3*242*FLEN/8, x4, x1, x2)

inst_28659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000007fff; valaddr_reg:x3; val_offset:85977*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85977*0 + 3*243*FLEN/8, x4, x1, x2)

inst_28660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000000ffff; valaddr_reg:x3; val_offset:85980*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85980*0 + 3*244*FLEN/8, x4, x1, x2)

inst_28661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000001ffff; valaddr_reg:x3; val_offset:85983*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85983*0 + 3*245*FLEN/8, x4, x1, x2)

inst_28662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000003ffff; valaddr_reg:x3; val_offset:85986*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85986*0 + 3*246*FLEN/8, x4, x1, x2)

inst_28663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000007ffff; valaddr_reg:x3; val_offset:85989*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85989*0 + 3*247*FLEN/8, x4, x1, x2)

inst_28664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000000fffff; valaddr_reg:x3; val_offset:85992*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85992*0 + 3*248*FLEN/8, x4, x1, x2)

inst_28665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000001fffff; valaddr_reg:x3; val_offset:85995*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85995*0 + 3*249*FLEN/8, x4, x1, x2)

inst_28666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000003fffff; valaddr_reg:x3; val_offset:85998*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 85998*0 + 3*250*FLEN/8, x4, x1, x2)

inst_28667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000007fffff; valaddr_reg:x3; val_offset:86001*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86001*0 + 3*251*FLEN/8, x4, x1, x2)

inst_28668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000000ffffff; valaddr_reg:x3; val_offset:86004*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86004*0 + 3*252*FLEN/8, x4, x1, x2)

inst_28669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000001ffffff; valaddr_reg:x3; val_offset:86007*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86007*0 + 3*253*FLEN/8, x4, x1, x2)

inst_28670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000003ffffff; valaddr_reg:x3; val_offset:86010*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86010*0 + 3*254*FLEN/8, x4, x1, x2)

inst_28671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000007ffffff; valaddr_reg:x3; val_offset:86013*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86013*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_28672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000000fffffff; valaddr_reg:x3; val_offset:86016*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86016*0 + 3*256*FLEN/8, x4, x1, x2)

inst_28673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000001fffffff; valaddr_reg:x3; val_offset:86019*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86019*0 + 3*257*FLEN/8, x4, x1, x2)

inst_28674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000003fffffff; valaddr_reg:x3; val_offset:86022*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86022*0 + 3*258*FLEN/8, x4, x1, x2)

inst_28675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000007fffffff; valaddr_reg:x3; val_offset:86025*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86025*0 + 3*259*FLEN/8, x4, x1, x2)

inst_28676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00000ffffffff; valaddr_reg:x3; val_offset:86028*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86028*0 + 3*260*FLEN/8, x4, x1, x2)

inst_28677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00001ffffffff; valaddr_reg:x3; val_offset:86031*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86031*0 + 3*261*FLEN/8, x4, x1, x2)

inst_28678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00003ffffffff; valaddr_reg:x3; val_offset:86034*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86034*0 + 3*262*FLEN/8, x4, x1, x2)

inst_28679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00007ffffffff; valaddr_reg:x3; val_offset:86037*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86037*0 + 3*263*FLEN/8, x4, x1, x2)

inst_28680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0000fffffffff; valaddr_reg:x3; val_offset:86040*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86040*0 + 3*264*FLEN/8, x4, x1, x2)

inst_28681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0001fffffffff; valaddr_reg:x3; val_offset:86043*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86043*0 + 3*265*FLEN/8, x4, x1, x2)

inst_28682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0003fffffffff; valaddr_reg:x3; val_offset:86046*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86046*0 + 3*266*FLEN/8, x4, x1, x2)

inst_28683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0007fffffffff; valaddr_reg:x3; val_offset:86049*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86049*0 + 3*267*FLEN/8, x4, x1, x2)

inst_28684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf000ffffffffff; valaddr_reg:x3; val_offset:86052*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86052*0 + 3*268*FLEN/8, x4, x1, x2)

inst_28685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf001ffffffffff; valaddr_reg:x3; val_offset:86055*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86055*0 + 3*269*FLEN/8, x4, x1, x2)

inst_28686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf003ffffffffff; valaddr_reg:x3; val_offset:86058*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86058*0 + 3*270*FLEN/8, x4, x1, x2)

inst_28687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf007ffffffffff; valaddr_reg:x3; val_offset:86061*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86061*0 + 3*271*FLEN/8, x4, x1, x2)

inst_28688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf00fffffffffff; valaddr_reg:x3; val_offset:86064*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86064*0 + 3*272*FLEN/8, x4, x1, x2)

inst_28689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf01fffffffffff; valaddr_reg:x3; val_offset:86067*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86067*0 + 3*273*FLEN/8, x4, x1, x2)

inst_28690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf03fffffffffff; valaddr_reg:x3; val_offset:86070*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86070*0 + 3*274*FLEN/8, x4, x1, x2)

inst_28691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf07fffffffffff; valaddr_reg:x3; val_offset:86073*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86073*0 + 3*275*FLEN/8, x4, x1, x2)

inst_28692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf0ffffffffffff; valaddr_reg:x3; val_offset:86076*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86076*0 + 3*276*FLEN/8, x4, x1, x2)

inst_28693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf1ffffffffffff; valaddr_reg:x3; val_offset:86079*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86079*0 + 3*277*FLEN/8, x4, x1, x2)

inst_28694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf3ffffffffffff; valaddr_reg:x3; val_offset:86082*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86082*0 + 3*278*FLEN/8, x4, x1, x2)

inst_28695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf7ffffffffffff; valaddr_reg:x3; val_offset:86085*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86085*0 + 3*279*FLEN/8, x4, x1, x2)

inst_28696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bf8000000000000; valaddr_reg:x3; val_offset:86088*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86088*0 + 3*280*FLEN/8, x4, x1, x2)

inst_28697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfc000000000000; valaddr_reg:x3; val_offset:86091*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86091*0 + 3*281*FLEN/8, x4, x1, x2)

inst_28698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfe000000000000; valaddr_reg:x3; val_offset:86094*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86094*0 + 3*282*FLEN/8, x4, x1, x2)

inst_28699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bff000000000000; valaddr_reg:x3; val_offset:86097*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86097*0 + 3*283*FLEN/8, x4, x1, x2)

inst_28700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bff800000000000; valaddr_reg:x3; val_offset:86100*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86100*0 + 3*284*FLEN/8, x4, x1, x2)

inst_28701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffc00000000000; valaddr_reg:x3; val_offset:86103*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86103*0 + 3*285*FLEN/8, x4, x1, x2)

inst_28702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffe00000000000; valaddr_reg:x3; val_offset:86106*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86106*0 + 3*286*FLEN/8, x4, x1, x2)

inst_28703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfff00000000000; valaddr_reg:x3; val_offset:86109*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86109*0 + 3*287*FLEN/8, x4, x1, x2)

inst_28704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfff80000000000; valaddr_reg:x3; val_offset:86112*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86112*0 + 3*288*FLEN/8, x4, x1, x2)

inst_28705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffc0000000000; valaddr_reg:x3; val_offset:86115*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86115*0 + 3*289*FLEN/8, x4, x1, x2)

inst_28706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffe0000000000; valaddr_reg:x3; val_offset:86118*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86118*0 + 3*290*FLEN/8, x4, x1, x2)

inst_28707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffff0000000000; valaddr_reg:x3; val_offset:86121*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86121*0 + 3*291*FLEN/8, x4, x1, x2)

inst_28708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffff8000000000; valaddr_reg:x3; val_offset:86124*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86124*0 + 3*292*FLEN/8, x4, x1, x2)

inst_28709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffc000000000; valaddr_reg:x3; val_offset:86127*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86127*0 + 3*293*FLEN/8, x4, x1, x2)

inst_28710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffe000000000; valaddr_reg:x3; val_offset:86130*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86130*0 + 3*294*FLEN/8, x4, x1, x2)

inst_28711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffff000000000; valaddr_reg:x3; val_offset:86133*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86133*0 + 3*295*FLEN/8, x4, x1, x2)

inst_28712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffff800000000; valaddr_reg:x3; val_offset:86136*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86136*0 + 3*296*FLEN/8, x4, x1, x2)

inst_28713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffc00000000; valaddr_reg:x3; val_offset:86139*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86139*0 + 3*297*FLEN/8, x4, x1, x2)

inst_28714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffe00000000; valaddr_reg:x3; val_offset:86142*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86142*0 + 3*298*FLEN/8, x4, x1, x2)

inst_28715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffff00000000; valaddr_reg:x3; val_offset:86145*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86145*0 + 3*299*FLEN/8, x4, x1, x2)

inst_28716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffff80000000; valaddr_reg:x3; val_offset:86148*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86148*0 + 3*300*FLEN/8, x4, x1, x2)

inst_28717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffc0000000; valaddr_reg:x3; val_offset:86151*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86151*0 + 3*301*FLEN/8, x4, x1, x2)

inst_28718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffe0000000; valaddr_reg:x3; val_offset:86154*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86154*0 + 3*302*FLEN/8, x4, x1, x2)

inst_28719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffff0000000; valaddr_reg:x3; val_offset:86157*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86157*0 + 3*303*FLEN/8, x4, x1, x2)

inst_28720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffff8000000; valaddr_reg:x3; val_offset:86160*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86160*0 + 3*304*FLEN/8, x4, x1, x2)

inst_28721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffc000000; valaddr_reg:x3; val_offset:86163*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86163*0 + 3*305*FLEN/8, x4, x1, x2)

inst_28722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffe000000; valaddr_reg:x3; val_offset:86166*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86166*0 + 3*306*FLEN/8, x4, x1, x2)

inst_28723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffff000000; valaddr_reg:x3; val_offset:86169*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86169*0 + 3*307*FLEN/8, x4, x1, x2)

inst_28724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffff800000; valaddr_reg:x3; val_offset:86172*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86172*0 + 3*308*FLEN/8, x4, x1, x2)

inst_28725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffc00000; valaddr_reg:x3; val_offset:86175*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86175*0 + 3*309*FLEN/8, x4, x1, x2)

inst_28726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffe00000; valaddr_reg:x3; val_offset:86178*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86178*0 + 3*310*FLEN/8, x4, x1, x2)

inst_28727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffff00000; valaddr_reg:x3; val_offset:86181*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86181*0 + 3*311*FLEN/8, x4, x1, x2)

inst_28728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffff80000; valaddr_reg:x3; val_offset:86184*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86184*0 + 3*312*FLEN/8, x4, x1, x2)

inst_28729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffc0000; valaddr_reg:x3; val_offset:86187*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86187*0 + 3*313*FLEN/8, x4, x1, x2)

inst_28730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffe0000; valaddr_reg:x3; val_offset:86190*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86190*0 + 3*314*FLEN/8, x4, x1, x2)

inst_28731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffff0000; valaddr_reg:x3; val_offset:86193*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86193*0 + 3*315*FLEN/8, x4, x1, x2)

inst_28732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffff8000; valaddr_reg:x3; val_offset:86196*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86196*0 + 3*316*FLEN/8, x4, x1, x2)

inst_28733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffffc000; valaddr_reg:x3; val_offset:86199*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86199*0 + 3*317*FLEN/8, x4, x1, x2)

inst_28734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffffe000; valaddr_reg:x3; val_offset:86202*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86202*0 + 3*318*FLEN/8, x4, x1, x2)

inst_28735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffff000; valaddr_reg:x3; val_offset:86205*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86205*0 + 3*319*FLEN/8, x4, x1, x2)

inst_28736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffff800; valaddr_reg:x3; val_offset:86208*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86208*0 + 3*320*FLEN/8, x4, x1, x2)

inst_28737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffffc00; valaddr_reg:x3; val_offset:86211*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86211*0 + 3*321*FLEN/8, x4, x1, x2)

inst_28738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffffe00; valaddr_reg:x3; val_offset:86214*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86214*0 + 3*322*FLEN/8, x4, x1, x2)

inst_28739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffffff00; valaddr_reg:x3; val_offset:86217*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86217*0 + 3*323*FLEN/8, x4, x1, x2)

inst_28740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffffff80; valaddr_reg:x3; val_offset:86220*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86220*0 + 3*324*FLEN/8, x4, x1, x2)

inst_28741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffffffc0; valaddr_reg:x3; val_offset:86223*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86223*0 + 3*325*FLEN/8, x4, x1, x2)

inst_28742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffffffe0; valaddr_reg:x3; val_offset:86226*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86226*0 + 3*326*FLEN/8, x4, x1, x2)

inst_28743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffffff0; valaddr_reg:x3; val_offset:86229*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86229*0 + 3*327*FLEN/8, x4, x1, x2)

inst_28744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffffff8; valaddr_reg:x3; val_offset:86232*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86232*0 + 3*328*FLEN/8, x4, x1, x2)

inst_28745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffffffc; valaddr_reg:x3; val_offset:86235*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86235*0 + 3*329*FLEN/8, x4, x1, x2)

inst_28746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bfffffffffffffe; valaddr_reg:x3; val_offset:86238*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86238*0 + 3*330*FLEN/8, x4, x1, x2)

inst_28747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3bffffffffffffff; valaddr_reg:x3; val_offset:86241*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86241*0 + 3*331*FLEN/8, x4, x1, x2)

inst_28748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:86244*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86244*0 + 3*332*FLEN/8, x4, x1, x2)

inst_28749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:86247*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86247*0 + 3*333*FLEN/8, x4, x1, x2)

inst_28750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:86250*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86250*0 + 3*334*FLEN/8, x4, x1, x2)

inst_28751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:86253*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86253*0 + 3*335*FLEN/8, x4, x1, x2)

inst_28752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:86256*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86256*0 + 3*336*FLEN/8, x4, x1, x2)

inst_28753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:86259*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86259*0 + 3*337*FLEN/8, x4, x1, x2)

inst_28754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:86262*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86262*0 + 3*338*FLEN/8, x4, x1, x2)

inst_28755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:86265*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86265*0 + 3*339*FLEN/8, x4, x1, x2)

inst_28756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:86268*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86268*0 + 3*340*FLEN/8, x4, x1, x2)

inst_28757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:86271*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86271*0 + 3*341*FLEN/8, x4, x1, x2)

inst_28758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:86274*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86274*0 + 3*342*FLEN/8, x4, x1, x2)

inst_28759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:86277*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86277*0 + 3*343*FLEN/8, x4, x1, x2)

inst_28760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:86280*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86280*0 + 3*344*FLEN/8, x4, x1, x2)

inst_28761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:86283*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86283*0 + 3*345*FLEN/8, x4, x1, x2)

inst_28762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:86286*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86286*0 + 3*346*FLEN/8, x4, x1, x2)

inst_28763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:86289*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86289*0 + 3*347*FLEN/8, x4, x1, x2)

inst_28764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:86292*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86292*0 + 3*348*FLEN/8, x4, x1, x2)

inst_28765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:86295*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86295*0 + 3*349*FLEN/8, x4, x1, x2)

inst_28766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:86298*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86298*0 + 3*350*FLEN/8, x4, x1, x2)

inst_28767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:86301*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86301*0 + 3*351*FLEN/8, x4, x1, x2)

inst_28768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:86304*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86304*0 + 3*352*FLEN/8, x4, x1, x2)

inst_28769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x201aaa0250ded and fs2 == 0 and fe2 == 0x204 and fm2 == 0xc6f252e5d1c6e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9201aaa0250ded; op2val:0x204c6f252e5d1c6e;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:86307*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86307*0 + 3*353*FLEN/8, x4, x1, x2)

inst_28770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:86310*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86310*0 + 3*354*FLEN/8, x4, x1, x2)

inst_28771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:86313*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86313*0 + 3*355*FLEN/8, x4, x1, x2)

inst_28772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:86316*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86316*0 + 3*356*FLEN/8, x4, x1, x2)

inst_28773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:86319*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86319*0 + 3*357*FLEN/8, x4, x1, x2)

inst_28774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:86322*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86322*0 + 3*358*FLEN/8, x4, x1, x2)

inst_28775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:86325*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86325*0 + 3*359*FLEN/8, x4, x1, x2)

inst_28776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:86328*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86328*0 + 3*360*FLEN/8, x4, x1, x2)

inst_28777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:86331*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86331*0 + 3*361*FLEN/8, x4, x1, x2)

inst_28778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:86334*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86334*0 + 3*362*FLEN/8, x4, x1, x2)

inst_28779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:86337*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86337*0 + 3*363*FLEN/8, x4, x1, x2)

inst_28780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:86340*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86340*0 + 3*364*FLEN/8, x4, x1, x2)

inst_28781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:86343*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86343*0 + 3*365*FLEN/8, x4, x1, x2)

inst_28782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:86346*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86346*0 + 3*366*FLEN/8, x4, x1, x2)

inst_28783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:86349*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86349*0 + 3*367*FLEN/8, x4, x1, x2)

inst_28784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:86352*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86352*0 + 3*368*FLEN/8, x4, x1, x2)

inst_28785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:86355*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86355*0 + 3*369*FLEN/8, x4, x1, x2)

inst_28786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:86358*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86358*0 + 3*370*FLEN/8, x4, x1, x2)

inst_28787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:86361*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86361*0 + 3*371*FLEN/8, x4, x1, x2)

inst_28788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:86364*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86364*0 + 3*372*FLEN/8, x4, x1, x2)

inst_28789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:86367*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86367*0 + 3*373*FLEN/8, x4, x1, x2)

inst_28790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:86370*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86370*0 + 3*374*FLEN/8, x4, x1, x2)

inst_28791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:86373*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86373*0 + 3*375*FLEN/8, x4, x1, x2)

inst_28792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000000000; valaddr_reg:x3; val_offset:86376*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86376*0 + 3*376*FLEN/8, x4, x1, x2)

inst_28793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000000001; valaddr_reg:x3; val_offset:86379*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86379*0 + 3*377*FLEN/8, x4, x1, x2)

inst_28794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000000003; valaddr_reg:x3; val_offset:86382*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86382*0 + 3*378*FLEN/8, x4, x1, x2)

inst_28795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000000007; valaddr_reg:x3; val_offset:86385*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86385*0 + 3*379*FLEN/8, x4, x1, x2)

inst_28796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000000000f; valaddr_reg:x3; val_offset:86388*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86388*0 + 3*380*FLEN/8, x4, x1, x2)

inst_28797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000000001f; valaddr_reg:x3; val_offset:86391*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86391*0 + 3*381*FLEN/8, x4, x1, x2)

inst_28798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000000003f; valaddr_reg:x3; val_offset:86394*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86394*0 + 3*382*FLEN/8, x4, x1, x2)

inst_28799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000000007f; valaddr_reg:x3; val_offset:86397*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86397*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_28800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000000000ff; valaddr_reg:x3; val_offset:86400*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86400*0 + 3*384*FLEN/8, x4, x1, x2)

inst_28801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000000001ff; valaddr_reg:x3; val_offset:86403*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86403*0 + 3*385*FLEN/8, x4, x1, x2)

inst_28802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000000003ff; valaddr_reg:x3; val_offset:86406*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86406*0 + 3*386*FLEN/8, x4, x1, x2)

inst_28803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000000007ff; valaddr_reg:x3; val_offset:86409*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86409*0 + 3*387*FLEN/8, x4, x1, x2)

inst_28804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000000fff; valaddr_reg:x3; val_offset:86412*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86412*0 + 3*388*FLEN/8, x4, x1, x2)

inst_28805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000001fff; valaddr_reg:x3; val_offset:86415*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86415*0 + 3*389*FLEN/8, x4, x1, x2)

inst_28806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000003fff; valaddr_reg:x3; val_offset:86418*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86418*0 + 3*390*FLEN/8, x4, x1, x2)

inst_28807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000007fff; valaddr_reg:x3; val_offset:86421*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86421*0 + 3*391*FLEN/8, x4, x1, x2)

inst_28808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000000ffff; valaddr_reg:x3; val_offset:86424*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86424*0 + 3*392*FLEN/8, x4, x1, x2)

inst_28809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000001ffff; valaddr_reg:x3; val_offset:86427*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86427*0 + 3*393*FLEN/8, x4, x1, x2)

inst_28810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000003ffff; valaddr_reg:x3; val_offset:86430*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86430*0 + 3*394*FLEN/8, x4, x1, x2)

inst_28811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000007ffff; valaddr_reg:x3; val_offset:86433*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86433*0 + 3*395*FLEN/8, x4, x1, x2)

inst_28812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000000fffff; valaddr_reg:x3; val_offset:86436*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86436*0 + 3*396*FLEN/8, x4, x1, x2)

inst_28813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000001fffff; valaddr_reg:x3; val_offset:86439*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86439*0 + 3*397*FLEN/8, x4, x1, x2)

inst_28814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000003fffff; valaddr_reg:x3; val_offset:86442*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86442*0 + 3*398*FLEN/8, x4, x1, x2)

inst_28815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000007fffff; valaddr_reg:x3; val_offset:86445*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86445*0 + 3*399*FLEN/8, x4, x1, x2)

inst_28816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000000ffffff; valaddr_reg:x3; val_offset:86448*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86448*0 + 3*400*FLEN/8, x4, x1, x2)

inst_28817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000001ffffff; valaddr_reg:x3; val_offset:86451*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86451*0 + 3*401*FLEN/8, x4, x1, x2)

inst_28818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000003ffffff; valaddr_reg:x3; val_offset:86454*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86454*0 + 3*402*FLEN/8, x4, x1, x2)

inst_28819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000007ffffff; valaddr_reg:x3; val_offset:86457*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86457*0 + 3*403*FLEN/8, x4, x1, x2)

inst_28820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000000fffffff; valaddr_reg:x3; val_offset:86460*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86460*0 + 3*404*FLEN/8, x4, x1, x2)

inst_28821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000001fffffff; valaddr_reg:x3; val_offset:86463*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86463*0 + 3*405*FLEN/8, x4, x1, x2)

inst_28822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000003fffffff; valaddr_reg:x3; val_offset:86466*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86466*0 + 3*406*FLEN/8, x4, x1, x2)

inst_28823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000007fffffff; valaddr_reg:x3; val_offset:86469*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86469*0 + 3*407*FLEN/8, x4, x1, x2)

inst_28824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00000ffffffff; valaddr_reg:x3; val_offset:86472*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86472*0 + 3*408*FLEN/8, x4, x1, x2)

inst_28825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00001ffffffff; valaddr_reg:x3; val_offset:86475*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86475*0 + 3*409*FLEN/8, x4, x1, x2)

inst_28826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00003ffffffff; valaddr_reg:x3; val_offset:86478*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86478*0 + 3*410*FLEN/8, x4, x1, x2)

inst_28827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00007ffffffff; valaddr_reg:x3; val_offset:86481*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86481*0 + 3*411*FLEN/8, x4, x1, x2)

inst_28828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0000fffffffff; valaddr_reg:x3; val_offset:86484*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86484*0 + 3*412*FLEN/8, x4, x1, x2)

inst_28829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0001fffffffff; valaddr_reg:x3; val_offset:86487*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86487*0 + 3*413*FLEN/8, x4, x1, x2)

inst_28830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0003fffffffff; valaddr_reg:x3; val_offset:86490*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86490*0 + 3*414*FLEN/8, x4, x1, x2)

inst_28831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0007fffffffff; valaddr_reg:x3; val_offset:86493*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86493*0 + 3*415*FLEN/8, x4, x1, x2)

inst_28832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c000ffffffffff; valaddr_reg:x3; val_offset:86496*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86496*0 + 3*416*FLEN/8, x4, x1, x2)

inst_28833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c001ffffffffff; valaddr_reg:x3; val_offset:86499*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86499*0 + 3*417*FLEN/8, x4, x1, x2)

inst_28834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c003ffffffffff; valaddr_reg:x3; val_offset:86502*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86502*0 + 3*418*FLEN/8, x4, x1, x2)

inst_28835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c007ffffffffff; valaddr_reg:x3; val_offset:86505*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86505*0 + 3*419*FLEN/8, x4, x1, x2)

inst_28836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c00fffffffffff; valaddr_reg:x3; val_offset:86508*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86508*0 + 3*420*FLEN/8, x4, x1, x2)

inst_28837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c01fffffffffff; valaddr_reg:x3; val_offset:86511*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86511*0 + 3*421*FLEN/8, x4, x1, x2)

inst_28838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c03fffffffffff; valaddr_reg:x3; val_offset:86514*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86514*0 + 3*422*FLEN/8, x4, x1, x2)

inst_28839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c07fffffffffff; valaddr_reg:x3; val_offset:86517*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86517*0 + 3*423*FLEN/8, x4, x1, x2)

inst_28840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c0ffffffffffff; valaddr_reg:x3; val_offset:86520*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86520*0 + 3*424*FLEN/8, x4, x1, x2)

inst_28841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c1ffffffffffff; valaddr_reg:x3; val_offset:86523*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86523*0 + 3*425*FLEN/8, x4, x1, x2)

inst_28842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c3ffffffffffff; valaddr_reg:x3; val_offset:86526*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86526*0 + 3*426*FLEN/8, x4, x1, x2)

inst_28843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c7ffffffffffff; valaddr_reg:x3; val_offset:86529*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86529*0 + 3*427*FLEN/8, x4, x1, x2)

inst_28844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80c8000000000000; valaddr_reg:x3; val_offset:86532*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86532*0 + 3*428*FLEN/8, x4, x1, x2)

inst_28845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cc000000000000; valaddr_reg:x3; val_offset:86535*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86535*0 + 3*429*FLEN/8, x4, x1, x2)

inst_28846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80ce000000000000; valaddr_reg:x3; val_offset:86538*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86538*0 + 3*430*FLEN/8, x4, x1, x2)

inst_28847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cf000000000000; valaddr_reg:x3; val_offset:86541*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86541*0 + 3*431*FLEN/8, x4, x1, x2)

inst_28848:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cf800000000000; valaddr_reg:x3; val_offset:86544*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86544*0 + 3*432*FLEN/8, x4, x1, x2)

inst_28849:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfc00000000000; valaddr_reg:x3; val_offset:86547*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86547*0 + 3*433*FLEN/8, x4, x1, x2)

inst_28850:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfe00000000000; valaddr_reg:x3; val_offset:86550*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86550*0 + 3*434*FLEN/8, x4, x1, x2)

inst_28851:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cff00000000000; valaddr_reg:x3; val_offset:86553*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86553*0 + 3*435*FLEN/8, x4, x1, x2)

inst_28852:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cff80000000000; valaddr_reg:x3; val_offset:86556*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86556*0 + 3*436*FLEN/8, x4, x1, x2)

inst_28853:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffc0000000000; valaddr_reg:x3; val_offset:86559*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86559*0 + 3*437*FLEN/8, x4, x1, x2)

inst_28854:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffe0000000000; valaddr_reg:x3; val_offset:86562*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86562*0 + 3*438*FLEN/8, x4, x1, x2)

inst_28855:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfff0000000000; valaddr_reg:x3; val_offset:86565*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86565*0 + 3*439*FLEN/8, x4, x1, x2)

inst_28856:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfff8000000000; valaddr_reg:x3; val_offset:86568*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86568*0 + 3*440*FLEN/8, x4, x1, x2)

inst_28857:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffc000000000; valaddr_reg:x3; val_offset:86571*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86571*0 + 3*441*FLEN/8, x4, x1, x2)

inst_28858:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffe000000000; valaddr_reg:x3; val_offset:86574*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86574*0 + 3*442*FLEN/8, x4, x1, x2)

inst_28859:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffff000000000; valaddr_reg:x3; val_offset:86577*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86577*0 + 3*443*FLEN/8, x4, x1, x2)

inst_28860:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffff800000000; valaddr_reg:x3; val_offset:86580*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86580*0 + 3*444*FLEN/8, x4, x1, x2)

inst_28861:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffc00000000; valaddr_reg:x3; val_offset:86583*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86583*0 + 3*445*FLEN/8, x4, x1, x2)

inst_28862:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffe00000000; valaddr_reg:x3; val_offset:86586*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86586*0 + 3*446*FLEN/8, x4, x1, x2)

inst_28863:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffff00000000; valaddr_reg:x3; val_offset:86589*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86589*0 + 3*447*FLEN/8, x4, x1, x2)

inst_28864:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffff80000000; valaddr_reg:x3; val_offset:86592*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86592*0 + 3*448*FLEN/8, x4, x1, x2)

inst_28865:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffc0000000; valaddr_reg:x3; val_offset:86595*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86595*0 + 3*449*FLEN/8, x4, x1, x2)

inst_28866:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffe0000000; valaddr_reg:x3; val_offset:86598*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86598*0 + 3*450*FLEN/8, x4, x1, x2)

inst_28867:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffff0000000; valaddr_reg:x3; val_offset:86601*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86601*0 + 3*451*FLEN/8, x4, x1, x2)

inst_28868:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffff8000000; valaddr_reg:x3; val_offset:86604*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86604*0 + 3*452*FLEN/8, x4, x1, x2)

inst_28869:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffc000000; valaddr_reg:x3; val_offset:86607*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86607*0 + 3*453*FLEN/8, x4, x1, x2)

inst_28870:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffe000000; valaddr_reg:x3; val_offset:86610*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86610*0 + 3*454*FLEN/8, x4, x1, x2)

inst_28871:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffff000000; valaddr_reg:x3; val_offset:86613*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86613*0 + 3*455*FLEN/8, x4, x1, x2)

inst_28872:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffff800000; valaddr_reg:x3; val_offset:86616*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86616*0 + 3*456*FLEN/8, x4, x1, x2)

inst_28873:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffc00000; valaddr_reg:x3; val_offset:86619*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86619*0 + 3*457*FLEN/8, x4, x1, x2)

inst_28874:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffe00000; valaddr_reg:x3; val_offset:86622*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86622*0 + 3*458*FLEN/8, x4, x1, x2)

inst_28875:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffff00000; valaddr_reg:x3; val_offset:86625*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86625*0 + 3*459*FLEN/8, x4, x1, x2)

inst_28876:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffff80000; valaddr_reg:x3; val_offset:86628*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86628*0 + 3*460*FLEN/8, x4, x1, x2)

inst_28877:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffc0000; valaddr_reg:x3; val_offset:86631*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86631*0 + 3*461*FLEN/8, x4, x1, x2)

inst_28878:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffe0000; valaddr_reg:x3; val_offset:86634*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86634*0 + 3*462*FLEN/8, x4, x1, x2)

inst_28879:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffff0000; valaddr_reg:x3; val_offset:86637*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86637*0 + 3*463*FLEN/8, x4, x1, x2)

inst_28880:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffff8000; valaddr_reg:x3; val_offset:86640*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86640*0 + 3*464*FLEN/8, x4, x1, x2)

inst_28881:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffffc000; valaddr_reg:x3; val_offset:86643*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86643*0 + 3*465*FLEN/8, x4, x1, x2)

inst_28882:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffffe000; valaddr_reg:x3; val_offset:86646*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86646*0 + 3*466*FLEN/8, x4, x1, x2)

inst_28883:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffff000; valaddr_reg:x3; val_offset:86649*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86649*0 + 3*467*FLEN/8, x4, x1, x2)

inst_28884:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffff800; valaddr_reg:x3; val_offset:86652*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86652*0 + 3*468*FLEN/8, x4, x1, x2)

inst_28885:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffffc00; valaddr_reg:x3; val_offset:86655*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86655*0 + 3*469*FLEN/8, x4, x1, x2)

inst_28886:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffffe00; valaddr_reg:x3; val_offset:86658*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86658*0 + 3*470*FLEN/8, x4, x1, x2)

inst_28887:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffffff00; valaddr_reg:x3; val_offset:86661*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86661*0 + 3*471*FLEN/8, x4, x1, x2)

inst_28888:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffffff80; valaddr_reg:x3; val_offset:86664*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86664*0 + 3*472*FLEN/8, x4, x1, x2)

inst_28889:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffffffc0; valaddr_reg:x3; val_offset:86667*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86667*0 + 3*473*FLEN/8, x4, x1, x2)

inst_28890:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffffffe0; valaddr_reg:x3; val_offset:86670*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86670*0 + 3*474*FLEN/8, x4, x1, x2)

inst_28891:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffffff0; valaddr_reg:x3; val_offset:86673*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86673*0 + 3*475*FLEN/8, x4, x1, x2)

inst_28892:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffffff8; valaddr_reg:x3; val_offset:86676*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86676*0 + 3*476*FLEN/8, x4, x1, x2)

inst_28893:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffffffc; valaddr_reg:x3; val_offset:86679*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86679*0 + 3*477*FLEN/8, x4, x1, x2)

inst_28894:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cffffffffffffe; valaddr_reg:x3; val_offset:86682*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86682*0 + 3*478*FLEN/8, x4, x1, x2)

inst_28895:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22dd5567c07b9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922dd5567c07b9; op2val:0x8000;
op3val:0x80cfffffffffffff; valaddr_reg:x3; val_offset:86685*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86685*0 + 3*479*FLEN/8, x4, x1, x2)

inst_28896:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:86688*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86688*0 + 3*480*FLEN/8, x4, x1, x2)

inst_28897:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:86691*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86691*0 + 3*481*FLEN/8, x4, x1, x2)

inst_28898:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:86694*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86694*0 + 3*482*FLEN/8, x4, x1, x2)

inst_28899:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:86697*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86697*0 + 3*483*FLEN/8, x4, x1, x2)

inst_28900:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:86700*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86700*0 + 3*484*FLEN/8, x4, x1, x2)

inst_28901:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:86703*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86703*0 + 3*485*FLEN/8, x4, x1, x2)

inst_28902:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:86706*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86706*0 + 3*486*FLEN/8, x4, x1, x2)

inst_28903:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:86709*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86709*0 + 3*487*FLEN/8, x4, x1, x2)

inst_28904:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:86712*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86712*0 + 3*488*FLEN/8, x4, x1, x2)

inst_28905:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:86715*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86715*0 + 3*489*FLEN/8, x4, x1, x2)

inst_28906:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:86718*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86718*0 + 3*490*FLEN/8, x4, x1, x2)

inst_28907:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:86721*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86721*0 + 3*491*FLEN/8, x4, x1, x2)

inst_28908:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:86724*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86724*0 + 3*492*FLEN/8, x4, x1, x2)

inst_28909:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:86727*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86727*0 + 3*493*FLEN/8, x4, x1, x2)

inst_28910:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:86730*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86730*0 + 3*494*FLEN/8, x4, x1, x2)

inst_28911:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:86733*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86733*0 + 3*495*FLEN/8, x4, x1, x2)

inst_28912:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:86736*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86736*0 + 3*496*FLEN/8, x4, x1, x2)

inst_28913:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:86739*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86739*0 + 3*497*FLEN/8, x4, x1, x2)

inst_28914:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:86742*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86742*0 + 3*498*FLEN/8, x4, x1, x2)

inst_28915:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:86745*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86745*0 + 3*499*FLEN/8, x4, x1, x2)

inst_28916:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:86748*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86748*0 + 3*500*FLEN/8, x4, x1, x2)

inst_28917:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:86751*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86751*0 + 3*501*FLEN/8, x4, x1, x2)

inst_28918:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000000000; valaddr_reg:x3; val_offset:86754*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86754*0 + 3*502*FLEN/8, x4, x1, x2)

inst_28919:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000000001; valaddr_reg:x3; val_offset:86757*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86757*0 + 3*503*FLEN/8, x4, x1, x2)

inst_28920:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000000003; valaddr_reg:x3; val_offset:86760*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86760*0 + 3*504*FLEN/8, x4, x1, x2)

inst_28921:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000000007; valaddr_reg:x3; val_offset:86763*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86763*0 + 3*505*FLEN/8, x4, x1, x2)

inst_28922:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000000000f; valaddr_reg:x3; val_offset:86766*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86766*0 + 3*506*FLEN/8, x4, x1, x2)

inst_28923:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000000001f; valaddr_reg:x3; val_offset:86769*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86769*0 + 3*507*FLEN/8, x4, x1, x2)

inst_28924:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000000003f; valaddr_reg:x3; val_offset:86772*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86772*0 + 3*508*FLEN/8, x4, x1, x2)

inst_28925:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000000007f; valaddr_reg:x3; val_offset:86775*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86775*0 + 3*509*FLEN/8, x4, x1, x2)

inst_28926:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000000000ff; valaddr_reg:x3; val_offset:86778*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86778*0 + 3*510*FLEN/8, x4, x1, x2)

inst_28927:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000000001ff; valaddr_reg:x3; val_offset:86781*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86781*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_28928:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000000003ff; valaddr_reg:x3; val_offset:86784*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86784*0 + 3*512*FLEN/8, x4, x1, x2)

inst_28929:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000000007ff; valaddr_reg:x3; val_offset:86787*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86787*0 + 3*513*FLEN/8, x4, x1, x2)

inst_28930:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000000fff; valaddr_reg:x3; val_offset:86790*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86790*0 + 3*514*FLEN/8, x4, x1, x2)

inst_28931:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000001fff; valaddr_reg:x3; val_offset:86793*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86793*0 + 3*515*FLEN/8, x4, x1, x2)

inst_28932:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000003fff; valaddr_reg:x3; val_offset:86796*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86796*0 + 3*516*FLEN/8, x4, x1, x2)

inst_28933:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000007fff; valaddr_reg:x3; val_offset:86799*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86799*0 + 3*517*FLEN/8, x4, x1, x2)

inst_28934:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000000ffff; valaddr_reg:x3; val_offset:86802*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86802*0 + 3*518*FLEN/8, x4, x1, x2)

inst_28935:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000001ffff; valaddr_reg:x3; val_offset:86805*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86805*0 + 3*519*FLEN/8, x4, x1, x2)

inst_28936:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000003ffff; valaddr_reg:x3; val_offset:86808*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86808*0 + 3*520*FLEN/8, x4, x1, x2)

inst_28937:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000007ffff; valaddr_reg:x3; val_offset:86811*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86811*0 + 3*521*FLEN/8, x4, x1, x2)

inst_28938:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000000fffff; valaddr_reg:x3; val_offset:86814*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86814*0 + 3*522*FLEN/8, x4, x1, x2)

inst_28939:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000001fffff; valaddr_reg:x3; val_offset:86817*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86817*0 + 3*523*FLEN/8, x4, x1, x2)

inst_28940:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000003fffff; valaddr_reg:x3; val_offset:86820*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86820*0 + 3*524*FLEN/8, x4, x1, x2)

inst_28941:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000007fffff; valaddr_reg:x3; val_offset:86823*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86823*0 + 3*525*FLEN/8, x4, x1, x2)

inst_28942:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000000ffffff; valaddr_reg:x3; val_offset:86826*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86826*0 + 3*526*FLEN/8, x4, x1, x2)

inst_28943:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000001ffffff; valaddr_reg:x3; val_offset:86829*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86829*0 + 3*527*FLEN/8, x4, x1, x2)

inst_28944:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000003ffffff; valaddr_reg:x3; val_offset:86832*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86832*0 + 3*528*FLEN/8, x4, x1, x2)

inst_28945:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000007ffffff; valaddr_reg:x3; val_offset:86835*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86835*0 + 3*529*FLEN/8, x4, x1, x2)

inst_28946:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000000fffffff; valaddr_reg:x3; val_offset:86838*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86838*0 + 3*530*FLEN/8, x4, x1, x2)

inst_28947:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000001fffffff; valaddr_reg:x3; val_offset:86841*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86841*0 + 3*531*FLEN/8, x4, x1, x2)

inst_28948:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000003fffffff; valaddr_reg:x3; val_offset:86844*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86844*0 + 3*532*FLEN/8, x4, x1, x2)

inst_28949:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000007fffffff; valaddr_reg:x3; val_offset:86847*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86847*0 + 3*533*FLEN/8, x4, x1, x2)

inst_28950:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000000ffffffff; valaddr_reg:x3; val_offset:86850*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86850*0 + 3*534*FLEN/8, x4, x1, x2)

inst_28951:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000001ffffffff; valaddr_reg:x3; val_offset:86853*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86853*0 + 3*535*FLEN/8, x4, x1, x2)

inst_28952:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000003ffffffff; valaddr_reg:x3; val_offset:86856*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86856*0 + 3*536*FLEN/8, x4, x1, x2)

inst_28953:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000007ffffffff; valaddr_reg:x3; val_offset:86859*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86859*0 + 3*537*FLEN/8, x4, x1, x2)

inst_28954:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300000fffffffff; valaddr_reg:x3; val_offset:86862*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86862*0 + 3*538*FLEN/8, x4, x1, x2)

inst_28955:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300001fffffffff; valaddr_reg:x3; val_offset:86865*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86865*0 + 3*539*FLEN/8, x4, x1, x2)

inst_28956:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300003fffffffff; valaddr_reg:x3; val_offset:86868*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86868*0 + 3*540*FLEN/8, x4, x1, x2)

inst_28957:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300007fffffffff; valaddr_reg:x3; val_offset:86871*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86871*0 + 3*541*FLEN/8, x4, x1, x2)

inst_28958:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30000ffffffffff; valaddr_reg:x3; val_offset:86874*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86874*0 + 3*542*FLEN/8, x4, x1, x2)

inst_28959:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30001ffffffffff; valaddr_reg:x3; val_offset:86877*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86877*0 + 3*543*FLEN/8, x4, x1, x2)

inst_28960:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30003ffffffffff; valaddr_reg:x3; val_offset:86880*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86880*0 + 3*544*FLEN/8, x4, x1, x2)

inst_28961:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30007ffffffffff; valaddr_reg:x3; val_offset:86883*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86883*0 + 3*545*FLEN/8, x4, x1, x2)

inst_28962:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3000fffffffffff; valaddr_reg:x3; val_offset:86886*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86886*0 + 3*546*FLEN/8, x4, x1, x2)

inst_28963:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3001fffffffffff; valaddr_reg:x3; val_offset:86889*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86889*0 + 3*547*FLEN/8, x4, x1, x2)

inst_28964:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3003fffffffffff; valaddr_reg:x3; val_offset:86892*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86892*0 + 3*548*FLEN/8, x4, x1, x2)

inst_28965:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x3007fffffffffff; valaddr_reg:x3; val_offset:86895*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86895*0 + 3*549*FLEN/8, x4, x1, x2)

inst_28966:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x300ffffffffffff; valaddr_reg:x3; val_offset:86898*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86898*0 + 3*550*FLEN/8, x4, x1, x2)

inst_28967:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x301ffffffffffff; valaddr_reg:x3; val_offset:86901*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86901*0 + 3*551*FLEN/8, x4, x1, x2)

inst_28968:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x303ffffffffffff; valaddr_reg:x3; val_offset:86904*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86904*0 + 3*552*FLEN/8, x4, x1, x2)

inst_28969:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x307ffffffffffff; valaddr_reg:x3; val_offset:86907*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86907*0 + 3*553*FLEN/8, x4, x1, x2)

inst_28970:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x308000000000000; valaddr_reg:x3; val_offset:86910*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86910*0 + 3*554*FLEN/8, x4, x1, x2)

inst_28971:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30c000000000000; valaddr_reg:x3; val_offset:86913*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86913*0 + 3*555*FLEN/8, x4, x1, x2)

inst_28972:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30e000000000000; valaddr_reg:x3; val_offset:86916*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86916*0 + 3*556*FLEN/8, x4, x1, x2)

inst_28973:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30f000000000000; valaddr_reg:x3; val_offset:86919*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86919*0 + 3*557*FLEN/8, x4, x1, x2)

inst_28974:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30f800000000000; valaddr_reg:x3; val_offset:86922*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86922*0 + 3*558*FLEN/8, x4, x1, x2)

inst_28975:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fc00000000000; valaddr_reg:x3; val_offset:86925*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86925*0 + 3*559*FLEN/8, x4, x1, x2)

inst_28976:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fe00000000000; valaddr_reg:x3; val_offset:86928*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86928*0 + 3*560*FLEN/8, x4, x1, x2)

inst_28977:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ff00000000000; valaddr_reg:x3; val_offset:86931*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86931*0 + 3*561*FLEN/8, x4, x1, x2)

inst_28978:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ff80000000000; valaddr_reg:x3; val_offset:86934*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86934*0 + 3*562*FLEN/8, x4, x1, x2)

inst_28979:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffc0000000000; valaddr_reg:x3; val_offset:86937*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86937*0 + 3*563*FLEN/8, x4, x1, x2)

inst_28980:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffe0000000000; valaddr_reg:x3; val_offset:86940*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86940*0 + 3*564*FLEN/8, x4, x1, x2)

inst_28981:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fff0000000000; valaddr_reg:x3; val_offset:86943*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86943*0 + 3*565*FLEN/8, x4, x1, x2)

inst_28982:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fff8000000000; valaddr_reg:x3; val_offset:86946*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86946*0 + 3*566*FLEN/8, x4, x1, x2)

inst_28983:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffc000000000; valaddr_reg:x3; val_offset:86949*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86949*0 + 3*567*FLEN/8, x4, x1, x2)

inst_28984:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffe000000000; valaddr_reg:x3; val_offset:86952*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86952*0 + 3*568*FLEN/8, x4, x1, x2)

inst_28985:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffff000000000; valaddr_reg:x3; val_offset:86955*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86955*0 + 3*569*FLEN/8, x4, x1, x2)

inst_28986:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffff800000000; valaddr_reg:x3; val_offset:86958*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86958*0 + 3*570*FLEN/8, x4, x1, x2)

inst_28987:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffc00000000; valaddr_reg:x3; val_offset:86961*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86961*0 + 3*571*FLEN/8, x4, x1, x2)

inst_28988:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffe00000000; valaddr_reg:x3; val_offset:86964*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86964*0 + 3*572*FLEN/8, x4, x1, x2)

inst_28989:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffff00000000; valaddr_reg:x3; val_offset:86967*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86967*0 + 3*573*FLEN/8, x4, x1, x2)

inst_28990:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffff80000000; valaddr_reg:x3; val_offset:86970*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86970*0 + 3*574*FLEN/8, x4, x1, x2)

inst_28991:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffc0000000; valaddr_reg:x3; val_offset:86973*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86973*0 + 3*575*FLEN/8, x4, x1, x2)

inst_28992:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffe0000000; valaddr_reg:x3; val_offset:86976*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86976*0 + 3*576*FLEN/8, x4, x1, x2)

inst_28993:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffff0000000; valaddr_reg:x3; val_offset:86979*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86979*0 + 3*577*FLEN/8, x4, x1, x2)

inst_28994:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffff8000000; valaddr_reg:x3; val_offset:86982*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86982*0 + 3*578*FLEN/8, x4, x1, x2)

inst_28995:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffc000000; valaddr_reg:x3; val_offset:86985*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86985*0 + 3*579*FLEN/8, x4, x1, x2)

inst_28996:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffe000000; valaddr_reg:x3; val_offset:86988*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86988*0 + 3*580*FLEN/8, x4, x1, x2)

inst_28997:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffff000000; valaddr_reg:x3; val_offset:86991*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86991*0 + 3*581*FLEN/8, x4, x1, x2)

inst_28998:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffff800000; valaddr_reg:x3; val_offset:86994*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86994*0 + 3*582*FLEN/8, x4, x1, x2)

inst_28999:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffc00000; valaddr_reg:x3; val_offset:86997*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 86997*0 + 3*583*FLEN/8, x4, x1, x2)

inst_29000:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffe00000; valaddr_reg:x3; val_offset:87000*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87000*0 + 3*584*FLEN/8, x4, x1, x2)

inst_29001:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffff00000; valaddr_reg:x3; val_offset:87003*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87003*0 + 3*585*FLEN/8, x4, x1, x2)

inst_29002:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffff80000; valaddr_reg:x3; val_offset:87006*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87006*0 + 3*586*FLEN/8, x4, x1, x2)

inst_29003:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffc0000; valaddr_reg:x3; val_offset:87009*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87009*0 + 3*587*FLEN/8, x4, x1, x2)

inst_29004:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffe0000; valaddr_reg:x3; val_offset:87012*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87012*0 + 3*588*FLEN/8, x4, x1, x2)

inst_29005:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffff0000; valaddr_reg:x3; val_offset:87015*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87015*0 + 3*589*FLEN/8, x4, x1, x2)

inst_29006:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffff8000; valaddr_reg:x3; val_offset:87018*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87018*0 + 3*590*FLEN/8, x4, x1, x2)

inst_29007:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffffc000; valaddr_reg:x3; val_offset:87021*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87021*0 + 3*591*FLEN/8, x4, x1, x2)

inst_29008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffffe000; valaddr_reg:x3; val_offset:87024*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87024*0 + 3*592*FLEN/8, x4, x1, x2)

inst_29009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffff000; valaddr_reg:x3; val_offset:87027*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87027*0 + 3*593*FLEN/8, x4, x1, x2)

inst_29010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffff800; valaddr_reg:x3; val_offset:87030*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87030*0 + 3*594*FLEN/8, x4, x1, x2)

inst_29011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffffc00; valaddr_reg:x3; val_offset:87033*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87033*0 + 3*595*FLEN/8, x4, x1, x2)

inst_29012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffffe00; valaddr_reg:x3; val_offset:87036*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87036*0 + 3*596*FLEN/8, x4, x1, x2)

inst_29013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffffff00; valaddr_reg:x3; val_offset:87039*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87039*0 + 3*597*FLEN/8, x4, x1, x2)

inst_29014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffffff80; valaddr_reg:x3; val_offset:87042*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87042*0 + 3*598*FLEN/8, x4, x1, x2)

inst_29015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffffffc0; valaddr_reg:x3; val_offset:87045*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87045*0 + 3*599*FLEN/8, x4, x1, x2)

inst_29016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffffffe0; valaddr_reg:x3; val_offset:87048*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87048*0 + 3*600*FLEN/8, x4, x1, x2)

inst_29017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffffff0; valaddr_reg:x3; val_offset:87051*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87051*0 + 3*601*FLEN/8, x4, x1, x2)

inst_29018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffffff8; valaddr_reg:x3; val_offset:87054*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87054*0 + 3*602*FLEN/8, x4, x1, x2)

inst_29019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffffffc; valaddr_reg:x3; val_offset:87057*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87057*0 + 3*603*FLEN/8, x4, x1, x2)

inst_29020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30ffffffffffffe; valaddr_reg:x3; val_offset:87060*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87060*0 + 3*604*FLEN/8, x4, x1, x2)

inst_29021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x22faac4b35d73 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f922faac4b35d73; op2val:0x0;
op3val:0x30fffffffffffff; valaddr_reg:x3; val_offset:87063*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87063*0 + 3*605*FLEN/8, x4, x1, x2)

inst_29022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000000000; valaddr_reg:x3; val_offset:87066*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87066*0 + 3*606*FLEN/8, x4, x1, x2)

inst_29023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000000001; valaddr_reg:x3; val_offset:87069*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87069*0 + 3*607*FLEN/8, x4, x1, x2)

inst_29024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000000003; valaddr_reg:x3; val_offset:87072*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87072*0 + 3*608*FLEN/8, x4, x1, x2)

inst_29025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000000007; valaddr_reg:x3; val_offset:87075*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87075*0 + 3*609*FLEN/8, x4, x1, x2)

inst_29026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000000000f; valaddr_reg:x3; val_offset:87078*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87078*0 + 3*610*FLEN/8, x4, x1, x2)

inst_29027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000000001f; valaddr_reg:x3; val_offset:87081*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87081*0 + 3*611*FLEN/8, x4, x1, x2)

inst_29028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000000003f; valaddr_reg:x3; val_offset:87084*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87084*0 + 3*612*FLEN/8, x4, x1, x2)

inst_29029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000000007f; valaddr_reg:x3; val_offset:87087*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87087*0 + 3*613*FLEN/8, x4, x1, x2)

inst_29030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000000000ff; valaddr_reg:x3; val_offset:87090*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87090*0 + 3*614*FLEN/8, x4, x1, x2)

inst_29031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000000001ff; valaddr_reg:x3; val_offset:87093*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87093*0 + 3*615*FLEN/8, x4, x1, x2)

inst_29032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000000003ff; valaddr_reg:x3; val_offset:87096*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87096*0 + 3*616*FLEN/8, x4, x1, x2)

inst_29033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000000007ff; valaddr_reg:x3; val_offset:87099*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87099*0 + 3*617*FLEN/8, x4, x1, x2)

inst_29034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000000fff; valaddr_reg:x3; val_offset:87102*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87102*0 + 3*618*FLEN/8, x4, x1, x2)

inst_29035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000001fff; valaddr_reg:x3; val_offset:87105*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87105*0 + 3*619*FLEN/8, x4, x1, x2)

inst_29036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000003fff; valaddr_reg:x3; val_offset:87108*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87108*0 + 3*620*FLEN/8, x4, x1, x2)

inst_29037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000007fff; valaddr_reg:x3; val_offset:87111*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87111*0 + 3*621*FLEN/8, x4, x1, x2)

inst_29038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000000ffff; valaddr_reg:x3; val_offset:87114*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87114*0 + 3*622*FLEN/8, x4, x1, x2)

inst_29039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000001ffff; valaddr_reg:x3; val_offset:87117*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87117*0 + 3*623*FLEN/8, x4, x1, x2)

inst_29040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000003ffff; valaddr_reg:x3; val_offset:87120*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87120*0 + 3*624*FLEN/8, x4, x1, x2)

inst_29041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000007ffff; valaddr_reg:x3; val_offset:87123*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87123*0 + 3*625*FLEN/8, x4, x1, x2)

inst_29042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000000fffff; valaddr_reg:x3; val_offset:87126*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87126*0 + 3*626*FLEN/8, x4, x1, x2)

inst_29043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000001fffff; valaddr_reg:x3; val_offset:87129*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87129*0 + 3*627*FLEN/8, x4, x1, x2)

inst_29044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000003fffff; valaddr_reg:x3; val_offset:87132*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87132*0 + 3*628*FLEN/8, x4, x1, x2)

inst_29045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000007fffff; valaddr_reg:x3; val_offset:87135*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87135*0 + 3*629*FLEN/8, x4, x1, x2)

inst_29046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000000ffffff; valaddr_reg:x3; val_offset:87138*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87138*0 + 3*630*FLEN/8, x4, x1, x2)

inst_29047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000001ffffff; valaddr_reg:x3; val_offset:87141*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87141*0 + 3*631*FLEN/8, x4, x1, x2)

inst_29048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000003ffffff; valaddr_reg:x3; val_offset:87144*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87144*0 + 3*632*FLEN/8, x4, x1, x2)

inst_29049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000007ffffff; valaddr_reg:x3; val_offset:87147*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87147*0 + 3*633*FLEN/8, x4, x1, x2)

inst_29050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000000fffffff; valaddr_reg:x3; val_offset:87150*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87150*0 + 3*634*FLEN/8, x4, x1, x2)

inst_29051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000001fffffff; valaddr_reg:x3; val_offset:87153*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87153*0 + 3*635*FLEN/8, x4, x1, x2)

inst_29052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000003fffffff; valaddr_reg:x3; val_offset:87156*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87156*0 + 3*636*FLEN/8, x4, x1, x2)

inst_29053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000007fffffff; valaddr_reg:x3; val_offset:87159*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87159*0 + 3*637*FLEN/8, x4, x1, x2)

inst_29054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200000ffffffff; valaddr_reg:x3; val_offset:87162*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87162*0 + 3*638*FLEN/8, x4, x1, x2)

inst_29055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200001ffffffff; valaddr_reg:x3; val_offset:87165*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87165*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_29056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200003ffffffff; valaddr_reg:x3; val_offset:87168*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87168*0 + 3*640*FLEN/8, x4, x1, x2)

inst_29057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200007ffffffff; valaddr_reg:x3; val_offset:87171*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87171*0 + 3*641*FLEN/8, x4, x1, x2)

inst_29058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20000fffffffff; valaddr_reg:x3; val_offset:87174*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87174*0 + 3*642*FLEN/8, x4, x1, x2)

inst_29059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20001fffffffff; valaddr_reg:x3; val_offset:87177*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87177*0 + 3*643*FLEN/8, x4, x1, x2)

inst_29060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20003fffffffff; valaddr_reg:x3; val_offset:87180*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87180*0 + 3*644*FLEN/8, x4, x1, x2)

inst_29061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20007fffffffff; valaddr_reg:x3; val_offset:87183*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87183*0 + 3*645*FLEN/8, x4, x1, x2)

inst_29062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2000ffffffffff; valaddr_reg:x3; val_offset:87186*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87186*0 + 3*646*FLEN/8, x4, x1, x2)

inst_29063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2001ffffffffff; valaddr_reg:x3; val_offset:87189*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87189*0 + 3*647*FLEN/8, x4, x1, x2)

inst_29064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2003ffffffffff; valaddr_reg:x3; val_offset:87192*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87192*0 + 3*648*FLEN/8, x4, x1, x2)

inst_29065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2007ffffffffff; valaddr_reg:x3; val_offset:87195*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87195*0 + 3*649*FLEN/8, x4, x1, x2)

inst_29066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb200fffffffffff; valaddr_reg:x3; val_offset:87198*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87198*0 + 3*650*FLEN/8, x4, x1, x2)

inst_29067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb201fffffffffff; valaddr_reg:x3; val_offset:87201*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87201*0 + 3*651*FLEN/8, x4, x1, x2)

inst_29068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb203fffffffffff; valaddr_reg:x3; val_offset:87204*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87204*0 + 3*652*FLEN/8, x4, x1, x2)

inst_29069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb207fffffffffff; valaddr_reg:x3; val_offset:87207*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87207*0 + 3*653*FLEN/8, x4, x1, x2)

inst_29070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb20ffffffffffff; valaddr_reg:x3; val_offset:87210*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87210*0 + 3*654*FLEN/8, x4, x1, x2)

inst_29071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb21ffffffffffff; valaddr_reg:x3; val_offset:87213*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87213*0 + 3*655*FLEN/8, x4, x1, x2)

inst_29072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb23ffffffffffff; valaddr_reg:x3; val_offset:87216*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87216*0 + 3*656*FLEN/8, x4, x1, x2)

inst_29073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb27ffffffffffff; valaddr_reg:x3; val_offset:87219*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87219*0 + 3*657*FLEN/8, x4, x1, x2)

inst_29074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb28000000000000; valaddr_reg:x3; val_offset:87222*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87222*0 + 3*658*FLEN/8, x4, x1, x2)

inst_29075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2c000000000000; valaddr_reg:x3; val_offset:87225*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87225*0 + 3*659*FLEN/8, x4, x1, x2)

inst_29076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2e000000000000; valaddr_reg:x3; val_offset:87228*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87228*0 + 3*660*FLEN/8, x4, x1, x2)

inst_29077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2f000000000000; valaddr_reg:x3; val_offset:87231*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87231*0 + 3*661*FLEN/8, x4, x1, x2)

inst_29078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2f800000000000; valaddr_reg:x3; val_offset:87234*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87234*0 + 3*662*FLEN/8, x4, x1, x2)

inst_29079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fc00000000000; valaddr_reg:x3; val_offset:87237*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87237*0 + 3*663*FLEN/8, x4, x1, x2)

inst_29080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fe00000000000; valaddr_reg:x3; val_offset:87240*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87240*0 + 3*664*FLEN/8, x4, x1, x2)

inst_29081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ff00000000000; valaddr_reg:x3; val_offset:87243*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87243*0 + 3*665*FLEN/8, x4, x1, x2)

inst_29082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ff80000000000; valaddr_reg:x3; val_offset:87246*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87246*0 + 3*666*FLEN/8, x4, x1, x2)

inst_29083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffc0000000000; valaddr_reg:x3; val_offset:87249*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87249*0 + 3*667*FLEN/8, x4, x1, x2)

inst_29084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffe0000000000; valaddr_reg:x3; val_offset:87252*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87252*0 + 3*668*FLEN/8, x4, x1, x2)

inst_29085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fff0000000000; valaddr_reg:x3; val_offset:87255*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87255*0 + 3*669*FLEN/8, x4, x1, x2)

inst_29086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fff8000000000; valaddr_reg:x3; val_offset:87258*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87258*0 + 3*670*FLEN/8, x4, x1, x2)

inst_29087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffc000000000; valaddr_reg:x3; val_offset:87261*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87261*0 + 3*671*FLEN/8, x4, x1, x2)

inst_29088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffe000000000; valaddr_reg:x3; val_offset:87264*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87264*0 + 3*672*FLEN/8, x4, x1, x2)

inst_29089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffff000000000; valaddr_reg:x3; val_offset:87267*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87267*0 + 3*673*FLEN/8, x4, x1, x2)

inst_29090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffff800000000; valaddr_reg:x3; val_offset:87270*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87270*0 + 3*674*FLEN/8, x4, x1, x2)

inst_29091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffc00000000; valaddr_reg:x3; val_offset:87273*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87273*0 + 3*675*FLEN/8, x4, x1, x2)

inst_29092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffe00000000; valaddr_reg:x3; val_offset:87276*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87276*0 + 3*676*FLEN/8, x4, x1, x2)

inst_29093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffff00000000; valaddr_reg:x3; val_offset:87279*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87279*0 + 3*677*FLEN/8, x4, x1, x2)

inst_29094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffff80000000; valaddr_reg:x3; val_offset:87282*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87282*0 + 3*678*FLEN/8, x4, x1, x2)

inst_29095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffc0000000; valaddr_reg:x3; val_offset:87285*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87285*0 + 3*679*FLEN/8, x4, x1, x2)

inst_29096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffe0000000; valaddr_reg:x3; val_offset:87288*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87288*0 + 3*680*FLEN/8, x4, x1, x2)

inst_29097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffff0000000; valaddr_reg:x3; val_offset:87291*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87291*0 + 3*681*FLEN/8, x4, x1, x2)

inst_29098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffff8000000; valaddr_reg:x3; val_offset:87294*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87294*0 + 3*682*FLEN/8, x4, x1, x2)

inst_29099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffc000000; valaddr_reg:x3; val_offset:87297*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87297*0 + 3*683*FLEN/8, x4, x1, x2)

inst_29100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffe000000; valaddr_reg:x3; val_offset:87300*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87300*0 + 3*684*FLEN/8, x4, x1, x2)

inst_29101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffff000000; valaddr_reg:x3; val_offset:87303*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87303*0 + 3*685*FLEN/8, x4, x1, x2)

inst_29102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffff800000; valaddr_reg:x3; val_offset:87306*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87306*0 + 3*686*FLEN/8, x4, x1, x2)

inst_29103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffc00000; valaddr_reg:x3; val_offset:87309*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87309*0 + 3*687*FLEN/8, x4, x1, x2)

inst_29104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffe00000; valaddr_reg:x3; val_offset:87312*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87312*0 + 3*688*FLEN/8, x4, x1, x2)

inst_29105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffff00000; valaddr_reg:x3; val_offset:87315*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87315*0 + 3*689*FLEN/8, x4, x1, x2)

inst_29106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffff80000; valaddr_reg:x3; val_offset:87318*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87318*0 + 3*690*FLEN/8, x4, x1, x2)

inst_29107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffc0000; valaddr_reg:x3; val_offset:87321*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87321*0 + 3*691*FLEN/8, x4, x1, x2)

inst_29108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffe0000; valaddr_reg:x3; val_offset:87324*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87324*0 + 3*692*FLEN/8, x4, x1, x2)

inst_29109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffff0000; valaddr_reg:x3; val_offset:87327*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87327*0 + 3*693*FLEN/8, x4, x1, x2)

inst_29110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffff8000; valaddr_reg:x3; val_offset:87330*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87330*0 + 3*694*FLEN/8, x4, x1, x2)

inst_29111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffffc000; valaddr_reg:x3; val_offset:87333*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87333*0 + 3*695*FLEN/8, x4, x1, x2)

inst_29112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffffe000; valaddr_reg:x3; val_offset:87336*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87336*0 + 3*696*FLEN/8, x4, x1, x2)

inst_29113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffff000; valaddr_reg:x3; val_offset:87339*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87339*0 + 3*697*FLEN/8, x4, x1, x2)

inst_29114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffff800; valaddr_reg:x3; val_offset:87342*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87342*0 + 3*698*FLEN/8, x4, x1, x2)

inst_29115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffffc00; valaddr_reg:x3; val_offset:87345*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87345*0 + 3*699*FLEN/8, x4, x1, x2)

inst_29116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffffe00; valaddr_reg:x3; val_offset:87348*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87348*0 + 3*700*FLEN/8, x4, x1, x2)

inst_29117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffffff00; valaddr_reg:x3; val_offset:87351*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87351*0 + 3*701*FLEN/8, x4, x1, x2)

inst_29118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffffff80; valaddr_reg:x3; val_offset:87354*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87354*0 + 3*702*FLEN/8, x4, x1, x2)

inst_29119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffffffc0; valaddr_reg:x3; val_offset:87357*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87357*0 + 3*703*FLEN/8, x4, x1, x2)

inst_29120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffffffe0; valaddr_reg:x3; val_offset:87360*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87360*0 + 3*704*FLEN/8, x4, x1, x2)

inst_29121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffffff0; valaddr_reg:x3; val_offset:87363*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87363*0 + 3*705*FLEN/8, x4, x1, x2)

inst_29122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffffff8; valaddr_reg:x3; val_offset:87366*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87366*0 + 3*706*FLEN/8, x4, x1, x2)

inst_29123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffffffc; valaddr_reg:x3; val_offset:87369*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87369*0 + 3*707*FLEN/8, x4, x1, x2)

inst_29124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2ffffffffffffe; valaddr_reg:x3; val_offset:87372*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87372*0 + 3*708*FLEN/8, x4, x1, x2)

inst_29125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3b2 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbb2fffffffffffff; valaddr_reg:x3; val_offset:87375*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87375*0 + 3*709*FLEN/8, x4, x1, x2)

inst_29126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:87378*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87378*0 + 3*710*FLEN/8, x4, x1, x2)

inst_29127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:87381*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87381*0 + 3*711*FLEN/8, x4, x1, x2)

inst_29128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:87384*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87384*0 + 3*712*FLEN/8, x4, x1, x2)

inst_29129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:87387*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87387*0 + 3*713*FLEN/8, x4, x1, x2)

inst_29130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:87390*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87390*0 + 3*714*FLEN/8, x4, x1, x2)

inst_29131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:87393*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87393*0 + 3*715*FLEN/8, x4, x1, x2)

inst_29132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:87396*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87396*0 + 3*716*FLEN/8, x4, x1, x2)

inst_29133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:87399*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87399*0 + 3*717*FLEN/8, x4, x1, x2)

inst_29134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:87402*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87402*0 + 3*718*FLEN/8, x4, x1, x2)

inst_29135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:87405*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87405*0 + 3*719*FLEN/8, x4, x1, x2)

inst_29136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:87408*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87408*0 + 3*720*FLEN/8, x4, x1, x2)

inst_29137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:87411*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87411*0 + 3*721*FLEN/8, x4, x1, x2)

inst_29138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:87414*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87414*0 + 3*722*FLEN/8, x4, x1, x2)

inst_29139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:87417*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87417*0 + 3*723*FLEN/8, x4, x1, x2)

inst_29140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:87420*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87420*0 + 3*724*FLEN/8, x4, x1, x2)

inst_29141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:87423*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87423*0 + 3*725*FLEN/8, x4, x1, x2)

inst_29142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:87426*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87426*0 + 3*726*FLEN/8, x4, x1, x2)

inst_29143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:87429*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87429*0 + 3*727*FLEN/8, x4, x1, x2)

inst_29144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:87432*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87432*0 + 3*728*FLEN/8, x4, x1, x2)

inst_29145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:87435*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87435*0 + 3*729*FLEN/8, x4, x1, x2)

inst_29146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:87438*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87438*0 + 3*730*FLEN/8, x4, x1, x2)

inst_29147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29cd1fe017e0f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xb821e7e7ca332 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929cd1fe017e0f; op2val:0x9fdb821e7e7ca332;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:87441*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87441*0 + 3*731*FLEN/8, x4, x1, x2)

inst_29148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:87444*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87444*0 + 3*732*FLEN/8, x4, x1, x2)

inst_29149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:87447*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87447*0 + 3*733*FLEN/8, x4, x1, x2)

inst_29150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:87450*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87450*0 + 3*734*FLEN/8, x4, x1, x2)

inst_29151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:87453*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87453*0 + 3*735*FLEN/8, x4, x1, x2)

inst_29152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:87456*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87456*0 + 3*736*FLEN/8, x4, x1, x2)

inst_29153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:87459*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87459*0 + 3*737*FLEN/8, x4, x1, x2)

inst_29154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:87462*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87462*0 + 3*738*FLEN/8, x4, x1, x2)

inst_29155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:87465*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87465*0 + 3*739*FLEN/8, x4, x1, x2)

inst_29156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:87468*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87468*0 + 3*740*FLEN/8, x4, x1, x2)

inst_29157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:87471*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87471*0 + 3*741*FLEN/8, x4, x1, x2)

inst_29158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:87474*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87474*0 + 3*742*FLEN/8, x4, x1, x2)

inst_29159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:87477*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87477*0 + 3*743*FLEN/8, x4, x1, x2)

inst_29160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:87480*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87480*0 + 3*744*FLEN/8, x4, x1, x2)

inst_29161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:87483*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87483*0 + 3*745*FLEN/8, x4, x1, x2)

inst_29162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:87486*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87486*0 + 3*746*FLEN/8, x4, x1, x2)

inst_29163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:87489*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87489*0 + 3*747*FLEN/8, x4, x1, x2)

inst_29164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:87492*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87492*0 + 3*748*FLEN/8, x4, x1, x2)

inst_29165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:87495*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87495*0 + 3*749*FLEN/8, x4, x1, x2)

inst_29166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:87498*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87498*0 + 3*750*FLEN/8, x4, x1, x2)

inst_29167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:87501*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87501*0 + 3*751*FLEN/8, x4, x1, x2)

inst_29168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:87504*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87504*0 + 3*752*FLEN/8, x4, x1, x2)

inst_29169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:87507*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87507*0 + 3*753*FLEN/8, x4, x1, x2)

inst_29170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x10000000000000; valaddr_reg:x3; val_offset:87510*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87510*0 + 3*754*FLEN/8, x4, x1, x2)

inst_29171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:87513*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87513*0 + 3*755*FLEN/8, x4, x1, x2)

inst_29172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:87516*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87516*0 + 3*756*FLEN/8, x4, x1, x2)

inst_29173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:87519*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87519*0 + 3*757*FLEN/8, x4, x1, x2)

inst_29174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:87522*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87522*0 + 3*758*FLEN/8, x4, x1, x2)

inst_29175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:87525*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87525*0 + 3*759*FLEN/8, x4, x1, x2)

inst_29176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:87528*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87528*0 + 3*760*FLEN/8, x4, x1, x2)

inst_29177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x1000000000007f; valaddr_reg:x3; val_offset:87531*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87531*0 + 3*761*FLEN/8, x4, x1, x2)

inst_29178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x100000000000ff; valaddr_reg:x3; val_offset:87534*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87534*0 + 3*762*FLEN/8, x4, x1, x2)

inst_29179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x100000000001ff; valaddr_reg:x3; val_offset:87537*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87537*0 + 3*763*FLEN/8, x4, x1, x2)

inst_29180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x100000000003ff; valaddr_reg:x3; val_offset:87540*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87540*0 + 3*764*FLEN/8, x4, x1, x2)

inst_29181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x100000000007ff; valaddr_reg:x3; val_offset:87543*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87543*0 + 3*765*FLEN/8, x4, x1, x2)

inst_29182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x10000000000fff; valaddr_reg:x3; val_offset:87546*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87546*0 + 3*766*FLEN/8, x4, x1, x2)

inst_29183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x29de05509933b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f929de05509933b; op2val:0x0;
op3val:0x10000000001fff; valaddr_reg:x3; val_offset:87549*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 87549*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186947,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186951,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186959,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186975,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187007,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187071,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187199,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187455,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783187967,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783188991,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783191039,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783195135,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783203327,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783219711,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783252479,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783318015,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783449087,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783711231,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394784235519,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394785284095,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394787381247,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394791575551,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394799964159,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394816741375,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394850295807,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394917404671,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050395051622399,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050395320057855,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050395856928767,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050396930670591,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050399078154239,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050403373121535,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050411963056127,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050429142925311,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050463502663679,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050532222140415,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050669661093887,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050944539000831,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63051494294814719,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63052593806442495,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63054792829698047,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63059190876209151,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63067986969231359,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63085579155275775,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63120763527364607,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63191132271542271,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63331869759897599,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63613344736608255,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(64176294690029567,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(65302194596872191,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(65302194596872192,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(66428094503714816,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(66991044457136128,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67272519433846784,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67413256922202112,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67483625666379776,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67518810038468608,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67536402224513024,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67545198317535232,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67549596364046336,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67551795387301888,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67552894898929664,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553444654743552,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553719532650496,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553856971603968,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553925691080704,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553960050819072,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553977230688256,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553985820622848,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553990115590144,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553992263073792,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553993336815616,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553993873686528,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994142121984,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994276339712,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994343448576,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994377003008,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994393780224,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994402168832,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994406363136,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994408460288,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994409508864,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410033152,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410295296,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410426368,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410491904,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410524672,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410541056,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410549248,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410553344,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410555392,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410556416,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410556928,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557184,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557312,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557376,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557408,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557424,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557432,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557436,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557438,64,FLEN)
NAN_BOXED(6886531126160949755,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557439,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002624,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002625,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002627,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002631,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002639,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002655,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002687,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002751,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663002879,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663003135,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663003647,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663004671,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663006719,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663010815,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663019007,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663035391,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663068159,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663133695,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663264767,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293663526911,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293664051199,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293665099775,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293667196927,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293671391231,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293679779839,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293696557055,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293730111487,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293797220351,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187293931438079,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187294199873535,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187294736744447,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187295810486271,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187297957969919,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187302252937215,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187310842871807,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187328022740991,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187362382479359,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187431101956095,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187568540909567,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371187843418816511,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371188393174630399,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371189492686258175,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371191691709513727,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371196089756024831,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371204885849047039,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371222478035091455,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371257662407180287,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371328031151357951,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371468768639713279,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13371750243616423935,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13372313193569845247,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13373439093476687871,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13373439093476687872,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13374564993383530496,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375127943336951808,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375409418313662464,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375550155802017792,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375620524546195456,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375655708918284288,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375673301104328704,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375682097197350912,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375686495243862016,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375688694267117568,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375689793778745344,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690343534559232,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690618412466176,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690755851419648,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690824570896384,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690858930634752,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690876110503936,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690884700438528,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690888995405824,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690891142889472,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690892216631296,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690892753502208,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893021937664,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893156155392,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893223264256,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893256818688,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893273595904,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893281984512,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893286178816,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893288275968,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893289324544,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893289848832,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290110976,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290242048,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290307584,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290340352,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290356736,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290364928,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290369024,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290371072,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290372096,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290372608,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290372864,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290372992,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290373056,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290373088,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290373104,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290373112,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290373116,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290373118,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13375690893290373119,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6886558434556583707,64,FLEN)
NAN_BOXED(11519220256837866577,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305664,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305665,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305667,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305671,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305679,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305695,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305727,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305791,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648305919,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648306175,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648306687,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648307711,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648309759,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648313855,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648322047,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648338431,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648371199,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648436735,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648567807,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042648829951,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042649354239,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042650402815,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042652499967,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042656694271,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042665082879,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042681860095,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042715414527,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042782523391,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952042916741119,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952043185176575,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952043722047487,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952044795789311,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952046943272959,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952051238240255,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952059828174847,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952077008044031,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952111367782399,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952180087259135,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952317526212607,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318952592404119551,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318953142159933439,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318954241671561215,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318956440694816767,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318960838741327871,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318969634834350079,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4318987227020394495,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4319022411392483327,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4319092780136660991,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4319233517625016319,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4319514992601726975,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4320077942555148287,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4321203842461990911,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4321203842461990912,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4322329742368833536,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4322892692322254848,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323174167298965504,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323314904787320832,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323385273531498496,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323420457903587328,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323438050089631744,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323446846182653952,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323451244229165056,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323453443252420608,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323454542764048384,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455092519862272,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455367397769216,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455504836722688,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455573556199424,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455607915937792,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455625095806976,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455633685741568,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455637980708864,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455640128192512,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455641201934336,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455641738805248,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642007240704,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642141458432,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642208567296,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642242121728,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642258898944,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642267287552,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642271481856,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642273579008,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642274627584,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275151872,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275414016,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275545088,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275610624,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275643392,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275659776,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275667968,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275672064,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275674112,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275675136,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275675648,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275675904,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676032,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676096,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676128,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676144,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676152,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676156,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676158,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4323455642275676159,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6886568612545760749,64,FLEN)
NAN_BOXED(2327357312926030958,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221760,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221761,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221763,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221767,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221775,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221791,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221823,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221887,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383222015,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383222271,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383222783,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383223807,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383225855,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383229951,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383238143,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383254527,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383287295,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383352831,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383483903,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383746047,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232384270335,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232385318911,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232387416063,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232391610367,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232399998975,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232416776191,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232450330623,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232517439487,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232651657215,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232920092671,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415233456963583,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415234530705407,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415236678189055,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415240973156351,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415249563090943,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415266742960127,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415301102698495,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415369822175231,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415507261128703,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415782139035647,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277416331894849535,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277417431406477311,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277419630429732863,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277424028476243967,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277432824569266175,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277450416755310591,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277485601127399423,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277555969871577087,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277696707359932415,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277978182336643071,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9278541132290064383,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9279667032196907007,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9279667032196907008,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9280792932103749632,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281355882057170944,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281637357033881600,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281778094522236928,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281848463266414592,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281883647638503424,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281901239824547840,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281910035917570048,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281914433964081152,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281916632987336704,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281917732498964480,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918282254778368,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918557132685312,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918694571638784,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918763291115520,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918797650853888,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918814830723072,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918823420657664,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918827715624960,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918829863108608,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918830936850432,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831473721344,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831742156800,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831876374528,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831943483392,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831977037824,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831993815040,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832002203648,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832006397952,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832008495104,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832009543680,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010067968,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010330112,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010461184,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010526720,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010559488,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010575872,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010584064,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010588160,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010590208,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010591232,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010591744,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592000,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592128,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592192,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592224,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592240,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592248,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592252,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592254,64,FLEN)
NAN_BOXED(6886617174505162681,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592255,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783808,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783809,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783811,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783815,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783823,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783839,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783871,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783935,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784063,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784319,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784831,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113785855,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113787903,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113791999,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113800191,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113816575,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113849343,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113914879,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114045951,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114308095,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114832383,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782115880959,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782117978111,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782122172415,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782130561023,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782147338239,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782180892671,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782248001535,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782382219263,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782650654719,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172783187525631,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172784261267455,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172786408751103,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172790703718399,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172799293652991,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172816473522175,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172850833260543,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172919552737279,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173056991690751,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173331869597695,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173881625411583,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216174981137039359,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216177180160294911,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216181578206806015,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216190374299828223,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216207966485872639,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216243150857961471,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216313519602139135,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216454257090494463,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216735732067205119,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(217298682020626431,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(218424581927469055,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(218424581927469056,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(219550481834311680,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220113431787732992,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220394906764443648,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220535644252798976,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220606012996976640,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220641197369065472,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220658789555109888,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220667585648132096,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220671983694643200,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220674182717898752,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220675282229526528,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220675831985340416,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676106863247360,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676244302200832,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676313021677568,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676347381415936,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676364561285120,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676373151219712,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676377446187008,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676379593670656,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676380667412480,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381204283392,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381472718848,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381606936576,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381674045440,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381707599872,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381724377088,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381732765696,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381736960000,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381739057152,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740105728,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740630016,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740892160,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741023232,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741088768,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741121536,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741137920,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741146112,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741150208,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741152256,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741153280,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741153792,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154048,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154176,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154240,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154272,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154288,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154296,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154300,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154302,64,FLEN)
NAN_BOXED(6886619190693944691,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154303,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265024,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265025,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265027,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265031,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265039,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265055,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265087,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265151,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265279,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347265535,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347266047,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347267071,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347269119,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347273215,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347281407,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347297791,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347330559,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347396095,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347527167,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284347789311,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284348313599,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284349362175,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284351459327,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284355653631,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284364042239,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284380819455,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284414373887,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284481482751,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284615700479,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777284884135935,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777285421006847,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777286494748671,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777288642232319,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777292937199615,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777301527134207,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777318707003391,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777353066741759,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777421786218495,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777559225171967,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483777834103078911,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483778383858892799,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483779483370520575,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483781682393776127,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483786080440287231,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483794876533309439,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483812468719353855,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483847653091442687,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13483918021835620351,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13484058759323975679,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13484340234300686335,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13484903184254107647,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13486029084160950271,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13486029084160950272,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13487154984067792896,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13487717934021214208,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13487999408997924864,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488140146486280192,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488210515230457856,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488245699602546688,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488263291788591104,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488272087881613312,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488276485928124416,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488278684951379968,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488279784463007744,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280334218821632,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280609096728576,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280746535682048,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280815255158784,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280849614897152,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280866794766336,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280875384700928,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280879679668224,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280881827151872,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280882900893696,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883437764608,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883706200064,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883840417792,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883907526656,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883941081088,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883957858304,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883966246912,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883970441216,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883972538368,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883973586944,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974111232,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974373376,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974504448,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974569984,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974602752,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974619136,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974627328,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974631424,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974633472,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974634496,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635008,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635264,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635392,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635456,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635488,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635504,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635512,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635516,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635518,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13488280883974635519,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6886739205926518287,64,FLEN)
NAN_BOXED(11518943539412902706,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370496,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370623,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370751,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627371007,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627371519,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627372543,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627374591,64,FLEN)
NAN_BOXED(6886740367027835707,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627378687,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
