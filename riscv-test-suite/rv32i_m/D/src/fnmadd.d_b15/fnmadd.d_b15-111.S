
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_84480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:253440*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253440*0 + 3*0*FLEN/8, x4, x1, x2)

inst_84481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:253443*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253443*0 + 3*1*FLEN/8, x4, x1, x2)

inst_84482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:253446*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253446*0 + 3*2*FLEN/8, x4, x1, x2)

inst_84483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:253449*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253449*0 + 3*3*FLEN/8, x4, x1, x2)

inst_84484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:253452*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253452*0 + 3*4*FLEN/8, x4, x1, x2)

inst_84485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:253455*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253455*0 + 3*5*FLEN/8, x4, x1, x2)

inst_84486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:253458*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253458*0 + 3*6*FLEN/8, x4, x1, x2)

inst_84487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:253461*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253461*0 + 3*7*FLEN/8, x4, x1, x2)

inst_84488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:253464*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253464*0 + 3*8*FLEN/8, x4, x1, x2)

inst_84489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:253467*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253467*0 + 3*9*FLEN/8, x4, x1, x2)

inst_84490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:253470*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253470*0 + 3*10*FLEN/8, x4, x1, x2)

inst_84491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa7e43bb789b98 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x35360f913dc45 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa7e43bb789b98; op2val:0x20335360f913dc45;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:253473*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253473*0 + 3*11*FLEN/8, x4, x1, x2)

inst_84492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000000000; valaddr_reg:x3; val_offset:253476*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253476*0 + 3*12*FLEN/8, x4, x1, x2)

inst_84493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000000001; valaddr_reg:x3; val_offset:253479*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253479*0 + 3*13*FLEN/8, x4, x1, x2)

inst_84494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000000003; valaddr_reg:x3; val_offset:253482*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253482*0 + 3*14*FLEN/8, x4, x1, x2)

inst_84495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000000007; valaddr_reg:x3; val_offset:253485*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253485*0 + 3*15*FLEN/8, x4, x1, x2)

inst_84496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000000000f; valaddr_reg:x3; val_offset:253488*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253488*0 + 3*16*FLEN/8, x4, x1, x2)

inst_84497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000000001f; valaddr_reg:x3; val_offset:253491*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253491*0 + 3*17*FLEN/8, x4, x1, x2)

inst_84498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000000003f; valaddr_reg:x3; val_offset:253494*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253494*0 + 3*18*FLEN/8, x4, x1, x2)

inst_84499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000000007f; valaddr_reg:x3; val_offset:253497*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253497*0 + 3*19*FLEN/8, x4, x1, x2)

inst_84500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000000000ff; valaddr_reg:x3; val_offset:253500*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253500*0 + 3*20*FLEN/8, x4, x1, x2)

inst_84501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000000001ff; valaddr_reg:x3; val_offset:253503*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253503*0 + 3*21*FLEN/8, x4, x1, x2)

inst_84502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000000003ff; valaddr_reg:x3; val_offset:253506*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253506*0 + 3*22*FLEN/8, x4, x1, x2)

inst_84503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000000007ff; valaddr_reg:x3; val_offset:253509*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253509*0 + 3*23*FLEN/8, x4, x1, x2)

inst_84504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000000fff; valaddr_reg:x3; val_offset:253512*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253512*0 + 3*24*FLEN/8, x4, x1, x2)

inst_84505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000001fff; valaddr_reg:x3; val_offset:253515*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253515*0 + 3*25*FLEN/8, x4, x1, x2)

inst_84506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000003fff; valaddr_reg:x3; val_offset:253518*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253518*0 + 3*26*FLEN/8, x4, x1, x2)

inst_84507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000007fff; valaddr_reg:x3; val_offset:253521*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253521*0 + 3*27*FLEN/8, x4, x1, x2)

inst_84508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000000ffff; valaddr_reg:x3; val_offset:253524*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253524*0 + 3*28*FLEN/8, x4, x1, x2)

inst_84509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000001ffff; valaddr_reg:x3; val_offset:253527*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253527*0 + 3*29*FLEN/8, x4, x1, x2)

inst_84510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000003ffff; valaddr_reg:x3; val_offset:253530*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253530*0 + 3*30*FLEN/8, x4, x1, x2)

inst_84511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000007ffff; valaddr_reg:x3; val_offset:253533*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253533*0 + 3*31*FLEN/8, x4, x1, x2)

inst_84512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000000fffff; valaddr_reg:x3; val_offset:253536*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253536*0 + 3*32*FLEN/8, x4, x1, x2)

inst_84513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000001fffff; valaddr_reg:x3; val_offset:253539*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253539*0 + 3*33*FLEN/8, x4, x1, x2)

inst_84514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000003fffff; valaddr_reg:x3; val_offset:253542*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253542*0 + 3*34*FLEN/8, x4, x1, x2)

inst_84515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000007fffff; valaddr_reg:x3; val_offset:253545*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253545*0 + 3*35*FLEN/8, x4, x1, x2)

inst_84516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000000ffffff; valaddr_reg:x3; val_offset:253548*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253548*0 + 3*36*FLEN/8, x4, x1, x2)

inst_84517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000001ffffff; valaddr_reg:x3; val_offset:253551*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253551*0 + 3*37*FLEN/8, x4, x1, x2)

inst_84518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000003ffffff; valaddr_reg:x3; val_offset:253554*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253554*0 + 3*38*FLEN/8, x4, x1, x2)

inst_84519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000007ffffff; valaddr_reg:x3; val_offset:253557*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253557*0 + 3*39*FLEN/8, x4, x1, x2)

inst_84520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000000fffffff; valaddr_reg:x3; val_offset:253560*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253560*0 + 3*40*FLEN/8, x4, x1, x2)

inst_84521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000001fffffff; valaddr_reg:x3; val_offset:253563*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253563*0 + 3*41*FLEN/8, x4, x1, x2)

inst_84522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000003fffffff; valaddr_reg:x3; val_offset:253566*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253566*0 + 3*42*FLEN/8, x4, x1, x2)

inst_84523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000007fffffff; valaddr_reg:x3; val_offset:253569*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253569*0 + 3*43*FLEN/8, x4, x1, x2)

inst_84524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800000ffffffff; valaddr_reg:x3; val_offset:253572*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253572*0 + 3*44*FLEN/8, x4, x1, x2)

inst_84525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800001ffffffff; valaddr_reg:x3; val_offset:253575*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253575*0 + 3*45*FLEN/8, x4, x1, x2)

inst_84526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800003ffffffff; valaddr_reg:x3; val_offset:253578*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253578*0 + 3*46*FLEN/8, x4, x1, x2)

inst_84527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800007ffffffff; valaddr_reg:x3; val_offset:253581*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253581*0 + 3*47*FLEN/8, x4, x1, x2)

inst_84528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80000fffffffff; valaddr_reg:x3; val_offset:253584*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253584*0 + 3*48*FLEN/8, x4, x1, x2)

inst_84529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80001fffffffff; valaddr_reg:x3; val_offset:253587*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253587*0 + 3*49*FLEN/8, x4, x1, x2)

inst_84530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80003fffffffff; valaddr_reg:x3; val_offset:253590*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253590*0 + 3*50*FLEN/8, x4, x1, x2)

inst_84531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80007fffffffff; valaddr_reg:x3; val_offset:253593*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253593*0 + 3*51*FLEN/8, x4, x1, x2)

inst_84532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8000ffffffffff; valaddr_reg:x3; val_offset:253596*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253596*0 + 3*52*FLEN/8, x4, x1, x2)

inst_84533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8001ffffffffff; valaddr_reg:x3; val_offset:253599*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253599*0 + 3*53*FLEN/8, x4, x1, x2)

inst_84534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8003ffffffffff; valaddr_reg:x3; val_offset:253602*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253602*0 + 3*54*FLEN/8, x4, x1, x2)

inst_84535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8007ffffffffff; valaddr_reg:x3; val_offset:253605*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253605*0 + 3*55*FLEN/8, x4, x1, x2)

inst_84536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe800fffffffffff; valaddr_reg:x3; val_offset:253608*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253608*0 + 3*56*FLEN/8, x4, x1, x2)

inst_84537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe801fffffffffff; valaddr_reg:x3; val_offset:253611*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253611*0 + 3*57*FLEN/8, x4, x1, x2)

inst_84538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe803fffffffffff; valaddr_reg:x3; val_offset:253614*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253614*0 + 3*58*FLEN/8, x4, x1, x2)

inst_84539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe807fffffffffff; valaddr_reg:x3; val_offset:253617*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253617*0 + 3*59*FLEN/8, x4, x1, x2)

inst_84540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe80ffffffffffff; valaddr_reg:x3; val_offset:253620*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253620*0 + 3*60*FLEN/8, x4, x1, x2)

inst_84541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe81ffffffffffff; valaddr_reg:x3; val_offset:253623*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253623*0 + 3*61*FLEN/8, x4, x1, x2)

inst_84542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe83ffffffffffff; valaddr_reg:x3; val_offset:253626*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253626*0 + 3*62*FLEN/8, x4, x1, x2)

inst_84543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe87ffffffffffff; valaddr_reg:x3; val_offset:253629*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253629*0 + 3*63*FLEN/8, x4, x1, x2)

inst_84544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe88000000000000; valaddr_reg:x3; val_offset:253632*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253632*0 + 3*64*FLEN/8, x4, x1, x2)

inst_84545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8c000000000000; valaddr_reg:x3; val_offset:253635*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253635*0 + 3*65*FLEN/8, x4, x1, x2)

inst_84546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8e000000000000; valaddr_reg:x3; val_offset:253638*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253638*0 + 3*66*FLEN/8, x4, x1, x2)

inst_84547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8f000000000000; valaddr_reg:x3; val_offset:253641*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253641*0 + 3*67*FLEN/8, x4, x1, x2)

inst_84548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8f800000000000; valaddr_reg:x3; val_offset:253644*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253644*0 + 3*68*FLEN/8, x4, x1, x2)

inst_84549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fc00000000000; valaddr_reg:x3; val_offset:253647*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253647*0 + 3*69*FLEN/8, x4, x1, x2)

inst_84550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fe00000000000; valaddr_reg:x3; val_offset:253650*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253650*0 + 3*70*FLEN/8, x4, x1, x2)

inst_84551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ff00000000000; valaddr_reg:x3; val_offset:253653*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253653*0 + 3*71*FLEN/8, x4, x1, x2)

inst_84552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ff80000000000; valaddr_reg:x3; val_offset:253656*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253656*0 + 3*72*FLEN/8, x4, x1, x2)

inst_84553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffc0000000000; valaddr_reg:x3; val_offset:253659*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253659*0 + 3*73*FLEN/8, x4, x1, x2)

inst_84554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffe0000000000; valaddr_reg:x3; val_offset:253662*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253662*0 + 3*74*FLEN/8, x4, x1, x2)

inst_84555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fff0000000000; valaddr_reg:x3; val_offset:253665*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253665*0 + 3*75*FLEN/8, x4, x1, x2)

inst_84556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fff8000000000; valaddr_reg:x3; val_offset:253668*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253668*0 + 3*76*FLEN/8, x4, x1, x2)

inst_84557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffc000000000; valaddr_reg:x3; val_offset:253671*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253671*0 + 3*77*FLEN/8, x4, x1, x2)

inst_84558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffe000000000; valaddr_reg:x3; val_offset:253674*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253674*0 + 3*78*FLEN/8, x4, x1, x2)

inst_84559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffff000000000; valaddr_reg:x3; val_offset:253677*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253677*0 + 3*79*FLEN/8, x4, x1, x2)

inst_84560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffff800000000; valaddr_reg:x3; val_offset:253680*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253680*0 + 3*80*FLEN/8, x4, x1, x2)

inst_84561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffc00000000; valaddr_reg:x3; val_offset:253683*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253683*0 + 3*81*FLEN/8, x4, x1, x2)

inst_84562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffe00000000; valaddr_reg:x3; val_offset:253686*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253686*0 + 3*82*FLEN/8, x4, x1, x2)

inst_84563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffff00000000; valaddr_reg:x3; val_offset:253689*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253689*0 + 3*83*FLEN/8, x4, x1, x2)

inst_84564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffff80000000; valaddr_reg:x3; val_offset:253692*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253692*0 + 3*84*FLEN/8, x4, x1, x2)

inst_84565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffc0000000; valaddr_reg:x3; val_offset:253695*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253695*0 + 3*85*FLEN/8, x4, x1, x2)

inst_84566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffe0000000; valaddr_reg:x3; val_offset:253698*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253698*0 + 3*86*FLEN/8, x4, x1, x2)

inst_84567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffff0000000; valaddr_reg:x3; val_offset:253701*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253701*0 + 3*87*FLEN/8, x4, x1, x2)

inst_84568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffff8000000; valaddr_reg:x3; val_offset:253704*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253704*0 + 3*88*FLEN/8, x4, x1, x2)

inst_84569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffc000000; valaddr_reg:x3; val_offset:253707*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253707*0 + 3*89*FLEN/8, x4, x1, x2)

inst_84570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffe000000; valaddr_reg:x3; val_offset:253710*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253710*0 + 3*90*FLEN/8, x4, x1, x2)

inst_84571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffff000000; valaddr_reg:x3; val_offset:253713*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253713*0 + 3*91*FLEN/8, x4, x1, x2)

inst_84572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffff800000; valaddr_reg:x3; val_offset:253716*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253716*0 + 3*92*FLEN/8, x4, x1, x2)

inst_84573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffc00000; valaddr_reg:x3; val_offset:253719*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253719*0 + 3*93*FLEN/8, x4, x1, x2)

inst_84574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffe00000; valaddr_reg:x3; val_offset:253722*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253722*0 + 3*94*FLEN/8, x4, x1, x2)

inst_84575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffff00000; valaddr_reg:x3; val_offset:253725*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253725*0 + 3*95*FLEN/8, x4, x1, x2)

inst_84576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffff80000; valaddr_reg:x3; val_offset:253728*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253728*0 + 3*96*FLEN/8, x4, x1, x2)

inst_84577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffc0000; valaddr_reg:x3; val_offset:253731*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253731*0 + 3*97*FLEN/8, x4, x1, x2)

inst_84578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffe0000; valaddr_reg:x3; val_offset:253734*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253734*0 + 3*98*FLEN/8, x4, x1, x2)

inst_84579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffff0000; valaddr_reg:x3; val_offset:253737*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253737*0 + 3*99*FLEN/8, x4, x1, x2)

inst_84580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffff8000; valaddr_reg:x3; val_offset:253740*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253740*0 + 3*100*FLEN/8, x4, x1, x2)

inst_84581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffffc000; valaddr_reg:x3; val_offset:253743*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253743*0 + 3*101*FLEN/8, x4, x1, x2)

inst_84582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffffe000; valaddr_reg:x3; val_offset:253746*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253746*0 + 3*102*FLEN/8, x4, x1, x2)

inst_84583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffff000; valaddr_reg:x3; val_offset:253749*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253749*0 + 3*103*FLEN/8, x4, x1, x2)

inst_84584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffff800; valaddr_reg:x3; val_offset:253752*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253752*0 + 3*104*FLEN/8, x4, x1, x2)

inst_84585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffffc00; valaddr_reg:x3; val_offset:253755*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253755*0 + 3*105*FLEN/8, x4, x1, x2)

inst_84586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffffe00; valaddr_reg:x3; val_offset:253758*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253758*0 + 3*106*FLEN/8, x4, x1, x2)

inst_84587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffffff00; valaddr_reg:x3; val_offset:253761*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253761*0 + 3*107*FLEN/8, x4, x1, x2)

inst_84588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffffff80; valaddr_reg:x3; val_offset:253764*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253764*0 + 3*108*FLEN/8, x4, x1, x2)

inst_84589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffffffc0; valaddr_reg:x3; val_offset:253767*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253767*0 + 3*109*FLEN/8, x4, x1, x2)

inst_84590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffffffe0; valaddr_reg:x3; val_offset:253770*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253770*0 + 3*110*FLEN/8, x4, x1, x2)

inst_84591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffffff0; valaddr_reg:x3; val_offset:253773*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253773*0 + 3*111*FLEN/8, x4, x1, x2)

inst_84592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffffff8; valaddr_reg:x3; val_offset:253776*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253776*0 + 3*112*FLEN/8, x4, x1, x2)

inst_84593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffffffc; valaddr_reg:x3; val_offset:253779*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253779*0 + 3*113*FLEN/8, x4, x1, x2)

inst_84594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8ffffffffffffe; valaddr_reg:x3; val_offset:253782*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253782*0 + 3*114*FLEN/8, x4, x1, x2)

inst_84595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3e8 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbe8fffffffffffff; valaddr_reg:x3; val_offset:253785*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253785*0 + 3*115*FLEN/8, x4, x1, x2)

inst_84596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:253788*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253788*0 + 3*116*FLEN/8, x4, x1, x2)

inst_84597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:253791*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253791*0 + 3*117*FLEN/8, x4, x1, x2)

inst_84598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:253794*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253794*0 + 3*118*FLEN/8, x4, x1, x2)

inst_84599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:253797*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253797*0 + 3*119*FLEN/8, x4, x1, x2)

inst_84600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:253800*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253800*0 + 3*120*FLEN/8, x4, x1, x2)

inst_84601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:253803*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253803*0 + 3*121*FLEN/8, x4, x1, x2)

inst_84602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:253806*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253806*0 + 3*122*FLEN/8, x4, x1, x2)

inst_84603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:253809*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253809*0 + 3*123*FLEN/8, x4, x1, x2)

inst_84604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:253812*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253812*0 + 3*124*FLEN/8, x4, x1, x2)

inst_84605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:253815*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253815*0 + 3*125*FLEN/8, x4, x1, x2)

inst_84606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:253818*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253818*0 + 3*126*FLEN/8, x4, x1, x2)

inst_84607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:253821*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253821*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_84608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:253824*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253824*0 + 3*128*FLEN/8, x4, x1, x2)

inst_84609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:253827*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253827*0 + 3*129*FLEN/8, x4, x1, x2)

inst_84610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:253830*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253830*0 + 3*130*FLEN/8, x4, x1, x2)

inst_84611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:253833*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253833*0 + 3*131*FLEN/8, x4, x1, x2)

inst_84612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:253836*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253836*0 + 3*132*FLEN/8, x4, x1, x2)

inst_84613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:253839*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253839*0 + 3*133*FLEN/8, x4, x1, x2)

inst_84614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:253842*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253842*0 + 3*134*FLEN/8, x4, x1, x2)

inst_84615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:253845*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253845*0 + 3*135*FLEN/8, x4, x1, x2)

inst_84616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:253848*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253848*0 + 3*136*FLEN/8, x4, x1, x2)

inst_84617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa86a1651b8f6d and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x34d48a4e6b067 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa86a1651b8f6d; op2val:0x9fc34d48a4e6b067;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:253851*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253851*0 + 3*137*FLEN/8, x4, x1, x2)

inst_84618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:253854*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253854*0 + 3*138*FLEN/8, x4, x1, x2)

inst_84619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:253857*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253857*0 + 3*139*FLEN/8, x4, x1, x2)

inst_84620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:253860*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253860*0 + 3*140*FLEN/8, x4, x1, x2)

inst_84621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:253863*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253863*0 + 3*141*FLEN/8, x4, x1, x2)

inst_84622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:253866*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253866*0 + 3*142*FLEN/8, x4, x1, x2)

inst_84623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:253869*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253869*0 + 3*143*FLEN/8, x4, x1, x2)

inst_84624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:253872*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253872*0 + 3*144*FLEN/8, x4, x1, x2)

inst_84625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:253875*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253875*0 + 3*145*FLEN/8, x4, x1, x2)

inst_84626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:253878*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253878*0 + 3*146*FLEN/8, x4, x1, x2)

inst_84627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:253881*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253881*0 + 3*147*FLEN/8, x4, x1, x2)

inst_84628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:253884*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253884*0 + 3*148*FLEN/8, x4, x1, x2)

inst_84629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:253887*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253887*0 + 3*149*FLEN/8, x4, x1, x2)

inst_84630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:253890*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253890*0 + 3*150*FLEN/8, x4, x1, x2)

inst_84631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:253893*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253893*0 + 3*151*FLEN/8, x4, x1, x2)

inst_84632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:253896*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253896*0 + 3*152*FLEN/8, x4, x1, x2)

inst_84633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:253899*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253899*0 + 3*153*FLEN/8, x4, x1, x2)

inst_84634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:253902*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253902*0 + 3*154*FLEN/8, x4, x1, x2)

inst_84635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:253905*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253905*0 + 3*155*FLEN/8, x4, x1, x2)

inst_84636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:253908*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253908*0 + 3*156*FLEN/8, x4, x1, x2)

inst_84637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:253911*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253911*0 + 3*157*FLEN/8, x4, x1, x2)

inst_84638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:253914*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253914*0 + 3*158*FLEN/8, x4, x1, x2)

inst_84639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:253917*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253917*0 + 3*159*FLEN/8, x4, x1, x2)

inst_84640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000000000; valaddr_reg:x3; val_offset:253920*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253920*0 + 3*160*FLEN/8, x4, x1, x2)

inst_84641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000000001; valaddr_reg:x3; val_offset:253923*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253923*0 + 3*161*FLEN/8, x4, x1, x2)

inst_84642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000000003; valaddr_reg:x3; val_offset:253926*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253926*0 + 3*162*FLEN/8, x4, x1, x2)

inst_84643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000000007; valaddr_reg:x3; val_offset:253929*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253929*0 + 3*163*FLEN/8, x4, x1, x2)

inst_84644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000000000f; valaddr_reg:x3; val_offset:253932*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253932*0 + 3*164*FLEN/8, x4, x1, x2)

inst_84645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000000001f; valaddr_reg:x3; val_offset:253935*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253935*0 + 3*165*FLEN/8, x4, x1, x2)

inst_84646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000000003f; valaddr_reg:x3; val_offset:253938*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253938*0 + 3*166*FLEN/8, x4, x1, x2)

inst_84647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000000007f; valaddr_reg:x3; val_offset:253941*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253941*0 + 3*167*FLEN/8, x4, x1, x2)

inst_84648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000000000ff; valaddr_reg:x3; val_offset:253944*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253944*0 + 3*168*FLEN/8, x4, x1, x2)

inst_84649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000000001ff; valaddr_reg:x3; val_offset:253947*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253947*0 + 3*169*FLEN/8, x4, x1, x2)

inst_84650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000000003ff; valaddr_reg:x3; val_offset:253950*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253950*0 + 3*170*FLEN/8, x4, x1, x2)

inst_84651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000000007ff; valaddr_reg:x3; val_offset:253953*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253953*0 + 3*171*FLEN/8, x4, x1, x2)

inst_84652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000000fff; valaddr_reg:x3; val_offset:253956*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253956*0 + 3*172*FLEN/8, x4, x1, x2)

inst_84653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000001fff; valaddr_reg:x3; val_offset:253959*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253959*0 + 3*173*FLEN/8, x4, x1, x2)

inst_84654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000003fff; valaddr_reg:x3; val_offset:253962*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253962*0 + 3*174*FLEN/8, x4, x1, x2)

inst_84655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000007fff; valaddr_reg:x3; val_offset:253965*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253965*0 + 3*175*FLEN/8, x4, x1, x2)

inst_84656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000000ffff; valaddr_reg:x3; val_offset:253968*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253968*0 + 3*176*FLEN/8, x4, x1, x2)

inst_84657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000001ffff; valaddr_reg:x3; val_offset:253971*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253971*0 + 3*177*FLEN/8, x4, x1, x2)

inst_84658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000003ffff; valaddr_reg:x3; val_offset:253974*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253974*0 + 3*178*FLEN/8, x4, x1, x2)

inst_84659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000007ffff; valaddr_reg:x3; val_offset:253977*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253977*0 + 3*179*FLEN/8, x4, x1, x2)

inst_84660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000000fffff; valaddr_reg:x3; val_offset:253980*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253980*0 + 3*180*FLEN/8, x4, x1, x2)

inst_84661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000001fffff; valaddr_reg:x3; val_offset:253983*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253983*0 + 3*181*FLEN/8, x4, x1, x2)

inst_84662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000003fffff; valaddr_reg:x3; val_offset:253986*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253986*0 + 3*182*FLEN/8, x4, x1, x2)

inst_84663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000007fffff; valaddr_reg:x3; val_offset:253989*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253989*0 + 3*183*FLEN/8, x4, x1, x2)

inst_84664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000000ffffff; valaddr_reg:x3; val_offset:253992*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253992*0 + 3*184*FLEN/8, x4, x1, x2)

inst_84665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000001ffffff; valaddr_reg:x3; val_offset:253995*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253995*0 + 3*185*FLEN/8, x4, x1, x2)

inst_84666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000003ffffff; valaddr_reg:x3; val_offset:253998*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 253998*0 + 3*186*FLEN/8, x4, x1, x2)

inst_84667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000007ffffff; valaddr_reg:x3; val_offset:254001*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254001*0 + 3*187*FLEN/8, x4, x1, x2)

inst_84668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000000fffffff; valaddr_reg:x3; val_offset:254004*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254004*0 + 3*188*FLEN/8, x4, x1, x2)

inst_84669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000001fffffff; valaddr_reg:x3; val_offset:254007*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254007*0 + 3*189*FLEN/8, x4, x1, x2)

inst_84670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000003fffffff; valaddr_reg:x3; val_offset:254010*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254010*0 + 3*190*FLEN/8, x4, x1, x2)

inst_84671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000007fffffff; valaddr_reg:x3; val_offset:254013*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254013*0 + 3*191*FLEN/8, x4, x1, x2)

inst_84672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00000ffffffff; valaddr_reg:x3; val_offset:254016*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254016*0 + 3*192*FLEN/8, x4, x1, x2)

inst_84673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00001ffffffff; valaddr_reg:x3; val_offset:254019*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254019*0 + 3*193*FLEN/8, x4, x1, x2)

inst_84674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00003ffffffff; valaddr_reg:x3; val_offset:254022*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254022*0 + 3*194*FLEN/8, x4, x1, x2)

inst_84675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00007ffffffff; valaddr_reg:x3; val_offset:254025*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254025*0 + 3*195*FLEN/8, x4, x1, x2)

inst_84676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0000fffffffff; valaddr_reg:x3; val_offset:254028*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254028*0 + 3*196*FLEN/8, x4, x1, x2)

inst_84677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0001fffffffff; valaddr_reg:x3; val_offset:254031*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254031*0 + 3*197*FLEN/8, x4, x1, x2)

inst_84678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0003fffffffff; valaddr_reg:x3; val_offset:254034*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254034*0 + 3*198*FLEN/8, x4, x1, x2)

inst_84679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0007fffffffff; valaddr_reg:x3; val_offset:254037*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254037*0 + 3*199*FLEN/8, x4, x1, x2)

inst_84680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b000ffffffffff; valaddr_reg:x3; val_offset:254040*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254040*0 + 3*200*FLEN/8, x4, x1, x2)

inst_84681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b001ffffffffff; valaddr_reg:x3; val_offset:254043*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254043*0 + 3*201*FLEN/8, x4, x1, x2)

inst_84682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b003ffffffffff; valaddr_reg:x3; val_offset:254046*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254046*0 + 3*202*FLEN/8, x4, x1, x2)

inst_84683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b007ffffffffff; valaddr_reg:x3; val_offset:254049*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254049*0 + 3*203*FLEN/8, x4, x1, x2)

inst_84684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b00fffffffffff; valaddr_reg:x3; val_offset:254052*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254052*0 + 3*204*FLEN/8, x4, x1, x2)

inst_84685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b01fffffffffff; valaddr_reg:x3; val_offset:254055*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254055*0 + 3*205*FLEN/8, x4, x1, x2)

inst_84686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b03fffffffffff; valaddr_reg:x3; val_offset:254058*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254058*0 + 3*206*FLEN/8, x4, x1, x2)

inst_84687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b07fffffffffff; valaddr_reg:x3; val_offset:254061*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254061*0 + 3*207*FLEN/8, x4, x1, x2)

inst_84688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b0ffffffffffff; valaddr_reg:x3; val_offset:254064*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254064*0 + 3*208*FLEN/8, x4, x1, x2)

inst_84689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b1ffffffffffff; valaddr_reg:x3; val_offset:254067*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254067*0 + 3*209*FLEN/8, x4, x1, x2)

inst_84690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b3ffffffffffff; valaddr_reg:x3; val_offset:254070*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254070*0 + 3*210*FLEN/8, x4, x1, x2)

inst_84691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b7ffffffffffff; valaddr_reg:x3; val_offset:254073*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254073*0 + 3*211*FLEN/8, x4, x1, x2)

inst_84692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82b8000000000000; valaddr_reg:x3; val_offset:254076*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254076*0 + 3*212*FLEN/8, x4, x1, x2)

inst_84693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bc000000000000; valaddr_reg:x3; val_offset:254079*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254079*0 + 3*213*FLEN/8, x4, x1, x2)

inst_84694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82be000000000000; valaddr_reg:x3; val_offset:254082*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254082*0 + 3*214*FLEN/8, x4, x1, x2)

inst_84695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bf000000000000; valaddr_reg:x3; val_offset:254085*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254085*0 + 3*215*FLEN/8, x4, x1, x2)

inst_84696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bf800000000000; valaddr_reg:x3; val_offset:254088*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254088*0 + 3*216*FLEN/8, x4, x1, x2)

inst_84697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfc00000000000; valaddr_reg:x3; val_offset:254091*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254091*0 + 3*217*FLEN/8, x4, x1, x2)

inst_84698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfe00000000000; valaddr_reg:x3; val_offset:254094*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254094*0 + 3*218*FLEN/8, x4, x1, x2)

inst_84699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bff00000000000; valaddr_reg:x3; val_offset:254097*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254097*0 + 3*219*FLEN/8, x4, x1, x2)

inst_84700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bff80000000000; valaddr_reg:x3; val_offset:254100*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254100*0 + 3*220*FLEN/8, x4, x1, x2)

inst_84701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffc0000000000; valaddr_reg:x3; val_offset:254103*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254103*0 + 3*221*FLEN/8, x4, x1, x2)

inst_84702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffe0000000000; valaddr_reg:x3; val_offset:254106*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254106*0 + 3*222*FLEN/8, x4, x1, x2)

inst_84703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfff0000000000; valaddr_reg:x3; val_offset:254109*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254109*0 + 3*223*FLEN/8, x4, x1, x2)

inst_84704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfff8000000000; valaddr_reg:x3; val_offset:254112*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254112*0 + 3*224*FLEN/8, x4, x1, x2)

inst_84705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffc000000000; valaddr_reg:x3; val_offset:254115*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254115*0 + 3*225*FLEN/8, x4, x1, x2)

inst_84706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffe000000000; valaddr_reg:x3; val_offset:254118*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254118*0 + 3*226*FLEN/8, x4, x1, x2)

inst_84707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffff000000000; valaddr_reg:x3; val_offset:254121*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254121*0 + 3*227*FLEN/8, x4, x1, x2)

inst_84708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffff800000000; valaddr_reg:x3; val_offset:254124*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254124*0 + 3*228*FLEN/8, x4, x1, x2)

inst_84709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffc00000000; valaddr_reg:x3; val_offset:254127*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254127*0 + 3*229*FLEN/8, x4, x1, x2)

inst_84710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffe00000000; valaddr_reg:x3; val_offset:254130*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254130*0 + 3*230*FLEN/8, x4, x1, x2)

inst_84711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffff00000000; valaddr_reg:x3; val_offset:254133*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254133*0 + 3*231*FLEN/8, x4, x1, x2)

inst_84712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffff80000000; valaddr_reg:x3; val_offset:254136*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254136*0 + 3*232*FLEN/8, x4, x1, x2)

inst_84713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffc0000000; valaddr_reg:x3; val_offset:254139*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254139*0 + 3*233*FLEN/8, x4, x1, x2)

inst_84714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffe0000000; valaddr_reg:x3; val_offset:254142*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254142*0 + 3*234*FLEN/8, x4, x1, x2)

inst_84715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffff0000000; valaddr_reg:x3; val_offset:254145*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254145*0 + 3*235*FLEN/8, x4, x1, x2)

inst_84716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffff8000000; valaddr_reg:x3; val_offset:254148*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254148*0 + 3*236*FLEN/8, x4, x1, x2)

inst_84717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffc000000; valaddr_reg:x3; val_offset:254151*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254151*0 + 3*237*FLEN/8, x4, x1, x2)

inst_84718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffe000000; valaddr_reg:x3; val_offset:254154*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254154*0 + 3*238*FLEN/8, x4, x1, x2)

inst_84719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffff000000; valaddr_reg:x3; val_offset:254157*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254157*0 + 3*239*FLEN/8, x4, x1, x2)

inst_84720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffff800000; valaddr_reg:x3; val_offset:254160*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254160*0 + 3*240*FLEN/8, x4, x1, x2)

inst_84721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffc00000; valaddr_reg:x3; val_offset:254163*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254163*0 + 3*241*FLEN/8, x4, x1, x2)

inst_84722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffe00000; valaddr_reg:x3; val_offset:254166*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254166*0 + 3*242*FLEN/8, x4, x1, x2)

inst_84723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffff00000; valaddr_reg:x3; val_offset:254169*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254169*0 + 3*243*FLEN/8, x4, x1, x2)

inst_84724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffff80000; valaddr_reg:x3; val_offset:254172*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254172*0 + 3*244*FLEN/8, x4, x1, x2)

inst_84725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffc0000; valaddr_reg:x3; val_offset:254175*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254175*0 + 3*245*FLEN/8, x4, x1, x2)

inst_84726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffe0000; valaddr_reg:x3; val_offset:254178*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254178*0 + 3*246*FLEN/8, x4, x1, x2)

inst_84727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffff0000; valaddr_reg:x3; val_offset:254181*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254181*0 + 3*247*FLEN/8, x4, x1, x2)

inst_84728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffff8000; valaddr_reg:x3; val_offset:254184*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254184*0 + 3*248*FLEN/8, x4, x1, x2)

inst_84729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffffc000; valaddr_reg:x3; val_offset:254187*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254187*0 + 3*249*FLEN/8, x4, x1, x2)

inst_84730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffffe000; valaddr_reg:x3; val_offset:254190*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254190*0 + 3*250*FLEN/8, x4, x1, x2)

inst_84731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffff000; valaddr_reg:x3; val_offset:254193*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254193*0 + 3*251*FLEN/8, x4, x1, x2)

inst_84732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffff800; valaddr_reg:x3; val_offset:254196*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254196*0 + 3*252*FLEN/8, x4, x1, x2)

inst_84733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffffc00; valaddr_reg:x3; val_offset:254199*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254199*0 + 3*253*FLEN/8, x4, x1, x2)

inst_84734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffffe00; valaddr_reg:x3; val_offset:254202*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254202*0 + 3*254*FLEN/8, x4, x1, x2)

inst_84735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffffff00; valaddr_reg:x3; val_offset:254205*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254205*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_84736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffffff80; valaddr_reg:x3; val_offset:254208*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254208*0 + 3*256*FLEN/8, x4, x1, x2)

inst_84737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffffffc0; valaddr_reg:x3; val_offset:254211*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254211*0 + 3*257*FLEN/8, x4, x1, x2)

inst_84738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffffffe0; valaddr_reg:x3; val_offset:254214*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254214*0 + 3*258*FLEN/8, x4, x1, x2)

inst_84739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffffff0; valaddr_reg:x3; val_offset:254217*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254217*0 + 3*259*FLEN/8, x4, x1, x2)

inst_84740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffffff8; valaddr_reg:x3; val_offset:254220*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254220*0 + 3*260*FLEN/8, x4, x1, x2)

inst_84741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffffffc; valaddr_reg:x3; val_offset:254223*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254223*0 + 3*261*FLEN/8, x4, x1, x2)

inst_84742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bffffffffffffe; valaddr_reg:x3; val_offset:254226*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254226*0 + 3*262*FLEN/8, x4, x1, x2)

inst_84743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa8a9e6ee9dc95 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa8a9e6ee9dc95; op2val:0x8000;
op3val:0x82bfffffffffffff; valaddr_reg:x3; val_offset:254229*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254229*0 + 3*263*FLEN/8, x4, x1, x2)

inst_84744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:254232*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254232*0 + 3*264*FLEN/8, x4, x1, x2)

inst_84745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:254235*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254235*0 + 3*265*FLEN/8, x4, x1, x2)

inst_84746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:254238*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254238*0 + 3*266*FLEN/8, x4, x1, x2)

inst_84747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:254241*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254241*0 + 3*267*FLEN/8, x4, x1, x2)

inst_84748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:254244*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254244*0 + 3*268*FLEN/8, x4, x1, x2)

inst_84749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:254247*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254247*0 + 3*269*FLEN/8, x4, x1, x2)

inst_84750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:254250*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254250*0 + 3*270*FLEN/8, x4, x1, x2)

inst_84751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:254253*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254253*0 + 3*271*FLEN/8, x4, x1, x2)

inst_84752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:254256*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254256*0 + 3*272*FLEN/8, x4, x1, x2)

inst_84753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:254259*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254259*0 + 3*273*FLEN/8, x4, x1, x2)

inst_84754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:254262*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254262*0 + 3*274*FLEN/8, x4, x1, x2)

inst_84755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:254265*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254265*0 + 3*275*FLEN/8, x4, x1, x2)

inst_84756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:254268*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254268*0 + 3*276*FLEN/8, x4, x1, x2)

inst_84757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:254271*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254271*0 + 3*277*FLEN/8, x4, x1, x2)

inst_84758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:254274*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254274*0 + 3*278*FLEN/8, x4, x1, x2)

inst_84759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:254277*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254277*0 + 3*279*FLEN/8, x4, x1, x2)

inst_84760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:254280*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254280*0 + 3*280*FLEN/8, x4, x1, x2)

inst_84761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:254283*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254283*0 + 3*281*FLEN/8, x4, x1, x2)

inst_84762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:254286*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254286*0 + 3*282*FLEN/8, x4, x1, x2)

inst_84763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:254289*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254289*0 + 3*283*FLEN/8, x4, x1, x2)

inst_84764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:254292*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254292*0 + 3*284*FLEN/8, x4, x1, x2)

inst_84765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:254295*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254295*0 + 3*285*FLEN/8, x4, x1, x2)

inst_84766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000000000; valaddr_reg:x3; val_offset:254298*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254298*0 + 3*286*FLEN/8, x4, x1, x2)

inst_84767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000000001; valaddr_reg:x3; val_offset:254301*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254301*0 + 3*287*FLEN/8, x4, x1, x2)

inst_84768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000000003; valaddr_reg:x3; val_offset:254304*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254304*0 + 3*288*FLEN/8, x4, x1, x2)

inst_84769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000000007; valaddr_reg:x3; val_offset:254307*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254307*0 + 3*289*FLEN/8, x4, x1, x2)

inst_84770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000000000f; valaddr_reg:x3; val_offset:254310*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254310*0 + 3*290*FLEN/8, x4, x1, x2)

inst_84771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000000001f; valaddr_reg:x3; val_offset:254313*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254313*0 + 3*291*FLEN/8, x4, x1, x2)

inst_84772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000000003f; valaddr_reg:x3; val_offset:254316*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254316*0 + 3*292*FLEN/8, x4, x1, x2)

inst_84773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000000007f; valaddr_reg:x3; val_offset:254319*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254319*0 + 3*293*FLEN/8, x4, x1, x2)

inst_84774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000000000ff; valaddr_reg:x3; val_offset:254322*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254322*0 + 3*294*FLEN/8, x4, x1, x2)

inst_84775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000000001ff; valaddr_reg:x3; val_offset:254325*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254325*0 + 3*295*FLEN/8, x4, x1, x2)

inst_84776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000000003ff; valaddr_reg:x3; val_offset:254328*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254328*0 + 3*296*FLEN/8, x4, x1, x2)

inst_84777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000000007ff; valaddr_reg:x3; val_offset:254331*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254331*0 + 3*297*FLEN/8, x4, x1, x2)

inst_84778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000000fff; valaddr_reg:x3; val_offset:254334*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254334*0 + 3*298*FLEN/8, x4, x1, x2)

inst_84779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000001fff; valaddr_reg:x3; val_offset:254337*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254337*0 + 3*299*FLEN/8, x4, x1, x2)

inst_84780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000003fff; valaddr_reg:x3; val_offset:254340*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254340*0 + 3*300*FLEN/8, x4, x1, x2)

inst_84781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000007fff; valaddr_reg:x3; val_offset:254343*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254343*0 + 3*301*FLEN/8, x4, x1, x2)

inst_84782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000000ffff; valaddr_reg:x3; val_offset:254346*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254346*0 + 3*302*FLEN/8, x4, x1, x2)

inst_84783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000001ffff; valaddr_reg:x3; val_offset:254349*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254349*0 + 3*303*FLEN/8, x4, x1, x2)

inst_84784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000003ffff; valaddr_reg:x3; val_offset:254352*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254352*0 + 3*304*FLEN/8, x4, x1, x2)

inst_84785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000007ffff; valaddr_reg:x3; val_offset:254355*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254355*0 + 3*305*FLEN/8, x4, x1, x2)

inst_84786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000000fffff; valaddr_reg:x3; val_offset:254358*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254358*0 + 3*306*FLEN/8, x4, x1, x2)

inst_84787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000001fffff; valaddr_reg:x3; val_offset:254361*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254361*0 + 3*307*FLEN/8, x4, x1, x2)

inst_84788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000003fffff; valaddr_reg:x3; val_offset:254364*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254364*0 + 3*308*FLEN/8, x4, x1, x2)

inst_84789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000007fffff; valaddr_reg:x3; val_offset:254367*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254367*0 + 3*309*FLEN/8, x4, x1, x2)

inst_84790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000000ffffff; valaddr_reg:x3; val_offset:254370*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254370*0 + 3*310*FLEN/8, x4, x1, x2)

inst_84791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000001ffffff; valaddr_reg:x3; val_offset:254373*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254373*0 + 3*311*FLEN/8, x4, x1, x2)

inst_84792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000003ffffff; valaddr_reg:x3; val_offset:254376*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254376*0 + 3*312*FLEN/8, x4, x1, x2)

inst_84793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000007ffffff; valaddr_reg:x3; val_offset:254379*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254379*0 + 3*313*FLEN/8, x4, x1, x2)

inst_84794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000000fffffff; valaddr_reg:x3; val_offset:254382*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254382*0 + 3*314*FLEN/8, x4, x1, x2)

inst_84795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000001fffffff; valaddr_reg:x3; val_offset:254385*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254385*0 + 3*315*FLEN/8, x4, x1, x2)

inst_84796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000003fffffff; valaddr_reg:x3; val_offset:254388*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254388*0 + 3*316*FLEN/8, x4, x1, x2)

inst_84797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000007fffffff; valaddr_reg:x3; val_offset:254391*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254391*0 + 3*317*FLEN/8, x4, x1, x2)

inst_84798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600000ffffffff; valaddr_reg:x3; val_offset:254394*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254394*0 + 3*318*FLEN/8, x4, x1, x2)

inst_84799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600001ffffffff; valaddr_reg:x3; val_offset:254397*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254397*0 + 3*319*FLEN/8, x4, x1, x2)

inst_84800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600003ffffffff; valaddr_reg:x3; val_offset:254400*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254400*0 + 3*320*FLEN/8, x4, x1, x2)

inst_84801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600007ffffffff; valaddr_reg:x3; val_offset:254403*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254403*0 + 3*321*FLEN/8, x4, x1, x2)

inst_84802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160000fffffffff; valaddr_reg:x3; val_offset:254406*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254406*0 + 3*322*FLEN/8, x4, x1, x2)

inst_84803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160001fffffffff; valaddr_reg:x3; val_offset:254409*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254409*0 + 3*323*FLEN/8, x4, x1, x2)

inst_84804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160003fffffffff; valaddr_reg:x3; val_offset:254412*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254412*0 + 3*324*FLEN/8, x4, x1, x2)

inst_84805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160007fffffffff; valaddr_reg:x3; val_offset:254415*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254415*0 + 3*325*FLEN/8, x4, x1, x2)

inst_84806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816000ffffffffff; valaddr_reg:x3; val_offset:254418*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254418*0 + 3*326*FLEN/8, x4, x1, x2)

inst_84807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816001ffffffffff; valaddr_reg:x3; val_offset:254421*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254421*0 + 3*327*FLEN/8, x4, x1, x2)

inst_84808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816003ffffffffff; valaddr_reg:x3; val_offset:254424*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254424*0 + 3*328*FLEN/8, x4, x1, x2)

inst_84809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816007ffffffffff; valaddr_reg:x3; val_offset:254427*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254427*0 + 3*329*FLEN/8, x4, x1, x2)

inst_84810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81600fffffffffff; valaddr_reg:x3; val_offset:254430*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254430*0 + 3*330*FLEN/8, x4, x1, x2)

inst_84811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81601fffffffffff; valaddr_reg:x3; val_offset:254433*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254433*0 + 3*331*FLEN/8, x4, x1, x2)

inst_84812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81603fffffffffff; valaddr_reg:x3; val_offset:254436*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254436*0 + 3*332*FLEN/8, x4, x1, x2)

inst_84813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x81607fffffffffff; valaddr_reg:x3; val_offset:254439*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254439*0 + 3*333*FLEN/8, x4, x1, x2)

inst_84814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8160ffffffffffff; valaddr_reg:x3; val_offset:254442*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254442*0 + 3*334*FLEN/8, x4, x1, x2)

inst_84815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8161ffffffffffff; valaddr_reg:x3; val_offset:254445*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254445*0 + 3*335*FLEN/8, x4, x1, x2)

inst_84816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8163ffffffffffff; valaddr_reg:x3; val_offset:254448*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254448*0 + 3*336*FLEN/8, x4, x1, x2)

inst_84817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8167ffffffffffff; valaddr_reg:x3; val_offset:254451*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254451*0 + 3*337*FLEN/8, x4, x1, x2)

inst_84818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x8168000000000000; valaddr_reg:x3; val_offset:254454*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254454*0 + 3*338*FLEN/8, x4, x1, x2)

inst_84819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816c000000000000; valaddr_reg:x3; val_offset:254457*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254457*0 + 3*339*FLEN/8, x4, x1, x2)

inst_84820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816e000000000000; valaddr_reg:x3; val_offset:254460*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254460*0 + 3*340*FLEN/8, x4, x1, x2)

inst_84821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816f000000000000; valaddr_reg:x3; val_offset:254463*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254463*0 + 3*341*FLEN/8, x4, x1, x2)

inst_84822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816f800000000000; valaddr_reg:x3; val_offset:254466*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254466*0 + 3*342*FLEN/8, x4, x1, x2)

inst_84823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fc00000000000; valaddr_reg:x3; val_offset:254469*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254469*0 + 3*343*FLEN/8, x4, x1, x2)

inst_84824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fe00000000000; valaddr_reg:x3; val_offset:254472*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254472*0 + 3*344*FLEN/8, x4, x1, x2)

inst_84825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ff00000000000; valaddr_reg:x3; val_offset:254475*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254475*0 + 3*345*FLEN/8, x4, x1, x2)

inst_84826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ff80000000000; valaddr_reg:x3; val_offset:254478*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254478*0 + 3*346*FLEN/8, x4, x1, x2)

inst_84827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffc0000000000; valaddr_reg:x3; val_offset:254481*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254481*0 + 3*347*FLEN/8, x4, x1, x2)

inst_84828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffe0000000000; valaddr_reg:x3; val_offset:254484*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254484*0 + 3*348*FLEN/8, x4, x1, x2)

inst_84829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fff0000000000; valaddr_reg:x3; val_offset:254487*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254487*0 + 3*349*FLEN/8, x4, x1, x2)

inst_84830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fff8000000000; valaddr_reg:x3; val_offset:254490*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254490*0 + 3*350*FLEN/8, x4, x1, x2)

inst_84831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffc000000000; valaddr_reg:x3; val_offset:254493*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254493*0 + 3*351*FLEN/8, x4, x1, x2)

inst_84832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffe000000000; valaddr_reg:x3; val_offset:254496*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254496*0 + 3*352*FLEN/8, x4, x1, x2)

inst_84833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffff000000000; valaddr_reg:x3; val_offset:254499*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254499*0 + 3*353*FLEN/8, x4, x1, x2)

inst_84834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffff800000000; valaddr_reg:x3; val_offset:254502*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254502*0 + 3*354*FLEN/8, x4, x1, x2)

inst_84835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffc00000000; valaddr_reg:x3; val_offset:254505*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254505*0 + 3*355*FLEN/8, x4, x1, x2)

inst_84836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffe00000000; valaddr_reg:x3; val_offset:254508*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254508*0 + 3*356*FLEN/8, x4, x1, x2)

inst_84837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffff00000000; valaddr_reg:x3; val_offset:254511*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254511*0 + 3*357*FLEN/8, x4, x1, x2)

inst_84838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffff80000000; valaddr_reg:x3; val_offset:254514*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254514*0 + 3*358*FLEN/8, x4, x1, x2)

inst_84839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffc0000000; valaddr_reg:x3; val_offset:254517*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254517*0 + 3*359*FLEN/8, x4, x1, x2)

inst_84840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffe0000000; valaddr_reg:x3; val_offset:254520*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254520*0 + 3*360*FLEN/8, x4, x1, x2)

inst_84841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffff0000000; valaddr_reg:x3; val_offset:254523*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254523*0 + 3*361*FLEN/8, x4, x1, x2)

inst_84842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffff8000000; valaddr_reg:x3; val_offset:254526*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254526*0 + 3*362*FLEN/8, x4, x1, x2)

inst_84843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffc000000; valaddr_reg:x3; val_offset:254529*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254529*0 + 3*363*FLEN/8, x4, x1, x2)

inst_84844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffe000000; valaddr_reg:x3; val_offset:254532*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254532*0 + 3*364*FLEN/8, x4, x1, x2)

inst_84845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffff000000; valaddr_reg:x3; val_offset:254535*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254535*0 + 3*365*FLEN/8, x4, x1, x2)

inst_84846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffff800000; valaddr_reg:x3; val_offset:254538*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254538*0 + 3*366*FLEN/8, x4, x1, x2)

inst_84847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffc00000; valaddr_reg:x3; val_offset:254541*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254541*0 + 3*367*FLEN/8, x4, x1, x2)

inst_84848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffe00000; valaddr_reg:x3; val_offset:254544*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254544*0 + 3*368*FLEN/8, x4, x1, x2)

inst_84849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffff00000; valaddr_reg:x3; val_offset:254547*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254547*0 + 3*369*FLEN/8, x4, x1, x2)

inst_84850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffff80000; valaddr_reg:x3; val_offset:254550*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254550*0 + 3*370*FLEN/8, x4, x1, x2)

inst_84851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffc0000; valaddr_reg:x3; val_offset:254553*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254553*0 + 3*371*FLEN/8, x4, x1, x2)

inst_84852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffe0000; valaddr_reg:x3; val_offset:254556*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254556*0 + 3*372*FLEN/8, x4, x1, x2)

inst_84853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffff0000; valaddr_reg:x3; val_offset:254559*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254559*0 + 3*373*FLEN/8, x4, x1, x2)

inst_84854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffff8000; valaddr_reg:x3; val_offset:254562*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254562*0 + 3*374*FLEN/8, x4, x1, x2)

inst_84855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffffc000; valaddr_reg:x3; val_offset:254565*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254565*0 + 3*375*FLEN/8, x4, x1, x2)

inst_84856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffffe000; valaddr_reg:x3; val_offset:254568*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254568*0 + 3*376*FLEN/8, x4, x1, x2)

inst_84857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffff000; valaddr_reg:x3; val_offset:254571*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254571*0 + 3*377*FLEN/8, x4, x1, x2)

inst_84858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffff800; valaddr_reg:x3; val_offset:254574*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254574*0 + 3*378*FLEN/8, x4, x1, x2)

inst_84859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffffc00; valaddr_reg:x3; val_offset:254577*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254577*0 + 3*379*FLEN/8, x4, x1, x2)

inst_84860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffffe00; valaddr_reg:x3; val_offset:254580*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254580*0 + 3*380*FLEN/8, x4, x1, x2)

inst_84861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffffff00; valaddr_reg:x3; val_offset:254583*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254583*0 + 3*381*FLEN/8, x4, x1, x2)

inst_84862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffffff80; valaddr_reg:x3; val_offset:254586*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254586*0 + 3*382*FLEN/8, x4, x1, x2)

inst_84863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffffffc0; valaddr_reg:x3; val_offset:254589*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254589*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_84864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffffffe0; valaddr_reg:x3; val_offset:254592*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254592*0 + 3*384*FLEN/8, x4, x1, x2)

inst_84865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffffff0; valaddr_reg:x3; val_offset:254595*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254595*0 + 3*385*FLEN/8, x4, x1, x2)

inst_84866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffffff8; valaddr_reg:x3; val_offset:254598*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254598*0 + 3*386*FLEN/8, x4, x1, x2)

inst_84867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffffffc; valaddr_reg:x3; val_offset:254601*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254601*0 + 3*387*FLEN/8, x4, x1, x2)

inst_84868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816ffffffffffffe; valaddr_reg:x3; val_offset:254604*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254604*0 + 3*388*FLEN/8, x4, x1, x2)

inst_84869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa9c9b63f6ecdd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa9c9b63f6ecdd; op2val:0x8000;
op3val:0x816fffffffffffff; valaddr_reg:x3; val_offset:254607*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254607*0 + 3*389*FLEN/8, x4, x1, x2)

inst_84870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000000000; valaddr_reg:x3; val_offset:254610*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254610*0 + 3*390*FLEN/8, x4, x1, x2)

inst_84871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000000001; valaddr_reg:x3; val_offset:254613*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254613*0 + 3*391*FLEN/8, x4, x1, x2)

inst_84872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000000003; valaddr_reg:x3; val_offset:254616*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254616*0 + 3*392*FLEN/8, x4, x1, x2)

inst_84873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000000007; valaddr_reg:x3; val_offset:254619*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254619*0 + 3*393*FLEN/8, x4, x1, x2)

inst_84874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000000000f; valaddr_reg:x3; val_offset:254622*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254622*0 + 3*394*FLEN/8, x4, x1, x2)

inst_84875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000000001f; valaddr_reg:x3; val_offset:254625*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254625*0 + 3*395*FLEN/8, x4, x1, x2)

inst_84876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000000003f; valaddr_reg:x3; val_offset:254628*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254628*0 + 3*396*FLEN/8, x4, x1, x2)

inst_84877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000000007f; valaddr_reg:x3; val_offset:254631*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254631*0 + 3*397*FLEN/8, x4, x1, x2)

inst_84878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000000000ff; valaddr_reg:x3; val_offset:254634*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254634*0 + 3*398*FLEN/8, x4, x1, x2)

inst_84879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000000001ff; valaddr_reg:x3; val_offset:254637*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254637*0 + 3*399*FLEN/8, x4, x1, x2)

inst_84880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000000003ff; valaddr_reg:x3; val_offset:254640*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254640*0 + 3*400*FLEN/8, x4, x1, x2)

inst_84881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000000007ff; valaddr_reg:x3; val_offset:254643*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254643*0 + 3*401*FLEN/8, x4, x1, x2)

inst_84882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000000fff; valaddr_reg:x3; val_offset:254646*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254646*0 + 3*402*FLEN/8, x4, x1, x2)

inst_84883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000001fff; valaddr_reg:x3; val_offset:254649*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254649*0 + 3*403*FLEN/8, x4, x1, x2)

inst_84884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000003fff; valaddr_reg:x3; val_offset:254652*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254652*0 + 3*404*FLEN/8, x4, x1, x2)

inst_84885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000007fff; valaddr_reg:x3; val_offset:254655*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254655*0 + 3*405*FLEN/8, x4, x1, x2)

inst_84886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000000ffff; valaddr_reg:x3; val_offset:254658*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254658*0 + 3*406*FLEN/8, x4, x1, x2)

inst_84887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000001ffff; valaddr_reg:x3; val_offset:254661*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254661*0 + 3*407*FLEN/8, x4, x1, x2)

inst_84888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000003ffff; valaddr_reg:x3; val_offset:254664*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254664*0 + 3*408*FLEN/8, x4, x1, x2)

inst_84889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000007ffff; valaddr_reg:x3; val_offset:254667*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254667*0 + 3*409*FLEN/8, x4, x1, x2)

inst_84890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000000fffff; valaddr_reg:x3; val_offset:254670*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254670*0 + 3*410*FLEN/8, x4, x1, x2)

inst_84891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000001fffff; valaddr_reg:x3; val_offset:254673*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254673*0 + 3*411*FLEN/8, x4, x1, x2)

inst_84892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000003fffff; valaddr_reg:x3; val_offset:254676*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254676*0 + 3*412*FLEN/8, x4, x1, x2)

inst_84893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000007fffff; valaddr_reg:x3; val_offset:254679*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254679*0 + 3*413*FLEN/8, x4, x1, x2)

inst_84894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000000ffffff; valaddr_reg:x3; val_offset:254682*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254682*0 + 3*414*FLEN/8, x4, x1, x2)

inst_84895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000001ffffff; valaddr_reg:x3; val_offset:254685*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254685*0 + 3*415*FLEN/8, x4, x1, x2)

inst_84896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000003ffffff; valaddr_reg:x3; val_offset:254688*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254688*0 + 3*416*FLEN/8, x4, x1, x2)

inst_84897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000007ffffff; valaddr_reg:x3; val_offset:254691*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254691*0 + 3*417*FLEN/8, x4, x1, x2)

inst_84898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000000fffffff; valaddr_reg:x3; val_offset:254694*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254694*0 + 3*418*FLEN/8, x4, x1, x2)

inst_84899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000001fffffff; valaddr_reg:x3; val_offset:254697*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254697*0 + 3*419*FLEN/8, x4, x1, x2)

inst_84900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000003fffffff; valaddr_reg:x3; val_offset:254700*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254700*0 + 3*420*FLEN/8, x4, x1, x2)

inst_84901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000007fffffff; valaddr_reg:x3; val_offset:254703*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254703*0 + 3*421*FLEN/8, x4, x1, x2)

inst_84902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200000ffffffff; valaddr_reg:x3; val_offset:254706*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254706*0 + 3*422*FLEN/8, x4, x1, x2)

inst_84903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200001ffffffff; valaddr_reg:x3; val_offset:254709*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254709*0 + 3*423*FLEN/8, x4, x1, x2)

inst_84904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200003ffffffff; valaddr_reg:x3; val_offset:254712*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254712*0 + 3*424*FLEN/8, x4, x1, x2)

inst_84905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200007ffffffff; valaddr_reg:x3; val_offset:254715*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254715*0 + 3*425*FLEN/8, x4, x1, x2)

inst_84906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920000fffffffff; valaddr_reg:x3; val_offset:254718*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254718*0 + 3*426*FLEN/8, x4, x1, x2)

inst_84907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920001fffffffff; valaddr_reg:x3; val_offset:254721*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254721*0 + 3*427*FLEN/8, x4, x1, x2)

inst_84908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920003fffffffff; valaddr_reg:x3; val_offset:254724*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254724*0 + 3*428*FLEN/8, x4, x1, x2)

inst_84909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920007fffffffff; valaddr_reg:x3; val_offset:254727*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254727*0 + 3*429*FLEN/8, x4, x1, x2)

inst_84910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392000ffffffffff; valaddr_reg:x3; val_offset:254730*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254730*0 + 3*430*FLEN/8, x4, x1, x2)

inst_84911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392001ffffffffff; valaddr_reg:x3; val_offset:254733*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254733*0 + 3*431*FLEN/8, x4, x1, x2)

inst_84912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392003ffffffffff; valaddr_reg:x3; val_offset:254736*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254736*0 + 3*432*FLEN/8, x4, x1, x2)

inst_84913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392007ffffffffff; valaddr_reg:x3; val_offset:254739*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254739*0 + 3*433*FLEN/8, x4, x1, x2)

inst_84914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39200fffffffffff; valaddr_reg:x3; val_offset:254742*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254742*0 + 3*434*FLEN/8, x4, x1, x2)

inst_84915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39201fffffffffff; valaddr_reg:x3; val_offset:254745*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254745*0 + 3*435*FLEN/8, x4, x1, x2)

inst_84916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39203fffffffffff; valaddr_reg:x3; val_offset:254748*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254748*0 + 3*436*FLEN/8, x4, x1, x2)

inst_84917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x39207fffffffffff; valaddr_reg:x3; val_offset:254751*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254751*0 + 3*437*FLEN/8, x4, x1, x2)

inst_84918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3920ffffffffffff; valaddr_reg:x3; val_offset:254754*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254754*0 + 3*438*FLEN/8, x4, x1, x2)

inst_84919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3921ffffffffffff; valaddr_reg:x3; val_offset:254757*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254757*0 + 3*439*FLEN/8, x4, x1, x2)

inst_84920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3923ffffffffffff; valaddr_reg:x3; val_offset:254760*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254760*0 + 3*440*FLEN/8, x4, x1, x2)

inst_84921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3927ffffffffffff; valaddr_reg:x3; val_offset:254763*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254763*0 + 3*441*FLEN/8, x4, x1, x2)

inst_84922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3928000000000000; valaddr_reg:x3; val_offset:254766*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254766*0 + 3*442*FLEN/8, x4, x1, x2)

inst_84923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392c000000000000; valaddr_reg:x3; val_offset:254769*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254769*0 + 3*443*FLEN/8, x4, x1, x2)

inst_84924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392e000000000000; valaddr_reg:x3; val_offset:254772*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254772*0 + 3*444*FLEN/8, x4, x1, x2)

inst_84925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392f000000000000; valaddr_reg:x3; val_offset:254775*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254775*0 + 3*445*FLEN/8, x4, x1, x2)

inst_84926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392f800000000000; valaddr_reg:x3; val_offset:254778*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254778*0 + 3*446*FLEN/8, x4, x1, x2)

inst_84927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fc00000000000; valaddr_reg:x3; val_offset:254781*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254781*0 + 3*447*FLEN/8, x4, x1, x2)

inst_84928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fe00000000000; valaddr_reg:x3; val_offset:254784*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254784*0 + 3*448*FLEN/8, x4, x1, x2)

inst_84929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ff00000000000; valaddr_reg:x3; val_offset:254787*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254787*0 + 3*449*FLEN/8, x4, x1, x2)

inst_84930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ff80000000000; valaddr_reg:x3; val_offset:254790*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254790*0 + 3*450*FLEN/8, x4, x1, x2)

inst_84931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffc0000000000; valaddr_reg:x3; val_offset:254793*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254793*0 + 3*451*FLEN/8, x4, x1, x2)

inst_84932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffe0000000000; valaddr_reg:x3; val_offset:254796*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254796*0 + 3*452*FLEN/8, x4, x1, x2)

inst_84933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fff0000000000; valaddr_reg:x3; val_offset:254799*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254799*0 + 3*453*FLEN/8, x4, x1, x2)

inst_84934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fff8000000000; valaddr_reg:x3; val_offset:254802*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254802*0 + 3*454*FLEN/8, x4, x1, x2)

inst_84935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffc000000000; valaddr_reg:x3; val_offset:254805*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254805*0 + 3*455*FLEN/8, x4, x1, x2)

inst_84936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffe000000000; valaddr_reg:x3; val_offset:254808*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254808*0 + 3*456*FLEN/8, x4, x1, x2)

inst_84937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffff000000000; valaddr_reg:x3; val_offset:254811*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254811*0 + 3*457*FLEN/8, x4, x1, x2)

inst_84938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffff800000000; valaddr_reg:x3; val_offset:254814*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254814*0 + 3*458*FLEN/8, x4, x1, x2)

inst_84939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffc00000000; valaddr_reg:x3; val_offset:254817*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254817*0 + 3*459*FLEN/8, x4, x1, x2)

inst_84940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffe00000000; valaddr_reg:x3; val_offset:254820*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254820*0 + 3*460*FLEN/8, x4, x1, x2)

inst_84941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffff00000000; valaddr_reg:x3; val_offset:254823*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254823*0 + 3*461*FLEN/8, x4, x1, x2)

inst_84942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffff80000000; valaddr_reg:x3; val_offset:254826*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254826*0 + 3*462*FLEN/8, x4, x1, x2)

inst_84943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffc0000000; valaddr_reg:x3; val_offset:254829*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254829*0 + 3*463*FLEN/8, x4, x1, x2)

inst_84944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffe0000000; valaddr_reg:x3; val_offset:254832*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254832*0 + 3*464*FLEN/8, x4, x1, x2)

inst_84945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffff0000000; valaddr_reg:x3; val_offset:254835*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254835*0 + 3*465*FLEN/8, x4, x1, x2)

inst_84946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffff8000000; valaddr_reg:x3; val_offset:254838*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254838*0 + 3*466*FLEN/8, x4, x1, x2)

inst_84947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffc000000; valaddr_reg:x3; val_offset:254841*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254841*0 + 3*467*FLEN/8, x4, x1, x2)

inst_84948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffe000000; valaddr_reg:x3; val_offset:254844*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254844*0 + 3*468*FLEN/8, x4, x1, x2)

inst_84949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffff000000; valaddr_reg:x3; val_offset:254847*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254847*0 + 3*469*FLEN/8, x4, x1, x2)

inst_84950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffff800000; valaddr_reg:x3; val_offset:254850*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254850*0 + 3*470*FLEN/8, x4, x1, x2)

inst_84951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffc00000; valaddr_reg:x3; val_offset:254853*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254853*0 + 3*471*FLEN/8, x4, x1, x2)

inst_84952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffe00000; valaddr_reg:x3; val_offset:254856*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254856*0 + 3*472*FLEN/8, x4, x1, x2)

inst_84953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffff00000; valaddr_reg:x3; val_offset:254859*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254859*0 + 3*473*FLEN/8, x4, x1, x2)

inst_84954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffff80000; valaddr_reg:x3; val_offset:254862*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254862*0 + 3*474*FLEN/8, x4, x1, x2)

inst_84955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffc0000; valaddr_reg:x3; val_offset:254865*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254865*0 + 3*475*FLEN/8, x4, x1, x2)

inst_84956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffe0000; valaddr_reg:x3; val_offset:254868*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254868*0 + 3*476*FLEN/8, x4, x1, x2)

inst_84957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffff0000; valaddr_reg:x3; val_offset:254871*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254871*0 + 3*477*FLEN/8, x4, x1, x2)

inst_84958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffff8000; valaddr_reg:x3; val_offset:254874*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254874*0 + 3*478*FLEN/8, x4, x1, x2)

inst_84959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffffc000; valaddr_reg:x3; val_offset:254877*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254877*0 + 3*479*FLEN/8, x4, x1, x2)

inst_84960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffffe000; valaddr_reg:x3; val_offset:254880*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254880*0 + 3*480*FLEN/8, x4, x1, x2)

inst_84961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffff000; valaddr_reg:x3; val_offset:254883*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254883*0 + 3*481*FLEN/8, x4, x1, x2)

inst_84962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffff800; valaddr_reg:x3; val_offset:254886*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254886*0 + 3*482*FLEN/8, x4, x1, x2)

inst_84963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffffc00; valaddr_reg:x3; val_offset:254889*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254889*0 + 3*483*FLEN/8, x4, x1, x2)

inst_84964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffffe00; valaddr_reg:x3; val_offset:254892*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254892*0 + 3*484*FLEN/8, x4, x1, x2)

inst_84965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffffff00; valaddr_reg:x3; val_offset:254895*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254895*0 + 3*485*FLEN/8, x4, x1, x2)

inst_84966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffffff80; valaddr_reg:x3; val_offset:254898*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254898*0 + 3*486*FLEN/8, x4, x1, x2)

inst_84967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffffffc0; valaddr_reg:x3; val_offset:254901*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254901*0 + 3*487*FLEN/8, x4, x1, x2)

inst_84968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffffffe0; valaddr_reg:x3; val_offset:254904*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254904*0 + 3*488*FLEN/8, x4, x1, x2)

inst_84969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffffff0; valaddr_reg:x3; val_offset:254907*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254907*0 + 3*489*FLEN/8, x4, x1, x2)

inst_84970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffffff8; valaddr_reg:x3; val_offset:254910*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254910*0 + 3*490*FLEN/8, x4, x1, x2)

inst_84971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffffffc; valaddr_reg:x3; val_offset:254913*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254913*0 + 3*491*FLEN/8, x4, x1, x2)

inst_84972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392ffffffffffffe; valaddr_reg:x3; val_offset:254916*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254916*0 + 3*492*FLEN/8, x4, x1, x2)

inst_84973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x392 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x392fffffffffffff; valaddr_reg:x3; val_offset:254919*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254919*0 + 3*493*FLEN/8, x4, x1, x2)

inst_84974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:254922*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254922*0 + 3*494*FLEN/8, x4, x1, x2)

inst_84975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:254925*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254925*0 + 3*495*FLEN/8, x4, x1, x2)

inst_84976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:254928*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254928*0 + 3*496*FLEN/8, x4, x1, x2)

inst_84977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:254931*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254931*0 + 3*497*FLEN/8, x4, x1, x2)

inst_84978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:254934*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254934*0 + 3*498*FLEN/8, x4, x1, x2)

inst_84979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:254937*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254937*0 + 3*499*FLEN/8, x4, x1, x2)

inst_84980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:254940*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254940*0 + 3*500*FLEN/8, x4, x1, x2)

inst_84981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:254943*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254943*0 + 3*501*FLEN/8, x4, x1, x2)

inst_84982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:254946*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254946*0 + 3*502*FLEN/8, x4, x1, x2)

inst_84983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:254949*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254949*0 + 3*503*FLEN/8, x4, x1, x2)

inst_84984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:254952*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254952*0 + 3*504*FLEN/8, x4, x1, x2)

inst_84985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:254955*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254955*0 + 3*505*FLEN/8, x4, x1, x2)

inst_84986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:254958*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254958*0 + 3*506*FLEN/8, x4, x1, x2)

inst_84987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:254961*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254961*0 + 3*507*FLEN/8, x4, x1, x2)

inst_84988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:254964*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254964*0 + 3*508*FLEN/8, x4, x1, x2)

inst_84989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:254967*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254967*0 + 3*509*FLEN/8, x4, x1, x2)

inst_84990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:254970*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254970*0 + 3*510*FLEN/8, x4, x1, x2)

inst_84991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:254973*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254973*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_84992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:254976*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254976*0 + 3*512*FLEN/8, x4, x1, x2)

inst_84993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:254979*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254979*0 + 3*513*FLEN/8, x4, x1, x2)

inst_84994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:254982*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254982*0 + 3*514*FLEN/8, x4, x1, x2)

inst_84995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xaa1c010e1e4e5 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x339a0d26751ff and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faaa1c010e1e4e5; op2val:0x203339a0d26751ff;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:254985*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254985*0 + 3*515*FLEN/8, x4, x1, x2)

inst_84996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:254988*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254988*0 + 3*516*FLEN/8, x4, x1, x2)

inst_84997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:254991*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254991*0 + 3*517*FLEN/8, x4, x1, x2)

inst_84998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:254994*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254994*0 + 3*518*FLEN/8, x4, x1, x2)

inst_84999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:254997*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 254997*0 + 3*519*FLEN/8, x4, x1, x2)

inst_85000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:255000*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255000*0 + 3*520*FLEN/8, x4, x1, x2)

inst_85001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:255003*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255003*0 + 3*521*FLEN/8, x4, x1, x2)

inst_85002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:255006*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255006*0 + 3*522*FLEN/8, x4, x1, x2)

inst_85003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:255009*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255009*0 + 3*523*FLEN/8, x4, x1, x2)

inst_85004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:255012*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255012*0 + 3*524*FLEN/8, x4, x1, x2)

inst_85005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:255015*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255015*0 + 3*525*FLEN/8, x4, x1, x2)

inst_85006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:255018*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255018*0 + 3*526*FLEN/8, x4, x1, x2)

inst_85007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:255021*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255021*0 + 3*527*FLEN/8, x4, x1, x2)

inst_85008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:255024*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255024*0 + 3*528*FLEN/8, x4, x1, x2)

inst_85009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:255027*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255027*0 + 3*529*FLEN/8, x4, x1, x2)

inst_85010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:255030*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255030*0 + 3*530*FLEN/8, x4, x1, x2)

inst_85011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:255033*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255033*0 + 3*531*FLEN/8, x4, x1, x2)

inst_85012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:255036*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255036*0 + 3*532*FLEN/8, x4, x1, x2)

inst_85013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:255039*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255039*0 + 3*533*FLEN/8, x4, x1, x2)

inst_85014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:255042*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255042*0 + 3*534*FLEN/8, x4, x1, x2)

inst_85015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:255045*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255045*0 + 3*535*FLEN/8, x4, x1, x2)

inst_85016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:255048*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255048*0 + 3*536*FLEN/8, x4, x1, x2)

inst_85017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:255051*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255051*0 + 3*537*FLEN/8, x4, x1, x2)

inst_85018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000000000; valaddr_reg:x3; val_offset:255054*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255054*0 + 3*538*FLEN/8, x4, x1, x2)

inst_85019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000000001; valaddr_reg:x3; val_offset:255057*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255057*0 + 3*539*FLEN/8, x4, x1, x2)

inst_85020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000000003; valaddr_reg:x3; val_offset:255060*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255060*0 + 3*540*FLEN/8, x4, x1, x2)

inst_85021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000000007; valaddr_reg:x3; val_offset:255063*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255063*0 + 3*541*FLEN/8, x4, x1, x2)

inst_85022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000000000f; valaddr_reg:x3; val_offset:255066*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255066*0 + 3*542*FLEN/8, x4, x1, x2)

inst_85023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000000001f; valaddr_reg:x3; val_offset:255069*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255069*0 + 3*543*FLEN/8, x4, x1, x2)

inst_85024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000000003f; valaddr_reg:x3; val_offset:255072*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255072*0 + 3*544*FLEN/8, x4, x1, x2)

inst_85025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000000007f; valaddr_reg:x3; val_offset:255075*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255075*0 + 3*545*FLEN/8, x4, x1, x2)

inst_85026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000000000ff; valaddr_reg:x3; val_offset:255078*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255078*0 + 3*546*FLEN/8, x4, x1, x2)

inst_85027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000000001ff; valaddr_reg:x3; val_offset:255081*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255081*0 + 3*547*FLEN/8, x4, x1, x2)

inst_85028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000000003ff; valaddr_reg:x3; val_offset:255084*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255084*0 + 3*548*FLEN/8, x4, x1, x2)

inst_85029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000000007ff; valaddr_reg:x3; val_offset:255087*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255087*0 + 3*549*FLEN/8, x4, x1, x2)

inst_85030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000000fff; valaddr_reg:x3; val_offset:255090*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255090*0 + 3*550*FLEN/8, x4, x1, x2)

inst_85031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000001fff; valaddr_reg:x3; val_offset:255093*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255093*0 + 3*551*FLEN/8, x4, x1, x2)

inst_85032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000003fff; valaddr_reg:x3; val_offset:255096*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255096*0 + 3*552*FLEN/8, x4, x1, x2)

inst_85033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000007fff; valaddr_reg:x3; val_offset:255099*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255099*0 + 3*553*FLEN/8, x4, x1, x2)

inst_85034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000000ffff; valaddr_reg:x3; val_offset:255102*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255102*0 + 3*554*FLEN/8, x4, x1, x2)

inst_85035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000001ffff; valaddr_reg:x3; val_offset:255105*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255105*0 + 3*555*FLEN/8, x4, x1, x2)

inst_85036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000003ffff; valaddr_reg:x3; val_offset:255108*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255108*0 + 3*556*FLEN/8, x4, x1, x2)

inst_85037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000007ffff; valaddr_reg:x3; val_offset:255111*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255111*0 + 3*557*FLEN/8, x4, x1, x2)

inst_85038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000000fffff; valaddr_reg:x3; val_offset:255114*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255114*0 + 3*558*FLEN/8, x4, x1, x2)

inst_85039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000001fffff; valaddr_reg:x3; val_offset:255117*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255117*0 + 3*559*FLEN/8, x4, x1, x2)

inst_85040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000003fffff; valaddr_reg:x3; val_offset:255120*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255120*0 + 3*560*FLEN/8, x4, x1, x2)

inst_85041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000007fffff; valaddr_reg:x3; val_offset:255123*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255123*0 + 3*561*FLEN/8, x4, x1, x2)

inst_85042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000000ffffff; valaddr_reg:x3; val_offset:255126*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255126*0 + 3*562*FLEN/8, x4, x1, x2)

inst_85043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000001ffffff; valaddr_reg:x3; val_offset:255129*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255129*0 + 3*563*FLEN/8, x4, x1, x2)

inst_85044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000003ffffff; valaddr_reg:x3; val_offset:255132*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255132*0 + 3*564*FLEN/8, x4, x1, x2)

inst_85045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000007ffffff; valaddr_reg:x3; val_offset:255135*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255135*0 + 3*565*FLEN/8, x4, x1, x2)

inst_85046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000000fffffff; valaddr_reg:x3; val_offset:255138*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255138*0 + 3*566*FLEN/8, x4, x1, x2)

inst_85047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000001fffffff; valaddr_reg:x3; val_offset:255141*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255141*0 + 3*567*FLEN/8, x4, x1, x2)

inst_85048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000003fffffff; valaddr_reg:x3; val_offset:255144*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255144*0 + 3*568*FLEN/8, x4, x1, x2)

inst_85049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000007fffffff; valaddr_reg:x3; val_offset:255147*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255147*0 + 3*569*FLEN/8, x4, x1, x2)

inst_85050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00000ffffffff; valaddr_reg:x3; val_offset:255150*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255150*0 + 3*570*FLEN/8, x4, x1, x2)

inst_85051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00001ffffffff; valaddr_reg:x3; val_offset:255153*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255153*0 + 3*571*FLEN/8, x4, x1, x2)

inst_85052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00003ffffffff; valaddr_reg:x3; val_offset:255156*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255156*0 + 3*572*FLEN/8, x4, x1, x2)

inst_85053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00007ffffffff; valaddr_reg:x3; val_offset:255159*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255159*0 + 3*573*FLEN/8, x4, x1, x2)

inst_85054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0000fffffffff; valaddr_reg:x3; val_offset:255162*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255162*0 + 3*574*FLEN/8, x4, x1, x2)

inst_85055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0001fffffffff; valaddr_reg:x3; val_offset:255165*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255165*0 + 3*575*FLEN/8, x4, x1, x2)

inst_85056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0003fffffffff; valaddr_reg:x3; val_offset:255168*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255168*0 + 3*576*FLEN/8, x4, x1, x2)

inst_85057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0007fffffffff; valaddr_reg:x3; val_offset:255171*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255171*0 + 3*577*FLEN/8, x4, x1, x2)

inst_85058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f000ffffffffff; valaddr_reg:x3; val_offset:255174*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255174*0 + 3*578*FLEN/8, x4, x1, x2)

inst_85059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f001ffffffffff; valaddr_reg:x3; val_offset:255177*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255177*0 + 3*579*FLEN/8, x4, x1, x2)

inst_85060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f003ffffffffff; valaddr_reg:x3; val_offset:255180*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255180*0 + 3*580*FLEN/8, x4, x1, x2)

inst_85061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f007ffffffffff; valaddr_reg:x3; val_offset:255183*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255183*0 + 3*581*FLEN/8, x4, x1, x2)

inst_85062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f00fffffffffff; valaddr_reg:x3; val_offset:255186*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255186*0 + 3*582*FLEN/8, x4, x1, x2)

inst_85063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f01fffffffffff; valaddr_reg:x3; val_offset:255189*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255189*0 + 3*583*FLEN/8, x4, x1, x2)

inst_85064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f03fffffffffff; valaddr_reg:x3; val_offset:255192*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255192*0 + 3*584*FLEN/8, x4, x1, x2)

inst_85065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f07fffffffffff; valaddr_reg:x3; val_offset:255195*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255195*0 + 3*585*FLEN/8, x4, x1, x2)

inst_85066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f0ffffffffffff; valaddr_reg:x3; val_offset:255198*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255198*0 + 3*586*FLEN/8, x4, x1, x2)

inst_85067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f1ffffffffffff; valaddr_reg:x3; val_offset:255201*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255201*0 + 3*587*FLEN/8, x4, x1, x2)

inst_85068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f3ffffffffffff; valaddr_reg:x3; val_offset:255204*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255204*0 + 3*588*FLEN/8, x4, x1, x2)

inst_85069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f7ffffffffffff; valaddr_reg:x3; val_offset:255207*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255207*0 + 3*589*FLEN/8, x4, x1, x2)

inst_85070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82f8000000000000; valaddr_reg:x3; val_offset:255210*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255210*0 + 3*590*FLEN/8, x4, x1, x2)

inst_85071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fc000000000000; valaddr_reg:x3; val_offset:255213*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255213*0 + 3*591*FLEN/8, x4, x1, x2)

inst_85072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fe000000000000; valaddr_reg:x3; val_offset:255216*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255216*0 + 3*592*FLEN/8, x4, x1, x2)

inst_85073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ff000000000000; valaddr_reg:x3; val_offset:255219*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255219*0 + 3*593*FLEN/8, x4, x1, x2)

inst_85074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ff800000000000; valaddr_reg:x3; val_offset:255222*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255222*0 + 3*594*FLEN/8, x4, x1, x2)

inst_85075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffc00000000000; valaddr_reg:x3; val_offset:255225*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255225*0 + 3*595*FLEN/8, x4, x1, x2)

inst_85076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffe00000000000; valaddr_reg:x3; val_offset:255228*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255228*0 + 3*596*FLEN/8, x4, x1, x2)

inst_85077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fff00000000000; valaddr_reg:x3; val_offset:255231*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255231*0 + 3*597*FLEN/8, x4, x1, x2)

inst_85078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fff80000000000; valaddr_reg:x3; val_offset:255234*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255234*0 + 3*598*FLEN/8, x4, x1, x2)

inst_85079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffc0000000000; valaddr_reg:x3; val_offset:255237*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255237*0 + 3*599*FLEN/8, x4, x1, x2)

inst_85080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffe0000000000; valaddr_reg:x3; val_offset:255240*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255240*0 + 3*600*FLEN/8, x4, x1, x2)

inst_85081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffff0000000000; valaddr_reg:x3; val_offset:255243*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255243*0 + 3*601*FLEN/8, x4, x1, x2)

inst_85082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffff8000000000; valaddr_reg:x3; val_offset:255246*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255246*0 + 3*602*FLEN/8, x4, x1, x2)

inst_85083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffc000000000; valaddr_reg:x3; val_offset:255249*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255249*0 + 3*603*FLEN/8, x4, x1, x2)

inst_85084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffe000000000; valaddr_reg:x3; val_offset:255252*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255252*0 + 3*604*FLEN/8, x4, x1, x2)

inst_85085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffff000000000; valaddr_reg:x3; val_offset:255255*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255255*0 + 3*605*FLEN/8, x4, x1, x2)

inst_85086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffff800000000; valaddr_reg:x3; val_offset:255258*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255258*0 + 3*606*FLEN/8, x4, x1, x2)

inst_85087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffc00000000; valaddr_reg:x3; val_offset:255261*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255261*0 + 3*607*FLEN/8, x4, x1, x2)

inst_85088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffe00000000; valaddr_reg:x3; val_offset:255264*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255264*0 + 3*608*FLEN/8, x4, x1, x2)

inst_85089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffff00000000; valaddr_reg:x3; val_offset:255267*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255267*0 + 3*609*FLEN/8, x4, x1, x2)

inst_85090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffff80000000; valaddr_reg:x3; val_offset:255270*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255270*0 + 3*610*FLEN/8, x4, x1, x2)

inst_85091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffc0000000; valaddr_reg:x3; val_offset:255273*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255273*0 + 3*611*FLEN/8, x4, x1, x2)

inst_85092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffe0000000; valaddr_reg:x3; val_offset:255276*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255276*0 + 3*612*FLEN/8, x4, x1, x2)

inst_85093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffff0000000; valaddr_reg:x3; val_offset:255279*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255279*0 + 3*613*FLEN/8, x4, x1, x2)

inst_85094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffff8000000; valaddr_reg:x3; val_offset:255282*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255282*0 + 3*614*FLEN/8, x4, x1, x2)

inst_85095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffc000000; valaddr_reg:x3; val_offset:255285*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255285*0 + 3*615*FLEN/8, x4, x1, x2)

inst_85096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffe000000; valaddr_reg:x3; val_offset:255288*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255288*0 + 3*616*FLEN/8, x4, x1, x2)

inst_85097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffff000000; valaddr_reg:x3; val_offset:255291*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255291*0 + 3*617*FLEN/8, x4, x1, x2)

inst_85098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffff800000; valaddr_reg:x3; val_offset:255294*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255294*0 + 3*618*FLEN/8, x4, x1, x2)

inst_85099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffc00000; valaddr_reg:x3; val_offset:255297*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255297*0 + 3*619*FLEN/8, x4, x1, x2)

inst_85100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffe00000; valaddr_reg:x3; val_offset:255300*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255300*0 + 3*620*FLEN/8, x4, x1, x2)

inst_85101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffff00000; valaddr_reg:x3; val_offset:255303*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255303*0 + 3*621*FLEN/8, x4, x1, x2)

inst_85102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffff80000; valaddr_reg:x3; val_offset:255306*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255306*0 + 3*622*FLEN/8, x4, x1, x2)

inst_85103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffc0000; valaddr_reg:x3; val_offset:255309*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255309*0 + 3*623*FLEN/8, x4, x1, x2)

inst_85104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffe0000; valaddr_reg:x3; val_offset:255312*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255312*0 + 3*624*FLEN/8, x4, x1, x2)

inst_85105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffff0000; valaddr_reg:x3; val_offset:255315*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255315*0 + 3*625*FLEN/8, x4, x1, x2)

inst_85106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffff8000; valaddr_reg:x3; val_offset:255318*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255318*0 + 3*626*FLEN/8, x4, x1, x2)

inst_85107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffffc000; valaddr_reg:x3; val_offset:255321*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255321*0 + 3*627*FLEN/8, x4, x1, x2)

inst_85108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffffe000; valaddr_reg:x3; val_offset:255324*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255324*0 + 3*628*FLEN/8, x4, x1, x2)

inst_85109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffff000; valaddr_reg:x3; val_offset:255327*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255327*0 + 3*629*FLEN/8, x4, x1, x2)

inst_85110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffff800; valaddr_reg:x3; val_offset:255330*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255330*0 + 3*630*FLEN/8, x4, x1, x2)

inst_85111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffffc00; valaddr_reg:x3; val_offset:255333*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255333*0 + 3*631*FLEN/8, x4, x1, x2)

inst_85112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffffe00; valaddr_reg:x3; val_offset:255336*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255336*0 + 3*632*FLEN/8, x4, x1, x2)

inst_85113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffffff00; valaddr_reg:x3; val_offset:255339*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255339*0 + 3*633*FLEN/8, x4, x1, x2)

inst_85114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffffff80; valaddr_reg:x3; val_offset:255342*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255342*0 + 3*634*FLEN/8, x4, x1, x2)

inst_85115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffffffc0; valaddr_reg:x3; val_offset:255345*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255345*0 + 3*635*FLEN/8, x4, x1, x2)

inst_85116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffffffe0; valaddr_reg:x3; val_offset:255348*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255348*0 + 3*636*FLEN/8, x4, x1, x2)

inst_85117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffffff0; valaddr_reg:x3; val_offset:255351*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255351*0 + 3*637*FLEN/8, x4, x1, x2)

inst_85118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffffff8; valaddr_reg:x3; val_offset:255354*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255354*0 + 3*638*FLEN/8, x4, x1, x2)

inst_85119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffffffc; valaddr_reg:x3; val_offset:255357*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255357*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_85120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82fffffffffffffe; valaddr_reg:x3; val_offset:255360*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255360*0 + 3*640*FLEN/8, x4, x1, x2)

inst_85121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab4fd6611517f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02f and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab4fd6611517f; op2val:0x8000;
op3val:0x82ffffffffffffff; valaddr_reg:x3; val_offset:255363*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255363*0 + 3*641*FLEN/8, x4, x1, x2)

inst_85122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:255366*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255366*0 + 3*642*FLEN/8, x4, x1, x2)

inst_85123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:255369*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255369*0 + 3*643*FLEN/8, x4, x1, x2)

inst_85124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:255372*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255372*0 + 3*644*FLEN/8, x4, x1, x2)

inst_85125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:255375*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255375*0 + 3*645*FLEN/8, x4, x1, x2)

inst_85126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:255378*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255378*0 + 3*646*FLEN/8, x4, x1, x2)

inst_85127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:255381*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255381*0 + 3*647*FLEN/8, x4, x1, x2)

inst_85128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:255384*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255384*0 + 3*648*FLEN/8, x4, x1, x2)

inst_85129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:255387*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255387*0 + 3*649*FLEN/8, x4, x1, x2)

inst_85130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:255390*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255390*0 + 3*650*FLEN/8, x4, x1, x2)

inst_85131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:255393*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255393*0 + 3*651*FLEN/8, x4, x1, x2)

inst_85132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:255396*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255396*0 + 3*652*FLEN/8, x4, x1, x2)

inst_85133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:255399*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255399*0 + 3*653*FLEN/8, x4, x1, x2)

inst_85134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:255402*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255402*0 + 3*654*FLEN/8, x4, x1, x2)

inst_85135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:255405*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255405*0 + 3*655*FLEN/8, x4, x1, x2)

inst_85136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:255408*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255408*0 + 3*656*FLEN/8, x4, x1, x2)

inst_85137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:255411*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255411*0 + 3*657*FLEN/8, x4, x1, x2)

inst_85138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:255414*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255414*0 + 3*658*FLEN/8, x4, x1, x2)

inst_85139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:255417*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255417*0 + 3*659*FLEN/8, x4, x1, x2)

inst_85140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:255420*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255420*0 + 3*660*FLEN/8, x4, x1, x2)

inst_85141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:255423*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255423*0 + 3*661*FLEN/8, x4, x1, x2)

inst_85142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:255426*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255426*0 + 3*662*FLEN/8, x4, x1, x2)

inst_85143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:255429*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255429*0 + 3*663*FLEN/8, x4, x1, x2)

inst_85144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000000000; valaddr_reg:x3; val_offset:255432*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255432*0 + 3*664*FLEN/8, x4, x1, x2)

inst_85145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000000001; valaddr_reg:x3; val_offset:255435*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255435*0 + 3*665*FLEN/8, x4, x1, x2)

inst_85146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000000003; valaddr_reg:x3; val_offset:255438*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255438*0 + 3*666*FLEN/8, x4, x1, x2)

inst_85147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000000007; valaddr_reg:x3; val_offset:255441*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255441*0 + 3*667*FLEN/8, x4, x1, x2)

inst_85148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000000000f; valaddr_reg:x3; val_offset:255444*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255444*0 + 3*668*FLEN/8, x4, x1, x2)

inst_85149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000000001f; valaddr_reg:x3; val_offset:255447*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255447*0 + 3*669*FLEN/8, x4, x1, x2)

inst_85150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000000003f; valaddr_reg:x3; val_offset:255450*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255450*0 + 3*670*FLEN/8, x4, x1, x2)

inst_85151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000000007f; valaddr_reg:x3; val_offset:255453*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255453*0 + 3*671*FLEN/8, x4, x1, x2)

inst_85152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000000000ff; valaddr_reg:x3; val_offset:255456*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255456*0 + 3*672*FLEN/8, x4, x1, x2)

inst_85153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000000001ff; valaddr_reg:x3; val_offset:255459*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255459*0 + 3*673*FLEN/8, x4, x1, x2)

inst_85154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000000003ff; valaddr_reg:x3; val_offset:255462*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255462*0 + 3*674*FLEN/8, x4, x1, x2)

inst_85155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000000007ff; valaddr_reg:x3; val_offset:255465*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255465*0 + 3*675*FLEN/8, x4, x1, x2)

inst_85156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000000fff; valaddr_reg:x3; val_offset:255468*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255468*0 + 3*676*FLEN/8, x4, x1, x2)

inst_85157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000001fff; valaddr_reg:x3; val_offset:255471*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255471*0 + 3*677*FLEN/8, x4, x1, x2)

inst_85158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000003fff; valaddr_reg:x3; val_offset:255474*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255474*0 + 3*678*FLEN/8, x4, x1, x2)

inst_85159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000007fff; valaddr_reg:x3; val_offset:255477*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255477*0 + 3*679*FLEN/8, x4, x1, x2)

inst_85160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000000ffff; valaddr_reg:x3; val_offset:255480*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255480*0 + 3*680*FLEN/8, x4, x1, x2)

inst_85161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000001ffff; valaddr_reg:x3; val_offset:255483*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255483*0 + 3*681*FLEN/8, x4, x1, x2)

inst_85162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000003ffff; valaddr_reg:x3; val_offset:255486*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255486*0 + 3*682*FLEN/8, x4, x1, x2)

inst_85163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000007ffff; valaddr_reg:x3; val_offset:255489*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255489*0 + 3*683*FLEN/8, x4, x1, x2)

inst_85164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000000fffff; valaddr_reg:x3; val_offset:255492*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255492*0 + 3*684*FLEN/8, x4, x1, x2)

inst_85165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000001fffff; valaddr_reg:x3; val_offset:255495*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255495*0 + 3*685*FLEN/8, x4, x1, x2)

inst_85166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000003fffff; valaddr_reg:x3; val_offset:255498*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255498*0 + 3*686*FLEN/8, x4, x1, x2)

inst_85167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000007fffff; valaddr_reg:x3; val_offset:255501*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255501*0 + 3*687*FLEN/8, x4, x1, x2)

inst_85168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000000ffffff; valaddr_reg:x3; val_offset:255504*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255504*0 + 3*688*FLEN/8, x4, x1, x2)

inst_85169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000001ffffff; valaddr_reg:x3; val_offset:255507*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255507*0 + 3*689*FLEN/8, x4, x1, x2)

inst_85170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000003ffffff; valaddr_reg:x3; val_offset:255510*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255510*0 + 3*690*FLEN/8, x4, x1, x2)

inst_85171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000007ffffff; valaddr_reg:x3; val_offset:255513*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255513*0 + 3*691*FLEN/8, x4, x1, x2)

inst_85172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000000fffffff; valaddr_reg:x3; val_offset:255516*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255516*0 + 3*692*FLEN/8, x4, x1, x2)

inst_85173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000001fffffff; valaddr_reg:x3; val_offset:255519*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255519*0 + 3*693*FLEN/8, x4, x1, x2)

inst_85174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000003fffffff; valaddr_reg:x3; val_offset:255522*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255522*0 + 3*694*FLEN/8, x4, x1, x2)

inst_85175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000007fffffff; valaddr_reg:x3; val_offset:255525*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255525*0 + 3*695*FLEN/8, x4, x1, x2)

inst_85176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200000ffffffff; valaddr_reg:x3; val_offset:255528*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255528*0 + 3*696*FLEN/8, x4, x1, x2)

inst_85177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200001ffffffff; valaddr_reg:x3; val_offset:255531*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255531*0 + 3*697*FLEN/8, x4, x1, x2)

inst_85178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200003ffffffff; valaddr_reg:x3; val_offset:255534*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255534*0 + 3*698*FLEN/8, x4, x1, x2)

inst_85179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200007ffffffff; valaddr_reg:x3; val_offset:255537*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255537*0 + 3*699*FLEN/8, x4, x1, x2)

inst_85180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120000fffffffff; valaddr_reg:x3; val_offset:255540*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255540*0 + 3*700*FLEN/8, x4, x1, x2)

inst_85181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120001fffffffff; valaddr_reg:x3; val_offset:255543*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255543*0 + 3*701*FLEN/8, x4, x1, x2)

inst_85182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120003fffffffff; valaddr_reg:x3; val_offset:255546*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255546*0 + 3*702*FLEN/8, x4, x1, x2)

inst_85183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120007fffffffff; valaddr_reg:x3; val_offset:255549*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255549*0 + 3*703*FLEN/8, x4, x1, x2)

inst_85184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812000ffffffffff; valaddr_reg:x3; val_offset:255552*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255552*0 + 3*704*FLEN/8, x4, x1, x2)

inst_85185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812001ffffffffff; valaddr_reg:x3; val_offset:255555*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255555*0 + 3*705*FLEN/8, x4, x1, x2)

inst_85186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812003ffffffffff; valaddr_reg:x3; val_offset:255558*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255558*0 + 3*706*FLEN/8, x4, x1, x2)

inst_85187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812007ffffffffff; valaddr_reg:x3; val_offset:255561*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255561*0 + 3*707*FLEN/8, x4, x1, x2)

inst_85188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81200fffffffffff; valaddr_reg:x3; val_offset:255564*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255564*0 + 3*708*FLEN/8, x4, x1, x2)

inst_85189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81201fffffffffff; valaddr_reg:x3; val_offset:255567*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255567*0 + 3*709*FLEN/8, x4, x1, x2)

inst_85190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81203fffffffffff; valaddr_reg:x3; val_offset:255570*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255570*0 + 3*710*FLEN/8, x4, x1, x2)

inst_85191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x81207fffffffffff; valaddr_reg:x3; val_offset:255573*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255573*0 + 3*711*FLEN/8, x4, x1, x2)

inst_85192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8120ffffffffffff; valaddr_reg:x3; val_offset:255576*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255576*0 + 3*712*FLEN/8, x4, x1, x2)

inst_85193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8121ffffffffffff; valaddr_reg:x3; val_offset:255579*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255579*0 + 3*713*FLEN/8, x4, x1, x2)

inst_85194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8123ffffffffffff; valaddr_reg:x3; val_offset:255582*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255582*0 + 3*714*FLEN/8, x4, x1, x2)

inst_85195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8127ffffffffffff; valaddr_reg:x3; val_offset:255585*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255585*0 + 3*715*FLEN/8, x4, x1, x2)

inst_85196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x8128000000000000; valaddr_reg:x3; val_offset:255588*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255588*0 + 3*716*FLEN/8, x4, x1, x2)

inst_85197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812c000000000000; valaddr_reg:x3; val_offset:255591*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255591*0 + 3*717*FLEN/8, x4, x1, x2)

inst_85198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812e000000000000; valaddr_reg:x3; val_offset:255594*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255594*0 + 3*718*FLEN/8, x4, x1, x2)

inst_85199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812f000000000000; valaddr_reg:x3; val_offset:255597*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255597*0 + 3*719*FLEN/8, x4, x1, x2)

inst_85200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812f800000000000; valaddr_reg:x3; val_offset:255600*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255600*0 + 3*720*FLEN/8, x4, x1, x2)

inst_85201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fc00000000000; valaddr_reg:x3; val_offset:255603*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255603*0 + 3*721*FLEN/8, x4, x1, x2)

inst_85202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fe00000000000; valaddr_reg:x3; val_offset:255606*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255606*0 + 3*722*FLEN/8, x4, x1, x2)

inst_85203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ff00000000000; valaddr_reg:x3; val_offset:255609*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255609*0 + 3*723*FLEN/8, x4, x1, x2)

inst_85204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ff80000000000; valaddr_reg:x3; val_offset:255612*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255612*0 + 3*724*FLEN/8, x4, x1, x2)

inst_85205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffc0000000000; valaddr_reg:x3; val_offset:255615*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255615*0 + 3*725*FLEN/8, x4, x1, x2)

inst_85206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffe0000000000; valaddr_reg:x3; val_offset:255618*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255618*0 + 3*726*FLEN/8, x4, x1, x2)

inst_85207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fff0000000000; valaddr_reg:x3; val_offset:255621*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255621*0 + 3*727*FLEN/8, x4, x1, x2)

inst_85208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fff8000000000; valaddr_reg:x3; val_offset:255624*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255624*0 + 3*728*FLEN/8, x4, x1, x2)

inst_85209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffc000000000; valaddr_reg:x3; val_offset:255627*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255627*0 + 3*729*FLEN/8, x4, x1, x2)

inst_85210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffe000000000; valaddr_reg:x3; val_offset:255630*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255630*0 + 3*730*FLEN/8, x4, x1, x2)

inst_85211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffff000000000; valaddr_reg:x3; val_offset:255633*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255633*0 + 3*731*FLEN/8, x4, x1, x2)

inst_85212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffff800000000; valaddr_reg:x3; val_offset:255636*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255636*0 + 3*732*FLEN/8, x4, x1, x2)

inst_85213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffc00000000; valaddr_reg:x3; val_offset:255639*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255639*0 + 3*733*FLEN/8, x4, x1, x2)

inst_85214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffe00000000; valaddr_reg:x3; val_offset:255642*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255642*0 + 3*734*FLEN/8, x4, x1, x2)

inst_85215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffff00000000; valaddr_reg:x3; val_offset:255645*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255645*0 + 3*735*FLEN/8, x4, x1, x2)

inst_85216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffff80000000; valaddr_reg:x3; val_offset:255648*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255648*0 + 3*736*FLEN/8, x4, x1, x2)

inst_85217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffc0000000; valaddr_reg:x3; val_offset:255651*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255651*0 + 3*737*FLEN/8, x4, x1, x2)

inst_85218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffe0000000; valaddr_reg:x3; val_offset:255654*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255654*0 + 3*738*FLEN/8, x4, x1, x2)

inst_85219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffff0000000; valaddr_reg:x3; val_offset:255657*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255657*0 + 3*739*FLEN/8, x4, x1, x2)

inst_85220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffff8000000; valaddr_reg:x3; val_offset:255660*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255660*0 + 3*740*FLEN/8, x4, x1, x2)

inst_85221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffc000000; valaddr_reg:x3; val_offset:255663*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255663*0 + 3*741*FLEN/8, x4, x1, x2)

inst_85222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffe000000; valaddr_reg:x3; val_offset:255666*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255666*0 + 3*742*FLEN/8, x4, x1, x2)

inst_85223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffff000000; valaddr_reg:x3; val_offset:255669*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255669*0 + 3*743*FLEN/8, x4, x1, x2)

inst_85224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffff800000; valaddr_reg:x3; val_offset:255672*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255672*0 + 3*744*FLEN/8, x4, x1, x2)

inst_85225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffc00000; valaddr_reg:x3; val_offset:255675*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255675*0 + 3*745*FLEN/8, x4, x1, x2)

inst_85226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffe00000; valaddr_reg:x3; val_offset:255678*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255678*0 + 3*746*FLEN/8, x4, x1, x2)

inst_85227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffff00000; valaddr_reg:x3; val_offset:255681*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255681*0 + 3*747*FLEN/8, x4, x1, x2)

inst_85228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffff80000; valaddr_reg:x3; val_offset:255684*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255684*0 + 3*748*FLEN/8, x4, x1, x2)

inst_85229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffc0000; valaddr_reg:x3; val_offset:255687*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255687*0 + 3*749*FLEN/8, x4, x1, x2)

inst_85230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffe0000; valaddr_reg:x3; val_offset:255690*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255690*0 + 3*750*FLEN/8, x4, x1, x2)

inst_85231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffff0000; valaddr_reg:x3; val_offset:255693*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255693*0 + 3*751*FLEN/8, x4, x1, x2)

inst_85232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffff8000; valaddr_reg:x3; val_offset:255696*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255696*0 + 3*752*FLEN/8, x4, x1, x2)

inst_85233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffffc000; valaddr_reg:x3; val_offset:255699*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255699*0 + 3*753*FLEN/8, x4, x1, x2)

inst_85234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffffe000; valaddr_reg:x3; val_offset:255702*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255702*0 + 3*754*FLEN/8, x4, x1, x2)

inst_85235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffff000; valaddr_reg:x3; val_offset:255705*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255705*0 + 3*755*FLEN/8, x4, x1, x2)

inst_85236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffff800; valaddr_reg:x3; val_offset:255708*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255708*0 + 3*756*FLEN/8, x4, x1, x2)

inst_85237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffffc00; valaddr_reg:x3; val_offset:255711*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255711*0 + 3*757*FLEN/8, x4, x1, x2)

inst_85238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffffe00; valaddr_reg:x3; val_offset:255714*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255714*0 + 3*758*FLEN/8, x4, x1, x2)

inst_85239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffffff00; valaddr_reg:x3; val_offset:255717*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255717*0 + 3*759*FLEN/8, x4, x1, x2)

inst_85240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffffff80; valaddr_reg:x3; val_offset:255720*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255720*0 + 3*760*FLEN/8, x4, x1, x2)

inst_85241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffffffc0; valaddr_reg:x3; val_offset:255723*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255723*0 + 3*761*FLEN/8, x4, x1, x2)

inst_85242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffffffe0; valaddr_reg:x3; val_offset:255726*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255726*0 + 3*762*FLEN/8, x4, x1, x2)

inst_85243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffffff0; valaddr_reg:x3; val_offset:255729*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255729*0 + 3*763*FLEN/8, x4, x1, x2)

inst_85244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffffff8; valaddr_reg:x3; val_offset:255732*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255732*0 + 3*764*FLEN/8, x4, x1, x2)

inst_85245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffffffc; valaddr_reg:x3; val_offset:255735*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255735*0 + 3*765*FLEN/8, x4, x1, x2)

inst_85246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812ffffffffffffe; valaddr_reg:x3; val_offset:255738*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255738*0 + 3*766*FLEN/8, x4, x1, x2)

inst_85247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xab6915a5350fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x012 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faab6915a5350fa; op2val:0x8000;
op3val:0x812fffffffffffff; valaddr_reg:x3; val_offset:255741*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255741*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6893461009017117592,64,FLEN)
NAN_BOXED(2320289908986731589,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271808,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271809,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271811,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271815,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271823,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271839,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271871,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225271935,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225272063,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225272319,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225272831,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225273855,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225275903,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225279999,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225288191,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225304575,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225337343,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225402879,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225533951,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664225796095,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664226320383,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664227368959,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664229466111,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664233660415,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664242049023,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664258826239,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664292380671,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664359489535,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664493707263,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971664762142719,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971665299013631,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971666372755455,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971668520239103,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971672815206399,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971681405140991,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971698585010175,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971732944748543,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971801664225279,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726971939103178751,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726972213981085695,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726972763736899583,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726973863248527359,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726976062271782911,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726980460318294015,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13726989256411316223,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13727006848597360639,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13727042032969449471,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13727112401713627135,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13727253139201982463,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13727534614178693119,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13728097564132114431,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13729223464038957055,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13729223464038957056,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13730349363945799680,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13730912313899220992,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731193788875931648,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731334526364286976,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731404895108464640,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731440079480553472,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731457671666597888,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731466467759620096,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731470865806131200,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731473064829386752,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731474164341014528,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731474714096828416,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731474988974735360,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475126413688832,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475195133165568,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475229492903936,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475246672773120,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475255262707712,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475259557675008,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475261705158656,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475262778900480,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263315771392,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263584206848,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263718424576,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263785533440,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263819087872,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263835865088,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263844253696,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263848448000,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263850545152,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263851593728,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852118016,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852380160,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852511232,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852576768,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852609536,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852625920,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852634112,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852638208,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852640256,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852641280,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852641792,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642048,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642176,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642240,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642272,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642288,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642296,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642300,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642302,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13731475263852642303,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893470207388127085,64,FLEN)
NAN_BOXED(11512130046888685671,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707136,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707137,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707139,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707143,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707151,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707167,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707199,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707263,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707391,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707647,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831708159,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831709183,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831711231,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831715327,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831723519,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831739903,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831772671,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831838207,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831969279,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820832231423,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820832755711,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820833804287,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820835901439,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820840095743,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820848484351,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820865261567,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820898815999,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820965924863,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026821100142591,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026821368578047,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026821905448959,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026822979190783,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026825126674431,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026829421641727,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026838011576319,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026855191445503,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026889551183871,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026958270660607,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417027095709614079,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417027370587521023,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417027920343334911,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417029019854962687,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417031218878218239,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417035616924729343,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417044413017751551,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417062005203795967,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417097189575884799,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417167558320062463,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417308295808417791,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417589770785128447,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9418152720738549759,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9419278620645392383,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9419278620645392384,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9420404520552235008,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9420967470505656320,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421248945482366976,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421389682970722304,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421460051714899968,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421495236086988800,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421512828273033216,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421521624366055424,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421526022412566528,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421528221435822080,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421529320947449856,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421529870703263744,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530145581170688,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530283020124160,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530351739600896,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530386099339264,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530403279208448,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530411869143040,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530416164110336,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530418311593984,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530419385335808,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530419922206720,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420190642176,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420324859904,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420391968768,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420425523200,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420442300416,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420450689024,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420454883328,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420456980480,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458029056,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458553344,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458815488,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420458946560,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459012096,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459044864,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459061248,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459069440,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459073536,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459075584,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459076608,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077120,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077376,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077504,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077568,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077600,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077616,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077624,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077628,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077630,64,FLEN)
NAN_BOXED(6893474592714251413,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077631,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926720,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926721,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926723,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926727,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926735,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926751,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926783,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926847,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926975,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656927231,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656927743,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656928767,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656930815,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656934911,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656943103,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656959487,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656992255,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657057791,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657188863,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657451007,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657975295,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228659023871,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228661121023,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228665315327,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228673703935,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228690481151,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228724035583,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228791144447,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228925362175,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451229193797631,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451229730668543,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451230804410367,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451232951894015,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451237246861311,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451245836795903,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451263016665087,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451297376403455,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451366095880191,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451503534833663,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451778412740607,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322452328168554495,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322453427680182271,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322455626703437823,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322460024749948927,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322468820842971135,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322486413029015551,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322521597401104383,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322591966145282047,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322732703633637375,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9323014178610348031,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9323577128563769343,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9324703028470611967,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9324703028470611968,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9325828928377454592,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326391878330875904,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326673353307586560,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326814090795941888,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326884459540119552,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326919643912208384,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326937236098252800,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326946032191275008,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326950430237786112,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326952629261041664,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326953728772669440,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954278528483328,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954553406390272,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954690845343744,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954759564820480,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954793924558848,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954811104428032,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954819694362624,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954823989329920,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954826136813568,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954827210555392,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954827747426304,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828015861760,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828150079488,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828217188352,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828250742784,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828267520000,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828275908608,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828280102912,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828282200064,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828283248640,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828283772928,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284035072,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284166144,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284231680,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284264448,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284280832,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284289024,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284293120,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284295168,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284296192,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284296704,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284296960,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297088,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297152,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297184,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297200,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297208,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297212,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297214,64,FLEN)
NAN_BOXED(6893494370854956253,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297215,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633344,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633345,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633347,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633351,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633359,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633375,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633407,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633471,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633599,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416633855,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416634367,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416635391,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416637439,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416641535,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416649727,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416666111,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416698879,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416764415,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059416895487,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059417157631,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059417681919,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059418730495,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059420827647,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059425021951,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059433410559,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059450187775,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059483742207,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059550851071,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059685068799,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290059953504255,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290060490375167,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290061564116991,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290063711600639,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290068006567935,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290076596502527,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290093776371711,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290128136110079,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290196855586815,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290334294540287,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116290609172447231,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116291158928261119,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116292258439888895,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116294457463144447,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116298855509655551,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116307651602677759,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116325243788722175,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116360428160811007,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116430796904988671,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116571534393343999,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4116853009370054655,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4117415959323475967,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4118541859230318591,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4118541859230318592,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4119667759137161216,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120230709090582528,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120512184067293184,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120652921555648512,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120723290299826176,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120758474671915008,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120776066857959424,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120784862950981632,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120789260997492736,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120791460020748288,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120792559532376064,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793109288189952,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793384166096896,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793521605050368,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793590324527104,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793624684265472,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793641864134656,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793650454069248,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793654749036544,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793656896520192,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793657970262016,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793658507132928,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793658775568384,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793658909786112,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793658976894976,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659010449408,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659027226624,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659035615232,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659039809536,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659041906688,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659042955264,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043479552,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043741696,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043872768,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043938304,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043971072,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043987456,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043995648,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659043999744,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044001792,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044002816,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003328,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003584,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003712,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003776,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003808,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003824,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003832,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003836,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003838,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4120793659044003839,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6893500025932997861,64,FLEN)
NAN_BOXED(2320261595913474559,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189120,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189121,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189123,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189127,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189135,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189151,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189183,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189247,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189375,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341189631,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341190143,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341191167,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341193215,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341197311,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341205503,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341221887,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341254655,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341320191,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341451263,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219341713407,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219342237695,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219343286271,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219345383423,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219349577727,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219357966335,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219374743551,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219408297983,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219475406847,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219609624575,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041219878060031,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041220414930943,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041221488672767,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041223636156415,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041227931123711,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041236521058303,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041253700927487,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041288060665855,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041356780142591,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041494219096063,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435041769097003007,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435042318852816895,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435043418364444671,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435045617387700223,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435050015434211327,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435058811527233535,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435076403713277951,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435111588085366783,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435181956829544447,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435322694317899775,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9435604169294610431,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9436167119248031743,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9437293019154874367,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9437293019154874368,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9438418919061716992,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9438981869015138304,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439263343991848960,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439404081480204288,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439474450224381952,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439509634596470784,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439527226782515200,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439536022875537408,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439540420922048512,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439542619945304064,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439543719456931840,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544269212745728,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544544090652672,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544681529606144,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544750249082880,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544784608821248,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544801788690432,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544810378625024,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544814673592320,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544816821075968,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544817894817792,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818431688704,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818700124160,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818834341888,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818901450752,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818935005184,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818951782400,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818960171008,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818964365312,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818966462464,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818967511040,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968035328,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968297472,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968428544,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968494080,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968526848,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968543232,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968551424,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968555520,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968557568,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968558592,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559104,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559360,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559488,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559552,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559584,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559600,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559608,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559612,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559614,64,FLEN)
NAN_BOXED(6893521180076102015,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559615,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444736,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444737,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444739,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444743,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444751,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444767,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444799,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444863,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444991,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147445247,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147445759,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147446783,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147448831,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147452927,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147461119,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147477503,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147510271,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147575807,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147706879,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147969023,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830148493311,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830149541887,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830151639039,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830155833343,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830164221951,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830180999167,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830214553599,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830281662463,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830415880191,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830684315647,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436831221186559,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436832294928383,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436834442412031,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436838737379327,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436847327313919,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436864507183103,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436898866921471,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436967586398207,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304437105025351679,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304437379903258623,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304437929659072511,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304439029170700287,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304441228193955839,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304445626240466943,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304454422333489151,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304472014519533567,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304507198891622399,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304577567635800063,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304718305124155391,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304999780100866047,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9305562730054287359,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9306688629961129983,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9306688629961129984,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9307814529867972608,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308377479821393920,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308658954798104576,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308799692286459904,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308870061030637568,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308905245402726400,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308922837588770816,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308931633681793024,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308936031728304128,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308938230751559680,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308939330263187456,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308939880019001344,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940154896908288,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940292335861760,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940361055338496,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940395415076864,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940412594946048,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940421184880640,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940425479847936,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940427627331584,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940428701073408,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429237944320,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429506379776,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429640597504,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429707706368,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429741260800,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429758038016,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429766426624,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429770620928,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429772718080,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429773766656,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774290944,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774553088,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774684160,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774749696,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774782464,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774798848,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774807040,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774811136,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774813184,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774814208,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774814720,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774814976,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815104,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815168,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815200,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815216,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815224,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815228,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815230,64,FLEN)
NAN_BOXED(6893522915045888250,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815231,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
